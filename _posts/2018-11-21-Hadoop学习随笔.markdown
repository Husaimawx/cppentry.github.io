---
layout:     post
title:      Hadoop学习随笔
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/zay109327402/article/details/78786652				</div>
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<h1 id="hadoop学习随笔">Hadoop学习随笔</h1>



<h3 id="hadoop项目主要包括以下四个模块">Hadoop项目主要包括以下四个模块</h3>

<p>◆ Hadoop Common: <br>
为其他Hadoop模块提供基础设施 <br>
◆ Hadoop HDFS:  <br>
一个高可靠、高吞吐量的分布式文件系统 <br>
◆ Hadoop MapReduce: <br>
 一个分布式的离线并行计算框架 <br>
◆ Hadoop YARN:  <br>
一个新的MapReduce框架，任务调度与资源管理</p>



<h3 id="apache-hadoop起源">Apache Hadoop起源</h3>

<p>◆Apache Lucene <br>
开源的高性能全文检索工具包 <br>
◆Apache Nutch <br>
开源的Web搜索引擎 <br>
◆Google三大论文 <br>
MapReduce/GFS/BigTable <br>
◆Apache Hadoop <br>
大规模数据处理</p>



<h2 id="一张图了解分布式的好处">一张图了解分布式的好处</h2>

<p><img src="https://img-blog.csdn.net/20171212215808532?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbW9iYW5jaGVuZ3NodWFuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title=""></p>



<h2 id="hdfs">HDFS</h2>

<p>HDFS即Hadoop Distributed File System分布式文件系统</p>

<p>——————-<img src="https://img-blog.csdn.net/20171212214436887?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbW9iYW5jaGVuZ3NodWFuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title=""></p>



<h3 id="hdfs服务功能">HDFS服务功能</h3>

<p>◆NameNode是主节点，存储文件的元数据如文件名，文件目录结构，文件属性 <br>
（生成时间,副本数,文件权限），以及每个文件的块列表和块所在DataNode等。 <br>
◆DataNode 在本地文件系统存储文件块数据，以及块数据的校验和。 <br>
◆Secondary NameNode 用来监控HDFS状态的辅助后台程序，每隔一段时间获 <br>
取HDFS元数据的快照。</p>



<h4 id="namenode">NameNode</h4>

<p>◆Namenode 是一个中心服务器，单一节点（简化系统的设计和实现），负责管理文件系统的名 <br>
字空间(namespace)以及客户端对文件的访问。 <br>
◆文件操作，NameNode 负责文件元数据的操作，DataNode负责处理文件内容的读写请求，跟 <br>
文件内容相关的数据流不经过NameNode，只会询问它跟那个DataNode联系，否则 <br>
NameNode会成为系统的瓶颈。 <br>
◆副本存放在哪些DataNode上由 NameNode来控制，根据全局情况做出块放置决定，读取文 <br>
件时NameNode尽量让用户先读取最近的副本，降低带块消耗和读取时延 <br>
◆Namenode 全权管理数据块的复制，它周期性地从集群中的每个Datanode接收心跳信号和块 <br>
状态报告(Blockreport)。接收到心跳信号意味着该Datanode节点工作正常。块状态报告包含了 <br>
一个该Datanode上所有数据块的列表。</p>



<h4 id="datanode">DataNode</h4>

<p>◆一个数据块在DataNode以文件存储在磁盘上，包括两个文件，一个是数据本身，一个是元数据 <br>
包括数据块的长度，块数据的校验和，以及时间戳 <br>
◆DataNode启动后向NameNode注册，通过后，周期性（1小时）的向NameNode上报所有的 <br>
块信息。 <br>
◆心跳是每3秒一次，心跳返回结果带有NameNode给该DataNode的命令如复制块数据到另一 <br>
台机器，或删除某个数据块。如果超过10分钟没有收到某个DataNode 的心跳，则认为该节点不 <br>
可用。 <br>
◆集群运行中可以安全加入和退出一些机器</p>



<h4 id="文件">文件</h4>

<p>◆文件切分成块（默认大小128M），以块为单位，每个块有多个副本存储在不同的机器上，副本 <br>
数可在文件生成时指定（默认3） <br>
◆NameNode 是主节点，存储文件的元数据如文件名，文件目录结构，文件属性（生成时间,副 <br>
本数,文件权限），以及每个文件的块列表以及块所在的DataNode等等 <br>
◆DataNode 在本地文件系统存储文件块数据，以及块数据的校验和。 <br>
◆可以创建、删除、移动或重命名文件，当文件创建、写入和关闭之后不能修改文件内容。</p>



<h3 id="mapreduce计算框架">MapReduce计算框架</h3>

<p>◆将计算过程分为两个阶段：Map和Reduce <br>
Map阶段并行处理输入数据 <br>
Reduce阶段对Map结果进行汇总 <br>
◆ Shuffle链接Map和Reduce两个阶段 <br>
Map Task将数据写到本地磁盘 <br>
Reduce Task从每个Map Task上读取一份数据 <br>
◆ 仅适合离线批处理 <br>
具有很好的容错性和扩展性 <br>
适合简单的批处理任务 <br>
◆ 缺点明显 <br>
启动开销大，过多使用磁盘导致效率低下等</p>



<h3 id="yarn服务组件">YARN服务组件</h3>

<p>◆ YARN 总体上仍然是Master/Slave 结构，在整个资源管理框架中，ResourceManager 为 <br>
Master，NodeManager 为Slave。 <br>
◆ ResourceManager 负责对各个NodeManager 上的资源进行统一管理和调度 <br>
◆ 当用户提交一个应用程序时，需要提供一个用以跟踪和管理这个程序的。 <br>
ApplicationMaster，它负责向ResourceManager 申请资源，并要求NodeManger 启动可以占 <br>
用一定资源的任务。 <br>
◆ 由于不同的ApplicationMaster 被分布到不同的节点上，因此它们之间不会相互影响</p>



<h4 id="resourcemanager">ResourceManager</h4>

<p>◆ 全局的资源管理器，整个集群只有一个，负责集群资源的统一管理和调度分配。 <br>
◆ 功能 <br>
 - 处理客户端请求  <br>
 - 启动/监控ApplicationMaster  <br>
 - 监控NodeManager  <br>
 - 资源分配与调度</p>



<h4 id="nodemanager">NodeManager</h4>

<p>◆ 整个集群有多个，负责单节点资源管理和使用 <br>
◆ 功能 <br>
 - 单个节点上的资源管理和任务管理  <br>
 - 处理来自ResourceManager的命令  <br>
 - 处理来自ApplicationMaster的命令 <br>
◆ NodeManager管理抽象容器，这些容器代表着可供一个特定应用程序使用的针对每个节点的资 <br>
源。 <br>
◆ 定时地向RM汇报本节点上的资源使用情况和各个Container的运行状态</p>



<h4 id="applicationmanager">ApplicationManager</h4>

<p>管理一个在YARN 内运行的应用程序的每个实例 <br>
◆ 功能</p>

<ul>
<li>数据切分</li>
<li>为应用程序申请资源，并进一步分配给内部任务 </li>
<li>任务监控与容错</li>
</ul>

<p>◆ 负责协调来自ResourceManager的资源，幵通过NodeManager监视容器的执行和资源使用 <br>
（CPU、内存等的资源分配）。</p>



<h4 id="container">Container</h4>

<p>◆ YARN中的资源抽象，封装某个节点上多维度资源，如内存、CPU、磁盘、网络等，当AM向RM申请资源时， <br>
RM向AM返回的资源便是用Container表示的。 <br>
◆ YARN 会为每个任务分配一个Container，且该任务只能使用该Container中描述的资源。 <br>
◆ 功能</p>

<ul>
<li>对任务运行环境的抽象</li>
<li>描述一系列信息  </li>
<li>任务启动命令  </li>
<li>任务运行环境</li>
</ul>



<h4 id="yarn资源管理">YARN资源管理</h4>

<p>◆ 资源调度和资源隔离是YARN作为一个资源管理系统，最重要和最基础的两个功能。资源调度由 <br>
ResourceManager完成，而资源隔离由各个NM实现。 <br>
◆ ResourceManager将某个NodeManager上资源分配给任务（这就是所谓的“资源调度”）后， <br>
NodeManager需按照要求为任务提供相应的资源，甚至保证这些资源应具有独占性，为任务运 <br>
行提供基础的保证，这就是所谓的资源隔离。 <br>
◆ 当谈及到资源时，我们通常指内存，CPU和IO三种资源。Hadoop YARN同时支持内存和CPU <br>
两种资源的调度。 <br>
◆ 内存资源的多少会会决定任务的生死，如果内存不够，任务可能会运行失败；相比之下，CPU资 <br>
源则不同，它只会决定任务运行的快慢，不会对生死产生影响。</p>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>