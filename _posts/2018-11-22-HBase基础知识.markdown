---
layout:     post
title:      HBase基础知识
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                <p>HBase官网：<a href="http://hbase.apache.org/" rel="nofollow">http://hbase.apache.org/</a></p>

<p>学习网站：<a href="https://hbase.apache.org/0.94/book/quickstart.html" rel="nofollow">https://hbase.apache.org/0.94/book/quickstart.html</a>、<a href="https://www.yiibai.com/hbase" rel="nofollow">https://www.yiibai.com/hbase</a></p>

<h2><strong>一、HBase简介 </strong></h2>

<p>       HBase是一个建立在Hadoop文件系统之上的分布式的、面向列的开源数据库，源于google的一篇论文《bigtable：一个结构化数据的分布式存储系统》。HBase是Google Bigtable的开源实现，它利用Hadoop HDFS作为其文件存储系统，利用Hadoop MapReduce来处理HBase中的海量数据，利用Zookeeper作为协同服务。 </p>

<p>       HBase是一个数据模型，类似于谷歌的大表设计，可以提供快速随机访问海量结构化数据。它利用了Hadoop的文件系统（HDFS）提供的容错能力。它是Hadoop的生态系统，提供对数据的随机实时读/写访问，是Hadoop文件系统的一部分。人们可以直接或通过HBase的存储HDFS数据。使用HBase在HDFS读取消费/随机访问数据。 HBase在Hadoop的文件系统之上，并提供了读写访问。</p>

<p><img alt="HBase Flow" class="has" src="https://www.yiibai.com/uploads/allimg/141225/1-1412250H30NV.jpg"></p>

<h2><br><strong>二、HBase的存储机制</strong></h2>

<p>        HBase是一个面向列的数据库，在表中它由行排序。表模式定义只能列族，也就是键值对。一个表有多个列族以及每一个列族可以有任意数量的列。后续列的值连续地存储在磁盘上。表中的每个单元格值都具有时间戳。总之，在一个HBase：</p>

<p>        <span style="color:#f33b45;"><u>表是行的集合。</u></span></p>

<p><span style="color:#f33b45;">       <u> 行是列族的集合</u>。</span></p>

<p><span style="color:#f33b45;">       <u> 列族是列的集合</u>。</span></p>

<p><span style="color:#f33b45;">        <u>列是键值对的集合</u>。</span></p>

<h2><strong>三、HBase的表结构 </strong></h2>

<p>       HBase以表的形式存储数据。表有行和列组成。列划分为若干个列族/列簇(column family)。 </p>

<p>     <strong>  1、Row Key （行键）</strong><br><br>
　　与nosql数据库们一样，row key是用来检索记录的主键。访问hbase table中的行，只有三种方式： <br><br>
　　　　(1) 通过单个row key访问 <br><br>
　　　　(2) 通过row key的range <br><br>
　　　　(3) 全表扫描 <br><br>
　　Row key行键 (Row key)可以是任意字符串(最大长度是 64KB，实际应用中长度一般为 10-100bytes)，在hbase内部，row key保存为字节数组。 <br><br>
　　存储时，数据按照Row key的<span style="color:#f33b45;">字典序(byte order)</span>排序存储。设计key时，要充分排序存储这个特性，将经常一起读取的行存储放到一起。(位置相关性) <br><br>
　　（注意： 字典序对int排序的结果是1,10,100,11,12,13,14,15,16,17,18,19,2,20,21,…,9,91,92,93,94,95,96,97,98,99。要保持整形的自然序，行键必须用0作左填充。）<br><br>
　　行的一次读写是原子操作 (不论一次读写多少列)。这个设计决策能够使用户很容易的理解程序在对同一个行进行并发更新操作时的行为。 <br><br>
　　<strong>2、 column family （列族）</strong><br><br>
　　hbase表中的每个列，都归属与某个列族。列族是表的schema的一部分(而列不是)，必须在使用表之前定义。列名都以列族作为前缀。例如courses:history ， courses:math 都属于 courses 这个列族。 <br><br>
　　访问控制、磁盘和内存的使用统计都是在列族层面进行的。实际应用中，列族上的控制权限能帮助我们管理不同类型的应用：我们允许一些应用可以添加新的基本数据、一些应用可以读取基本数据并创建继承的列族、一些应用则只允许浏览数据（甚至可能因为隐私的原因不能浏览所有数据）。 <br><br>
　　<strong>3、Cell （单元 ）</strong><br><br>
　　HBase中通过row和columns确定的为一个存贮单元称为cell。由{row key, column( =&lt;family&gt; + &lt;label&gt;), version} 唯一确定的单元。cell中的数据是没有类型的，全部是字节码形式存贮。 <br><br>
　　<strong>4、timestamp（时间戳）</strong><br><br>
　　每个cell都保存着同一份数据的多个版本。版本通过时间戳来索引。时间戳的类型是 64位整型。时间戳可以由hbase(在数据写入时自动 )赋值，此时时间戳是精确到毫秒的当前系统时间。时间戳也可以由客户显式赋值。如果应用程序要避免数据版本冲突，就必须自己生成具有唯一性的时间戳。每个 cell中，不同版本的数据按照时间倒序排序，即最新的数据排在最前面。 <br><br>
　　为了避免数据存在过多版本造成的的管理 (包括存贮和索引)负担，hbase提供了两种数据版本回收方式。一是保存数据的最后n个版本，二是保存最近一段时间内的版本（比如最近七天）。用户可以针对每个列族进行设置。 </p>

<h2><strong>四、与RDBMS比较</strong></h2>

<table><tbody><tr><th>                                         HBase</th>
			<th>                                        RDBMS</th>
		</tr><tr><td>HBase无模式，它不具有固定列模式的概念;仅定义列族。</td>
			<td>RDBMS有它的模式，描述表的整体结构的约束。</td>
		</tr><tr><td>它专门创建为宽表。 HBase是横向扩展。</td>
			<td>这些都是细而专为小表。很难形成规模。</td>
		</tr><tr><td>没有任何事务存在于HBase。</td>
			<td>RDBMS是事务性的。</td>
		</tr><tr><td>它反规范化的数据。</td>
			<td>它具有规范化的数据。</td>
		</tr><tr><td>它用于半结构以及结构化数据是非常好的。</td>
			<td>用于结构化数据非常好。</td>
		</tr></tbody></table>            </div>
                </div>