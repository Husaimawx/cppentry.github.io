---
layout:     post
title:      kafka单机版安装测试
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。--caicongyang					https://blog.csdn.net/caicongyang/article/details/53159343				</div>
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<p>1.kafka</p>
<p>1.1可以让你发布订阅你的消息，类似于消息系统</p>
<p>1.2可以让你以容错方式存储记录流</p>
<p>1.3可以让你处理记录流当它们发生时。</p>
<p>kafka的优势</p>
<p>构建可靠地在系统或应用程序之间获取数据的实时流数据流水线<br>
构建变换或响应数据流的实时流应用程序<br></p>
<p>2.安装</p>
<p>下载地址：<a href="http://mirrors.cnnic.cn/apache/kafka/0.10.1.0/kafka_2.11-0.10.1.0.tgz" rel="nofollow">http://mirrors.cnnic.cn/apache/kafka/0.10.1.0/kafka_2.11-0.10.1.0.tgz</a><br></p>
<p>安装略</p>
<p>3.启动测试</p>
<p>3.1启动自带的zookeeper</p>
<p></p>
<pre><code class="language-plain">nohup ./zookeeper-server-start.sh ../config/zookeeper.properties &amp;</code></pre><br>
3.2启动server
<p></p>
<p></p>
<pre><code class="language-plain">nohup ./kafka-server-start.sh ../config/server.properties &amp;</code></pre><br>
3.3创建topic
<p></p>
<p></p>
<pre><code class="language-plain">./kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test</code></pre><br><p>3.4测试topic是否创建成功</p>
<p></p>
<pre><code class="language-plain">./kafka-topics.sh --list --zookeeper localhost:2181</code></pre>
<p><br></p>
<p>查看topic的详细描述</p>
<p></p><pre><code class="language-plain">./kafka-topics.sh --describe --zookeeper localhost:2181 --topic test</code></pre><br><p></p>
<p>3.5命令行启动生产者发送hello kafka的消息</p>
<p></p>
<p></p>
<pre><code class="language-plain">./kafka-console-producer.sh --broker-list localhost:9092 --topic test
hello kafka</code></pre><br>
3.6命令行启动消费者收到消息
<p></p>
<p></p>
<pre><code class="language-plain">./kafka-console-consumer.sh --zookeeper localhost:2181 --topic test --from-beginning
hello kafka</code></pre><br><p>4.java api (基于2.11-0.10.1.0 新版本api)</p>
<p>producer生产者</p>
<p></p><pre><code class="language-java">/**
 * caicongyang.com Inc.
 * Copyright (c) 2004-2016 All Rights Reserved.
 */
package com.caicongyang.kafka;

import java.util.Properties;

import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.Producer;
import org.apache.kafka.clients.producer.ProducerRecord;

/**
 * @author caicongyang1
 * @version id: producer, v 0.1 16/11/14 下午4:50 caicongyang1 Exp $$
 */
public class producer {
    public static void main(String[] args) {
        Properties props = new Properties();
        props.put("bootstrap.servers", "localhost:9092");
        //all,-1:所有副本都同步完成，才确认消息发送成功
        //1:一个副本写入完成既确认消息发送成功
        //0:无需等待broker确认消息写入，不触发重试机制
        props.put("acks", "all");
        props.put("retries", 3);
        props.put("batch.size", 16384);
        props.put("linger.ms", 1);
        props.put("buffer.memory", 33554432);
        props.put("key.serializer", "org.apache.kafka.common.serialization.StringSerializer");
        props.put("value.serializer", "org.apache.kafka.common.serialization.StringSerializer");

        Producer&lt;String, String&gt; producer = new KafkaProducer&lt;&gt;(props);
        for(int i = 0; i &lt; 100; i++){
            producer.send(new ProducerRecord&lt;String, String&gt;("test", Integer.toString(i), Integer.toString(i)));

        }
        producer.close();
    }
}
</code></pre><br><br><p>consumer消费者</p>
<p></p><pre><code class="language-java">/**
 * caicongyang.com Inc.
 * Copyright (c) 2004-2016 All Rights Reserved.
 */
package com.caicongyang.kafka;

import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;

import java.util.Arrays;
import java.util.Properties;

/**
 * @author caicongyang1
 * @version id: consumer, v 0.1 16/11/14 下午5:15 caicongyang1 Exp $$
 */
public class consumer {
    public static void main(String[] args) {
        Properties props = new Properties();
        props.put("bootstrap.servers", "localhost:9092");
        props.put("group.id", "test");
        props.put("enable.auto.commit", "true");
        props.put("auto.commit.interval.ms", "1000");
        props.put("key.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
        props.put("value.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
        KafkaConsumer&lt;String, String&gt; consumer = new KafkaConsumer&lt;&gt;(props);
        consumer.subscribe(Arrays.asList("test"));
        while (true) {
            ConsumerRecords&lt;String, String&gt; records = consumer.poll(10);
            for (ConsumerRecord&lt;String, String&gt; record : records)
                System.out.printf("offset = %d, key = %s, value = %s%n", record.offset(), record.key(), record.value());
        }
    }
}
</code></pre><br><br><p><br></p>
<p><br></p>
<p><br></p>
<p></p>
<p><br></p>
<p><br></p>
<p><br></p>
<p><br></p>
            </div>
                </div>