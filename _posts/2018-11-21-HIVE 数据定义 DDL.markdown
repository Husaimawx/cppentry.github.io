---
layout:     post
title:      HIVE 数据定义 DDL
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<p><strong>Databases in Hive</strong> -- 在HIVE 中使用数据库<br></p>
<p><br></p>
<p>Hive offers no support for row-level  inserts, updates, and deletes.</p>
Hive doesn’t support transactions. Hive adds ex-tensions to provide<br>
better performance in the context of Hadoop and to integrate with<br><p>custom extensions and even external programs.</p>
<p><br></p>
<p>Hive 不支持行级插入，更新，删除。也不支持事务</p>
<p><br></p>
<p>创建数据库<br></p>
<p></p>
<pre><code class="language-sql">hive&gt; CREATE DATABASE financials;</code></pre>
<p></p>
<p><br></p>
<p>仓库数据库判断数据库是否存在<br></p>
<pre><code class="language-sql">hive&gt; CREATE DATABASE IF NOT EXISTS financials;</code></pre>
<p></p>
<p><br></p>
<p>显示现在有的数据库<br></p>
<pre><code class="language-sql">hive&gt; SHOW DATABASES;
default
financials
hive&gt; CREATE DATABASE human_resources;
hive&gt; SHOW DATABASES;
default
financials
human_resources</code></pre>
<p></p>
<p><br></p>
<p>条件查询数据库<br></p>
<p></p>
<pre><code class="language-sql">hive&gt; SHOW DATABASES LIKE 'h.*';
human_resources
hive&gt; ...</code></pre><br><p></p>
<p>创建指定存放文件位置 数据库<br></p>
<p></p>
<pre><code class="language-sql">hive&gt; CREATE DATABASE financials
    &gt; LOCATION '/my/preferred/directory';</code></pre>
<p></p>
<p><br></p>
<p>创建数据库时 添加注释信息<br></p>
<p></p>
<pre><code class="language-sql">hive&gt; CREATE DATABASE financials
    &gt; COMMENT 'Holds all financial tables';
hive&gt; DESCRIBE DATABASE financials;
financials   Holds all financial tables
  hdfs://master-server/user/hive/warehouse/financials.db</code></pre><br><br><p></p>
<p>创建数据库 添加扩展信息<br></p>
<p></p>
<pre><code class="language-sql">hive&gt; CREATE DATABASE financials
    &gt; WITH DBPROPERTIES ('creator' = 'Mark Moneybags', 'date' = '2012-01-02');
hive&gt; DESCRIBE DATABASE financials;
financials   hdfs://master-server/user/hive/warehouse/financials.db
hive&gt; DESCRIBE DATABASE EXTENDED financials;
financials   hdfs://master-server/user/hive/warehouse/financials.db
 {date=2012-01-02, creator=Mark Moneybags);</code></pre>
<p></p>
<p><br></p>
<p>使用数据库</p>
<p></p>
<pre><code class="language-sql">hive&gt; USE financials;</code></pre>
<p></p>
<p><br></p>
<p>设置显示当前数据库</p>
<p></p>
<pre><code class="language-sql">hive&gt; set hive.cli.print.current.db=true;
hive (financials)&gt; USE default;
hive (default)&gt; set hive.cli.print.current.db=false;
hive&gt; ...</code></pre>
<p></p>
<p><br></p>
<p>删除数据库</p>
<p></p>
<pre><code class="language-sql">hive&gt; DROP DATABASE IF EXISTS financials;</code></pre>
<p></p>
<p><br></p>
<p>当数据库存在表时，先要删除表 再能删除数据库<br></p>
<p></p>
<pre><code class="language-sql">hive&gt; DROP DATABASE IF EXISTS financials CASCADE;</code></pre><br><p></p>
<p><strong><br></strong></p>
<p><strong>Alter Database</strong> -- 修改数据库</p>
<p><br></p>
<p></p>
<pre><code class="language-sql">hive&gt; ALTER DATABASE financials SET DBPROPERTIES ('edited-by' = 'Joe Dba');</code></pre><br>
There is no way to delete or “unset” a DBPROPERTY  没有方法删除或重置 DBPROPERTY 
<p></p>
<p><br></p>
<p><br></p>
<p><strong>Creating Tables</strong> -- 创建表</p>
<p></p>
<pre><code class="language-sql">CREATE TABLE IF NOT EXISTS mydb.employees (
  name         STRING COMMENT 'Employee name',
  salary       FLOAT  COMMENT 'Employee salary',
  subordinates ARRAY&lt;STRING&gt; COMMENT 'Names of subordinates',
  deductions   MAP&lt;STRING, FLOAT&gt;
               COMMENT 'Keys are deductions names, values are percentages
  address      STRUCT&lt;street:STRING, city:STRING, state:STRING, zip:INT&gt;
               COMMENT 'Home address')
COMMENT 'Description of the table'
TBLPROPERTIES ('creator'='me', 'created_at'='2012-01-02 10:00:00', ...)
LOCATION '/user/hive/warehouse/mydb.db/employees';</code></pre><br><p></p>
<p>创建表-复制表结构<br></p>
<p></p>
<pre><code class="language-sql">CREATE TABLE IF NOT EXISTS mydb.employees2
LIKE mydb.employees;</code></pre>
<p></p>
<p><br></p>
<p>显示某个数据库中的表<br></p>
<p></p>
<pre><code class="language-sql">hive&gt; USE mydb;
hive&gt; SHOW TABLES;
employees
table1
table2</code></pre><br><pre><code class="language-sql">hive&gt; USE default;
hive&gt; SHOW TABLES IN mydb;
employees</code></pre><br><p></p>
<p>显示指定筛选条件 表名<br></p>
<p></p>
<pre><code class="language-sql">hive&gt; USE mydb;
hive&gt; SHOW TABLES 'empl.*';
employees</code></pre><br><p></p>
<p>显示表扩展信息<br></p>
<pre><code class="language-sql">hive&gt; DESCRIBE EXTENDED mydb.employees;
name    string  Employee name
salary  float   Employee salary
subordinates    array&lt;string&gt;   Names of subordinates
deductions      map&lt;string,float&gt; Keys are deductions names, values are percentages
address struct&lt;street:string,city:string,state:string,zip:int&gt;  Home address
Detailed Table Information      Table(tableName:employees, dbName:mydb, owner:me,
...
location:hdfs://master-server/user/hive/warehouse/mydb.db/employees,
parameters:{creator=me, created_at='2012-01-02 10:00:00',
            last_modified_user=me, last_modified_time=1337544510,
            comment:Description of the table, ...}, ...)</code></pre><br><p><br></p>
<p>指定显示某个字段的信息<br></p>
<p></p>
<pre><code class="language-sql">hive&gt; DESCRIBE mydb.employees.salary;
salary  float   Employee salary</code></pre>
<p></p>
<p><br></p>
<p>External Tables -- 外部表</p>
<p><br></p>
<p>外部表，删除表不删除数据<br></p>
<p></p>
<pre><code class="language-sql">CREATE EXTERNAL TABLE IF NOT EXISTS stocks (
  exchange        STRING,
  symbol          STRING,
  ymd             STRING,
  price_open      FLOAT,
  price_high      FLOAT,
  price_low       FLOAT,
  price_close     FLOAT,
  volume          INT,
  price_adj_close FLOAT)
ROW FORMAT DELIMITED FIELDS TERMINATED BY ','
LOCATION '/data/stocks';</code></pre><br><p></p>
<p>复制表结构仓库外部表<br></p>
<pre><code class="language-sql">CREATE EXTERNAL TABLE IF NOT EXISTS mydb.employees3
LIKE mydb.employees
LOCATION '/path/to/data';</code></pre><br><p><strong><br></strong></p>
<p><strong>Partitioned, Managed Tables</strong> --分区表</p>
<p></p>
<pre><code class="language-sql">CREATE TABLE employees (
  name         STRING,
  salary       FLOAT,
  subordinates ARRAY&lt;STRING&gt;,
  deductions   MAP&lt;STRING, FLOAT&gt;,
  address      STRUCT&lt;street:STRING, city:STRING, state:STRING, zip:INT&gt;
)
PARTITIONED BY (country STRING, state STRING);</code></pre>
<p></p>
<p><br></p>
<p>However, Hive will now create subdirectories reflecting the partitioning structure. For<br>
example:</p>
<p><br></p>
<p></p>
<pre><code class="language-sql">...
.../employees/country=CA/state=AB
.../employees/country=CA/state=BC
...
.../employees/country=US/state=AL
.../employees/country=US/state=AK
...</code></pre><br><p></p>
<p>建议安全措施<br>
把HIVE 设置成“严格”模式,禁止分区表的查询没有<br>
一个WHERE子句<br><br></p>
<p></p>
<pre><code class="language-sql">hive&gt; set hive.mapred.mode=strict;
hive&gt; SELECT e.name, e.salary FROM employees e LIMIT 100;
FAILED: Error in semantic analysis: No partition predicate found for
 Alias "e" Table "employees"
hive&gt; set hive.mapred.mode=nonstrict;
hive&gt; SELECT e.name, e.salary FROM employees e LIMIT 100;</code></pre><br><p></p>
<p>查看现有分区</p>
<p><br></p>
<p></p>
<pre><code class="language-sql">hive&gt; SHOW PARTITIONS employees;
...
Country=CA/state=AB
country=CA/state=BC
...
country=US/state=AL
country=US/state=AK</code></pre><br><p></p>
<p>查看分区详细 分区键</p>
<p><br></p>
<p></p>
<pre><code class="language-sql">hive&gt; SHOW PARTITIONS employees PARTITION(country='US');
country=US/state=AL
country=US/state=AK
...
hive&gt; SHOW PARTITIONS employees PARTITION(country='US', state='AK');
country=US/state=AK</code></pre>
<p></p>
<p><br></p>
<p>通过 DESC 显示分区键</p>
<p><br></p>
<p></p>
<pre><code class="language-sql">hive&gt; DESCRIBE EXTENDED employees;
name         string,
salary       float,
...
address      struct&lt;...&gt;,
country      string,
state        string
Detailed Table Information...
partitionKeys:[FieldSchema(name:country, type:string, comment:null),
FieldSchema(name:state, type:string, comment:null)],
...</code></pre>
<p></p>
<p><br></p>
<p>从文件读入 分区表</p>
<p></p>
<pre><code class="language-sql">LOAD DATA LOCAL INPATH '${env:HOME}/california-employees'
INTO TABLE employees
PARTITION (country = 'US', state = 'CA');</code></pre><br><p></p>
<p><br></p>
<p><strong>External Partitioned Tables</strong> 外部分区表<br></p>
<p><br></p>
<p>1.先创建外部表结构<br></p>
<p></p>
<pre><code class="language-sql">CREATE EXTERNAL TABLE IF NOT EXISTS log_messages (
  hms             INT,
  severity        STRING,
  server          STRING,
  process_id      INT,
  message         STRING)
PARTITIONED BY (year INT, month INT, day INT)
ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t';</code></pre><br><p></p>
<p>2.为外部表增加指定分区</p>
<p></p>
<pre><code class="language-sql">ALTER TABLE log_messages ADD PARTITION(year = 2012, month = 1, day = 2)
LOCATION 'hdfs://master_server/data/log_messages/2012/01/02';</code></pre><br><p></p>
<p>3.把数据表复制外部表目录结构中<br></p>
<p>Copy the data for the partition being moved to S3. For example, you can use the<br>
hadoop distcp command:<br></p>
<pre><code class="language-sql">hadoop distcp /data/log_messages/2011/12/02 s3n://ourbucket/logs/2011/12/02</code></pre><br>
•Alter the table to point the partition to the S3 location:<br><pre><code class="language-sql">ALTER TABLE log_messages PARTITION(year = 2011, month = 12, day = 2)</code></pre><br>
SET LOCATION 's3n://ourbucket/logs/2011/01/02';<br>
•Remove the HDFS copy of the partition using the hadoop fs -rmr command:<br><pre><code class="language-sql">hadoop fs -rmr /data/log_messages/2011/01/02</code></pre>
<p></p>
<p><br></p>
<p>显示 表分区信息<br></p>
<pre><code class="language-sql">hive&gt; SHOW PARTITIONS log_messages;
...
year=2011/month=12/day=31
year=2012/month=1/day=1
year=2012/month=1/day=2</code></pre>
<p></p>
<p></p>
<pre><code class="language-sql">hive&gt; DESCRIBE EXTENDED log_messages;
...
message         string,
year            int,
month           int,
day             int
Detailed Table Information...
partitionKeys:[FieldSchema(name:year, type:int, comment:null),
FieldSchema(name:month, type:int, comment:null),
FieldSchema(name:day, type:int, comment:null)],
...</code></pre><br><pre><code class="language-sql">hive&gt; DESCRIBE EXTENDED log_messages PARTITION (year=2012, month=1, day=2);
...
location:s3n://ourbucket/logs/2011/01/02,
...</code></pre><br><p></p>
<p><strong><br></strong></p>
<p><strong>Customizing Table Storage Formats</strong> -- 表存储格式</p>
<p><br></p>
<p></p>
<pre><code class="language-sql">CREATE TABLE employees (
  name         STRING,
  salary       FLOAT,
  subordinates ARRAY&lt;STRING&gt;,
  deductions   MAP&lt;STRING, FLOAT&gt;,
  address      STRUCT&lt;street:STRING, city:STRING, state:STRING, zip:INT&gt;
)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY '\001'
COLLECTION ITEMS TERMINATED BY '\002'
MAP KEYS TERMINATED BY '\003'
LINES TERMINATED BY '\n'
STORED AS TEXTFILE;
</code></pre>
<p></p>
<p><strong><br></strong></p>
<p><strong>Dropping Tables</strong> -- 删除表</p>
<p><br></p>
<p></p>
<pre><code class="language-sql">DROP TABLE IF EXISTS employees;</code></pre><br><p></p>
<p>For external tables, the metadata is deleted but the data is not.</p>
<p><br></p>
<p><strong>Alter Table</strong> --修改表结构</p>
<p><br></p>
<p>ALTER TABLE modifies  table metadata  only. The  data  for  the  table  is<br>
untouched. It’s up to you to ensure that any modifications are consistent<br>
with the actual data.</p>
<p><br></p>
<p><strong>Renaming a Table</strong> -- 修改表名<strong><br></strong></p>
<p></p>
<pre><code class="language-sql">ALTER TABLE log_messages RENAME TO logmsgs;</code></pre><br><p></p>
<p><strong>Adding, Modifying, and Dropping a Table Partition </strong>-- 增加，修改，删除 表分区<strong><br></strong></p>
<p><br></p>
<p></p>
<pre><code class="language-sql">ALTER TABLE log_messages ADD IF NOT EXISTS
PARTITION (year = 2011, month = 1, day = 1) LOCATION '/logs/2011/01/01'
PARTITION (year = 2011, month = 1, day = 2) LOCATION '/logs/2011/01/02'
PARTITION (year = 2011, month = 1, day = 3) LOCATION '/logs/2011/01/03'</code></pre><br><pre><code class="language-sql">ALTER TABLE log_messages PARTITION(year = 2011, month = 12, day = 2)
SET LOCATION 's3n://ourbucket/logs/2011/01/02';</code></pre><br><pre><code class="language-sql">ALTER TABLE log_messages DROP IF EXISTS PARTITION(year = 2011, month = 12, day = 2);</code></pre><br><p></p>
<p><br></p>
<p><strong>Changing Columns</strong> --修改列</p>
<p><br></p>
<pre><code class="language-sql">ALTER TABLE log_messages
CHANGE COLUMN hms hours_minutes_seconds INT
COMMENT 'The hours, minutes, and seconds part of the timestamp'
AFTER severity;</code></pre><br><p></p>
<p><strong>Adding Columns</strong> --增加列</p>
<p></p>
<pre><code class="language-sql">ALTER TABLE log_messages ADD COLUMNS (
 app_name   STRING COMMENT 'Application name',
 session_id LONG   COMMENT 'The current session id');</code></pre><br><p></p>
<p><strong>Deleting or Replacing Columns</strong> --删除 替换列</p>
<p><br></p>
<pre><code class="language-sql">ALTER TABLE log_messages REPLACE COLUMNS (
 hours_mins_secs INT    COMMENT 'hour, minute, seconds from timestamp',
 severity        STRING COMMENT 'The message severity'
 message         STRING COMMENT 'The rest of the message');</code></pre><br><p></p>
<p>This statement effectively renames the original hms column and removes the server and<br>
process_id columns from the original schema definition. As for all ALTER statements,<br>
only the table metadata is changed.</p>
<p><strong><br></strong></p>
<p><strong>Alter Table Properties</strong> --修改表属性</p>
<p></p><pre><code class="language-sql">ALTER TABLE log_messages SET TBLPROPERTIES (
 'notes' = 'The process id is no longer captured; this column is always NULL');</code></pre><br><p><strong>Alter Storage Properties</strong> --修改存储属性<br></p>
<p></p><pre><code class="language-sql">ALTER TABLE log_messages
PARTITION(year = 2012, month = 1, day = 1)
SET FILEFORMAT SEQUENCEFILE;</code></pre>
<p><br></p>
<p>You can specify a new SerDe along with SerDe properties or change the properties for<br>
the existing SerDe. The following example specifies that a table will use a Java class<br>
named com.example.JSONSerDe to process a file of JSON-encoded records<br></p>
<p></p><pre><code class="language-sql">ALTER TABLE table_using_JSON_storage
SET SERDE 'com.example.JSONSerDe'
WITH SERDEPROPERTIES (
 'prop1' = 'value1',
 'prop2' = 'value2');</code></pre><br><br>            </div>
                </div>