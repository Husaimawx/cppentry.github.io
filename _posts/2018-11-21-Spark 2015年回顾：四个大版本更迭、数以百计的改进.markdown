---
layout:     post
title:      Spark 2015年回顾：四个大版本更迭、数以百计的改进
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<p>Apache Spark在2015年得到迅猛发展，开发节奏比以前任何时候都快，在过去一年的时间里，发布了4个版本（Spark 1.3到Spark 1.6），各版本都添加了数以百计的改进。</p><p>给Spark贡献过源码的开发者数量已经超过1000，是2014年年末人数的两倍。据我们了解，不管是大数据或小数据工具方面，Spark目前是开源项目中最活跃的。对Spark的快速成长及社区对Spark项目的重视让我们深感责任重大。</p><p>在Databricks，我们仍然在努力推动Spark向前发展，事实上，2015年我们贡献给Spark的代码量是其它任何公司的10倍之多。在本博文中，将重点突出2015年加入到项目中的主要开发内容。</p><ol><li>数据科学API，包括DataFrames，机器学习流水线（Machine Learning Pipelines）及R语言支持；</li>
<li>平台API；</li>
<li>Tungsten项目和性能优化；</li>
<li>Spark流计算。</li>
</ol><p>在见证快速开发节奏的同时，也很高兴目睹了用户采用新版本的速度。例如，下图给出的是超过200个客户在Databricks运行Spark版本的情况（注意单个客户同时可以运行多个版本的Spark）。</p><p><img src="http://img.blog.csdn.net/20160129152928709" alt="图片描述" title=""></p><p>从上图中可以看到，Spark用户在紧随最新版本方面积极性很高，在Spark 1.5发布后的仅三个月内，大多数的客户便在使用它，同时有一小部分客户已经在试用2015年11月底发布的<a href="https://databricks.com/blog/2015/11/20/announcing-spark-1-6-preview-in-databricks.html" rel="nofollow">预览版本</a>的<a href="https://databricks.com/blog/2016/01/04/announcing-spark-1-6.html" rel="nofollow">Spark 1.6</a>。现在，让我们来详细说明2015年Spark的主要变化：</p><p><strong>数据科学API: DataFrame，ML Pipelins和R</strong></p><p>在Spark之前，大数据相关读物总是会涉及一系列令人望而生畏的概念，从分布式计算到MapReduce函数式编程。从而，大数据工具主要由那些掌握高级复杂技术水平的数据基础团队使用。</p><p>Spark在2015年首要发展主题是为大数据构建简化的APIs，类似于为数据科学构建的那样。我们并非逼迫数据科学家去学习整个新的发展范式，实际上是想要降低学习曲线，提供类似于他们已经熟悉的工具。</p><p>为了达此目的，下面介绍下Spark的三个主要API附件。</p><ul><li><a href="https://databricks.com/blog/2015/02/17/introducing-dataframes-in-spark-for-large-scale-data-science.html" rel="nofollow">DataFrames</a>：针对结构化的数据，是一个易用并且高效的API，类似于小数据工具，像Python中的R和Pandas。</li>
<li><a href="https://databricks.com/blog/2015/01/07/ml-pipelines-a-new-high-level-api-for-mllib.html" rel="nofollow">Machine Learning Pipelines</a>：针对完整的机器学习工作流，是一个易用的API。</li>
<li><a href="https://databricks.com/blog/2015/06/09/announcing-sparkr-r-on-spark.html" rel="nofollow">SparkR</a>：与Python一起，R是深受数据科学家欢迎的编程语言。只需简单的学习一下，数据科学家马上就可以使用R和Spark处理数据，比他们的单一机器处理数据强大的多。</li>
</ul><p>虽然这些API仅仅发布了数月，根据<a href="https://databricks.com/blog/2015/09/24/spark-survey-results-2015-are-now-available.html" rel="nofollow">2015年Spark调查报道</a>，使用DataFrame API的Spark用户已占62%。正如调查结果所示，调查对象大部分人都把自己定位为数据工程师（41%）或数据科学家（22%），数据科学家对Spark兴趣的上升通过其使用的开发语言能更明显地说明问题，58%的调查对象使用Python（相比2014年增幅超过49%），18%的受访者使用R API。</p><p><img src="http://img.blog.csdn.net/20160129153205619" alt="图片描述" title=""></p><p>由于我们发布了DataFrames，因此也收集了社区的反馈，其中最为重要的反馈是：对于构建更大型、更复杂的数据工程项目，经典RDD API所提供的类型安全特性十分有用。基于此反馈，针对这些不同种类的数据，我们正在Spark 1.6中开发一个<a href="https://databricks.com/blog/2016/01/04/introducing-spark-datasets.html" rel="nofollow">新类型Dataset API</a>。</p><p><strong>平台APIs</strong></p><p>对应用开发者来说，Spark正成为通用的运行时环境。应用程序仅需要针对单个集合的API进行编程便可以运行在不同种类的环境上（on-prem、cloud、Hadoop等）及连接不同种类的数据源。在本年年初，我们便为第三方开发人员引入了标准的<a href="https://databricks.com/blog/2015/01/09/spark-sql-data-sources-api-unified-data-access-for-the-spark-platform.html" rel="nofollow">可插拔数据源API</a>，它可以智能地解析数据源格式。目前支持的数据源包括：</p><ul><li>CSV, JSON, XML</li>
<li>Avro, Parquet</li>
<li>MySQL, PostgreSQL, Oracle, Redshift</li>
<li>Cassandra, MongoDB, ElasticSearch</li>
<li>Salesforce, Google Spreadsheets</li>
</ul><p><img src="http://img.blog.csdn.net/20160129153335247" alt="图片描述" title=""></p><p>为便于查找数据源和算法对应的库，我们启用了一个网站<a href="http://spark-packages.org/" rel="nofollow">spark-packages.org</a>作为Spark开发库的一个中央仓库。</p><p>另外一个有趣的趋势是Spark早期使用者大多数与Hadoop结合起来使用，随着Spark的发展，Hadoop不再代表着大多数Spark使用时。根据<a href="https://databricks.com/blog/2015/09/24/spark-survey-results-2015-are-now-available.html" rel="nofollow">2015年Spark调查报告</a>，48%的Spark部署方式为Spark standalone集群管理器，而Hadoop Yarn的使用仅为40%左右。</p><p><strong>Tungsten项目和性能优化</strong></p><p>根据<a href="https://databricks.com/blog/2015/09/24/spark-survey-results-2015-are-now-available.html" rel="nofollow">2015年Spark调查报告</a>，91%用户认为性能是Spark最重要的特征，因此，性能优化始终是Spark开发中的一个重要内容。</p><p>在今年年初，我们启动了Tungsten项目——被设计用于提高Spark内核架构的性能和健壮性的重要改进。Spark 1.5中已经提供了Tungsten的初步功能，这其中包括二进制处理（binary processing），它避免使用Java对象模型那种传统二进制内存布局格式。二进制处理极大地降低了数据密集型任务处理时的垃圾回收压力，除此之外，Tungsten还包括新的代码生成框架，在运行时对用户代码中的表达式计算生成相应经过优化的字节码。2015年发布的四个Spark版本，我们也添加了大量能够经过代码生成的内置函数，例如日期和字符串处理等常见任务。</p><p>另外，数据处理性能在查询执行时也非常重要，Parquet已经成为Spark中最常用的数据格式，其扫描性能对许多大型应用程序的影响巨大，在Spark 1.6当中，我们引入了一种新的Parquet读取器，该读取器针对平滑模式（flat schemas）使用一种经过优化的代码路径，在我们的基准测试当中，该新的读取器扫描吞吐率增加了近50%。</p><p><strong>Spark流处理</strong></p><p>随着物联网的崛起，越来越多的机构正在部署各自的流处理应用程序，将这些流处理程序同传统的流水线结合起来至关重要，Spark通过利用<a href="https://databricks.com/blog/2015/07/30/diving-into-spark-streamings-execution-model.html" rel="nofollow">统一引擎进行批处理和流数据处理简化了部署难度</a>。2015年Spark 流处理中增加的主要内容包括：</p><ul><li><a href="https://databricks.com/blog/2015/03/30/improvements-to-kafka-integration-of-spark-streaming.html" rel="nofollow">直接Kafka连接器</a>：Spark 1.3 改进了与Kafka间的集成，从而使得流处理程序能够提供只执行一次数据处理的语义并简化操作。<a href="https://databricks.com/blog/2015/01/15/improved-driver-fault-tolerance-and-zero-data-loss-in-spark-streaming.html" rel="nofollow">额外的工作</a>提供了容错性和保证零数据丢失。</li>
<li>Web UI进行监控并帮助更好地调试应用程序：为帮助监控和调试能够7*24小时不间断运行的流处理程序，Spark 1.4 引入了能够显示处理时间线和直方图的新Web UI，同时也能够详细描述各离散Streams</li>
<li>状态管理10倍提升。在Spark 1.6当中，我们重新设计了Spark流处理中的状态管理API，新引入mapWithState  API，它能够线性地扩展更新的记录数而非记录总数。在大多数应用场景中能够达到一个数量级的性能提升。</li>
</ul><p><strong>结束语</strong></p><p>Databricks目前在Spark用户培训和教育方面投入巨大，在2015年，我们与加州大学伯克利分校、加州大学洛杉矶分校合作并提供两个大规模在线开放课程。第一个课程是Apache Spark大数据处理入门，教授学生使用Spark和数据分析；第二个课程是可扩展的机器学习，教授学生使用Spark进行机器学习。这两门课程在edX平台上都是免费的，在我们发布此消息后，目前已经有超过125000个学生注册，我们计算在今年完成对他们的培训。</p><p>我们对今年与社区的共同努力所带来的进步感到自豪，也为能够继承努力给Spark带来更丰富的特性感到激动，想了解2016年的开发内容，请继续保持对我们博客的关注。</p><blockquote>
  <p><strong>原文：</strong><a href="https://databricks.com/blog/2016/01/05/spark-2015-year-in-review.html" rel="nofollow">Spark 2015 Year In Review</a> <br><strong>译者：</strong>牛亚真，中科院计算机信息处理专业硕士研究生，关注大数据技术和数据挖掘方向。 <br><strong>责编：</strong>仲浩</p>
</blockquote>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>