---
layout:     post
title:      Hive四种数据导入方式
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/qq_32252917/article/details/78178326				</div>
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
Hive的几种常见的数据导入方式<br>
这里介绍四种：<br>
（1）、从本地文件系统中导入数据到Hive表；<br>
（2）、从HDFS上导入数据到Hive表；<br>
（3）、从别的表中查询出相应的数据并导入到Hive表中；<br>
（4）、在创建表的时候通过从别的表中查询出相应的记录并插入到所创建的表中。<br><br><br><p>一、从本地文件系统中导入数据到Hive表</p>
<p><br></p>
先在Hive里面创建好表，如下：<br><br>
hive&gt; create table wyp<br>
    &gt; (id int, name string,<br>
    &gt; age int, tel string)<br>
    &gt; ROW FORMAT DELIMITED<br>
    &gt; FIELDS TERMINATED BY '\t'<br>
    &gt; STORED AS TEXTFILE;<br>
OK<br>
Time taken: 2.832 seconds<br><br><br>
这个表很简单，只有四个字段，具体含义我就不解释了。本地文件系统里面有个/home/wyp/wyp.txt文件，内容如下：<br><br>
[wyp@master ~]$ cat wyp.txt<br>
1       wyp     25      13188888888888<br>
2       test    30      13888888888888<br>
3       zs      34      899314121<br><br><br>
wyp.txt文件中的数据列之间是使用\t分割的，可以通过下面的语句将这个文件里面的数据导入到wyp表里面，操作如下：<br><br><br>
hive&gt; load data local inpath 'wyp.txt' into table wyp;<br>
Copying data from file:/home/wyp/wyp.txt<br>
Copying file: file:/home/wyp/wyp.txt<br>
Loading data to table default.wyp<br>
Table default.wyp stats:<br>
[num_partitions: 0, num_files: 1, num_rows: 0, total_size: 67]<br>
OK<br>
Time taken: 5.967 seconds<br><br><br>
这样就将wyp.txt里面的内容导入到wyp表里面去了，可以到wyp表的数据目录下查看，如下命令：<br><br>
hive&gt; dfs -ls /user/hive/warehouse/wyp ;<br>
Found 1 items<br>
-rw-r--r--3 wyp supergroup 67 2014-02-19 18:23 /hive/warehouse/wyp/wyp.txt<br><br><br>
需要注意的是：<br>
和我们熟悉的关系型数据库不一样，Hive现在还不支持在insert语句里面直接给出一组记录的文字形式，也就是说，Hive并不支持INSERT INTO …. VALUES形式的语句。<br><br><br><br>
二、HDFS上导入数据到Hive表<br>
从本地文件系统中将数据导入到Hive表的过程中，其实是先将数据临时复制到HDFS的一个目录下（典型的情况是复制到上传用户的HDFS home目录下,比如/home/wyp/），然后再将数据从那个临时目录下移动（注意，这里说的是移动，不是复制！）到对应的Hive表的数据目录里面。既然如此，那么Hive肯定支持将数据直接从HDFS上的一个目录移动到相应Hive表的数据目录下，假设有下面这个文件/home/wyp/add.txt，具体的操作如下：<br><br>
[wyp@master /home/q/hadoop-2.2.0]$ bin/hadoop fs -cat /home/wyp/add.txt<br>
5       wyp1    23      131212121212<br>
6       wyp2    24      134535353535<br>
7       wyp3    25      132453535353<br>
8       wyp4    26      154243434355<br><br><br>
上面是需要插入数据的内容，这个文件是存放在HDFS上/home/wyp目录（和一中提到的不同，一中提到的文件是存放在本地文件系统上）里面，我们可以通过下面的命令将这个文件里面的内容导入到Hive表中，具体操作如下：<br><br>
hive&gt; load data inpath '/home/wyp/add.txt' into table wyp;<br>
Loading data to table default.wyp<br>
Table default.wyp stats:<br>
[num_partitions: 0, num_files: 2, num_rows: 0, total_size: 215]<br>
OK<br>
Time taken: 0.47 seconds<br>
hive&gt; select * from wyp;<br>
OK<br>
5       wyp1    23      131212121212<br>
6       wyp2    24      134535353535<br>
7       wyp3    25      132453535353<br>
8       wyp4    26      154243434355<br>
1       wyp     25      13188888888888<br>
2       test    30      13888888888888<br>
3       zs      34      899314121<br>
Time taken: 0.096 seconds, Fetched: 7 row(s)<br><br>
从上面的执行结果我们可以看到，数据的确导入到wyp表中了！请注意load data inpath ‘/home/wyp/add.txt’ into table wyp;里面是没有local这个单词的，这个是和一中的区别。<br><br><br>
三、从别的表中查询出相应的数据并导入到Hive表中<br><br>
假设Hive中有test表，其建表语句如下所示：<br><br>
hive&gt; create table test(<br>
    &gt; id int, name string<br>
    &gt; ,tel string)<br>
    &gt; partitioned by<br>
    &gt; (age int)<br>
    &gt; ROW FORMAT DELIMITED<br>
    &gt; FIELDS TERMINATED BY '\t'<br>
    &gt; STORED AS TEXTFILE;<br>
OK<br>
Time taken: 0.261 seconds<br><br><br>
大体和wyp表的建表语句类似，只不过test表里面用age作为了分区字段。对于分区，这里在做解释一下：<br><br>
分区：在Hive中，表的每一个分区对应表下的相应目录，所有分区的数据都是存储在对应的目录中。比如wyp表有dt和city两个分区，则对应dt=20131218,city=BJ对应表的目录为/user/hive/warehouse/dt=20131218/city=BJ，所有属于这个分区的数据都存放在这个目录中。<br><br><br>
下面语句就是将wyp表中的查询结果并插入到test表中：<br><br><br>
hive&gt; insert into table test<br>
    &gt; partition (age='25')<br>
    &gt; select id, name, tel<br>
    &gt; from wyp;<br>
#####################################################################<br>
           这里输出了一堆Mapreduce任务信息，这里省略<br>
#####################################################################<br>
Total MapReduce CPU Time Spent: 1 seconds 310 msec<br>
OK<br>
Time taken: 19.125 seconds<br>
hive&gt; select * from test;<br>
OK<br>
5       wyp1    131212121212    25<br>
6       wyp2    134535353535    25<br>
7       wyp3    132453535353    25<br>
8       wyp4    154243434355    25<br>
1       wyp     13188888888888  25<br>
2       test    13888888888888  25<br>
3       zs      899314121       25<br>
Time taken: 0.126 seconds, Fetched: 7 row(s)<br><br>
这里做一下说明：<br>
我们知道我们传统数据块的形式insert into table values（字段1，字段2），这种形式hive是不支持的。<br><br><br>
通过上面的输出，我们可以看到从wyp表中查询出来的东西已经成功插入到test表中去了！如果目标表（test）中不存在分区字段，可以去掉partition (age=’25′)语句。当然，我们也可以在select语句里面通过使用分区值来动态指明分区：<br><br><br>
hive&gt; set hive.exec.dynamic.partition.mode=nonstrict;<br>
hive&gt; insert into table test<br>
    &gt; partition (age)<br>
    &gt; select id, name,<br>
    &gt; tel, age<br>
    &gt; from wyp;<br>
#####################################################################<br>
           这里输出了一堆Mapreduce任务信息，这里省略<br>
#####################################################################<br>
Total MapReduce CPU Time Spent: 1 seconds 510 msec<br>
OK<br>
Time taken: 17.712 seconds<br>
hive&gt; select * from test;<br>
OK<br>
5       wyp1    131212121212    23<br>
6       wyp2    134535353535    24<br>
7       wyp3    132453535353    25<br>
1       wyp     13188888888888  25<br>
8       wyp4    154243434355    26<br>
2       test    13888888888888  30<br>
3       zs      899314121       34<br>
Time taken: 0.399 seconds, Fetched: 7 row(s)<br><br><br><br>
这种方法叫做动态分区插入，但是Hive中默认是关闭的，所以在使用前需要先把hive.exec.dynamic.partition.mode设置为nonstrict。当然，Hive也支持insert overwrite方式来插入数据，从字面我们就可以看出，overwrite是覆盖的意思，是的，执行完这条语句的时候，相应数据目录下的数据将会被覆盖！而insert into则不会，注意两者之间的区别。例子如下：<br><br>
hive&gt; insert overwrite table test<br>
    &gt; PARTITION (age)<br>
    &gt; select id, name, tel, age<br>
    &gt; from wyp;<br><br><br>
更可喜的是，Hive还支持多表插入，什么意思呢？在Hive中，我们可以把insert语句倒过来，把from放在最前面，它的执行效果和放在后面是一样的，如下：<br><br><br>
hive&gt; show create table test3;<br>
OK<br>
CREATE  TABLE test3(<br>
  id int,<br>
  name string)<br>
Time taken: 0.277 seconds, Fetched: 18 row(s)<br>
hive&gt; from wyp<br>
    &gt; insert into table test<br>
    &gt; partition(age)<br>
    &gt; select id, name, tel, age<br>
    &gt; insert into table test3<br>
    &gt; select id, name<br>
    &gt; where age&gt;25;<br>
hive&gt; select * from test3;<br>
OK<br>
8       wyp4<br>
2       test<br>
3       zs<br>
Time taken: 4.308 seconds, Fetched: 3 row(s)<br><br>
可以在同一个查询中使用多个insert子句，这样的好处是我们只需要扫描一遍源表就可以生成多个不相交的输出。这个很酷吧！<br><br><br>
四、在创建表的时候通过从别的表中查询出相应的记录并插入到所创建的表中<br><br>
在实际情况中，表的输出结果可能太多，不适于显示在控制台上，这时候，将Hive的查询输出结果直接存在一个新的表中是非常方便的，我们称这种情况为CTAS（create table .. as select）如下：<br><br>
hive&gt; create table test4<br>
    &gt; as<br>
    &gt; select id, name, tel<br>
    &gt; from wyp;<br>
hive&gt; select * from test4;<br>
OK<br>
5       wyp1    131212121212<br>
6       wyp2    134535353535<br>
7       wyp3    132453535353<br>
8       wyp4    154243434355<br>
1       wyp     13188888888888<br>
2       test    13888888888888<br>
3       zs      899314121<br>
Time taken: 0.089 seconds, Fetched: 7 row(s)<br><br>
数据就插入到test4表中去了，CTAS操作是原子的，因此如果select查询由于某种原因而失败，新表是不会创建的！
            </div>
                </div>