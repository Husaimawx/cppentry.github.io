---
layout:     post
title:      Hive 高级编程——深入浅出学Hive
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<div class="O">
<div>
<p><span class="bold">目录：</span></p>
<p><a href="http://sishuok.com/forum/blogPost/list/6220.html" rel="nofollow">初始Hive</a></p>
<p><a href="http://sishuok.com/forum/blogPost/list/6221.html" rel="nofollow">Hive安装与配置</a></p>
<p><a href="http://sishuok.com/forum/blogPost/list/6222.html" rel="nofollow">Hive 内建操作符与函数开发</a></p>
<p><a href="http://sishuok.com/forum/blogPost/list/6223.html" rel="nofollow">Hive JDBC</a></p>
<p><a href="http://sishuok.com/forum/blogPost/list/6225.html" rel="nofollow">hive参数</a></p>
<p><a href="http://sishuok.com/forum/blogPost/list/6226.html" rel="nofollow">Hive 高级编程</a></p>
<p><a href="http://sishuok.com/forum/blogPost/list/0/6227.html" rel="nofollow">Hive QL</a></p>
<p><a href="http://sishuok.com/forum/blogPost/list/6228.html" rel="nofollow">Hive Shell 基本操作</a></p>
<p><a href="http://sishuok.com/forum/blogPost/list/0/6229.html" rel="nofollow">hive 优化</a></p>
<p><a href="http://sishuok.com/forum/blogPost/list/0/6231.html" rel="nofollow">Hive体系结构</a></p>
<p><a href="http://sishuok.com/forum/blogPost/list/0/6232.html" rel="nofollow">Hive的原理</a></p>
<p> </p>
<p><a href="http://sishuok.com/product/561" rel="nofollow">配套视频课程</a></p>
<p> </p>
<span class="bold" style="font-size:16px;">第一部分：产生背景</span></div>
<div>
<div class="O"><span class="bold">产生背景</span></div>
<div class="O">
<div class="O">•为了满足客户个性化的需求，Hive被设计成一个很开放的系统，很多内容都支持用户定制，包括：</div>
<div class="O1">•文件格式：Text File，Sequence File</div>
<div class="O1">•内存中的数据格式： Java Integer/String, Hadoop  IntWritable/Text</div>
<div class="O1">•用户提供的 map/reduce 脚本：不管什么语言，利用 stdin/stdout 传输数据</div>
<div class="O1">•用户自定义函数</div>
<div class="O1">
<div class="O"><span class="bold">自定义函数</span></div>
<div class="O">
<div>•虽然Hive提供了很多函数，但是有些还是难以满足我们的需求。因此Hive提供了自定义函数开发</div>
<div>•自定义函数包括三种UDF、UADF、UDTF</div>
<div>•UDF(User-Defined-Function)</div>
<div>•UDAF（User- Defined Aggregation Funcation）</div>
<div>•UDTF(User-Defined Table-Generating Functions)  用来解决 输入一行输出多行(On-to-many maping) 的需求。 </div>
<div>
<div class="O"><span class="bold"><span lang="en-us" xml:lang="en-us">HIVE</span>中使用定义的函数的三种方式</span></div>
</div>
</div>
<div class="O">
<div>•在HIVE会话中add 自定义函数的jar文件，然后创建function，继而使用函数</div>
<div>•在进入HIVE会话之前先自动执行创建function，不用用户手工创建</div>
<div>•把自定义的函数写到系统函数中，使之成为HIVE的一个默认函数，这样就不需要create temporary function</div>
<div> </div>
</div>
<div class="O">
<div><span class="bold" style="font-size:16px;">第二部分：UDF</span></div>
<div>
<div class="O"><span class="bold"><span lang="en-us" xml:lang="en-us">UDF</span>用法</span></div>
<div>
<div class="O">•UDF(User-Defined-Function)</div>
<div class="O">•UDF函数可以直接应用于select语句，对查询结构做格式化处理后，再输出内容</div>
<div class="O">•编写UDF函数的时候需要注意一下几点</div>
<div class="O1">•自定义UDF需要继承org.apache.hadoop.hive.ql.UDF</div>
<div class="O1">•需要实现evaluate函数</div>
<div class="O1">•evaluate函数支持重载</div>
<div class="O">•UDF只能实现一进一出的操作，如果需要实现多进一出，则需要实现UDAF</div>
<div class="O">
<div class="O"><span class="bold"><span lang="en-us" xml:lang="en-us">UDF</span>用法代码示例</span></div>
<div>
<div class="O"> </div>
<div class="O"><strong>import</strong> org.apache.Hadoop.hive.ql.exec.UDF   </div>
<div class="O">   <strong>public</strong>  <strong>class</strong> Helloword  <strong>
extends</strong> UDF{   </div>
<div class="O">      <strong>public</strong> String evaluate(){   </div>
<div class="O">           <strong>return</strong> "hello world!";   </div>
<div class="O">     }   </div>
<div class="O">  </div>
<div class="O">      <strong>public</strong> String evaluate(String str){   </div>
<div class="O">           <strong>return</strong> "hello world: " + str;   </div>
<div class="O">     }   </div>
<div class="O">}</div>
<div class="O">
<div class="O"><span class="bold">开发步骤</span></div>
<div>
<div class="O">•开发代码</div>
<div class="O">•把程序打包放到目标机器上去</div>
<div class="O">•进入hive客户端</div>
<div class="O1">•添加jar包：hive&gt;add jar /run/jar/udf_test.jar;</div>
<div class="O1">•创建临时函数：hive&gt;CREATE TEMPORARY FUNCTION my_add AS 'com.hive.udf.Add ‘</div>
<div class="O">•查询HQL语句：</div>
<div class="O1">•SELECT my_add (8, 9) FROM scores;</div>
<div class="O1">•SELECT my_add (scores.math, scores.art) FROM scores;</div>
<div class="O1">
<div class="O">•销毁临时函数：hive&gt; DROP TEMPORARY FUNCTION my_add ;</div>
<div class="O">•细节</div>
<div class="O1">•在使用UDF的时候，会自动进行类型转换，例如： <br>
SELECT my_add (8,9.1) FROM scores;</div>
<div class="O1">•结果是17.1，UDF将类型为Int的参数转化成double。类型的饮食转换是通过UDFResolver来进行控制的</div>
<div class="O1"><span class="bold" style="font-size:16px;">第三部分：UDAF</span></div>
<div class="O1">
<div class="O">
<div>
<div class="O"><span class="bold" lang="en-us" xml:lang="en-us">UDAF</span></div>
•Hive查询数据时，有些聚类函数在HQL没有自带，需要用户自定义实现</div>
<div>•用户自定义聚合函数: Sum, Average…… n – 1</div>
<div>•UDAF（User- Defined Aggregation Funcation） </div>
<div>
<div class="O"><span class="bold">用法</span></div>
</div>
<div>
<div class="O">
<div>•一下两个包是必须的import org.apache.hadoop.hive.ql.exec.UDAF和 org.apache.hadoop.hive.ql.exec.UDAFEvaluator</div>
<div>
<div class="O"><span class="bold">开发步骤</span></div>
<div>
<div class="O">•函数类需要继承UDAF类，内部类Evaluator实UDAFEvaluator接口</div>
<div class="O">•Evaluator需要实现 init、iterate、terminatePartial、merge、terminate这几个函数</div>
<div class="O1">a）init函数实现接口UDAFEvaluator的init函数。</div>
<div class="O1">b）iterate接收传入的参数，并进行内部的轮转。其返回类型为boolean。</div>
<div class="O1">c）terminatePartial无参数，其为iterate函数轮转结束后，返回轮转数据，terminatePartial类似于hadoop的Combiner。</div>
<div class="O1">d）merge接收terminatePartial的返回结果，进行数据merge操作，其返回类型为boolean。</div>
<div class="O1">e）terminate返回最终的聚集函数结果。</div>
<div class="O1">
<div class="O"><span class="bold">执行步骤</span></div>
<div>
<div class="O">•执行求平均数函数的步骤</div>
<div class="O1">a）将java文件编译成Avg_test.jar。</div>
<div class="O1">b）进入hive客户端添加jar包：</div>
<div class="O1">hive&gt;add jar /run/jar/Avg_test.jar。</div>
<div class="O1">c）创建临时函数：</div>
<div class="O1">hive&gt;create temporary function avg_test 'hive.udaf.Avg';</div>
<div class="O1">d）查询语句：</div>
<div class="O1">hive&gt;select avg_test(scores.math) from scores;</div>
<div class="O1">e）销毁临时函数：</div>
<div class="O1">hive&gt;drop temporary function avg_test;</div>
<div class="O1"> </div>
<div class="O">
<div class="O"><span class="bold"><span lang="en-us" xml:lang="en-us">UDAF</span>代码示例</span></div>
<div>
<div class="O">public class MyAvg extends UDAF {</div>
<div class="O"> </div>
<div class="O1">public static class AvgEvaluator implements UDAFEvaluator {</div>
<div class="O1">}</div>
<div class="O">public void init() {}</div>
<div class="O1">public boolean iterate(Double o) {}</div>
<div class="O1">public AvgState terminatePartial() {}</div>
<div class="O1">public boolean terminatePartial(Double o) { }</div>
<div class="O1">public Double terminate() {}</div>
<div class="O"> </div>
<div class="O">}</div>
<div class="O">
<div class="O">
<div><span class="bold" style="font-size:16px;">第四部分：UDTF</span></div>
<div>
<div class="O"><span class="bold" lang="en-us" xml:lang="en-us">UDTF</span></div>
<div class="O">
<div>•UDTF(User-Defined Table-Generating Functions)  用来解决 输入一行输出多行(On-to-many maping) 的需求。</div>
<div>
<div class="O"><span class="bold">开发步骤</span></div>
<div>
<div class="O">•UDTF步骤：</div>
<div class="O1">•必须继承org.apache.Hadoop.hive.ql.udf.generic.GenericUDTF</div>
<div class="O1">•实现initialize, process, close三个方法</div>
<div class="O1">•UDTF首先会</div>
<div class="O2">•调用initialize方法，此方法返回UDTF的返回行的信息（返回个数，类型） <br>
初始化完成后，会调用process方法，对传入的参数进行处理，可以通过forword()方法把结果返回</div>
<div class="O2">•最后close()方法调用，对需要清理的方法进行清理</div>
<div class="O">
<div class="O"><span class="bold">使用方法</span></div>
<div>
<div class="O">•UDTF有两种使用方法，一种直接放到select后面，一种和lateral view一起使用</div>
<div class="O1">•直接select中使用：select explode_map(properties) as (col1,col2) from src;</div>
<div class="O2">•不可以添加其他字段使用：select a, explode_map(properties) as (col1,col2) from src</div>
<div class="O2">•不可以嵌套调用：select explode_map(explode_map(properties)) from src</div>
<div class="O2">•不可以和group by/cluster by/distribute by/sort by一起使用：select explode_map(properties) as (col1,col2) from src group by col1, col2</div>
<div class="O1">•和lateral view一起使用：select src.id, mytable.col1, mytable.col2 from src lateral view explode_map(properties) mytable as col1, col2;</div>
<div class="O">此方法更为方便日常使用。执行过程相当于单独执行了两次抽取，然后union到一个表里。</div>
<div class="O1">
<div class="O"><span class="bold" lang="en-us" xml:lang="en-us">lateral view</span></div>
<div>
<div class="O">• Lateral View语法</div>
<div class="O1">•lateralView: LATERAL VIEW udtf(expression) tableAlias AS columnAlias (',' columnAlias)* fromClause: FROM baseTable (lateralView)*  </div>
<div class="O1"> </div>
<div class="O">•Lateral View用于UDTF(user-defined table generating functions)中将行转成列，例如explode().</div>
<div class="O">•目前Lateral View不支持有上而下的优化。如果使用Where子句，查询可能将不被编译。解决方法见：</div>
<div class="O">     此时，在查询之前执行set hive.optimize.ppd=false;</div>
<div class="O">
<div class="O">•  例子</div>
<div class="O1">•pageAds。它有两个列</div>
<div class="O1">
<table dir="ltr" cellspacing="0" cellpadding="0" style="width:370px;"><tbody><tr><td bgcolor="#00CC99" width="186" height="23">
<div><span lang="en-us" xml:lang="en-us">string pageid</span></div>
</td>
<td bgcolor="#00CC99" width="186" height="23">
<div><span lang="en-us" xml:lang="en-us">Array&lt;int&gt; adid_list</span></div>
</td>
</tr><tr><td bgcolor="#CBECDE" width="186" height="23">
<div><span lang="en-us" xml:lang="en-us">"</span> <span lang="en-us" xml:lang="en-us">front_page"</span></div>
</td>
<td bgcolor="#CBECDE" width="186" height="23">
<div><span lang="en-us" xml:lang="en-us">[1, 2, 3]</span></div>
</td>
</tr><tr><td bgcolor="#E7F6EF" width="186" height="23">
<div><span lang="en-us" xml:lang="en-us">"contact_page</span> <span lang="en-us" xml:lang="en-us">"</span></div>
</td>
<td bgcolor="#E7F6EF" width="186" height="23">
<div><span lang="en-us" xml:lang="en-us">[</span> <span lang="en-us" xml:lang="en-us">3, 4, 5]</span></div>
</td>
</tr></tbody></table></div>
<div class="O1">•SELECT pageid, adid FROM pageAds LATERAL VIEW explode(adid_list) adTable AS adid;</div>
<div class="O1">•将输出如下结果</div>
<div class="O2">string pageid int adid</div>
<div class="O2">"front_page" 1</div>
<div class="O2">…….</div>
<div class="O2">“contact_page" 3</div>
<div class="O2"> </div>
<div class="O2">
<div class="O"><span class="bold">代码示例</span></div>
<div class="O">
<div class="O"><span lang="en-us" xml:lang="en-us">public class </span><span lang="en-us" xml:lang="en-us">MyUDTF </span>
<span lang="en-us" xml:lang="en-us">extends GenericUDTF{ </span></div>
<div class="O2"><span lang="en-us" xml:lang="en-us">public StructObjectInspector initialize(ObjectInspector[]
</span><span lang="en-us" xml:lang="en-us">args)</span> <span lang="en-us" xml:lang="en-us">{} </span></div>
<div class="O2"><span lang="en-us" xml:lang="en-us">public void process(Object[] args) throws HiveException {</span>
<span lang="en-us" xml:lang="en-us">} </span></div>
<div class="O"><span lang="en-us" xml:lang="en-us">}</span></div>
</div>
<div class="O">
<div><span>实现：切分</span> <span>”</span> <span lang="en-us" xml:lang="en-us">key:value;key:value;”</span>
<span>这种字符串，</span> <span>返回结果为</span> <span lang="en-us" xml:lang="en-us">key, value</span> <span>
两个字段</span></div>
</div>
<div>转载请注明出处【 <a href="http://sishuok.com/forum/blogPost/list/6226.html" rel="nofollow">http://sishuok.com/forum/blogPost/list/6226.html</a>】</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
            </div>
                </div>