---
layout:     post
title:      Spark On YARN内存分配
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
本文主要了解Spark On YARN部署模式下的内存分配情况，因为没有深入研究Spark的源代码，所以只能根据日志去看相关的源代码，从而了解“为什么会这样，为什么会那样”。</p>
<h1 id="section" style="font-size:24px;font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-weight:500;line-height:1.1;color:rgb(51,51,51);">
说明</h1>
<p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
按照Spark应用程序中的driver分布方式不同，Spark on YARN有两种模式： <code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(254,251,243);">yarn-client</code>模式、<code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(254,251,243);">yarn-cluster</code>模式。</p>
<p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
当在YARN上运行Spark作业，每个Spark executor作为一个YARN容器运行。Spark可以使得多个Tasks在同一个容器里面运行。</p>
<p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
下图是yarn-cluster模式的作业执行图，图片来源于网络：</p>
<p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
<img src="http://www.guozhongxin.com/images/taobao.png" alt="" style="border:0px;vertical-align:middle;display:inherit;line-height:1.429;"></p>
<p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
关于Spark On YARN相关的配置参数，请参考<a href="http://blog.javachen.com/2015/06/07/spark-configuration.html" rel="nofollow" style="color:rgb(37,97,194);text-decoration:none;background-color:transparent;">Spark配置参数</a>。本文主要讨论内存分配情况，所以只需要关注以下几个内心相关的参数：</p>
<ul style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;"><li><code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(249,242,244);">spark.driver.memory</code>：默认值512m</li><li><code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(249,242,244);">spark.executor.memory</code>：默认值512m</li><li><code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(249,242,244);">spark.yarn.am.memory</code>：默认值512m</li><li><code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(249,242,244);">spark.yarn.executor.memoryOverhead</code>：值为<code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(249,242,244);">executorMemory
 * 0.07, with minimum of 384</code></li><li><code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(249,242,244);">spark.yarn.driver.memoryOverhead</code>：值为<code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(249,242,244);">driverMemory
 * 0.07, with minimum of 384</code></li><li><code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(249,242,244);">spark.yarn.am.memoryOverhead</code>：值为<code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(249,242,244);">AM
 memory * 0.07, with minimum of 384</code></li></ul><p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
注意：</p>
<ul style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;"><li><code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(249,242,244);">--executor-memory/spark.executor.memory</code> 控制 executor
 的堆的大小，但是 JVM 本身也会占用一定的堆空间，比如内部的 String 或者直接 byte buffer，<code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(249,242,244);">spark.yarn.XXX.memoryOverhead</code>属性决定向
 YARN 请求的每个 executor 或dirver或am 的额外堆内存大小，默认值为 <code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(249,242,244);">max(384, 0.07 * spark.executor.memory</code>)</li><li>在 executor 执行的时候配置过大的 memory 经常会导致过长的GC延时，64G是推荐的一个 executor 内存大小的上限。</li><li>HDFS client 在大量并发线程时存在性能问题。大概的估计是每个 executor 中最多5个并行的 task 就可以占满写入带宽。</li></ul><p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
另外，因为任务是提交到YARN上运行的，所以YARN中有几个关键参数，参考<a href="http://blog.javachen.com/2015/06/05/yarn-memory-and-cpu-configuration.html" rel="nofollow" style="color:rgb(37,97,194);text-decoration:none;background-color:transparent;">YARN的内存和CPU配置</a>：</p>
<ul style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;"><li><code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(249,242,244);">yarn.app.mapreduce.am.resource.mb</code>：AM能够申请的最大内存，默认值为1536MB</li><li><code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(249,242,244);">yarn.nodemanager.resource.memory-mb</code>：nodemanager能够申请的最大内存，默认值为8192MB</li><li><code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(249,242,244);">yarn.scheduler.minimum-allocation-mb</code>：调度时一个container能够申请的最小资源，默认值为1024MB</li><li><code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(249,242,244);">yarn.scheduler.maximum-allocation-mb</code>：调度时一个container能够申请的最大资源，默认值为8192MB</li></ul><h1 id="section-1" style="font-size:24px;font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-weight:500;line-height:1.1;color:rgb(51,51,51);">
测试</h1>
<p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
Spark集群测试环境为：</p>
<ul style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;"><li>master：64G内存，16核cpu</li><li>worker：128G内存，32核cpu</li><li>worker：128G内存，32核cpu</li><li>worker：128G内存，32核cpu</li><li>worker：128G内存，32核cpu</li></ul><p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
注意：YARN集群部署在Spark集群之上的，每一个worker节点上同时部署了一个NodeManager，并且YARN集群中的配置如下：</p>
<div class="highlighter-rouge" style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
<pre class="highlight" style="overflow:auto;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;line-height:1.42857;border:1px solid rgb(204,204,204);background-color:rgb(245,245,245);"><code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:inherit;background-color:transparent;"><span class="nt" style="color:rgb(0,128,0);font-weight:bold;">&lt;property&gt;</span>
      <span class="nt" style="color:rgb(0,128,0);font-weight:bold;">&lt;name&gt;</span>yarn.nodemanager.resource.memory-mb<span class="nt" style="color:rgb(0,128,0);font-weight:bold;">&lt;/name&gt;</span>
      <span class="nt" style="color:rgb(0,128,0);font-weight:bold;">&lt;value&gt;</span>106496<span class="nt" style="color:rgb(0,128,0);font-weight:bold;">&lt;/value&gt;</span> <span class="c" style="color:rgb(64,128,128);font-style:italic;">&lt;!-- 104G --&gt;</span>
  <span class="nt" style="color:rgb(0,128,0);font-weight:bold;">&lt;/property&gt;</span>
  <span class="nt" style="color:rgb(0,128,0);font-weight:bold;">&lt;property&gt;</span>
      <span class="nt" style="color:rgb(0,128,0);font-weight:bold;">&lt;name&gt;</span>yarn.scheduler.minimum-allocation-mb<span class="nt" style="color:rgb(0,128,0);font-weight:bold;">&lt;/name&gt;</span>
      <span class="nt" style="color:rgb(0,128,0);font-weight:bold;">&lt;value&gt;</span>2048<span class="nt" style="color:rgb(0,128,0);font-weight:bold;">&lt;/value&gt;</span>
  <span class="nt" style="color:rgb(0,128,0);font-weight:bold;">&lt;/property&gt;</span>
  <span class="nt" style="color:rgb(0,128,0);font-weight:bold;">&lt;property&gt;</span>
      <span class="nt" style="color:rgb(0,128,0);font-weight:bold;">&lt;name&gt;</span>yarn.scheduler.maximum-allocation-mb<span class="nt" style="color:rgb(0,128,0);font-weight:bold;">&lt;/name&gt;</span>
      <span class="nt" style="color:rgb(0,128,0);font-weight:bold;">&lt;value&gt;</span>106496<span class="nt" style="color:rgb(0,128,0);font-weight:bold;">&lt;/value&gt;</span>
  <span class="nt" style="color:rgb(0,128,0);font-weight:bold;">&lt;/property&gt;</span>
  <span class="nt" style="color:rgb(0,128,0);font-weight:bold;">&lt;property&gt;</span>
      <span class="nt" style="color:rgb(0,128,0);font-weight:bold;">&lt;name&gt;</span>yarn.app.mapreduce.am.resource.mb<span class="nt" style="color:rgb(0,128,0);font-weight:bold;">&lt;/name&gt;</span>
      <span class="nt" style="color:rgb(0,128,0);font-weight:bold;">&lt;value&gt;</span>2048<span class="nt" style="color:rgb(0,128,0);font-weight:bold;">&lt;/value&gt;</span>
  <span class="nt" style="color:rgb(0,128,0);font-weight:bold;">&lt;/property&gt;</span>
</code></pre>
</div>
<p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
将spark的日志基本调为DEBUG，并将log4j.logger.org.apache.hadoop设置为WARN建设不必要的输出，修改/etc/spark/conf/log4j.properties：</p>
<div class="highlighter-rouge" style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
<pre class="highlight" style="overflow:auto;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;line-height:1.42857;border:1px solid rgb(204,204,204);background-color:rgb(245,245,245);"><code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:inherit;background-color:transparent;"><span class="c" style="color:rgb(64,128,128);font-style:italic;"># Set everything to be logged to the console
</span><span class="py">log4j.rootCategory</span><span class="p">=</span><span class="s" style="color:rgb(186,33,33);">DEBUG, console</span>
<span class="py">log4j.appender.console</span><span class="p">=</span><span class="s" style="color:rgb(186,33,33);">org.apache.log4j.ConsoleAppender</span>
<span class="py">log4j.appender.console.target</span><span class="p">=</span><span class="s" style="color:rgb(186,33,33);">System.err</span>
<span class="py">log4j.appender.console.layout</span><span class="p">=</span><span class="s" style="color:rgb(186,33,33);">org.apache.log4j.PatternLayout</span>
<span class="py">log4j.appender.console.layout.ConversionPattern</span><span class="p">=</span><span class="s" style="color:rgb(186,33,33);">%d{yy/MM/dd HH:mm:ss} %p %c{1}: %m%n</span>

<span class="c" style="color:rgb(64,128,128);font-style:italic;"># Settings to quiet third party logs that are too verbose
</span><span class="py">log4j.logger.org.eclipse.jetty</span><span class="p">=</span><span class="s" style="color:rgb(186,33,33);">WARN</span>
<span class="py">log4j.logger.org.apache.hadoop</span><span class="p">=</span><span class="s" style="color:rgb(186,33,33);">WARN</span>
<span class="py">log4j.logger.org.eclipse.jetty.util.component.AbstractLifeCycle</span><span class="p">=</span><span class="s" style="color:rgb(186,33,33);">ERROR</span>
<span class="err" style="border:1px solid rgb(255,0,0);">log4j.logger.org.apache.spark.repl.SparkIMain$</span><span class="py">exprTyper</span><span class="p">=</span><span class="s" style="color:rgb(186,33,33);">INFO</span>
<span class="err" style="border:1px solid rgb(255,0,0);">log4j.logger.org.apache.spark.repl.SparkILoop$</span><span class="py">SparkILoopInterpreter</span><span class="p">=</span><span class="s" style="color:rgb(186,33,33);">INFO</span>
</code></pre>
</div>
<p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
接下来是运行测试程序，以官方自带的SparkPi例子为例，<code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(254,251,243);">下面主要测试client模式，至于cluster模式请参考下面的过程</code>。运行下面命令：</p>
<div class="highlighter-rouge" style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
<pre class="highlight" style="overflow:auto;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;line-height:1.42857;border:1px solid rgb(204,204,204);background-color:rgb(245,245,245);"><code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:inherit;background-color:transparent;">spark-submit --class org.apache.spark.examples.SparkPi <span class="se" style="color:rgb(187,102,34);font-weight:bold;">\</span>
    --master yarn-client  <span class="se" style="color:rgb(187,102,34);font-weight:bold;">\</span>
    --num-executors 4 <span class="se" style="color:rgb(187,102,34);font-weight:bold;">\</span>
    --driver-memory 2g <span class="se" style="color:rgb(187,102,34);font-weight:bold;">\</span>
    --executor-memory 3g <span class="se" style="color:rgb(187,102,34);font-weight:bold;">\</span>
    --executor-cores 4 <span class="se" style="color:rgb(187,102,34);font-weight:bold;">\</span>
    /usr/lib/spark/lib/spark-examples-1.3.0-cdh5.4.0-hadoop2.6.0-cdh5.4.0.jar <span class="se" style="color:rgb(187,102,34);font-weight:bold;">\</span>
    100000
</code></pre>
</div>
<p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
观察输出日志（无关的日志被略去）：</p>
<div class="highlighter-rouge" style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
<pre class="highlight" style="overflow:auto;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;line-height:1.42857;border:1px solid rgb(204,204,204);background-color:rgb(245,245,245);"><code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:inherit;background-color:transparent;">15/06/08 13:57:01 INFO SparkContext: Running Spark version 1.3.0
15/06/08 13:57:02 INFO SecurityManager: Changing view acls to: root
15/06/08 13:57:02 INFO SecurityManager: Changing modify acls to: root

15/06/08 13:57:03 INFO MemoryStore: MemoryStore started with capacity 1060.3 MB

15/06/08 13:57:04 DEBUG YarnClientSchedulerBackend: ClientArguments called with: --arg bj03-bi-pro-hdpnamenn:51568 --num-executors 4 --num-executors 4 --executor-memory 3g --executor-memory 3g --executor-cores 4 --executor-cores 4 --name Spark Pi
15/06/08 13:57:04 DEBUG YarnClientSchedulerBackend: [actor] handled message (24.52531 ms) ReviveOffers from Actor[akka://sparkDriver/user/CoarseGrainedScheduler#864850679]
15/06/08 13:57:05 INFO Client: Requesting a new application from cluster with 4 NodeManagers
15/06/08 13:57:05 INFO Client: Verifying our application has not requested more than the maximum memory capability of the cluster (106496 MB per container)
15/06/08 13:57:05 INFO Client: Will allocate AM container, with 896 MB memory including 384 MB overhead
15/06/08 13:57:05 INFO Client: Setting up container launch context for our AM

15/06/08 13:57:07 DEBUG Client: ===============================================================================
15/06/08 13:57:07 DEBUG Client: Yarn AM launch context:
15/06/08 13:57:07 DEBUG Client:     user class: N/A
15/06/08 13:57:07 DEBUG Client:     env:
15/06/08 13:57:07 DEBUG Client:         CLASSPATH -&gt; &lt;CPS&gt;/__spark__.jar&lt;CPS&gt;$HADOOP_CONF_DIR&lt;CPS&gt;$HADOOP_COMMON_HOME/*&lt;CPS&gt;$HADOOP_COMMON_HOME/lib/*&lt;CPS&gt;$HADOOP_HDFS_HOME/*&lt;CPS&gt;$HADOOP_HDFS_HOME/lib/*&lt;CPS&gt;$HADOOP_MAPRED_HOME/*&lt;CPS&gt;$HADOOP_MAPRED_HOME/lib/*&lt;CPS&gt;$HADOOP_YARN_HOME/*&lt;CPS&gt;$HADOOP_YARN_HOME/lib/*&lt;CPS&gt;$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/*&lt;CPS&gt;$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/lib/*&lt;CPS&gt;:/usr/lib/spark/lib/spark-assembly.jar::/usr/lib/hadoop/lib/*:/usr/lib/hadoop/*:/usr/lib/hadoop-hdfs/lib/*:/usr/lib/hadoop-hdfs/*:/usr/lib/hadoop-mapreduce/lib/*:/usr/lib/hadoop-mapreduce/*:/usr/lib/hadoop-yarn/lib/*:/usr/lib/hadoop-yarn/*:/usr/lib/hive/lib/*:/usr/lib/flume-ng/lib/*:/usr/lib/paquet/lib/*:/usr/lib/avro/lib/*
15/06/08 13:57:07 DEBUG Client:         SPARK_DIST_CLASSPATH -&gt; :/usr/lib/spark/lib/spark-assembly.jar::/usr/lib/hadoop/lib/*:/usr/lib/hadoop/*:/usr/lib/hadoop-hdfs/lib/*:/usr/lib/hadoop-hdfs/*:/usr/lib/hadoop-mapreduce/lib/*:/usr/lib/hadoop-mapreduce/*:/usr/lib/hadoop-yarn/lib/*:/usr/lib/hadoop-yarn/*:/usr/lib/hive/lib/*:/usr/lib/flume-ng/lib/*:/usr/lib/paquet/lib/*:/usr/lib/avro/lib/*
15/06/08 13:57:07 DEBUG Client:         SPARK_YARN_CACHE_FILES_FILE_SIZES -&gt; 97237208
15/06/08 13:57:07 DEBUG Client:         SPARK_YARN_STAGING_DIR -&gt; .sparkStaging/application_1433742899916_0001
15/06/08 13:57:07 DEBUG Client:         SPARK_YARN_CACHE_FILES_VISIBILITIES -&gt; PRIVATE
15/06/08 13:57:07 DEBUG Client:         SPARK_USER -&gt; root
15/06/08 13:57:07 DEBUG Client:         SPARK_YARN_MODE -&gt; true
15/06/08 13:57:07 DEBUG Client:         SPARK_YARN_CACHE_FILES_TIME_STAMPS -&gt; 1433743027399
15/06/08 13:57:07 DEBUG Client:         SPARK_YARN_CACHE_FILES -&gt; hdfs://mycluster:8020/user/root/.sparkStaging/application_1433742899916_0001/spark-assembly-1.3.0-cdh5.4.0-hadoop2.6.0-cdh5.4.0.jar#__spark__.jar
15/06/08 13:57:07 DEBUG Client:     resources:
15/06/08 13:57:07 DEBUG Client:         __spark__.jar -&gt; resource { scheme: "hdfs" host: "mycluster" port: 8020 file: "/user/root/.sparkStaging/application_1433742899916_0001/spark-assembly-1.3.0-cdh5.4.0-hadoop2.6.0-cdh5.4.0.jar" } size: 97237208 timestamp: 1433743027399 type: FILE visibility: PRIVATE
15/06/08 13:57:07 DEBUG Client:     command:
15/06/08 13:57:07 DEBUG Client:         /bin/java -server -Xmx512m -Djava.io.tmpdir=/tmp '-Dspark.eventLog.enabled=true' '-Dspark.executor.instances=4' '-Dspark.executor.memory=3g' '-Dspark.executor.cores=4' '-Dspark.driver.port=51568' '-Dspark.serializer=org.apache.spark.serializer.KryoSerializer' '-Dspark.driver.appUIAddress=http://bj03-bi-pro-hdpnamenn:4040' '-Dspark.executor.id=&lt;driver&gt;' '-Dspark.kryo.classesToRegister=scala.collection.mutable.BitSet,scala.Tuple2,scala.Tuple1,org.apache.spark.mllib.recommendation.Rating' '-Dspark.driver.maxResultSize=8g' '-Dspark.jars=file:/usr/lib/spark/lib/spark-examples-1.3.0-cdh5.4.0-hadoop2.6.0-cdh5.4.0.jar' '-Dspark.driver.memory=2g' '-Dspark.eventLog.dir=hdfs://mycluster:8020/user/spark/applicationHistory' '-Dspark.app.name=Spark Pi' '-Dspark.fileserver.uri=http://X.X.X.X:49172' '-Dspark.tachyonStore.folderName=spark-81ae0186-8325-40f2-867b-65ee7c922357' -Dspark.yarn.app.container.log.dir=&lt;LOG_DIR&gt; org.apache.spark.deploy.yarn.ExecutorLauncher --arg 'bj03-bi-pro-hdpnamenn:51568' --executor-memory 3072m --executor-cores 4 --num-executors  4 1&gt; &lt;LOG_DIR&gt;/stdout 2&gt; &lt;LOG_DIR&gt;/stderr
15/06/08 13:57:07 DEBUG Client: ===============================================================================
</code></pre>
</div>
<p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
从<code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(254,251,243);">Will allocate AM container, with 896 MB memory including 384 MB overhead</code>日志可以看到，AM占用了<code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(254,251,243);">896
 MB</code>内存，除掉<code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(254,251,243);">384 MB</code>的overhead内存，实际上只有<code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(254,251,243);">512
 MB</code>，即<code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(254,251,243);">spark.yarn.am.memory</code>的默认值，另外可以看到YARN集群有4个NodeManager，每个container最多有106496
 MB内存。</p>
<p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
Yarn AM launch context启动了一个Java进程，设置的JVM内存为<code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(254,251,243);">512m</code>，见<code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(254,251,243);">/bin/java
 -server -Xmx512m</code>。</p>
<p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
这里为什么会取默认值呢？查看打印上面这行日志的代码，见org.apache.spark.deploy.yarn.Client：</p>
<div class="highlighter-rouge" style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
<pre class="highlight" style="overflow:auto;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;line-height:1.42857;border:1px solid rgb(204,204,204);background-color:rgb(245,245,245);"><code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:inherit;background-color:transparent;">  <span class="k" style="color:rgb(0,128,0);font-weight:bold;">private</span> <span class="k" style="color:rgb(0,128,0);font-weight:bold;">def</span> <span class="n">verifyClusterResources</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="n">newAppResponse</span><span class="k" style="color:rgb(0,128,0);font-weight:bold;">:</span> <span class="kt" style="color:rgb(176,0,64);">GetNewApplicationResponse</span><span class="o" style="color:rgb(102,102,102);">)</span><span class="k" style="color:rgb(0,128,0);font-weight:bold;">:</span> <span class="kt" style="color:rgb(176,0,64);">Unit</span> <span class="o" style="color:rgb(102,102,102);">=</span> <span class="o" style="color:rgb(102,102,102);">{</span>
    <span class="k" style="color:rgb(0,128,0);font-weight:bold;">val</span> <span class="n">maxMem</span> <span class="k" style="color:rgb(0,128,0);font-weight:bold;">=</span> <span class="n">newAppResponse</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">getMaximumResourceCapability</span><span class="o" style="color:rgb(102,102,102);">().</span><span class="n">getMemory</span><span class="o" style="color:rgb(102,102,102);">()</span>
    <span class="n">logInfo</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="s" style="color:rgb(186,33,33);">"Verifying our application has not requested more than the maximum "</span> <span class="o" style="color:rgb(102,102,102);">+</span>
      <span class="n">s</span><span class="s" style="color:rgb(186,33,33);">"memory capability of the cluster ($maxMem MB per container)"</span><span class="o" style="color:rgb(102,102,102);">)</span>
    <span class="k" style="color:rgb(0,128,0);font-weight:bold;">val</span> <span class="n">executorMem</span> <span class="k" style="color:rgb(0,128,0);font-weight:bold;">=</span> <span class="n">args</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">executorMemory</span> <span class="o" style="color:rgb(102,102,102);">+</span> <span class="n">executorMemoryOverhead</span>
    <span class="k" style="color:rgb(0,128,0);font-weight:bold;">if</span> <span class="o" style="color:rgb(102,102,102);">(</span><span class="n">executorMem</span> <span class="o" style="color:rgb(102,102,102);">&gt;</span> <span class="n">maxMem</span><span class="o" style="color:rgb(102,102,102);">)</span> <span class="o" style="color:rgb(102,102,102);">{</span>
      <span class="k" style="color:rgb(0,128,0);font-weight:bold;">throw</span> <span class="k" style="color:rgb(0,128,0);font-weight:bold;">new</span> <span class="nc" style="color:rgb(0,0,255);font-weight:bold;">IllegalArgumentException</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="n">s</span><span class="s" style="color:rgb(186,33,33);">"Required executor memory (${args.executorMemory}"</span> <span class="o" style="color:rgb(102,102,102);">+</span>
        <span class="n">s</span><span class="s" style="color:rgb(186,33,33);">"+$executorMemoryOverhead MB) is above the max threshold ($maxMem MB) of this cluster!"</span><span class="o" style="color:rgb(102,102,102);">)</span>
    <span class="o" style="color:rgb(102,102,102);">}</span>
    <span class="k" style="color:rgb(0,128,0);font-weight:bold;">val</span> <span class="n">amMem</span> <span class="k" style="color:rgb(0,128,0);font-weight:bold;">=</span> <span class="n">args</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">amMemory</span> <span class="o" style="color:rgb(102,102,102);">+</span> <span class="n">amMemoryOverhead</span>
    <span class="k" style="color:rgb(0,128,0);font-weight:bold;">if</span> <span class="o" style="color:rgb(102,102,102);">(</span><span class="n">amMem</span> <span class="o" style="color:rgb(102,102,102);">&gt;</span> <span class="n">maxMem</span><span class="o" style="color:rgb(102,102,102);">)</span> <span class="o" style="color:rgb(102,102,102);">{</span>
      <span class="k" style="color:rgb(0,128,0);font-weight:bold;">throw</span> <span class="k" style="color:rgb(0,128,0);font-weight:bold;">new</span> <span class="nc" style="color:rgb(0,0,255);font-weight:bold;">IllegalArgumentException</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="n">s</span><span class="s" style="color:rgb(186,33,33);">"Required AM memory (${args.amMemory}"</span> <span class="o" style="color:rgb(102,102,102);">+</span>
        <span class="n">s</span><span class="s" style="color:rgb(186,33,33);">"+$amMemoryOverhead MB) is above the max threshold ($maxMem MB) of this cluster!"</span><span class="o" style="color:rgb(102,102,102);">)</span>
    <span class="o" style="color:rgb(102,102,102);">}</span>
    <span class="n">logInfo</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="s" style="color:rgb(186,33,33);">"Will allocate AM container, with %d MB memory including %d MB overhead"</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">format</span><span class="o" style="color:rgb(102,102,102);">(</span>
      <span class="n">amMem</span><span class="o" style="color:rgb(102,102,102);">,</span>
      <span class="n">amMemoryOverhead</span><span class="o" style="color:rgb(102,102,102);">))</span>
  <span class="o" style="color:rgb(102,102,102);">}</span>
</code></pre>
</div>
<p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
args.amMemory来自ClientArguments类，这个类中会校验输出参数：</p>
<div class="highlighter-rouge" style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
<pre class="highlight" style="overflow:auto;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;line-height:1.42857;border:1px solid rgb(204,204,204);background-color:rgb(245,245,245);"><code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:inherit;background-color:transparent;">  <span class="k" style="color:rgb(0,128,0);font-weight:bold;">private</span> <span class="k" style="color:rgb(0,128,0);font-weight:bold;">def</span> <span class="n">validateArgs</span><span class="o" style="color:rgb(102,102,102);">()</span><span class="k" style="color:rgb(0,128,0);font-weight:bold;">:</span> <span class="kt" style="color:rgb(176,0,64);">Unit</span> <span class="o" style="color:rgb(102,102,102);">=</span> <span class="o" style="color:rgb(102,102,102);">{</span>
    <span class="k" style="color:rgb(0,128,0);font-weight:bold;">if</span> <span class="o" style="color:rgb(102,102,102);">(</span><span class="n">numExecutors</span> <span class="o" style="color:rgb(102,102,102);">&lt;=</span> <span class="mi" style="color:rgb(102,102,102);">0</span><span class="o" style="color:rgb(102,102,102);">)</span> <span class="o" style="color:rgb(102,102,102);">{</span>
      <span class="k" style="color:rgb(0,128,0);font-weight:bold;">throw</span> <span class="k" style="color:rgb(0,128,0);font-weight:bold;">new</span> <span class="nc" style="color:rgb(0,0,255);font-weight:bold;">IllegalArgumentException</span><span class="o" style="color:rgb(102,102,102);">(</span>
        <span class="s" style="color:rgb(186,33,33);">"You must specify at least 1 executor!\n"</span> <span class="o" style="color:rgb(102,102,102);">+</span> <span class="n">getUsageMessage</span><span class="o" style="color:rgb(102,102,102);">())</span>
    <span class="o" style="color:rgb(102,102,102);">}</span>
    <span class="k" style="color:rgb(0,128,0);font-weight:bold;">if</span> <span class="o" style="color:rgb(102,102,102);">(</span><span class="n">executorCores</span> <span class="o" style="color:rgb(102,102,102);">&lt;</span> <span class="n">sparkConf</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">getInt</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="s" style="color:rgb(186,33,33);">"spark.task.cpus"</span><span class="o" style="color:rgb(102,102,102);">,</span> <span class="mi" style="color:rgb(102,102,102);">1</span><span class="o" style="color:rgb(102,102,102);">))</span> <span class="o" style="color:rgb(102,102,102);">{</span>
      <span class="k" style="color:rgb(0,128,0);font-weight:bold;">throw</span> <span class="k" style="color:rgb(0,128,0);font-weight:bold;">new</span> <span class="nc" style="color:rgb(0,0,255);font-weight:bold;">SparkException</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="s" style="color:rgb(186,33,33);">"Executor cores must not be less than "</span> <span class="o" style="color:rgb(102,102,102);">+</span>
        <span class="s" style="color:rgb(186,33,33);">"spark.task.cpus."</span><span class="o" style="color:rgb(102,102,102);">)</span>
    <span class="o" style="color:rgb(102,102,102);">}</span>
    <span class="k" style="color:rgb(0,128,0);font-weight:bold;">if</span> <span class="o" style="color:rgb(102,102,102);">(</span><span class="n">isClusterMode</span><span class="o" style="color:rgb(102,102,102);">)</span> <span class="o" style="color:rgb(102,102,102);">{</span>
      <span class="k" style="color:rgb(0,128,0);font-weight:bold;">for</span> <span class="o" style="color:rgb(102,102,102);">(</span><span class="n">key</span> <span class="k" style="color:rgb(0,128,0);font-weight:bold;">&lt;-</span> <span class="nc" style="color:rgb(0,0,255);font-weight:bold;">Seq</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="n">amMemKey</span><span class="o" style="color:rgb(102,102,102);">,</span> <span class="n">amMemOverheadKey</span><span class="o" style="color:rgb(102,102,102);">,</span> <span class="n">amCoresKey</span><span class="o" style="color:rgb(102,102,102);">))</span> <span class="o" style="color:rgb(102,102,102);">{</span>
        <span class="k" style="color:rgb(0,128,0);font-weight:bold;">if</span> <span class="o" style="color:rgb(102,102,102);">(</span><span class="n">sparkConf</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">contains</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="n">key</span><span class="o" style="color:rgb(102,102,102);">))</span> <span class="o" style="color:rgb(102,102,102);">{</span>
          <span class="n">println</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="n">s</span><span class="s" style="color:rgb(186,33,33);">"$key is set but does not apply in cluster mode."</span><span class="o" style="color:rgb(102,102,102);">)</span>
        <span class="o" style="color:rgb(102,102,102);">}</span>
      <span class="o" style="color:rgb(102,102,102);">}</span>
      <span class="n">amMemory</span> <span class="k" style="color:rgb(0,128,0);font-weight:bold;">=</span> <span class="n">driverMemory</span>
      <span class="n">amCores</span> <span class="k" style="color:rgb(0,128,0);font-weight:bold;">=</span> <span class="n">driverCores</span>
    <span class="o" style="color:rgb(102,102,102);">}</span> <span class="k" style="color:rgb(0,128,0);font-weight:bold;">else</span> <span class="o" style="color:rgb(102,102,102);">{</span>
      <span class="k" style="color:rgb(0,128,0);font-weight:bold;">for</span> <span class="o" style="color:rgb(102,102,102);">(</span><span class="n">key</span> <span class="k" style="color:rgb(0,128,0);font-weight:bold;">&lt;-</span> <span class="nc" style="color:rgb(0,0,255);font-weight:bold;">Seq</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="n">driverMemOverheadKey</span><span class="o" style="color:rgb(102,102,102);">,</span> <span class="n">driverCoresKey</span><span class="o" style="color:rgb(102,102,102);">))</span> <span class="o" style="color:rgb(102,102,102);">{</span>
        <span class="k" style="color:rgb(0,128,0);font-weight:bold;">if</span> <span class="o" style="color:rgb(102,102,102);">(</span><span class="n">sparkConf</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">contains</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="n">key</span><span class="o" style="color:rgb(102,102,102);">))</span> <span class="o" style="color:rgb(102,102,102);">{</span>
          <span class="n">println</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="n">s</span><span class="s" style="color:rgb(186,33,33);">"$key is set but does not apply in client mode."</span><span class="o" style="color:rgb(102,102,102);">)</span>
        <span class="o" style="color:rgb(102,102,102);">}</span>
      <span class="o" style="color:rgb(102,102,102);">}</span>
      <span class="n">sparkConf</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">getOption</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="n">amMemKey</span><span class="o" style="color:rgb(102,102,102);">)</span>
        <span class="o" style="color:rgb(102,102,102);">.</span><span class="n">map</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="nc" style="color:rgb(0,0,255);font-weight:bold;">Utils</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">memoryStringToMb</span><span class="o" style="color:rgb(102,102,102);">)</span>
        <span class="o" style="color:rgb(102,102,102);">.</span><span class="n">foreach</span> <span class="o" style="color:rgb(102,102,102);">{</span> <span class="n">mem</span> <span class="k" style="color:rgb(0,128,0);font-weight:bold;">=&gt;</span> <span class="n">amMemory</span> <span class="k" style="color:rgb(0,128,0);font-weight:bold;">=</span> <span class="n">mem</span> <span class="o" style="color:rgb(102,102,102);">}</span>
      <span class="n">sparkConf</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">getOption</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="n">amCoresKey</span><span class="o" style="color:rgb(102,102,102);">)</span>
        <span class="o" style="color:rgb(102,102,102);">.</span><span class="n">map</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="k" style="color:rgb(0,128,0);font-weight:bold;">_</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">toInt</span><span class="o" style="color:rgb(102,102,102);">)</span>
        <span class="o" style="color:rgb(102,102,102);">.</span><span class="n">foreach</span> <span class="o" style="color:rgb(102,102,102);">{</span> <span class="n">cores</span> <span class="k" style="color:rgb(0,128,0);font-weight:bold;">=&gt;</span> <span class="n">amCores</span> <span class="k" style="color:rgb(0,128,0);font-weight:bold;">=</span> <span class="n">cores</span> <span class="o" style="color:rgb(102,102,102);">}</span>
    <span class="o" style="color:rgb(102,102,102);">}</span>
  <span class="o" style="color:rgb(102,102,102);">}</span>
</code></pre>
</div>
<p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
从上面代码可以看到当 isClusterMode 为true时，则args.amMemory值为driverMemory的值；否则，则从<code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(254,251,243);">spark.yarn.am.memory</code>中取，如果没有设置该属性，则取默认值512m。isClusterMode
 为true的条件是 userClass 不为空，<code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(254,251,243);">def isClusterMode: Boolean = userClass !=
 null</code>，即输出参数需要有<code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(254,251,243);">--class</code>参数，而从下面日志可以看到ClientArguments的输出参数中并没有该参数。</p>
<div class="highlighter-rouge" style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
<pre class="highlight" style="overflow:auto;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;line-height:1.42857;border:1px solid rgb(204,204,204);background-color:rgb(245,245,245);"><code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:inherit;background-color:transparent;">15/06/08 13:57:04 DEBUG YarnClientSchedulerBackend: ClientArguments called with: --arg bj03-bi-pro-hdpnamenn:51568 --num-executors 4 --num-executors 4 --executor-memory 3g --executor-memory 3g --executor-cores 4 --executor-cores 4 --name Spark Pi
</code></pre>
</div>
<p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
故，要想设置AM申请的内存值，要么使用cluster模式，要么在client模式中，是有<code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(254,251,243);">--conf</code>手动设置<code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(254,251,243);">spark.yarn.am.memory</code>属性，例如：</p>
<div class="highlighter-rouge" style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
<pre class="highlight" style="overflow:auto;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;line-height:1.42857;border:1px solid rgb(204,204,204);background-color:rgb(245,245,245);"><code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:inherit;background-color:transparent;">spark-submit --class org.apache.spark.examples.SparkPi <span class="se" style="color:rgb(187,102,34);font-weight:bold;">\</span>
    --master yarn-client  <span class="se" style="color:rgb(187,102,34);font-weight:bold;">\</span>
    --num-executors 4 <span class="se" style="color:rgb(187,102,34);font-weight:bold;">\</span>
    --driver-memory 2g <span class="se" style="color:rgb(187,102,34);font-weight:bold;">\</span>
    --executor-memory 3g <span class="se" style="color:rgb(187,102,34);font-weight:bold;">\</span>
    --executor-cores 4 <span class="se" style="color:rgb(187,102,34);font-weight:bold;">\</span>
    --conf spark.yarn.am.memory<span class="o" style="color:rgb(102,102,102);">=</span>1024m <span class="se" style="color:rgb(187,102,34);font-weight:bold;">\</span>
    /usr/lib/spark/lib/spark-examples-1.3.0-cdh5.4.0-hadoop2.6.0-cdh5.4.0.jar <span class="se" style="color:rgb(187,102,34);font-weight:bold;">\</span>
    100000
</code></pre>
</div>
<p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
打开YARN管理界面，可以看到：</p>
<p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
a. Spark Pi 应用启动了5个Container，使用了18G内存、5个CPU core</p>
<p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
<img src="http://blog.javachen.com/static/images/hadoop/memory-in-spark-on-yarn-1.jpg" alt="" style="border:0px;vertical-align:middle;display:inherit;line-height:1.429;"></p>
<p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
b. YARN为AM启动了一个Container，占用内存为2048M</p>
<p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
<img src="http://blog.javachen.com/static/images/hadoop/memory-in-spark-on-yarn-2.jpg" alt="" style="border:0px;vertical-align:middle;display:inherit;line-height:1.429;"></p>
<p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
c. YARN启动了4个Container运行任务，每一个Container占用内存为4096M</p>
<p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
<img src="http://blog.javachen.com/static/images/hadoop/memory-in-spark-on-yarn-3.jpg" alt="" style="border:0px;vertical-align:middle;display:inherit;line-height:1.429;"></p>
<p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
为什么会是<code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(254,251,243);">2G +4G *4=18G</code>呢？第一个Container只申请了2G内存，是因为我们的程序只为AM申请了512m内存，而<code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(254,251,243);">yarn.scheduler.minimum-allocation-mb</code>参数决定了最少要申请2G内存。至于其余的Container，我们设置了executor-memory内存为3G，为什么每一个Container占用内存为4096M呢？</p>
<p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
为了找出规律，多测试几组数据，分别测试并收集executor-memory为3G、4G、5G、6G时每个executor对应的Container内存申请情况：</p>
<ul style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;"><li>executor-memory=3g：2G+4G * 4=18G</li><li>executor-memory=4g：2G+6G * 4=26G</li><li>executor-memory=5g：2G+6G * 4=26G</li><li>executor-memory=6g：2G+8G * 4=34G</li></ul><p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
关于这个问题，我是查看源代码，根据org.apache.spark.deploy.yarn.ApplicationMaster -&gt; YarnRMClient -&gt; YarnAllocator的类查找路径找到YarnAllocator中有这样一段代码：</p>
<div class="highlighter-rouge" style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
<pre class="highlight" style="overflow:auto;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;line-height:1.42857;border:1px solid rgb(204,204,204);background-color:rgb(245,245,245);"><code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:inherit;background-color:transparent;">  <span class="c1" style="color:rgb(64,128,128);font-style:italic;">// Executor memory in MB.</span>
  <span class="kd" style="color:rgb(0,128,0);font-weight:bold;">protected</span> <span class="n">val</span> <span class="n">executorMemory</span> <span class="o" style="color:rgb(102,102,102);">=</span> <span class="n">args</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="na" style="color:rgb(125,144,41);">executorMemory</span>
  <span class="c1" style="color:rgb(64,128,128);font-style:italic;">// Additional memory overhead.</span>
  <span class="kd" style="color:rgb(0,128,0);font-weight:bold;">protected</span> <span class="n">val</span> <span class="nl" style="color:rgb(160,160,0);">memoryOverhead:</span> <span class="n">Int</span> <span class="o" style="color:rgb(102,102,102);">=</span> <span class="n">sparkConf</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="na" style="color:rgb(125,144,41);">getInt</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="s" style="color:rgb(186,33,33);">"spark.yarn.executor.memoryOverhead"</span><span class="o" style="color:rgb(102,102,102);">,</span>
    <span class="n">math</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="na" style="color:rgb(125,144,41);">max</span><span class="o" style="color:rgb(102,102,102);">((</span><span class="n">MEMORY_OVERHEAD_FACTOR</span> <span class="o" style="color:rgb(102,102,102);">*</span> <span class="n">executorMemory</span><span class="o" style="color:rgb(102,102,102);">).</span><span class="na" style="color:rgb(125,144,41);">toInt</span><span class="o" style="color:rgb(102,102,102);">,</span> <span class="n">MEMORY_OVERHEAD_MIN</span><span class="o" style="color:rgb(102,102,102);">))</span>
  <span class="c1" style="color:rgb(64,128,128);font-style:italic;">// Number of cores per executor.</span>
  <span class="kd" style="color:rgb(0,128,0);font-weight:bold;">protected</span> <span class="n">val</span> <span class="n">executorCores</span> <span class="o" style="color:rgb(102,102,102);">=</span> <span class="n">args</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="na" style="color:rgb(125,144,41);">executorCores</span>
  <span class="c1" style="color:rgb(64,128,128);font-style:italic;">// Resource capability requested for each executors</span>
  <span class="kd" style="color:rgb(0,128,0);font-weight:bold;">private</span> <span class="n">val</span> <span class="n">resource</span> <span class="o" style="color:rgb(102,102,102);">=</span> <span class="n">Resource</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="na" style="color:rgb(125,144,41);">newInstance</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="n">executorMemory</span> <span class="o" style="color:rgb(102,102,102);">+</span> <span class="n">memoryOverhead</span><span class="o" style="color:rgb(102,102,102);">,</span> <span class="n">executorCores</span><span class="o" style="color:rgb(102,102,102);">)</span>
</code></pre>
</div>
<p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
因为没有具体的去看YARN的源代码，所以这里猜测Container的大小是根据<code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(254,251,243);">executorMemory + memoryOverhead</code>计算出来的，大概的规则是每一个Container的大小必须为<code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(254,251,243);">yarn.scheduler.minimum-allocation-mb</code>值的整数倍，当<code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(254,251,243);">executor-memory=3g</code>时，<code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(254,251,243);">executorMemory
 + memoryOverhead</code>为3G+384M=3456M，需要申请的Container大小为<code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(254,251,243);">yarn.scheduler.minimum-allocation-mb</code> *
 2 =4096m=4G，其他依此类推。</p>
<blockquote style="font-size:15.5px;border-left-width:5px;border-left-style:solid;border-left-color:rgb(78,76,74);color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;">
<p>注意：</p>
<ul><li>Yarn always rounds up memory requirement to multiples of <code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.95px;color:rgb(199,37,78);background-color:rgb(249,242,244);">yarn.scheduler.minimum-allocation-mb</code>,
 which by default is 1024 or 1GB.</li><li>Spark adds an <code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.95px;color:rgb(199,37,78);background-color:rgb(249,242,244);">overhead</code> to <code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.95px;color:rgb(199,37,78);background-color:rgb(249,242,244);">SPARK_EXECUTOR_MEMORY/SPARK_DRIVER_MEMORY</code> before
 asking Yarn for the amount.</li></ul></blockquote>
<p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
另外，需要注意memoryOverhead的计算方法，当executorMemory的值很大时，memoryOverhead的值相应会变大，这个时候就不是384m了，相应的Container申请的内存值也变大了，例如：当executorMemory设置为90G时，memoryOverhead值为<code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(254,251,243);">math.max(0.07
 * 90G, 384m)=6.3G</code>，其对应的Container申请的内存为98G。</p>
<p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
回头看看给AM对应的Container分配2G内存原因，512+384=896，小于2G，故分配2G，你可以在设置<code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(254,251,243);">spark.yarn.am.memory</code>的值之后再来观察。</p>
<p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
打开Spark的管理界面 <a href="http://ip:4040/" rel="nofollow" style="color:rgb(37,97,194);text-decoration:none;background-color:transparent;">http://ip:4040</a> ，可以看到driver和Executor中内存的占用情况：</p>
<p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
<img src="http://blog.javachen.com/static/images/hadoop/memory-in-spark-on-yarn-4.jpg" alt="" style="border:0px;vertical-align:middle;display:inherit;line-height:1.429;"></p>
<p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
从上图可以看到Executor占用了1566.7 MB内存，这是怎样计算出来的？参考<a href="http://www.wdong.org/wordpress/blog/2015/01/08/spark-on-yarn-where-have-all-my-memory-gone/" rel="nofollow" style="color:rgb(37,97,194);text-decoration:none;background-color:transparent;">Spark
 on Yarn: Where Have All the Memory Gone?</a>这篇文章，totalExecutorMemory的计算方式为：</p>
<div class="highlighter-rouge" style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
<pre class="highlight" style="overflow:auto;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;line-height:1.42857;border:1px solid rgb(204,204,204);background-color:rgb(245,245,245);"><code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:inherit;background-color:transparent;"><span class="c1" style="color:rgb(64,128,128);font-style:italic;">//yarn/common/src/main/scala/org/apache/spark/deploy/yarn/YarnSparkHadoopUtil.scala
</span>  <span class="k" style="color:rgb(0,128,0);font-weight:bold;">val</span> <span class="nc" style="color:rgb(0,0,255);font-weight:bold;">MEMORY_OVERHEAD_FACTOR</span> <span class="k" style="color:rgb(0,128,0);font-weight:bold;">=</span> <span class="mf" style="color:rgb(102,102,102);">0.07</span>
  <span class="k" style="color:rgb(0,128,0);font-weight:bold;">val</span> <span class="nc" style="color:rgb(0,0,255);font-weight:bold;">MEMORY_OVERHEAD_MIN</span> <span class="k" style="color:rgb(0,128,0);font-weight:bold;">=</span> <span class="mi" style="color:rgb(102,102,102);">384</span>

<span class="c1" style="color:rgb(64,128,128);font-style:italic;">//yarn/common/src/main/scala/org/apache/spark/deploy/yarn/YarnAllocator.scala
</span>  <span class="k" style="color:rgb(0,128,0);font-weight:bold;">protected</span> <span class="k" style="color:rgb(0,128,0);font-weight:bold;">val</span> <span class="n">memoryOverhead</span><span class="k" style="color:rgb(0,128,0);font-weight:bold;">:</span> <span class="kt" style="color:rgb(176,0,64);">Int</span> <span class="o" style="color:rgb(102,102,102);">=</span> <span class="n">sparkConf</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">getInt</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="s" style="color:rgb(186,33,33);">"spark.yarn.executor.memoryOverhead"</span><span class="o" style="color:rgb(102,102,102);">,</span>
    <span class="n">math</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">max</span><span class="o" style="color:rgb(102,102,102);">((</span><span class="nc" style="color:rgb(0,0,255);font-weight:bold;">MEMORY_OVERHEAD_FACTOR</span> <span class="o" style="color:rgb(102,102,102);">*</span> <span class="n">executorMemory</span><span class="o" style="color:rgb(102,102,102);">).</span><span class="n">toInt</span><span class="o" style="color:rgb(102,102,102);">,</span> <span class="nc" style="color:rgb(0,0,255);font-weight:bold;">MEMORY_OVERHEAD_MIN</span><span class="o" style="color:rgb(102,102,102);">))</span>
<span class="o" style="color:rgb(102,102,102);">......</span>
      <span class="k" style="color:rgb(0,128,0);font-weight:bold;">val</span> <span class="n">totalExecutorMemory</span> <span class="k" style="color:rgb(0,128,0);font-weight:bold;">=</span> <span class="n">executorMemory</span> <span class="o" style="color:rgb(102,102,102);">+</span> <span class="n">memoryOverhead</span>
      <span class="n">numPendingAllocate</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">addAndGet</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="n">missing</span><span class="o" style="color:rgb(102,102,102);">)</span>
      <span class="n">logInfo</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="n">s</span><span class="s" style="color:rgb(186,33,33);">"Will allocate $missing executor containers, each with $totalExecutorMemory MB "</span> <span class="o" style="color:rgb(102,102,102);">+</span>
        <span class="n">s</span><span class="s" style="color:rgb(186,33,33);">"memory including $memoryOverhead MB overhead"</span><span class="o" style="color:rgb(102,102,102);">)</span>
</code></pre>
</div>
<p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
这里我们给executor-memory设置的3G内存，memoryOverhead的值为<code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(254,251,243);">math.max(0.07 * 3072,
 384)=384</code>，其最大可用内存通过下面代码来计算：</p>
<div class="highlighter-rouge" style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
<pre class="highlight" style="overflow:auto;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;line-height:1.42857;border:1px solid rgb(204,204,204);background-color:rgb(245,245,245);"><code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:inherit;background-color:transparent;"><span class="c1" style="color:rgb(64,128,128);font-style:italic;">//core/src/main/scala/org/apache/spark/storage/BlockManager.scala
</span><span class="cm" style="color:rgb(64,128,128);font-style:italic;">/** Return the total amount of storage memory available. */</span>
<span class="k" style="color:rgb(0,128,0);font-weight:bold;">private</span> <span class="k" style="color:rgb(0,128,0);font-weight:bold;">def</span> <span class="n">getMaxMemory</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="n">conf</span><span class="k" style="color:rgb(0,128,0);font-weight:bold;">:</span> <span class="kt" style="color:rgb(176,0,64);">SparkConf</span><span class="o" style="color:rgb(102,102,102);">)</span><span class="k" style="color:rgb(0,128,0);font-weight:bold;">:</span> <span class="kt" style="color:rgb(176,0,64);">Long</span> <span class="o" style="color:rgb(102,102,102);">=</span> <span class="o" style="color:rgb(102,102,102);">{</span>
  <span class="k" style="color:rgb(0,128,0);font-weight:bold;">val</span> <span class="n">memoryFraction</span> <span class="k" style="color:rgb(0,128,0);font-weight:bold;">=</span> <span class="n">conf</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">getDouble</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="s" style="color:rgb(186,33,33);">"spark.storage.memoryFraction"</span><span class="o" style="color:rgb(102,102,102);">,</span> <span class="mf" style="color:rgb(102,102,102);">0.6</span><span class="o" style="color:rgb(102,102,102);">)</span>
  <span class="k" style="color:rgb(0,128,0);font-weight:bold;">val</span> <span class="n">safetyFraction</span> <span class="k" style="color:rgb(0,128,0);font-weight:bold;">=</span> <span class="n">conf</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">getDouble</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="s" style="color:rgb(186,33,33);">"spark.storage.safetyFraction"</span><span class="o" style="color:rgb(102,102,102);">,</span> <span class="mf" style="color:rgb(102,102,102);">0.9</span><span class="o" style="color:rgb(102,102,102);">)</span>
  <span class="o" style="color:rgb(102,102,102);">(</span><span class="nc" style="color:rgb(0,0,255);font-weight:bold;">Runtime</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">getRuntime</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">maxMemory</span> <span class="o" style="color:rgb(102,102,102);">*</span> <span class="n">memoryFraction</span> <span class="o" style="color:rgb(102,102,102);">*</span> <span class="n">safetyFraction</span><span class="o" style="color:rgb(102,102,102);">).</span><span class="n">toLong</span>
<span class="o" style="color:rgb(102,102,102);">}</span>
</code></pre>
</div>
<p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
即，对于executor-memory设置3G时，executor内存占用大约为 3072m * 0.6 * 0.9 = 1658.88m，注意：实际上是应该乘以<code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(254,251,243);">Runtime.getRuntime.maxMemory</code>的值，该值小于3072m。</p>
<p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
上图中driver占用了1060.3 MB，此时driver-memory的值是位2G，故driver中存储内存占用为：2048m * 0.6 * 0.9 =1105.92m，注意：实际上是应该乘以<code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(254,251,243);">Runtime.getRuntime.maxMemory</code>的值，该值小于2048m。</p>
<p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
这时候，查看worker节点CoarseGrainedExecutorBackend进程启动脚本：</p>
<div class="highlighter-rouge" style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
<pre class="highlight" style="overflow:auto;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;line-height:1.42857;border:1px solid rgb(204,204,204);background-color:rgb(245,245,245);"><code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:inherit;background-color:transparent;"><span class="gp" style="color:rgb(0,0,128);font-weight:bold;">$ </span>jps
46841 Worker
21894 CoarseGrainedExecutorBackend
9345
21816 ExecutorLauncher
43369
24300 NodeManager
38012 JournalNode
36929 QuorumPeerMain
22909 Jps

<span class="gp" style="color:rgb(0,0,128);font-weight:bold;">$ </span>ps -ef|grep 21894
nobody   21894 21892 99 17:28 ?        00:04:49 /usr/java/jdk1.7.0_71/bin/java -server -XX:OnOutOfMemoryError<span class="o" style="color:rgb(102,102,102);">=</span><span class="nb" style="color:rgb(0,128,0);">kill</span> %p -Xms3072m -Xmx3072m  -Djava.io.tmpdir<span class="o" style="color:rgb(102,102,102);">=</span>/data/yarn/local/usercache/root/appcache/application_1433742899916_0069/container_1433742899916_0069_01_000003/tmp -Dspark.driver.port<span class="o" style="color:rgb(102,102,102);">=</span>60235 -Dspark.yarn.app.container.log.dir<span class="o" style="color:rgb(102,102,102);">=</span>/data/yarn/logs/application_1433742899916_0069/container_1433742899916_0069_01_000003 org.apache.spark.executor.CoarseGrainedExecutorBackend --driver-url akka.tcp://sparkDriver@bj03-bi-pro-hdpnamenn:60235/user/CoarseGrainedScheduler --executor-id 2 --hostname X.X.X.X --cores 4 --app-id application_1433742899916_0069 --user-class-path file:/data/yarn/local/usercache/root/appcache/application_1433742899916_0069/container_1433742899916_0069_01_000003/__app__.jar
</code></pre>
</div>
<p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
可以看到每个CoarseGrainedExecutorBackend进程分配的内存为3072m，如果我们想查看每个executor的jvm运行情况，可以开启jmx。在/etc/spark/conf/spark-defaults.conf中添加下面一行代码：</p>
<div class="highlighter-rouge" style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
<pre class="highlight" style="overflow:auto;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;line-height:1.42857;border:1px solid rgb(204,204,204);background-color:rgb(245,245,245);"><code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:inherit;background-color:transparent;"><span class="err" style="border:1px solid rgb(255,0,0);">spark.executor.extraJavaOptions</span> <span class="err" style="border:1px solid rgb(255,0,0);">-</span><span class="py">Dcom.sun.management.jmxremote.port</span><span class="p">=</span><span class="s" style="color:rgb(186,33,33);">1099 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false</span>
</code></pre>
</div>
<p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
然后，通过jconsole监控jvm堆内存运行情况，这样方便调试内存大小。</p>
<h1 id="section-2" style="font-size:24px;font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-weight:500;line-height:1.1;color:rgb(51,51,51);">
总结</h1>
<p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
由上可知，在client模式下，AM对应的Container内存由<code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(254,251,243);">spark.yarn.am.memory</code>加上<code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(254,251,243);">spark.yarn.am.memoryOverhead</code>来确定，executor加上spark.<code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(254,251,243);">yarn.executor.memoryOverhead</code>的值之后确定对应Container需要申请的内存大小，driver和executor的内存加上<code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(254,251,243);">spark.yarn.driver.memoryOverhead</code>或<code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(254,251,243);">spark.yarn.executor.memoryOverhead</code>的值之后再乘以0.54确定storage
 memory内存大小。在YARN中，Container申请的内存大小必须为<code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(254,251,243);">yarn.scheduler.minimum-allocation-mb</code>的整数倍。</p>
<p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
下面这张图展示了Spark on YARN 内存结构，图片来自<a href="http://blog.cloudera.com/blog/2015/03/how-to-tune-your-apache-spark-jobs-part-2/" rel="nofollow" style="color:rgb(37,97,194);text-decoration:none;background-color:transparent;">How-to: Tune Your Apache
 Spark Jobs (Part 2)</a>：</p>
<p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
<img src="http://blog.cloudera.com/wp-content/uploads/2015/03/spark-tuning2-f1.png" alt="" style="border:0px;vertical-align:middle;display:inherit;line-height:1.429;"></p>
<p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
至于cluster模式下的分析，请参考上面的过程。希望这篇文章对你有所帮助！</p>
            </div>
                </div>