---
layout:     post
title:      kafka环境搭建1-单机版
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<h2>下载安装</h2>
<ul><li>下载 最新版的kafka软件
<pre><code class="language-ruby"><code class="ruby">wget <span class="hljs-symbol">http:</span>/<span class="hljs-regexp">/apache.opencas.org/kafka</span><span class="hljs-regexp">/0.9.0.1/kafka</span>_2.<span class="hljs-number">11</span>-<span class="hljs-number">0</span>.<span class="hljs-number">9.0</span>.<span class="hljs-number">1</span>.tgz</code></code></pre>
</li><li>解压缩
<pre><code class="language-css"><code class="css"><span class="hljs-tag">tar</span> <span class="hljs-tag">-xzf</span> <span class="hljs-tag">kafka_2</span><span class="hljs-class">.11-0</span><span class="hljs-class">.9</span><span class="hljs-class">.0</span><span class="hljs-class">.0</span><span class="hljs-class">.tgz</span></code></code></pre>
<h2>启动</h2>
首先要进入kafka目录</li><li>启动zookeeper server（kafka自带的zookeeper）
<pre><code class="language-sql"><code class="sql">bin/zookeeper-server-<span class="hljs-operator"><span class="hljs-keyword">start</span>.sh config/zookeeper.properties &amp;</span></code></code></pre>
<blockquote>
<p><em>注意 &amp; 号的使用：命令结尾添加 &amp; 号，可以在执行完命令后退出当前命令环境却不会结束进程</em></p>
</blockquote>
</li><li>启动kafka server
<pre><code class="language-sql"><code class="sql">bin/kafka-server-<span class="hljs-operator"><span class="hljs-keyword">start</span>.sh config/<span class="hljs-keyword">server</span>.properties &amp;</span></code></code></pre>
<h2>创建主题</h2>
kafka生产和消费数据，必须基于主题topic。主题其实就是对消息的分类。</li><li>创建主题：名称为“test”、复制数目为1、partitions为1的topic主题
<pre><code class="language-cpp"><code class="cpp">bin/kafka-topics.sh --create --zookeeper localhost:<span class="hljs-number">2181</span> --replication-factor <span class="hljs-number">1</span> --partitions <span class="hljs-number">1</span> --topic test</code></code></pre>
<blockquote>
<p><strong>replication-factor</strong> ： <em>复制数目，提供failover机制；1代表只在一个broker上有数据记录，一般值都大于1，代表一份数据会自动同步到其他的多个broker，防止某个broker宕机后数据丢失。</em><br><strong>partitions</strong> ： <em>一个topic可以被切分成多个partitions，一个消费者可以消费多个partitions，但一个partitions只能被一个消费者消费，所以增加partitions可以增加消费者的吞吐量。kafka只保证一个partitions内的消息是有序的，多个一个partitions之间的数据是无序的。</em></p>
</blockquote>
</li><li>查看已经创建的主题
<pre><code class="language-cpp"><code class="cpp">bin/kafka-topics.sh --<span class="hljs-built_in">list</span> --zookeeper localhost:<span class="hljs-number">2181</span></code></code></pre>
<h2>启动生产者和消费者</h2>
生产者产生（输入）数据，消费者消费（输出）数据</li><li>启动生产者
<pre><code class="language-cpp"><code class="cpp">bin/kafka-console-producer.sh --broker-<span class="hljs-built_in">list</span> localhost:<span class="hljs-number">9092</span> --topic test</code></code></pre>
<blockquote>
<p><em>启动后，在命令行下每输入一些字符串按下回车时，就作为一个消息并发送的kafka</em></p>
</blockquote>
</li><li>启动消费者
<pre class="hljs bash"><code class="bash">bin/kafka-console-consumer.sh --zookeeper localhost:<span class="hljs-number">2181</span> --topic <span class="hljs-built_in">test</span> --from-beginning</code></pre>
<blockquote>
<p><em>启动消费者时，建议另开一个ssh窗口，方便一遍通过生产者命令行输入消息，一遍观察消费者消费的数据</em></p>
</blockquote>
</li></ul><p>当在生产者下输入消息并回车后，在消费者窗口下就能立即看到对应的消息，这就说明环境搭建成功。</p>
<br>            </div>
                </div>