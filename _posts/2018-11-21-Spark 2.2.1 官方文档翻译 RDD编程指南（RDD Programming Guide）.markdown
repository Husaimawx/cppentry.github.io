---
layout:     post
title:      Spark 2.2.1 官方文档翻译 RDD编程指南（RDD Programming Guide）
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<blockquote>
  <p><a href="http://spark.apache.org/docs/latest/rdd-programming-guide.html" rel="nofollow" target="_blank">http://spark.apache.org/docs/latest/rdd-programming-guide.html</a></p>
</blockquote>

<p></p><div class="toc"><div class="toc">
<ul>
<li><a href="#%E6%A6%82%E8%A7%88" rel="nofollow" target="_blank">概览</a></li>
<li><a href="#%E9%80%9A%E8%BF%87%E7%BC%96%E5%86%99%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E4%BD%BF%E7%94%A8spark" rel="nofollow" target="_blank">通过编写应用程序使用Spark</a><ul>
<li><a href="#%E9%93%BE%E6%8E%A5%E5%88%B0spark" rel="nofollow" target="_blank">链接到Spark</a></li>
<li><a href="#%E5%88%9D%E5%A7%8B%E5%8C%96spark" rel="nofollow" target="_blank">初始化Spark</a></li>
</ul>
</li>
<li><a href="#%E9%80%9A%E8%BF%87spark-shell%E4%BD%BF%E7%94%A8spark" rel="nofollow" target="_blank">通过Spark-Shell使用Spark</a></li>
<li><a href="#%E5%BC%B9%E6%80%A7%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E9%9B%86rdd" rel="nofollow" target="_blank">弹性分布式数据集RDD</a><ul>
<li><a href="#parallelizing-%E9%9B%86%E5%90%88" rel="nofollow" target="_blank">parallelizing 集合</a></li>
<li><a href="#%E5%A4%96%E9%83%A8%E6%95%B0%E6%8D%AE%E9%9B%86" rel="nofollow" target="_blank">外部数据集</a></li>
<li><a href="#rdd%E6%93%8D%E4%BD%9C" rel="nofollow" target="_blank">RDD操作</a><ul>
<li><a href="#%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C" rel="nofollow" target="_blank">基本操作</a></li>
<li><a href="#%E5%B0%86%E5%87%BD%E6%95%B0%E4%BC%A0%E9%80%92%E7%BB%99spark" rel="nofollow" target="_blank">将函数传递给Spark</a></li>
<li><a href="#%E4%BA%86%E8%A7%A3%E9%97%AD%E5%8C%85" rel="nofollow" target="_blank">了解闭包</a><ul>
<li><a href="#%E4%BE%8B%E5%AD%90" rel="nofollow" target="_blank">例子</a></li>
<li><a href="#%E6%9C%AC%E5%9C%B0%E6%88%96%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F" rel="nofollow" target="_blank">本地或集群模式</a></li>
<li><a href="#%E6%89%93%E5%8D%B0rdd%E7%9A%84%E5%85%83%E7%B4%A0" rel="nofollow" target="_blank">打印RDD的元素</a></li>
</ul>
</li>
<li><a href="#%E4%BD%BF%E7%94%A8key-value%E5%AF%B9" rel="nofollow" target="_blank">使用Key-Value对</a></li>
<li><a href="#transformations" rel="nofollow" target="_blank">Transformations</a></li>
<li><a href="#actions" rel="nofollow" target="_blank">Actions</a></li>
<li><a href="#shuffle-%E6%93%8D%E4%BD%9C" rel="nofollow" target="_blank">Shuffle 操作</a><ul>
<li><a href="#%E8%83%8C%E6%99%AF" rel="nofollow" target="_blank">背景</a></li>
<li><a href="#%E5%AF%B9%E6%80%A7%E8%83%BD%E7%9A%84%E5%BD%B1%E5%93%8D" rel="nofollow" target="_blank">对性能的影响</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#rdd%E6%8C%81%E4%B9%85%E5%8C%96" rel="nofollow" target="_blank">RDD持久化</a><ul>
<li><a href="#%E9%80%89%E6%8B%A9%E5%93%AA%E4%B8%AA%E5%AD%98%E5%82%A8%E7%BA%A7%E5%88%AB" rel="nofollow" target="_blank">选择哪个存储级别</a></li>
<li><a href="#%E7%A7%BB%E9%99%A4%E6%95%B0%E6%8D%AE" rel="nofollow" target="_blank">移除数据</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E5%85%B1%E4%BA%AB%E5%8F%98%E9%87%8F" rel="nofollow" target="_blank">共享变量</a><ul>
<li><a href="#%E5%B9%BF%E6%92%AD%E5%8F%98%E9%87%8F" rel="nofollow" target="_blank">广播变量</a></li>
<li><a href="#%E7%B4%AF%E5%8A%A0%E5%99%A8" rel="nofollow" target="_blank">累加器</a></li>
</ul>
</li>
<li><a href="#%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95" rel="nofollow" target="_blank">单元测试</a></li>
</ul>
</div>
</div>




<h1 id="概览">概览</h1>

<p>在上层运行中，每个Spark应用程序都包含一个Driver程序，该程序运行用户的main函数，并在集群上执行各种并行操作。</p>

<p>Spark提供的主要抽象是一个弹性分布式数据集（RDD），一个可以在群集节点上并行操作的离散分布的数据集。</p>

<p>RDD的来源有3种： <br>
1. 文件 <br>
2. 集合（一种数据结构） <br>
3. 其他RDD转换得来</p>

<p>用户也可以要求Spark将RDD保存在内存中，以便在并行操作中有效地重用它。最后，RDD可以自动从节点故障中恢复。</p>

<p>Spark中的第二个抽象是可用于并行操作的共享变量。默认情况下，Spark在不同节点上并行执行一组任务时，会将该函数中使用的每个变量的副本传送给每个任务。有时候，变量需要在任务之间，或任务与驱动程序之间共享。 <br>
Spark支持两种类型的共享变量：广播变量，可用于在所有节点上缓存内存中的值，以及累加器，常用于计算次数或某些数值的和。</p>

<p>本指南显示了Spark支持的各种语言中的每个功能。使用Spark-Shell可以更深刻理解本指南的内容。</p>



<h1 id="通过编写应用程序使用spark">通过编写应用程序使用Spark</h1>



<h2 id="链接到spark">链接到Spark</h2>

<p>Spark 默认使用Scala 2.11，要在Scala中编写应用程序，您需要使用兼容的Scala版本（例如2.11.X）。</p>

<p>要编写Spark应用程序，您需要在Spark上添加Maven依赖项。 Spark可以通过Maven Central获得：</p>



<pre class="prettyprint"><code class=" hljs ini"><span class="hljs-setting">groupId = <span class="hljs-value">org.apache.spark</span></span>
<span class="hljs-setting">artifactId = <span class="hljs-value">spark-core_2.<span class="hljs-number">11</span></span></span>
<span class="hljs-setting">version = <span class="hljs-value"><span class="hljs-number">2.2</span>.<span class="hljs-number">1</span></span></span></code></pre>

<p>另外，如果你想访问一个HDFS集群，你需要为你的HDFS版本添加对hadoop-client的依赖。</p>



<pre class="prettyprint"><code class=" hljs ini"><span class="hljs-setting">groupId = <span class="hljs-value">org.apache.hadoop</span></span>
<span class="hljs-setting">artifactId = <span class="hljs-value">hadoop-client</span></span>
<span class="hljs-setting">version = <span class="hljs-value">&lt;your-hdfs-version&gt;</span></span></code></pre>

<p>最后，您需要将一些Spark类导入到您的程序中。添加以下行：</p>



<pre class="prettyprint"><code class=" hljs avrasm">import org<span class="hljs-preprocessor">.apache</span><span class="hljs-preprocessor">.spark</span><span class="hljs-preprocessor">.SparkContext</span>
import org<span class="hljs-preprocessor">.apache</span><span class="hljs-preprocessor">.spark</span><span class="hljs-preprocessor">.SparkConf</span></code></pre>

<blockquote>
  <p>在Spark 1.3.0之前，您需要导入org.apache.spark.SparkContext._以启用基本的隐式转换</p>
</blockquote>



<h2 id="初始化spark">初始化Spark</h2>

<p>Spark程序必须做的第一件事就是创建一个SparkContext对象，它告诉Spark如何访问一个集群。要创建一个SparkContext，首先需要构建一个包含有关应用程序信息的SparkConf对象。</p>

<blockquote>
  <p>每个JVM只能有一个SparkContext处于活动状态。在创建一个新的SparkContext之前，必须先停止（）活动的SparkContext。</p>
</blockquote>



<pre class="prettyprint"><code class=" hljs fsharp"><span class="hljs-keyword">val</span> conf = <span class="hljs-keyword">new</span> SparkConf().setAppName(appName).setMaster(master)
<span class="hljs-keyword">new</span> SparkContext(conf)</code></pre>

<p>appName参数是您的应用程序在集群UI上显示的名称。master是Spark，Mesos或YARN群集URL，或者是以本地模式运行的特殊“本地”字符串。实际上，在群集上运行时，您不希望在程序中硬编码master，而是使用<a href="http://spark.apache.org/docs/latest/submitting-applications.html" rel="nofollow" target="_blank">spark-submit启动应用程序</a>，并在那里接收它。但是，对于本地测试和单元测试，可以设置为“local”来运行进程中的Spark。</p>



<h1 id="通过spark-shell使用spark">通过Spark-Shell使用Spark</h1>

<p>在Spark shell中已经为您创建了一个SparkContext，名为sc。制作自己的SparkContext将不起作用。您可以使用–master参数来设置上下文所连接的host，并且可以通过将逗号分隔列表传递给–jars参数来将JAR添加到类路径中。您还可以通过向–packages参数提供逗号分隔的Maven坐标列表，将相关依赖（例如Spark包）添加到shell会话中。 <br>
例如，要在四个内核上运行bin / spark-shell，请使用：</p>



<pre class="prettyprint"><code class=" hljs livecodeserver">$ ./bin/spark-<span class="hljs-built_in">shell</span> <span class="hljs-comment">--master local[4]</span></code></pre>

<p>或者，也可以将code.jar添加到其类路径中，请使用：</p>



<pre class="prettyprint"><code class=" hljs brainfuck"><span class="hljs-comment">$</span> <span class="hljs-string">.</span><span class="hljs-comment">/bin/spark</span><span class="hljs-literal">-</span><span class="hljs-comment">shell</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">master</span> <span class="hljs-comment">local</span><span class="hljs-title">[</span><span class="hljs-comment">4</span><span class="hljs-title">]</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">jars</span> <span class="hljs-comment">code</span><span class="hljs-string">.</span><span class="hljs-comment">jar</span></code></pre>

<p>要添加Maven依赖项：</p>



<pre class="prettyprint"><code class=" hljs brainfuck"><span class="hljs-comment">$</span> <span class="hljs-string">.</span><span class="hljs-comment">/bin/spark</span><span class="hljs-literal">-</span><span class="hljs-comment">shell</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">master</span> <span class="hljs-comment">local</span><span class="hljs-title">[</span><span class="hljs-comment">4</span><span class="hljs-title">]</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">packages</span> <span class="hljs-comment">"org</span><span class="hljs-string">.</span><span class="hljs-comment">example:example:0</span><span class="hljs-string">.</span><span class="hljs-comment">1"</span></code></pre>

<p>运行spark-shell –help 可以看到有关选项的完整列表。在底层，spark-shell调用spark-submit脚本。</p>



<h1 id="弹性分布式数据集rdd">弹性分布式数据集（RDD）</h1>

<p>Spark的工作围绕弹性分布式数据集（RDD）的概念展开，RDD是可以并行操作的容错元素集合。 <br>
有两种方法可以创建RDD：</p>

<ul>
<li>parallelizing Driver中的现有集合</li>
</ul>



<h2 id="parallelizing-集合">parallelizing 集合</h2>

<p>parallelizing 集合是通过调用驱动程序上的SparkContext的parallelize方法来创建的。集合的元素被复制以形成可以并行操作的分布式数据集。 <br>
例如，下面是如何创建一个包含数字1到5的并行化集合：</p>



<pre class="prettyprint"><code class=" hljs haskell"><span class="hljs-title">val</span> <span class="hljs-typedef"><span class="hljs-keyword">data</span> = <span class="hljs-type">Array</span><span class="hljs-container">(1, 2, 3, 4, 5)</span></span>
<span class="hljs-title">val</span> distData = sc.parallelize(<span class="hljs-typedef"><span class="hljs-keyword">data</span>)</span></code></pre>

<p>一旦创建，分布式数据集（distData）可以进行并行操作。例如，我们可以调用distData.reduce（（a，b）=&gt; a + b）来合计数组的元素。我们稍后介绍更多分布式数据集上的操作。</p>

<p>并行集合的一个重要参数是要将数据集剪切成的分区数量。Spark将为群集的每个分区运行一个Task。通常情况下，您需要为群集中的每个CPU分配2-4个分区。通常情况下，Spark会尝试根据您的群集自动设置分区数量。但是，您也可以通过设置parallelize的第二个参数（例如sc.parallelize（data，10））进行手动设置。</p>



<h2 id="外部数据集">外部数据集</h2>

<p>Spark可以从Hadoop支持的任何存储源（包括本地文件系统，HDFS，Cassandra，HBase，Amazon S3等）创建分布式数据集.Spark支持文本文件，SequenceFile和任何其他Hadoop InputFormat。</p>

<p>文本文件的RDD可以使用SparkContext的textFile方法创建。这个方法接受一个文件的URI（机器上的一个本地路径，或者一个hdfs：//，s3n：//等URI），并把它作为一个行集合来读取。 <br>
这是一个示例调用：</p>



<pre class="prettyprint"><code class=" hljs avrasm">scala&gt; val distFile = sc<span class="hljs-preprocessor">.textFile</span>(<span class="hljs-string">"data.txt"</span>)
<span class="hljs-label">distFile:</span> org<span class="hljs-preprocessor">.apache</span><span class="hljs-preprocessor">.spark</span><span class="hljs-preprocessor">.rdd</span><span class="hljs-preprocessor">.RDD</span>[String] = data<span class="hljs-preprocessor">.txt</span> MapPartitionsRDD[<span class="hljs-number">10</span>] at textFile at &lt;console&gt;:<span class="hljs-number">26</span></code></pre>

<p>一旦创建，distFile可以通过数据集操作进行操作。例如，我们可以使用map来获得所有行的大小，并进行Reduce操作获得总大小，如下所示：distFile.map（s =&gt; s.length）.reduce（（a，b）=&gt; a + b）。</p>

<p>使用Spark读取文件的一些注意事项：</p>

<ul>
<li>如果在本地文件系统上使用路径，则该文件也必须可以在Worker上的相同路径上访问。通过将文件复制到所有工作节点或使用网络共享文件系统。</li>
<li>Spark的所有基于文件的输入方法（包括textFile）都支持在目录，压缩文件和通配符上运行。例如，您可以使用textFile（“/ my / directory”），textFile（“/ my / directory / <em>。txt”）和textFile（“/ my / directory / </em>。gz”）。</li>
<li>textFile方法还使用可选的第二个参数来控制文件的分区数量。</li>
<li>默认情况下，Spark为文件的每个块创建一个分区（HDFS中的块默认为128MB），但是您也可以通过传递更大的值来请求更多的分区。请注意，您不能有比块更少的分区。</li>
</ul>

<p>除了文本文件外，Spark的Scala API还支持其他几种数据格式：</p>

<ul>
<li>SparkContext.wholeTextFiles让你读取一个包含多个小文本文件的目录，并将它们作为（文件名，内容）对返回。这与textFile相反，textFile将在每个文件中每行返回一个记录。分区由数据局部性决定，在某些情况下可能导致分区太少。对于这些情况，wholeTextFiles提供了一个可选的第二个参数来控制分区的最小数量。</li>
<li>对于SequenceFiles，使用SparkContext的sequenceFile [K，V]方法，其中K和V是文件中的键和值的类型。这些应该是Hadoop的Writable接口的子类，如IntWritable和Text。另外，Spark允许您为几个常见Writable指定类型;例如，sequenceFile [Int，String]将自动读取IntWritables和Texts。</li>
<li>对于其他Hadoop InputFormats，可以使用SparkContext.hadoopRDD方法，该方法采用任意的JobConf和输入格式类，key类和value类。将它们设置为您使用输入源进行Hadoop作业的方式相同。您还可以使用SparkContext.newAPIHadoopRDD for InputFormats基于“新”MapReduce API。</li>
<li>RDD.saveAsObjectFile和SparkContext.objectFile支持以包含序列化Java对象的简单格式保存RDD。虽然这不像Avro这样的专业格式，但它提供了一种简单的方法来保存任何RDD。</li>
</ul>



<h2 id="rdd操作">RDD操作</h2>

<p>RDD支持两种类型的操作：transformations（从现有数据集创建新数据集）和actions（在数据集上运行计算后将值返回给驱动程序）。 <br>
例如，map是一个通过函数传递每个数据集元素的transformation，并返回一个代表结果的新RDD。另一方面，reduce是一个Action，它使用某个函数聚合RDD的所有元素，并将最终结果返回给驱动程序（还有一个并行reduceByKey函数返回一个分布式数据集）。</p>

<p>Spark中的所有transformations都是<strong>懒加载</strong>的，它们不会马上计算结果。他们只记住应用于某些基础数据集（例如文件）的Transformation。只有在Action需要将结果返回给驱动程序时才会执行计算。这种设计使Spark能够更高效地运行。例如，我们可以认识到通过map创建的数据集将被用于reduce，并且只将reduce的结果返回给驱动程序，而不是返回更大的数据集。</p>

<p>默认情况下，每次对其执行操作时，每个已转换的RDD都可能重新计算。但是，您也可以使用持久化（或缓存）方法将RDD保留在内存中，在这种情况下，Spark将该RDD，以便在下次查询时快速访问。还支持在磁盘上持久化RDD，或在多个节点上复制RDD。</p>

<h3 id="基本操作">基本操作</h3>

<p>为了说明RDD基础知识，请考虑下面的简单程序：</p>

<pre class="prettyprint"><code class=" hljs livecodeserver">val <span class="hljs-keyword">lines</span> = sc.textFile(<span class="hljs-string">"data.txt"</span>)
val lineLengths = <span class="hljs-keyword">lines</span>.map(s =&gt; s.<span class="hljs-built_in">length</span>)
val totalLength = lineLengths.reduce((<span class="hljs-operator">a</span>, b) =&gt; <span class="hljs-operator">a</span> + b)</code></pre>

<p>第一行定义了来自外部文件的基本RDD。这个数据集不会被加载到内存中，或者作用于其他行上：仅仅是一个指向文件的指针。 <br>
第二行将lineLengths是对lines做一个Map转换的结果，得到每一行的长度。同样，lineLengths由于懒惰而没有立即计算。 <br>
最后，我们运行reduce，这是一个Action。在这个时候，Spark将计算分解为在不同机器上运行的任务，每台机器既运行其Map部分任务又运行局部reduce任务，只返回运行结果给Driver。</p>

<p>如果我们还想稍后再使用lineLength，我们可以对其进行保存：</p>



<pre class="prettyprint"><code class=" hljs avrasm">lineLengths<span class="hljs-preprocessor">.persist</span>()</code></pre>

<p>在Reduce前，lineLengths RDD将会被保存在内存中。</p>



<h3 id="将函数传递给spark">将函数传递给Spark</h3>

<p>Spark的API在很大程度上需要将Driver中的函数传递到集群上运行。有两种建议的方法来做到这一点：</p>

<ul>
<li>匿名函数，可用于短小的代码。</li>
<li>全局单例对象中的静态方法。例如，您可以在定义MyFunctions Object，然后传递MyFunctions.func1给Spark的Api，如下所示：</li>
</ul>

<pre class="prettyprint"><code class=" hljs python">object MyFunctions {
  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func1</span><span class="hljs-params">(s: String)</span>:</span> String = { ... }
}

myRdd.map(MyFunctions.func1)</code></pre>

<p>请注意，虽然也可以在类实例中传递对方法的引用（与单例对象相反），但这需要将包含该类的对象与方法一起发送。比如说：</p>



<pre class="prettyprint"><code class=" hljs r">class MyClass {
  def func1(s: String): String = { <span class="hljs-keyword">...</span> }
  def doStuff(rdd: RDD[String]): RDD[String] = { rdd.map(func1) }
}</code></pre>

<p>在这里，如果我们创建一个新的MyClass实例，并在其上调用doStuff方法，那么其中的映射会引用该MyClass实例的func1方法，因此需要将整个MyClass 对象发送到集群。</p>

<p>以类似的方式，访问外部对象的字段将引用整个对象：</p>



<pre class="prettyprint"><code class=" hljs haskell"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">MyClass</span> {
  val field = "<span class="hljs-type">Hello</span>"
  def doStuff<span class="hljs-container">(<span class="hljs-title">rdd</span>: <span class="hljs-type">RDD</span>[<span class="hljs-type">String</span>])</span>: <span class="hljs-type">RDD</span>[<span class="hljs-type">String</span>] = { rdd.map<span class="hljs-container">(<span class="hljs-title">x</span> =&gt; <span class="hljs-title">field</span> + <span class="hljs-title">x</span>)</span> }
}</span></code></pre>

<p>相当于写了rdd.map（x =&gt; this.field + x），它引用了this。为了避免这个问题，最简单的方法是将字段复制到本地变量中，而不是从外部访问：</p>



<pre class="prettyprint"><code class=" hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">doStuff</span><span class="hljs-params">(rdd: RDD[String])</span>:</span> RDD[String] = {
  val field_ = this.field
  rdd.map(x =&gt; field_ + x)
}</code></pre>



<h3 id="了解闭包">了解闭包</h3>

<p>Spark的难点之一是在集群中执行代码时理解变量和方法的范围和生命周期。 <br>
修改范围之外的变量的RDD操作常常会给人们带来混乱。在下面的例子中，我们将看看使用foreach（）来增加计数器的代码，里面出现的问题在其他操作也会出现。</p>

<h4 id="例子">例子</h4>

<p>考虑下面的RDD元素计算总和的操作，其执行是否发生在同一个JVM中，这可能会有不同的表现。一个常见的例子就是在本地模式下运行Spark（–master = local [n]）与将Spark应用程序部署到集群（例如，通过spark-submit to YARN）：</p>

<pre class="prettyprint"><code class=" hljs php"><span class="hljs-keyword">var</span> counter = <span class="hljs-number">0</span>
<span class="hljs-keyword">var</span> rdd = sc.parallelize(data)

<span class="hljs-comment">// Wrong: Don't do this!!</span>
rdd.<span class="hljs-keyword">foreach</span>(x =&gt; counter += x)

println(<span class="hljs-string">"Counter value: "</span> + counter)</code></pre>



<h4 id="本地或集群模式">本地或集群模式</h4>

<p>上面的代码的行为是未定义的，并可能无法正常工作。为了执行作业，Spark将RDD操作的处理分解为多个任务，每个任务由Executor执行。在执行之前，Spark计算任务的闭包。闭包是Executor在RDD上执行计算（在本例中为foreach（）））时必须可见的那些变量和方法。这个计算后的闭包将会序列化并发送给每个执行者。</p>

<p>发送给每个执行程序的闭包中的变量现在是一个副本，因此，当在foreach函数中引用counter 时，它不再是驱动程序节点上的counter 。驱动程序节点的内存中还有一个counter ，但Executor引用不到它！Executor只能看到序列化闭包的副本。因此，counter 的最终值仍然是零。</p>

<p>在本地模式下，在某些情况下，foreach函数实际上将在与驱动程序相同的JVM内执行，并将引用相同的原始计数器，并可能实际更新它。</p>

<p>为了确保在这种情况下明确的行为，应该使用Accumulators 。Spark中的Accumulators 专门用于提供一种在集群中的工作节点之间执行拆分时安全地更新变量的机制。本指南的“Accumulators ”部分更详细地讨论了这些内容。</p>

<p>一般来说，闭包 - 像循环或本地定义的方法这样的构造不应该被用来改变一些全局状态。Spark并没有定义或保证对从闭包外引用的对象的突变行为。这样做的一些代码可能在本地模式下工作，但这是偶然的，这样的代码不会按预期在分布式模式下运行。如果需要全局聚合，请使用Accumulators 。</p>

<h4 id="打印rdd的元素">打印RDD的元素</h4>

<p>另一个常见的习惯是试图使用rdd.foreach（println）或rdd.map（println）打印RDD的元素。在单台机器上，这将生成预期的输出并打印所有RDD的元素。但是，在集群模式下，执行程序调用的stdout输出现在写入执行程序的stdout，而不是驱动程序的stdout，因此驱动程序上的stdout不会显示这些！要打印驱动程序中的所有元素，可以使用collect（）方法首先将RDD带到驱动程序节点：rdd.collect（）.foreach（println）。但是，这可能会导致驱动程序内存不足，因为collect（）会将整个RDD提取到Driver上;您只需要打印RDD的几个元素，一个更安全的方法是使用take（）：rdd.take（100）.foreach（println）。</p>

<h3 id="使用key-value对">使用Key-Value对</h3>

<p>尽管大多数Spark操作在包含任何类型对象的RDD上工作，但是一些特殊操作仅在键 - 值对的RDD上可用。 <br>
最常见的是分布式的“shuffle”操作，如按key分组或聚合元素。</p>

<p>在Scala中，这些操作可以在包含Tuple2对象的RDD中自动使用（通过简单写入（a，b）创建的语言中的内置元组）。PairRDDFunctions类中提供了键值对操作，该类自动包装元组的RDD。</p>

<p>例如，以下代码使用键值对上的reduceByKey操作来计算文本中每行文本的出现次数：</p>

<pre class="prettyprint"><code class=" hljs livecodeserver">val <span class="hljs-keyword">lines</span> = sc.textFile(<span class="hljs-string">"data.txt"</span>)
val pairs = <span class="hljs-keyword">lines</span>.map(s =&gt; (s, <span class="hljs-number">1</span>))
val counts = pairs.reduceByKey((<span class="hljs-operator">a</span>, b) =&gt; <span class="hljs-operator">a</span> + b)</code></pre>

<p>或者，我们也可以使用counts.sortByKey（）来按字母顺序对这些对进行排序，最后count.collect（）将它们作为一个对象数组返回给驱动程序。</p>

<blockquote>
  <p>注意：在使用自定义对象作为键值对操作中的键时，必须确保自定义equals（）方法附带有匹配的hashCode（）方法。有关完整的详细信息，请参阅<a href="http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#hashCode%28%29" rel="nofollow" target="_blank">Object.hashCode（）</a>文档中的概述。</p>
</blockquote>



<h3 id="transformations">Transformations</h3>

<p>下表列出了Spark支持的一些常见Transformations。有关详细信息，请参阅<a href="http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.rdd.RDD" rel="nofollow" target="_blank">RDD API文档（Scala）</a>和<a href="http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.rdd.PairRDDFunctions" rel="nofollow" target="_blank">RDD函数doc（Scala）</a>。</p>

<table>
<thead>
<tr>
  <th>Transformation</th>
  <th>描述</th>
</tr>
</thead>
<tbody><tr>
  <td>map(func)</td>
  <td>通过函数func传递源RDD的每个元素来形成一个新的RDD。</td>
</tr>
<tr>
  <td>filter(func)</td>
  <td>通过选择func返回true的源的元素返回一个新的RDD</td>
</tr>
<tr>
  <td>flatMap(func)</td>
  <td>类似于map，但是每个输入项可以映射到0个或更多个输出项（所以func应该返回一个Seq而不是单个项）。</td>
</tr>
<tr>
  <td>mapPartitions(func)</td>
  <td>与map类似，但是在RDD的每个分区（块）上分别运行，所以当在T型RDD上运行时，func参数必须是Iterator  =&gt; Iterator <u>类型。</u></td>
</tr>
<tr>
  <td>mapPartitionsWithIndex(func)</td>
  <td>类似于mapPartitions，但也提供了一个表示分区索引的整数值的func，所以在T类型的RDD上运行时，func的参数类型必须是（Int，Iterator ）=&gt; Iterator <u>。</u></td>
</tr>
<tr>
  <td>sample(withReplacement, fraction, seed)</td>
  <td>使用给定的随机数种子对数据的一小部分进行采样，有或没有替换。</td>
</tr>
<tr>
  <td>union(otherDataset)</td>
  <td>并集，返回包含源数据集中的元素和参数的数据集的新数据集。</td>
</tr>
<tr>
  <td>intersection(otherDataset)</td>
  <td>交集，返回一个新的RDD，其中包含源数据集中的元素和参数的交集。</td>
</tr>
<tr>
  <td>distinct([numTasks]))</td>
  <td>返回包含源数据集的不同元素的新数据集，类似于Set数据结构</td>
</tr>
<tr>
  <td>groupByKey（[numTasks]）</td>
  <td>当在（K，V）对的数据集上调用时，返回（K，Iterable ）对的数据集。注意：如果您正在对每个键执行聚合（例如总和或平均），则使用reduceByKey或aggregateByKey将会产生更好的性能。注：默认情况下，输出中的并行级别取决于父RDD的分区数量。您可以传递一个可选的numTasks参数来设置不同数量的任务。</td>
</tr>
<tr>
  <td>reduceByKey(func, [numTasks])</td>
  <td>当调用（K，V）对的数据集时，返回（K，V）对的数据集，其中每个键的值使用给定的reduce函数func进行聚合，函数func必须是（V，V）=&gt; V.就像在groupByKey中一样，reduce任务的数量可以通过可选的第二个参数来配置。</td>
</tr>
<tr>
  <td>aggregateByKey(zeroValue)(seqOp, combOp, [numTasks])</td>
  <td>当在（K，V）对的数据集上时，返回（K，U）对的数据集，其中使用给定的组合函数和中性的“零”值来汇总每个键的值。允许与输入值类型不同的聚合值类型，同时避免不必要的分配。reduce任务的数量可以通过可选的第二个参数来配置。</td>
</tr>
<tr>
  <td>sortByKey（[ascending]，[numTasks]）</td>
  <td>当在K实现Ordered的（K，V）对的数据集上调用时，按照ascending参数的指定，按照升序或降序返回按key排序的（K，V）对的数据集。</td>
</tr>
<tr>
  <td>join(otherDataset, [numTasks])</td>
  <td>当（K，V）和（K，W）类型的数据集被调用时，返回每个key的所有元素对的（K，（V，W））对的数据集。外连接通过leftOuterJoin，rightOuterJoin和fullOuterJoin来支持。</td>
</tr>
<tr>
  <td>cogroup(otherDataset, [numTasks])</td>
  <td>当（K，V）和（K，W）类型的数据集被调用时，返回（K，（Iterable ，Iterable ））元组的数据集。这个操作也被称为groupWith。</td>
</tr>
<tr>
  <td>cartesian(otherDataset)</td>
  <td>当调用类型T和U的数据集时，返回（T，U）对（所有元素对）的数据集。</td>
</tr>
<tr>
  <td>pipe(command, [envVars])</td>
  <td>通过shell命令管理RDD的每个分区，例如，一个Perl或bash脚本。RDD元素被写入进程的stdin，输出到stdout的行被作为字符串的RDD返回。</td>
</tr>
<tr>
  <td>coalesce(numPartitions)</td>
  <td>减少RDD中的分区数量为numPartitions。用于在过滤大型数据集后更高效地运行操作。</td>
</tr>
<tr>
  <td>repartition(numPartitions)</td>
  <td>随机调整RDD中的数据以创建更多或更少的分区并在其间进行平衡。这总是通过网络混洗所有数据。</td>
</tr>
<tr>
  <td>repartitionAndSortWithinPartitions(partitioner)</td>
  <td>根据给定的分区器对RDD进行重新分区，并在每个结果分区中按key排序。这比调用重新分区，然后在每个分区内进行排序更有效率，因为它可以将排序压入shuffle机制。</td>
</tr>
</tbody></table>


<h3 id="actions">Actions</h3>

<p>下表列出了Spark支持的一些常用操作。详细信息请参阅RDD API文档（<a href="http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.rdd.RDD" rel="nofollow" target="_blank">Scala</a>，Java，Python，R） 并配对RDD函数doc（<a href="http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.rdd.PairRDDFunctions" rel="nofollow" target="_blank">Scala</a>，Java）。</p>

<table>
<thead>
<tr>
  <th>Action</th>
  <th>含义</th>
</tr>
</thead>
<tbody><tr>
  <td>reduce(func)</td>
  <td>使用函数func（它接受两个参数并返回一个）聚合数据集的元素。该函数应该是可交换参数和关联的，以便它可以被正确地并行计算。</td>
</tr>
<tr>
  <td>collect()</td>
  <td>在driver 中将数据集的所有元素作为数组返回。在过滤器或其他操作返回足够小的数据子集之后，这通常很有用。</td>
</tr>
<tr>
  <td>count()</td>
  <td>返回数据集中元素的数量。</td>
</tr>
<tr>
  <td>first()</td>
  <td>返回数据集的第一个元素（类似于take（1））。</td>
</tr>
<tr>
  <td>take(n)</td>
  <td>用数据集的前n个元素返回一个数组。</td>
</tr>
<tr>
  <td>takeSample(withReplacement, num, [seed])</td>
  <td>返回一个数组的随机样本数组，有或没有替换，可以预先指定一个随机数发生器种子。</td>
</tr>
<tr>
  <td>takeOrdered(n, [ordering])</td>
  <td>使用自然顺序或自定义比较器返回RDD的前n个元素。</td>
</tr>
<tr>
  <td>saveAsTextFile(path)</td>
  <td>将数据集的元素作为文本文件（或文本文件集）写入本地文件系统，HDFS或任何其他Hadoop支持的文件系统的给定目录中。Spark将在每个元素上调用toString将其转换为文件中的一行文本。</td>
</tr>
<tr>
  <td>saveAsSequenceFile(path) (Java and Scala)</td>
  <td>将数据集的元素作为Hadoop SequenceFile写入本地文件系统，HDFS或任何其他Hadoop支持的文件系统的给定路径中。他可以在实现Hadoop的Writable接口的键值对的RDD上使用。在Scala中，它也可用于可隐式转换为Writable的类型</td>
</tr>
<tr>
  <td>saveAsObjectFile(path) (Java and Scala)</td>
  <td>使用Java序列化以简单的格式写入数据集的元素，然后可以使用SparkContext.objectFile（）加载。</td>
</tr>
<tr>
  <td>countByKey()</td>
  <td>仅适用于类型（K，V）的RDD。返回（K，Int）对的hashmap和每个键的计数。</td>
</tr>
<tr>
  <td>foreach(func)</td>
  <td>在数据集的每个元素上运行函数func。这通常用于副作用，如更新累加器或与外部存储系统交互。注意：修改foreach（）之外的累加器以外的变量可能会导致未定义的行为。请参阅了解更多细节。</td>
</tr>
</tbody></table>


<p>Spark RDD API还公开了一些Action的异步版本，例如foreach的foreachAsync，它立即将FutureAction返回给调用者，而不是在完成动作时阻塞。</p>

<h3 id="shuffle-操作">Shuffle 操作</h3>

<p>Spark中的某些操作会触发一个称为shuffle的事件。shuffle是Spark重新分配数据的机制，以便在不同分区之间进行分组。这通常涉及在执行者和机器之间复制数据，使得shuffle成为复杂而昂贵的操作。</p>

<h4 id="背景">背景</h4>

<p>为了理解shuffle过程中发生了什么，我们可以考虑reduceByKey操作的例子。 <br>
reduceByKey操作生成一个新的RDD，其中单个键的所有值都组合到一个元组中 - 键和对与该键相关的所有值执行reduce函数的结果。面临的挑战是，并不是所有的单个key的值都必须位于同一个分区，甚至是同一个机器上，但是它们必须位于同一地点才能计算出结果。</p>

<p>在Spark中，数据通常不是跨分区分布，而是在特定操作的必要位置。在计算过程中，单个任务将在单个分区上运行 - 因此，要组织单个reduceByKey reduce任务的所有数据执行，Spark需要对全部数据执行操作。它必须从所有分区中读取所有键的值，然后将各个分区上的值汇总在一起，以计算每个键的最终结果 - 这就是所谓的shuffle。</p>

<p>虽然新shuffle数据的每个分区中的元素集合是确定性的，分区本身的排序也是确定性的，但这些元素的排序并不是这样。如果一个人在shuffle之后需要有序数据，那么可以使用：</p>

<ul>
<li>使用mapPartitions.如通过sorted对每个分区进行排序</li>
<li>repartitionAndSortWithinPartitions在同时进行重新分区的同时有效地对分区进行排序</li>
<li>sortBy 来制作全局排序的RDD</li>
</ul>

<p>可能导致shuffle的操作包括repartition 操作（如repartition 和 coalesce），“像groupByKey和reduceByKey一样的ByKey操作（除计数），以及join 操作（如cogroup和join）。</p>

<h4 id="对性能的影响">对性能的影响</h4>

<p>Shuffle操作是一个很昂贵的操作，因为它涉及到磁盘IO，序列化，网络传输。为了组织数据，Spark生成一组任务 - map任务来组织数据，以及一组reduce任务来聚合它。这个术语来自MapReduce，并不直接与Spark的map和reduce操作有关。</p>

<p>在内部，map任务的结果被保存在内存中，直到它们保存不下为止。然后，将这些根据key分区进行排序的结果写入单个文件。最后在reduce端，读取与之相关的排序数据块。</p>

<p>某些shuffle操作会消耗大量的堆内存，因为它们在传输数据前后会使用内存中的数据结构去组织记录。具体来说，reduceByKey和aggregateByKey在map上创建这些数据结构，’ByKey操作在reduce方面生成这些数据结构。当数据不适合存储在内存中时（即过大），Spark会将这些数据溢出到磁盘，这会导致额外的磁盘I / O开销和增加垃圾回收开销。</p>

<p>Shuffle也会在磁盘上生成大量的中间文件。从Spark 1.3开始，这些中间文件将被保留，直到相应的RDD不再使用并被垃圾回收。保留这些中间是为了在执行重新计算时不需要重新shuffle。如果应用程序保留对这些RDD的引用，或者GC不经常引入，垃圾回收可能会在很长一段时间后才会发生。这意味着长时间运行Spark作业可能会消耗大量的磁盘空间。在配置Spark时，临时存储目录由spark.local.dir配置参数指定。</p>

<p>shuffle行为可以通过调整各种配置参数来调整。详情请参阅“<a href="http://spark.apache.org/docs/latest/configuration.html" rel="nofollow" target="_blank">Spark配置指南</a>”中的“Shuffle Behavior”部分。</p>

<h2 id="rdd持久化">RDD持久化</h2>

<p>Spark中最重要的功能之一就是在内存中保留（或缓存）一个数据集。当持久化RDD时，每个节点存储它在内存中所计算的分区，并在该数据集上的其他操作（或从中派生的数据集）中重用它们。这可以使未来的行动更快（通常超过10倍）。缓存是迭代算法和快速交互式使用的关键工具。</p>

<p>您可以使用persist（）或cache（）方法将RDD标记为持久化。第一次在Action中计算时，它将被保存在节点的内存中。Spark的缓存是容错的 - 如果RDD的任何分区丢失，它将自动重新计算。</p>

<p>另外，RDD可以使用不同的存储级别进行存储，例如，您可以将数据集保存在磁盘上，将其保存在内存中，但作为序列化的Java对象（以节省空间），将其复制到节点上。这些级别通过传递一个StorageLevel对象来持久化来设置。cache（）默认StorageLevel.MEMORY_ONLY（将反序列化的对象存储在内存中）。 <br>
存储级别分别有：</p>

<table>
<thead>
<tr>
  <th>Storage Level</th>
  <th>Meaning</th>
</tr>
</thead>
<tbody><tr>
  <td>MEMORY_ONLY</td>
  <td>将RDD作为反序列化的Java对象存储在JVM中。如果RDD不适合存储在内存，某些分区将不会被缓存，并且每次需要时都会重新进行计算。这是默认级别。</td>
</tr>
<tr>
  <td>MEMORY_AND_DISK</td>
  <td>将RDD作为反序列化的Java对象存储在JVM中。如果RDD在内存存不下，会存储剩余的分区到磁盘上，并在需要时从中读取。</td>
</tr>
<tr>
  <td>MEMORY_ONLY_SER</td>
  <td>将RDD存储为序列化的Java对象（每个分区一个字节的数组）。这通常比反序列化的对象更节省空间，特别是在使用<a href="http://spark.apache.org/docs/latest/tuning.html" rel="nofollow" target="_blank">快速序列化器</a>的情况下，但需要消耗更多的CPU资源。</td>
</tr>
<tr>
  <td>MEMORY_AND_DISK_SER</td>
  <td>与MEMORY_ONLY_SER类似，但是将不适合内存的分区溢出到磁盘，而不是每次需要时重新计算它们。</td>
</tr>
<tr>
  <td>DISK_ONLY</td>
  <td>仅存储在磁盘上</td>
</tr>
<tr>
  <td>MEMORY_ONLY_2, MEMORY_AND_DISK_2, etc.</td>
  <td>和以上类似，但存储两份。</td>
</tr>
<tr>
  <td>OFF_HEAP (experimental)</td>
  <td>存储在<a href="http://spark.apache.org/docs/latest/configuration.html#memory-management" rel="nofollow" target="_blank">堆外内存</a>。需要开启该功能才能使用</td>
</tr>
</tbody></table>


<h3 id="选择哪个存储级别">选择哪个存储级别？</h3>

<p>Spark的存储级别旨在提供内存使用和CPU效率之间的不同折衷。我们建议通过以下过程来选择一个：</p>

<ul>
<li>如果您的RDD适合默认的存储级别（MEMORY_ONLY），请以这种方式存储它们。这是CPU效率最高的选项，允许RDD上的操作尽可能快地运行。</li>
<li>如果不能以第一种方式存储，尝试使用MEMORY_ONLY_SER并选择一个快速序列化库来使对象更加节省内存空间，但是访问速度仍然相当快。</li>
<li>除非计算你的数据集的函数是昂贵的，否则请不要溢出到磁盘上。除非它们会过滤大量的数据，否则，重新计算分区可能与从磁盘读取分区一样快。</li>
<li>如果要快速恢复故障，请使用复制策略的存储级别。所有的存储级别通过重新计算丢失的数据来提供完整的容错能力，但是复制策略的数据可以让您继续在RDD上运行任务，而无需等待重新计算丢失的分区。</li>
</ul>

<h3 id="移除数据">移除数据</h3>

<p>Spark会自动监视每个节点上的高速缓存使用情况，并以最近最少使用（LRU）方式删除旧的数据分区。如果您想要手动删除RDD，而不是等待其从缓存中删除，请使用RDD.unpersist（）方法。</p>



<h1 id="共享变量">共享变量</h1>

<p>通常，在远程集群节点上执行传递给Spark操作（如map或reduce）的函数时，它将在函数中使用的所有变量的副本上运行。这些变量被复制到每台机器上，远程机器上的变量没有更新到驱动程序。支持通用的、可读写的共享变量将是低效的，但是，Spark为两种常见使用模式提供了两种有限类型的共享变量：广播变量和累加器。</p>



<h2 id="广播变量">广播变量</h2>

<p>广播变量允许程序员在每台机器上保存一个只读变量，而不是用任务发送一个只读变量的副本。例如，可以使用它们以有效的方式为每个节点提供大型输入数据集的副本。Spark还尝试使用高效的广播算法来分发广播变量，以降低通信成本。</p>

<p>Spark Action是通过一系列Stage执行的，Stage由分散的shuffle操作分开。Spark会自动广播每个阶段中任务所需的通用数据。以这种方式广播的数据以序列化形式缓存，并在运行每个任务之前反序列化。这意味着只有跨多个阶段的任务需要相同的数据或以反序列化的形式缓存数据时，显式创建广播变量才是有用的。</p>

<p>广播变量是通过调用SparkContext.broadcast（v）从变量v创建的。广播变量是v的一个封装，它的值可以通过调用value方法来访问。下面的代码展示如何使用：</p>

<pre class="prettyprint"><code class=" hljs avrasm">scala&gt; val broadcastVar = sc<span class="hljs-preprocessor">.broadcast</span>(Array(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))
<span class="hljs-label">broadcastVar:</span> org<span class="hljs-preprocessor">.apache</span><span class="hljs-preprocessor">.spark</span><span class="hljs-preprocessor">.broadcast</span><span class="hljs-preprocessor">.Broadcast</span>[Array[Int]] = Broadcast(<span class="hljs-number">0</span>)

scala&gt; broadcastVar<span class="hljs-preprocessor">.value</span>
<span class="hljs-label">res0:</span> Array[Int] = Array(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)</code></pre>

<p>在创建广播变量之后，应该在群集上运行的任何函数中使用值而不是值v，以便v不会多次传送到节点。另外，对象v在广播后不应该被修改，以确保所有节点获得相同的广播变量值</p>



<h2 id="累加器">累加器</h2>

<p>累加器是仅通过关联和交换操作“添加”的变量，因此可以有效地支持并行操作。它们可以用来实现计数器（如在MapReduce中）或者和计算。 <br>
Spark本身支持数字类型的累加器，程序员可以添加其对新类型的支持。</p>

<p>作为用户，您可以创建已命名或未命名的累加器。如下图所示，一个已命名的累加器（在这种情况下计数器）将显示在修改该累加器的阶段的Web UI中。Spark在“任务”表中显示每次任务修改的累加器的值。 <br>
<img src="https://img-blog.csdn.net/20180122095724437?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvenVvbG92ZWZ1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title=""> <br>
跟踪用户界面中的累加器对于理解运行阶段的进度非常有用（注意：Python尚不支持）。</p>

<p>可以通过调用SparkContext.longAccumulator（）或SparkContext.doubleAccumulator（）来分别累积Long或Double类型的值来创建数字累加器。在群集上运行的任务可以使用add方法添加它。但是，他们无法读它的值。只有Driver可以使用其value方法读取累加器的值。</p>

<p>下面的代码显示了一个累加器被用来计算一个数组的和：</p>



<pre class="prettyprint"><code class=" hljs avrasm">scala&gt; val accum = sc<span class="hljs-preprocessor">.longAccumulator</span>(<span class="hljs-string">"My Accumulator"</span>)
<span class="hljs-label">accum:</span> org<span class="hljs-preprocessor">.apache</span><span class="hljs-preprocessor">.spark</span><span class="hljs-preprocessor">.util</span><span class="hljs-preprocessor">.LongAccumulator</span> = LongAccumulator(id: <span class="hljs-number">0</span>, name: Some(My Accumulator), value: <span class="hljs-number">0</span>)

scala&gt; sc<span class="hljs-preprocessor">.parallelize</span>(Array(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>))<span class="hljs-preprocessor">.foreach</span>(<span class="hljs-built_in">x</span> =&gt; accum<span class="hljs-preprocessor">.add</span>(<span class="hljs-built_in">x</span>))
...
<span class="hljs-number">10</span>/<span class="hljs-number">09</span>/<span class="hljs-number">29</span> <span class="hljs-number">18</span>:<span class="hljs-number">41</span>:<span class="hljs-number">08</span> INFO SparkContext: Tasks finished <span class="hljs-keyword">in</span> <span class="hljs-number">0.317106</span> s

scala&gt; accum<span class="hljs-preprocessor">.value</span>
<span class="hljs-label">res2:</span> Long = <span class="hljs-number">10</span></code></pre>

<p>虽然这段代码使用了对Long类型的累加器的内置支持，程序员也可以通过继承<a href="http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.util.AccumulatorV2" rel="nofollow" target="_blank">AccumulatorV2</a>来创建自己的类型。 <br>
AccumulatorV2抽象类有几个方法必须重写：reset方法重置累加器为零，add方法用于向累加器中添加另一个值，merge方法合并另一个相同类型的累加器到这个累加器中。其他必须被覆盖的方法包含在<a href="http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.util.AccumulatorV2" rel="nofollow" target="_blank">API文档</a>中。 <br>
例如，假设我们有一个表示数学向量的MyVector类，我们可以这样写：</p>



<pre class="prettyprint"><code class=" hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VectorAccumulatorV2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AccumulatorV2</span>[<span class="hljs-title">MyVector</span>, <span class="hljs-title">MyVector</span>] {</span>

  <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> myVector: MyVector = MyVector.createZeroVector

  <span class="hljs-keyword">def</span> reset(): Unit = {
    myVector.reset()
  }

  <span class="hljs-keyword">def</span> add(v: MyVector): Unit = {
    myVector.add(v)
  }
  ...
}

<span class="hljs-comment">// Then, create an Accumulator of this type:</span>
<span class="hljs-keyword">val</span> myVectorAcc = <span class="hljs-keyword">new</span> VectorAccumulatorV2
<span class="hljs-comment">// Then, register it into spark context:</span>
sc.register(myVectorAcc, <span class="hljs-string">"MyVectorAcc1"</span>)</code></pre>

<p>请注意，当程序员定义自己的AccumulatorV2类型时，结果数据类型可能与添加元素的数据类型不同。</p>

<p>对于仅在Action内执行的累加器更新，Spark保证每个任务对累加器的更新只会应用一次，即重新启动的任务不会更新该值。 <br>
在transformations中，用户应该意识到，如果任务或作业阶段被重新执行，每个任务的更新可能会被应用多次。</p>

<p>累加器不会改变Spark的懒惰加载模型。如果它们在RDD上的操作中被更新，则其值仅在RDD作为动作的一部分计算之后才被更新。因此，在像map（）这样的惰性转换中进行累加器更新并不能保证执行。下面的代码片段演示了这个属性：</p>



<pre class="prettyprint"><code class=" hljs haskell"><span class="hljs-title">val</span> accum = sc.longAccumulator
<span class="hljs-typedef"><span class="hljs-keyword">data</span>.map <span class="hljs-container">{ <span class="hljs-title">x</span> =&gt; <span class="hljs-title">accum</span>.<span class="hljs-title">add</span>(<span class="hljs-title">x</span>); <span class="hljs-title">x</span> }</span></span>
// <span class="hljs-type">Here</span>, accum is still <span class="hljs-number">0</span> because no actions have caused the map operation to be computed.</code></pre>



<h1 id="单元测试">单元测试</h1>

<p>Spark对任何流行的单元测试框架的单元测试都很友好。只需在主URL设置为本地的情况下在测试中创建一个SparkContext，运行您的操作，然后调用SparkContext.stop（）将其关闭。确保在最后调用SparkContext.stop（），因为Spark不支持在同一个程序中同时运行两个SparkContext。</p>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>