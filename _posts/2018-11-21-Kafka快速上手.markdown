---
layout:     post
title:      Kafka快速上手
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<p><span style="font-family:'Microsoft YaHei';font-size:14px;"><br></span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">        Kafka是一个分布式的数据流平台，常用来作为消息传送中间件。本篇介绍Kafka的使用方法，以linux系统为例 （windows系统只需将下面的命令"bin/"都改为"bin\windows\"，脚本扩展名“.sh”改为“.bat”），适合刚接触Kafka和zookeeper的新手。原文http://kafka.apache.org/documentation#quickstart</span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;"><br></span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;color:#6600cc;"><strong>1. 下载软件包，并解压</strong></span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">https://www.apache.org/dyn/closer.cgi?path=/kafka/0.10.1.0/kafka_2.11-0.10.1.0.tgz</span></p>
<p></p>
<pre style="border-style:solid;border-color:rgb(229,229,229);color:rgb(68,68,68);line-height:22.4px;"><span style="font-family:'Microsoft YaHei';font-size:14px;">&gt; <span style="line-height:1.2;">tar -xzf kafka_2.11-0.10.1.0.tgz</span>
&gt; <span style="line-height:1.2;">cd kafka_2.11-0.10.1.0</span></span></pre>
<span style="font-family:'Microsoft YaHei';font-size:14px;"><br></span>
<p></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;color:#6600cc;"><strong>2. 启动服务</strong></span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">kafka自带了zookeeper，可以直接使用它建立一个单节点的zookeeper 实例。也可以自己安装配置zookeeper</span></p>
<p></p>
<pre style="border-style:solid;border-color:rgb(229,229,229);color:rgb(68,68,68);line-height:22.4px;"><span style="font-family:'Microsoft YaHei';font-size:14px;">&gt; <span style="line-height:1.2;">bin/zookeeper-server-start.sh config/zookeeper.properties</span>
[2013-04-22 15:01:37,495] INFO Reading configuration from: config/zookeeper.properties (org.apache.zookeeper.server.quorum.QuorumPeerConfig)
...</span></pre>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;"><span style="font-family:'Microsoft YaHei';font-size:14px;"><span style="color:#ff0000;">注意：windows上因为文件夹空格问题可能导致启动zookeeper失败，我直接启动就报错    </span></span></span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;"><span style="font-family:'Microsoft YaHei';font-size:14px;"><span style="color:#ff0000;"><strong>错误: 找不到或无法加载主类 Files\Java\jdk1.8.0_51\lib;D:\Program：</strong></span></span><br></span></p>
<p><span style="font-family:'Microsoft YaHei';color:#009900;"><span style="font-size:14px;">解决方法：修改bin\windows\kafka-run-class.bat 文件里面142行，给%CLASSPATH%加上双引号：</span></span></p>
<p></p>
<pre><code class="language-html">set COMMAND=%JAVA% %KAFKA_HEAP_OPTS% %KAFKA_JVM_PERFORMANCE_OPTS% %KAFKA_JMX_OPTS% %KAFKA_LOG4J_OPTS% -cp "%CLASSPATH%" %KAFKA_OPTS% %*
</code></pre><br><br><p></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">启动kafka server</span></p>
<p></p>
<p></p>
<pre style="border-style:solid;border-color:rgb(229,229,229);color:rgb(68,68,68);line-height:22.4px;"><span style="font-family:'Microsoft YaHei';font-size:14px;">&gt; <span style="line-height:1.2;">bin/kafka-server-start.sh config/server.properties</span>
[2013-04-22 15:01:47,028] INFO Verifying properties (kafka.utils.VerifiableProperties)
[2013-04-22 15:01:47,051] INFO Property socket.send.buffer.bytes is overridden to 1048576 (kafka.utils.VerifiableProperties)
...</span></pre>
<span style="font-family:'Microsoft YaHei';font-size:14px;color:#6600cc;"><strong>3. 创建topic</strong></span>
<p></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">topic 名字为test，1个分块和1个副本</span></p>
<p></p>
<pre style="border-style:solid;border-color:rgb(229,229,229);color:rgb(68,68,68);line-height:22.4px;"><span style="font-family:'Microsoft YaHei';font-size:14px;">&gt; <span style="line-height:1.2;">bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test</span></span></pre>
<span style="font-family:'Microsoft YaHei';font-size:14px;">查看topic列表</span>
<p></p>
<p></p>
<pre style="border-style:solid;border-color:rgb(229,229,229);color:rgb(68,68,68);line-height:22.4px;"><span style="font-family:'Microsoft YaHei';font-size:14px;">&gt; <span style="line-height:1.2;">bin/kafka-topics.sh --list --zookeeper localhost:2181</span>
test</span></pre>
<span style="font-family:'Microsoft YaHei';font-size:14px;color:#6600cc;"><strong>4. producer发送消息</strong></span>
<p></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">kafka的命令行客户端可以将文件或标准输入作为消息来发送到kafka集群。默认情况下每一行都是独立一个消息。</span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">发送消息时要运行producer。</span></p>
<p></p>
<pre style="border-style:solid;border-color:rgb(229,229,229);color:rgb(68,68,68);line-height:22.4px;"><span style="font-family:'Microsoft YaHei';font-size:14px;">&gt; <span style="line-height:1.2;">bin/kafka-console-producer.sh --broker-list localhost:9092 --topic test
This is a message
This is another message</span></span></pre>
<p></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">按ctrl+c退出消息发送。</span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;"><br></span></p>
<span style="font-family:'Microsoft YaHei';font-size:14px;color:#6600cc;"><strong>5. consumer接收消息</strong></span>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">consumer订阅了topic test就可以接收上面的消息。命令行运行consumer将接收到的消息显示在终端：<br></span></p>
<p></p>
<pre style="border-style:solid;border-color:rgb(229,229,229);color:rgb(68,68,68);line-height:22.4px;"><span style="font-family:'Microsoft YaHei';font-size:14px;">&gt; <span style="line-height:1.2;">bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test --from-beginning</span>
This is a message
This is another message</span></pre>
<span style="font-family:'Microsoft YaHei';font-size:14px;">你可以在两个终端分别运行producer和consumer，更直观地在这边发送消息，另一边接收消息。</span>
<p></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;"><br></span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;color:#6600cc;"><strong>6. 设置多个代理（<a id="quickstart_multibroker" href="http://kafka.apache.org/documentation#quickstart_multibroker" rel="nofollow">multi-broker</a>）集群</strong></span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">以上我们是在一个代理来传送消息，实际上一个代理也是集群，只不过是单节点。下面我们就创建两个代理实例来看一下它们是怎么协作的。</span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">在只有一台机器的情况下，可以开放不同的端口来区分不同的代理。</span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">先将server.properties拷贝两个副本：</span></p>
<p></p>
<pre style="border-style:solid;border-color:rgb(229,229,229);color:rgb(68,68,68);line-height:22.4px;"><span style="font-family:'Microsoft YaHei';font-size:14px;">&gt; <span style="line-height:1.2;">cp config/server.properties config/server-1.properties</span>
&gt; <span style="line-height:1.2;">cp config/server.properties config/server-2.properties</span></span></pre>
<span style="font-family:'Microsoft YaHei';font-size:14px;">编辑副本：</span>
<p></p>
<p></p>
<pre style="border-style:solid;border-color:rgb(229,229,229);color:rgb(68,68,68);line-height:22.4px;"><span style="font-family:'Microsoft YaHei';font-size:14px;">config/server-1.properties:
    broker.id=1
    listeners=PLAINTEXT://:9093
    log.dir=/tmp/kafka-logs-1

config/server-2.properties:
    broker.id=2
    listeners=PLAINTEXT://:9094
    log.dir=/tmp/kafka-logs-2</span></pre>
<span style="font-family:'Microsoft YaHei';font-size:14px;">broker.id属性对于每个节点必须是唯一的。使用不同的log目录是为了每个节点存储自己的日志文件，不会互相覆盖。</span>
<p></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;"><br>
启动这两个节点：</span></p>
<p></p>
<pre style="border-style:solid;border-color:rgb(229,229,229);color:rgb(68,68,68);line-height:22.4px;"><span style="font-family:'Microsoft YaHei';font-size:14px;">&gt; <span style="line-height:1.2;">bin/kafka-server-start.sh config/server-1.properties &amp;</span>
...
&gt; <span style="line-height:1.2;">bin/kafka-server-start.sh config/server-2.properties &amp;</span>
...</span></pre>
<span style="font-family:'Microsoft YaHei';font-size:14px;">创建一个新的topic，有1个分块和3个副本：</span>
<p></p>
<p></p>
<pre style="border-style:solid;border-color:rgb(229,229,229);color:rgb(68,68,68);line-height:22.4px;"><span style="font-family:'Microsoft YaHei';font-size:14px;">&gt; <span style="line-height:1.2;">bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 3 --partitions 1 --topic my-replicated-topic</span></span></pre>
<span style="font-family:'Microsoft YaHei';font-size:14px;">执行<span style="line-height:22.4px;">describe topics命令来观察哪一个代理在处理该topic。</span></span>
<p></p>
<p><span style="line-height:22.4px;"><span style="font-family:'Microsoft YaHei';font-size:14px;"></span></span></p>
<pre style="border-style:solid;border-color:rgb(229,229,229);color:rgb(68,68,68);line-height:22.4px;"><span style="font-family:'Microsoft YaHei';">&gt; <span style="line-height:1.2;">bin/kafka-topics.sh --describe --zookeeper localhost:2181 --topic my-replicated-topic</span>
Topic:my-replicated-topic	PartitionCount:1	ReplicationFactor:3	Configs:
	Topic: my-replicated-topic	Partition: 0	Leader: 1	Replicas: 1,2,0	Isr: 1,2,0</span></pre>
<span style="font-family:'Microsoft YaHei';font-size:14px;">第一行是topic概观，描述该topic的信息。接下来每一行显示该topic一个分块的信息。因为我们这个topic只有一个分块，所以只有一行。</span>
<p></p>
<p><span style="line-height:22.4px;"><span style="font-family:'Microsoft YaHei';font-size:14px;">Leader：负责该分块的读写，随机选举出来的节点；</span></span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;"><span style="line-height:22.4px;">replica：复制分块的节点；</span></span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;"><span style="line-height:22.4px;">isr：是<span style="line-height:22.4px;">replica的子集，leader的候选集，即slave。</span></span></span></p>
<p><span style="font-size:14px;"><span style="line-height:22.4px;"><span style="font-family:'Microsoft YaHei';">在该例子中，node 1是my-replicated-topic唯一一个分块的leader。</span></span></span></p>
<p><span style="font-size:14px;"><span style="line-height:22.4px;"><span style="font-family:'Microsoft YaHei';">接下来我们向<span style="line-height:22.4px;">my-replicated-topic发送一些消息：</span></span></span></span></p>
<p><span style="font-size:14px;"><span style="line-height:22.4px;"><span style="font-family:'Microsoft YaHei';"><span style="line-height:22.4px;"></span></span></span></span></p>
<pre style="border-style:solid;border-color:rgb(229,229,229);color:rgb(68,68,68);line-height:22.4px;"><span style="font-family:'Microsoft YaHei';">&gt; <span style="line-height:1.2;">bin/kafka-console-producer.sh --broker-list localhost:9092 --topic my-replicated-topic</span>
...
<span style="line-height:1.2;">my test message 1
my test message 2
^C</span></span></pre>
<span style="font-family:'Microsoft YaHei';">通过消费者接受消息：</span>
<p></p>
<p><span style="font-size:14px;"><span style="line-height:22.4px;"><span style="font-family:'Microsoft YaHei';"><span style="line-height:22.4px;"></span></span></span></span></p>
<pre style="border-style:solid;border-color:rgb(229,229,229);color:rgb(68,68,68);line-height:22.4px;"><span style="font-family:'Microsoft YaHei';">&gt; <span style="line-height:1.2;">bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --from-beginning --topic my-replicated-topic</span>
...
my test message 1
my test message 2
<span style="line-height:1.2;">^C</span></span></pre>
<span style="font-family:'Microsoft YaHei';">容错测试。我们kill作为leader的Broker 1：</span>
<p></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;"><span style="line-height:22.4px;"></span></span></p>
<pre style="border-style:solid;border-color:rgb(229,229,229);color:rgb(68,68,68);line-height:22.4px;"><span style="font-family:'Microsoft YaHei';">&gt; <span style="line-height:1.2;">ps aux | grep server-1.properties</span>
<em>7564</em>  ttys002    0:15.91 /System/Library/Frameworks/JavaVM.framework/Versions/1.8/Home/bin/java...
&gt; <span style="line-height:1.2;">kill -9 7564</span></span></pre>
<span style="font-family:'Microsoft YaHei';font-size:14px;">执行<span style="line-height:22.4px;">describe topics：</span><br></span>
<p></p>
<p><span style="line-height:22.4px;"><span style="font-family:'Microsoft YaHei';font-size:14px;"><span style="line-height:22.4px;"></span></span></span></p>
<pre style="border-style:solid;border-color:rgb(229,229,229);color:rgb(68,68,68);line-height:22.4px;"><span style="font-family:'Microsoft YaHei';font-size:12px;">&gt; <span style="line-height:1.2;">bin/kafka-topics.sh --describe --zookeeper localhost:2181 --topic my-replicated-topic</span>
Topic:my-replicated-topic	PartitionCount:1	ReplicationFactor:3	Configs:
	Topic: my-replicated-topic	Partition: 0	Leader: 2	Replicas: 1,2,0	Isr: 2,0</span></pre>
<span style="font-family:'Microsoft YaHei';font-size:14px;">可以看到node 2 成为了新的leader，备胎集Isr里面也没了node 1。这样的变动完全不影响消费者取数据：</span>
<p></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;"><span style="line-height:22.4px;"><span style="line-height:22.4px;"></span></span></span></p>
<pre style="border-style:solid;border-color:rgb(229,229,229);color:rgb(68,68,68);line-height:22.4px;"><span style="font-family:'Microsoft YaHei';">&gt; <span style="line-height:1.2;">bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --from-beginning --topic my-replicated-topic</span>
...
my test message 1
my test message 2
<span style="line-height:1.2;">^C</span></span></pre>
<strong><span style="color:#6600cc;">7. kafka connect输入/输出数据</span></strong>
<p></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;"><span style="line-height:22.4px;">只从终端来输入发送消息和显示接受消息显然不能满足大家的需求。kafka提供了一个连接外部系统的工具kafka connector。<span style="line-height:22.4px;">kafka connector可以将各种数据源作为消息输入（包括文件、程序输出、log），也可以将接受到的消息写入文件。</span></span></span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;"><span style="line-height:22.4px;">本例以读写文件为例，创建文件：</span></span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;"><span style="line-height:22.4px;"></span></span></p>
<pre style="border-style:solid;border-color:rgb(229,229,229);color:rgb(68,68,68);line-height:22.4px;"><span style="font-family:'Microsoft YaHei';">&gt; <span style="line-height:1.2;">echo -e "foo\nbar" &gt; test.txt</span></span></pre>
接着运行两个connectors。
<p></p>
<p></p>
<pre style="border-style:solid;border-color:rgb(229,229,229);"><span style="font-family:'Microsoft YaHei';font-size:14px;">&gt; bin/connect-standalone.sh config/connect-standalone.properties config/connect-file-source.properties config/connect-file-sink.properties</span></pre>
<p></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;"><span style="line-height:22.4px;">三个配置文件：</span></span></p>
<p><span style="line-height:22.4px;"><span style="font-family:'Microsoft YaHei';font-size:14px;">第一个是kafka链接过程，包括一些通用的配置如连接的broker、数据序列化的格式；</span></span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;"><span style="line-height:22.4px;">第二个和第三个配置文件各指定了一个<span style="line-height:22.4px;">connector，里面的配置项包括唯一的连接名、连接类等。<span style="line-height:22.4px;">source connector读文件，将每一行作为一个消息发送出去。</span><span style="line-height:22.4px;">sink
 connector从<span style="line-height:22.4px;">kafka</span>接收消息并逐行写入文件。</span></span></span></span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">source connector的配置：</span></p>
<p></p>
<pre><code class="language-plain">name=local-file-source
connector.class=FileStreamSource
tasks.max=1
file=test.txt
topic=connect-test</code></pre><span style="font-family:'Microsoft YaHei';font-size:14px;"><br>
sink connector的配置：</span>
<p></p>
<p></p>
<pre><code class="language-plain">name=local-file-sink
connector.class=FileStreamSink
tasks.max=1
file=test.sink.txt
topics=connect-test</code></pre><span style="font-family:'Microsoft YaHei';font-size:14px;"><br>
source创建了topic “connect-test” ，sink订阅topic “connect-test”。两个connector启动过后，可以在kafka根目录下生成了test.sink.txt，验证内容是不是正确：</span>
<p></p>
<p></p>
<pre style="border-style:solid;border-color:rgb(229,229,229);color:rgb(68,68,68);line-height:22.4px;"><span style="font-family:'Microsoft YaHei';font-size:14px;">&gt; <span style="line-height:1.2;">cat test.sink.txt</span>
foo
bar</span></pre>
<span style="font-family:'Microsoft YaHei';font-size:14px;">当然也可以从终端消费者读取topic connect-test</span>
<p></p>
<p></p>
<pre style="border-style:solid;border-color:rgb(229,229,229);color:rgb(68,68,68);line-height:22.4px;"><span style="font-family:'Microsoft YaHei';font-size:14px;">&gt; <span style="line-height:1.2;">bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic connect-test --from-beginning</span>
{"schema":{"type":"string","optional":false},"payload":"foo"}
{"schema":{"type":"string","optional":false},"payload":"bar"}
...</span></pre>
<span style="font-family:'Microsoft YaHei';font-size:14px;">动态地往test.txt里面追加内容，消费者能接近实时地获取消息。</span>
<p></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;"><span style="line-height:22.4px;"><span style="line-height:22.4px;"></span></span></span></p>
<pre style="border-style:solid;border-color:rgb(229,229,229);color:rgb(68,68,68);line-height:22.4px;"><span style="font-family:'Microsoft YaHei';">&gt; <span style="line-height:1.2;">echo "Another line" &gt;&gt; test.txt</span></span></pre>
追加的这一行会在test.sink.txt和终端都显示出来。
<p></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;"><br></span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;"><br></span></p>
<p><br></p>
            </div>
                </div>