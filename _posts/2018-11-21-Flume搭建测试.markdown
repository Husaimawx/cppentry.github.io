---
layout:     post
title:      Flume搭建测试
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/hx2017/article/details/77891289				</div>
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<p>日志收集之Flume</p>

<pre class="prettyprint"><code class=" hljs vala"><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:
<span class="hljs-number">1.</span> 
wget http:<span class="hljs-comment">//archive.apache.org/dist/flume/1.6.0/apache-flume-1.6.0-bin.tar.gz</span>
<span class="hljs-number">2.</span> 
tar -zxvf apache-flume-<span class="hljs-number">1.6</span><span class="hljs-number">.0</span>-bin.tar.gz
<span class="hljs-number">3.</span> 
mv apache-flume-<span class="hljs-number">1.6</span><span class="hljs-number">.0</span> flume
<span class="hljs-number">4.</span> 
cd conf
vi commands.conf
<span class="hljs-preprocessor"># example.conf: A single-node Flume configuration</span>
<span class="hljs-preprocessor"># Name the components on this agent</span>
a1.sources = r1
a1.sinks = k1
a1.channels = c1
<span class="hljs-preprocessor"># Describe/configure the source</span>
a1.sources.r1.type = exec
a1.sources.r1.command = echo <span class="hljs-string">'hello'</span>
<span class="hljs-preprocessor"># Describe the sink</span>
a1.sinks.k1.type = logger
<span class="hljs-preprocessor"># Use a channel which buffers events in memory</span>
a1.channels.c1.type = memory
a1.channels.c1.capacity = <span class="hljs-number">1000</span> 
<span class="hljs-preprocessor"># The maximum number of events stored in the channel</span>
a1.channels.c1.transactionCapacity = <span class="hljs-number">100</span>
<span class="hljs-preprocessor"># The maximum number of events the channel will take from a source or give to a sink per transaction</span>
<span class="hljs-preprocessor"># Bind the source and sink to the channel</span>
a1.sources.r1.channels = c1
a1.sinks.k1.channel = c1

<span class="hljs-number">5.</span>
cd ..
bin/flume-ng agent --conf conf --conf-file ./conf/commands.conf --name a1 -Dflume.root.logger=INFO,console

<span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:
<span class="hljs-number">0.</span> 检查
rpm -qa | grep telnet  #查看是否有安装telnet 
yum list | grep telnet  #查看yum安装列表中是否有telnet 
＃安装 
yum install xinetd     #telnet依赖
sudo yum -y install telnet   #telnet客户端 
sudo yum -y install telnet-server  #telnet服务器端
<span class="hljs-preprocessor"># 启动服务   </span>
service xinetd restart  #重启xinetd
service iptables stop

<span class="hljs-number">1.</span> cd conf
vi example.conf
<span class="hljs-preprocessor"># Name the components on this agent</span>
a1.sources = r1
a1.sinks = k1
a1.channels = c1

<span class="hljs-preprocessor"># Describe/configure the source</span>
a1.sources.r1.type = netcat
<span class="hljs-preprocessor"># netcat,nc,用于创建 TCP/IP 连接，最大的用途就是用来处理 TCP/UDP 套接字,一个非常标准的telnet客户端工具</span>
a1.sources.r1.bind = hd
a1.sources.r1.port = <span class="hljs-number">44444</span>

<span class="hljs-preprocessor"># Describe the sink</span>
a1.sinks.k1.type = logger

<span class="hljs-preprocessor"># Use a channel which buffers events in memory</span>
a1.channels.c1.type = memory
a1.channels.c1.capacity = <span class="hljs-number">1000</span>
a1.channels.c1.transactionCapacity = <span class="hljs-number">100</span>

<span class="hljs-preprocessor"># Bind the source and sink to the channel</span>
a1.sources.r1.channels = c1
a1.sinks.k1.channel = c1

<span class="hljs-number">2.</span> 
cd ..
bin/flume-ng agent --conf conf --conf-file conf/example.conf --name a1 -Dflume.root.logger=INFO,console

<span class="hljs-number">3.</span> 另一个窗口
telnet xxxx <span class="hljs-number">44444</span>
hello,world
hi,China

<span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:
<span class="hljs-number">1.</span> cd conf
mv flume-env.sh.template flume-env.sh
vi flume-env.sh
export JAVA_HOME=/usr/java/jdk1<span class="hljs-number">.7</span><span class="hljs-number">.0</span>_51
JAVA_OPTS=<span class="hljs-string">"-Xms8192m -Xmx8192m -Xss256k -Xmn2g -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:-UseGCOverheadLimit"</span>

<span class="hljs-preprocessor">#堆空间是内存中划拨给JVM的一块保留区域，为java程序使用。</span>
设置JVM初始内存 最大可用内存 每个线程的堆栈大小 年轻代大小为<span class="hljs-number">2</span>G 年轻代为并行收集 年老代为并发收集 在抛出OOM之前限制jvm耗费在GC上的时间比例

<span class="hljs-number">2.</span> 
vi messages.conf
agent.sources = s1  
agent.channels = c1  
agent.sinks = sk1  

<span class="hljs-preprocessor">#设置spooldir  </span>
agent.sources.s1.type = spooldir  
agent.sources.s1.spoolDir = /<span class="hljs-keyword">var</span>/log/messages  
agent.sources.s1.fileHeader = <span class="hljs-literal">true</span>  

agent.sources.s1.channels = c1  
agent.sinks.sk1.type = logger  
agent.sinks.sk1.channel = c1  

<span class="hljs-preprocessor">#In Memory !!!  </span>
agent.channels.c1.type = memory  
agent.channels.c1.capacity = <span class="hljs-number">10004</span>  
agent.channels.c1.transactionCapacity = <span class="hljs-number">100</span> 

<span class="hljs-number">3.</span>
cd ..
bin/flume-ng agent --conf conf --conf-file conf/messages.conf --name agent -Dflume.root.logger=INFO,console



<span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:
<span class="hljs-number">0.</span> 检查安装如下依赖
sudo apt-<span class="hljs-keyword">get</span> install make gcc gcc-c++ kernel-devel m4 ncurses-devel openssl-devel unixODBC unixODBC-devel wxBase wxGTK<span class="hljs-constant"> SDL </span>wxGTK-gl
sudo yum -y install epel-release
<span class="hljs-number">1.</span> rabbitmq依赖Erlang
sudo apt-<span class="hljs-keyword">get</span> install erlang

<span class="hljs-number">2.</span> 部署rabbitmq
sudo apt-<span class="hljs-keyword">get</span> install rabbitmq-server

<span class="hljs-number">3.</span> 启动服务
sudo rabbitmq-plugins enable rabbitmq_management
sudo service rabbitmq-server restart

<span class="hljs-number">4.</span> 检查服务是否启动
http:<span class="hljs-comment">//node01:15672</span>

<span class="hljs-number">5.</span> rabbitmq消息队列
gedit new_task.py 

<span class="hljs-preprocessor">#!/usr/bin/env python</span>
import pika
import sys

connection = pika.BlockingConnection(pika.ConnectionParameters(
        host=<span class="hljs-string">'localhost'</span>))
channel = connection.channel()

channel.queue_declare(queue=<span class="hljs-string">'task_queue'</span>, durable=True)

message = <span class="hljs-string">' '</span>.join(sys.argv[<span class="hljs-number">1</span>:]) or <span class="hljs-string">"Hello World!"</span>
channel.basic_publish(exchange=<span class="hljs-string">''</span>,
                      routing_key=<span class="hljs-string">'task_queue'</span>,
                      body=message,
                      properties=pika.BasicProperties(
                         delivery_mode = <span class="hljs-number">2</span>, # make message persistent
                      ))
print(<span class="hljs-string">" [x] Sent %r"</span> % message)
connection.close()


gedit pro_task.py 


<span class="hljs-preprocessor">#!/usr/bin/env python</span>
import pika
import time

connection = pika.BlockingConnection(pika.ConnectionParameters(
        host=<span class="hljs-string">'localhost'</span>))
channel = connection.channel()

channel.queue_declare(queue=<span class="hljs-string">'task_queue'</span>, durable=True)
print(<span class="hljs-string">' [*] Waiting for messages. To exit press CTRL+C'</span>)

def callback(ch, method, properties, body):
    print(<span class="hljs-string">" [x] Received %r"</span> % body)
    time.sleep(body.count(b<span class="hljs-string">'.'</span>))
    print(<span class="hljs-string">" [x] Done"</span>)
    ch.basic_ack(delivery_tag = method.delivery_tag)

channel.basic_qos(prefetch_count=<span class="hljs-number">1</span>)
channel.basic_consume(callback,
                      queue=<span class="hljs-string">'task_queue'</span>)

channel.start_consuming()

检查：
python new_task.py 
另一个窗口： python pro_task.py

sudo apt-<span class="hljs-keyword">get</span> install python-pip
sudo pip install pika

<span class="hljs-number">6.</span> flume/conf
gedit rabbitmq.conf
<span class="hljs-preprocessor"># example.conf: A single-node Flume configuration</span>
<span class="hljs-preprocessor"># Name the components on this agent</span>
a1.sources = r1
a1.sinks = k1
a1.channels = c1
<span class="hljs-preprocessor"># Describe/configure the source</span>
a1.sources.r1.channels = c1
a1.sources.r1.type = org.apache.flume.source.rabbitmq.RabbitMQSource
a1.sources.r1.hostname = node01
a1.sources.r1.port = <span class="hljs-number">5672</span>
a1.sources.r1.queuename = task_queue
a1.sources.r1.threads = <span class="hljs-number">2</span>
<span class="hljs-preprocessor"># Describe the sink</span>
a1.sinks.k1.type = logger
<span class="hljs-preprocessor"># Use a channel which buffers events in memory</span>
a1.channels.c1.type = memory
a1.channels.c1.capacity = <span class="hljs-number">1000</span>
a1.channels.c1.transactionCapacity = <span class="hljs-number">100</span>
<span class="hljs-preprocessor"># Bind the source and sink to the channel</span>
a1.sources.r1.channels = c1
a1.sinks.k1.channel = c1

<span class="hljs-number">7.</span>
bin/flume-ng agent --conf conf --conf-file ./conf/rabbitmq.conf --name a1 -Dflume.root.logger=INFO,console
另一个窗口：python new_task.py 
python new_task.py <span class="hljs-string">"Hi,China"</span>


<span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:
hdfs dfs -mkdir -p /flume/events

vi hdfs.conf
<span class="hljs-preprocessor"># example.conf: A single-node Flume configuration</span>
<span class="hljs-preprocessor"># Name the components on this agent</span>
a1.sources = r1
a1.sinks = k1
a1.channels = c1
<span class="hljs-preprocessor"># Describe/configure the source</span>
a1.sources.r1.channels = c1
a1.sources.r1.type = org.apache.flume.source.rabbitmq.RabbitMQSource
a1.sources.r1.hostname = localhost
a1.sources.r1.port = <span class="hljs-number">5672</span>
a1.sources.r1.queuename = task_queue
a1.sources.r1.threads = <span class="hljs-number">2</span>
<span class="hljs-preprocessor"># Describe the sink</span>
a1.sinks.k1.type = hdfs
a1.sinks.k1.channel = c1
a1.sinks.k1.hdfs.path = /flume/event/standardlog/%Y/%m/%d 
a1.sinks.k1.hdfs.filePrefix = standardlog-%Y-%m-%d-%H
a1.sinks.k1.hdfs.fileSuffix = .log
a1.sinks.k1.hdfs.round = <span class="hljs-literal">true</span>
a1.sinks.k1.hdfs.roundValue = <span class="hljs-number">10</span>
a1.sinks.k1.hdfs.roundUnit = minute
a1.sinks.k1.hdfs.writeFormat = Text
a1.sinks.k1.hdfs.fileType = DataStream
a1.sinks.k1.hdfs.rollInterval = <span class="hljs-number">60</span>
a1.sinks.k1.hdfs.rollCount = <span class="hljs-number">0</span>
a1.sinks.k1.hdfs.rollSize = <span class="hljs-number">0</span>
a1.sinks.k1.hdfs.batchSize = <span class="hljs-number">50000</span>
<span class="hljs-preprocessor"># Use a channel which buffers events in memory</span>
a1.channels.c1.type = memory
a1.channels.c1.capacity = <span class="hljs-number">1000</span>
a1.channels.c1.transactionCapacity = <span class="hljs-number">100</span>
<span class="hljs-preprocessor"># Bind the source and sink to the channel</span>
a1.sources.r1.channels = c1
a1.sinks.k1.channel = c1

bin/flume-ng agent --conf conf --conf-file ./conf/hdfs.conf --name a1 -Dflume.root.logger=INFO,console
另一个窗口：python new_task.py 
python new_task.py <span class="hljs-string">"Hi,China"</span>


</code></pre>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>