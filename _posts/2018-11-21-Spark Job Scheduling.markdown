---
layout:     post
title:      Spark Job Scheduling
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章,转载必须标明出处.尊重他人就是尊重自己!					https://blog.csdn.net/Dax1n/article/details/70183034				</div>
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<h1 id="overview" style="font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;line-height:40px;color:rgb(29,31,34);font-size:28px;">
Overview<a class="anchorjs-link" href="http://spark.apache.org/docs/latest/job-scheduling.html#overview" rel="nofollow"></a></h1>
<p style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;">
Spark为计算任务提供资源调度，Spark App运行在独立的一组Executor线程之上，Spark调度器可以提供应用之间的资源调度。其次，在Spark App中，会有多个Job(spark action<span style="line-height:17.92px;">)并发运行,这是普遍存在的通过网络请求资源，spark在SparkContext内提供资源的公平调度。</span></p>
<p style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;">
<span style="line-height:17.92px;"><br></span></p>
<p style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;">
<span style="line-height:17.92px;"></span></p>
<h1 id="scheduling-across-applications" style="font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;line-height:40px;color:rgb(29,31,34);font-size:28px;">
Scheduling Across Applications</h1>
运行在Spark集群中的每一个Saprk App都会获取到一组独立的Executor线程运行task并且未应用存储数据。如果多个用户需要共享集群资源的话，有如下几种取决于Cluster Manager的不同方式管理资源的分发。
<p></p>
<p style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;">
最简单的方式，所有的Cluster Manager都支持的是静态资源划分，这种方式App获取到其需要的最大的资源并在App的周期中一直保持资源，这种方式被用在<span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;">Spark’s </span><a href="http://spark.apache.org/docs/latest/spark-standalone.html" rel="nofollow" style="color:rgb(0,136,204);text-decoration:none;font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;">standalone</a><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;"> 、</span><a href="http://spark.apache.org/docs/latest/running-on-yarn.html" rel="nofollow" style="color:rgb(0,136,204);text-decoration:none;font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;">YARN</a><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;"> modes和 </span><a href="http://spark.apache.org/docs/latest/running-on-mesos.html#mesos-run-modes" rel="nofollow" style="color:rgb(0,85,128);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;">coarse-grained
 Mesos mode</a>中。基于Cluster Manager不同资源的分配可以如下配置：</p>
<p style="font-size:14px;"></p>
<ul style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;line-height:17.92px;font-size:14px;"><li style="line-height:20px;"><strong>Standalone mode:</strong> By default, applications submitted to the standalone mode cluster will run in FIFO (first-in-first-out) order, and each application will try to use all available nodes. You can limit the number
 of nodes an application uses by setting the <code style="font-family:Menlo, 'Lucida Console', monospace;font-size:12px;color:rgb(68,68,68);border:none;">spark.cores.max </code>configuration property in it, or change the default for applications
 that don’t set this setting through <code style="font-family:Menlo, 'Lucida Console', monospace;font-size:12px;color:rgb(68,68,68);border:none;">spark.deploy.defaultCores</code>. Finally, in addition to controlling cores, each application’s <code style="font-family:Menlo, 'Lucida Console', monospace;font-size:12px;color:rgb(68,68,68);border:none;">spark.executor.memory</code> setting
 controls its memory use.</li></ul><div style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;">
<span style="line-height:20px;">      <span style="color:rgb(68,68,68);font-family:Menlo, 'Lucida Console', monospace;line-height:20px;">spark.cores.max:集群中获取的最大CPU核心数，不是在单个节点！</span></span></div>
<div><span style="font-family:Menlo, 'Lucida Console', monospace;color:#444444;"><span style="line-height:20px;">   <span style="color:rgb(68,68,68);font-family:Menlo, 'Lucida Console', monospace;line-height:20px;">spark.deploy.defaultCores：默认的核心数，可以为没有配置<span style="color:rgb(68,68,68);font-family:Menlo, 'Lucida Console', monospace;line-height:20px;">spark.deploy.defaultCores属性的App修改<span style="color:rgb(68,68,68);font-family:Menlo, 'Lucida Console', monospace;font-size:14px;line-height:20px;">spark.cores.max</span></span></span></span></span></div>
<div><span style="font-family:Menlo, 'Lucida Console', monospace;color:#444444;"><span style="line-height:20px;">   <code style="font-family:Menlo, 'Lucida Console', monospace;color:rgb(68,68,68);border:none;line-height:20px;">spark.executor.memory</code><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:20px;"> ：配置executor的内存使用数量</span></span></span></div>
<div><span style="font-family:Menlo, 'Lucida Console', monospace;color:#444444;"><span style="line-height:20px;"><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:20px;"><br></span></span></span></div>
<ul style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;line-height:17.92px;font-size:14px;"><li style="line-height:20px;"><strong>Mesos:</strong> To use static partitioning on Mesos, set the <code style="font-family:Menlo, 'Lucida Console', monospace;font-size:12px;color:rgb(68,68,68);border:none;">spark.mesos.coarse</code> configuration
 property to <code style="font-family:Menlo, 'Lucida Console', monospace;font-size:12px;color:rgb(68,68,68);border:none;">true</code>, and optionally set <code style="font-family:Menlo, 'Lucida Console', monospace;font-size:12px;color:rgb(68,68,68);border:none;">spark.cores.max</code>to
 limit each application’s resource share as in the standalone mode. You should also set <code style="font-family:Menlo, 'Lucida Console', monospace;font-size:12px;color:rgb(68,68,68);border:none;">spark.executor.memory</code> to control the executor
 memory.</li><li style="line-height:20px;"><strong>YARN:</strong> The <code style="font-family:Menlo, 'Lucida Console', monospace;font-size:12px;color:rgb(68,68,68);border:none;">--num-executors</code> option to the Spark YARN client controls how many executors
 it will allocate on the cluster (<code style="font-family:Menlo, 'Lucida Console', monospace;font-size:12px;color:rgb(68,68,68);border:none;">spark.executor.instances</code> as configuration property), while <code style="font-family:Menlo, 'Lucida Console', monospace;font-size:12px;color:rgb(68,68,68);border:none;">--executor-memory</code> (<code style="font-family:Menlo, 'Lucida Console', monospace;font-size:12px;color:rgb(68,68,68);border:none;">spark.executor.memory</code> configuration
 property) and <code style="font-family:Menlo, 'Lucida Console', monospace;font-size:12px;color:rgb(68,68,68);border:none;">--executor-cores</code> (<code style="font-family:Menlo, 'Lucida Console', monospace;font-size:12px;color:rgb(68,68,68);border:none;">spark.executor.cores</code> configuration
 property) control the resources per executor. For more information, see the <a href="http://spark.apache.org/docs/latest/running-on-yarn.html" rel="nofollow" style="color:rgb(0,136,204);text-decoration:none;">YARN Spark Properties</a>.</li></ul>
      <span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:20px;"> </span><code style="border:none;line-height:20px;"><span style="font-family:Menlo, 'Lucida Console', monospace;color:#444444;">--num-executors选项，Yarn客户端可以控制在集群中executor分配的数量或者使用</span><code style="color:rgb(68,68,68);font-family:Menlo, 'Lucida Console', monospace;border:none;line-height:20px;">spark.executor.instances<span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:20px;"></span></code><span style="color:rgb(68,68,68);font-family:Menlo, 'Lucida Console', monospace;font-size:14px;line-height:20px;">属性在配置文件中配置</span><code style="border:none;line-height:20px;"><span style="font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;color:#1d1f22;">，
          </span></code></code><code style="line-height:20px;font-family:Menlo, 'Lucida Console', monospace;color:rgb(68,68,68);border:none;">--executor-memory</code><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;line-height:20px;"> 选项可以配置executor的内存使用（使用<span style="color:rgb(68,68,68);font-family:Menlo, 'Lucida Console', monospace;">spark.executor.memory属性在配置文件中配置</span>）.</span><code style="line-height:20px;font-family:Menlo, 'Lucida Console', monospace;color:rgb(68,68,68);border:none;">--executor-cores选项配
     置每一个Executor的核心数</code><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;line-height:20px;"> (或者使用</span><code style="line-height:20px;font-family:Menlo, 'Lucida Console', monospace;color:rgb(68,68,68);border:none;">spark.executor.cores</code><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;line-height:20px;"> 属性进行配置) </span>
<p></p>
<p style="font-size:14px;"><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;line-height:20px;"><span></span></span></p>
<p style="font-size:14px;"><span><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;">Note that none of the modes currently
 provide memory sharing across applications. If you would like to share data this way, we recommend </span></span></p>
<p style="font-size:14px;"><span><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;">running a single server application that
 can serve multiple requests by querying the same RDDs.</span></span></p>
<p style="font-size:14px;"><span><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;">注意：目前还没有提供App之间的内存共享，如果你需要使用这种方式共享数据的话，我们建议运行一个Server来满足多个请求服务查询</span></span></p>
<p style="font-size:14px;"><span><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;"><span></span></span></span></p>
<p style="font-size:14px;"><span><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;"></span></span></p>
<h2 id="dynamic-resource-allocation" style="font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;line-height:40px;color:rgb(29,31,34);font-size:24px;">
Dynamic Resource Allocation</h2>
Spark提供了一种根据任务量动态调整分配资源的机制，这意味着如果你的App近期不再使用资源可以将资源还给集群（释放资源），当需要时候在申请。
<p></p>
<p style="font-size:14px;"><span style="font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;color:#1d1f22;"><span style="line-height:17.92px;">当多个App共享集群时候，这个非常有利于集群中的资源利用。</span></span></p>
<p style="font-size:14px;"><span style="font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;color:#1d1f22;"><span style="line-height:17.92px;">这个特性默认是不可用的，并且只在粗粒度的集群管理者中可用动态资源分配，<a href="http://spark.apache.org/docs/latest/spark-standalone.html" rel="nofollow" style="color:rgb(0,85,128);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;">standalone
 mode</a><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;">, </span><a href="http://spark.apache.org/docs/latest/running-on-yarn.html" rel="nofollow" style="color:rgb(0,136,204);text-decoration:none;font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;">YARN
 mode</a><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;">, and </span><a href="http://spark.apache.org/docs/latest/running-on-mesos.html#mesos-run-modes" rel="nofollow" style="color:rgb(0,136,204);text-decoration:none;font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;">Mesos
 coarse-grained mode</a><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;">.</span></span></span></p>
<p style="font-size:14px;"><span style="font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;color:#1d1f22;"><span style="line-height:17.92px;">（关于StandAlone或者Yarn动态资源分配参考文档）</span></span></p>
<p style="font-size:14px;"><span style="font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;color:#1d1f22;"><span style="line-height:17.92px;"><br></span></span></p>
<p style="font-size:14px;"><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;line-height:20px;"></span></p>
<h3 id="configuration-and-setup" style="font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;line-height:40px;color:rgb(29,31,34);font-size:21px;">
Configuration and Setup</h3>
 配置动态资源分配需要进行配置，首先你的应用必须设置<code style="font-family:Menlo, 'Lucida Console', monospace;color:rgb(68,68,68);border:none;">spark.dynamicAllocation.enabled</code><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;"> 为 </span><code style="font-family:Menlo, 'Lucida Console', monospace;color:rgb(68,68,68);border:none;">true</code><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;">.（在App中设置）其次必须在每一个Worker节点上开启<span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;"> </span><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;">external
 shuffle service</span><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;"> 服务，并且在App中设置<code style="font-family:Menlo, 'Lucida Console', monospace;color:rgb(68,68,68);border:none;">spark.shuffle.service.enabled</code><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;"> 为 true。<span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;">external
 shuffle service</span><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;"> 服务</span></span></span></span>
<p></p>
<p style="font-size:14px;"><span style="font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;color:#1d1f22;"><span style="line-height:17.92px;">的目的是运行在没有删除“Executor输出的shuffle文件”时之前关闭Executor，shuffle文件的清理有<span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;">external
 shuffle service</span><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;"> 服务进行。</span></span></span></p>
<p style="font-size:14px;"><span style="font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;color:#1d1f22;"><span style="line-height:20px;">不同集群配置<span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;">external
 shuffle service</span><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;"> 服务：</span></span></span></p>
<p style="font-size:14px;"><span style="font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;color:#1d1f22;"><span style="line-height:20px;"><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;"><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;">standalone
 mode：在Worker节点配置<code style="font-family:Menlo, 'Lucida Console', monospace;color:rgb(68,68,68);border:none;">spark.shuffle.service.enabled</code><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;"> </span>=true启动即可</span><br></span></span></span></p>
<p style="font-size:14px;"><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;line-height:20px;"></span></p>
<p style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;">
YARN mode, follow the instructions <a href="http://spark.apache.org/docs/latest/running-on-yarn.html#configuring-the-external-shuffle-service" rel="nofollow" style="color:rgb(0,136,204);text-decoration:none;">here</a>.</p>
<p style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;">
</p>
<h2 id="configuring-the-external-shuffle-service" style="font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;line-height:40px;color:rgb(29,31,34);font-size:24px;">
Configuring the External Shuffle Service<a class="anchorjs-link" href="http://spark.apache.org/docs/latest/running-on-yarn.html#configuring-the-external-shuffle-service" rel="nofollow"></a></h2>
<p></p>
<p style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;">
To start the Spark Shuffle Service on each <code style="font-family:Menlo, 'Lucida Console', monospace;font-size:12px;color:rgb(68,68,68);border:none;">NodeManager</code> in your YARN cluster, follow these instructions:</p>
<ol style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;"><li style="line-height:20px;">Build Spark with the <a href="http://spark.apache.org/docs/latest/building-spark.html" rel="nofollow" style="color:rgb(0,136,204);text-decoration:none;">YARN profile</a>. Skip this step if you are using a pre-packaged distribution.</li><li style="line-height:20px;">Locate the <code style="font-family:Menlo, 'Lucida Console', monospace;font-size:12px;color:rgb(68,68,68);border:none;">spark-&lt;version&gt;-yarn-shuffle.jar</code>. This should be under <code style="font-family:Menlo, 'Lucida Console', monospace;font-size:12px;color:rgb(68,68,68);border:none;">$SPARK_HOME/common/network-yarn/target/scala-&lt;version&gt;</code> if
 you are building Spark yourself, and under <code style="font-family:Menlo, 'Lucida Console', monospace;font-size:12px;color:rgb(68,68,68);border:none;">yarn</code> if you are using a distribution.</li><li style="line-height:20px;">Add this jar to the classpath of all <code style="font-family:Menlo, 'Lucida Console', monospace;font-size:12px;color:rgb(68,68,68);border:none;">NodeManager</code>s in your cluster.</li><li style="line-height:20px;">In the <code style="font-family:Menlo, 'Lucida Console', monospace;font-size:12px;color:rgb(68,68,68);border:none;">yarn-site.xml</code> on each node, add <code style="font-family:Menlo, 'Lucida Console', monospace;font-size:12px;color:rgb(68,68,68);border:none;">spark_shuffle</code> to <code style="font-family:Menlo, 'Lucida Console', monospace;font-size:12px;color:rgb(68,68,68);border:none;">yarn.nodemanager.aux-services</code>,
 then set <code style="font-family:Menlo, 'Lucida Console', monospace;font-size:12px;color:rgb(68,68,68);border:none;">yarn.nodemanager.aux-services.spark_shuffle.class</code> to <code style="font-family:Menlo, 'Lucida Console', monospace;font-size:12px;color:rgb(68,68,68);border:none;">org.apache.spark.network.yarn.YarnShuffleService</code>.</li><li style="line-height:20px;">Increase <code style="font-family:Menlo, 'Lucida Console', monospace;font-size:12px;color:rgb(68,68,68);border:none;">NodeManager's</code> heap size by setting <code style="font-family:Menlo, 'Lucida Console', monospace;font-size:12px;color:rgb(68,68,68);border:none;">YARN_HEAPSIZE</code> (1000
 by default) in <code style="font-family:Menlo, 'Lucida Console', monospace;font-size:12px;color:rgb(68,68,68);border:none;">etc/hadoop/yarn-env.sh</code> to avoid garbage collection issues during shuffle.</li><li style="line-height:20px;">Restart all <code style="font-family:Menlo, 'Lucida Console', monospace;font-size:12px;color:rgb(68,68,68);border:none;">NodeManager</code>s in your cluster.</li></ol><p style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;">
The following extra configuration options are available when the shuffle service is running on YARN:</p>
<table class="table" style="border-collapse:collapse;border-spacing:0px;color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;background-color:transparent;"><tbody><tr><th style="line-height:20px;vertical-align:top;border-top-width:1px;border-top-style:solid;border-top-color:rgb(221,221,221);">
Property Name</th>
<th style="line-height:20px;vertical-align:top;border-top-width:1px;border-top-style:solid;border-top-color:rgb(221,221,221);">
Defa<span style="color:rgb(29,31,34);line-height:20px;text-align:center;"><strong>ult</strong></span>                      </th>
<th style="line-height:20px;vertical-align:top;border-top-width:1px;border-top-style:solid;border-top-color:rgb(221,221,221);">
Meaning</th>
</tr><tr><td style="line-height:20px;vertical-align:top;border-top-width:1px;border-top-style:solid;border-top-color:rgb(221,221,221);">
<code style="font-family:Menlo, 'Lucida Console', monospace;color:rgb(68,68,68);border:none;">spark.yarn.shuffle.stopOnFailure</code></td>
<td style="line-height:20px;vertical-align:top;border-top-width:1px;border-top-style:solid;border-top-color:rgb(221,221,221);">
<code style="font-family:Menlo, 'Lucida Console', monospace;color:rgb(68,68,68);border:none;">false</code></td>
<td style="line-height:20px;vertical-align:top;border-top-width:1px;border-top-style:solid;border-top-color:rgb(221,221,221);">
Whether to stop the NodeManager when there's a failure in the Spark Shuffle Service's initialization. This prevents application failures caused by running containers on NodeManagers where the Spark Shuffle Service is not running.</td>
</tr></tbody></table><br><p style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;">
All other relevant configurations are optional and under the <code style="font-family:Menlo, 'Lucida Console', monospace;font-size:12px;color:rgb(68,68,68);border:none;">spark.dynamicAllocation.*</code> and <code style="font-family:Menlo, 'Lucida Console', monospace;font-size:12px;color:rgb(68,68,68);border:none;">spark.shuffle.service.*</code> namespaces.
 For more detail, see the <a href="http://spark.apache.org/docs/latest/configuration.html#dynamic-allocation" rel="nofollow" style="color:rgb(0,136,204);text-decoration:none;">configurations page</a>.</p>
<br><p style="font-size:14px;"><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;line-height:20px;"></span></p>
<h3 id="resource-allocation-policy" style="font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;line-height:40px;color:rgb(29,31,34);font-size:21px;">
Resource Allocation Policy</h3>
Spark如果不在使用Executor的话应该释放Executor，在需要时候在获取。因为目前还没有好的方案可以预测在不久将来是否需要使用Executor，Spark使用启发式算法来决策何时移除Executor或添加Executor。
<p></p>
<p style="font-size:14px;"><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;line-height:20px;"><br></span></p>
<p style="font-size:14px;"><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;line-height:20px;"></span></p>
<h4 id="request-policy" style="font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;line-height:20px;color:rgb(29,31,34);font-size:18px;">
Request Policy</h4>
Spark App开启动态申请资源，当有Task没有被调度时候需要在申请额外的Executor。这种情况暗示着没有足够的Executor来满足Task的运行或者目前没有满足！
<p></p>
<p style="font-size:14px;"><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;line-height:20px;">Spark轮询请求Executor，当有Task追加时候会根据延迟调度时间(<span style="color:rgb(68,68,68);font-family:Menlo, 'Lucida Console', monospace;line-height:15.36px;">spark.dynamicAllocation.schedulerBacklogTimeout</span>)触发请求<span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:20px;">实际需要的Executor数目（当Task追加之后如果在指定时间内没有调度的话就触发请求）</span>。以后再次触发时时为</span><span style="color:rgb(68,68,68);font-family:Menlo, 'Lucida Console', monospace;line-height:15.36px;">spark.dynamicAllocation.sustainedSchedulerBacklogTimeout，除此之外，每一次请求的Executor数目成指数增加，例如：1、2、4
 、8...</span></p>
<p style="font-size:14px;"><span style="font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;color:#1d1f22;"><span style="line-height:20px;">指数增长方式是双重的，首先，应用在开始阶段会谨慎的申请一些资源，而实际情况下发现资源不够，还需要一些资源。其次，应用应该根据需要充分的使用集群资源</span></span></p>
<p style="font-size:14px;"><span style="font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;color:#1d1f22;"><span style="line-height:20px;"></span></span></p>
<h4 id="remove-policy" style="font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;line-height:20px;color:rgb(29,31,34);font-size:18px;">
Remove Policy</h4>
移除Executor策略比较简单，当Spark应用的Executor闲置时间超过<span style="color:rgb(68,68,68);font-family:Menlo, 'Lucida Console', monospace;line-height:15.36px;">spark.dynamicAllocation.executorIdleTimeout便移除。注意：在大多数情景，移除策略和请求策略是互斥的，当仍有任务追加时候，executor是不会闲置的。</span>
<p></p>
<p style="font-size:14px;"><span style="font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;color:#1d1f22;"><span style="line-height:20px;"><span style="color:rgb(68,68,68);font-family:Menlo, 'Lucida Console', monospace;line-height:15.36px;"></span></span></span></p>
<h3 id="graceful-decommission-of-executors" style="font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;line-height:40px;color:rgb(29,31,34);font-size:21px;">
Graceful Decommission of Executors</h3>
在非动态资源分配情况下，App无论是失败还是执行完毕退出，App的Executor都将会退出。这两种情景，所有与Executor关联的状态将不再需要并且删除。但是在动态资源分配情况下，然而，当App还没有运行完毕，但是有Executor退出，App需要访问退出Executor的状态时候必须执行再次计算，这种方式显然是不可取的，Spark提供了一种机制：在退出Executor之前保存其Executor的状态。
<p></p>
<p style="font-size:14px;"><span style="font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;color:#1d1f22;"><span style="line-height:20px;"><span style="color:rgb(68,68,68);font-family:Menlo, 'Lucida Console', monospace;line-height:15.36px;"><br></span></span></span></p>
<p style="font-size:14px;"><span style="font-family:Menlo, 'Lucida Console', monospace;color:#444444;"><span style="line-height:15.36px;">这个需要对Shuffle尤为重要，在Shuffle期间，Spark Executor首先会将map的输出写到本地磁盘，然后为map输出文件充当一个Server供其他Executor获取数据。动态资源分配时候可能在Shuffle还没有完成之前就移除了Executor，导致不必要的重新计算。</span></span></p>
<p style="font-size:14px;"><span style="font-family:Menlo, 'Lucida Console', monospace;color:#444444;"><span style="line-height:15.36px;">为了解决这个问题，需要使用<span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;">external
 shuffle service（spark1.2引入）保存Shuffle文件，这个服务指的是长期运行在节点上独立于Spark App和Executors的线程。如果开启此服务，Spark Executor会在此服务上拉取数据，这意味Executor或者<span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;">退出的Executor的状态会持续被保存</span></span></span></span></p>
<p style="font-size:14px;"><span style="font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;color:#1d1f22;"><span style="line-height:17.92px;">除了Shuffle文件，Executor还会缓存数据到磁盘或者内存，当Executor被移除的话，然而所有的缓存的数据将会失效，为了缓解这个问题，默认Executor缓存的数据是不会被移除的，你可以通过配置<span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;"> </span><code style="font-family:Menlo, 'Lucida Console', monospace;color:rgb(68,68,68);border:none;">spark.dynamicAllocation.cachedExecutorIdleTimeout参数在之后的指定时间内进行</code></span></span></p>
<p style="font-size:14px;"><span style="font-family:Menlo, 'Lucida Console', monospace;color:#444444;"><span style="line-height:17.92px;">释放。在以后版本缓存数据可能会被保存在推外存储。</span></span></p>
<p style="font-size:14px;"><span style="font-family:Menlo, 'Lucida Console', monospace;color:#444444;"><span style="line-height:15.36px;"><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;"><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;"><br></span></span></span></span></p>
<p style="font-size:14px;"><span style="font-family:Menlo, 'Lucida Console', monospace;color:#444444;"><span style="line-height:15.36px;"><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;"><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;"></span></span></span></span></p>
<h1 id="scheduling-within-an-application" style="font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;line-height:40px;color:rgb(29,31,34);font-size:28px;">
Scheduling Within an Application</h1>
在Spark App中（指一个SparkContext实例）多个Job被独立线程提交持续<span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;">并行</span>执行。这一部分的Job指的是一个Spark Action 每一个Task会计算结果，Spark调度器是线程安全的并且支持App多个请求。
<p></p>
<p style="font-size:14px;"><span style="font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;color:#1d1f22;"><span style="line-height:17.92px;">默认Spark 调度器是FIFO模式，每一个Job被划分为Stages，第一个Job获取资源并执行，接下来第二个，第三个等等。如果前面的Job不需要占用集群所有的资源的话，后面的Job有资源可以获取便会立即启动，但是如果前面的Job占用资源<span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:17.92px;">过多</span>，后面的Job将会延迟执行。</span></span></p>
<p style="font-size:14px;">在Spark0.8版本开始，可以配置Job之间公平调度，Spark轮询的方式指定Task，因此所有的Job等概率的获取集群资源。这样短时间作业可以再长时间作业之前被提交执行，可以获得较好的响应时间，不至于等待长作业的完成。这种模式适用于多用户。</p>
<p style="font-size:14px;">为了开启公平调度，当配置SparkContext时候设置<span style="color:rgb(68,68,68);font-family:Menlo, 'Lucida Console', monospace;line-height:15.36px;">spark.scheduler.mode=FAIR即可</span></p>
<p style="font-size:14px;"><span style="color:rgb(68,68,68);font-family:Menlo, 'Lucida Console', monospace;line-height:15.36px;"></span></p>
<pre style="font-family:Menlo, 'Lucida Console', monospace;color:rgb(51,51,51);line-height:20px;background-color:rgb(245,245,245);"><code class="language-scala" style="font-family:Menlo, 'Lucida Console', monospace;color:inherit;border:0px;background:transparent;"><span class="k" style="color:rgb(0,112,32);font-weight:bold;">val</span> <span class="n">conf</span> <span class="k" style="color:rgb(0,112,32);font-weight:bold;">=</span> <span class="k" style="color:rgb(0,112,32);font-weight:bold;">new</span> <span class="nc" style="color:rgb(14,132,181);font-weight:bold;">SparkConf</span><span class="o" style="color:rgb(102,102,102);">().</span><span class="n">setMaster</span><span class="o" style="color:rgb(102,102,102);">(...).</span><span class="n">setAppName</span><span class="o" style="color:rgb(102,102,102);">(...)</span>
<span class="n">conf</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">set</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="s" style="color:rgb(64,112,160);">"spark.scheduler.mode"</span><span class="o" style="color:rgb(102,102,102);">,</span> <span class="s" style="color:rgb(64,112,160);">"FAIR"</span><span class="o" style="color:rgb(102,102,102);">)</span>
<span class="k" style="color:rgb(0,112,32);font-weight:bold;">val</span> <span class="n">sc</span> <span class="k" style="color:rgb(0,112,32);font-weight:bold;">=</span> <span class="k" style="color:rgb(0,112,32);font-weight:bold;">new</span> <span class="nc" style="color:rgb(14,132,181);font-weight:bold;">SparkContext</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="n">conf</span><span class="o" style="color:rgb(102,102,102);">)</span></code></pre>
<br><p></p>
<p style="font-size:14px;"><span style="font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;color:#1d1f22;"><span style="line-height:20px;"></span></span></p>
<h2 id="fair-scheduler-pools" style="font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;line-height:40px;color:rgb(29,31,34);font-size:24px;">
Fair Scheduler Pools</h2>
公平调度支持作业分组到Pool中，为每一个Pool设置不同的调度方式（例如：权重）。这对于重要的Job创建一个优先级较高的Pool比较有好处，例如：将每一个用户的Job分配到同一个Pool中，然后用户平等共享并发Job总数，而不是按照用户的Job数目来获取资源。
<p></p>
<p style="font-size:14px;"><span style="font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;color:#1d1f22;"><span style="line-height:20px;">没有指定Pool的job会存到默认的Pool中，可以使用<span style="color:rgb(68,68,68);font-family:Menlo, 'Lucida Console', monospace;line-height:15.36px;">spark.scheduler.pool到SparkContext中指定Job的Pool：</span></span></span></p>
<p style="font-size:14px;"><span style="font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;color:#1d1f22;"><span style="line-height:20px;"><span style="color:rgb(68,68,68);font-family:Menlo, 'Lucida Console', monospace;line-height:15.36px;"></span></span></span></p>
<pre style="font-family:Menlo, 'Lucida Console', monospace;color:rgb(51,51,51);line-height:20px;background-color:rgb(245,245,245);"><code class="language-scala" style="font-family:Menlo, 'Lucida Console', monospace;color:inherit;border:0px;background:transparent;"><span class="c1" style="color:rgb(96,160,176);font-style:italic;">// Assuming sc is your SparkContext variable</span>
<span class="n">sc</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">setLocalProperty</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="s" style="color:rgb(64,112,160);">"spark.scheduler.pool"</span><span class="o" style="color:rgb(102,102,102);">,</span> <span class="s" style="color:rgb(64,112,160);">"pool1"</span><span class="o" style="color:rgb(102,102,102);">)</span></code></pre>
设置<span style="color:rgb(68,68,68);font-family:Menlo, 'Lucida Console', monospace;font-size:14px;line-height:15.36px;">spark.scheduler.pool之后所有的Job（Spark Action）将会到对应的Pool中，每一个Pool会关联一些线程处理Job，可以使用如下代码清除线程的关联：</span>
<p></p>
<p style="font-size:14px;"><span style="font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;color:#1d1f22;"><span style="line-height:20px;"><span style="color:rgb(68,68,68);font-family:Menlo, 'Lucida Console', monospace;line-height:15.36px;"><span style="color:rgb(68,68,68);font-family:Menlo, 'Lucida Console', monospace;font-size:14px;line-height:15.36px;"></span></span></span></span></p>
<pre style="font-family:Menlo, 'Lucida Console', monospace;color:rgb(51,51,51);line-height:20px;background-color:rgb(245,245,245);"><code class="language-scala" style="font-family:Menlo, 'Lucida Console', monospace;color:inherit;border:0px;background:transparent;"><span class="n">sc</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">setLocalProperty</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="s" style="color:rgb(64,112,160);">"spark.scheduler.pool"</span><span class="o" style="color:rgb(102,102,102);">,</span> <span class="kc" style="color:rgb(0,112,32);font-weight:bold;">null</span><span class="o" style="color:rgb(102,102,102);">)</span></code></pre>
<br><p></p>
<p style="font-size:14px;"><span style="font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;color:#1d1f22;"><span style="line-height:20px;"></span></span></p>
<h2 id="default-behavior-of-pools" style="font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;line-height:40px;color:rgb(29,31,34);font-size:24px;">
Default Behavior of Pools</h2>
默认，每一个pool都是平等的使用集群，但是在每一个pool中Job的运行顺序是FIFO，例如：如果你给没一会用户创建一个Pool，意味着每一个用户将会由平等的机会使用集群，每一个用户的查询将会按照顺序执行，后面的查询无法争取前面的未释放的资源
<p></p>
<p style="font-size:14px;"><span style="font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;color:#1d1f22;"><span style="line-height:20px;"></span></span></p>
<h2 id="configuring-pool-properties" style="font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;line-height:40px;color:rgb(29,31,34);font-size:24px;">
Configuring Pool Properties</h2>
可以通过一文件指定Pool的属性，每一个Pool支持三个属性：
<p></p>
<p style="font-size:14px;"><span style="font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;color:#1d1f22;"><span style="line-height:20px;"><span style="color:rgb(68,68,68);font-family:Menlo, 'Lucida Console', monospace;line-height:20px;">schedulingMode：可以配置为<span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:20px;">FIFO
 或FAIR, 控制Pool中的作业是按照顺序执行还是公平执行。</span></span><br></span></span></p>
<p style="font-size:14px;"><span style="font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;color:#1d1f22;"><span style="line-height:20px;"><span style="color:rgb(68,68,68);font-family:Menlo, 'Lucida Console', monospace;line-height:20px;"><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:20px;"><code style="font-family:Menlo, 'Lucida Console', monospace;color:rgb(68,68,68);border:none;line-height:20px;">weight</code><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:20px;">:
 这个属性控制本pool相对于其他pool使用集群资源的机会，默认所有的pool权值为1.可以指定权值为2，例如：指定为2的pool可以获取2倍的集群资源，<span style="font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;font-size:14px;line-height:21px;">设置一个更高的weight值，例如1000，就可以实现线程池之间的优先权——实际上，weight值为1000的调度池无论理论上什么时候作业被激活，它都总是能够最先运行。</span></span><br></span></span></span></span></p>
<p style="font-size:14px;"><span style="font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;color:#1d1f22;"><span style="line-height:20px;"><span style="color:rgb(68,68,68);font-family:Menlo, 'Lucida Console', monospace;line-height:20px;"><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:20px;"><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:20px;"><span style="font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;font-size:14px;line-height:21px;"><span style="color:rgb(68,68,68);font-family:Menlo, 'Lucida Console', monospace;line-height:20px;">minShare：除了上面的<span style="color:rgb(68,68,68);font-family:Menlo, 'Lucida Console', monospace;font-size:14px;line-height:20px;">weight，还可以给每一个pool指定一个<span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;line-height:20px;">minimum
  share值，这个值是管理员希望给该pool分配的CPU核心数。<span style="font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;font-size:14px;line-height:21px;">公平调度器通过权重重新分配资源之前总是试图满足所有活动调度池的最小share，<span style="font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;font-size:14px;line-height:21px;">在没有给定一个高优先级的其他集群中，minShare属性是另外的一种方式来确保调度池能够迅速的获得一定数量的资源（例如10核CPU），默认情况下，每个调度池的minShare值都为0。</span></span></span></span></span><br></span></span></span></span></span></span></p>
<p style="font-size:14px;"><span style="font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;color:#1d1f22;"><span style="line-height:20px;"><span style="font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;font-size:14px;line-height:21px;">可以通过XML文件来设置pool属性（<span style="color:rgb(68,68,68);font-family:Menlo, 'Lucida Console', monospace;line-height:15.36px;">conf/fairscheduler.xml.template</span>），和配置公平调度的xml模板文件一样，只需要在SparkConf中设置spark.scheduler.allocation.file的属性：</span><br></span></span></p>
<p style="font-size:14px;"><span style="font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;color:#1d1f22;"><span style="line-height:20px;"><span style="font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;font-size:14px;line-height:21px;"></span></span></span></p>
<pre style="font-family:Menlo, 'Lucida Console', monospace;color:rgb(51,51,51);line-height:20px;background-color:rgb(245,245,245);"><code class="language-scala" style="font-family:Menlo, 'Lucida Console', monospace;color:inherit;border:0px;background:transparent;"><span class="n">conf</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">set</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="s" style="color:rgb(64,112,160);">"spark.scheduler.allocation.file"</span><span class="o" style="color:rgb(102,102,102);">,</span> <span class="s" style="color:rgb(64,112,160);">"/path/to/file"</span><span class="o" style="color:rgb(102,102,102);">)</span></code></pre>
<span style="font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;font-size:14px;line-height:21px;">对于每个池，XML文件的格式是一个简单的&lt;pool&gt;元素，可以在这个元素中设置各种不同元素。例如：</span><br><p></p>
<p style="font-size:14px;"><span style="font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;color:#1d1f22;"><span style="font-size:14px;"><span style="font-size:14px;"></span></span></span></p>
<pre style="font-family:Menlo, 'Lucida Console', monospace;line-height:20px;color:rgb(51,51,51);background-color:rgb(245,245,245);"><code class="language-xml" style="font-family:Menlo, 'Lucida Console', monospace;color:inherit;border:0px;background:transparent;"><span class="cp" style="color:rgb(0,112,32);">&lt;?xml version="1.0"?&gt;</span>
<span class="nt" style="color:rgb(6,40,115);font-weight:bold;">&lt;allocations&gt;</span>
  <span class="nt" style="color:rgb(6,40,115);font-weight:bold;">&lt;pool</span> <span class="na" style="color:rgb(64,112,160);">name=</span><span class="s" style="color:rgb(64,112,160);">"production"</span><span class="nt" style="color:rgb(6,40,115);font-weight:bold;">&gt;</span>
    <span class="nt" style="color:rgb(6,40,115);font-weight:bold;">&lt;schedulingMode&gt;</span>FAIR<span class="nt" style="color:rgb(6,40,115);font-weight:bold;">&lt;/schedulingMode&gt;</span>
    <span class="nt" style="color:rgb(6,40,115);font-weight:bold;">&lt;weight&gt;</span>1<span class="nt" style="color:rgb(6,40,115);font-weight:bold;">&lt;/weight&gt;</span>
    <span class="nt" style="color:rgb(6,40,115);font-weight:bold;">&lt;minShare&gt;</span>2<span class="nt" style="color:rgb(6,40,115);font-weight:bold;">&lt;/minShare&gt;</span>
  <span class="nt" style="color:rgb(6,40,115);font-weight:bold;">&lt;/pool&gt;</span>
  <span class="nt" style="color:rgb(6,40,115);font-weight:bold;">&lt;pool</span> <span class="na" style="color:rgb(64,112,160);">name=</span><span class="s" style="color:rgb(64,112,160);">"test"</span><span class="nt" style="color:rgb(6,40,115);font-weight:bold;">&gt;</span>
    <span class="nt" style="color:rgb(6,40,115);font-weight:bold;">&lt;schedulingMode&gt;</span>FIFO<span class="nt" style="color:rgb(6,40,115);font-weight:bold;">&lt;/schedulingMode&gt;</span>
    <span class="nt" style="color:rgb(6,40,115);font-weight:bold;">&lt;weight&gt;</span>2<span class="nt" style="color:rgb(6,40,115);font-weight:bold;">&lt;/weight&gt;</span>
    <span class="nt" style="color:rgb(6,40,115);font-weight:bold;">&lt;minShare&gt;</span>3<span class="nt" style="color:rgb(6,40,115);font-weight:bold;">&lt;/minShare&gt;</span>
  <span class="nt" style="color:rgb(6,40,115);font-weight:bold;">&lt;/pool&gt;</span>
<span class="nt" style="color:rgb(6,40,115);font-weight:bold;">&lt;/allocations&gt;</span></code></pre>
<span style="font-size:14px;"><span style="font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;"><span style="line-height:21px;">这个完整的例子也可以</span></span><span style="font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;line-height:17.92px;color:rgb(29,31,34);font-size:14px;"> </span><code style="font-family:Menlo, 'Lucida Console', monospace;line-height:21px;color:rgb(68,68,68);border:none;">conf/fairscheduler.xml.template</code><code style="color:rgb(68,68,68);border:none;line-height:17.92px;"><span style="font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;">获得</span></code><span style="font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;"><span style="line-height:21px;">。请注意，任何没有在xml文件中配置的池，都会有一个默认配置值（scheduling
 mode</span></span></span><span style="font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;line-height:21px;font-size:14px;">值是</span><span style="font-family:'PingFang SC', 'Helvetica Neue', 'Microsoft YaHei UI', 'Microsoft YaHei', 'Noto Sans CJK SC', Sathu, EucrosiaUPC, sans-serif;line-height:21px;font-size:14px;">FIFO，weight值为1，minShare值为0）。</span><br><p></p>
<p style="font-size:14px;"><span style="font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;color:#1d1f22;"><span style="line-height:20px;"><br></span></span></p>
<p style="font-size:14px;"><span style="font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;color:#1d1f22;"><span style="line-height:20px;"><br></span></span></p>
<p style="font-size:14px;"><span style="font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;color:#1d1f22;"><span style="line-height:20px;"><br></span></span></p>
<p style="font-size:14px;"><br></p>
            </div>
                </div>