---
layout:     post
title:      9. kafka shell脚本用法详解
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为阿飞Javaer博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/feelwing1314/article/details/81047613				</div>
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<p>kafka安装目录下的bin目录包含了很多运维可操作的shell脚本，列举如下：</p>

<table>
<thead>
<tr>
  <th>脚本名称</th>
  <th>用途描述</th>
</tr>
</thead>
<tbody><tr>
  <td>connect-distributed.sh</td>
  <td>连接kafka集群模式</td>
</tr>
<tr>
  <td>connect-standalone.sh</td>
  <td>连接kafka单机模式</td>
</tr>
<tr>
  <td>kafka-acls.sh</td>
  <td>todo</td>
</tr>
<tr>
  <td>kafka-broker-api-versions.sh</td>
  <td>todo</td>
</tr>
<tr>
  <td>kafka-configs.sh</td>
  <td>配置管理脚本</td>
</tr>
<tr>
  <td>kafka-console-consumer.sh</td>
  <td>kafka消费者控制台</td>
</tr>
<tr>
  <td>kafka-console-producer.sh</td>
  <td>kafka生产者控制台</td>
</tr>
<tr>
  <td>kafka-consumer-groups.sh</td>
  <td>kafka消费者组相关信息</td>
</tr>
<tr>
  <td>kafka-consumer-perf-test.sh</td>
  <td>kafka消费者性能测试脚本</td>
</tr>
<tr>
  <td>kafka-delegation-tokens.sh</td>
  <td>todo</td>
</tr>
<tr>
  <td>kafka-delete-records.sh</td>
  <td>删除低水位的日志文件</td>
</tr>
<tr>
  <td>kafka-log-dirs.sh</td>
  <td>kafka消息日志目录信息</td>
</tr>
<tr>
  <td>kafka-mirror-maker.sh</td>
  <td>不同数据中心kafka集群复制工具</td>
</tr>
<tr>
  <td>kafka-preferred-replica-election.sh</td>
  <td>触发preferred replica选举</td>
</tr>
<tr>
  <td>kafka-producer-perf-test.sh</td>
  <td>kafka生产者性能测试脚本</td>
</tr>
<tr>
  <td>kafka-reassign-partitions.sh</td>
  <td>分区重分配脚本</td>
</tr>
<tr>
  <td>kafka-replay-log-producer.sh</td>
  <td>todo</td>
</tr>
<tr>
  <td>kafka-replica-verification.sh</td>
  <td>复制进度验证脚本</td>
</tr>
<tr>
  <td>kafka-run-class.sh</td>
  <td>todo</td>
</tr>
<tr>
  <td>kafka-server-start.sh</td>
  <td>启动kafka服务</td>
</tr>
<tr>
  <td>kafka-server-stop.sh</td>
  <td>停止kafka服务</td>
</tr>
<tr>
  <td>kafka-simple-consumer-shell.sh</td>
  <td>deprecated，推荐使用kafka-console-consumer.sh</td>
</tr>
<tr>
  <td>kafka-streams-application-reset.sh</td>
  <td>todo</td>
</tr>
<tr>
  <td>kafka-topics.sh</td>
  <td>topic管理脚本</td>
</tr>
<tr>
  <td>kafka-verifiable-consumer.sh</td>
  <td>可检验的kafka消费者</td>
</tr>
<tr>
  <td>kafka-verifiable-producer.sh</td>
  <td>可检验的kafka生产者</td>
</tr>
<tr>
  <td>trogdor.sh</td>
  <td>todo</td>
</tr>
<tr>
  <td>zookeeper-security-migration.sh</td>
  <td>todo</td>
</tr>
<tr>
  <td>zookeeper-server-start.sh</td>
  <td>启动zk服务</td>
</tr>
<tr>
  <td>zookeeper-server-stop.sh</td>
  <td>停止zk服务</td>
</tr>
<tr>
  <td>zookeeper-shell.sh</td>
  <td>zk客户端</td>
</tr>
</tbody></table>


<p>接下来详细说明每个脚本的使用方法。</p>

<ul>
<li><strong>connect-distributed.sh&amp;connect-standalone.sh</strong></li>
</ul>

<p>Kafka Connect是在0.9以后加入的功能，主要是用来将其他系统的数据导入到Kafka,然后再将Kafka中的数据导出到另外的系统。可以用来做实时数据同步的ETL，数据实时分析处理等。 <br>
主要有2种模式：Standalone（单机模式）和Distribute（分布式模式）。 <br>
单机主要用来开发，测试，分布式的用于生产环境。 <br>
用法比较复杂，建议参考：<a href="https://3gods.com/bigdata/Kafka-Connect-Details.html" rel="nofollow">Kafka Connect教程详解 https://3gods.com/bigdata/Kafka-Connect-Details.html</a></p>

<ul>
<li><strong>kafka-broker-api-versions.sh</strong></li>
</ul>

<p>用法：bin/kafka-broker-api-versions.sh –bootstrap-server 10.0.55.229:9092,10.0.55.229:9093,10.0.55.229:9094</p>

<ul>
<li><strong>kafka-configs.sh</strong></li>
</ul>

<p>配置管理脚本，这个脚本主要分两类用法：describe和alter。 <br>
describe相关用法： <br>
查看每个topic的配置：bin/kafka-configs.sh –zookeeper localhost:2181 –describe –entity-type topics <br>
部分结果如下：</p>



<pre class="prettyprint"><code class=" hljs rust">Configs <span class="hljs-keyword">for</span> topic <span class="hljs-string">'afei'</span> are 
Configs <span class="hljs-keyword">for</span> topic <span class="hljs-string">'TOPIC-TEST-AFEI'</span> are retention.ms=<span class="hljs-number">600000</span> 
Configs <span class="hljs-keyword">for</span> topic <span class="hljs-string">'__consumer_offsets'</span> are segment.bytes=<span class="hljs-number">104857600</span>,cleanup.policy=compact,compression.<span class="hljs-keyword">type</span>=producer</code></pre>

<p>查看broker的配置：bin/kafka-configs.sh –bootstrap-server localhost:9092 –describe  –entity-type brokers –entity-name  0</p>

<blockquote>
  <p>说明：0是broker.id，因为entity-type为brokers，所以entity-name表示broker.id。</p>
</blockquote>

<p>alter相关用法： <br>
给指定topic增加配置：bin/kafka-configs.sh –zookeeper localhost:2181 –alter –entity-type topics –entity-name  TOPIC-TEST-AFEI <strong>–add-config</strong> retention.ms=600000 <br>
给指定topic删除配置：bin/kafka-configs.sh –zookeeper localhost:2181 –alter –entity-type topics –entity-name  TOPIC-TEST-AFEI <strong>–delete-config</strong> max.message.bytes</p>

<blockquote>
  <p>通过该脚本可以管理的属性，可以通过执行<code>bin/kafka-configs.sh</code>得到的输出中<code>--add-config</code>的desc可以得到。</p>
</blockquote>

<ul>
<li><strong>kafka-broker-api-versions.sh</strong></li>
</ul>

<p>用法：bin/kafka-broker-api-versions.sh –bootstrap-server localhost:9092</p>

<ul>
<li><strong>kafka-console-consumer.sh</strong> </li>
</ul>

<p>用法：bin/kafka-console-consumer.sh –bootstrap-server localhost:9092 –topic afei [–group groupName] [–partition 目标分区]</p>

<p>这个命令后面还可带很多参数： <br>
<code>--key-deserializer</code>：指定key的反序列化方式，默认是 org.apache.kafka.common.serialization.StringDeserializer <br>
<code>--value-deserializer</code>：指定value的反序列化方式，默认是 org.apache.kafka.common.serialization.StringDeserializer  <br>
<code>--from-beginning</code>：从最早的消息开始消费，默认是从最新消息开始消费。 <br>
<code>--offset</code>： 从指定的消息位置开始消费，如果设置了这个参数，还需要带上<code>--partition</code>。否则会提示：The partition is required when offset is specified. <br>
<code>--timeout-ms</code>：当消费者在这个参数指定时间间隔内没有收到消息就会推出，并抛出异常：kafka.consumer.ConsumerTimeoutException。 <br>
<code>--whitelist</code>：接收的topic白名单集合，和<code>--topic</code>二者取其一。例如：<code>--whitelist "afei.*"</code>（以afei开头的topic），<code>--whitelist "afei"</code>（指定afei这个topic），<code>"afei|fly"</code>（指定afei或者fly这两个topic）。另外一个参数<code>--blacklist</code>用法类似。</p>

<ul>
<li><strong>kafka-console-producer.sh</strong></li>
</ul>

<p>用法：bin/kafka-console-producer.sh –broker-list localhost:9092 –topic afei <br>
，如果连接集群，那么broker-list参数格式为：HOST1:PORT1,HOST2:PORT2,HOST3:PORT3</p>

<p>这个命令后面还可带很多参数： <br>
<code>--key-serializer</code>：指定key的序列化方式，默认是 org.apache.kafka.common.serialization.StringSerializer <br>
<code>--value-serializer</code>：指定value的序列化方式，默认是 org.apache.kafka.common.serialization.StringSerializer </p>

<ul>
<li><strong>kafka-consumer-groups.sh</strong></li>
</ul>

<p>查看所有消费者组：bin/kafka-consumer-groups.sh –bootstrap-server localhost:9092 –list <br>
查看某个消费者组：bin/kafka-consumer-groups.sh –bootstrap-server localhost:9092 –group AfeiGroup –describe，输出结果如下：</p>



<pre class="prettyprint"><code class=" hljs http"><span class="hljs-attribute">Note</span>: <span class="hljs-string">This will not show information about old Zookeeper-based consumers.</span>

<span class="lasso">TOPIC           PARTITION  CURRENT<span class="hljs-attribute">-OFFSET</span>  <span class="hljs-keyword">LOG</span><span class="hljs-attribute">-END</span><span class="hljs-attribute">-OFFSET</span>  LAG             CONSUMER<span class="hljs-attribute">-ID</span>                                     HOST            CLIENT<span class="hljs-attribute">-ID</span>
afei            <span class="hljs-number">0</span>          <span class="hljs-number">8</span>               <span class="hljs-number">8</span>               <span class="hljs-number">0</span>               consumer<span class="hljs-subst">-</span><span class="hljs-number">1</span><span class="hljs-subst">-</span><span class="hljs-number">7</span>a46c647<span class="hljs-subst">-</span><span class="hljs-number">8221</span><span class="hljs-subst">-</span><span class="hljs-number">4</span>aca<span class="hljs-attribute">-b6bf</span><span class="hljs-attribute">-ed14571fb0f1</span> /<span class="hljs-number">172.18</span><span class="hljs-number">.36</span><span class="hljs-number">.203</span>  consumer<span class="hljs-subst">-</span><span class="hljs-number">1</span>
afei            <span class="hljs-number">4</span>          <span class="hljs-number">10</span>              <span class="hljs-number">10</span>              <span class="hljs-number">0</span>               consumer<span class="hljs-subst">-</span><span class="hljs-number">1</span><span class="hljs-subst">-</span><span class="hljs-number">7</span>a46c647<span class="hljs-subst">-</span><span class="hljs-number">8221</span><span class="hljs-subst">-</span><span class="hljs-number">4</span>aca<span class="hljs-attribute">-b6bf</span><span class="hljs-attribute">-ed14571fb0f1</span> /<span class="hljs-number">172.18</span><span class="hljs-number">.36</span><span class="hljs-number">.203</span>  consumer<span class="hljs-subst">-</span><span class="hljs-number">1</span>
afei            <span class="hljs-number">1</span>          <span class="hljs-number">8</span>               <span class="hljs-number">8</span>               <span class="hljs-number">0</span>               consumer<span class="hljs-subst">-</span><span class="hljs-number">1</span><span class="hljs-subst">-</span><span class="hljs-number">7</span>a46c647<span class="hljs-subst">-</span><span class="hljs-number">8221</span><span class="hljs-subst">-</span><span class="hljs-number">4</span>aca<span class="hljs-attribute">-b6bf</span><span class="hljs-attribute">-ed14571fb0f1</span> /<span class="hljs-number">172.18</span><span class="hljs-number">.36</span><span class="hljs-number">.203</span>  consumer<span class="hljs-subst">-</span><span class="hljs-number">1</span>
afei            <span class="hljs-number">3</span>          <span class="hljs-number">6</span>               <span class="hljs-number">6</span>               <span class="hljs-number">0</span>               consumer<span class="hljs-subst">-</span><span class="hljs-number">1</span><span class="hljs-subst">-</span><span class="hljs-number">7</span>a46c647<span class="hljs-subst">-</span><span class="hljs-number">8221</span><span class="hljs-subst">-</span><span class="hljs-number">4</span>aca<span class="hljs-attribute">-b6bf</span><span class="hljs-attribute">-ed14571fb0f1</span> /<span class="hljs-number">172.18</span><span class="hljs-number">.36</span><span class="hljs-number">.203</span>  consumer<span class="hljs-subst">-</span><span class="hljs-number">1</span>
afei            <span class="hljs-number">2</span>          <span class="hljs-number">9</span>               <span class="hljs-number">9</span>               <span class="hljs-number">0</span>               consumer<span class="hljs-subst">-</span><span class="hljs-number">1</span><span class="hljs-subst">-</span><span class="hljs-number">7</span>a46c647<span class="hljs-subst">-</span><span class="hljs-number">8221</span><span class="hljs-subst">-</span><span class="hljs-number">4</span>aca<span class="hljs-attribute">-b6bf</span><span class="hljs-attribute">-ed14571fb0f1</span> /<span class="hljs-number">172.18</span><span class="hljs-number">.36</span><span class="hljs-number">.203</span>  consumer<span class="hljs-subst">-</span><span class="hljs-number">1</span>
</span></code></pre>

<ul>
<li><strong>kafka-consumer-perf-test.sh</strong></li>
</ul>

<p>perf是performance的缩写，所以这个脚本是kafka消费者性能测试脚本。 <br>
用法：bin/kafka-consumer-perf-test.sh –broker-list localhost:9092 –group testGroup –topic afei –messages 1024 <br>
输出结果如下：</p>



<pre class="prettyprint"><code class=" hljs avrasm">start<span class="hljs-preprocessor">.time</span>, end<span class="hljs-preprocessor">.time</span>, data<span class="hljs-preprocessor">.consumed</span><span class="hljs-preprocessor">.in</span><span class="hljs-preprocessor">.MB</span>, MB<span class="hljs-preprocessor">.sec</span>, data<span class="hljs-preprocessor">.consumed</span><span class="hljs-preprocessor">.in</span><span class="hljs-preprocessor">.nMsg</span>, nMsg<span class="hljs-preprocessor">.sec</span>, rebalance<span class="hljs-preprocessor">.time</span><span class="hljs-preprocessor">.ms</span>, fetch<span class="hljs-preprocessor">.time</span><span class="hljs-preprocessor">.ms</span>, fetch<span class="hljs-preprocessor">.MB</span><span class="hljs-preprocessor">.sec</span>, fetch<span class="hljs-preprocessor">.nMsg</span><span class="hljs-preprocessor">.sec</span>
<span class="hljs-number">2018</span>-<span class="hljs-number">07</span>-<span class="hljs-number">02</span> <span class="hljs-number">22</span>:<span class="hljs-number">49</span>:<span class="hljs-number">10</span>:<span class="hljs-number">068</span>, <span class="hljs-number">2018</span>-<span class="hljs-number">07</span>-<span class="hljs-number">02</span> <span class="hljs-number">22</span>:<span class="hljs-number">49</span>:<span class="hljs-number">12</span>:<span class="hljs-number">077</span>, <span class="hljs-number">0.0001</span>, <span class="hljs-number">0.0001</span>, <span class="hljs-number">41</span>, <span class="hljs-number">20.4082</span>, <span class="hljs-number">19</span>, <span class="hljs-number">1990</span>, <span class="hljs-number">0.0001</span>, <span class="hljs-number">20.6030</span></code></pre>

<ul>
<li><strong>kafka-delete-records.sh</strong></li>
</ul>

<p>用法：bin/kafka-delete-records.sh –bootstrap-server 10.0.55.229:9092,10.0.55.229:9093,10.0.55.229:9094  –offset-json-file offset.json，offset.json文件内容：</p>



<pre class="prettyprint"><code class="language-json hljs ">{
    "<span class="hljs-attribute">partitions</span>": <span class="hljs-value">[{
        "<span class="hljs-attribute">topic</span>": <span class="hljs-value"><span class="hljs-string">"afei"</span></span>,
        "<span class="hljs-attribute">partition</span>": <span class="hljs-value"><span class="hljs-number">3</span></span>,
        "<span class="hljs-attribute">offset</span>": <span class="hljs-value"><span class="hljs-number">10</span>
    </span>}]</span>,
    "<span class="hljs-attribute">version</span>": <span class="hljs-value"><span class="hljs-number">1</span>
</span>}</code></pre>

<p>执行结果如下，表示删除afei这个topic下分区为3的offset少于10的消息日志（不会删除offset=10的消息日志）：</p>



<pre class="prettyprint"><code class=" hljs mel">Executing records <span class="hljs-keyword">delete</span> operation
Records <span class="hljs-keyword">delete</span> operation completed:
<span class="hljs-keyword">partition</span>: afei-<span class="hljs-number">3</span>   low_watermark: <span class="hljs-number">10</span></code></pre>

<ul>
<li><strong>kafka-log-dirs.sh</strong></li>
</ul>

<p>用法：bin/kafka-log-dirs.sh  –bootstrap-server localhost:9092  –describe  –topic-list afei[,topicName2,topicNameN]，如果没有指定<code>--topic-list</code>，那么会输出所有kafka消息日志目录以及目录下所有topic信息。加上<code>--topic-list</code>参数后，输出结果如下，由这段结果可知，消息日志所在目录为<code>/data/kafka-logs</code>，并且afei这个topic有3个分区：</p>



<pre class="prettyprint"><code class=" hljs json">{
    "<span class="hljs-attribute">version</span>": <span class="hljs-value"><span class="hljs-number">1</span></span>,
    "<span class="hljs-attribute">brokers</span>": <span class="hljs-value">[{
        "<span class="hljs-attribute">broker</span>": <span class="hljs-value"><span class="hljs-number">0</span></span>,
        "<span class="hljs-attribute">logDirs</span>": <span class="hljs-value">[{
            "<span class="hljs-attribute">logDir</span>": <span class="hljs-value"><span class="hljs-string">"/data/kafka-logs"</span></span>,
            "<span class="hljs-attribute">error</span>": <span class="hljs-value"><span class="hljs-literal">null</span></span>,
            "<span class="hljs-attribute">partitions</span>": <span class="hljs-value">[{
                "<span class="hljs-attribute">partition</span>": <span class="hljs-value"><span class="hljs-string">"afei-1"</span></span>,
                "<span class="hljs-attribute">size</span>": <span class="hljs-value"><span class="hljs-number">567</span></span>,
                "<span class="hljs-attribute">offsetLag</span>": <span class="hljs-value"><span class="hljs-number">0</span></span>,
                "<span class="hljs-attribute">isFuture</span>": <span class="hljs-value"><span class="hljs-literal">false</span>
            </span>}, {
                "<span class="hljs-attribute">partition</span>": <span class="hljs-value"><span class="hljs-string">"afei-2"</span></span>,
                "<span class="hljs-attribute">size</span>": <span class="hljs-value"><span class="hljs-number">639</span></span>,
                "<span class="hljs-attribute">offsetLag</span>": <span class="hljs-value"><span class="hljs-number">0</span></span>,
                "<span class="hljs-attribute">isFuture</span>": <span class="hljs-value"><span class="hljs-literal">false</span>
            </span>}, {
                "<span class="hljs-attribute">partition</span>": <span class="hljs-value"><span class="hljs-string">"afei-0"</span></span>,
                "<span class="hljs-attribute">size</span>": <span class="hljs-value"><span class="hljs-number">561</span></span>,
                "<span class="hljs-attribute">offsetLag</span>": <span class="hljs-value"><span class="hljs-number">0</span></span>,
                "<span class="hljs-attribute">isFuture</span>": <span class="hljs-value"><span class="hljs-literal">false</span>
            </span>}]
        </span>}]
    </span>}]
</span>}</code></pre>

<ul>
<li><strong>kafka-preferred-replica-election.sh</strong></li>
</ul>

<p>用法：bin/kafka-preferred-replica-election.sh –zookeeper  10.0.55.208:2181/wallet,10.0.55.209:2181/wallet,10.0.55.210:2181/wallet  –path-to-json-file afei-preferred.json（如果不带–path-to-json-file就是对所有topic进行preferred replica election），json文件内容如下：：</p>



<pre class="prettyprint"><code class="language-json hljs ">{
    "<span class="hljs-attribute">partitions</span>": <span class="hljs-value">[{
        "<span class="hljs-attribute">topic</span>": <span class="hljs-value"><span class="hljs-string">"afei"</span></span>,
        "<span class="hljs-attribute">partition</span>": <span class="hljs-value"><span class="hljs-number">0</span>
    </span>},
    {
        "<span class="hljs-attribute">topic</span>": <span class="hljs-value"><span class="hljs-string">"afei"</span></span>,
        "<span class="hljs-attribute">partition</span>": <span class="hljs-value"><span class="hljs-number">1</span>
    </span>},
    {
        "<span class="hljs-attribute">topic</span>": <span class="hljs-value"><span class="hljs-string">"afei"</span></span>,
        "<span class="hljs-attribute">partition</span>": <span class="hljs-value"><span class="hljs-number">2</span>
    </span>}]
</span>}
</code></pre>

<p>场景：在创建一个topic时，kafka尽量将partition均分在所有的brokers上，并且将replicas也均分在不同的broker上。每个partitiion的所有replicas叫做”assigned replicas”，”assigned replicas”中的第一个replicas叫”preferred replica”，刚创建的topic一般”preferred replica”是leader。leader replica负责所有的读写。其他replica只是冷备状态，不接受读写请求。但随着时间推移，broker可能会主动停机甚至客观宕机，会发生leader选举迁移，导致机群的负载不均衡。我们期望对topic的leader进行重新负载均衡，让partition选择”preferred replica”做为leader。</p>

<p>kafka提供了一个参数<code>auto.leader.rebalance.enable</code>自动做这件事情，且默认为true，原理是一个后台线程检查并触发leader balance。但是并不建议把这个参数设置为true。因为担心这个自动选举发生在业务高峰期，从而导致影响业务。</p>

<p>验证： <br>
操作比较简单，常见一个3个分区3个副本的topic，然后kill掉一个broker。这时候topic信息如下，我们可以看到broker.id为0的broker上有两个leader：</p>



<pre class="prettyprint"><code class=" hljs css"><span class="hljs-tag">Topic</span><span class="hljs-pseudo">:afei</span>  <span class="hljs-tag">PartitionCount</span><span class="hljs-pseudo">:3</span>    <span class="hljs-tag">ReplicationFactor</span><span class="hljs-pseudo">:3</span> <span class="hljs-tag">Configs</span>:
    <span class="hljs-tag">Topic</span>: <span class="hljs-tag">afei</span> <span class="hljs-tag">Partition</span>: 0    <span class="hljs-tag">Leader</span>: 0   <span class="hljs-tag">Replicas</span>: 0,1,2 <span class="hljs-tag">Isr</span>: 0,1,2
    <span class="hljs-tag">Topic</span>: <span class="hljs-tag">afei</span> <span class="hljs-tag">Partition</span>: 1    <span class="hljs-tag">Leader</span>: 1   <span class="hljs-tag">Replicas</span>: 1,2,0 <span class="hljs-tag">Isr</span>: 0,1,2
    <span class="hljs-tag">Topic</span>: <span class="hljs-tag">afei</span> <span class="hljs-tag">Partition</span>: 2    <span class="hljs-tag">Leader</span>: 0   <span class="hljs-tag">Replicas</span>: 2,0,1 <span class="hljs-tag">Isr</span>: 0,1,2</code></pre>

<p>执行<code>kafka-preferred-replica-election.sh</code>脚本后，topic信息如下，leader均匀分布在3个不同的broker上，</p>



<pre class="prettyprint"><code class=" hljs css"><span class="hljs-tag">Topic</span><span class="hljs-pseudo">:afei</span>  <span class="hljs-tag">PartitionCount</span><span class="hljs-pseudo">:3</span>    <span class="hljs-tag">ReplicationFactor</span><span class="hljs-pseudo">:3</span> <span class="hljs-tag">Configs</span>:
    <span class="hljs-tag">Topic</span>: <span class="hljs-tag">afei</span> <span class="hljs-tag">Partition</span>: 0    <span class="hljs-tag">Leader</span>: 0   <span class="hljs-tag">Replicas</span>: 0,1,2 <span class="hljs-tag">Isr</span>: 0,1,2
    <span class="hljs-tag">Topic</span>: <span class="hljs-tag">afei</span> <span class="hljs-tag">Partition</span>: 1    <span class="hljs-tag">Leader</span>: 1   <span class="hljs-tag">Replicas</span>: 1,2,0 <span class="hljs-tag">Isr</span>: 0,1,2
    <span class="hljs-tag">Topic</span>: <span class="hljs-tag">afei</span> <span class="hljs-tag">Partition</span>: 2    <span class="hljs-tag">Leader</span>: 2   <span class="hljs-tag">Replicas</span>: 2,0,1 <span class="hljs-tag">Isr</span>: 0,1,2</code></pre>

<ul>
<li><strong>kafka-producer-perf-test.sh</strong></li>
</ul>

<p>perf是performance的缩写，所以这个脚本是kafka生产者性能测试脚本。</p>

<ul>
<li><strong>kafka-reassign-partitions.sh</strong></li>
</ul>

<p>场景：将一些topic上的分区从当前所在broker移到其他比如新增的broker上。假设有个名为ORDER-DETAIL的topic，在broker.id为2的broker上：</p>



<pre class="prettyprint"><code class=" hljs lasso">Topic:<span class="hljs-keyword">ORDER</span><span class="hljs-attribute">-DETAIL</span>  PartitionCount:<span class="hljs-number">1</span>    ReplicationFactor:<span class="hljs-number">1</span> Configs:
    Topic: <span class="hljs-keyword">ORDER</span><span class="hljs-attribute">-DETAIL</span> Partition: <span class="hljs-number">0</span>    Leader: <span class="hljs-number">2</span>   Replicas: <span class="hljs-number">2</span> Isr: <span class="hljs-number">2</span></code></pre>

<p>现在想要把它移动到broker.id为1的broker上，执行脚本：bin/kafka-reassign-partitions.sh –zookeeper 10.0.55.208:2181/wallet,10.0.55.209:2181/wallet,10.0.55.210:2181/wallet –topics-to-move-json-file move.json –broker-list “1” –generate</p>

<p><code>--generate</code>参数表示生成一个分区再分配配置，并不会真正的执行，命令执行结果如下：</p>



<pre class="prettyprint"><code class=" hljs mel">Current <span class="hljs-keyword">partition</span> replica assignment
{<span class="hljs-string">"version"</span>:<span class="hljs-number">1</span>,<span class="hljs-string">"partitions"</span>:[{<span class="hljs-string">"topic"</span>:<span class="hljs-string">"ORDER-DETAIL"</span>,<span class="hljs-string">"partition"</span>:<span class="hljs-number">0</span>,<span class="hljs-string">"replicas"</span>:[<span class="hljs-number">2</span>],<span class="hljs-string">"log_dirs"</span>:[<span class="hljs-string">"any"</span>]}]}

Proposed <span class="hljs-keyword">partition</span> reassignment configuration
{<span class="hljs-string">"version"</span>:<span class="hljs-number">1</span>,<span class="hljs-string">"partitions"</span>:[{<span class="hljs-string">"topic"</span>:<span class="hljs-string">"ORDER-DETAIL"</span>,<span class="hljs-string">"partition"</span>:<span class="hljs-number">0</span>,<span class="hljs-string">"replicas"</span>:[<span class="hljs-number">1</span>],<span class="hljs-string">"log_dirs"</span>:[<span class="hljs-string">"any"</span>]}]}</code></pre>

<p>我们只需要把第二段json内容保存到一个新建的final.json文件中（如果知道如何编写这段json内容，那么也可以不执行第一条命令），然后执行命令：bin/kafka-reassign-partitions.sh –zookeeper 10.0.55.208:2181/wallet,10.0.55.209:2181/wallet,10.0.55.210:2181/wallet –reassignment-json-file move_final.json –execute，此次执行的命令带有<code>--execute</code>参数，说明是真正的执行分区重分配。</p>

<p>通过这个命令还可以给某个topic**增加副本**，例如有一个名为ORDER-DETAIL的topic，有3个分区，但是只有1个副本，为了高可用，需要将副本数增加到2，那么编写replica.json文本内容如下：</p>



<pre class="prettyprint"><code class=" hljs json">{
    "<span class="hljs-attribute">version</span>": <span class="hljs-value"><span class="hljs-number">1</span></span>,
    "<span class="hljs-attribute">partitions</span>": <span class="hljs-value">[{
        "<span class="hljs-attribute">topic</span>": <span class="hljs-value"><span class="hljs-string">"ORDER-DETAIL"</span></span>,
        "<span class="hljs-attribute">partition</span>": <span class="hljs-value"><span class="hljs-number">0</span></span>,
        "<span class="hljs-attribute">replicas</span>": <span class="hljs-value">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]
    </span>},
    {
        "<span class="hljs-attribute">topic</span>": <span class="hljs-value"><span class="hljs-string">"ORDER-DETAIL"</span></span>,
        "<span class="hljs-attribute">partition</span>": <span class="hljs-value"><span class="hljs-number">1</span></span>,
        "<span class="hljs-attribute">replicas</span>": <span class="hljs-value">[<span class="hljs-number">0</span>, <span class="hljs-number">2</span>]
    </span>},
    {
        "<span class="hljs-attribute">topic</span>": <span class="hljs-value"><span class="hljs-string">"ORDER-DETAIL"</span></span>,
        "<span class="hljs-attribute">partition</span>": <span class="hljs-value"><span class="hljs-number">2</span></span>,
        "<span class="hljs-attribute">replicas</span>": <span class="hljs-value">[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>]
    </span>}]
</span>}</code></pre>

<p>然后执行命令即可：bin/kafka-reassign-partitions.sh –zookeeper 10.0.55.208:2181/wallet,10.0.55.209:2181/wallet,10.0.55.210:2181/wallet –reassignment-json-file  replica.json</p>

<ul>
<li><strong>kafka-replica-verification.sh</strong></li>
</ul>

<p>用法：bin/kafka-replica-verification.sh –broker-list 10.0.55.229:9092,10.0.55.229:9093,10.0.55.229:9094 [–topic-white-list afei]，参数–topic-white-list指定要检查的目标topic。输出结果如下，如果输出信息为<code>max lag is 0 for ...</code>表示这个topic的复制没有任何延迟：</p>



<pre class="prettyprint"><code class=" hljs r"><span class="hljs-number">2018</span>-<span class="hljs-number">07</span>-<span class="hljs-number">03</span> <span class="hljs-number">15</span>:<span class="hljs-number">04</span>:<span class="hljs-number">46</span>,<span class="hljs-number">889</span>: verification process is started.
<span class="hljs-number">2018</span>-<span class="hljs-number">07</span>-<span class="hljs-number">03</span> <span class="hljs-number">15</span>:<span class="hljs-number">05</span>:<span class="hljs-number">16</span>,<span class="hljs-number">811</span>: max lag is <span class="hljs-number">0</span> <span class="hljs-keyword">for</span> partition multi-<span class="hljs-number">1</span> at offset <span class="hljs-number">0</span> among <span class="hljs-number">5</span> partitions
<span class="hljs-number">2018</span>-<span class="hljs-number">07</span>-<span class="hljs-number">03</span> <span class="hljs-number">15</span>:<span class="hljs-number">05</span>:<span class="hljs-number">46</span>,<span class="hljs-number">812</span>: max lag is <span class="hljs-number">0</span> <span class="hljs-keyword">for</span> partition multi-<span class="hljs-number">1</span> at offset <span class="hljs-number">0</span> among <span class="hljs-number">5</span> partitions
<span class="hljs-keyword">...</span> <span class="hljs-keyword">...</span></code></pre>

<ul>
<li><strong>kafka-server-start.sh</strong></li>
</ul>

<p>用法：bin/kafka-server-start.sh -daemon config/server.properties，指定配置文件并以守护进程模式启动。</p>

<ul>
<li><strong>kafka-server-stop.sh</strong></li>
</ul>

<p>用法：bin/kafka-server-stop.sh 。说明，这个命令会kill掉当前服务器上所有kafka broker。但是这个脚本可能执行结果为：<code>No kafka server to stop</code></p>

<p>分析原因：我们先看一下<code>kafka-server-stop.sh</code>脚本内容，这个脚本非常简单，就是得到所有包含<strong>kafka.Kafka</strong>的进程ID，但是由于kafka启动依赖比较多的jar，导致kafka进程的<code>ps</code>结果输出内容比较长，而<code>ps</code>输出结果受到<code>PAGE_SIZE</code>（其值通过命令<code>getconf PAGE_SIZE</code>可以得到）的限制，从而导致<code>ps</code>结果中看不到<code>kafka\.Kafka</code>，所以不能kill掉kafka server：</p>



<pre class="prettyprint"><code class=" hljs bash">SIGNAL=<span class="hljs-variable">${SIGNAL:-TERM}</span>
PIDS=$(ps ax | grep -i <span class="hljs-string">'kafka\.Kafka'</span> | grep java | grep -v grep | awk <span class="hljs-string">'{print $1}'</span>)

<span class="hljs-keyword">if</span> [ -z <span class="hljs-string">"<span class="hljs-variable">$PIDS</span>"</span> ]; <span class="hljs-keyword">then</span>
  <span class="hljs-built_in">echo</span> <span class="hljs-string">"No kafka server to stop"</span>
  <span class="hljs-keyword">exit</span> <span class="hljs-number">1</span>
<span class="hljs-keyword">else</span>
  kill <span class="hljs-operator">-s</span> <span class="hljs-variable">$SIGNAL</span> <span class="hljs-variable">$PIDS</span>
<span class="hljs-keyword">fi</span></code></pre>

<p>为了kafka-server-stop.sh脚本可以正常执行，建议修改脚本如下，通过bin脚本所在目录的上级目录来查找进程ID，从而kill相关进程：</p>



<pre class="prettyprint"><code class=" hljs bash"><span class="hljs-built_in">cd</span> `dirname <span class="hljs-variable">$0</span>`
BIN_DIR=`<span class="hljs-built_in">pwd</span>`
<span class="hljs-built_in">cd</span> ..
DEPLOY_DIR=`<span class="hljs-built_in">pwd</span>`
SIGNAL=<span class="hljs-variable">${SIGNAL:-TERM}</span>

PIDS=$(ps ax | grep -i <span class="hljs-string">"<span class="hljs-variable">${DEPLOY_DIR}</span>"</span> | grep java | grep -v grep | awk <span class="hljs-string">'{print $1}'</span>)

<span class="hljs-keyword">if</span> [ -z <span class="hljs-string">"<span class="hljs-variable">$PIDS</span>"</span> ]; <span class="hljs-keyword">then</span>
  <span class="hljs-built_in">echo</span> <span class="hljs-string">"No kafka server to stop"</span>
  <span class="hljs-keyword">exit</span> <span class="hljs-number">1</span>
<span class="hljs-keyword">else</span>
  kill <span class="hljs-operator">-s</span> <span class="hljs-variable">$SIGNAL</span> <span class="hljs-variable">$PIDS</span>
<span class="hljs-keyword">fi</span></code></pre>

<ul>
<li><strong>kafka-simple-consumer-shell.sh</strong></li>
</ul>

<p>deprecated，用法：bin/kafka-simple-consumer-shell.sh –broker-list 10.0.55.229:9092,10.0.55.229:9093,10.0.55.229:9094 –topic afei</p>

<ul>
<li><strong>kafka-topics.sh</strong></li>
</ul>

<p><strong>创建topic:</strong> bin/kafka-topics.sh –zookeeper localhost:2181 –create –topic afei –partitions 3 –replication-factor 1 <br>
<strong>删除topic</strong>: bin/kafka-topics.sh –zookeeper localhost:2181 –delete –topic test <br>
<strong>修改topic</strong>: bin/kafka-topics.sh –zookeeper localhost:2181 –alter –topic afei –partitions 5，修改topic时只能增加分区数量。 <br>
<strong>查询topic</strong>: bin/kafka-topics.sh –zookeeper localhost:2181 –describe [ –topic afei ]，查询时如果带上<code>--topic topicName</code>，那么表示只查询该topic的详细信息。这时候还可以带上<code>--unavailable-partitions</code> 和<code>--under-replicated-partitions</code>任意一个参数。</p>

<ul>
<li><strong>kafka-verifiable-consumer.sh</strong></li>
</ul>

<p>用法：bin/kafka-verifiable-consumer.sh –broker-list 10.0.55.229:9092,10.0.55.229:9093,10.0.55.229:9094 –topic afei  –group-id groupName <br>
这个脚本的作用是接收指定topic的消息消费，并发出消费者事件，例如：offset提交等。</p>

<ul>
<li><strong>kafka-verifiable-producer.sh</strong></li>
</ul>

<p>用法：bin/kafka-verifiable-producer.sh  –broker-list 10.0.55.229:9092,10.0.55.229:9093,10.0.55.229:9094 –topic afei [–max-messages 64]，建议使用该脚本时增加参数<code>--max-messages</code>，否则会不停的发送消息。 <br>
这个脚本的作用是持续发送消息到指定的topic中，参数<code>--max-messages</code>限制最大发送消息数。且每条发送的消息都会有响应信息，这就是和<code>kafka-console-producer.sh</code>最大的不同：</p>



<pre class="prettyprint"><code class=" hljs ruby">[mwopr<span class="hljs-variable">@jtcrtvdra35</span> kafka_2.<span class="hljs-number">12</span>-<span class="hljs-number">1.1</span>.<span class="hljs-number">0</span>]<span class="hljs-variable">$ </span>bin/kafka-verifiable-producer.sh  --broker-list <span class="hljs-number">10.0</span>.<span class="hljs-number">55.229</span><span class="hljs-symbol">:</span><span class="hljs-number">9092</span>,<span class="hljs-number">10.0</span>.<span class="hljs-number">55.229</span><span class="hljs-symbol">:</span><span class="hljs-number">9093</span>,<span class="hljs-number">10.0</span>.<span class="hljs-number">55.229</span><span class="hljs-symbol">:</span><span class="hljs-number">9094</span> --topic afei --max-messages <span class="hljs-number">9</span>
{<span class="hljs-string">"timestamp"</span><span class="hljs-symbol">:</span><span class="hljs-number">1530515959900</span>,<span class="hljs-string">"name"</span><span class="hljs-symbol">:<span class="hljs-string">"startup_complete"</span></span>}
{<span class="hljs-string">"timestamp"</span><span class="hljs-symbol">:</span><span class="hljs-number">1530515960310</span>,<span class="hljs-string">"name"</span><span class="hljs-symbol">:<span class="hljs-string">"producer_send_success"</span></span>,<span class="hljs-string">"key"</span><span class="hljs-symbol">:null</span>,<span class="hljs-string">"value"</span><span class="hljs-symbol">:<span class="hljs-string">"1"</span></span>,<span class="hljs-string">"offset"</span><span class="hljs-symbol">:</span><span class="hljs-number">5</span>,<span class="hljs-string">"topic"</span><span class="hljs-symbol">:<span class="hljs-string">"afei"</span></span>,<span class="hljs-string">"partition"</span><span class="hljs-symbol">:</span><span class="hljs-number">0</span>}
{<span class="hljs-string">"timestamp"</span><span class="hljs-symbol">:</span><span class="hljs-number">1530515960315</span>,<span class="hljs-string">"name"</span><span class="hljs-symbol">:<span class="hljs-string">"producer_send_success"</span></span>,<span class="hljs-string">"key"</span><span class="hljs-symbol">:null</span>,<span class="hljs-string">"value"</span><span class="hljs-symbol">:<span class="hljs-string">"4"</span></span>,<span class="hljs-string">"offset"</span><span class="hljs-symbol">:</span><span class="hljs-number">6</span>,<span class="hljs-string">"topic"</span><span class="hljs-symbol">:<span class="hljs-string">"afei"</span></span>,<span class="hljs-string">"partition"</span><span class="hljs-symbol">:</span><span class="hljs-number">0</span>}
{<span class="hljs-string">"timestamp"</span><span class="hljs-symbol">:</span><span class="hljs-number">1530515960315</span>,<span class="hljs-string">"name"</span><span class="hljs-symbol">:<span class="hljs-string">"producer_send_success"</span></span>,<span class="hljs-string">"key"</span><span class="hljs-symbol">:null</span>,<span class="hljs-string">"value"</span><span class="hljs-symbol">:<span class="hljs-string">"7"</span></span>,<span class="hljs-string">"offset"</span><span class="hljs-symbol">:</span><span class="hljs-number">7</span>,<span class="hljs-string">"topic"</span><span class="hljs-symbol">:<span class="hljs-string">"afei"</span></span>,<span class="hljs-string">"partition"</span><span class="hljs-symbol">:</span><span class="hljs-number">0</span>}
{<span class="hljs-string">"timestamp"</span><span class="hljs-symbol">:</span><span class="hljs-number">1530515960316</span>,<span class="hljs-string">"name"</span><span class="hljs-symbol">:<span class="hljs-string">"producer_send_success"</span></span>,<span class="hljs-string">"key"</span><span class="hljs-symbol">:null</span>,<span class="hljs-string">"value"</span><span class="hljs-symbol">:<span class="hljs-string">"0"</span></span>,<span class="hljs-string">"offset"</span><span class="hljs-symbol">:</span><span class="hljs-number">5</span>,<span class="hljs-string">"topic"</span><span class="hljs-symbol">:<span class="hljs-string">"afei"</span></span>,<span class="hljs-string">"partition"</span><span class="hljs-symbol">:</span><span class="hljs-number">1</span>}
{<span class="hljs-string">"timestamp"</span><span class="hljs-symbol">:</span><span class="hljs-number">1530515960316</span>,<span class="hljs-string">"name"</span><span class="hljs-symbol">:<span class="hljs-string">"producer_send_success"</span></span>,<span class="hljs-string">"key"</span><span class="hljs-symbol">:null</span>,<span class="hljs-string">"value"</span><span class="hljs-symbol">:<span class="hljs-string">"3"</span></span>,<span class="hljs-string">"offset"</span><span class="hljs-symbol">:</span><span class="hljs-number">6</span>,<span class="hljs-string">"topic"</span><span class="hljs-symbol">:<span class="hljs-string">"afei"</span></span>,<span class="hljs-string">"partition"</span><span class="hljs-symbol">:</span><span class="hljs-number">1</span>}
{<span class="hljs-string">"timestamp"</span><span class="hljs-symbol">:</span><span class="hljs-number">1530515960316</span>,<span class="hljs-string">"name"</span><span class="hljs-symbol">:<span class="hljs-string">"producer_send_success"</span></span>,<span class="hljs-string">"key"</span><span class="hljs-symbol">:null</span>,<span class="hljs-string">"value"</span><span class="hljs-symbol">:<span class="hljs-string">"6"</span></span>,<span class="hljs-string">"offset"</span><span class="hljs-symbol">:</span><span class="hljs-number">7</span>,<span class="hljs-string">"topic"</span><span class="hljs-symbol">:<span class="hljs-string">"afei"</span></span>,<span class="hljs-string">"partition"</span><span class="hljs-symbol">:</span><span class="hljs-number">1</span>}
{<span class="hljs-string">"timestamp"</span><span class="hljs-symbol">:</span><span class="hljs-number">1530515960316</span>,<span class="hljs-string">"name"</span><span class="hljs-symbol">:<span class="hljs-string">"producer_send_success"</span></span>,<span class="hljs-string">"key"</span><span class="hljs-symbol">:null</span>,<span class="hljs-string">"value"</span><span class="hljs-symbol">:<span class="hljs-string">"2"</span></span>,<span class="hljs-string">"offset"</span><span class="hljs-symbol">:</span><span class="hljs-number">6</span>,<span class="hljs-string">"topic"</span><span class="hljs-symbol">:<span class="hljs-string">"afei"</span></span>,<span class="hljs-string">"partition"</span><span class="hljs-symbol">:</span><span class="hljs-number">2</span>}
{<span class="hljs-string">"timestamp"</span><span class="hljs-symbol">:</span><span class="hljs-number">1530515960316</span>,<span class="hljs-string">"name"</span><span class="hljs-symbol">:<span class="hljs-string">"producer_send_success"</span></span>,<span class="hljs-string">"key"</span><span class="hljs-symbol">:null</span>,<span class="hljs-string">"value"</span><span class="hljs-symbol">:<span class="hljs-string">"5"</span></span>,<span class="hljs-string">"offset"</span><span class="hljs-symbol">:</span><span class="hljs-number">7</span>,<span class="hljs-string">"topic"</span><span class="hljs-symbol">:<span class="hljs-string">"afei"</span></span>,<span class="hljs-string">"partition"</span><span class="hljs-symbol">:</span><span class="hljs-number">2</span>}
{<span class="hljs-string">"timestamp"</span><span class="hljs-symbol">:</span><span class="hljs-number">1530515960316</span>,<span class="hljs-string">"name"</span><span class="hljs-symbol">:<span class="hljs-string">"producer_send_success"</span></span>,<span class="hljs-string">"key"</span><span class="hljs-symbol">:null</span>,<span class="hljs-string">"value"</span><span class="hljs-symbol">:<span class="hljs-string">"8"</span></span>,<span class="hljs-string">"offset"</span><span class="hljs-symbol">:</span><span class="hljs-number">8</span>,<span class="hljs-string">"topic"</span><span class="hljs-symbol">:<span class="hljs-string">"afei"</span></span>,<span class="hljs-string">"partition"</span><span class="hljs-symbol">:</span><span class="hljs-number">2</span>}
{<span class="hljs-string">"timestamp"</span><span class="hljs-symbol">:</span><span class="hljs-number">1530515960333</span>,<span class="hljs-string">"name"</span><span class="hljs-symbol">:<span class="hljs-string">"shutdown_complete"</span></span>}
{<span class="hljs-string">"timestamp"</span><span class="hljs-symbol">:</span><span class="hljs-number">1530515960334</span>,<span class="hljs-string">"name"</span><span class="hljs-symbol">:<span class="hljs-string">"tool_data"</span></span>,<span class="hljs-string">"sent"</span><span class="hljs-symbol">:</span><span class="hljs-number">9</span>,<span class="hljs-string">"acked"</span><span class="hljs-symbol">:</span><span class="hljs-number">9</span>,<span class="hljs-string">"target_throughput"</span><span class="hljs-symbol">:-</span><span class="hljs-number">1</span>,<span class="hljs-string">"avg_throughput"</span><span class="hljs-symbol">:</span><span class="hljs-number">20.689655172413794</span>}</code></pre>

<blockquote>
  <p>afei这个topic有3个分区，使用kafka-verifiable-producer.sh发送9条消息。根据输出结果可以看出，往每个分区发送了3条消息。另外，我们可以通过设置参数<code>--max-messages</code>一个比较大的值，可以压测一下搭建的kafka集群环境。</p>
</blockquote>

<ul>
<li><strong>zookeeper-shell.sh</strong></li>
</ul>

<p>用法：bin/zookeeper-shell.sh  localhost:2181[/path]，如果kafka集群的zk配置了chroot路径，那么需要加上/path，例如<code>bin/zookeeper-shell.sh  localhost:2181/mykafka</code>，登陆zk后，就可以查看kafka写在zk上的节点信息。例如查看有哪些broker，以及broker的详细信息：</p>



<pre class="prettyprint"><code class=" hljs cs">ls /brokers/ids
[<span class="hljs-number">0</span>]
<span class="hljs-keyword">get</span> /brokers/ids/<span class="hljs-number">0</span>
{<span class="hljs-string">"listener_security_protocol_map"</span>:{<span class="hljs-string">"PLAINTEXT"</span>:<span class="hljs-string">"PLAINTEXT"</span>},<span class="hljs-string">"endpoints"</span>:[<span class="hljs-string">"PLAINTEXT://izwz91rhzhed2c54e6yx87z:9092"</span>],<span class="hljs-string">"jmx_port"</span>:-<span class="hljs-number">1</span>,<span class="hljs-string">"host"</span>:<span class="hljs-string">"izwz91rhzhed2c54e6yx87z"</span>,<span class="hljs-string">"timestamp"</span>:<span class="hljs-string">"1530435834272"</span>,<span class="hljs-string">"port"</span>:<span class="hljs-number">9092</span>,<span class="hljs-string">"version"</span>:<span class="hljs-number">4</span>}
cZxid = <span class="hljs-number">0x2d3</span>
ctime = Sun Jul <span class="hljs-number">01</span> <span class="hljs-number">17</span>:<span class="hljs-number">03</span>:<span class="hljs-number">54</span> CST <span class="hljs-number">2018</span>
mZxid = <span class="hljs-number">0x2d3</span>
mtime = Sun Jul <span class="hljs-number">01</span> <span class="hljs-number">17</span>:<span class="hljs-number">03</span>:<span class="hljs-number">54</span> CST <span class="hljs-number">2018</span>
pZxid = <span class="hljs-number">0x2d3</span>
cversion = <span class="hljs-number">0</span>
dataVersion = <span class="hljs-number">0</span>
aclVersion = <span class="hljs-number">0</span>
ephemeralOwner = <span class="hljs-number">0x1642cb09421006c</span>
dataLength = <span class="hljs-number">216</span>
numChildren = <span class="hljs-number">0</span></code></pre>

<ul>
<li>写在最后</li>
</ul>

<p>上面的这些kafka运维脚本，有些是指定参数–zookeeper，有些是指定参数–broker-list，有些是指定参数–bootstrap-server。 <br>
这实际上是历史问题。broker-list代表broker地址，而bootstrap-server代表连接起点，可以从中拉取broker地址信息（前面的[4. kafka生产者&amp;消费者]已经分析过）。bootstrap-server的命名更高级点。还有通过zookeeper连接的，kafka早起很多信息存方在zk中，后期慢慢弱化了zk的作用，这三个参数代表kafka的三个时代。往好的讲是见证kafka设计的理念变迁，往坏的讲：什么**玩意儿，绕的一笔（来自厮大大的解答），哈。</p>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>