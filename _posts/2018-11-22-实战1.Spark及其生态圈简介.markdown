---
layout:     post
title:      实战1.Spark及其生态圈简介
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<h3>
</h3><h1 align="justify"><span style="color:#000000;">1</span>、简介</h1>
<h2 align="justify"><a name="_Toc426403383"></a><span style="color:#000000;">1.1</span> Spark简介</h2>
<p align="justify"><span style="color:#000000;">Spark</span>是加州大学伯克利分校AMP实验室（Algorithms, Machines, and People Lab）开发通用内存并行计算框架。Spark在2013年6月进入Apache成为孵化项目，8个月后成为Apache顶级项目，速度之快足见过人之处，Spark以其先进的设计理念，迅速成为社区的热门项目，围绕着Spark推出了Spark SQL、Spark Streaming、MLLib和GraphX等组件，也就是BDAS（伯克利数据分析栈），这些组件逐渐形成大数据处理一站式解决平台。从各方面报道来看Spark抱负并非池鱼，而是希望替代Hadoop在大数据中的地位，成为大数据处理的主流标准，不过Spark还没有太多大项目的检验，离这个目标还有很大路要走。</p>
<p align="justify"><span style="color:#000000;">Spark</span>使用Scala语言进行实现，它是一种面向对象、函数式编程语言，能够像操作本地集合对象一样轻松地操作分布式数据集（Scala 提供一个称为 Actor 的并行模型，其中Actor通过它的收件箱来发送和接收非同步信息而不是共享数据，该方式被称为：Shared Nothing 模型）。在Spark官网上介绍，它具有运行速度快、易用性好、通用性强和随处运行等特点。</p>
<p align="justify"><span style="color:#000000;">l</span>运行速度快</p>
<p align="justify"><span style="color:#000000;">Spark</span>拥有DAG执行引擎，支持在内存中对数据进行迭代计算。官方提供的数据表明，如果数据由磁盘读取，速度是Hadoop MapReduce的10倍以上，如果数据从内存中读取，速度可以高达100多倍。</p>
<p align="justify"><a href="http://images0.cnblogs.com/blog/107289/201508/032218299705871.gif" rel="nofollow"><img title="clip_image002" src="http://images0.cnblogs.com/blog/107289/201508/032218305332299.gif" alt="clip_image002" width="250" height="129" border="0"></a></p>
<p align="justify"><span style="color:#000000;">l</span>易用性好</p>
<p align="justify"><span style="color:#000000;">Spark</span>不仅支持Scala编写应用程序，而且支持Java和Python等语言进行编写，特别是Scala是一种高效、可拓展的语言，能够用简洁的代码处理较为复杂的处理工作。</p>
<p align="justify"><span style="color:#000000;">l</span>通用性强</p>
<p align="justify"><span style="color:#000000;">Spark</span>生态圈即BDAS（伯克利数据分析栈）包含了Spark Core、Spark SQL、Spark Streaming、MLLib和GraphX等组件，这些组件分别处理Spark Core提供内存计算框架、SparkStreaming的实时处理应用、Spark SQL的即席查询、MLlib或MLbase的机器学习和GraphX的图处理，它们都是由AMP实验室提供，能够无缝的集成并提供一站式解决平台。</p>
<p align="justify"><a href="http://images0.cnblogs.com/blog/107289/201508/032218309397942.gif" rel="nofollow"><img title="clip_image004" src="http://images0.cnblogs.com/blog/107289/201508/032218332051583.gif" alt="clip_image004" width="311" height="146" border="0"></a></p>
<p align="justify"><span style="color:#000000;">l</span>随处运行</p>
<p align="justify"><span style="color:#000000;">Spark</span>具有很强的适应性，能够读取HDFS、Cassandra、HBase、S3和Techyon为持久层读写原生数据，能够以Mesos、YARN和自身携带的Standalone作为资源管理器调度job，来完成Spark应用程序的计算。</p>
<p align="justify"><a href="http://images0.cnblogs.com/blog/107289/201508/032218345804596.gif" rel="nofollow"><img title="clip_image006" src="http://images0.cnblogs.com/blog/107289/201508/032218361895538.gif" alt="clip_image006" width="220" height="171" border="0"></a></p>
<h2 align="justify"><a name="_Toc426403384"></a><span style="color:#000000;">1.2</span> Spark与Hadoop差异</h2>
<p align="justify"><span style="color:#000000;">Spark</span>是在借鉴了MapReduce之上发展而来的，继承了其分布式并行计算的优点并改进了MapReduce明显的缺陷，具体如下：</p>
<p align="justify"><span style="color:#000000;">首先，Spark</span>把中间数据放到内存中，迭代运算效率高。MapReduce中计算结果需要落地，保存到磁盘上，这样势必会影响整体速度，而Spark支持DAG图的分布式并行计算的编程框架，减少了迭代过程中数据的落地，提高了处理效率。</p>
<p align="justify"><span style="color:#000000;">其次，Spark</span>容错性高。Spark引进了弹性分布式数据集RDD (Resilient Distributed Dataset) 的抽象，它是分布在一组节点中的只读对象集合，这些集合是弹性的，如果数据集一部分丢失，则可以根据“血统”（即充许基于数据衍生过程）对它们进行重建。另外在RDD计算时可以通过CheckPoint来实现容错，而CheckPoint有两种方式：CheckPoint Data，和Logging
 The Updates，用户可以控制采用哪种方式来实现容错。</p>
<p align="justify"><span style="color:#000000;">最后，Spark</span>更加通用。不像Hadoop只提供了Map和Reduce两种操作，Spark提供的数据集操作类型有很多种，大致分为：Transformations和Actions两大类。Transformations包括Map、Filter、FlatMap、Sample、GroupByKey、ReduceByKey、Union、Join、Cogroup、MapValues、Sort和PartionBy等多种操作类型，同时还提供Count,
 Actions包括Collect、Reduce、Lookup和Save等操作。另外各个处理节点之间的通信模型不再像Hadoop只有Shuffle一种模式，用户可以命名、物化，控制中间结果的存储、分区等。</p>
<h2 align="justify"><a name="_Toc426403385"></a><span style="color:#000000;">1.3</span> Spark的适用场景</h2>
<p align="justify"><span style="color:#000000;">目前大数据处理场景有以下几个类型：</span></p>
<p align="justify"><span style="color:#000000;">1.</span>  复杂的批量处理（Batch Data Processing），偏重点在于处理海量数据的能力，至于处理速度可忍受，通常的时间可能是在数十分钟到数小时；</p>
<p align="justify"><span style="color:#000000;">2.</span>  基于历史数据的交互式查询（Interactive Query），通常的时间在数十秒到数十分钟之间</p>
<p align="justify"><span style="color:#000000;">3.</span>  基于实时数据流的数据处理（Streaming Data Processing），通常在数百毫秒到数秒之间</p>
<p align="justify"><span style="color:#000000;">目前对以上三种场景需求都有比较成熟的处理框架，第一种情况可以用Hadoop</span>的MapReduce来进行批量海量数据处理，第二种情况可以Impala进行交互式查询，对于第三中情况可以用Storm分布式处理框架处理实时流式数据。以上三者都是比较独立，各自一套维护成本比较高，而Spark的出现能够一站式平台满意以上需求。</p>
<p align="justify"><span style="color:#000000;">通过以上分析，总结Spark</span>场景有以下几个：</p>
<p align="justify"><span style="color:#000000;">l</span>Spark是基于内存的迭代计算框架，适用于需要多次操作特定数据集的应用场合。需要反复操作的次数越多，所需读取的数据量越大，受益越大，数据量小但是计算密集度较大的场合，受益就相对较小</p>
<p align="justify"><span style="color:#000000;">l</span>由于RDD的特性，Spark不适用那种异步细粒度更新状态的应用，例如web服务的存储或者是增量的web爬虫和索引。就是对于那种增量修改的应用模型不适合</p>
<p align="justify"><span style="color:#000000;">l</span>数据量不是特别大，但是要求实时统计分析需求</p>
<h2 align="justify"><a name="_Toc426403386"></a><span style="color:#000000;">1.4</span> Spark演进时间表</h2>
<p align="justify"><span style="color:#000000;">演进时间表：</span></p>
<p align="justify"><span style="color:#000000;">l</span>   2009年由Berkeley's AMPLab开始编写最初的源代码</p>
<p align="justify"><span style="color:#000000;">l</span>   2010年开放源代码</p>
<p align="justify"><span style="color:#000000;">l</span>   2013年6月进入Apache孵化器项目</p>
<p align="justify"><span style="color:#000000;">l</span>   2014年2月成为Apache的顶级项目（8个月时间）</p>
<p align="justify"><span style="color:#000000;">l</span>   2014年5月底Spark1.0.0发布</p>
<p align="justify"><span style="color:#000000;">l</span>   2014年9月Spark1.1.0发布</p>
<p align="justify"><span style="color:#000000;">l</span>   2014年12月Spark1.2.0发布</p>
<p align="justify"><span style="color:#000000;">目前情况：</span></p>
<p align="justify"><span style="color:#000000;">l</span>   目前已经有30+公司100+开发者在提交代码</p>
<p align="justify"><span style="color:#000000;">l</span>   Hadoop最大的厂商Cloudera宣称加大Spark框架的投入来取代Mapreduce</p>
<p align="justify"><span style="color:#000000;">l</span>   Hortonworks</p>
<p align="justify"><span style="color:#000000;">l</span>   Hadoop厂商MapR投入Spark阵营</p>
<p align="justify"><span style="color:#000000;">l</span>   Apache Mahout放弃MapReduce，将使用Spark作为后续算子的计算平台</p>
<p align="justify"><span style="color:#000000;"> </span></p>
<h2 align="justify"><a name="_Toc426403387"></a><span style="color:#000000;">1.5</span> Spark成功案例</h2>
<p align="justify"><span style="color:#000000;">目前大数据在互联网公司主要应用在广告、报表、推荐系统等业务上。在广告业务方面需要大数据做应用分析、效果分析、定向优化等，在推荐系统方面则需要大数据优化相关排名、个性化推荐以及热点点击分析等。这些应用场景的普遍特点是计算量大、效率要求高。Spark</span>恰恰满足了这些要求，该项目一经推出便受到开源社区的广泛关注和好评。并在近两年内发展成为大数据处理领域最炙手可热的开源项目。</p>
<p align="justify"><span style="color:#000000;">本章将列举国内外应用Spark</span>的成功案例。</p>
<p align="justify"><span style="color:#000000;">1. </span>腾讯</p>
<p align="justify"><span style="color:#000000;">广点通是最早使用Spark</span>的应用之一。腾讯大数据精准推荐借助Spark快速迭代的优势，围绕“数据+算法+系统”这套技术方案，实现了在“数据实时采集、算法实时训练、系统实时预测”的全流程实时并行高维算法，最终成功应用于广点通pCTR投放系统上，支持每天上百亿的请求量。</p>
<p align="justify"><span style="color:#000000;">基于日志数据的快速查询系统业务构建于Spark</span>之上的Shark，利用其快速查询以及内存表等优势，承担了日志数据的即席查询工作。在性能方面，普遍比Hive高2-10倍，如果使用内存表的功能，性能将会比Hive快百倍。</p>
<p align="justify"><span style="color:#000000;">2. Yahoo</span></p>
<p align="justify"><span style="color:#000000;">Yahoo</span>将Spark用在Audience Expansion中的应用。Audience Expansion是广告中寻找目标用户的一种方法：首先广告者提供一些观看了广告并且购买产品的样本客户，据此进行学习，寻找更多可能转化的用户，对他们定向广告。Yahoo采用的算法是logistic regression。同时由于有些SQL负载需要更高的服务质量，又加入了专门跑Shark的大内存集群，用于取代商业BI/OLAP工具，承担报表/仪表盘和交互式/即席查询，同时与桌面BI工具对接。目前在Yahoo部署的Spark集群有112台节点，9.2TB内存。</p>
<p align="justify"><span style="color:#000000;">3. </span>淘宝</p>
<p align="justify"><span style="color:#000000;">阿里搜索和广告业务，最初使用Mahout</span>或者自己写的MR来解决复杂的机器学习，导致效率低而且代码不易维护。淘宝技术团队使用了Spark来解决多次迭代的机器学习算法、高计算复杂度的算法等。将Spark运用于淘宝的推荐相关算法上,同时还利用Graphx解决了许多生产问题，包括以下计算场景：基于度分布的中枢节点发现、基于最大连通图的社区发现、基于三角形计数的关系衡量、基于随机游走的用户属性传播等。</p>
<p align="justify"><span style="color:#000000;">4. </span>优酷土豆</p>
<p align="justify"><span style="color:#000000;">优酷土豆在使用Hadoop</span>集群的突出问题主要包括：第一是商业智能BI方面，分析师提交任务之后需要等待很久才得到结果；第二就是大数据量计算，比如进行一些模拟广告投放之时，计算量非常大的同时对效率要求也比较高，最后就是机器学习和图计算的迭代运算也是需要耗费大量资源且速度很慢。</p>
<p align="justify"><span style="color:#000000;">最终发现这些应用场景并不适合在MapReduce</span>里面去处理。通过对比，发现Spark性能比MapReduce提升很多。首先，交互查询响应快，性能比Hadoop提高若干倍；模拟广告投放计算效率高、延迟小（同hadoop比延迟至少降低一个数量级）；机器学习、图计算等迭代计算，大大减少了网络传输、数据落地等，极大的提高的计算性能。目前Spark已经广泛使用在优酷土豆的视频推荐（图计算）、广告业务等。</p>
<h2 align="justify"><a name="_Toc426403388"></a><span style="color:#000000;">1.6</span> Spark术语</h2>
<h3 align="justify"><a name="_Toc426403389"></a><span style="color:#000000;">1.6.1 </span>Spark运行模式</h3>
<table cellspacing="0" cellpadding="0" border="1"><tbody><tr><td style="background:#d9d9d9;">
<p align="center"><strong><span style="color:#000000;">运行环境</span></strong></p>
</td>
<td style="background:#d9d9d9;">
<p align="center"><strong><span style="color:#000000;">模式</span></strong></p>
</td>
<td style="background:#d9d9d9;">
<p align="center"><strong><span style="color:#000000;">描述</span></strong></p>
</td>
</tr><tr><td>
<p><strong><span style="color:#000000;">Local</span></strong></p>
</td>
<td>
<p align="center"><strong><span style="color:#000000;">本地模式</span></strong></p>
</td>
<td valign="top">
<p><strong><span style="color:#000000;">常用于本地开发测试，本地还分为local</span>单线程和local-cluster多线程;
</strong></p>
</td>
</tr><tr><td>
<p><strong><span style="color:#000000;">Standalone</span></strong></p>
</td>
<td>
<p align="center"><strong><span style="color:#000000;">集群模式</span></strong></p>
</td>
<td valign="top">
<p><strong><span style="color:#000000;">典型的Mater/slave</span>模式，不过也能看出Master是有单点故障的；Spark支持 ZooKeeper来实现HA
</strong></p>
</td>
</tr><tr><td>
<p><strong><span style="color:#000000;">On yarn</span></strong></p>
</td>
<td>
<p align="center"><strong><span style="color:#000000;">集群模式</span></strong></p>
</td>
<td valign="top">
<p><strong><span style="color:#000000;">运行在yarn</span>资源管理器框架之上，由yarn负责资源管理，Spark负责任务调度和计算</strong></p>
</td>
</tr><tr><td>
<p><strong><span style="color:#000000;">On mesos</span></strong></p>
</td>
<td>
<p align="center"><strong><span style="color:#000000;">集群模式</span></strong></p>
</td>
<td valign="top">
<p><strong><span style="color:#000000;">运行在mesos</span>资源管理器框架之上，由mesos负责资源管理，Spark负责任务调度和计算</strong></p>
</td>
</tr><tr><td>
<p><strong><span style="color:#000000;">On cloud</span></strong></p>
</td>
<td>
<p align="center"><strong><span style="color:#000000;">集群模式</span></strong></p>
</td>
<td valign="top">
<p><strong><span style="color:#000000;">比如AWS</span>的EC2，使用这个模式能很方便的访问Amazon的S3; </strong>
</p>
<p><strong><span style="color:#000000;">Spark</span>支持多种分布式存储系统：HDFS和S3 </strong></p>
</td>
</tr></tbody></table><h3 align="justify"><a name="_Toc426403390"></a><span style="color:#000000;">1.6.2 </span>Spark常用术语</h3>
<table cellspacing="0" cellpadding="0" border="1"><tbody><tr><td style="background:#d9d9d9;">
<p align="center"><strong><span style="color:#000000;">术语</span></strong></p>
</td>
<td style="background:#d9d9d9;">
<p align="center"><strong><span style="color:#000000;">描述</span></strong></p>
</td>
</tr><tr><td valign="top">
<p><strong><span style="color:#000000;">Application </span></strong></p>
</td>
<td valign="top">
<p><strong><span style="color:#000000;">Spark</span>的应用程序，包含一个Driver program和若干Executor
</strong></p>
</td>
</tr><tr><td valign="top">
<p><strong><span style="color:#000000;">SparkContext </span></strong></p>
</td>
<td valign="top">
<p><strong><span style="color:#000000;">Spark</span>应用程序的入口，负责调度各个运算资源，协调各个Worker Node上的Executor
</strong></p>
</td>
</tr><tr><td valign="top">
<p><strong><span style="color:#000000;">Driver Program </span></strong></p>
</td>
<td valign="top">
<p><strong><span style="color:#000000;">运行Application</span>的main()函数并且创建SparkContext
</strong></p>
</td>
</tr><tr><td valign="top">
<p><strong><span style="color:#000000;">Executor </span></strong></p>
</td>
<td valign="top">
<p><strong><span style="color:#000000;">是为Application</span>运行在Worker node上的一个进程，该进程负责运行Task，并且负责将数据存在内存或者磁盘上。</strong></p>
<p><strong><span style="color:#000000;">每个Application</span>都会申请各自的Executor来处理任务</strong></p>
</td>
</tr><tr><td valign="top">
<p><strong><span style="color:#000000;">Cluster Manager </span></strong></p>
</td>
<td valign="top">
<p><strong><span style="color:#000000;">在集群上获取资源的外部服务</span></strong></p>
<p><strong><span style="color:#000000;">(</span>例如：Standalone、Mesos、Yarn) </strong>
</p>
</td>
</tr><tr><td valign="top">
<p><strong><span style="color:#000000;">Worker Node </span></strong></p>
</td>
<td valign="top">
<p><strong><span style="color:#000000;">集群中任何可以运行Application</span>代码的节点，运行一个或多个Executor进程</strong></p>
</td>
</tr><tr><td valign="top">
<p><strong><span style="color:#000000;">Task </span></strong></p>
</td>
<td valign="top">
<p><strong><span style="color:#000000;">运行在Executor</span>上的工作单元</strong></p>
</td>
</tr><tr><td valign="top">
<p><strong><span style="color:#000000;">Job </span></strong></p>
</td>
<td valign="top">
<p><strong><span style="color:#000000;">SparkContext</span>提交的具体Action操作，常和Action对应</strong></p>
</td>
</tr><tr><td valign="top">
<p><strong><span style="color:#000000;">Stage </span></strong></p>
</td>
<td valign="top">
<p><strong><span style="color:#000000;">每个Job</span>会被拆分很多组task，每组任务被称为Stage，也称TaskSet
</strong></p>
</td>
</tr><tr><td valign="top">
<p><strong><span style="color:#000000;">RDD </span></strong></p>
</td>
<td valign="top">
<p><strong><span style="color:#000000;">是Resilient distributed datasets</span>的简称，中文为弹性分布式数据集;是Spark最核心的模块和类</strong></p>
</td>
</tr><tr><td valign="top">
<p><strong><span style="color:#000000;">DAGScheduler </span></strong></p>
</td>
<td valign="top">
<p><strong><span style="color:#000000;">根据Job</span>构建基于Stage的DAG，并提交Stage给TaskScheduler
</strong></p>
</td>
</tr><tr><td valign="top">
<p><strong><span style="color:#000000;">TaskScheduler </span></strong></p>
</td>
<td valign="top">
<p><strong><span style="color:#000000;">将Taskset</span>提交给Worker node集群运行并返回结果</strong></p>
</td>
</tr><tr><td valign="top">
<p><strong><span style="color:#000000;">Transformations </span></strong></p>
</td>
<td valign="top">
<p><strong><span style="color:#000000;">是Spark API</span>的一种类型，Transformation返回值还是一个RDD，</strong></p>
<p><strong><span style="color:#000000;">所有的Transformation</span>采用的都是懒策略，如果只是将Transformation提交是不会执行计算的</strong></p>
</td>
</tr><tr><td valign="top">
<p><strong><span style="color:#000000;">Action </span></strong></p>
</td>
<td valign="top">
<p><strong><span style="color:#000000;">是Spark API</span>的一种类型，Action返回值不是一个RDD，而是一个scala集合；计算只有在Action被提交的时候计算才被触发。</strong></p>
</td>
</tr></tbody></table><h1 align="justify"><a name="_Toc426403391"></a><span style="color:#000000;">2</span>、生态系统</h1>
<p align="justify"><span style="color:#000000;">Spark</span>生态圈也称为BDAS（伯克利数据分析栈），是伯克利APMLab实验室打造的，力图在算法（Algorithms）、机器（Machines）、人（People）之间通过大规模集成来展现大数据应用的一个平台。伯克利AMPLab运用大数据、云计算、通信等各种资源以及各种灵活的技术方案，对海量不透明的数据进行甄别并转化为有用的信息，以供人们更好的理解世界。该生态圈已经涉及到机器学习、数据挖掘、数据库、信息检索、自然语言处理和语音识别等多个领域。</p>
<p align="justify"><span style="color:#000000;">Spark</span>生态圈以Spark Core为核心，从HDFS、Amazon S3和HBase等持久层读取数据，以MESS、YARN和自身携带的Standalone为资源管理器调度Job完成Spark应用程序的计算。 这些应用程序可以来自于不同的组件，如Spark Shell/Spark Submit的批处理、Spark Streaming的实时处理应用、Spark SQL的即席查询、BlinkDB的权衡查询、MLlib/MLbase的机器学习、GraphX的图处理和SparkR的数学计算等等。</p>
<p align="justify"><a href="http://images0.cnblogs.com/blog/107289/201508/032218378456765.jpg" rel="nofollow"><img title="clip_image008" src="http://images0.cnblogs.com/blog/107289/201508/032218387207864.jpg" alt="clip_image008" width="445" height="297" border="0"></a></p>
<h2 align="justify"><a name="_Toc426403392"></a><span style="color:#000000;">2.1</span> Spark Core</h2>
<p align="justify"><span style="color:#000000;">前面介绍了Spark Core</span>的基本情况，以下总结一下Spark内核架构：</p>
<p align="justify"><span style="color:#000000;">l</span>  提供了有向无环图（DAG）的分布式并行计算框架，并提供Cache机制来支持多次迭代计算或者数据共享，大大减少迭代计算之间读取数据局的开销，这对于需要进行多次迭代的数据挖掘和分析性能有很大提升</p>
<p align="justify"><span style="color:#000000;">l</span>  在Spark中引入了RDD (Resilient Distributed Dataset) 的抽象，它是分布在一组节点中的只读对象集合，这些集合是弹性的，如果数据集一部分丢失，则可以根据“血统”对它们进行重建，保证了数据的高容错性；</p>
<p align="justify"><span style="color:#000000;">l</span>  移动计算而非移动数据，RDD Partition可以就近读取分布式文件系统中的数据块到各个节点内存中进行计算</p>
<p align="justify"><span style="color:#000000;">l</span>  使用多线程池模型来减少task启动开稍</p>
<p align="justify"><span style="color:#000000;">l</span>  采用容错的、高可伸缩性的akka作为通讯框架</p>
<h2 align="justify"><a name="_Toc426403393"></a><span style="color:#000000;">2.2</span> SparkStreaming</h2>
<p align="justify"><span style="color:#000000;">SparkStreaming</span>是一个对实时数据流进行高通量、容错处理的流式处理系统，可以对多种数据源（如Kdfka、Flume、Twitter、Zero和TCP 套接字）进行类似Map、Reduce和Join等复杂操作，并将结果保存到外部文件系统、数据库或应用到实时仪表盘。</p>
<p align="justify"><span style="color:#000000;">Spark Streaming</span>构架</p>
<p align="justify"><span style="color:#000000;">l</span>计算流程：Spark Streaming是将流式计算分解成一系列短小的批处理作业。这里的批处理引擎是Spark Core，也就是把Spark Streaming的输入数据按照batch size（如1秒）分成一段一段的数据（Discretized Stream），每一段数据都转换成Spark中的RDD（Resilient Distributed Dataset），然后将Spark Streaming中对DStream的Transformation操作变为针对Spark中对RDD的Transformation操作，将RDD经过操作变成中间结果保存在内存中。整个流式计算根据业务的需求可以对中间的结果进行叠加或者存储到外部设备。下图显示了Spark
 Streaming的整个流程。</p>
<p align="justify"><a href="http://images0.cnblogs.com/blog/107289/201508/032218395172222.jpg" rel="nofollow"><img title="clip_image010" src="http://images0.cnblogs.com/blog/107289/201508/032218403457335.jpg" alt="clip_image010" width="373" height="293" border="0"></a></p>
<p align="justify"><span style="color:#333333;">图Spark Streaming</span>构架</p>
<p align="justify"><span style="color:#000000;">l</span>容错性：对于流式计算来说，容错性至关重要。首先我们要明确一下Spark中RDD的容错机制。每一个RDD都是一个不可变的分布式可重算的数据集，其记录着确定性的操作继承关系（lineage），所以只要输入数据是可容错的，那么任意一个RDD的分区（Partition）出错或不可用，都是可以利用原始输入数据通过转换操作而重新算出的。  
</p>
<p align="justify"><span style="color:#000000;">对于Spark Streaming</span>来说，其RDD的传承关系如下图所示，图中的每一个椭圆形表示一个RDD，椭圆形中的每个圆形代表一个RDD中的一个Partition，图中的每一列的多个RDD表示一个DStream（图中有三个DStream），而每一行最后一个RDD则表示每一个Batch Size所产生的中间结果RDD。我们可以看到图中的每一个RDD都是通过lineage相连接的，由于Spark Streaming输入数据可以来自于磁盘，例如HDFS（多份拷贝）或是来自于网络的数据流（Spark
 Streaming会将网络输入数据的每一个数据流拷贝两份到其他的机器）都能保证容错性，所以RDD中任意的Partition出错，都可以并行地在其他机器上将缺失的Partition计算出来。这个容错恢复方式比连续计算模型（如Storm）的效率更高。</p>
<p align="justify"><a href="http://images0.cnblogs.com/blog/107289/201508/032218410489719.jpg" rel="nofollow"><img title="clip_image012" src="http://images0.cnblogs.com/blog/107289/201508/032218431895333.jpg" alt="clip_image012" width="388" height="235" border="0"></a></p>
<p align="justify"><span style="color:#000000;">Spark Streaming</span>中RDD的lineage关系图</p>
<p align="justify"><span style="color:#000000;">l</span>实时性：对于实时性的讨论，会牵涉到流式处理框架的应用场景。Spark Streaming将流式计算分解成多个Spark Job，对于每一段数据的处理都会经过Spark DAG图分解以及Spark的任务集的调度过程。对于目前版本的Spark Streaming而言，其最小的Batch Size的选取在0.5~2秒钟之间（Storm目前最小的延迟是100ms左右），所以Spark Streaming能够满足除对实时性要求非常高（如高频实时交易）之外的所有流式准实时计算场景。</p>
<p align="justify"><span style="color:#000000;">l</span>扩展性与吞吐量：Spark目前在EC2上已能够线性扩展到100个节点（每个节点4Core），可以以数秒的延迟处理6GB/s的数据量（60M records/s），其吞吐量也比流行的Storm高2～5倍，图4是Berkeley利用WordCount和Grep两个用例所做的测试，在Grep这个测试中，Spark Streaming中的每个节点的吞吐量是670k records/s，而Storm是115k
 records/s。</p>
<p align="justify"><a href="http://cms.csdnimg.cn/article/201401/27/52e5fc3d07287.jpg" rel="nofollow"><img title="clip_image014" src="http://images0.cnblogs.com/blog/107289/201508/032218455013959.jpg" alt="clip_image014" width="489" height="214" border="0"></a></p>
<p align="justify"><span style="color:#000000;">Spark Streaming</span>与Storm吞吐量比较图</p>
<h2 align="justify"><a name="_Toc426403394"></a><span style="color:#000000;">2.3</span> Spark SQL</h2>
<p align="justify"><span style="color:#000000;">Shark</span>是SparkSQL的前身，它发布于3年前，那个时候Hive可以说是SQL on Hadoop的唯一选择，负责将SQL编译成可扩展的MapReduce作业，鉴于Hive的性能以及与Spark的兼容，Shark项目由此而生。</p>
<p align="justify"><span style="color:#000000;">Shark</span>即Hive on Spark，本质上是通过Hive的HQL解析，把HQL翻译成Spark上的RDD操作，然后通过Hive的metadata获取数据库里的表信息，实际HDFS上的数据和文件，会由Shark获取并放到Spark上运算。Shark的最大特性就是快和与Hive的完全兼容，且可以在shell模式下使用rdd2sql()这样的API，把HQL得到的结果集，继续在scala环境下运算，支持自己编写简单的机器学习或简单分析处理函数，对HQL结果进一步分析计算。</p>
<p align="justify"><span style="color:#000000;">在2014</span>年7月1日的Spark Summit上，Databricks宣布终止对Shark的开发，将重点放到Spark SQL上。Databricks表示，Spark SQL将涵盖Shark的所有特性，用户可以从Shark 0.9进行无缝的升级。在会议上，Databricks表示，Shark更多是对Hive的改造，替换了Hive的物理执行引擎，因此会有一个很快的速度。然而，不容忽视的是，Shark继承了大量的Hive代码，因此给优化和维护带来了大量的麻烦。随着性能优化和先进分析整合的进一步加深，基于MapReduce设计的部分无疑成为了整个项目的瓶颈。因此，为了更好的发展，给用户提供一个更好的体验，Databricks宣布终止Shark项目，从而将更多的精力放到Spark
 SQL上。</p>
<p align="justify"><span style="color:#000000;">Spark SQL</span>允许开发人员直接处理RDD，同时也可查询例如在 Apache Hive上存在的外部数据。Spark SQL的一个重要特点是其能够统一处理关系表和RDD，使得开发人员可以轻松地使用SQL命令进行外部查询，同时进行更复杂的数据分析。除了Spark SQL外，Michael还谈到Catalyst优化框架，它允许Spark SQL自动修改查询方案，使SQL更有效地执行。</p>
<p align="justify"><span style="color:#000000;">还有Shark</span>的作者是来自中国的博士生辛湜（Reynold Xin），也是Spark的核心成员，具体信息可以看他的专访 http://www.csdn.net/article/2013-04-26/2815057-Spark-Reynold</p>
<p align="justify"><span style="color:#000000;">Spark SQL</span>的特点:</p>
<p align="justify"><span style="color:#000000;">l</span>引入了新的RDD类型SchemaRDD，可以象传统数据库定义表一样来定义SchemaRDD，SchemaRDD由定义了列数据类型的行对象构成。SchemaRDD可以从RDD转换过来，也可以从Parquet文件读入，也可以使用HiveQL从Hive中获取。</p>
<p align="justify"><span style="color:#000000;">l</span>内嵌了Catalyst查询优化框架，在把SQL解析成逻辑执行计划之后，利用Catalyst包里的一些类和接口，执行了一些简单的执行计划优化，最后变成RDD的计算</p>
<p align="justify"><span style="color:#000000;">l</span>在应用程序中可以混合使用不同来源的数据，如可以将来自HiveQL的数据和来自SQL的数据进行Join操作。</p>
<p align="justify"><a href="http://images0.cnblogs.com/blog/107289/201508/032218485482429.jpg" rel="nofollow"><img title="clip_image016" src="http://images0.cnblogs.com/blog/107289/201508/032218497838484.jpg" alt="clip_image016" width="663" height="223" border="0"></a></p>
<p align="justify"><span style="color:#000000;">Shark</span>的出现使得SQL-on-Hadoop的性能比Hive有了10-100倍的提高，  那么，摆脱了Hive的限制，SparkSQL的性能又有怎么样的表现呢？虽然没有Shark相对于Hive那样瞩目地性能提升，但也表现得非常优异，如下图所示：</p>
<p align="justify"><a href="http://images0.cnblogs.com/blog/107289/201508/032218503762370.gif" rel="nofollow"><img title="clip_image018" src="http://images0.cnblogs.com/blog/107289/201508/032218510338768.gif" alt="clip_image018" width="475" height="233" border="0"></a></p>
<p align="justify"><span style="color:#000000;">为什么sparkSQL</span>的性能会得到怎么大的提升呢？主要sparkSQL在下面几点做了优化：</p>
<p align="justify"><span style="color:#000000;">1.</span> 内存列存储（In-Memory Columnar Storage） sparkSQL的表数据在内存中存储不是采用原生态的JVM对象存储方式，而是采用内存列存储；</p>
<p align="justify"><span style="color:#000000;">2.</span> 字节码生成技术（Bytecode Generation） Spark1.1.0在Catalyst模块的expressions增加了codegen模块，使用动态字节码生成技术，对匹配的表达式采用特定的代码动态编译。另外对SQL表达式都作了CG优化， CG优化的实现主要还是依靠Scala2.10的运行时放射机制（runtime reflection）；</p>
<p align="justify"><span style="color:#000000;">3.</span> Scala代码优化 SparkSQL在使用Scala编写代码的时候，尽量避免低效的、容易GC的代码；尽管增加了编写代码的难度，但对于用户来说接口统一。</p>
<h2 align="justify"><a name="_Toc426403395"></a><span style="color:#000000;">2.4</span> BlinkDB</h2>
<p align="justify"><span style="color:#000000;">BlinkDB </span>是一个用于在海量数据上运行交互式 SQL 查询的大规模并行查询引擎，它允许用户通过权衡数据精度来提升查询响应时间，其数据的精度被控制在允许的误差范围内。为了达到这个目标，BlinkDB 使用两个核心思想:</p>
<p align="justify"><span style="color:#000000;">l</span>一个自适应优化框架，从原始数据随着时间的推移建立并维护一组多维样本；</p>
<p align="justify"><span style="color:#000000;">l</span>一个动态样本选择策略，选择一个适当大小的示例基于查询的准确性和（或）响应时间需求。</p>
<p align="justify"><span style="color:#000000;">和传统关系型数据库不同，BlinkDB</span>是一个很有意思的交互式查询系统，就像一个跷跷板，用户需要在查询精度和查询时间上做一权衡；如果用户想更快地获取查询结果，那么将牺牲查询结果的精度；同样的，用户如果想获取更高精度的查询结果，就需要牺牲查询响应时间。用户可以在查询的时候定义一个失误边界。</p>
<p align="justify"><a href="http://images0.cnblogs.com/blog/107289/201508/032218520808582.jpg" rel="nofollow"><img title="clip_image020" src="http://images0.cnblogs.com/blog/107289/201508/032218529703911.jpg" alt="clip_image020" width="437" height="267" border="0"></a></p>
<h2 align="justify"><a name="_Toc426403396"></a><span style="color:#000000;">2.5</span>  MLBase/MLlib</h2>
<p align="justify"><span style="color:#000000;">MLBase</span>是Spark生态圈的一部分专注于机器学习，让机器学习的门槛更低，让一些可能并不了解机器学习的用户也能方便地使用MLbase。MLBase分为四部分：MLlib、MLI、ML Optimizer和MLRuntime。</p>
<p align="justify"><span style="color:#000000;">l</span>  ML Optimizer会选择它认为最适合的已经在内部实现好了的机器学习算法和相关参数，来处理用户输入的数据，并返回模型或别的帮助分析的结果；</p>
<p align="justify"><span style="color:#000000;">l</span>  MLI 是一个进行特征抽取和高级ML编程抽象的算法实现的API或平台；</p>
<p align="justify"><span style="color:#000000;">l</span> MLlib是Spark实现一些常见的机器学习算法和实用程序，包括分类、回归、聚类、协同过滤、降维以及底层优化，该算法可以进行可扩充； MLRuntime 基于Spark计算框架，将Spark的分布式计算应用到机器学习领域。</p>
<p align="justify"><a href="http://images0.cnblogs.com/blog/107289/201508/032218536583067.gif" rel="nofollow"><img title="clip_image022" src="http://images0.cnblogs.com/blog/107289/201508/032218561736866.gif" alt="clip_image022" width="411" height="208" border="0"></a></p>
<p align="justify"><span style="color:#000000;">总的来说，MLBase</span>的核心是他的优化器，把声明式的Task转化成复杂的学习计划，产出最优的模型和计算结果。与其他机器学习Weka和Mahout不同的是：</p>
<p align="justify"><span style="color:#000000;">l</span>  MLBase是分布式的，Weka是一个单机的系统；</p>
<p align="justify"><span style="color:#000000;">l</span>  MLBase是自动化的，Weka和Mahout都需要使用者具备机器学习技能，来选择自己想要的算法和参数来做处理；</p>
<p align="justify"><span style="color:#000000;">l</span>  MLBase提供了不同抽象程度的接口，让算法可以扩充</p>
<p align="justify"><span style="color:#000000;">l</span>  MLBase基于Spark这个平台</p>
<h2 align="justify"><a name="_Toc426403397"></a><span style="color:#000000;">2.6</span> GraphX</h2>
<p align="justify"><span style="color:#000000;">GraphX</span>是Spark中用于图(e.g., Web-Graphs and Social Networks)和图并行计算(e.g., PageRank and Collaborative Filtering)的API,可以认为是GraphLab(C++)和Pregel(C++)在Spark(Scala)上的重写及优化，跟其他分布式图计算框架相比，GraphX最大的贡献是，在Spark之上提供一栈式数据解决方案，可以方便且高效地完成图计算的一整套流水作业。GraphX最先是伯克利AMPLAB的一个分布式图计算框架项目，后来整合到Spark中成为一个核心组件。</p>
<p align="justify"><span style="color:#000000;">GraphX</span>的核心抽象是Resilient Distributed Property Graph，一种点和边都带属性的有向多重图。它扩展了Spark RDD的抽象，有Table和Graph两种视图，而只需要一份物理存储。两种视图都有自己独有的操作符，从而获得了灵活操作和执行效率。如同Spark，GraphX的代码非常简洁。GraphX的核心代码只有3千多行，而在此之上实现的Pregel模型，只要短短的20多行。GraphX的代码结构整体下图所示，其中大部分的实现，都是围绕Partition的优化进行的。这在某种程度上说明了点分割的存储和相应的计算优化的确是图计算框架的重点和难点。</p>
<p align="justify"><a href="http://images0.cnblogs.com/blog/107289/201508/032218585484707.gif" rel="nofollow"><img title="clip_image024" src="http://images0.cnblogs.com/blog/107289/201508/032219013456719.gif" alt="clip_image024" width="659" height="341" border="0"></a></p>
<p align="justify"><span style="color:#000000;">GraphX</span>的底层设计有以下几个关键点。</p>
<p align="justify"><span style="color:#000000;">1.</span>对Graph视图的所有操作，最终都会转换成其关联的Table视图的RDD操作来完成。这样对一个图的计算，最终在逻辑上，等价于一系列RDD的转换过程。因此，Graph最终具备了RDD的3个关键特性：Immutable、Distributed和Fault-Tolerant。其中最关键的是Immutable（不变性）。逻辑上，所有图的转换和操作都产生了一个新图；物理上，GraphX会有一定程度的不变顶点和边的复用优化，对用户透明。</p>
<p align="justify"><span style="color:#000000;">2.</span>两种视图底层共用的物理数据，由RDD[Vertex-Partition]和RDD[EdgePartition]这两个RDD组成。点和边实际都不是以表Collection[tuple]的形式存储的，而是由VertexPartition/EdgePartition在内部存储一个带索引结构的分片数据块，以加速不同视图下的遍历速度。不变的索引结构在RDD转换过程中是共用的，降低了计算和存储开销。</p>
<p align="justify"><span style="color:#000000;">3.</span>图的分布式存储采用点分割模式，而且使用partitionBy方法，由用户指定不同的划分策略（PartitionStrategy）。划分策略会将边分配到各个EdgePartition，顶点Master分配到各个VertexPartition，EdgePartition也会缓存本地边关联点的Ghost副本。划分策略的不同会影响到所需要缓存的Ghost副本数量，以及每个EdgePartition分配的边的均衡程度，需要根据图的结构特征选取最佳策略。目前有EdgePartition2d、EdgePartition1d、RandomVertexCut和CanonicalRandomVertexCut这四种策略。在淘宝大部分场景下，EdgePartition2d效果最好。</p>
<h2 align="justify"><a name="_Toc426403398"></a><span style="color:#000000;">2.7</span> SparkR</h2>
<p align="justify"><span style="color:#000000;">SparkR</span>是AMPLab发布的一个R开发包，使得R摆脱单机运行的命运，可以作为Spark的job运行在集群上，极大得扩展了R的数据处理能力。</p>
<p align="justify"><span style="color:#000000;">SparkR</span>的几个特性：</p>
<p align="justify"><span style="color:#000000;">l</span>  提供了Spark中弹性分布式数据集（RDD）的API，用户可以在集群上通过R shell交互性的运行Spark job。</p>
<p align="justify"><span style="color:#000000;">l</span>  支持序化闭包功能，可以将用户定义函数中所引用到的变量自动序化发送到集群中其他的机器上。</p>
<p align="justify"><span style="color:#000000;">l</span>  SparkR还可以很容易地调用R开发包，只需要在集群上执行操作前用includePackage读取R开发包就可以了，当然集群上要安装R开发包。</p>
<p align="justify"><a href="http://images0.cnblogs.com/blog/107289/201508/032219059708673.jpg" rel="nofollow"><img title="clip_image026" src="http://images0.cnblogs.com/blog/107289/201508/032219096581313.jpg" alt="clip_image026" width="586" height="386" border="0"></a></p>
<h2 align="justify"><a name="_Toc426403399"></a><span style="color:#000000;">2.8</span>  Tachyon</h2>
<p align="justify"><span style="color:#000000;">Tachyon</span>是一个高容错的分布式文件系统，允许文件以内存的速度在集群框架中进行可靠的共享，就像Spark和 MapReduce那样。通过利用信息继承，内存侵入，Tachyon获得了高性能。Tachyon工作集文件缓存在内存中，并且让不同的 Jobs/Queries以及框架都能内存的速度来访问缓存文件”。因此，Tachyon可以减少那些需要经常使用的数据集通过访问磁盘来获得的次数。Tachyon兼容Hadoop，现有的Spark和MR程序不需要任何修改而运行。</p>
<p align="justify"><span style="color:#000000;">在2013</span>年4月，AMPLab共享了其Tachyon 0.2.0 Alpha版本的Tachyon，其宣称性能为HDFS的300倍，继而受到了极大的关注。Tachyon的几个特性如下：</p>
<p align="justify"><span style="color:#000000;">l</span>JAVA-Like File API</p>
<p align="justify"><span style="color:#000000;">Tachyon</span>提供类似JAVA File类的API,</p>
<p align="justify"><span style="color:#000000;">l</span>兼容性</p>
<p align="justify"><span style="color:#000000;">Tachyon</span>实现了HDFS接口，所以Spark和MR程序不需要任何修改即可运行。</p>
<p align="justify"><span style="color:#000000;">l</span>可插拔的底层文件系统</p>
<p align="justify"><span style="color:#000000;">Tachyon</span>是一个可插拔的底层文件系统，提供容错功能。tachyon将内存数据记录在底层文件系统。它有一个通用的接口，使得可以很容易的插入到不同的底层文件系统。目前支持HDFS，S3，GlusterFS和单节点的本地文件系统，以后将支持更多的文件系统。</p>
<p align="justify"><span style="color:#000000;"> </span></p>
<p align="justify"><span style="color:#000000;">参考资料：</span></p>
<p align="justify"><span style="color:#000000;">（1）</span>Spark官网 http://spark.apache.org</p>
<p align="justify"><span style="color:#000000;">（2）</span>Spark生态圈参考《Spark1.0.0 生态圈一览》 http://blog.csdn.net/book_mmicky/article/details/29362405
</p>
<p align="justify"><span style="color:#000000;">（3）</span>Spark应用案例参考《大数据计算新贵Spark在腾讯雅虎优酷成功应用解析》 http://www.csdn.net/article/2014-06-05/2820089
</p>
<p align="justify"><span style="color:#000000;">（4）</span>Spark Streming介绍参考《Spark Streaming：大规模流式数据处理的新贵》http://www.csdn.net/article/2014-01-28/2818282-Spark-Streaming-big-data</p>
<p align="justify"><span style="color:#000000;">（5）</span>Spark SQL介绍《sparkSQL1.1入门》 http://blog.csdn.net/bluejoe2000/article/details/41247857</p>
<p align="justify"><span style="color:#000000;">（6）</span>GraphX参考《快刀初试：Spark GraphX在淘宝的实践》 http://www.csdn.net/article/2014-08-07/2821097</p>
<p align="justify"><span style="color:#000000;">（7）</span>GraphX参考《基于Spark的图计算框架 GraphX 入门介绍》 http://suanfazu.com/t/ji-yu-sparkde-tu-ji-suan-kuang-jia-graphx-ru-men-jie-shao/244</p>
<p align="justify"><span style="color:#000000;">（8）</span>【Spark专刊】Spark最佳学习路径（作者：黄忠）</p>
<br><p><strong><br></strong></p>
<p><strong><br></strong></p>
            </div>
                </div>