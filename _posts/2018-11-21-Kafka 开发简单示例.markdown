---
layout:     post
title:      Kafka 开发简单示例
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<p>转载：http://www.cnblogs.com/smartloli/p/4543211.html</p>
<p><br></p>
<p></p>
<h1 style="font-size:28px;font-family:Verdana, Arial, Helvetica, sans-serif;">
1.概述</h1>
<p></p>
<p style="font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;line-height:21px;">
　　上一篇博客《<a id="homepage1_HomePageDays_ctl00_DayList_TitleUrl_0" class="postTitle2" href="http://www.cnblogs.com/smartloli/p/4538173.html" rel="nofollow" style="color:#000000;">Kafka实战－Kafka Cluster</a>》中，为大家介绍了Kafka集群的安装部署，以及对Kafka集群Producer/Consumer、HA等做了相关测试，今天我们来开发一个Kafka示例，练习如何在Kafka中进行编程，下面是今天的分享的目录结构：</p>
<ul style="font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;line-height:21px;"><li style="list-style:disc;">开发环境</li><li style="list-style:disc;">ConfigureAPI</li><li style="list-style:disc;">Consumer</li><li style="list-style:disc;">Producer</li><li style="list-style:disc;">截图预览</li></ul><p style="font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;line-height:21px;">
　　下面开始今天的内容分享。</p>
<h1 style="font-size:28px;font-family:Verdana, Arial, Helvetica, sans-serif;">
2.开发环境</h1>
<p style="font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;line-height:21px;">
　　在开发Kafka相关应用之前，我们得将Kafka得开发环境搭建完成，这里我所使用得开发环境如下所示：</p>
<table border="0" style="border-collapse:collapse;border-spacing:0px;border:1px solid #C0C0C0;color:rgb(0,0,0);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;line-height:21px;"><tbody><tr><td style="border:1px solid #C0C0C0;border-collapse:collapse;">
基础软件</td>
<td style="border:1px solid #C0C0C0;border-collapse:collapse;">
工具名称</td>
</tr><tr><td style="border:1px solid #C0C0C0;border-collapse:collapse;">
IDE</td>
<td style="border:1px solid #C0C0C0;border-collapse:collapse;">
JBoss Studio 8</td>
</tr><tr><td style="border:1px solid #C0C0C0;border-collapse:collapse;">
JDK</td>
<td style="border:1px solid #C0C0C0;border-collapse:collapse;">
1.7</td>
</tr></tbody></table><p style="font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;line-height:21px;">
　　关于基础软件的下载及相关配置，大家可参考我写的《<a id="cb_post_title_url" class="postTitle2" href="http://www.cnblogs.com/smartloli/p/4335171.html" rel="nofollow" style="color:#000000;">高可用Hadoop平台－启航</a>》一文的相关赘述，这里就不多做介绍了。在安装好相关基础软件后，我们开始项目工程的创建，这里我们所使用的工程结构是Maven，关于Maven环境的相关配置信息，可参考我在《<a class="postTitle2" href="http://www.cnblogs.com/smartloli/p/4418821.html" rel="nofollow" style="color:#000000;">Hadoop2源码分析－准备篇</a>》一文对Maven环境配置的赘述。</p>
<p style="font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;line-height:21px;">
　　在准备完成相关基础软件以及Maven环境后，我们大家创建的工程，在pom.xml文件中，添加Kafka的依赖包，添加代码如下所示：</p>
<div class="cnblogs_code" style="border:1px solid rgb(204,204,204);overflow:auto;font-family:'Courier New' !important;background-color:rgb(245,245,245);">
<pre style="font-family:'Courier New' !important;">        <span style="color:rgb(0,0,255);line-height:1.5 !important;">&lt;</span><span style="color:rgb(128,0,0);line-height:1.5 !important;">dependency</span><span style="color:rgb(0,0,255);line-height:1.5 !important;">&gt;</span>
            <span style="color:rgb(0,0,255);line-height:1.5 !important;">&lt;</span><span style="color:rgb(128,0,0);line-height:1.5 !important;">groupId</span><span style="color:rgb(0,0,255);line-height:1.5 !important;">&gt;</span>org.apache.kafka<span style="color:rgb(0,0,255);line-height:1.5 !important;">&lt;/</span><span style="color:rgb(128,0,0);line-height:1.5 !important;">groupId</span><span style="color:rgb(0,0,255);line-height:1.5 !important;">&gt;</span>
            <span style="color:rgb(0,0,255);line-height:1.5 !important;">&lt;</span><span style="color:rgb(128,0,0);line-height:1.5 !important;">artifactId</span><span style="color:rgb(0,0,255);line-height:1.5 !important;">&gt;</span>kafka_2.11<span style="color:rgb(0,0,255);line-height:1.5 !important;">&lt;/</span><span style="color:rgb(128,0,0);line-height:1.5 !important;">artifactId</span><span style="color:rgb(0,0,255);line-height:1.5 !important;">&gt;</span>
            <span style="color:rgb(0,0,255);line-height:1.5 !important;">&lt;</span><span style="color:rgb(128,0,0);line-height:1.5 !important;">version</span><span style="color:rgb(0,0,255);line-height:1.5 !important;">&gt;</span>0.8.2.1<span style="color:rgb(0,0,255);line-height:1.5 !important;">&lt;/</span><span style="color:rgb(128,0,0);line-height:1.5 !important;">version</span><span style="color:rgb(0,0,255);line-height:1.5 !important;">&gt;</span>
        <span style="color:rgb(0,0,255);line-height:1.5 !important;">&lt;/</span><span style="color:rgb(128,0,0);line-height:1.5 !important;">dependency</span><span style="color:rgb(0,0,255);line-height:1.5 !important;">&gt;</span>        </pre>
</div>
<p style="font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;line-height:21px;">
　　下面开始编写今天的代码示例。</p>
<h1 style="font-size:28px;font-family:Verdana, Arial, Helvetica, sans-serif;">
3.ConfigureAPI</h1>
<p style="font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;line-height:21px;">
　　首先是一个配置结构类文件，配置Kafka的相关参数，代码如下所示：</p>
<div class="cnblogs_code" style="border:1px solid rgb(204,204,204);overflow:auto;font-family:'Courier New' !important;background-color:rgb(245,245,245);">
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy" style="line-height:1.5 !important;"><a title="复制代码" style="text-decoration:underline;border:none !important;"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码" style="border:none !important;"></a></span></div>
<pre style="font-family:'Courier New' !important;"><span style="color:rgb(0,0,255);line-height:1.5 !important;">package</span><span style="line-height:1.5 !important;"> cn.hadoop.hdfs.conf;

</span><span style="color:rgb(0,128,0);line-height:1.5 !important;">/**</span><span style="color:rgb(0,128,0);line-height:1.5 !important;">
 * @Date Apr 28, 2015
 *
 * @Author dengjie
 *
 * @Note Set param path
 </span><span style="color:rgb(0,128,0);line-height:1.5 !important;">*/</span>
<span style="color:rgb(0,0,255);line-height:1.5 !important;">public</span> <span style="color:rgb(0,0,255);line-height:1.5 !important;">class</span><span style="line-height:1.5 !important;"> ConfigureAPI {

    </span><span style="color:rgb(0,0,255);line-height:1.5 !important;">public</span> <span style="color:rgb(0,0,255);line-height:1.5 !important;">interface</span><span style="line-height:1.5 !important;"> KafkaProperties {
        </span><span style="color:rgb(0,0,255);line-height:1.5 !important;">public</span> <span style="color:rgb(0,0,255);line-height:1.5 !important;">final</span> <span style="color:rgb(0,0,255);line-height:1.5 !important;">static</span> String ZK = "10.211.55.15:2181,10.211.55.17:2181,10.211.55.18:2181"<span style="line-height:1.5 !important;">;
        </span><span style="color:rgb(0,0,255);line-height:1.5 !important;">public</span> <span style="color:rgb(0,0,255);line-height:1.5 !important;">final</span> <span style="color:rgb(0,0,255);line-height:1.5 !important;">static</span> String GROUP_ID = "test_group1"<span style="line-height:1.5 !important;">;
        </span><span style="color:rgb(0,0,255);line-height:1.5 !important;">public</span> <span style="color:rgb(0,0,255);line-height:1.5 !important;">final</span> <span style="color:rgb(0,0,255);line-height:1.5 !important;">static</span> String TOPIC = "test2"<span style="line-height:1.5 !important;">;
        </span><span style="color:rgb(0,0,255);line-height:1.5 !important;">public</span> <span style="color:rgb(0,0,255);line-height:1.5 !important;">final</span> <span style="color:rgb(0,0,255);line-height:1.5 !important;">static</span> String BROKER_LIST = "10.211.55.15:9092,10.211.55.17:9092,10.211.55.18:9092"<span style="line-height:1.5 !important;">;
        </span><span style="color:rgb(0,0,255);line-height:1.5 !important;">public</span> <span style="color:rgb(0,0,255);line-height:1.5 !important;">final</span> <span style="color:rgb(0,0,255);line-height:1.5 !important;">static</span> <span style="color:rgb(0,0,255);line-height:1.5 !important;">int</span> BUFFER_SIZE = 64 * 1024<span style="line-height:1.5 !important;">;
        </span><span style="color:rgb(0,0,255);line-height:1.5 !important;">public</span> <span style="color:rgb(0,0,255);line-height:1.5 !important;">final</span> <span style="color:rgb(0,0,255);line-height:1.5 !important;">static</span> <span style="color:rgb(0,0,255);line-height:1.5 !important;">int</span> TIMEOUT = 20000<span style="line-height:1.5 !important;">;
        </span><span style="color:rgb(0,0,255);line-height:1.5 !important;">public</span> <span style="color:rgb(0,0,255);line-height:1.5 !important;">final</span> <span style="color:rgb(0,0,255);line-height:1.5 !important;">static</span> <span style="color:rgb(0,0,255);line-height:1.5 !important;">int</span> INTERVAL = 10000<span style="line-height:1.5 !important;">;
    }

}</span></pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy" style="line-height:1.5 !important;"><a title="复制代码" style="text-decoration:underline;border:none !important;"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码" style="border:none !important;"></a></span></div>
</div>
<h1 style="font-size:28px;font-family:Verdana, Arial, Helvetica, sans-serif;">
4.Consumer</h1>
<p style="font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;line-height:21px;">
　　然后是一个消费程序，用于消费Kafka的消息，代码如下所示：</p>
<ul style="font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;line-height:21px;"><li style="list-style:disc;">
<p class="p1"><span>JConsumer</span></p>
</li></ul><div class="cnblogs_code" style="border:1px solid rgb(204,204,204);overflow:auto;font-family:'Courier New' !important;background-color:rgb(245,245,245);">
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy" style="line-height:1.5 !important;"><a title="复制代码" style="text-decoration:underline;border:none !important;"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码" style="border:none !important;"></a></span></div>
<pre style="font-family:'Courier New' !important;"><span style="color:rgb(0,0,255);line-height:1.5 !important;">package</span><span style="line-height:1.5 !important;"> cn.hadoop.hdfs.kafka;

</span><span style="color:rgb(0,0,255);line-height:1.5 !important;">import</span><span style="line-height:1.5 !important;"> java.util.HashMap;
</span><span style="color:rgb(0,0,255);line-height:1.5 !important;">import</span><span style="line-height:1.5 !important;"> java.util.List;
</span><span style="color:rgb(0,0,255);line-height:1.5 !important;">import</span><span style="line-height:1.5 !important;"> java.util.Map;
</span><span style="color:rgb(0,0,255);line-height:1.5 !important;">import</span><span style="line-height:1.5 !important;"> java.util.Properties;

</span><span style="color:rgb(0,0,255);line-height:1.5 !important;">import</span><span style="line-height:1.5 !important;"> cn.hadoop.hdfs.conf.ConfigureAPI.KafkaProperties;
</span><span style="color:rgb(0,0,255);line-height:1.5 !important;">import</span><span style="line-height:1.5 !important;"> kafka.consumer.Consumer;
</span><span style="color:rgb(0,0,255);line-height:1.5 !important;">import</span><span style="line-height:1.5 !important;"> kafka.consumer.ConsumerConfig;
</span><span style="color:rgb(0,0,255);line-height:1.5 !important;">import</span><span style="line-height:1.5 !important;"> kafka.consumer.ConsumerIterator;
</span><span style="color:rgb(0,0,255);line-height:1.5 !important;">import</span><span style="line-height:1.5 !important;"> kafka.consumer.KafkaStream;
</span><span style="color:rgb(0,0,255);line-height:1.5 !important;">import</span><span style="line-height:1.5 !important;"> kafka.javaapi.consumer.ConsumerConnector;

</span><span style="color:rgb(0,128,0);line-height:1.5 !important;">/**</span><span style="color:rgb(0,128,0);line-height:1.5 !important;">
 * @Date May 22, 2015
 *
 * @Author dengjie
 *
 * @Note Kafka Consumer
 </span><span style="color:rgb(0,128,0);line-height:1.5 !important;">*/</span>
<span style="color:rgb(0,0,255);line-height:1.5 !important;">public</span> <span style="color:rgb(0,0,255);line-height:1.5 !important;">class</span> JConsumer <span style="color:rgb(0,0,255);line-height:1.5 !important;">extends</span><span style="line-height:1.5 !important;"> Thread {

    </span><span style="color:rgb(0,0,255);line-height:1.5 !important;">private</span><span style="line-height:1.5 !important;"> ConsumerConnector consumer;
    </span><span style="color:rgb(0,0,255);line-height:1.5 !important;">private</span><span style="line-height:1.5 !important;"> String topic;
    </span><span style="color:rgb(0,0,255);line-height:1.5 !important;">private</span> <span style="color:rgb(0,0,255);line-height:1.5 !important;">final</span> <span style="color:rgb(0,0,255);line-height:1.5 !important;">int</span> SLEEP = 1000 * 3<span style="line-height:1.5 !important;">;

    </span><span style="color:rgb(0,0,255);line-height:1.5 !important;">public</span><span style="line-height:1.5 !important;"> JConsumer(String topic) {
        consumer </span>= Consumer.createJavaConsumerConnector(<span style="color:rgb(0,0,255);line-height:1.5 !important;">this</span><span style="line-height:1.5 !important;">.consumerConfig());
        </span><span style="color:rgb(0,0,255);line-height:1.5 !important;">this</span>.topic =<span style="line-height:1.5 !important;"> topic;
    }

    </span><span style="color:rgb(0,0,255);line-height:1.5 !important;">private</span><span style="line-height:1.5 !important;"> ConsumerConfig consumerConfig() {
        Properties props </span>= <span style="color:rgb(0,0,255);line-height:1.5 !important;">new</span><span style="line-height:1.5 !important;"> Properties();
        props.put(</span>"zookeeper.connect"<span style="line-height:1.5 !important;">, KafkaProperties.ZK);
        props.put(</span>"group.id"<span style="line-height:1.5 !important;">, KafkaProperties.GROUP_ID);
        props.put(</span>"zookeeper.session.timeout.ms", "40000"<span style="line-height:1.5 !important;">);
        props.put(</span>"zookeeper.sync.time.ms", "200"<span style="line-height:1.5 !important;">);
        props.put(</span>"auto.commit.interval.ms", "1000"<span style="line-height:1.5 !important;">);
        </span><span style="color:rgb(0,0,255);line-height:1.5 !important;">return</span> <span style="color:rgb(0,0,255);line-height:1.5 !important;">new</span><span style="line-height:1.5 !important;"> ConsumerConfig(props);
    }

    @Override
    </span><span style="color:rgb(0,0,255);line-height:1.5 !important;">public</span> <span style="color:rgb(0,0,255);line-height:1.5 !important;">void</span><span style="line-height:1.5 !important;"> run() {
        Map</span>&lt;String, Integer&gt; topicCountMap = <span style="color:rgb(0,0,255);line-height:1.5 !important;">new</span> HashMap&lt;String, Integer&gt;<span style="line-height:1.5 !important;">();
        topicCountMap.put(topic, </span><span style="color:rgb(0,0,255);line-height:1.5 !important;">new</span> Integer(1<span style="line-height:1.5 !important;">));
        Map</span>&lt;String, List&lt;KafkaStream&lt;<span style="color:rgb(0,0,255);line-height:1.5 !important;">byte</span>[], <span style="color:rgb(0,0,255);line-height:1.5 !important;">byte</span>[]&gt;&gt;&gt; consumerMap =<span style="line-height:1.5 !important;"> consumer.createMessageStreams(topicCountMap);
        KafkaStream</span>&lt;<span style="color:rgb(0,0,255);line-height:1.5 !important;">byte</span>[], <span style="color:rgb(0,0,255);line-height:1.5 !important;">byte</span>[]&gt; stream = consumerMap.get(topic).get(0<span style="line-height:1.5 !important;">);
        ConsumerIterator</span>&lt;<span style="color:rgb(0,0,255);line-height:1.5 !important;">byte</span>[], <span style="color:rgb(0,0,255);line-height:1.5 !important;">byte</span>[]&gt; it =<span style="line-height:1.5 !important;"> stream.iterator();
        </span><span style="color:rgb(0,0,255);line-height:1.5 !important;">while</span><span style="line-height:1.5 !important;"> (it.hasNext()) {
            System.out.println(</span>"Receive-&gt;[" + <span style="color:rgb(0,0,255);line-height:1.5 !important;">new</span> String(it.next().message()) + "]"<span style="line-height:1.5 !important;">);
            </span><span style="color:rgb(0,0,255);line-height:1.5 !important;">try</span><span style="line-height:1.5 !important;"> {
                sleep(SLEEP);
            } </span><span style="color:rgb(0,0,255);line-height:1.5 !important;">catch</span><span style="line-height:1.5 !important;"> (Exception ex) {
                ex.printStackTrace();
            }
        }
    }

}</span></pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy" style="line-height:1.5 !important;"><a title="复制代码" style="text-decoration:underline;border:none !important;"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码" style="border:none !important;"></a></span></div>
</div>
<h1 style="font-size:28px;font-family:Verdana, Arial, Helvetica, sans-serif;">
5.Producer</h1>
<p style="font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;line-height:21px;">
　　接着是Kafka的生产消息程序，用于产生Kafka的消息供Consumer去消费，具体代码如下所示：</p>
<ul style="font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;line-height:21px;"><li style="list-style:disc;">
<p class="p1"><span>JProducer</span></p>
</li></ul><div class="cnblogs_code" style="border:1px solid rgb(204,204,204);overflow:auto;font-family:'Courier New' !important;background-color:rgb(245,245,245);">
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy" style="line-height:1.5 !important;"><a title="复制代码" style="text-decoration:underline;border:none !important;"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码" style="border:none !important;"></a></span></div>
<pre style="font-family:'Courier New' !important;"><span style="color:rgb(0,0,255);line-height:1.5 !important;">package</span><span style="line-height:1.5 !important;"> cn.hadoop.hdfs.kafka;

</span><span style="color:rgb(0,0,255);line-height:1.5 !important;">import</span><span style="line-height:1.5 !important;"> java.util.Properties;

</span><span style="color:rgb(0,0,255);line-height:1.5 !important;">import</span><span style="line-height:1.5 !important;"> kafka.javaapi.producer.Producer;
</span><span style="color:rgb(0,0,255);line-height:1.5 !important;">import</span><span style="line-height:1.5 !important;"> kafka.producer.KeyedMessage;
</span><span style="color:rgb(0,0,255);line-height:1.5 !important;">import</span><span style="line-height:1.5 !important;"> kafka.producer.ProducerConfig;

</span><span style="color:rgb(0,128,0);line-height:1.5 !important;">/**</span><span style="color:rgb(0,128,0);line-height:1.5 !important;">
 * @Date May 22, 2015
 *
 * @Author dengjie
 *
 * @Note Kafka JProducer
 </span><span style="color:rgb(0,128,0);line-height:1.5 !important;">*/</span>
<span style="color:rgb(0,0,255);line-height:1.5 !important;">public</span> <span style="color:rgb(0,0,255);line-height:1.5 !important;">class</span> JProducer <span style="color:rgb(0,0,255);line-height:1.5 !important;">extends</span><span style="line-height:1.5 !important;"> Thread {

    </span><span style="color:rgb(0,0,255);line-height:1.5 !important;">private</span> Producer&lt;Integer, String&gt;<span style="line-height:1.5 !important;"> producer;
    </span><span style="color:rgb(0,0,255);line-height:1.5 !important;">private</span><span style="line-height:1.5 !important;"> String topic;
    </span><span style="color:rgb(0,0,255);line-height:1.5 !important;">private</span> Properties props = <span style="color:rgb(0,0,255);line-height:1.5 !important;">new</span><span style="line-height:1.5 !important;"> Properties();
    </span><span style="color:rgb(0,0,255);line-height:1.5 !important;">private</span> <span style="color:rgb(0,0,255);line-height:1.5 !important;">final</span> <span style="color:rgb(0,0,255);line-height:1.5 !important;">int</span> SLEEP = 1000 * 3<span style="line-height:1.5 !important;">;

    </span><span style="color:rgb(0,0,255);line-height:1.5 !important;">public</span><span style="line-height:1.5 !important;"> JProducer(String topic) {
        props.put(</span>"serializer.class", "kafka.serializer.StringEncoder"<span style="line-height:1.5 !important;">);
        props.put(</span>"metadata.broker.list", "10.211.55.18:9092"<span style="line-height:1.5 !important;">);
        producer </span>= <span style="color:rgb(0,0,255);line-height:1.5 !important;">new</span> Producer&lt;Integer, String&gt;(<span style="color:rgb(0,0,255);line-height:1.5 !important;">new</span><span style="line-height:1.5 !important;"> ProducerConfig(props));
        </span><span style="color:rgb(0,0,255);line-height:1.5 !important;">this</span>.topic =<span style="line-height:1.5 !important;"> topic;
    }

    @Override
    </span><span style="color:rgb(0,0,255);line-height:1.5 !important;">public</span> <span style="color:rgb(0,0,255);line-height:1.5 !important;">void</span><span style="line-height:1.5 !important;"> run() {
        </span><span style="color:rgb(0,0,255);line-height:1.5 !important;">int</span> offsetNo = 1<span style="line-height:1.5 !important;">;
        </span><span style="color:rgb(0,0,255);line-height:1.5 !important;">while</span> (<span style="color:rgb(0,0,255);line-height:1.5 !important;">true</span><span style="line-height:1.5 !important;">) {
            String msg </span>= <span style="color:rgb(0,0,255);line-height:1.5 !important;">new</span> String("Message_" +<span style="line-height:1.5 !important;"> offsetNo);
            System.out.println(</span>"Send-&gt;[" + msg + "]"<span style="line-height:1.5 !important;">);
            producer.send(</span><span style="color:rgb(0,0,255);line-height:1.5 !important;">new</span> KeyedMessage&lt;Integer, String&gt;<span style="line-height:1.5 !important;">(topic, msg));
            offsetNo</span>++<span style="line-height:1.5 !important;">;
            </span><span style="color:rgb(0,0,255);line-height:1.5 !important;">try</span><span style="line-height:1.5 !important;"> {
                sleep(SLEEP);
            } </span><span style="color:rgb(0,0,255);line-height:1.5 !important;">catch</span><span style="line-height:1.5 !important;"> (Exception ex) {
                ex.printStackTrace();
            }
        }
    }

}</span></pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy" style="line-height:1.5 !important;"><a title="复制代码" style="text-decoration:underline;border:none !important;"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码" style="border:none !important;"></a></span></div>
</div>
<h1 style="font-size:28px;font-family:Verdana, Arial, Helvetica, sans-serif;">
6.截图预览</h1>
<p style="font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;line-height:21px;">
　　在开发完Consumer和Producer的代码后，我们来测试相关应用，下面给大家编写了一个Client去测试Consumer和Producer，具体代码如下所示：</p>
<ul style="font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;line-height:21px;"><li style="list-style:disc;">
<p class="p1"><span>KafkaClient</span></p>
</li></ul><div class="cnblogs_code" style="border:1px solid rgb(204,204,204);overflow:auto;font-family:'Courier New' !important;background-color:rgb(245,245,245);">
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy" style="line-height:1.5 !important;"><a title="复制代码" style="text-decoration:underline;border:none !important;"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码" style="border:none !important;"></a></span></div>
<pre style="font-family:'Courier New' !important;"><span style="color:rgb(0,0,255);line-height:1.5 !important;">package</span><span style="line-height:1.5 !important;"> cn.hadoop.hdfs.kafka.client;

</span><span style="color:rgb(0,0,255);line-height:1.5 !important;">import</span><span style="line-height:1.5 !important;"> cn.hadoop.hdfs.conf.ConfigureAPI.KafkaProperties;
</span><span style="color:rgb(0,0,255);line-height:1.5 !important;">import</span><span style="line-height:1.5 !important;"> cn.hadoop.hdfs.kafka.JConsumer;
</span><span style="color:rgb(0,0,255);line-height:1.5 !important;">import</span><span style="line-height:1.5 !important;"> cn.hadoop.hdfs.kafka.JProducer;

</span><span style="color:rgb(0,128,0);line-height:1.5 !important;">/**</span><span style="color:rgb(0,128,0);line-height:1.5 !important;">
 * @Date May 22, 2015
 *
 * @Author dengjie
 *
 * @Note To run Kafka Code
 </span><span style="color:rgb(0,128,0);line-height:1.5 !important;">*/</span>
<span style="color:rgb(0,0,255);line-height:1.5 !important;">public</span> <span style="color:rgb(0,0,255);line-height:1.5 !important;">class</span><span style="line-height:1.5 !important;"> KafkaClient {

    </span><span style="color:rgb(0,0,255);line-height:1.5 !important;">public</span> <span style="color:rgb(0,0,255);line-height:1.5 !important;">static</span> <span style="color:rgb(0,0,255);line-height:1.5 !important;">void</span><span style="line-height:1.5 !important;"> main(String[] args) {
        JProducer pro </span>= <span style="color:rgb(0,0,255);line-height:1.5 !important;">new</span><span style="line-height:1.5 !important;"> JProducer(KafkaProperties.TOPIC);
        pro.start();

        JConsumer con </span>= <span style="color:rgb(0,0,255);line-height:1.5 !important;">new</span><span style="line-height:1.5 !important;"> JConsumer(KafkaProperties.TOPIC);
        con.start();
    }

}</span></pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy" style="line-height:1.5 !important;"><a title="复制代码" style="text-decoration:underline;border:none !important;"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码" style="border:none !important;"></a></span></div>
</div>
<p style="font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;line-height:21px;">
　　运行截图如下所示：</p>
<p style="font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;line-height:21px;">
<img src="http://images0.cnblogs.com/blog2015/666745/201506/010908147237184.png" alt="" style="border:0px;"></p>
<h1 style="font-size:28px;font-family:Verdana, Arial, Helvetica, sans-serif;">
7.总结</h1>
<p style="font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;line-height:21px;">
　　大家在开发Kafka的应用时，需要注意相关事项。若是使用Maven项目工程，在添加相关Kafka依赖JAR包时，有可能依赖JAR会下载失败，若出现这种情况，可手动将Kafka的依赖JAR包添加到Maven仓库即可，在编写Consumer和Producer程序，这里只是给出一个示例让大家先熟悉Kafka的代码如何去编写，后面会给大家更加详细复杂的代码模块案例。</p>
<br><p><br></p>
            </div>
                </div>