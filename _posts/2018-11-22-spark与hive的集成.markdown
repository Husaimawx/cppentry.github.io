---
layout:     post
title:      spark与hive的集成
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                <p>一：介绍</p><p>1.在spark编译时支持hive</p><p>　　<img src="https://images2015.cnblogs.com/blog/1027015/201703/1027015-20170313185728588-1590422505.png" alt=""></p><p>2.默认的db</p><p>　　当Spark在编译的时候给定了hive的支持参数，但是没有配置和hive的集成，此时默认使用hive自带的元数据管理:Derby数据库。</p><p>　　<img src="https://images2015.cnblogs.com/blog/1027015/201703/1027015-20170313185850260-1859000312.png" alt="" width="816" height="123"></p><p>二：具体集成　</p><p>1.将hive的配合文件hive-site.xml添加到spark应用的classpath中（相当于拷贝）</p><p>　　<img src="https://images2015.cnblogs.com/blog/1027015/201703/1027015-20170313191952151-757001336.png" alt="" width="809" height="147"></p><p>2.第二步集成</p><p>　　根据hive的配置参数hive.metastore.uris的情况，采用不同的集成方式</p><p>　　分别为（<span style="font-size:18pt;">区别</span>）：　　</p><p>　　-1. hive.metastore.uris没有给定配置值，为空(默认情况)<br>        　　　　SparkSQL通过hive配置的javax.jdo.option.XXX相关配置值直接连接metastore数据库直接获取hive表元数据<br>        　　　　--1.1 需要将连接数据库的驱动添加到Spark应用的classpath中</p><p><br>      　　-2. hive.metastore.uris给定了具体的参数值<br>        　　　　SparkSQL通过连接hive提供的metastore服务来获取hive表的元数据<br>        　　　　--2.1 直接启动hive的metastore服务即可完成SparkSQL和Hive的集成<br>          　　　　$ hive --service metastore &amp;</p><p>3.使用hive-site.xml配置的方式</p><p>　　<img src="https://images2015.cnblogs.com/blog/1027015/201703/1027015-20170313192755104-149264893.png" alt=""></p><p>4.启动hive service metastore服务</p><p>　　<img src="https://images2015.cnblogs.com/blog/1027015/201703/1027015-20170313193745198-1950393868.png" alt="" width="866" height="283"></p><p>三：测试</p><p>1.spark-sql</p><p>　　<img src="https://images2015.cnblogs.com/blog/1027015/201703/1027015-20170313195437635-1756612997.png" alt=""></p><p> </p><p>2.使用</p><p>　　<img src="https://images2015.cnblogs.com/blog/1027015/201703/1027015-20170313195521995-778001753.png" alt=""></p><p> </p><p> 四：特殊点（其他在hive中可以使用的sql，在spark-sql中都可以使用）</p><p>1.cache</p><p>　　<img src="https://images2015.cnblogs.com/blog/1027015/201703/1027015-20170313210817682-791424056.png" alt=""></p><p>五：使用spark-shell</p><p>1.启动</p><p>　　<img src="https://images2015.cnblogs.com/blog/1027015/201703/1027015-20170313210928807-737811395.png" alt="" width="856" height="328"></p><p>2.使用</p><p>　　<img src="https://images2015.cnblogs.com/blog/1027015/201703/1027015-20170313211356901-384826905.png" alt=""></p><p> </p><p>六：补充说明：Spark应用程序第三方jar文件依赖解决方案</p><p>1. 将第三方jar文件打包到最终形成的spark应用程序jar文件中</p><p>      这种使用的场景是，第三方的jar包不是很大的情况。</p><p> </p><p>2. 使用spark-submit提交命令的参数: --jars　</p><p>　　这个使用的场景：使用spark-submit命令的机器上存在对应的jar文件<br>      　　　　至于集群中其他机器上的服务需要该jar文件的时候，通过driver提供的一个http接口来获取该jar文件的(http://192.168.187.146:50206/jars/mysql-connector-java-5.1.27-bin.jar Added By User)</p><p>　　$ bin/spark-shell --jars /opt/cdh-5.3.6/hive/lib/mysql-connector-java-5.1.27-bin.jar</p><p> </p><p>3. 使用spark-submit提交命令的参数: --packages　</p><p>　　这个场景是：如果找不到jar会自动下载，也可以自己设定源。</p><p>　　--packages    Comma-separated list of maven coordinates of jars to include on the driver and executor classpaths. Will search the local maven repo, then maven central and any additional remote  repositories given by --repositories.</p><p> The format for the  coordinates should be groupId:artifactId:version. </p><p><em>　　http://mvnrepository.com/artifact/mysql/mysql-connector-java/5.1.27 <br>　　$ bin/spark-shell --packages  mysql:mysql-connector-java:5.1.27 --repositories http://maven.aliyun.com/nexus/content/groups/public/<br>　　# 默认下载的包位于当前用户根目录下的.ivy/jars文件夹中</em></p><p> </p><p>4.更改Spark的配置信息:SPARK_CLASSPATH, 将第三方的jar文件添加到SPARK_CLASSPATH环境变量中</p><p>　　使用场景：要求Spark应用运行的所有机器上必须存在被添加的第三方jar文件</p><p>　　做法：</p><p>　　　　-4.1 创建一个保存第三方jar文件的文件夹:<br>      　　　　　　$ mkdir external_jars<br>    　　　　-4.2 修改Spark配置信息<br>      　　　　　　$ vim conf/spark-env.sh<br>　　　　　　　　SPARK_CLASSPATH=$SPARK_CLASSPATH:/opt/cdh-5.3.6/spark/external_jars/*<br>    　　　　-4.3 将依赖的jar文件copy到新建的文件夹中<br>      　　　　　　$ cp /opt/cdh-5.3.6/hive/lib/mysql-connector-java-5.1.27-bin.jar ./external_jars/<br>    　　　　-4.4 测试<br>      　　　　　　$ bin/spark-shell <br>　　　　　　scala&gt; sqlContext.sql("select * from common.emp").show</p><p>　　备注：</p><p>　　　　如果spark on yarn(cluster)，如果应用依赖第三方jar文件，最终解决方案：将第三方的jar文件copy到${HADOOP_HOME}/share/hadoop/common/lib文件夹中(Hadoop集群中所有机器均要求copy)<br><br>  备注：如果spark on yarn(cluster)，如果应用依赖第三方jar文件，最终解决方案：</p>            </div>
                </div>