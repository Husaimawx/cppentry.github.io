---
layout:     post
title:      flume学习02-flume安装配置启动
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/JThink_/article/details/43759709				</div>
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<p>上一篇博客简单介绍了flume的一些基本概念和架构，更详细的内容可以去<a href="http://flume.apache.org/FlumeUserGuide.html" rel="nofollow">官网用户手册</a>学习，这篇博客主要介绍如何安装配置flume，以及作个简单示例如何使用</p>



<h1 id="下载flume">下载flume</h1>

<ul>
<li>wget <a href="http://apache.dataguru.cn/flume/1.5.2/apache-flume-1.5.2-bin.tar.gz" rel="nofollow">http://apache.dataguru.cn/flume/1.5.2/apache-flume-1.5.2-bin.tar.gz</a></li>
<li>tar -zxvf apache-flume-1.5.2-bin.tar.gz</li>
<li>cp conf/flume-env.sh.template conf/flume-env.sh</li>
<li>cp conf/flume-conf.properties.template simple-agent.properties</li>
</ul>



<h1 id="启动和停止">启动和停止</h1>

<ul>
<li>修改配置文件simple-agent.properties（这里需要根据你自己的业务去修改这个文件，这里举个简单的例子）:</li>
</ul>



<pre class="prettyprint"><code class=" hljs vala"><span class="hljs-preprocessor"># distributed with this work for additional information</span>
<span class="hljs-preprocessor"># regarding copyright ownership.  The ASF licenses this file</span>
<span class="hljs-preprocessor"># to you under the Apache License, Version 2.0 (the</span>
<span class="hljs-preprocessor"># "License"); you may not use this file except in compliance</span>
<span class="hljs-preprocessor"># with the License.  You may obtain a copy of the License at</span>
<span class="hljs-preprocessor">#</span>
<span class="hljs-preprocessor">#  http://www.apache.org/licenses/LICENSE-2.0</span>
<span class="hljs-preprocessor">#</span>
<span class="hljs-preprocessor"># Unless required by applicable law or agreed to in writing,</span>
<span class="hljs-preprocessor"># software distributed under the License is distributed on an</span>
<span class="hljs-preprocessor"># "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span>
<span class="hljs-preprocessor"># KIND, either express or implied.  See the License for the</span>
<span class="hljs-preprocessor"># specific language governing permissions and limitations</span>
<span class="hljs-preprocessor"># under the License.</span>


<span class="hljs-preprocessor"># The configuration file needs to define the sources, </span>
<span class="hljs-preprocessor"># the channels and the sinks.</span>
<span class="hljs-preprocessor"># Sources, channels and sinks are defined per agent, </span>
<span class="hljs-preprocessor"># in this case called 'agent'</span>

agent.sources = so1
agent.channels = c1
agent.sinks = s1

<span class="hljs-preprocessor"># For each one of the sources, the type is defined</span>
agent.sources.so1.type = netcat
agent.sources.so1.bind = localhost
agent.sources.so1.port = <span class="hljs-number">44444</span>

<span class="hljs-preprocessor"># The channel can be defined as follows.</span>
<span class="hljs-preprocessor"># agent.sources.seqGenSrc.channels = memoryChannel</span>

<span class="hljs-preprocessor"># Each sink's type must be defined</span>
agent.sinks.s1.type = logger

<span class="hljs-preprocessor">#Specify the channel the sink should use</span>
<span class="hljs-preprocessor"># agent.sinks.loggerSink.channel = memoryChannel</span>

<span class="hljs-preprocessor"># Each channel's type is defined.</span>
agent.channels.c1.type = memory
agent.channels.c1.capacity = <span class="hljs-number">1000</span>
agent.channels.c1.transactionCapacity = <span class="hljs-number">100</span>

<span class="hljs-preprocessor"># Bind the source and sink to the channel</span>
agent.sources.so1.channels = c1
agent.sinks.s1.channel = c1


<span class="hljs-preprocessor"># Other config values specific to each type of channel(sink or source)</span>
<span class="hljs-preprocessor"># can be defined as well</span>
<span class="hljs-preprocessor"># In this case, it specifies the capacity of the memory channel</span>
<span class="hljs-preprocessor"># agent.channels.memoryChannel.capacity = 100</span></code></pre>

<p>这就是最简单的一个配置，收集到的日志直接在flume的logger中打印出来</p>

<ul>
<li><p>启动 <br>
 bin/flume-ng agent –conf ./conf/ -f conf/simple-agent.properties -Dflume.root.logger=DEBUG,console -n agent <br>
注意点： <br>
  –conf：指定flume-env.sh的目录 <br>
  -f：flume定义组件的配置文件 <br>
  -n：启动Agent的名称，该名称在组件配置文件中定义 <br>
  -Dflume.root.logger：flume自身运行状态的日志，根据需要配置</p></li>
<li><p>停止 <br>
 直接ctrl+c就好了</p></li>
<li><p>脚本启动暂停 <br>
非后台运行的flume看上去比较怪，所以我们还是写2个脚本来实现后台启动和停止 <br>
start.sh和stop.sh <br>
使用 <br>
./start.sh simple-agent.properties agent <br>
参数1：指定启动的配置文件 <br>
参数2：指定agent的名字</p>

<p>./stop.sh 44444 <br>
参数1：配置文件中指定的启动端口</p></li>
</ul>



<pre class="prettyprint"><code class=" hljs bash"><span class="hljs-shebang">#!/bin/bash</span>
nohup bin/flume-ng agent --conf ./conf/ <span class="hljs-operator">-f</span> conf/<span class="hljs-variable">$1</span> -Dflume.root.logger=DEBUG,console -n <span class="hljs-variable">$2</span> &amp;</code></pre>



<pre class="prettyprint"><code class=" hljs bash"><span class="hljs-shebang">#!/bin/bash</span>
kill -<span class="hljs-number">9</span> $(lsof -i:<span class="hljs-number">12306</span> | awk <span class="hljs-string">'{print $2}'</span> | tail -n <span class="hljs-number">1</span>)</code></pre>



<h1 id="测试">测试</h1>

<p>由于配置中的source是netcat，那么我们直接telnet</p>



<pre class="prettyprint"><code class=" hljs r">xxx@xxx:~$ telnet localhost <span class="hljs-number">44444</span>
Trying <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-keyword">...</span>
Connected to localhost.
Escape character is <span class="hljs-string">'^]'</span>.
dasdasd
OK</code></pre>

<p>我们再看flume console的输出</p>



<pre class="prettyprint"><code class=" hljs css">2015<span class="hljs-tag">-02-12</span> 10<span class="hljs-pseudo">:39</span><span class="hljs-pseudo">:14</span>,886 (<span class="hljs-tag">SinkRunner-PollingRunner-DefaultSinkProcessor</span>) <span class="hljs-attr_selector">[INFO - org.apache.flume.sink.LoggerSink.process(LoggerSink.java:70)]</span> <span class="hljs-tag">Event</span>: <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">headers</span>:<span class="hljs-value">{</span></span></span>} <span class="hljs-tag">body</span>: 64 61 73 64 61 73 64 0<span class="hljs-tag">D</span>                         <span class="hljs-tag">dasdasd</span>. }</code></pre>

<p>可以看到正常执行了</p>

<p>安装配置启动就简单得介绍到这里，毕竟我学这个是用来收集日志的，所以接下去几篇都会介绍用flume如何去接受log4j的输出日志，有可能涉及到日志的分析处理。</p>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>