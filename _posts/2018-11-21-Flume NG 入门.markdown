---
layout:     post
title:      Flume NG 入门
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<div class="article_body" id="nei" style="min-height:340px;line-height:1.7em;color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', '微软雅黑', sans-serif;">
<div style="line-height:1.7em;">
<p style="line-height:1.7em;text-indent:1em;">
<span style="font-size:24px;">转载自：<span style="color:rgb(153,153,153);font-family:'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', '微软雅黑', sans-serif;background-color:rgb(254,254,254);">  </span><a class="cut cut70" href="http://my.oschina.net/leejun2005/blog/288136?utm_source=tuicool&amp;utm_medium=referral" rel="nofollow" style="color:rgb(51,51,51);text-decoration:none;overflow:hidden;font-family:'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', '微软雅黑', sans-serif;background-color:rgb(254,254,254);display:inline-block;">http://my.oschina.net/leejun2005/blog/288136</a></span></p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
Flume 作为 cloudera 开发的实时日志收集系统，受到了业界的认可与广泛应用。Flume 初始的发行版本目前被统称为 Flume OG（original generation），属于 cloudera。但随着 FLume 功能的扩展，Flume OG 代码工程臃肿、核心组件设计不合理、核心配置不标准等缺点暴露出来，尤其是在 Flume OG 的最后一个发行版本 0.94.0 中，日志传输不稳定的现象尤为严重，为了解决这些问题，2011 年 10 月 22 号，cloudera 完成了 Flume-728，对
 Flume 进行了里程碑式的改动：重构核心组件、核心配置以及代码架构，重构后的版本统称为 Flume NG（next generation）；改动的另一原因是将 Flume 纳入 apache 旗下，cloudera Flume 改名为 Apache Flume。IBM 的这篇文章：《 <a href="http://www.ibm.com/developerworks/cn/data/library/bd-1404flumerevolution/index.html" rel="nofollow" style="color:rgb(148,148,148);text-decoration:none;border-bottom:1px dashed rgb(148,148,148);font-style:italic;font-weight:bold;">Flume
 NG：Flume 发展史上的第一次革命</a> 》，从基本组件以及用户体验的角度阐述 Flume OG 到 Flume NG 发生的革命性变化。本文就不再赘述各种细枝末节了，不过这里还是简要提下 Flume NG （1.x.x）的主要变化：</p>
<ul style="font-size:16px;list-style-type:none;line-height:1.7em;"><li style="line-height:1.7em;list-style-type:disc;">sources和sinks 使用channels 进行链接</li><li style="line-height:1.7em;list-style-type:disc;">两个主要channel 。1，  in-memory channel  非持久性支持，速度快。2 ， JDBC-based channel 持久性支持。</li><li style="line-height:1.7em;list-style-type:disc;">不再区分逻辑和物理node，所有物理节点统称为 “agents”,每个agents 都能运行0个或多个sources 和sinks</li><li style="line-height:1.7em;list-style-type:disc;">不再需要master节点和对zookeeper的依赖，配置文件简单化。</li><li style="line-height:1.7em;list-style-type:disc;">插件化，一部分面对用户，工具或系统开发人员。</li><li style="line-height:1.7em;list-style-type:disc;">使用Thrift、Avro Flume sources 可以从flume0.9.4 发送 events  到flume 1.x</li></ul><p style="font-size:16px;line-height:1.7em;text-indent:1em;">
</p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
注：本文所使用的 Flume 版本为 flume-1.4.0-cdh4.7.0，不需要额外的安装过程，解压缩即可用。 </p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
<br></p>
<h2 style="font-size:18px;font-family:inherit;line-height:1.6em;color:inherit;text-indent:1em;">
1、Flume 的 一些核心概念：</h2>
<table class="table table-bordered" style="font-size:14px;background-color:transparent;border-spacing:0px;width:684px;border-width:1px 1px 1px 0px;border-top-style:solid;border-right-style:solid;border-bottom-style:solid;border-top-color:rgb(221,221,221);border-right-color:rgb(221,221,221);border-bottom-color:rgb(221,221,221);line-height:1.3em;"><tbody><tr style="line-height:1.3em;"><th style="line-height:1.5em;text-align:left;vertical-align:top;border-top:0px;border-left:1px solid rgb(221,221,221);">
组件</th>
<th style="line-height:1.5em;text-align:left;vertical-align:top;border-top:0px;border-left:1px solid rgb(221,221,221);">
功能</th>
</tr><tr style="line-height:1.3em;"><td style="line-height:1.3em;vertical-align:top;border-top:1px solid rgb(221,221,221);border-left:1px solid rgb(221,221,221);font-size:14px;">
Agent</td>
<td style="line-height:1.3em;vertical-align:top;border-top:1px solid rgb(221,221,221);border-left:1px solid rgb(221,221,221);font-size:14px;">
使用JVM 运行Flume。每台机器运行一个agent，但是可以在一个agent中包含多个sources和sinks。</td>
</tr><tr style="line-height:1.3em;"><td style="line-height:1.3em;vertical-align:top;border-top:1px solid rgb(221,221,221);border-left:1px solid rgb(221,221,221);font-size:14px;">
Client</td>
<td style="line-height:1.3em;vertical-align:top;border-top:1px solid rgb(221,221,221);border-left:1px solid rgb(221,221,221);font-size:14px;">
生产数据，运行在一个独立的线程。</td>
</tr><tr style="line-height:1.3em;"><td style="line-height:1.3em;vertical-align:top;border-top:1px solid rgb(221,221,221);border-left:1px solid rgb(221,221,221);font-size:14px;">
Source</td>
<td style="line-height:1.3em;vertical-align:top;border-top:1px solid rgb(221,221,221);border-left:1px solid rgb(221,221,221);font-size:14px;">
从Client收集数据，传递给Channel。</td>
</tr><tr style="line-height:1.3em;"><td style="line-height:1.3em;vertical-align:top;border-top:1px solid rgb(221,221,221);border-left:1px solid rgb(221,221,221);font-size:14px;">
Sink</td>
<td style="line-height:1.3em;vertical-align:top;border-top:1px solid rgb(221,221,221);border-left:1px solid rgb(221,221,221);font-size:14px;">
从Channel收集数据，运行在一个独立线程。</td>
</tr><tr style="line-height:1.3em;"><td style="line-height:1.3em;vertical-align:top;border-top:1px solid rgb(221,221,221);border-left:1px solid rgb(221,221,221);font-size:14px;">
Channel</td>
<td style="line-height:1.3em;vertical-align:top;border-top:1px solid rgb(221,221,221);border-left:1px solid rgb(221,221,221);font-size:14px;">
连接 sources 和 sinks ，这个有点像一个队列。</td>
</tr><tr style="line-height:1.3em;"><td style="line-height:1.3em;vertical-align:top;border-top:1px solid rgb(221,221,221);border-left:1px solid rgb(221,221,221);font-size:14px;">
Events</td>
<td style="line-height:1.3em;vertical-align:top;border-top:1px solid rgb(221,221,221);border-left:1px solid rgb(221,221,221);font-size:14px;">
可以是日志记录、 avro 对象等。</td>
</tr></tbody></table><h2 style="font-size:18px;font-family:inherit;line-height:1.6em;color:inherit;text-indent:1em;">
1.1 数 据流模型</h2>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
Flume以agent为最小的独立运行单位。一个agent就是一个JVM。单agent由Source、Sink和Channel三大组件构成，如下图：</p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
<img src="http://img1.tuicool.com/ueima2.png!web" alt="Agent component diagram" class="alignCenter" style="vertical-align:middle;border:0px none;text-align:center;display:block;">  图一</p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
</p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
Flume的数据流由事件(Event)贯穿始终。事件是Flume的基本数据单位，它携带日志数据(字节数组形式)并且携带有头信息，这些Event由Agent外部的Source，比如上图中的Web Server生成。当Source捕获事件后会进行特定的格式化，然后Source会把事件推入(单个或多个)Channel中。你可以把Channel看作是一个缓冲区，它将保存事件直到Sink处理完该事件。Sink负责持久化日志或者把事件推向另一个Source。</p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
很直白的设计，其中值得注意的是，Flume提供了大量内置的Source、Channel和Sink类型。不同类型的Source,Channel和Sink可以自由组合。组合方式基于用户设置的配置文件，非常灵活。比如：Channel可以把事件暂存在内存里，也可以持久化到本地硬盘上。Sink可以把日志写入HDFS, HBase，甚至是另外一个Source等等。</p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
如果你以为Flume就这些能耐那就大错特错了。Flume支持用户建立多级流，也就是说，多个agent可以协同工作，并且支持Fan-in、Fan-out、Contextual Routing、Backup Routes。如下图所示：</p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
</p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
<img src="http://img1.tuicool.com/i6FvAn.png!web" alt="A fan-out flow using a (multiplexing) channel selector" class="alignCenter" style="vertical-align:middle;border:0px none;text-align:center;display:block;"></p>
<h2 style="font-size:18px;font-family:inherit;line-height:1.6em;color:inherit;text-indent:1em;">
1.2 高可靠性</h2>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
作为生产环境运行的软件，高可靠性是必须的。</p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
从单agent来看，Flume使用基于事务的数据传递方式来保证事件传递的可靠性。Source和Sink被封装进一个事务。事件被存放在Channel中直到该事件被处理，Channel中的事件才会被移除。这是Flume提供的点到点的可靠机制。</p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
从多级流来看，前一个agent的sink和后一个agent的source同样有它们的事务来保障数据的可靠性。</p>
<h2 style="font-size:18px;font-family:inherit;line-height:1.6em;color:inherit;text-indent:1em;">
1.3 可恢复性</h2>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
还是靠Channel。推荐使用FileChannel，事件持久化在本地文件系统里(性能较差)。</p>
<h2 style="font-size:18px;font-family:inherit;line-height:1.6em;color:inherit;text-indent:1em;">
2、Flume 整体架构介绍</h2>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
Flume架构整体上看就是  source --&gt;c hannel --&gt; sink  的三层架构（参见最上面的 图一），类似生成者和消费者的架构，他们之间通过queue（channel）传输，解耦。</p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
</p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
Source:完成对日志数据的收集，分成 transtion 和 event 打入到channel之中。 </p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
Channel:主要提供一个队列的功能，对source提供中的数据进行简单的缓存。 </p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
Sink:取出Channel中的数据，进行相应的存储文件系统，数据库，或者提交到远程服务器。 </p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
对现有程序改动最小的使用方式是使用是直接读取程序原来记录的日志文件，基本可以实现无缝接入，不需要对现有程序进行任何改动。 </p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
对于直接读取文件Source, 主要有两种方式： </p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
</p>
<h2 style="font-size:18px;font-family:inherit;line-height:1.6em;color:inherit;text-indent:1em;">
2.1 Exec source</h2>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
可通过写Unix command的方式组织数据，最常用的就是tail -F [file]。</p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
可以实现实时传输，但在flume不运行和脚本错误时，会丢数据，也不支持断点续传功能。因为没有记录上次文件读到的位置，从而没办法知道，下次再读时，从什么地方开始读。特别是在日志文件一直在增加的时候。flume的source挂了。等flume的source再次开启的这段时间内，增加的日志内容，就没办法被source读取到了。不过flume有一个execStream的扩展，可以自己写一个监控日志增加情况，把增加的日志，通过自己写的工具把增加的内容，传送给flume的node。再传送给sink的node。要是能在tail类的source中能支持，在node挂掉这段时间的内容，等下次node开启后在继续传送，那就更完美了。</p>
<h2 style="font-size:18px;font-family:inherit;line-height:1.6em;color:inherit;text-indent:1em;">
2.2 Spooling Directory Source</h2>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
SpoolSource:是监测配置的目录下新增的文件，并将文件中的数据读取出来，可实现准实时。需要注意两点：1、拷贝到spool目录下的文件不可以再打开编辑。2、spool目录下不可包含相应的子目录。在实际使用的过程中，可以结合log4j使用，使用log4j的时候，将log4j的文件分割机制设为1分钟一次，将文件拷贝到spool的监控目录。log4j有一个TimeRolling的插件，可以把log4j分割的文件到spool目录。基本实现了实时的监控。Flume在传完文件之后，将会修改文件的后缀，变为.COMPLETED（后缀也可以在配置文件中灵活指定） </p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
ExecSource，SpoolSource对比：ExecSource可以实现对日志的实时收集，但是存在Flume不运行或者指令执行出错时，将无法收集到日志数据，无法何证日志数据的完整性。SpoolSource虽然无法实现实时的收集数据，但是可以使用以分钟的方式分割文件，趋近于实时。如果应用无法实现以分钟切割日志文件的话，可以两种收集方式结合使用。 </p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
Channel有多种方式：有MemoryChannel, JDBC Channel, MemoryRecoverChannel, FileChannel。MemoryChannel可以实现高速的吞吐，但是无法保证数据的完整性。MemoryRecoverChannel在官方文档的建议上已经建义使用FileChannel来替换。FileChannel保证数据的完整性与一致性。在具体配置FileChannel时，建议FileChannel设置的目录和程序日志文件保存的目录设成不同的磁盘，以便提高效率。 </p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
Sink在设置存储数据时，可以向文件系统中，数据库中，hadoop中储数据，在日志数据较少时，可以将数据存储在文件系中，并且设定一定的时间间隔保存数据。在日志数据较多时，可以将相应的日志数据存储到Hadoop中，便于日后进行相应的数据分析。 </p>
<h2 style="font-size:18px;font-family:inherit;line-height:1.6em;color:inherit;text-indent:1em;">
3、常用架构、功能配 置示例</h2>
<h2 style="font-size:18px;font-family:inherit;line-height:1.6em;color:inherit;text-indent:1em;">
3.1 先来个简 单的：单节点 Flume 配置</h2>
<pre class="prettyprint hljs tcl" style="font-size:14px;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(68,68,68);line-height:1.5em;background-color:rgb(246,246,246);border:none;"><span class="hljs-comment" style="color:rgb(136,136,136);"># example.conf: A single-node Flume configuration</span>

<span class="hljs-comment" style="color:rgb(136,136,136);"># Name the components on this agent</span>
a1.sources = r1
a1.sinks = k1
a1.channels = c1

<span class="hljs-comment" style="color:rgb(136,136,136);"># Describe/configure the source</span>
a1.sources.r1.type = netcat
a1.sources.r1.bind = localhost
a1.sources.r1.port = <span class="hljs-number" style="color:rgb(136,0,0);">44444</span>

<span class="hljs-comment" style="color:rgb(136,136,136);"># Describe the sink</span>
a1.sinks.k1.type = logger

<span class="hljs-comment" style="color:rgb(136,136,136);"># Use a channel which buffers events in memory</span>
a1.channels.c1.type = <span class="hljs-keyword" style="color:rgb(51,51,51);font-weight:700;">memory</span>
a1.channels.c1.capacity = <span class="hljs-number" style="color:rgb(136,0,0);">1000</span>
a1.channels.c1.transactionCapacity = <span class="hljs-number" style="color:rgb(136,0,0);">100</span>

<span class="hljs-comment" style="color:rgb(136,136,136);"># Bind the source and sink to the channel</span>
a1.sources.r1.channels = c1
a1.sinks.k1.channel = c1</pre>
<span style="font-size:16px;">将上述配置存为：example.conf</span>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
然后我们就可以启动 Flume 了：</p>
<pre class="prettyprint hljs vim" style="font-size:14px;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(68,68,68);line-height:1.5em;background-color:rgb(246,246,246);border:none;">bin/flume-ng agent --<span class="hljs-keyword" style="color:rgb(51,51,51);font-weight:700;">conf</span> <span class="hljs-keyword" style="color:rgb(51,51,51);font-weight:700;">conf</span> --<span class="hljs-keyword" style="color:rgb(51,51,51);font-weight:700;">conf</span>-<span class="hljs-keyword" style="color:rgb(51,51,51);font-weight:700;">file</span> example.<span class="hljs-keyword" style="color:rgb(51,51,51);font-weight:700;">conf</span> --name a1 -Dflume.root.logger=INFO,console</pre>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
PS：-Dflume.root.logger=INFO,console 仅为 debug 使用，请勿生产环境生搬硬套，否则大量的日志会返回到终端。。。</p>
<span style="font-size:16px;">然后我们再开一个 shell 终端窗口，telnet 上配置中侦听的端口，就可以发消息看到效果了：</span>
<pre class="prettyprint hljs vim" style="font-size:14px;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(68,68,68);line-height:1.5em;background-color:rgb(246,246,246);border:none;">$ telnet localhost <span class="hljs-number" style="color:rgb(136,0,0);">44444</span>
Trying <span class="hljs-number" style="color:rgb(136,0,0);">127.0</span>.<span class="hljs-number" style="color:rgb(136,0,0);">0.1</span>...
Connected <span class="hljs-keyword" style="color:rgb(51,51,51);font-weight:700;">to</span> localhost.localdomain (<span class="hljs-number" style="color:rgb(136,0,0);">127.0</span>.<span class="hljs-number" style="color:rgb(136,0,0);">0.1</span>).
Escape character <span class="hljs-keyword" style="color:rgb(51,51,51);font-weight:700;">is</span> <span class="hljs-string" style="color:rgb(136,0,0);">'^]'</span>.
Hello world! <span class="hljs-symbol" style="color:rgb(188,96,96);">&lt;ENTER&gt;</span>
OK</pre>
<span style="font-size:16px;">Flume 终端窗口此时会打印出如下信息，就表示成功了：</span>
<pre class="prettyprint hljs less" style="font-size:14px;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(68,68,68);line-height:1.5em;background-color:rgb(246,246,246);border:none;"><span class="hljs-selector-tag" style="color:rgb(51,51,51);font-weight:700;">12</span>/<span class="hljs-selector-tag" style="color:rgb(51,51,51);font-weight:700;">06</span>/<span class="hljs-selector-tag" style="color:rgb(51,51,51);font-weight:700;">19</span> <span class="hljs-selector-tag" style="color:rgb(51,51,51);font-weight:700;">15</span><span class="hljs-selector-pseudo" style="color:rgb(188,96,96);">:32</span><span class="hljs-selector-pseudo" style="color:rgb(188,96,96);">:19</span> <span class="hljs-selector-tag" style="color:rgb(51,51,51);font-weight:700;">INFO</span> <span class="hljs-selector-tag" style="color:rgb(51,51,51);font-weight:700;">source</span><span class="hljs-selector-class" style="color:rgb(136,0,0);">.NetcatSource</span>: <span class="hljs-selector-tag" style="color:rgb(51,51,51);font-weight:700;">Source</span> <span class="hljs-selector-tag" style="color:rgb(51,51,51);font-weight:700;">starting</span>
<span class="hljs-selector-tag" style="color:rgb(51,51,51);font-weight:700;">12</span>/<span class="hljs-selector-tag" style="color:rgb(51,51,51);font-weight:700;">06</span>/<span class="hljs-selector-tag" style="color:rgb(51,51,51);font-weight:700;">19</span> <span class="hljs-selector-tag" style="color:rgb(51,51,51);font-weight:700;">15</span><span class="hljs-selector-pseudo" style="color:rgb(188,96,96);">:32</span><span class="hljs-selector-pseudo" style="color:rgb(188,96,96);">:19</span> <span class="hljs-selector-tag" style="color:rgb(51,51,51);font-weight:700;">INFO</span> <span class="hljs-selector-tag" style="color:rgb(51,51,51);font-weight:700;">source</span><span class="hljs-selector-class" style="color:rgb(136,0,0);">.NetcatSource</span>: <span class="hljs-selector-tag" style="color:rgb(51,51,51);font-weight:700;">Created</span> <span class="hljs-selector-tag" style="color:rgb(51,51,51);font-weight:700;">serverSocket</span><span class="hljs-selector-pseudo" style="color:rgb(188,96,96);">:sun.nio.ch.ServerSocketChannelImpl</span><span class="hljs-selector-attr" style="color:rgb(188,96,96);">[/127.0.0.1:44444]</span>
<span class="hljs-selector-tag" style="color:rgb(51,51,51);font-weight:700;">12</span>/<span class="hljs-selector-tag" style="color:rgb(51,51,51);font-weight:700;">06</span>/<span class="hljs-selector-tag" style="color:rgb(51,51,51);font-weight:700;">19</span> <span class="hljs-selector-tag" style="color:rgb(51,51,51);font-weight:700;">15</span><span class="hljs-selector-pseudo" style="color:rgb(188,96,96);">:32</span><span class="hljs-selector-pseudo" style="color:rgb(188,96,96);">:34</span> <span class="hljs-selector-tag" style="color:rgb(51,51,51);font-weight:700;">INFO</span> <span class="hljs-selector-tag" style="color:rgb(51,51,51);font-weight:700;">sink</span><span class="hljs-selector-class" style="color:rgb(136,0,0);">.LoggerSink</span>: <span class="hljs-selector-tag" style="color:rgb(51,51,51);font-weight:700;">Event</span>: { <span class="hljs-attribute" style="color:rgb(51,51,51);font-weight:700;">headers</span>:{} <span class="hljs-attribute" style="color:rgb(51,51,51);font-weight:700;">body</span>: <span class="hljs-number" style="color:rgb(136,0,0);">48</span> <span class="hljs-number" style="color:rgb(136,0,0);">65</span> <span class="hljs-number" style="color:rgb(136,0,0);">6</span>C <span class="hljs-number" style="color:rgb(136,0,0);">6</span>C <span class="hljs-number" style="color:rgb(136,0,0);">6</span>F <span class="hljs-number" style="color:rgb(136,0,0);">20</span> <span class="hljs-number" style="color:rgb(136,0,0);">77</span> <span class="hljs-number" style="color:rgb(136,0,0);">6</span>F <span class="hljs-number" style="color:rgb(136,0,0);">72</span> <span class="hljs-number" style="color:rgb(136,0,0);">6</span>C <span class="hljs-number" style="color:rgb(136,0,0);">64</span> <span class="hljs-number" style="color:rgb(136,0,0);">21</span> <span class="hljs-number" style="color:rgb(136,0,0);">0</span>D          Hello world!. }</pre>
<span style="font-size:16px;">自此，咱们的第一个 Flume Agent 算是部署成功了！</span>
<h2 style="font-size:18px;font-family:inherit;line-height:1.6em;color:inherit;text-indent:1em;">
3.2 单节点 Flume 直接写入 HDFS</h2>
<pre><code class="language-ruby"><span class="hljs-comment" style="color:rgb(136,136,136);"># Define a memory channel called ch1 on agent1</span>
agent1.channels.ch1.type = memory
agent1.channels.ch1.capacity = <span class="hljs-number" style="color:rgb(136,0,0);">100000</span>
agent1.channels.ch1.transactionCapacity = <span class="hljs-number" style="color:rgb(136,0,0);">100000</span>
agent1.channels.ch1.keep-alive = <span class="hljs-number" style="color:rgb(136,0,0);">30</span>

<span class="hljs-comment" style="color:rgb(136,136,136);"># Define an Avro source called avro-source1 on agent1 and tell it</span>
<span class="hljs-comment" style="color:rgb(136,136,136);"># to bind to 0.0.0.0:41414. Connect it to channel ch1.</span>
<span class="hljs-comment" style="color:rgb(136,136,136);">#agent1.sources.avro-source1.channels = ch1</span>
<span class="hljs-comment" style="color:rgb(136,136,136);">#agent1.sources.avro-source1.type = avro</span>
<span class="hljs-comment" style="color:rgb(136,136,136);">#agent1.sources.avro-source1.bind = 0.0.0.0</span>
<span class="hljs-comment" style="color:rgb(136,136,136);">#agent1.sources.avro-source1.port = 41414</span>
<span class="hljs-comment" style="color:rgb(136,136,136);">#agent1.sources.avro-source1.threads = 5</span>

<span class="hljs-comment" style="color:rgb(136,136,136);">#define source monitor a file</span>
agent1.sources.avro-source1.type = exec
agent1.sources.avro-source1.shell = <span class="hljs-regexp" style="color:rgb(188,96,96);">/bin/bash</span> -c
agent1.sources.avro-source1.command = tail -n +<span class="hljs-number" style="color:rgb(136,0,0);">0</span> -F /home/storm/tmp/id.txt
agent1.sources.avro-source1.channels = ch1
agent1.sources.avro-source1.threads = <span class="hljs-number" style="color:rgb(136,0,0);">5</span>

<span class="hljs-comment" style="color:rgb(136,136,136);"># Define a logger sink that simply logs all events it receives</span>
<span class="hljs-comment" style="color:rgb(136,136,136);"># and connect it to the other end of the same channel.</span>
agent1.sinks.log-sink1.channel = ch1
agent1.sinks.log-sink1.type = hdfs
agent1.sinks.log-sink1.hdfs.path = <span class="hljs-symbol" style="color:rgb(188,96,96);">hdfs:</span>/<span class="hljs-regexp" style="color:rgb(188,96,96);">/192.168.1.111:8020/flume</span>Test
agent1.sinks.log-sink1.hdfs.writeFormat = Text
agent1.sinks.log-sink1.hdfs.fileType = DataStream
agent1.sinks.log-sink1.hdfs.rollInterval = <span class="hljs-number" style="color:rgb(136,0,0);">0</span>
agent1.sinks.log-sink1.hdfs.rollSize = <span class="hljs-number" style="color:rgb(136,0,0);">1000000</span>
agent1.sinks.log-sink1.hdfs.rollCount = <span class="hljs-number" style="color:rgb(136,0,0);">0</span>
agent1.sinks.log-sink1.hdfs.batchSize = <span class="hljs-number" style="color:rgb(136,0,0);">1000</span>
agent1.sinks.log-sink1.hdfs.txnEventMax = <span class="hljs-number" style="color:rgb(136,0,0);">1000</span>
agent1.sinks.log-sink1.hdfs.callTimeout = <span class="hljs-number" style="color:rgb(136,0,0);">60000</span>
agent1.sinks.log-sink1.hdfs.appendTimeout = <span class="hljs-number" style="color:rgb(136,0,0);">60000</span>

<span class="hljs-comment" style="color:rgb(136,136,136);"># Finally, now that we've defined all of our components, tell</span>
<span class="hljs-comment" style="color:rgb(136,136,136);"># agent1 which ones we want to activate.</span>
agent1.channels = ch1
agent1.sources = avro-source1
agent1.sinks = log-sink1</code></pre>
<span style="font-size:16px;">启动如下命令，就可以在 hdfs 上看到效果了。</span>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
</p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
../bin/flume-ng agent --conf ../conf/ -f flume_directHDFS.conf -n agent1 -Dflume.root.logger=INFO,console</p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
</p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
</p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
PS：实际环境中有这样的需求，通过在多个agent端tail日志，发送给collector，collector再把数据收集，统一发送给HDFS存储起来，当HDFS文件大小超过一定的大小或者超过在规定的时间间隔会生成一个文件。</p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
Flume 实现了两个Trigger，分别为SizeTriger（在调用HDFS输出流写的同时，count该流已经写入的大小总和，若超过一定大小，则创建新的文件和输出流，写入操作指向新的输出流，同时close以前的输出流）和TimeTriger（开启定时器，当到达该点时，自动创建新的文件和输出流，新的写入重定向到该流中，同时close以前的输出流）。</p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
</p>
<h2 style="font-size:18px;font-family:inherit;line-height:1.6em;color:inherit;text-indent:1em;">
3.3 来一个常见架 构：多 agent 汇聚写入 HDFS</h2>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
<img src="http://img0.tuicool.com/2aIj6z.png!web" alt="A fan-in flow using Avro RPC to consolidate events in one place" class="alignCenter" style="vertical-align:middle;border:0px none;text-align:center;display:block;"></p>
<h3 style="font-size:18px;font-family:inherit;line-height:1.6em;color:inherit;text-indent:1em;">
3.3.1 在各个webserv日志机上配置 Flume Client</h3>
<pre class="prettyprint hljs haskell" style="font-size:14px;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(68,68,68);line-height:1.5em;background-color:rgb(246,246,246);border:none;"><span class="hljs-meta" style="color:rgb(31,113,153);"># clientMainAgent</span>
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">clientMainAgent</span>.channels = c1
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">clientMainAgent</span>.sources  = s1
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">clientMainAgent</span>.sinks    = k1 k2
<span class="hljs-meta" style="color:rgb(31,113,153);"># clientMainAgent sinks group</span>
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">clientMainAgent</span>.sinkgroups = g1
<span class="hljs-meta" style="color:rgb(31,113,153);"># clientMainAgent Spooling Directory Source</span>
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">clientMainAgent</span>.sources.s1.<span class="hljs-class"><span class="hljs-keyword" style="color:rgb(51,51,51);font-weight:700;">type</span> = spooldir</span>
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">clientMainAgent</span>.sources.s1.spoolDir  =/dsap/rawdata/
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">clientMainAgent</span>.sources.s1.fileHeader = true
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">clientMainAgent</span>.sources.s1.deletePolicy =immediate
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">clientMainAgent</span>.sources.s1.batchSize =<span class="hljs-number" style="color:rgb(136,0,0);">1000</span>
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">clientMainAgent</span>.sources.s1.channels =c1
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">clientMainAgent</span>.sources.s1.deserializer.maxLineLength =<span class="hljs-number" style="color:rgb(136,0,0);">1048576</span>
<span class="hljs-meta" style="color:rgb(31,113,153);"># clientMainAgent FileChannel</span>
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">clientMainAgent</span>.channels.c1.<span class="hljs-class"><span class="hljs-keyword" style="color:rgb(51,51,51);font-weight:700;">type</span> = file</span>
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">clientMainAgent</span>.channels.c1.checkpointDir = /var/flume/fchannel/spool/checkpoint
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">clientMainAgent</span>.channels.c1.dataDirs = /var/flume/fchannel/spool/<span class="hljs-class"><span class="hljs-keyword" style="color:rgb(51,51,51);font-weight:700;">data</span></span>
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">clientMainAgent</span>.channels.c1.capacity = <span class="hljs-number" style="color:rgb(136,0,0);">200000000</span>
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">clientMainAgent</span>.channels.c1.keep-alive = <span class="hljs-number" style="color:rgb(136,0,0);">30</span>
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">clientMainAgent</span>.channels.c1.write-timeout = <span class="hljs-number" style="color:rgb(136,0,0);">30</span>
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">clientMainAgent</span>.channels.c1.checkpoint-timeout=<span class="hljs-number" style="color:rgb(136,0,0);">600</span>
<span class="hljs-meta" style="color:rgb(31,113,153);"># clientMainAgent Sinks</span>
<span class="hljs-meta" style="color:rgb(31,113,153);"># k1 sink</span>
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">clientMainAgent</span>.sinks.k1.channel = c1
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">clientMainAgent</span>.sinks.k1.<span class="hljs-class"><span class="hljs-keyword" style="color:rgb(51,51,51);font-weight:700;">type</span> = avro</span>
<span class="hljs-meta" style="color:rgb(31,113,153);"># connect to CollectorMainAgent</span>
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">clientMainAgent</span>.sinks.k1.hostname = flume115
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">clientMainAgent</span>.sinks.k1.port = <span class="hljs-number" style="color:rgb(136,0,0);">41415</span> 
<span class="hljs-meta" style="color:rgb(31,113,153);"># k2 sink</span>
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">clientMainAgent</span>.sinks.k2.channel = c1
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">clientMainAgent</span>.sinks.k2.<span class="hljs-class"><span class="hljs-keyword" style="color:rgb(51,51,51);font-weight:700;">type</span> = avro</span>
<span class="hljs-meta" style="color:rgb(31,113,153);"># connect to CollectorBackupAgent</span>
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">clientMainAgent</span>.sinks.k2.hostname = flume116
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">clientMainAgent</span>.sinks.k2.port = <span class="hljs-number" style="color:rgb(136,0,0);">41415</span>
<span class="hljs-meta" style="color:rgb(31,113,153);"># clientMainAgent sinks group</span>
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">clientMainAgent</span>.sinkgroups.g1.sinks = k1 k2
<span class="hljs-meta" style="color:rgb(31,113,153);"># load_balance type</span>
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">clientMainAgent</span>.sinkgroups.g1.processor.<span class="hljs-class"><span class="hljs-keyword" style="color:rgb(51,51,51);font-weight:700;">type</span> = load_balance</span>
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">clientMainAgent</span>.sinkgroups.g1.processor.backoff   = true
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">clientMainAgent</span>.sinkgroups.g1.processor.selector  = random</pre>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
</p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
../bin/flume-ng agent --conf ../conf/ -f flume_Consolidation.conf -n clientMainAgent -Dflume.root.logger=DEBUG,console</p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
</p>
<h3 style="font-size:18px;font-family:inherit;line-height:1.6em;color:inherit;text-indent:1em;">
3.3.2 在汇聚节点配置 Flume server</h3>
<pre class="prettyprint hljs haskell" style="font-size:14px;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(68,68,68);line-height:1.5em;background-color:rgb(246,246,246);border:none;"><span class="hljs-meta" style="color:rgb(31,113,153);"># collectorMainAgent</span>
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">collectorMainAgent</span>.channels = c2
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">collectorMainAgent</span>.sources  = s2
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">collectorMainAgent</span>.sinks    =k1 k2
<span class="hljs-meta" style="color:rgb(31,113,153);"># collectorMainAgent AvroSource</span>
<span class="hljs-meta" style="color:rgb(31,113,153);">#</span>
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">collectorMainAgent</span>.sources.s2.<span class="hljs-class"><span class="hljs-keyword" style="color:rgb(51,51,51);font-weight:700;">type</span> = avro</span>
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">collectorMainAgent</span>.sources.s2.bind = flume115
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">collectorMainAgent</span>.sources.s2.port = <span class="hljs-number" style="color:rgb(136,0,0);">41415</span>
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">collectorMainAgent</span>.sources.s2.channels = c2

<span class="hljs-meta" style="color:rgb(31,113,153);"># collectorMainAgent FileChannel</span>
<span class="hljs-meta" style="color:rgb(31,113,153);">#</span>
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">collectorMainAgent</span>.channels.c2.<span class="hljs-class"><span class="hljs-keyword" style="color:rgb(51,51,51);font-weight:700;">type</span> = file</span>
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">collectorMainAgent</span>.channels.c2.checkpointDir =/opt/var/flume/fchannel/spool/checkpoint
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">collectorMainAgent</span>.channels.c2.dataDirs = /opt/var/flume/fchannel/spool/<span class="hljs-class"><span class="hljs-keyword" style="color:rgb(51,51,51);font-weight:700;">data</span>,/work/flume/fchannel/spool/<span class="hljs-keyword" style="color:rgb(51,51,51);font-weight:700;">data</span></span>
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">collectorMainAgent</span>.channels.c2.capacity = <span class="hljs-number" style="color:rgb(136,0,0);">200000000</span>
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">collectorMainAgent</span>.channels.c2.transactionCapacity=<span class="hljs-number" style="color:rgb(136,0,0);">6000</span>
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">collectorMainAgent</span>.channels.c2.checkpointInterval=<span class="hljs-number" style="color:rgb(136,0,0);">60000</span>
<span class="hljs-meta" style="color:rgb(31,113,153);"># collectorMainAgent hdfsSink</span>
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">collectorMainAgent</span>.sinks.k2.<span class="hljs-class"><span class="hljs-keyword" style="color:rgb(51,51,51);font-weight:700;">type</span> = hdfs</span>
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">collectorMainAgent</span>.sinks.k2.channel = c2
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">collectorMainAgent</span>.sinks.k2.hdfs.path = hdfs://db-cdh-cluster/flume%{dir}
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">collectorMainAgent</span>.sinks.k2.hdfs.filePrefix =k2_%{file}
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">collectorMainAgent</span>.sinks.k2.hdfs.inUsePrefix =_
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">collectorMainAgent</span>.sinks.k2.hdfs.inUseSuffix =.tmp
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">collectorMainAgent</span>.sinks.k2.hdfs.rollSize = <span class="hljs-number" style="color:rgb(136,0,0);">0</span>
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">collectorMainAgent</span>.sinks.k2.hdfs.rollCount = <span class="hljs-number" style="color:rgb(136,0,0);">0</span>
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">collectorMainAgent</span>.sinks.k2.hdfs.rollInterval = <span class="hljs-number" style="color:rgb(136,0,0);">240</span>
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">collectorMainAgent</span>.sinks.k2.hdfs.writeFormat = <span class="hljs-type" style="color:rgb(136,0,0);">Text</span>
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">collectorMainAgent</span>.sinks.k2.hdfs.fileType = <span class="hljs-type" style="color:rgb(136,0,0);">DataStream</span>
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">collectorMainAgent</span>.sinks.k2.hdfs.batchSize = <span class="hljs-number" style="color:rgb(136,0,0);">6000</span>
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">collectorMainAgent</span>.sinks.k2.hdfs.callTimeout = <span class="hljs-number" style="color:rgb(136,0,0);">60000</span>
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">collectorMainAgent</span>.sinks.k1.<span class="hljs-class"><span class="hljs-keyword" style="color:rgb(51,51,51);font-weight:700;">type</span> = hdfs</span>
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">collectorMainAgent</span>.sinks.k1.channel = c2
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">collectorMainAgent</span>.sinks.k1.hdfs.path = hdfs://db-cdh-cluster/flume%{dir}
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">collectorMainAgent</span>.sinks.k1.hdfs.filePrefix =k1_%{file}
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">collectorMainAgent</span>.sinks.k1.hdfs.inUsePrefix =_
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">collectorMainAgent</span>.sinks.k1.hdfs.inUseSuffix =.tmp
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">collectorMainAgent</span>.sinks.k1.hdfs.rollSize = <span class="hljs-number" style="color:rgb(136,0,0);">0</span>
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">collectorMainAgent</span>.sinks.k1.hdfs.rollCount = <span class="hljs-number" style="color:rgb(136,0,0);">0</span>
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">collectorMainAgent</span>.sinks.k1.hdfs.rollInterval = <span class="hljs-number" style="color:rgb(136,0,0);">240</span>
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">collectorMainAgent</span>.sinks.k1.hdfs.writeFormat = <span class="hljs-type" style="color:rgb(136,0,0);">Text</span>
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">collectorMainAgent</span>.sinks.k1.hdfs.fileType = <span class="hljs-type" style="color:rgb(136,0,0);">DataStream</span>
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">collectorMainAgent</span>.sinks.k1.hdfs.batchSize = <span class="hljs-number" style="color:rgb(136,0,0);">6000</span>
<span class="hljs-title" style="color:rgb(136,0,0);font-weight:bold;">collectorMainAgent</span>.sinks.k1.hdfs.callTimeout = <span class="hljs-number" style="color:rgb(136,0,0);">60000</span></pre>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
</p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
../bin/flume-ng agent --conf ../conf/ -f flume_Consolidation.conf -n collectorMainAgent -Dflume.root.logger=DEBUG,console</p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
</p>
<span style="font-size:16px;">上面采用的就是类似 cs 架构，各个 flume agent 节点先将各台机器的日志汇总到 Consolidation 节点，然后再由这些节点统一写入 HDFS，并且采用了负载均衡的方式，你还可以配置高可用的模式等等。</span>
<h2 style="font-size:18px;font-family:inherit;line-height:1.6em;color:inherit;text-indent:1em;">
4、可能遇到的问题：</h2>
<h2 style="font-size:18px;font-family:inherit;line-height:1.6em;color:inherit;text-indent:1em;">
4.1 OOM 问题：</h2>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
</p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
flume 报错 java.lang.OutOfMemoryError: GC overhead limit exceeded</p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
</p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
</p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
或者：java.lang.OutOfMemoryError: Java heap space</p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
Exception in thread "SinkRunner-PollingRunner-DefaultSinkProcessor" java.lang.OutOfMemoryError: Java heap space</p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
</p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
</p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
试试在 .bashrc 或 env.sh 中添加启动参数: </p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
export JAVA_OPTS="-Xms8192m -Xmx8192m -Xss256k -Xmn2g -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:-UseGCOverheadLimit"</p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
</p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
具体参见：</p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
<a href="http://stackoverflow.com/questions/1393486/error-java-lang-outofmemoryerror-gc-overhead-limit-exceeded" rel="nofollow" style="color:rgb(148,148,148);text-decoration:none;border-bottom:1px dashed rgb(148,148,148);font-style:italic;font-weight:bold;">http://stackoverflow.com/questions/1393486/error-java-lang-outofmemoryerror-gc-overhead-limit-exceeded</a></p>
<h2 style="font-size:18px;font-family:inherit;line-height:1.6em;color:inherit;text-indent:1em;">
4.2 JDK 版本不兼容问题：</h2>
<pre class="prettyprint hljs vim" style="font-size:14px;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(68,68,68);line-height:1.5em;background-color:rgb(246,246,246);border:none;"><span class="hljs-number" style="color:rgb(136,0,0);">2014</span>-<span class="hljs-number" style="color:rgb(136,0,0);">07</span>-<span class="hljs-number" style="color:rgb(136,0,0);">07</span> <span class="hljs-number" style="color:rgb(136,0,0);">14</span>:<span class="hljs-number" style="color:rgb(136,0,0);">44</span>:<span class="hljs-number" style="color:rgb(136,0,0);">17</span>,<span class="hljs-number" style="color:rgb(136,0,0);">902</span> (agent-shutdown-hook) [WARN - org.apache.flume.sink.hdfs.HDFSEventSink.<span class="hljs-keyword" style="color:rgb(51,51,51);font-weight:700;">stop</span>(HDFSEventSink.jav<span class="hljs-variable" style="color:rgb(188,96,96);">a:504</span>)] Exception <span class="hljs-keyword" style="color:rgb(51,51,51);font-weight:700;">while</span> closing hdf<span class="hljs-variable" style="color:rgb(188,96,96);">s:</span>//<span class="hljs-number" style="color:rgb(136,0,0);">192.168</span>.<span class="hljs-number" style="color:rgb(136,0,0);">1.111</span>:<span class="hljs-number" style="color:rgb(136,0,0);">8020</span>/flumeTest/FlumeData. Exception follows.
java.lang.UnsupportedOperationException: This <span class="hljs-keyword" style="color:rgb(51,51,51);font-weight:700;">is</span> supposed <span class="hljs-keyword" style="color:rgb(51,51,51);font-weight:700;">to</span> <span class="hljs-keyword" style="color:rgb(51,51,51);font-weight:700;">be</span> overridden by subclasses.
	at <span class="hljs-keyword" style="color:rgb(51,51,51);font-weight:700;">com</span>.google.protobuf.GeneratedMessage.getUnknownFields(GeneratedMessage.jav<span class="hljs-variable" style="color:rgb(188,96,96);">a:180</span>)
	at org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos$GetFileInfoRequestProto.getSerializedSize(ClientNamenodeProtocolProtos.jav<span class="hljs-variable" style="color:rgb(188,96,96);">a:30108</span>)
	at <span class="hljs-keyword" style="color:rgb(51,51,51);font-weight:700;">com</span>.google.protobuf.AbstractMessageLite.toByteString(AbstractMessageLite.jav<span class="hljs-variable" style="color:rgb(188,96,96);">a:49</span>)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Invoker.constructRpcRequest(ProtobufRpcEngine.jav<span class="hljs-variable" style="color:rgb(188,96,96);">a:149</span>)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Invoker.invoke(ProtobufRpcEngine.jav<span class="hljs-variable" style="color:rgb(188,96,96);">a:193</span>)</pre>
<span style="font-size:16px;">把你的 jdk7 换成 jdk6 试试。</span>
<h2 style="font-size:18px;font-family:inherit;line-height:1.6em;color:inherit;text-indent:1em;">
5、Refe r：</h2>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
（1） scribe、chukwa、kafka、flume日志系统对比  </p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
<a href="http://www.ttlsa.com/log-system/scribe-chukwa-kafka-flume-log-system-contrast/" rel="nofollow" style="color:rgb(148,148,148);text-decoration:none;border-bottom:1px dashed rgb(148,148,148);font-style:italic;font-weight:bold;">http://www.ttlsa.com/log-system/scribe-chukwa-kafka-flume-log-system-contrast/</a></p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
（2） 关于Flume-ng那些事   <a href="http://www.ttlsa.com/?s=flume" rel="nofollow" style="color:rgb(148,148,148);text-decoration:none;border-bottom:1px dashed rgb(148,148,148);font-style:italic;font-weight:bold;">http://www.ttlsa.com/?s=flume</a></p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
          关于Flume-ng那些事（三）：常见架构测试   <a href="http://www.ttlsa.com/log-system/about-flume-ng-3/" rel="nofollow" style="color:rgb(148,148,148);text-decoration:none;border-bottom:1px dashed rgb(148,148,148);font-style:italic;font-weight:bold;">http://www.ttlsa.com/log-system/about-flume-ng-3/</a></p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
（3） Flume 1.4.0 User Guide</p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
<a href="http://archive.cloudera.com/cdh4/cdh/4/flume-ng-1.4.0-cdh4.7.0/FlumeUserGuide.html" rel="nofollow" style="color:rgb(148,148,148);text-decoration:none;border-bottom:1px dashed rgb(148,148,148);font-style:italic;font-weight:bold;">http://archive.cloudera.com/cdh4/cdh/4/flume-ng-1.4.0-cdh4.7.0/FlumeUserGuide.html</a></p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
（4） flume日志采集   <a href="http://blog.csdn.net/sunmeng_007/article/details/9762507" rel="nofollow" style="color:rgb(148,148,148);text-decoration:none;border-bottom:1px dashed rgb(148,148,148);font-style:italic;font-weight:bold;">http://blog.csdn.net/sunmeng_007/article/details/9762507</a></p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
（5） Flume-NG + HDFS + HIVE 日志收集分析</p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
<a href="http://eyelublog.wordpress.com/2013/01/13/flume-ng-hdfs-hive-%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E5%88%86%E6%9E%90/" rel="nofollow" style="color:rgb(148,148,148);text-decoration:none;border-bottom:1px dashed rgb(148,148,148);font-style:italic;font-weight:bold;">http://eyelublog.wordpress.com/2013/01/13/flume-ng-hdfs-hive-%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E5%88%86%E6%9E%90/</a></p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
（6） 【Twitter Storm系列】flume-ng+Kafka+Storm+HDFS 实时系统搭建</p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
<a href="http://blog.csdn.net/weijonathan/article/details/18301321" rel="nofollow" style="color:rgb(148,148,148);text-decoration:none;border-bottom:1px dashed rgb(148,148,148);font-style:italic;font-weight:bold;">http://blog.csdn.net/weijonathan/article/details/18301321</a></p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
（7） Flume-NG + HDFS + PIG 日志收集分析</p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
<a href="http://hi.baidu.com/life_to_you/item/a98e2ec3367486dbef183b5e" rel="nofollow" style="color:rgb(148,148,148);text-decoration:none;border-bottom:1px dashed rgb(148,148,148);font-style:italic;font-weight:bold;">http://hi.baidu.com/life_to_you/item/a98e2ec3367486dbef183b5e</a></p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
flume 示例一收集tomcat日志   <a href="http://my.oschina.net/88sys/blog/71529" rel="nofollow" style="color:rgb(148,148,148);text-decoration:none;border-bottom:1px dashed rgb(148,148,148);font-style:italic;font-weight:bold;">http://my.oschina.net/88sys/blog/71529</a></p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
flume-ng 多节点集群示例   <a href="http://my.oschina.net/u/1401580/blog/204052" rel="nofollow" style="color:rgb(148,148,148);text-decoration:none;border-bottom:1px dashed rgb(148,148,148);font-style:italic;font-weight:bold;">http://my.oschina.net/u/1401580/blog/204052</a></p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
</p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
试用flume-ng 1.1    <a href="http://heipark.iteye.com/blog/1617995" rel="nofollow" style="color:rgb(148,148,148);text-decoration:none;border-bottom:1px dashed rgb(148,148,148);font-style:italic;font-weight:bold;">http://heipark.iteye.com/blog/1617995</a></p>
<p style="font-size:16px;line-height:1.7em;text-indent:1em;">
</p>
</div>
</div>
<div class="article_social" style="color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', '微软雅黑', sans-serif;font-size:14px;">
<div class="article_like" style="width:70px;"></div>
</div>
            </div>
                </div>