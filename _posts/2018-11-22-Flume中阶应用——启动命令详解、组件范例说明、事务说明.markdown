---
layout:     post
title:      Flume中阶应用——启动命令详解、组件范例说明、事务说明
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <div id="content_views" class="markdown_views prism-tomorrow-night-eighties">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<h3><a id="flume_2"></a>flume启动命令详解</h3>
<pre><code class="prism language-java">Usage<span class="token operator">:</span> <span class="token punctuation">.</span>/flume<span class="token operator">-</span>ng <span class="token generics function"><span class="token punctuation">&lt;</span>command<span class="token punctuation">&gt;</span></span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

commands<span class="token operator">:</span>
  help                      display <span class="token keyword">this</span> help text  #显示帮助信息
  agent                     run a Flume agent  #启动flume代理
  avro<span class="token operator">-</span>client               run an avro Flume client	#启动avro代理
  version                   show Flume version info		#显示版本信息

global options<span class="token operator">:</span>
  <span class="token operator">--</span>conf<span class="token punctuation">,</span><span class="token operator">-</span>c <span class="token generics function"><span class="token punctuation">&lt;</span>conf<span class="token punctuation">&gt;</span></span>          use configs in <span class="token generics function"><span class="token punctuation">&lt;</span>conf<span class="token punctuation">&gt;</span></span> directory  #指定配置资源的目录，后面跟路径
  <span class="token operator">--</span>classpath<span class="token punctuation">,</span><span class="token operator">-</span>C <span class="token generics function"><span class="token punctuation">&lt;</span>cp<span class="token punctuation">&gt;</span></span>       append to the classpath	#追加一个classpath
  <span class="token operator">--</span>dryrun<span class="token punctuation">,</span><span class="token operator">-</span>d               <span class="token keyword">do</span> not actually start Flume<span class="token punctuation">,</span> just print the command  #不运行flume指令，只进行打印信息的操作
  <span class="token operator">--</span>plugins<span class="token operator">-</span>path <span class="token generics function"><span class="token punctuation">&lt;</span>dirs<span class="token punctuation">&gt;</span></span>     colon<span class="token operator">-</span>separated list of plugins<span class="token punctuation">.</span>d directories<span class="token punctuation">.</span> See the
                            plugins<span class="token punctuation">.</span>d section in the user guide <span class="token keyword">for</span> more details<span class="token punctuation">.</span>
                            Default<span class="token operator">:</span> $FLUME_HOME<span class="token operator">/</span>plugins<span class="token punctuation">.</span>d	#插件目录，默认$FLUME_HOME<span class="token operator">/</span>plugins<span class="token punctuation">.</span>d
  <span class="token operator">-</span>Dproperty<span class="token operator">=</span>value          sets a Java system property value	#设置一个JAVA的系统属性
  <span class="token operator">-</span>Xproperty<span class="token operator">=</span>value          sets a Java <span class="token operator">-</span>X option	#设置一个JAVA<span class="token operator">-</span>X的选项

agent options<span class="token operator">:</span> #启动agent的相关配置
  <span class="token operator">--</span>name<span class="token punctuation">,</span><span class="token operator">-</span>n <span class="token generics function"><span class="token punctuation">&lt;</span>name<span class="token punctuation">&gt;</span></span>          the name of <span class="token keyword">this</span> agent <span class="token punctuation">(</span>required<span class="token punctuation">)</span>	#配置agent的名称
  <span class="token operator">--</span>conf<span class="token operator">-</span>file<span class="token punctuation">,</span><span class="token operator">-</span>f <span class="token generics function"><span class="token punctuation">&lt;</span>file<span class="token punctuation">&gt;</span></span>     specify a config file <span class="token punctuation">(</span>required <span class="token keyword">if</span> <span class="token operator">-</span>z missing<span class="token punctuation">)</span>  #指定配置文件
  <span class="token operator">--</span>zkConnString<span class="token punctuation">,</span><span class="token operator">-</span>z <span class="token generics function"><span class="token punctuation">&lt;</span>str<span class="token punctuation">&gt;</span></span>   specify the ZooKeeper connection to use <span class="token punctuation">(</span>required <span class="token keyword">if</span> <span class="token operator">-</span>f missing<span class="token punctuation">)</span> #以zk为配置中心，指定zookeeper的连接
  <span class="token operator">--</span>zkBasePath<span class="token punctuation">,</span><span class="token operator">-</span>p <span class="token generics function"><span class="token punctuation">&lt;</span>path<span class="token punctuation">&gt;</span></span>    specify the base path in ZooKeeper <span class="token keyword">for</span> agent configs
  <span class="token operator">--</span>no<span class="token operator">-</span>reload<span class="token operator">-</span>conf          <span class="token keyword">do</span> not reload config file <span class="token keyword">if</span> changed
  <span class="token operator">--</span>help<span class="token punctuation">,</span><span class="token operator">-</span>h                 display help text

avro<span class="token operator">-</span>client options<span class="token operator">:</span> #启动avro Client的相关配置
  <span class="token operator">--</span>rpcProps<span class="token punctuation">,</span><span class="token operator">-</span>P <span class="token generics function"><span class="token punctuation">&lt;</span>file<span class="token punctuation">&gt;</span></span>   RPC client properties file with server connection params
  <span class="token operator">--</span>host<span class="token punctuation">,</span><span class="token operator">-</span>H <span class="token generics function"><span class="token punctuation">&lt;</span>host<span class="token punctuation">&gt;</span></span>       hostname to which events will be sent #绑定sourceIP地址
  <span class="token operator">--</span>port<span class="token punctuation">,</span><span class="token operator">-</span>p <span class="token generics function"><span class="token punctuation">&lt;</span>port<span class="token punctuation">&gt;</span></span>       port of the avro source #绑定source端口号
  <span class="token operator">--</span>dirname <span class="token generics function"><span class="token punctuation">&lt;</span>dir<span class="token punctuation">&gt;</span></span>        directory to stream to avro source	#指定source监听的目录
  <span class="token operator">--</span>filename<span class="token punctuation">,</span><span class="token operator">-</span>F <span class="token generics function"><span class="token punctuation">&lt;</span>file<span class="token punctuation">&gt;</span></span>   text file to stream to avro source <span class="token punctuation">(</span><span class="token keyword">default</span><span class="token operator">:</span> std input<span class="token punctuation">)</span> #指定source监听的文件
  <span class="token operator">--</span>headerFile<span class="token punctuation">,</span><span class="token operator">-</span>R <span class="token generics function"><span class="token punctuation">&lt;</span>file<span class="token punctuation">&gt;</span></span> File containing event headers as key<span class="token operator">/</span>value pairs on each <span class="token keyword">new</span> <span class="token class-name">line</span> #
  <span class="token operator">--</span>help<span class="token punctuation">,</span><span class="token operator">-</span>h              display help text

  Either <span class="token operator">--</span>rpcProps or both <span class="token operator">--</span>host and <span class="token operator">--</span>port must be specified<span class="token punctuation">.</span>

Note that <span class="token keyword">if</span> <span class="token generics function"><span class="token punctuation">&lt;</span>conf<span class="token punctuation">&gt;</span></span> directory is specified<span class="token punctuation">,</span> then it is always included first
in the classpath<span class="token punctuation">.</span>
</code></pre>
<p><strong>Agent的启动：</strong></p>
<blockquote>
<p>./flume-ng<br>
agent --conf …/conf --conf-file …/conf/hey01.conf --name a1<br>
-Dflume.root.logger=INFO,console</p>
</blockquote>
<p>./flume-ng agent 		-》指定启动的服务端类型</p>
<p>–conf …/conf 	-》指定配置资源的文件夹</p>
<p>–conf-file …/conf/hey01.conf 	-》指定配置文件</p>
<p>–name a1	-》定义agent的名字</p>
<p>-Dflume.root.logger=INFO,console	 -》定义sink为logger时，的输出类型</p>
<p><strong>Avro-Client的启动（当source=avro时）：</strong></p>
<blockquote>
<p>./flume-ng avro-client --conf …/conf --host 0.0.0.0 --port 44444 --filename /home/nums.txt</p>
</blockquote>
<p>./flume-ng avro-client 		-》启动avro客户端</p>
<p>–conf …/conf 		-》指定配置资源的文件夹</p>
<p>–host 0.0.0.0 		-》指定source IP地址</p>
<p>–port 44444			-》指定source端口号</p>
<p>–filename /home/nums.txt		-》指定用avro监听的文件</p>
<h3><a id="Flume_82"></a>Flume组件说明</h3>
<h4><a id="1_Event_84"></a>1 Event</h4>
<p>一个具有有效荷载的字节数据流和可选的字符串属性集。一条日志在flume中会被转换成一个JSON格式的串来传递，这个JSON串就是一个FlumeEvent，具体的格式为{header:{头信息},body:日志内容}，所以简单来说，一条日志在一个Flume就对应一个JSON串，即，一个FlumeEvent。</p>
<h4><a id="2_Agent_90"></a>2 Agent</h4>
<p>一个进程承载从外部源事件流到下一个目的地的过程。包含Source、Channel和 Sink，多个Agent之间还可以连接<br>
形成复杂的日志流动的网络。</p>
<hr>
<h4><a id="3_Source_97"></a>3 Source</h4>
<p>用来收集数据源，接受日志并封装成Event，传输到Channel。</p>
<h4><a id="4_Sink_103"></a>4 Sink</h4>
<p>目的地传送槽，获取Agent里面的数据，即消费Channel中的数据，并传送到目的地。</p>
<h4><a id="4_Channel_109"></a>4 Channel</h4>
<p>传输通道，<strong>被动</strong>接受Source传来的Event数据，暂时存储，相当于对采集到的数据进行简单的缓存，<strong>等待</strong> Sink消费。一个channel仅能对一个sink，但是在使用了Processor的前提下，一个channel可以对一个sinkgroup，也就是可以面向多个processor进行操作。</p>
<p>只有在sink将channel中的数据成功发送出去之后，channel才会将临时的event删除，这种机制保证了数据传输的可靠性和安全性。</p>
<hr>
<h4><a id="5_Selector_117"></a>5 Selector</h4>
<p>选择器，主要用在实现扇出过程中实现按照指定方式分发数据。选择器可以工作在 复制 多路复用(路由)模式 下，默认情况下，不配置Selector，则扇出采用复制机制。</p>
<h4><a id="6_Interceptor_123"></a>6 Interceptor</h4>
<p>拦截器可以拦截Event，允许或不允许Event通过，或在允许通过的时，改变Event内容，这种改变包括改变Event的体或头信息。</p>
<p>拦截器可以手动开发，只要实现org.apache.flume.interceptor.Interceptor接口，在其中编写拦截规则即可。</p>
<p>Flume也内置了很多拦截器，可以直接使用。可以同时配置多个拦截器组合成拦截器链，依次拦截Event。</p>
<h4><a id="7_Processor_133"></a>7 Processor</h4>
<p>处理器，是Flume用于实现失败恢复、负载均衡的组件，其中包含失败恢复和负载均衡两种模式。</p>
<h3><a id="Flume_139"></a>Flume常用范例说明</h3>
<h4><a id="1_Source_141"></a>1 Source</h4>
<p>1.1 Avro 序列化信息</p>
<p>监听AVRO端口来接受来自外部AVRO客户端的事件流，是实现多级流动、扇出流、扇入流等效果的基础。另外也可以接受通过flume提供的Avro客户端发送的日志信息。</p>
<pre><code class="prism language-shell"><span class="token comment">#配置Source</span>
a1.sources.r1.type <span class="token operator">=</span> avro
a1.sources.r1.bind <span class="token operator">=</span> 0.0.0.0
a1.sources.r1.port <span class="token operator">=</span> 44444
</code></pre>
<p>1.2 Exec 将命令的输出作为源</p>
<pre><code class="prism language-shell"><span class="token comment">#配置Source</span>
a1.sources.r1.type <span class="token operator">=</span> <span class="token function">exec</span>
a1.sources.r1.command <span class="token operator">=</span> <span class="token function">ping</span> www.baidu.com <span class="token comment">#设置发出的命令</span>
</code></pre>
<p>1.3 HTTP</p>
<pre><code class="prism language-shell"><span class="token comment">#配置Source</span>
a1.sources.r1.type <span class="token operator">=</span> http
a1.sources.r1.port <span class="token operator">=</span> 44444
</code></pre>
<p>通过curl命令测试</p>
<pre><code class="prism language-shell"><span class="token function">curl</span> -X POST -d <span class="token string">'[{ "headers" :{"a" : "a1","b" : "b1"},"body" : "hello~http~flume~"}]'</span> http://hadoop01:44444
</code></pre>
<p>1.4 Spooling Directory</p>
<p>将要收集的数据放置到"自动搜集"目录中。这个Source将监视该目录，并将解析新文件的出现。事件处理逻辑是可插拔的，当一个文件被完全读入信道，它会被重命名或可选的直接删除。</p>
<pre><code class="prism language-shell"><span class="token comment">#配置Source</span>
a1.sources.r1.type  <span class="token operator">=</span>  spooldir
a1.sources.r1.spoolDir <span class="token operator">=</span> /usr/local/src/flume/data <span class="token comment">#要监控的文件夹，不可以重名，不能修改</span>
</code></pre>
<h4><a id="2_Sink_186"></a>2 Sink</h4>
<p>2.1 logger</p>
<pre><code class="prism language-shell"><span class="token comment">#配置Sink</span>
a1.sinks.k1.type <span class="token operator">=</span> logger
</code></pre>
<p>2.2 File Roll 在本地文件系统中存储事件，每隔指定时长生成文件保持这段时间内收集到的日志信息</p>
<pre><code class="prism language-shell"><span class="token comment">#配置Sink</span>
a1.sinks.k1.type <span class="token operator">=</span> file_roll
a1.sinks.k1.sink.directory <span class="token operator">=</span> /home/fresult <span class="token comment">#指定文件目录</span>
</code></pre>
<p>2.3 HDFS</p>
<pre><code class="prism language-shell"><span class="token comment">#配置Sink</span>
a1.sinks.k1.type <span class="token operator">=</span> hdfs
a1.sinks.k1.hdfs.path <span class="token operator">=</span> hdfs://hadoop01:9000/flumedata
a1.sinks.k1.hdfs.fileType <span class="token operator">=</span> DataStream  <span class="token comment">#配置生成的文件的格式，目前支持  SequenceFile, DataStream or CompressedStream</span>
</code></pre>
<p>2.4 Avro</p>
<pre><code class="prism language-shell"><span class="token comment">#配置Agent</span>
a1.sinks.k1.type <span class="token operator">=</span> avro
a1.sinks.k1.hostname <span class="token operator">=</span> hadoop02
a1.sinks.k1.port <span class="token operator">=</span> 44444
</code></pre>
<h4><a id="3_Channel_221"></a>3 Channel</h4>
<p>3.1 Memory</p>
<p>事件将被存储在内存中的具有指定大小的队列中。速度快，但断电会丢失数据。非常适合那些需要高吞吐量但是可以容忍极端情况下会丢失数据的场景下。</p>
<pre><code class="prism language-shell"><span class="token comment">#配置Channel</span>
a1.channels.c1.type <span class="token operator">=</span> memory
a1.channels.c1.capacity <span class="token operator">=</span> 1000 <span class="token comment">#通道中最多可以存放的事件的数量</span>
a1.channels.c1.transactionCapacity <span class="token operator">=</span> 100  <span class="token comment">#一个事务中最多持有的事件的数量</span>
</code></pre>
<p>3.2 File</p>
<p>事件将被存储在磁盘中的文件中，特点是速度慢，但断电不会丢失数据，非常适合那些需要高可靠性 可恢复，但性能要求不高的场景。</p>
<pre><code class="prism language-shell"><span class="token comment">#配置Channel</span>
a1.channels.c1.type <span class="token operator">=</span> <span class="token function">file</span>
a1.channels.c1.checkpointDir <span class="token operator">=</span> /home/centos/flume/chk <span class="token comment">#检查点文件存放的目录</span>
a1.channels.c1.dataDirs <span class="token operator">=</span> /home/centos/flume/data <span class="token comment">#日志数据存储的路径，可以配置多个</span>
</code></pre>
<h4><a id="4_Selector_245"></a>4 Selector</h4>
<pre><code class="prism language-shell"><span class="token comment">#配置Source</span>
a1.sources.r1.type <span class="token operator">=</span> http
a1.sources.r1.port <span class="token operator">=</span> 44444
a1.sources.r1.selector.type <span class="token operator">=</span> multiplexing <span class="token comment">#指定选择器工作模式为多路复用</span>
a1.sources.r1.selector.header <span class="token operator">=</span> gender <span class="token comment">#选择用于识别的信息头</span>
a1.sources.r1.selector.mapping.male <span class="token operator">=</span> c1  <span class="token comment">#分配规则，选择对应信息体的路由</span>
a1.sources.r1.selector.mapping.female <span class="token operator">=</span> c2  <span class="token comment">#分配规则，选择对应信息体的路由</span>
a1.sources.r1.selector.default <span class="token operator">=</span> c1 <span class="token comment">#对未定义的信息或不是对应的信息设置路由</span>
</code></pre>
<h4><a id="5_Interceptor_258"></a>5 Interceptor</h4>
<p>5.1 Timestamp Interceptor</p>
<p>时间戳拦截器，拦截到Event后，允许通过，但在头信息中增加时间戳头信息。</p>
<pre><code class="prism language-shell"><span class="token comment">#配置Source</span>
a1.sources.r1.type <span class="token operator">=</span> http
a1.sources.r1.port <span class="token operator">=</span> 44444
a1.sources.r1.interceptors <span class="token operator">=</span> i1
a1.sources.r1.interceptors.i1.type <span class="token operator">=</span> timestamp
a1.sources.r1.interceptors.i1.header <span class="token operator">=</span> timestamp <span class="token comment">#新增出的头的名称，默认是timestamp</span>
a1.sources.r1.interceptors.i1.preserveExisting <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token comment">#如果时间戳头信息存在是否要保持，默认false</span>

</code></pre>
<p>5.2 Host Interceptor</p>
<p>主机名拦截器，拦截下Event后，允许通过，但在头信息中增加主机名或IP头信息。</p>
<pre><code class="prism language-shell"><span class="token comment">#配置Source</span>
a1.sources.r1.type <span class="token operator">=</span> http
a1.sources.r1.port <span class="token operator">=</span> 44444
a1.sources.r1.interceptors <span class="token operator">=</span> i1
a1.sources.r1.interceptors.i1.type <span class="token operator">=</span> host
a1.sources.r1.interceptors.i1.useIP <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">#默认true为使用IP，false为使用主机名</span>
a1.sources.r1.interceptors.i1.hostHeader <span class="token operator">=</span> host <span class="token comment">#增加的头的名称，默认是host</span>
</code></pre>
<p>5.3 Static Interceptor</p>
<p>静态拦截器，拦截下Event之后，允许通过，但要增加上指定的头和值。</p>
<pre><code class="prism language-shell"><span class="token comment">#配置Source</span>
a1.sources.r1.type <span class="token operator">=</span> http
a1.sources.r1.port <span class="token operator">=</span> 44444
a1.sources.r1.interceptors <span class="token operator">=</span> i2
a1.sources.r1.interceptors.i2.type <span class="token operator">=</span> static
a1.sources.r1.interceptors.i2.key <span class="token operator">=</span> country <span class="token comment">#增加头的名字，默认为key</span>
a1.sources.r1.interceptors.i2.value <span class="token operator">=</span> China <span class="token comment">#增加的头的值，默认为value</span>
</code></pre>
<p>5.4 UUID Interceptor</p>
<p>UUID拦截器，拦截下Event之后，允许通过，但要在头上增加上一个UUID唯一表示作为头。</p>
<pre><code class="prism language-shell"><span class="token comment">#配置Source</span>
a1.sources.r1.type <span class="token operator">=</span> http
a1.sources.r1.port <span class="token operator">=</span> 44444
a1.sources.r1.interceptors <span class="token operator">=</span> i3
a1.sources.r1.interceptors.i3.type <span class="token operator">=</span> org.apache.flume.sink.solr.morphline.UUIDInterceptor<span class="token variable">$Builder</span> <span class="token comment">#必须是这个</span>
a1.sources.r1.interceptors.i3.headerName <span class="token operator">=</span> <span class="token function">id</span> <span class="token comment">#header的头，默认id</span>
a1.sources.r1.interceptors.i3.preserveExisting <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">#是否保留原id的头，默认true</span>
a1.sources.r1.interceptors.i3.prefix <span class="token operator">=</span> <span class="token string">""</span> <span class="token comment">#在UUID值前要增加什么前缀，默认不增加</span>
</code></pre>
<p>5.5 Search and Replace Interceptor</p>
<p>搜索和替换拦截器，拦截下Event后，通过正则匹配日志中的体，将符合正则的部分替换为指定的内容。</p>
<pre><code class="prism language-shell"><span class="token comment">#配置Source</span>
a1.sources.r1.type <span class="token operator">=</span> http
a1.sources.r1.port <span class="token operator">=</span> 44444
a1.sources.r1.interceptors <span class="token operator">=</span> i1
a1.sources.r1.interceptors.i1.type <span class="token operator">=</span> search_replace
a1.sources.r1.interceptors.i1.searchPattern <span class="token operator">=</span>  \\d  <span class="token comment">#正则表达式，用来匹配日志的体</span>
a1.sources.r1.interceptors.i1.replaceString <span class="token operator">=</span> * <span class="token comment">#要替换为的字符串</span>
a1.sources.r1.interceptors.i1.charset <span class="token operator">=</span> UTF-8 <span class="token comment">#体的编码集，默认是utf-8 </span>
</code></pre>
<p>5.6 Regex Filtering Interceptor</p>
<p>正则过滤拦截器，拦截下Event之后，利用正则匹配日志的体，根据是否匹配决定是否保留或是否取出当前Event。</p>
<pre><code class="prism language-shell"><span class="token comment">#配置Source</span>
a1.sources.r1.type <span class="token operator">=</span> http
a1.sources.r1.port <span class="token operator">=</span> 44444
a1.sources.r1.interceptors <span class="token operator">=</span> i1
a1.sources.r1.interceptors.i1.type <span class="token operator">=</span> regex_filter
a1.sources.r1.interceptors.i1.regex <span class="token operator">=</span> ^\\d.*$ <span class="token comment">#要匹配的正则</span>
a1.sources.r1.interceptors.i1.excludeEvents <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">#默认false,符合正则保留；true为符合正则去除</span>
</code></pre>
<h4><a id="6_Processor_347"></a>6 Processor</h4>
<p>6.1 失败恢复机制</p>
<p>失败恢复机制下，Processor将会维护一个sink们的优先表。sink们可以被配置一个优先级，数字越大优先级越高。事件将永远将只会发往优先级最高的Sink。只要有一个Sink存活，整个过程仍然可以进行。如果没有指定优先级，则优先级顺序取决于sink们的配置顺序，先配置的默认优先级高于后配置的。</p>
<pre><code class="prism language-shell"><span class="token comment">#配置Sink</span>
a1.sinkgroups <span class="token operator">=</span> g1 <span class="token comment">#定义sinkgroups</span>
a1.sinkgroups.g1.sinks <span class="token operator">=</span> k1 k2 <span class="token comment">#绑定sink组</span>
a1.sinkgroups.g1.processor.type <span class="token operator">=</span> failover <span class="token comment">#指定处理器工作模式失败恢复机制的模式</span>
a1.sinkgroups.g1.processor.priority.k1 <span class="token operator">=</span> 5 <span class="token comment">#指定k1的优先级</span>
a1.sinkgroups.g1.processor.priority.k2 <span class="token operator">=</span> 10 <span class="token comment">#指定k2的优先级</span>
a1.sinkgroups.g1.processor.maxpenalty <span class="token operator">=</span> 10000 <span class="token comment">#节点最大限定失败时间，默认30000毫秒</span>
</code></pre>
<p>6.2 负载均衡机制</p>
<p>Processor的负载均衡机制提供了在多个sink之间实现负载均衡的能力，它维护了一个活动sink的索引列表。</p>
<p>通过Processor动态切换channel在SinkGroup中对Sink的指向，实现数据的负载均衡方式分发。</p>
<p>支持<strong>轮询 或 随机方式</strong>的负载均衡，默认值是轮询方式，可以通过配置指定。</p>
<p>负载均衡模式下，如果某个中心服务器宕机，则Processor会将该中心服务器Sink剔除SinkGroup组，并将之前发送失败的数据发给其他仍然存活的Sink，所以可以认为Processor的负载均衡机制自带失败恢复的能力。</p>
<pre><code class="prism language-shell">a1.sinkgroups <span class="token operator">=</span> g1
a1.sinkgroups.g1.sinks <span class="token operator">=</span> k1 k2
a1.sinkgroups.g1.processor.type <span class="token operator">=</span> load_balance <span class="token comment">#指定处理器工作模式是负载均衡</span>
a1.sinkgroups.g1.processor.backoff <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">#失败的sink是否不再生效，默认false</span>
a1.sinkgroups.g1.processor.selector <span class="token operator">=</span> round_robin <span class="token comment">#负载均衡模式，轮询，random为随机模式</span>
a1.sinkgroups.g1.processor.maxTimeOut <span class="token operator">=</span> 10000 <span class="token comment">#最大连接超时时间，默认30000毫秒</span>
</code></pre>
<p>– 注意，flume默认批处理，即使是轮询，隔得时间过长或过短，都不一定能实现ABABA模式</p>
<hr>
<h3><a id="Flume_388"></a>Flume事务机制</h3>
<p>Flume会使用两个独立的事务分别从<strong>source到channel</strong>，以及<strong>channel到sink</strong>的事件传递。即一旦事务中所有事件全部传递到channel且提交成功，那么source就将该文件标记为完成，否则就进行回滚，同理，如果某种原因使事务从channel到sink的传递过程无法记录，那么事务将会回滚，所有事件都会保持在channel中，等待重新传递。</p>
<h4><a id="1_Atleastonce_394"></a>1 At-least-once提交方式</h4>
<p>Flume在传送事务时，保证至少一次到达（at-least-once），也就是说可能重复出现。如果上次处理过程中，有些数据已被处理，但是事务还没有提交（在输出之后提交之前发生故障），则这些时间会被重试，出现重复。</p>
<p>除了at-least-once，还有at-most-once 和 exactly-once：</p>
<p><strong>At most once</strong>—Messages may be lost but are never redelivered.</p>
<p><strong>At least once</strong>—Messages are never lost but may be redelivered.</p>
<p><strong>Exactly once</strong>—this is what people actually want, each message is delivered once and only once</p>
<p>一些传统企业会要求精确的一次到达，但是一次到达需要使用2PC两阶段提交协议，这样的协议开销非常大。所以如有需求，会在数据的其他处理环节对重复数据进行去重，通常是采用MR或Hive处理。</p>
<h4><a id="2__408"></a>2 批量处理</h4>
<p>为了提高效率，Flume尽可能的以事务为单位来处理事件，而不是逐一基于事件进行处理。批处理的设置尤其有利于提高file channle的效率，这样整个事务只需要写入一次本地磁盘，或者调用一次fsync，速度回快很多。</p>

            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>