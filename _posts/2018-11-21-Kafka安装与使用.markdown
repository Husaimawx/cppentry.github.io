---
layout:     post
title:      Kafka安装与使用
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<p>Kafka安装与使用 <br>
下载地址：<a href="https://www.apache.org/dyn/closer.cgi?path=/kafka/0.8.1.1/kafka_2.10-0.8.1.1.tgz" rel="nofollow">https://www.apache.org/dyn/closer.cgi?path=/kafka/0.8.1.1/kafka_2.10-0.8.1.1.tgz</a></p>

<p>安装以及启动kafka <br>
步骤1：安装kafka <br>
<span class="MathJax_Preview"></span><span class="MathJax" id="MathJax-Element-1-Frame" role="textbox" aria-readonly="true"><nobr><span class="math" id="MathJax-Span-1" style="width: 15.435em; display: inline-block;"><span style="display: inline-block; position: relative; width: 14.262em; height: 0px; font-size: 108%;"><span style="position: absolute; clip: rect(1.855em 1000em 3.09em -0.552em); top: -2.713em; left: 0.003em;"><span class="mrow" id="MathJax-Span-2"><span class="mi" id="MathJax-Span-3" style="font-family: MathJax_Math-italic;">t</span><span class="mi" id="MathJax-Span-4" style="font-family: MathJax_Math-italic;">a</span><span class="mi" id="MathJax-Span-5" style="font-family: MathJax_Math-italic;">r</span><span class="mo" id="MathJax-Span-6" style="font-family: MathJax_Main; padding-left: 0.25em;">−</span><span class="mi" id="MathJax-Span-7" style="font-family: MathJax_Math-italic; padding-left: 0.25em;">x</span><span class="mi" id="MathJax-Span-8" style="font-family: MathJax_Math-italic;">z<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.003em;"></span></span><span class="mi" id="MathJax-Span-9" style="font-family: MathJax_Math-italic;">f<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.065em;"></span></span><span class="mi" id="MathJax-Span-10" style="font-family: MathJax_Math-italic;">k</span><span class="mi" id="MathJax-Span-11" style="font-family: MathJax_Math-italic;">a</span><span class="mi" id="MathJax-Span-12" style="font-family: MathJax_Math-italic;">f<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.065em;"></span></span><span class="mi" id="MathJax-Span-13" style="font-family: MathJax_Math-italic;">k</span><span class="msubsup" id="MathJax-Span-14"><span style="display: inline-block; position: relative; width: 0.991em; height: 0px;"><span style="position: absolute; clip: rect(1.855em 1000em 2.657em -0.491em); top: -2.466em; left: 0.003em;"><span class="mi" id="MathJax-Span-15" style="font-family: MathJax_Math-italic;">a</span><span style="display: inline-block; width: 0px; height: 2.472em;"></span></span><span style="position: absolute; top: -2.157em; left: 0.559em;"><span class="mn" id="MathJax-Span-16" style="font-size: 70.7%; font-family: MathJax_Main;">2</span><span style="display: inline-block; width: 0px; height: 2.287em;"></span></span></span></span><span class="mn" id="MathJax-Span-17" style="font-family: MathJax_Main;">.10</span><span class="mo" id="MathJax-Span-18" style="font-family: MathJax_Main; padding-left: 0.25em;">−</span><span class="mn" id="MathJax-Span-19" style="font-family: MathJax_Main; padding-left: 0.25em;">0.8.1.1.</span><span class="mi" id="MathJax-Span-20" style="font-family: MathJax_Math-italic;">t</span><span class="mi" id="MathJax-Span-21" style="font-family: MathJax_Math-italic;">g<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.003em;"></span></span><span class="mi" id="MathJax-Span-22" style="font-family: MathJax_Math-italic;">z<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.003em;"></span></span></span><span style="display: inline-block; width: 0px; height: 2.719em;"></span></span></span><span style="border-left: 0.003em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.137em; vertical-align: -0.263em;"></span></span></nobr></span><script type="math/tex" id="MathJax-Element-1"> tar -xzf kafka_2.10-0.8.1.1.tgz  
</script> cd kafka_2.10-0.8.1.1.tgz </p>

<p>步骤2：配置server.properties <br>
 配置zookeeper(假设您已经安装了zookeeper,如果没有安装，请再网上搜索安装方法)</p>

<p>进入kafka安装工程根目录编辑 </p>

<p>vim config/server.properties <br>
修改属性 zookeeper.connect=ip:2181,ip2: 2181</p>

<p>步骤3：server.properties配置说明 <br>
kafka最为重要三个配置依次为：broker.id、log.dir、zookeeper.connect</p>

<p>kafka server端config/server.properties参数说明和解释如下:</p>

<p>（参考配置说明地址：<a href="http://blog.csdn.net/lizhitao/article/details/25667831" rel="nofollow">http://blog.csdn.net/lizhitao/article/details/25667831</a>）</p>



<h1 id="实际使用案例-这里211上面的kafka-配置文件">实际使用案例 这里211上面的kafka 配置文件</h1>

<p>复制代码 <br>
broker.id=1 <br>
port=9092 <br>
host.name=192.168.1.211 <br>
num.network.threads=2 <br>
num.io.threads=8 <br>
socket.send.buffer.bytes=1048576 <br>
socket.receive.buffer.bytes=1048576 <br>
socket.request.max.bytes=104857600 <br>
log.dirs=/tmp/kafka-logs <br>
num.partitions=2 <br>
log.retention.hours=168 <br>
log.segment.bytes=536870912 <br>
log.retention.check.interval.ms=60000 <br>
log.cleaner.enable=false <br>
zookeeper.connect=192.168.1.213:2181,192.168.1.216:2181,192.168.1.217:2181 <br>
zookeeper.connection.timeout.ms=1000000</p>



<h1 id="kafka实际使用案例-210服务器kafka配置">kafka实际使用案例 210服务器kafka配置</h1>

<p>broker.id=2 <br>
port=9092 <br>
host.name=192.168.1.210 <br>
num.network.threads=2 <br>
num.io.threads=8 <br>
socket.send.buffer.bytes=1048576 <br>
socket.receive.buffer.bytes=1048576 <br>
socket.request.max.bytes=104857600 <br>
log.dirs=/tmp/kafka-logs <br>
num.partitions=2 <br>
log.retention.hours=168 <br>
log.segment.bytes=536870912 <br>
log.retention.check.interval.ms=60000 <br>
log.cleaner.enable=false <br>
zookeeper.connect=192.168.1.213:2181,192.168.1.216:2181,192.168.1.217:2181 <br>
zookeeper.connection.timeout.ms=1000000 <br>
复制代码</p>

<p>步骤4： 启动kafka <br>
(先启动zookeeper $:  bin/zkServer.sh start config/zookeeper.properties &amp;) <br>
cd kafka-0.8.1</p>

<p>$ bin/kafka-server-start.sh -daemon config/server.properties &amp; <br>
 (实验时,需要启动至少两个broker   bin/kafka-server-start.sh -daemon config/server-1.properties &amp;) </p>

<p>步骤5：创建topic <br>
$ bin/kafka-topics.sh –create –zookeeper localhost:2181 –replication-factor 1 –partitions 1 –topic test <br>
步骤6：验证topic是否创建成功</p>

<p>$ bin/kafka-topics.sh –list –zookeeper localhost:2181 <br>
localhost为zookeeper地址 </p>

<p>topic描述：</p>

<p>bin/kafka-topics.sh –describe –zookeeper 192.168.1.8:2181 –topic test</p>

<p>复制代码 <br>
//启动报错Unrecognized VM option ‘+UseCompressedOops’ <br>
查看 bin/kafka-run-class.sh <br>
找到 <br>
if [ -z “$KAFKA_JVM_PERFORMANCE_OPTS” ]; then <br>
  KAFKA_JVM_PERFORMANCE_OPTS=”-server  -XX:+UseCompressedOops -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled -XX:+CMSScavengeBeforeRemark -XX:+DisableExplicitGC -Djava.awt.headless=true” <br>
fi <br>
去掉-XX:+UseCompressedOops <br>
复制代码</p>

<p>启动报错 Could not reserve enough space for object heap <br>
原因及解决办法： <br>
查看kafka-server-start.sh配置文件，发现有heap设置信息：KAFKA_HEAP_OPTS=”-Xmx1G -Xms1G”    更改这里的内存为256(因为测试机内存总共才1G ,所以报错)</p>

<p>步骤7：发送消息 <br>
发送一些消息验证，在console模式下，启动producer</p>

<p>$ bin/kafka-console-producer.sh –broker-list localhost:9092 –topic test <br>
（此处localhost改为本机ip，否则报错，I don’t  know why）</p>

<p>消息案例： </p>

<p>{“price”:”100000”,”userId”:14615501351480021,”payType”:3,”code”:”AFD3B8”,”payTime”:{“time”:1457330791333,”minutes”:6,”seconds”:31,”hours”:14,”month”:2,”year”:116,”timezoneOffset”:-480,”day”:1,”date”:7},”orderId”:12222096,”goodsName”:”会员”} </p>

<p>步骤8:启动一个consumer</p>

<p>$ bin/kafka-console-consumer.sh –zookeeper localhost:2181 –topic test –from-beginning</p>

<p>删除topic,慎用，只会删除zookeeper中的元数据，消息文件须手动删除 <br>
bin/kafka-run-class.sh kafka.admin.DeleteTopicCommand –topic test –zookeeper 192.168.197.170:2181 ,192.168.197.171:2181</p>

<p>配置kafka集群模式，需要由多个broker组成</p>

<p>和单机环境一样，只是需要修改下broker 的配置文件而已。</p>

<p>1、将单机版的kafka 目录复制到其他几台电脑上。</p>

<p>2、修改每台电脑上的kafka 目录下的server.properties 文件。</p>

<p>broker.id=1//这个参数在kafka 的broker 集群中必须唯一，且为正整数。</p>

<p>3、启动每台电脑上的kafka 即可。</p>

<p>本机配置伪分布式</p>

<p>首先为每个节点编写配置文件：</p>

<blockquote>
  <p>cp config/server.properties config/server-1.properties <br>
  cp config/server.properties config/server-2.properties</p>
</blockquote>

<p>在拷贝出的新文件中添加以下参数： <br>
config/server-1.properties: <br>
broker.id=1 <br>
port=9093 <br>
log.dir=/tmp/kafka-logs-1 <br>
config/server-2.properties:</p>

<p>broker.id=2 <br>
port=9094 <br>
log.dir=/tmp/kafka-logs-2</p>

<p>现在启动另外两个节点：</p>

<blockquote>
  <p>bin/kafka-server-start.sh config/server-1.properties &amp; <br>
  … <br>
  bin/kafka-server-start.sh config/server-2.properties &amp; <br>
  …</p>
</blockquote>

<p>创建一个拥有3个副本的topic:</p>

<blockquote>
  <p>bin/kafka-topics.sh –create –zookeeper localhost:2181 –replication-factor 3 –partitions 1 –topic my-replicated-topic</p>
</blockquote>

<p>运行“”describe topics”命令知道每个节点的信息</p>

<blockquote>
  <p>bin/kafka-topics.sh –describe –zookeeper localhost:2181 –topic my-replicated-topic <br>
  Topic:my-replicated-topic PartitionCount:1 ReplicationFactor:3 Configs: <br>
  Topic: my-replicated-topic Partition: 0 Leader: 1 Replicas: 1,2,0 Isr: 1,2,0 <br>
  leader：负责处理消息的读和写，leader是从所有节点中随机选择的. <br>
  replicas：列出了所有的副本节点，不管节点是否在服务中. <br>
  isr：是正在服务中的节点.</p>
</blockquote>

<p>搭建Kafka开发环境 <br>
1 在pom.xml中引入kafka依赖jar包 <br>
复制代码 <br>
<!-- kafka&#37197;&#32622; --> <br>
 <br>
org.apache.kafka <br>
kafka_2.9.2 <br>
${kafka.version} <br>
 <br>
<!-- &#23454;&#38469;&#24212;&#29992;&#20013;&#21333;&#29420;&#24341;&#20837;&#19979;&#38754;&#30340;jar&#21253;,&#19981;&#20351;&#29992;kafka&#24102;&#30340; --> <br>
 <br>
zookeeper <br>
org.apache.zookeeper <br>
 <br>
 <br>
zkclient <br>
com.101tec <br>
 <br>
 <br>
slf4j-api <br>
org.slf4j <br>
 <br>
 <br>
 <br>
复制代码</p>

<p>2.属性文件 kafka.properties <br>
复制代码</p>



<h1 id="zookeeperconnect19216818218119216811321811921681162181">zookeeper.connect=192.168.1.8:2181,192.168.1.13:2181,192.168.1.16:2181</h1>



<h1 id="zookeeperconnectzkserver1vkocn2181zkserver2vkocn2181zkserver3vkocn2181">zookeeper.connect=zkserver1.vko.cn:2181,zkserver2.vko.cn:2181,zkserver3.vko.cn:2181</h1>

<p>zookeeper.connect=192.168.1.179:2181 <br>
metadata.broker.list=192.168.1.179:9092</p>



<h1 id="metadatabrokerlistkafkaserver1vkocn9092kafkaserver2vkocn9092">metadata.broker.list=kafka.server1.vko.cn:9092,kafka.server2.vko.cn:9092</h1>



<h1 id="zookeeperconnecttimeout15000">zookeeper.connect.timeout=15000</h1>



<h1 id="zookeepersessiontimeoutms15000">zookeeper.session.timeout.ms=15000</h1>



<h1 id="zookeepersynctimems20000">zookeeper.sync.time.ms=20000</h1>



<h1 id="autocommitintervalms20000">auto.commit.interval.ms=20000</h1>



<h1 id="autooffsetresetsmallest">auto.offset.reset=smallest</h1>



<h1 id="serializerclasskafkaserializerstringencoder">serializer.class=kafka.serializer.StringEncoder</h1>



<h1 id="producertypeasync">producer.type=async</h1>



<h1 id="queuebufferingmaxms6000">queue.buffering.max.ms=6000</h1>

<p>group.id=llx <br>
kafka.sellstat.topics=llx <br>
复制代码</p>

<p>在spring配置文件中引入此properties文件 <br>
复制代码 <br>
<!-- &#36825;&#20010;&#26159;&#21152;&#36733;&#32473;spring &#29992;&#30340;.--> <br>
 <br>
 <br>
 <br>
classpath:kafka.properties <br>
 <br>
 <br>
 <br>
<!-- &#36825;&#20010;&#26159;&#29992;&#26469;&#22312;&#20195;&#30721;&#20013;&#27880;&#20837;&#29992;&#30340;.--> <br>
 <br>
 <br>
 <br>
classpath:kafka.properties <br>
 <br>
 <br>
 <br>
复制代码</p>

<p>3.定义收信人 <br>
复制代码 <br>
<!-- &#23450;&#20041;&#25910;&#20449;&#20154; receiver --> <br>
</p>

<p></p>

<p></p>

<p></p>

<p> <br>
 <br>
复制代码</p>

<ol>
<li>spring中定义一个消息处理器(需要实现vkoConsumer) <br>
<!-- &#23450;&#20041;&#28040;&#24687;&#22788;&#29702;&#22120; --> <br>
</li>
</ol>

<p>5.消息生产者项目引入producer</p>

<p> <br>
          <br>
    </p>

<p>6代码实现 见我的<a href="https://github.com/lilixin" rel="nofollow">https://github.com/lilixin</a>  learn-kafka项目 <br>
<a href="http://www.cnblogs.com/lilixin/p/5775877.html" rel="nofollow">http://www.cnblogs.com/lilixin/p/5775877.html</a></p>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>