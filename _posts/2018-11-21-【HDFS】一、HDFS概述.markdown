---
layout:     post
title:      【HDFS】一、HDFS概述
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/qq_27470131/article/details/79888069				</div>
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<h2 id="一hdfs概述">一、HDFS概述</h2>



<h3 id="11hdfs产生背景">1.1HDFS产生背景</h3>

<p>随着数据量越来越大，在一个操作系统管辖的范围内存不下了，那么就分配到更多的操作系统管理的磁盘中，但是不方便管理和维护，迫切需要一种系统来管理多台机器上的文件，这就是分布式文件管理系统。HDFS只是分布式文件管理系统中的一种。</p>



<h3 id="12hdfs的概念">1.2HDFS的概念</h3>

<p>​   HDFS，它是一个文件系统，用于存储文件，通过目录树来定位文件；其次，它是分布式的，由很多服务器联合起来实现其功能，集群中的服务器有各自的角色。</p>

<p>​   HDFS的设计适合一次写入，多次读出的场景，且不支持文件的修改。适合用来做数据分析，并不适合用来做网盘应用。</p>



<h3 id="13hdfs优缺点">1.3HDFS优缺点</h3>

<blockquote>
  <p>优点</p>
</blockquote>

<ol>
<li><p>高容错性</p>

<p>（1）数据自动保存多个副本。它通过增加副本的形式，提高容错性。</p>

<p>（2）某一个副本丢失以后，它可以自动恢复。</p></li>
<li><p>适合大数据处理</p>

<p>（1）数据规模：能够处理数据规模达到 GB、TB、甚至PB级别的数据。</p>

<p>（2）文件规模：能够处理百万规模以上的文件数量，数量相当之大。</p></li>
<li><p>流式数据访问</p>

<p>（1）一次写入，多次读取，不能修改，只能追加。</p>

<p>（2）它能保证数据的一致性。</p></li>
<li><p>可构建在廉价机器上，通过多副本机制，提高可靠性。</p></li>
</ol>

<blockquote>
  <p>缺点</p>
</blockquote>

<ol>
<li><p>不适合低延时数据访问，比如毫秒级的存储数据，是做不到的。</p></li>
<li><p>无法高效的对大量小文件进行存储</p>

<p>（1）存储大量小文件的话，它会占用 NameNode大量的内存来存储文件、目录和块信息。这样是不可取的，因为NameNode的内存总是有限的。</p>

<p>（2）小文件存储的寻道时间会超过读取时间，它违反了HDFS的设计目标。</p></li>
<li><p>并发写入、文件随机修改</p>

<p>（1）一个文件只能有一个写，不允许多个线程同时写。</p>

<p>（2）仅支持数据 append（追加），不支持文件的随机修改。</p></li>
</ol>



<h3 id="14-hdfs架构">1.4 HDFS架构</h3>

<blockquote>
  <p>HDFS架构图</p>
</blockquote>

<p><img src="https://s1.ax1x.com/2018/04/10/CF7UQe.png" alt="Hdfs架构.png" title=""></p>

<p><strong>Client：就是客户端。</strong></p>

<ul>
<li>文件切分。文件上传 HDFS 的时候，Client 将文件切分成一个一个的Block，然后进行存储。</li>
<li>与NameNode交互，获取文件的位置信息。</li>
<li>与DataNode交互，读取或者写入数据。</li>
<li>Client提供一些命令来管理HDFS，比如启动或者关闭HDFS。</li>
<li>Client可以通过一些命令来访问HDFS。</li>
</ul>

<p><strong>NameNode：就是master，它是一个主管、管理者。</strong></p>

<ul>
<li>管理HDFS的名称空间</li>
<li>管理数据块（Block）映射信息</li>
<li>配置副本策略</li>
<li>处理客户端读写请求</li>
</ul>

<p><strong>DataNode：就是Slave。NameNode下达命令，DataNode执行实际的操作。</strong></p>

<ul>
<li>存储实际的数据块</li>
<li><p>执行数据块的读\写</p>

<p><strong>Secondary NameNode：并非NameNode的热备。当NameNode挂掉的时候，它并不能马上替换NameNode并提供服务。</strong></p></li>
<li><p>辅助NameNode，分担其工作量</p></li>
<li>定期合并Fsimage和Edits，并推送给NameNode</li>
<li>在紧急情况下，可辅助恢复NameNode</li>
</ul>



<h3 id="14hdfs文件块大小">1.4HDFS文件块大小</h3>



<pre class="prettyprint"><code class=" hljs perl">    HDFS中的文件在物理上是分块存储（block），块的大小可以通过配置参数( dfs.blocksize)来规定，默认大小在hadoop2.<span class="hljs-keyword">x</span>版本中是<span class="hljs-number">128</span>M，老版本中是<span class="hljs-number">64</span>M。
    HDFS的块比磁盘的块大，其目的是为了最小化寻址开销。如果块设置得足够大，从磁盘传输数据的时间会明显大于定位这个块开始位置所需的时间。因而，传输一个由多个块组成的文件的时间取决于磁盘传输速率。
    如果寻址时间约为<span class="hljs-number">10</span>ms，而传输速率为<span class="hljs-number">100</span>MB/<span class="hljs-keyword">s</span>，为了使寻址时间仅占传输时间的<span class="hljs-number">1</span><span class="hljs-variable">%，</span>我们要将块大小设置约为<span class="hljs-number">100</span>MB。默认的块大小<span class="hljs-number">128</span>MB。
    块的大小：<span class="hljs-number">10</span>ms<span class="hljs-variable">*100</span><span class="hljs-variable">*100M</span>/<span class="hljs-keyword">s</span> = <span class="hljs-number">100</span>M</code></pre>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>