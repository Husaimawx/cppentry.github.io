---
layout:     post
title:      hive 基本命令介绍
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/jslijb/article/details/79164930				</div>
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<p>hive 命令行的使用 <br>
    hive –help 获取帮助信息</p>



<pre class="prettyprint"><code class=" hljs haml">    [root@master data]# hive --hlep --service cli

    Unrecognized option: --hlep
    usage: hive
     -<span class="ruby">d,--define &lt;key=value&gt;          <span class="hljs-constant">Variable</span> subsitution to apply to hive
</span>                                      commands. e.g. -d A=B or --define A=B
        -<span class="ruby">-database &lt;databasename&gt;     <span class="hljs-constant">Specify</span> the database to use
</span>     -<span class="ruby">e &lt;quoted-query-string&gt;         <span class="hljs-constant">SQL</span> from command line
</span>     -<span class="ruby">f &lt;filename&gt;                    <span class="hljs-constant">SQL</span> from files
</span>     -<span class="ruby"><span class="hljs-constant">H</span>,--help                        <span class="hljs-constant">Print</span> help information
</span>        -<span class="ruby">-hiveconf &lt;property=value&gt;   <span class="hljs-constant">Use</span> value <span class="hljs-keyword">for</span> given property
</span>        -<span class="ruby">-hivevar &lt;key=value&gt;         <span class="hljs-constant">Variable</span> subsitution to apply to hive
</span>                                      commands. e.g. --hivevar A=B
     -<span class="ruby">i &lt;filename&gt;                    <span class="hljs-constant">Initialization</span> <span class="hljs-constant">SQL</span> file
</span>     -<span class="ruby"><span class="hljs-constant">S</span>,--silent                      <span class="hljs-constant">Silent</span> mode <span class="hljs-keyword">in</span> interactive shell
</span>     -<span class="ruby">v,--verbose                     <span class="hljs-constant">Verbose</span> mode (echo executed <span class="hljs-constant">SQL</span> to the
</span>                                      console)</code></pre>

<pre><code>hive -e  使用方法
</code></pre>

<pre class="prettyprint"><code class=" hljs lasso">    hive <span class="hljs-attribute">-e</span> <span class="hljs-string">'create table hive_cli2(id int)'</span>  <span class="hljs-variable">#h</span><span class="hljs-attribute">-sql</span> 语句，需要使用<span class="hljs-string">''</span> 括起来
    hive <span class="hljs-attribute">-e</span> <span class="hljs-string">'desc hive_cli2'</span>
    OK
    id                      int
    hive <span class="hljs-attribute">-e</span> <span class="hljs-string">'show tables'</span>
    hive_cli2
</code></pre>

<pre><code>hive -f 的使用方法，将h-sql 语句放在文件里面，然后使用hive -f H-SQL_FILENAME
</code></pre>



<pre class="prettyprint"><code class=" hljs sql">    # hive脚本中的注释在行首使用 "<span class="hljs-comment">--"，但是在cli 中不支持这样的注释。</span>
    [root@master ~]# cat hive_file.txt 
    <span class="hljs-comment">-- hive 脚本文件的注释，测试hive -f 这个参数</span>
    <span class="hljs-operator"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> userinfo
    (
        id <span class="hljs-keyword">int</span>,
        name string,
        age string
    )
    <span class="hljs-keyword">row</span> format delimited fields terminated <span class="hljs-keyword">by</span> <span class="hljs-string">'\t'</span>
    lines terminated <span class="hljs-keyword">by</span> <span class="hljs-string">'\n'</span>;</span>

    <span class="hljs-operator"><span class="hljs-keyword">show</span> tables
    hive -f hive_file.txt  # 使用这种方式可以使hive一次执行多条命令
    输出：
    userinfo</span></code></pre>

<pre><code>hive -i 和 hive -f 用法相同，两者的区别
    hive -i filename  在进入hive终端的时候，执行filename 这个文件，这个文件存储的内容一般是一些配置信息，如设置系统属性，增加hadoop的分布式内存，进行自定义的hive扩展的jar包
    hive -f filename  执行完文件中的h-sql 命令后不进入hive cli 终端
hive启动的时候，默认情况下会找bash $HOME/.hiverc 这个文件，执行这个文件的一些配置，等价于hive -i ~/.hiverc
${HOME}/.hivehistory 这个文件存储了hive cli 中执行命令的历史记录
hive cli 终端中可以使用tab 键补齐命令，使用tab键需要注意：如果某些行是以tab键开头的话，就会产生一个常见的令人困惑的错误，用户这时会看到一个"是否显示所有可能的情况"的提示，而且输入流后面的字符会被认为是对这个提示的回复，也因此会导致命令执行失败
hive -S 进入hive cli 终端后，执行命令使用静默模式，过滤掉一些日志信息(一些提示信息，如：OK，用时等信息，但是错误信息是不会过滤掉的)，只输出结果信息，如果是创建/删除表，完成后没有任何信息返回
hive (default)&gt; !pwd;  # hive cli 终端可以执行shell命令，前面加一个""
/root

hive cli 终端还可以执行hdfs 中的dfs命令，需要将hdfs命令去掉，直接运行dfs，但是注意不支持输入hadoop fs -ls /。这种使用hadoop 命令的方式实际上比在base中执行要高效，因为在base中执行hadoop命令，每次都需要启动一个新的JVM实例，而在hive中会在同一个JVM进程中执行这些命令
hive (default)&gt; dfs -ls /;  # 等价于bash 中 hdfs dfs -ls / 或者 bash 中 hadoop fs -ls /
Found 4 items
-rw-r--r--   3 root supergroup        114 2018-01-25 07:59 /b.txt
drwx-wx-wx   - root supergroup          0 2018-01-26 03:34 /data
drwx-wx-wx   - root supergroup          0 2018-01-24 09:24 /tmp
drwxr-xr-x   - root supergroup          0 2018-01-24 09:21 /user
#获得dfs 命令的帮助信息
dfs -help;
</code></pre>



<pre class="prettyprint"><code class=" hljs autohotkey">    hive -d  <span class="hljs-literal">a</span>=b  #设置 k=v 在hive cli 中设置变量替换
    hive&gt; set <span class="hljs-literal">a</span><span class="hljs-comment">;</span>
    <span class="hljs-literal">a</span>=b
<span class="hljs-label">    hive&gt; set hivevar:</span><span class="hljs-literal">a</span>
    <span class="hljs-literal">a</span>=b</code></pre>

<pre><code>hive --defin key=value  实际上和 hive cli --hivevar key=value 是等价的。二者都可以让用户在命令行定义用户自定义变量以便在hive脚本中引用，来满足不同情况的执行。注意这个功能只有在hive 0.8 版本和之后的版本才支持
</code></pre>

<p>hive 中变量和属性命名空间： <br>
命名空间            使用权限                                描述 <br>
hivevar             可读写             hive 0.8及后续版本支持，用户自定义变量 <br>
hiveconf                可读写             hive 相关配置属性 <br>
system              可读写             java 定义的配置属性 <br>
env                     只读                  Shell 环境，定义的环境变量</p>

<p>hive 变量内部是以java 字符串的方式存储的。用户可以在查询中引用变量。hive会优先使用变量值替换掉查询的变量引用，然后才会将查询语句提交给查询处理器</p>

<p>hive cli set 命令，会打印命名空间hivevar,hiveconf,system和env中所有的变量。使用-v 标记，则还会打印Hadoop 中定义的属性，列如HDFS 和MapReduce的属性</p>



<pre class="prettyprint"><code class=" hljs vbscript">    [root@master ~]# hive --define filed=username

    hive&gt; <span class="hljs-keyword">set</span> filed;
    filed=username
    hive&gt; <span class="hljs-keyword">set</span> hivevar:filed;
    hivevar:filed=username
    hive&gt; <span class="hljs-keyword">set</span> filed=user_name;
    hive&gt; <span class="hljs-keyword">set</span> filed;
    filed=user_name
    hive&gt; <span class="hljs-keyword">set</span> hivevar:filed;
    hivevar:filed=username
    hive&gt; create table userinfo(id <span class="hljs-built_in">int</span>,${filed} <span class="hljs-built_in">string</span>);
    OK
    <span class="hljs-built_in">Time</span> taken: <span class="hljs-number">0.927</span> seconds
    hive&gt; create table userinfo1(id <span class="hljs-built_in">int</span>,${hivevar:filed} <span class="hljs-built_in">string</span>);
    OK
    <span class="hljs-built_in">Time</span> taken: <span class="hljs-number">0.431</span> seconds
    hive&gt; desc userinfo;
    OK
    id                      <span class="hljs-built_in">int</span>                                         
    username                <span class="hljs-built_in">string</span>                                      
    <span class="hljs-built_in">Time</span> taken: <span class="hljs-number">0.115</span> seconds, Fetched: <span class="hljs-number">2</span> row(s)
    hive&gt; desc userinfo1;
    OK
    id                      <span class="hljs-built_in">int</span>                                         
    username                <span class="hljs-built_in">string</span>                                      
    <span class="hljs-built_in">Time</span> taken: <span class="hljs-number">0.044</span> seconds, Fetched: <span class="hljs-number">2</span> row(s)
    hive&gt; </code></pre>

<pre><code>从上面的代码可以看出，在shell终端使用hive命令，然后带上--define 参数定义的变量和在hive cli 终端中使用set hivevarvariable_name=value  定义的变量等价。但是在hive cli 终端，修改以存在变量的值必须带上hivevar: 前缀，否则不生效，获取以存在变量的值不需要带hivevar: 这个前缀。同样的在hive cli 终端定义变量，必须带上hivevar: 这个前缀

下面两个命令都是获取hivevar 这个命名空间中，foo 这个变量的值
set foo; # 如果之前没有定义过这个变量(没有运行这条命令 set hivevar:foo)，默认是获取hiveconf 这个命名空间的
set hivevar:foo

set hivevar:foo=test
这个命令的意思是将hivevar 命名空间中foo的值设置为test，如果这个变量以存在就是修改变量的值，如果这个变量不存在就创建这个变量并赋值test
set foo=test1
这条命令等同于 set hiveconf:foo=test1
set key=value 这个是设置hive的配置不是设置hive变量，属于hiveconf 命名空间，等价于hive-site.xml 文件中的配置，但是离开hive终端后设置失效

详情见下面的实例：
</code></pre>



<pre class="prettyprint"><code class=" hljs xml">    hive&gt; set var_name;
    var_name=test5
    hive&gt; set hiveconf:var_name;
    hiveconf:var_name=test5

    hive&gt; set hive.exec.scratchdir=/tmp/mydir;
     #等价于 ${HIVE_HOME}/conf/hive-site.xml 这个文件中添加下面4行
      <span class="hljs-tag">&lt;<span class="hljs-title">configuration</span>&gt;</span>
          <span class="hljs-comment">&lt;!--  前面配置省略  --&gt;</span>
           <span class="hljs-tag">&lt;<span class="hljs-title">property</span>&gt;</span>
               <span class="hljs-tag">&lt;<span class="hljs-title">name</span>&gt;</span>hive.exec.scratchdir<span class="hljs-tag">&lt;/<span class="hljs-title">name</span>&gt;</span>
               <span class="hljs-tag">&lt;<span class="hljs-title">value</span>&gt;</span>/tmp/mydir<span class="hljs-tag">&lt;/<span class="hljs-title">value</span>&gt;</span>
               <span class="hljs-tag">&lt;<span class="hljs-title">description</span>&gt;</span>Scratch space for Hive jobs<span class="hljs-tag">&lt;/<span class="hljs-title">description</span>&gt;</span>
          <span class="hljs-tag">&lt;/<span class="hljs-title">property</span>&gt;</span>
          <span class="hljs-comment">&lt;!--  后面配置省略  --&gt;</span>
      <span class="hljs-tag">&lt;/<span class="hljs-title">configuration</span>&gt;</span></code></pre>



<pre class="prettyprint"><code class=" hljs applescript">    [root@master ~]<span class="hljs-comment"># hive --hiveconf y=5  </span>


    Logging initialized using configuration <span class="hljs-keyword">in</span> jar:<span class="hljs-type">file</span>:/data/tools/hive/lib/hive-common-<span class="hljs-number">1.2</span><span class="hljs-number">.2</span>.jar!/hive-log4j.properties
    hive&gt; <span class="hljs-keyword">set</span> y；
    y=<span class="hljs-number">5</span>
    hive&gt; select * <span class="hljs-keyword">from</span> word_count <span class="hljs-keyword">where</span> <span class="hljs-command">count</span>=${hiveconf:y};  <span class="hljs-comment">#hiveconf:  这个前缀不能省</span>
    OK
    <span class="hljs-keyword">by</span>      <span class="hljs-number">5</span>
    <span class="hljs-property">day</span>     <span class="hljs-number">5</span>
    life    <span class="hljs-number">5</span>
    what    <span class="hljs-number">5</span>
    when    <span class="hljs-number">5</span>
    Time taken: <span class="hljs-number">0.187</span> seconds, Fetched: <span class="hljs-number">5</span> row(s)</code></pre>

<pre><code>--conf 等同于在hive cli 终端使用set 设置属性一样
</code></pre>



<pre class="prettyprint"><code class=" hljs applescript">    hive&gt; <span class="hljs-keyword">set</span> y;
    y <span class="hljs-keyword">is</span> undefined
    hive&gt; <span class="hljs-keyword">set</span> y=<span class="hljs-number">5</span>;
    hive&gt; select * <span class="hljs-keyword">from</span> word_count <span class="hljs-keyword">where</span> <span class="hljs-command">count</span>=${hiveconf:y};
    OK
    <span class="hljs-keyword">by</span>      <span class="hljs-number">5</span>
    <span class="hljs-property">day</span>     <span class="hljs-number">5</span>
    life    <span class="hljs-number">5</span>
    what    <span class="hljs-number">5</span>
    when    <span class="hljs-number">5</span>
    Time taken: <span class="hljs-number">0.928</span> seconds, Fetched: <span class="hljs-number">5</span> row(s)</code></pre>

<pre><code>可以将env 命名空间中的环境变量传递到hive cli 中

如果--hiveconf  后面接一个文件名或者目录，貌似不起作用，这个有待研究，下面看一个实例：
</code></pre>



<pre class="prettyprint"><code class=" hljs xml">    [root@master ~]# cat /tmp/hive-site.xml 
        <span class="hljs-tag">&lt;<span class="hljs-title">configuration</span>&gt;</span>


            <span class="hljs-tag">&lt;<span class="hljs-title">property</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-title">name</span>&gt;</span>hive.exec.compress.output<span class="hljs-tag">&lt;/<span class="hljs-title">name</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-title">value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-title">value</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-title">property</span>&gt;</span>


            <span class="hljs-tag">&lt;<span class="hljs-title">property</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-title">name</span>&gt;</span>map.input.file<span class="hljs-tag">&lt;/<span class="hljs-title">name</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-title">value</span>&gt;</span>/b.txt<span class="hljs-tag">&lt;/<span class="hljs-title">value</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-title">property</span>&gt;</span>

        <span class="hljs-tag">&lt;/<span class="hljs-title">configuration</span>&gt;</span></code></pre>

<pre><code>启动hive  
</code></pre>



<pre class="prettyprint"><code class=" hljs avrasm">    [root@master ~]<span class="hljs-preprocessor"># hive --hiveconf /tmp/hive-site.xml </span>

        hive&gt; <span class="hljs-keyword">set</span> hiveconf:hive<span class="hljs-preprocessor">.exec</span><span class="hljs-preprocessor">.compress</span><span class="hljs-preprocessor">.output</span><span class="hljs-comment">; # 这个属性默认值是false，上面的配置文件设置的是true，可是没有生效</span>
        hiveconf:hive<span class="hljs-preprocessor">.exec</span><span class="hljs-preprocessor">.compress</span><span class="hljs-preprocessor">.output</span>=false
        hive&gt; <span class="hljs-keyword">set</span> map<span class="hljs-preprocessor">.input</span><span class="hljs-preprocessor">.file</span><span class="hljs-comment">; # 这个属性没有默认值，上面的配置文件设置了，可以这里同样没有生效</span>
        map<span class="hljs-preprocessor">.input</span><span class="hljs-preprocessor">.file</span> is undefined</code></pre>

<pre><code>[root@master ~]# export a=10 # 注意这里需要使用export 将a变成系统环境变量，如果没有export这个关键字，a这个变量是无法在hive中引用的
[root@master ~]# echo $a
10
hive&gt; set env:a;
env:a=10
hive&gt; select * from word_count where count = ${env:a};
OK
a       10
we      10
Time taken: 0.501 seconds, Fetched: 2 row(s)
</code></pre>



<pre class="prettyprint"><code class=" hljs bash">    另一种实现方式使用 hive <span class="hljs-operator">-e</span>  这样就不需要使用<span class="hljs-keyword">export</span>关键字
</code></pre>

<pre><code>COUNT=5 hive -e 'select * from word_count where count=${env:COUNT}';
#输出：
by      5
day     5
life    5
what    5
when    5
# 验证COUNT 这个变量在hive中引用是否正确
hive -e 'select * from word_count where count=5';
#输出结果：
by      5
day     5
life    5
what    5
when    5
# 结果一样
</code></pre>



<pre class="prettyprint"><code class=" hljs ">
当用户不能完整记清楚某个属性名是，可以使用下面的方法来获得
</code></pre>

<pre><code>[root@master ~]# hive -S -e 'set' | grep warehouse

    hive.metastore.warehouse.dir=/user/hive/warehouse
    hive.warehouse.subdir.inherit.perms=true
</code></pre>



<pre class="prettyprint"><code class=" hljs ">查询表的时候，显示字段名称
</code></pre>

<pre><code>hive (default)&gt; set hive.cli.print.header=true;
hive (default)&gt; select * from word_count limit 3;
OK
word_count.word word_count.count
        81
a       10
about   2
Time taken: 0.396 seconds, Fetched: 3 row(s)
</code></pre>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>