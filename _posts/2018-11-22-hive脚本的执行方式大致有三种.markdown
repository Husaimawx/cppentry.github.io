---
layout:     post
title:      hive脚本的执行方式大致有三种
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/qq_29232943/article/details/79421750				</div>
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<p>hive脚本的执行方式大致有三种： </p>

<p>参考hive的用法：</p>



<pre class="prettyprint"><code class=" hljs haml">usage: hive
 -<span class="ruby">d,--define &lt;key=value&gt;          <span class="hljs-constant">Variable</span> subsitution to apply to hive
</span>                                  commands. e.g. -d A=B or --define A=B
    -<span class="ruby">-database &lt;databasename&gt;     <span class="hljs-constant">Specify</span> the database to use
</span> -<span class="ruby">e &lt;quoted-query-string&gt;         <span class="hljs-constant">SQL</span> from command line
</span> -<span class="ruby">f &lt;filename&gt;                    <span class="hljs-constant">SQL</span> from files
</span> -<span class="ruby"><span class="hljs-constant">H</span>,--help                        <span class="hljs-constant">Print</span> help information
</span> -<span class="ruby">h &lt;hostname&gt;                    connecting to <span class="hljs-constant">Hive</span> <span class="hljs-constant">Server</span> on remote host
</span>    -<span class="ruby">-hiveconf &lt;property=value&gt;   <span class="hljs-constant">Use</span> value <span class="hljs-keyword">for</span> given property
</span>    -<span class="ruby">-hivevar &lt;key=value&gt;         <span class="hljs-constant">Variable</span> subsitution to apply to hive
</span>                                  commands. e.g. --hivevar A=B
 -<span class="ruby">i &lt;filename&gt;                    <span class="hljs-constant">Initialization</span> <span class="hljs-constant">SQL</span> file
</span> -<span class="ruby">p &lt;port&gt;                        connecting to <span class="hljs-constant">Hive</span> <span class="hljs-constant">Server</span> on port number
</span> -<span class="ruby"><span class="hljs-constant">S</span>,--silent                      <span class="hljs-constant">Silent</span> mode <span class="hljs-keyword">in</span> interactive shell
</span> -<span class="ruby">v,--verbose                     <span class="hljs-constant">Verbose</span> mode (echo executed <span class="hljs-constant">SQL</span> to the
</span>                                  console)</code></pre>

<ol>
<li>hive控制台执行； </li>
</ol>

<p>hive控制台以后，执行sql语句</p>

<ol>
<li>hive -e “SQL”执行； </li>
</ol>



<pre class="prettyprint"><code class=" hljs sql">hive -e " <span class="hljs-operator"><span class="hljs-keyword">select</span> page_name, tpa_name 
<span class="hljs-keyword">from</span> pms.pms_exps_prepro 
limit <span class="hljs-number">2</span>;</span>"</code></pre>

<ol>
<li>hive -f SQL文件执行； <br>
将sql保存到一个文件中demo.sql <br>
demo.sql的内容：</li>
</ol>



<pre class="prettyprint"><code class=" hljs r">select * from table_name where <span class="hljs-keyword">...</span></code></pre>

<p>执行hive命令</p>



<pre class="prettyprint"><code class=" hljs bash">hive <span class="hljs-operator">-f</span> demo.sql</code></pre>

<p>ps：如果sql中需要有参数，而且和Linux shell脚本结合跑批</p>

<p>例子：</p>

<p>demo2.sql的内容：</p>



<pre class="prettyprint"><code class=" hljs avrasm">insert overwrite table ods_yqg<span class="hljs-preprocessor">.fdm</span>_yqg_user_asset_full partition(dt = <span class="hljs-string">"${p_date}"</span>)
select t<span class="hljs-preprocessor">.id</span>,t<span class="hljs-preprocessor">.user</span>_id,t<span class="hljs-preprocessor">.product</span>_id,t<span class="hljs-preprocessor">.principal</span>,t<span class="hljs-preprocessor">.asset</span>,
t<span class="hljs-preprocessor">.return</span>_accumulated,t<span class="hljs-preprocessor">.return</span>_yesterday,t<span class="hljs-preprocessor">.last</span>_update_date,t<span class="hljs-preprocessor">.time</span>_updated
from tmp_export<span class="hljs-preprocessor">.user</span>_asset_full as t where t<span class="hljs-preprocessor">.dt</span> = <span class="hljs-string">"${p_date}"</span><span class="hljs-comment">;</span>
</code></pre>

<p>通过hive -hivevar 加参数</p>

<p>test.sh的内容：</p>



<pre class="prettyprint"><code class=" hljs bash"><span class="hljs-shebang">#!/usr/bin/env bash
</span>
start_date=<span class="hljs-string">"<span class="hljs-variable">$1</span>"</span>
hive -hivevar p_date=<span class="hljs-variable">${start_date}</span> <span class="hljs-operator">-f</span> /data/apps/yqg_datatask_cheetah/task/tempdata/load_tmp_<span class="hljs-keyword">export</span>_asset_full_to_ods_yqg/hivescript.sql</code></pre>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>