---
layout:     post
title:      flume介绍及原理总结
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<div class="multicntwrap" style="color:rgb(68,68,68);font-family:'Hiragino Sans GB W3', 'Hiragino Sans GB', Arial, Helvetica, simsun, u5b8bu4f53;">
<div class="multicnt" style="margin-left:50px;">
<h3 class="title pre fs1" style="overflow:hidden;font-size:16px;width:439.84375px;">
<span class="tcnt" style="font-size:26px;font-family:'Hiragino Sans GB W3', 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', Arial, Helvetica, simsun, '宋体';line-height:38px;">flume介绍及原理总结</span>  </h3>
<div><br></div>
<h3 class="title pre fs1" style="overflow:hidden;width:439.84375px;">
<span style="line-height:25px;">存储，学习，共享</span></h3>
<h3 class="title pre fs1" style="overflow:hidden;font-size:16px;width:439.84375px;">
<span style="font-size:14px;line-height:25px;">一、flume简介</span></h3>
<h3 class="title pre fs1" style="overflow:hidden;font-size:16px;width:439.84375px;">
<span style="line-height:24px;font-family:Verdana, '宋体';">Flume是Cloudera提供的日志收集系统，</span><span style="line-height:24px;font-family:Verdana, '宋体';">Flume支持在日志系统中定制各类数据发送方，用于收集数据;同时，Flume提供对数据进行简单处理，并写到各种storage。</span><span style="line-height:24px;font-family:Verdana, '宋体';">Flume是一个分布式、可靠、和高可用的海量日志采集、聚合和传输的系统。</span></h3>
</div>
</div>
<div class="bct fc05 fc11 nbw-blog ztag" style="line-height:28px;font-size:16px;color:rgb(68,68,68);overflow:hidden;font-family:'Hiragino Sans GB W3', 'Hiragino Sans GB', Arial, Helvetica, simsun, u5b8bu4f53;">
<div style="line-height:22px;">
<div style="text-align:center;"><img alt="flume介绍及扩展开发心得一二 - labugao - 陈李平的博客" src="http://img1.ph.126.net/SsBq1L6h9P-0s681ck_Mrg==/3078210345325400551.jpg" style="border:0px;"></div>
<div style="text-align:center;">
<p style="line-height:24px;text-align:left;font-family:Verdana, '宋体';">
上图的Flume的Architecture，在Flume中，最重要的抽象是data flow(数据流)，data flow描述了数据从产生，传输、处理并最终写入目标的一条路径。在上图中，实线描述了data flow。</p>
<p style="line-height:24px;text-align:left;font-family:Verdana, '宋体';">
<span style="line-height:22px;"></span>其中，Agent用于采集数据，agent是flume中产生数据流的地方，同时，agent会将产生的数据流传输到collector。对应的，collector用于对数据进行聚合，往往会产生一个更大的流。</p>
<p style="line-height:24px;text-align:left;font-family:Verdana, '宋体';">
　　Flume提供了从console(控制台)、RPC(Thrift-RPC)、text(文件)、tail(UNIX tail)、syslog(syslog日志系统，支持TCP和UDP等2种模式)，exec(命令执行)等数据源上收集数据的能力。同时，Flume的数据接受方，可以是console(控制台)、text(文件)、dfs(HDFS文件)、RPC(Thrift-RPC)和syslogTCP(TCP syslog日志系统)等。</p>
<p style="line-height:24px;text-align:left;font-family:Verdana, '宋体';">
　　其中，收集数据有2种主要工作模式，如下：</p>
<p style="line-height:24px;text-align:left;font-family:Verdana, '宋体';">
　　Push Sources：外部系统会主动地将数据推送到Flume中，如RPC、syslog。</p>
<p style="line-height:24px;text-align:left;font-family:Verdana, '宋体';">
　　Polling Sources：Flume到外部系统中获取数据，一般使用轮询的方式，如text和exec。</p>
<p style="line-height:24px;text-align:left;font-family:Verdana, '宋体';">
　　注意，在Flume中，agent和collector对应，而source和sink对应。Source和sink强调发送、接受方的特性(如数据格式、编码等)，而agent和collector关注功能。</p>
<p style="line-height:24px;text-align:left;font-family:Verdana, '宋体';">
　　Flume Master用于管理数据流的配置，如下图。</p>
<p style="text-align:left;">
</p>
<div>
<div style="line-height:24px;font-family:Verdana, '宋体';"><img alt="flume介绍及扩展开发心得一二 - labugao - 陈李平的博客" src="http://img5.ph.126.net/v-B6JL7gU08-9Ud5VBgAKg==/1076078835982329985.jpg" style="line-height:22px;border:0px;"></div>
<div style="line-height:24px;font-family:Verdana, '宋体';">
<p style="text-align:left;">
为了保证可扩展性，Flume采用了多Master的方式。为了保证配置数据的一致性，Flume引入了ZooKeeper，用于保存配置数据，ZooKeeper本身可保证配置数据的一致性和高可用，另外，在配置数据发生变化时，ZooKeeper可以通知Flume Master节点。</p>
<p style="text-align:left;">
　　Flume Master间使用gossip协议同步数据。</p>
<p style="text-align:left;">
　　下面简要分析Flume如何支持Reliability、Scalability、Manageability和Extensibility。</p>
<p style="text-align:left;">
　　Reliability：Flume提供3中数据可靠性选项，包括End-to-end、Store on failure和Best effort。其中End-to-end使用了磁盘日志和接受端Ack的方式，保证Flume接受到的数据会最终到达目的。Store on failure在目的不可用的时候，数据会保持在本地硬盘。和End-to-end不同的是，如果是进程出现问题，Store on failure可能会丢失部分数据。Best effort不做任何QoS保证。</p>
<p style="text-align:left;">
　　Scalability：Flume的3大组件：collector、master和storage tier都是可伸缩的。需要注意的是，Flume中对事件的处理不需要带状态，它的Scalability可以很容易实现。</p>
<p style="text-align:left;">
　　Manageability：Flume利用ZooKeeper和gossip，保证配置数据的一致性、高可用。同时，多Master，保证Master可以管理大量的节点。</p>
<p style="text-align:left;">
　　Extensibility：基于Java，用户可以为Flume添加各种新的功能，如通过继承Source，用户可以实现自己的数据接入方式，实现Sink的子类，用户可以将数据写往特定目标，同时，通过SinkDecorator，用户可以对数据进行一定的预处理。</p>
</div>
<div style="text-indent:25px;"><span style="line-height:24px;font-family:Verdana, '宋体';"> 注：以上介绍来自：http://caibinbupt.iteye.com/blog/765960，更多了解请参考</span><span style="font-family:'Lucida Grande', 'Lucida Sans Unicode', Verdana, sans-serif;"><span style="line-height:24px;font-size:12px;">Flume主页：http</span></span><span style="line-height:24px;text-align:left;font-size:12px;"><span style="font-family:'Lucida Grande', 'Lucida Sans Unicode', Verdana, sans-serif;line-height:19px;">s://github.com/cloudera/flume/</span></span></div>
</div>
</div>
<div><strong><span style="font-size:14px;line-height:25px;">二、为什么选择flume</span></strong></div>
<div><span></span>目前可选的开源日志收集项目有如下这些：facebook的scribe，apache的chukwa，linkedin的kafka和cloudera的flume，注：flume正逐步迁移到apache下。其他项目的介绍课参考各项目主页:</div>
<div>
<div>scribe主页：https://github.com/facebook/scribe</div>
<div>chukwa主页：http://incubator.apache.org/chukwa/</div>
<div>kafka主页：http://sna-projects.com/kafka/</div>
</div>
<div>在此参考网友绘制的对比图表：</div>
<div>
<div style="text-align:center;"><img alt="flume介绍及扩展开发心得一二 - labugao - 陈李平的博客" src="http://img0.ph.126.net/g37Q4mntNYpR9qshjy9jmQ==/1020628265570513840.jpg" style="border:0px;"></div>
<div style="text-align:center;">（图表来自：http://dongxicheng.org/search-engine/log-systems/）</div>
<div>从上图中可以看出flume作为开源的日志收集项目比较优秀，使用广泛，参考资料比较多。整体设计架构提供了强大的可扩展性和丰富的自带插件。</div>
</div>
<div><strong><span style="font-size:14px;line-height:25px;">三、我们做了些什么</span></strong></div>
<div><span></span>flume作为数据流平台中日志数据收集模块的核心组件，我们使用了他强大的收集和分流功能，在原有的基础上加上了分流配置的可管理功能。把日志的分流集中管理，有效的避免了flume原有分流方式的弊端：一种分流方式失败导致日志重复发送。日志的分流配置以及归档配置使用外部管理的方式，从而使系统的运维更方便。</div>
<div>日志存入hdfs的分流方式涉及到归档问题，flume本身提供了collectorSink支持日志数据存入hdfs，默认只支持按时间的归档方式，查看源码很容易发现flume也支持大小归档，甚至可以时间归档和大小归档同时使用。但是我们要求的更多，线上往往要求一个文件的大小不能超过64M，但归档的文件也不能太小，这就需要管理员根据产品高峰和低谷的日志量来分配归档规则，并且实现大小归档不能重置时间归档的触发器，因此这一需求需要改写flume本身提供的trigger。</div>
<div>flume中hdfs文件的归档靠两个地方实现，具体实现见RollSink.java,以下列举代码片段：</div>
<div>
<pre class="prettyprint" style="line-height:28px;border:1px solid rgb(136,136,136);"></pre><p><span class="kwd" style="color:rgb(0,0,136);">public</span><span class="pln" style="color:rgb(0,0,0);"> </span><span class="kwd" style="color:rgb(0,0,136);">void</span><span class="pln" style="color:rgb(0,0,0);"> synchronousAppend</span><span class="pun" style="color:rgb(102,102,0);">(</span><span class="typ" style="color:rgb(102,0,102);">Event</span><span class="pln" style="color:rgb(0,0,0);"> e</span><span class="pun" style="color:rgb(102,102,0);">)</span><span class="pln" style="color:rgb(0,0,0);"> </span><span class="kwd" style="color:rgb(0,0,136);">throws</span><span class="pln" style="color:rgb(0,0,0);"> </span><span class="typ" style="color:rgb(102,0,102);">IOException</span><span class="pun" style="color:rgb(102,102,0);">,</span></p><p><span class="pln" style="color:rgb(0,0,0);">      </span><span class="typ" style="color:rgb(102,0,102);">InterruptedException</span><span class="pln" style="color:rgb(0,0,0);"> </span><span class="pun" style="color:rgb(102,102,0);">{</span></p><p><span class="pln" style="color:rgb(0,0,0);">    </span><span class="typ" style="color:rgb(102,0,102);">Preconditions</span><span class="pun" style="color:rgb(102,102,0);">.</span><span class="pln" style="color:rgb(0,0,0);">checkState</span><span class="pun" style="color:rgb(102,102,0);">(</span><span class="pln" style="color:rgb(0,0,0);">curSink</span><span class="pln" style="color:rgb(0,0,0);"> </span><span class="pun" style="color:rgb(102,102,0);">!=</span><span class="pln" style="color:rgb(0,0,0);"> </span><span class="kwd" style="color:rgb(0,0,136);">null</span><span class="pun" style="color:rgb(102,102,0);">,</span></p><p><span class="pln" style="color:rgb(0,0,0);">        </span><span class="str" style="color:rgb(0,136,0);">"Attempted to append when rollsink not open"</span><span class="pun" style="color:rgb(102,102,0);">);</span></p><p><span style="color:#3366ff;"><span class="pln" style="color:rgb(0,0,0);">    </span><span class="kwd" style="color:rgb(0,0,136);">if</span><span class="pln" style="color:rgb(0,0,0);"> </span><span class="pun" style="color:rgb(102,102,0);">(</span><span class="pln" style="color:rgb(0,0,0);">trigger</span><span class="pun" style="color:rgb(102,102,0);">.</span><span class="pln" style="color:rgb(0,0,0);">isTriggered</span><span class="pun" style="color:rgb(102,102,0);">())</span><span class="pln" style="color:rgb(0,0,0);"> </span><span class="pun" style="color:rgb(102,102,0);">{</span></span></p><p><span style="color:#3366ff;"><span class="pln" style="color:rgb(0,0,0);">      </span><span class="pln" style="color:rgb(0,0,0);">trigger</span><span class="pun" style="color:rgb(102,102,0);">.</span><span class="pln" style="color:rgb(0,0,0);">reset</span><span class="pun" style="color:rgb(102,102,0);">();</span></span></p><p><span style="color:#3366ff;"><span class="pln" style="color:rgb(0,0,0);">      </span><span class="pln" style="color:rgb(0,0,0);">LOG</span><span class="pun" style="color:rgb(102,102,0);">.</span><span class="pln" style="color:rgb(0,0,0);">debug</span><span class="pun" style="color:rgb(102,102,0);">(</span><span class="str" style="color:rgb(0,136,0);">"Rotate started by append... "</span><span class="pun" style="color:rgb(102,102,0);">);</span></span></p><p><span style="color:#3366ff;"><span class="pln" style="color:rgb(0,0,0);">      rotate</span><span class="pun" style="color:rgb(102,102,0);">();</span></span></p><p><span style="color:#3366ff;"><span class="pln" style="color:rgb(0,0,0);">      </span><span class="pln" style="color:rgb(0,0,0);">LOG</span><span class="pun" style="color:rgb(102,102,0);">.</span><span class="pln" style="color:rgb(0,0,0);">debug</span><span class="pun" style="color:rgb(102,102,0);">(</span><span class="str" style="color:rgb(0,136,0);">"... rotate completed by append."</span><span class="pun" style="color:rgb(102,102,0);">);</span></span></p><p><span style="color:#3366ff;"><span class="pln" style="color:rgb(0,0,0);">    </span><span class="pun" style="color:rgb(102,102,0);">}</span></span></p><p><span class="pln" style="color:rgb(0,0,0);">    </span><span style="color:#ff0000;"><span class="typ" style="color:rgb(102,0,102);">String</span><span class="pln" style="color:rgb(0,0,0);"> tag </span><span class="pun" style="color:rgb(102,102,0);">=</span><span class="pln" style="color:rgb(0,0,0);"> </span><span class="pln" style="color:rgb(0,0,0);">trigger</span><span class="pun" style="color:rgb(102,102,0);">.</span><span class="pln" style="color:rgb(0,0,0);">getTagger</span><span class="pun" style="color:rgb(102,102,0);">().</span><span class="pln" style="color:rgb(0,0,0);">getTag</span><span class="pun" style="color:rgb(102,102,0);">();</span></span></p><p><span style="color:#ff0000;"><span class="pln" style="color:rgb(0,0,0);">    e</span><span class="pun" style="color:rgb(102,102,0);">.</span><span class="kwd" style="color:rgb(0,0,136);">set</span><span class="pun" style="color:rgb(102,102,0);">(</span><span class="pln" style="color:rgb(0,0,0);">A_ROLL_TAG</span><span class="pun" style="color:rgb(102,102,0);">,</span><span class="pln" style="color:rgb(0,0,0);"> tag</span><span class="pun" style="color:rgb(102,102,0);">.</span><span class="pln" style="color:rgb(0,0,0);">getBytes</span><span class="pun" style="color:rgb(102,102,0);">());</span></span></p><p><span style="color:#ff0000;"><span class="pln" style="color:rgb(0,0,0);">    </span><span class="kwd" style="color:rgb(0,0,136);">lock</span><span class="pun" style="color:rgb(102,102,0);">.</span><span class="pln" style="color:rgb(0,0,0);">readLock</span><span class="pun" style="color:rgb(102,102,0);">().</span><span class="kwd" style="color:rgb(0,0,136);">lock</span><span class="pun" style="color:rgb(102,102,0);">();</span></span></p><p><span style="color:#ff0000;"><span class="pln" style="color:rgb(0,0,0);">    </span><span class="kwd" style="color:rgb(0,0,136);">try</span><span class="pln" style="color:rgb(0,0,0);"> </span><span class="pun" style="color:rgb(102,102,0);">{</span></span></p><p><span style="color:#ff0000;"><span class="pln" style="color:rgb(0,0,0);">      </span><span class="pln" style="color:rgb(0,0,0);">curSink</span><span class="pun" style="color:rgb(102,102,0);">.</span><span class="pln" style="color:rgb(0,0,0);">append</span><span class="pun" style="color:rgb(102,102,0);">(</span><span class="pln" style="color:rgb(0,0,0);">e</span><span class="pun" style="color:rgb(102,102,0);">);</span></span></p><p><span style="color:#ff0000;"><span class="pln" style="color:rgb(0,0,0);">      </span><span class="pln" style="color:rgb(0,0,0);">trigger</span><span class="pun" style="color:rgb(102,102,0);">.</span><span class="pln" style="color:rgb(0,0,0);">append</span><span class="pun" style="color:rgb(102,102,0);">(</span><span class="pln" style="color:rgb(0,0,0);">e</span><span class="pun" style="color:rgb(102,102,0);">);</span></span></p><p><span style="color:#ff0000;"><span class="pln" style="color:rgb(0,0,0);">      </span><span class="kwd" style="color:rgb(0,0,136);">super</span><span class="pun" style="color:rgb(102,102,0);">.</span><span class="pln" style="color:rgb(0,0,0);">append</span><span class="pun" style="color:rgb(102,102,0);">(</span><span class="pln" style="color:rgb(0,0,0);">e</span><span class="pun" style="color:rgb(102,102,0);">);</span></span></p><p><span style="color:#ff0000;"><span class="pln" style="color:rgb(0,0,0);">    </span><span class="pun" style="color:rgb(102,102,0);">}</span><span class="pln" style="color:rgb(0,0,0);"> </span><span class="kwd" style="color:rgb(0,0,136);">finally</span><span class="pln" style="color:rgb(0,0,0);"> </span><span class="pun" style="color:rgb(102,102,0);">{</span></span></p><p><span style="color:#ff0000;"><span class="pln" style="color:rgb(0,0,0);">      </span><span class="kwd" style="color:rgb(0,0,136);">lock</span><span class="pun" style="color:rgb(102,102,0);">.</span><span class="pln" style="color:rgb(0,0,0);">readLock</span><span class="pun" style="color:rgb(102,102,0);">().</span><span class="pln" style="color:rgb(0,0,0);">unlock</span><span class="pun" style="color:rgb(102,102,0);">();</span></span></p><p><span style="color:#ff0000;"><span class="pln" style="color:rgb(0,0,0);">    </span><span class="pun" style="color:rgb(102,102,0);">}</span></span></p><p><span class="pln" style="color:rgb(0,0,0);">  </span><span class="pun" style="color:rgb(102,102,0);">}</span></p><p></p>
如上代码可以看到，每条日志过来都需要trigger判断是否达到归档条件。如果达到归档条件则惊醒归档，并且把该条日志写入新的文件中。个人觉得如上绿色和红色代码应该交换顺寻，触发归档的日志应该写入当前文档，而不是写入新创建的文档中，理由有两点：1、日志从产品处发送到flume虽然时间很短，但是触发归档的日志产生时间是大于归档时间的，理论上是属于上个归档规则之内的日志，例如：时间方式归档。</div>
<div>另外在RollSink内部有个线程每隔250毫秒执行一次如下归档判断：</div>
<div>
<pre class="prettyprint" style="line-height:28px;border:1px solid rgb(136,136,136);"></pre><p><span class="pln" style="color:rgb(0,0,0);"> </span><span class="kwd" style="color:rgb(0,0,136);">while</span><span class="pln" style="color:rgb(0,0,0);"> </span><span class="pun" style="color:rgb(102,102,0);">(!</span><span class="pln" style="color:rgb(0,0,0);">isInterrupted</span><span class="pun" style="color:rgb(102,102,0);">())</span><span class="pln" style="color:rgb(0,0,0);"> </span><span class="pun" style="color:rgb(102,102,0);">{</span></p><p><span class="pln" style="color:rgb(0,0,0);">          </span><span class="com" style="color:rgb(136,0,0);">// </span><span class="com" style="color:rgb(136,0,0);">TODO</span><span class="com" style="color:rgb(136,0,0);"> there should probably be a lock on Roll sink but until we</span></p><p><span class="com" style="color:rgb(136,0,0);">          </span><span class="com" style="color:rgb(136,0,0);">// handle</span></p><p><span class="com" style="color:rgb(136,0,0);">          </span><span class="com" style="color:rgb(136,0,0);">// interruptions throughout the code, we cannot because this causes a</span></p><p><span class="com" style="color:rgb(136,0,0);">          </span><span class="com" style="color:rgb(136,0,0);">// deadlock</span></p><p><span class="com" style="color:rgb(136,0,0);">          </span><span class="com" style="color:rgb(136,0,0);">if</span><span class="com" style="color:rgb(136,0,0);"> (</span><span class="com" style="color:rgb(136,0,0);">trigger</span><span class="com" style="color:rgb(136,0,0);">.isTriggered()) {</span></p><p><span class="com" style="color:rgb(136,0,0);">            </span><span class="com" style="color:rgb(136,0,0);">trigger</span><span class="com" style="color:rgb(136,0,0);">.reset();</span></p><p><span class="com" style="color:rgb(136,0,0);">            </span><span class="com" style="color:rgb(136,0,0);">LOG</span><span class="com" style="color:rgb(136,0,0);">.debug(</span><span class="com" style="color:rgb(136,0,0);">"Rotate started by triggerthread... "</span><span class="com" style="color:rgb(136,0,0);">);</span></p><p><span class="com" style="color:rgb(136,0,0);">            rotate();</span></p><p><span class="com" style="color:rgb(136,0,0);">            </span><span class="com" style="color:rgb(136,0,0);">LOG</span><span class="com" style="color:rgb(136,0,0);">.debug(</span><span class="com" style="color:rgb(136,0,0);">"Rotate stopped by triggerthread... "</span><span class="com" style="color:rgb(136,0,0);">);</span></p><p><span class="com" style="color:rgb(136,0,0);">           </span><span class="com" style="color:rgb(136,0,0);">continue</span><span class="com" style="color:rgb(136,0,0);">;</span></p><p><span class="com" style="color:rgb(136,0,0);">          }</span></p><p><span class="com" style="color:rgb(136,0,0);">          </span><span class="com" style="color:rgb(136,0,0);">try</span><span class="com" style="color:rgb(136,0,0);"> {</span></p><p><span class="com" style="color:rgb(136,0,0);">            Clock.sleep(</span><span class="com" style="color:rgb(136,0,0);">checkLatencyMs</span><span class="com" style="color:rgb(136,0,0);">);</span></p><p><span class="com" style="color:rgb(136,0,0);">          } </span><span class="com" style="color:rgb(136,0,0);">catch</span><span class="com" style="color:rgb(136,0,0);"> (InterruptedException e) {</span></p><p><span class="com" style="color:rgb(136,0,0);">            </span><span class="com" style="color:rgb(136,0,0);">LOG</span><span class="com" style="color:rgb(136,0,0);">.debug(</span><span class="com" style="color:rgb(136,0,0);">"TriggerThread interrupted"</span><span class="com" style="color:rgb(136,0,0);">);</span></p><p><span class="com" style="color:rgb(136,0,0);">            </span><span class="com" style="color:rgb(136,0,0);">doneLatch</span><span class="com" style="color:rgb(136,0,0);">.countDown();</span></p><p><span class="com" style="color:rgb(136,0,0);">            </span><span class="com" style="color:rgb(136,0,0);">return</span><span class="com" style="color:rgb(136,0,0);">;</span></p><p><span class="com" style="color:rgb(136,0,0);">          }</span></p><p><span style="line-height:22px;"><span class="com" style="line-height:28px;color:rgb(136,0,0);">}</span></span></p><p></p>
该线程用于保证当没有日志过来的时候，按时间归档的日志能够及时归档，归档的方式为关闭RollSink中curSink,重新open。</div>
<div>我们并没有采用上述flume原生的归档触发方式，因为我们系统中日志的分流采用聚合方式负责分流，一条日志可能分流到几种不同的storage,都是在一个sink中管理，因此hdfs的分流Sink需要负责多种tag的日志的归档，而这些文件的归档时间和大小各不相同，我们采用了在日志流中加入归档信号标志，当负责写hdfs的Sink接收到表示需要归档的event的时，提取出需要归档的hdfsWriter，作reopen操作。</div>
<div><strong><span style="font-size:14px;line-height:25px;">四、问题及解决</span></strong></div>
</div>
<div style="line-height:22px;"><span></span>在使用flume过程中遇到两个奇怪的问题：</div>
<div style="line-height:22px;"><span></span>1、flume使用lzo压缩方式存储到hdfs的配置，网上查了很多，都是介绍只要在flume-site.xml中加上如下配置：</div>
<div style="line-height:22px;">
<p>
</p>
<pre class="prettyprint" style="line-height:28px;border:1px solid rgb(136,136,136);"></pre><p></p><p style="line-height:22px;font-family:Arial, Helvetica, sans-serif;"><span class="pln" style="line-height:28px;color:rgb(0,0,0);">  </span><span class="tag" style="line-height:28px;color:rgb(0,0,136);">&lt;property&gt;</span></p><p style="line-height:22px;font-family:Arial, Helvetica, sans-serif;"><span class="pln" style="line-height:28px;color:rgb(0,0,0);">        </span><span class="tag" style="line-height:28px;color:rgb(0,0,136);">&lt;name&gt;</span><span class="pln" style="line-height:28px;color:rgb(0,0,0);">flume.collector.dfs.compress.codec</span><span class="tag" style="line-height:28px;color:rgb(0,0,136);">&lt;/name&gt;</span></p><p style="line-height:22px;font-family:Arial, Helvetica, sans-serif;"><span class="pln" style="line-height:28px;color:rgb(0,0,0);">        </span><span class="tag" style="line-height:28px;color:rgb(0,0,136);">&lt;value&gt;</span><span class="pln" style="line-height:28px;color:rgb(0,0,0);">Lzop</span><span class="tag" style="line-height:28px;color:rgb(0,0,136);">&lt;/value&gt;</span></p><p style="line-height:22px;font-family:Arial, Helvetica, sans-serif;"><span class="pln" style="line-height:28px;color:rgb(0,0,0);">        </span><span class="tag" style="line-height:28px;color:rgb(0,0,136);">&lt;description&gt;</span><span class="pln" style="line-height:28px;color:rgb(0,0,0);">Writes formatted data compressed in specified codec to dfs. Value is None, GzipCodec, DefaultCodec (deflate), BZip2Codec, or any other Codec Hadoop is aware of </span><span class="tag" style="line-height:28px;color:rgb(0,0,136);">&lt;/description&gt;</span></p><p style="line-height:22px;font-family:Arial, Helvetica, sans-serif;"><span class="pln" style="line-height:28px;color:rgb(0,0,0);">  </span><span class="tag" style="line-height:28px;color:rgb(0,0,136);">&lt;/property&gt;</span></p>
</div>
<div style="line-height:22px;">我们也按网上介绍的加上了如此配置，始终不行，后来看了flume的源码才发现，flume系统中使用到的hadoop的Jar文件需要读取到如下配置：</div>
<div style="line-height:22px;">
<p>
</p>
<p>
</p>
<pre class="prettyprint" style="line-height:28px;border:1px solid rgb(136,136,136);"></pre><p></p><p style="line-height:22px;font-family:Arial, Helvetica, sans-serif;"><span class="tag" style="line-height:28px;color:rgb(0,0,136);">&lt;property&gt;</span></p><p style="line-height:22px;font-family:Arial, Helvetica, sans-serif;"><span class="pln" style="line-height:28px;color:rgb(0,0,0);">     </span><span class="tag" style="line-height:28px;color:rgb(0,0,136);">&lt;name&gt;</span><span class="pln" style="line-height:28px;color:rgb(0,0,0);">io.compression.codecs</span><span class="tag" style="line-height:28px;color:rgb(0,0,136);">&lt;/name&gt;</span></p><p style="line-height:22px;font-family:Arial, Helvetica, sans-serif;"><span class="pln" style="line-height:28px;color:rgb(0,0,0);">     </span><span class="tag" style="line-height:28px;color:rgb(0,0,136);">&lt;value&gt;</span><span class="pln" style="line-height:28px;color:rgb(0,0,0);">com.hadoop.compression.lzo.LzopCodec</span><span class="tag" style="line-height:28px;color:rgb(0,0,136);">&lt;/value&gt;</span></p><p style="line-height:22px;font-family:Arial, Helvetica, sans-serif;"><span class="pln" style="line-height:28px;color:rgb(0,0,0);">    </span><span class="tag" style="line-height:28px;color:rgb(0,0,136);">&lt;description&gt;</span><span class="pln" style="line-height:28px;color:rgb(0,0,0);">lzop</span><span class="tag" style="line-height:28px;color:rgb(0,0,136);">&lt;/description&gt;</span></p><p style="line-height:22px;font-family:Arial, Helvetica, sans-serif;"><span class="tag" style="line-height:28px;color:rgb(0,0,136);">&lt;/property&gt;</span></p>
</div>
<div style="line-height:22px;">就是告诉flume，存储的hdfs支持lzop压缩格式的存储。当flume所在节点有部署hadoop的话，就不需要上述配置。不知道官网文档中哟没有介绍到这一点，网上找了很久没有提到这一点，希望对其他人有帮助。</div>
<div style="line-height:22px;"><span></span>2、flume连接的hdfs需要kerbores进行权限验证，根据网站介绍同样只需要加上如下配置：</div>
<div style="line-height:22px;">
<p>
</p>
<p>
</p>
<pre class="prettyprint" style="line-height:28px;border:1px solid rgb(136,136,136);"></pre><p></p><p style="line-height:22px;font-family:Arial, Helvetica, sans-serif;"><span class="tag" style="line-height:28px;color:rgb(0,0,136);">&lt;property&gt;</span></p><p style="line-height:22px;font-family:Arial, Helvetica, sans-serif;"><span class="pln" style="line-height:28px;color:rgb(0,0,0);">    </span><span class="tag" style="line-height:28px;color:rgb(0,0,136);">&lt;name&gt;</span><span class="pln" style="line-height:28px;color:rgb(0,0,0);">flume.security.kerberos.principal</span><span class="tag" style="line-height:28px;color:rgb(0,0,136);">&lt;/name&gt;</span></p><p style="line-height:22px;font-family:Arial, Helvetica, sans-serif;"><span class="pln" style="line-height:28px;color:rgb(0,0,0);">    </span><span class="tag" style="line-height:28px;color:rgb(0,0,136);">&lt;value&gt;</span><span class="pln" style="line-height:28px;color:rgb(0,0,0);">flume/local@DOMAIN</span><span class="tag" style="line-height:28px;color:rgb(0,0,136);">&lt;/value&gt;</span></p><p style="line-height:22px;font-family:Arial, Helvetica, sans-serif;"><span class="pln" style="line-height:28px;color:rgb(0,0,0);">    </span><span class="tag" style="line-height:28px;color:rgb(0,0,136);">&lt;description&gt;&lt;/description&gt;</span></p><p style="line-height:22px;font-family:Arial, Helvetica, sans-serif;"><span class="tag" style="line-height:28px;color:rgb(0,0,136);">&lt;/property&gt;</span></p><p style="line-height:22px;font-family:Arial, Helvetica, sans-serif;"><span class="tag" style="line-height:28px;color:rgb(0,0,136);">&lt;property&gt;</span></p><p style="line-height:22px;font-family:Arial, Helvetica, sans-serif;"><span class="pln" style="line-height:28px;color:rgb(0,0,0);">    </span><span class="tag" style="line-height:28px;color:rgb(0,0,136);">&lt;name&gt;</span><span class="pln" style="line-height:28px;color:rgb(0,0,0);">flume.security.kerberos.keytab</span><span class="tag" style="line-height:28px;color:rgb(0,0,136);">&lt;/name&gt;</span></p><p style="line-height:22px;font-family:Arial, Helvetica, sans-serif;"><span class="pln" style="line-height:28px;color:rgb(0,0,0);">    </span><span class="tag" style="line-height:28px;color:rgb(0,0,136);">&lt;value&gt;</span><span class="pln" style="line-height:28px;color:rgb(0,0,0);">/home/ds/flume/flume.keytab</span><span class="tag" style="line-height:28px;color:rgb(0,0,136);">&lt;/value&gt;</span></p><p style="line-height:22px;font-family:Arial, Helvetica, sans-serif;"><span class="pln" style="line-height:28px;color:rgb(0,0,0);">    </span><span class="tag" style="line-height:28px;color:rgb(0,0,136);">&lt;description&gt;&lt;/description&gt;</span></p><p style="line-height:22px;font-family:Arial, Helvetica, sans-serif;"><span class="tag" style="line-height:28px;color:rgb(0,0,136);">&lt;/property&gt;</span></p>
</div>
<div style="line-height:22px;">依然不行，后来查找原因，其实和上一点相同，flume中依赖hadoop的jar需要读取hadoop的配置，而flume不和hadoop部署在一个节点的时候，很多配置无法获取，所以需要另外再flume环境变量中加入hadoop的配置,需要把hadoop关于keberos配置参数写到fluem/conf/目录下core-default.xml。</div>
</div>
            </div>
                </div>