---
layout:     post
title:      Hive常用命令记录
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<p><strong>Hive的常用命令</strong> <br>
<a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DDL#LanguageManualDDL-CreateTable" rel="nofollow">HIve DDL语法参考</a> <br>
使用<code>bin/hive -help</code>查看帮助命令</p>

<pre class="prettyprint"><code class=" hljs haml">[hadoop@hadoop apache-hive-0.13.1-bin]$ bin/hive -help
usage: hive
 -<span class="ruby">d,--define &lt;key=value&gt;          <span class="hljs-constant">Variable</span> subsitution to apply to hive
</span>                                  commands. e.g. -d A=B or --define A=B
    -<span class="ruby">-database &lt;databasename&gt;     <span class="hljs-constant">Specify</span> the database to use
</span> -<span class="ruby">e &lt;quoted-query-string&gt;         <span class="hljs-constant">SQL</span> from command line
</span> -<span class="ruby">f &lt;filename&gt;                    <span class="hljs-constant">SQL</span> from files
</span> -<span class="ruby"><span class="hljs-constant">H</span>,--help                        <span class="hljs-constant">Print</span> help information
</span> -<span class="ruby">h &lt;hostname&gt;                    connecting to <span class="hljs-constant">Hive</span> <span class="hljs-constant">Server</span> on remote host
</span>    -<span class="ruby">-hiveconf &lt;property=value&gt;   <span class="hljs-constant">Use</span> value <span class="hljs-keyword">for</span> given property
</span>    -<span class="ruby">-hivevar &lt;key=value&gt;         <span class="hljs-constant">Variable</span> subsitution to apply to hive
</span>                                  commands. e.g. --hivevar A=B
 -<span class="ruby">i &lt;filename&gt;                    <span class="hljs-constant">Initialization</span> <span class="hljs-constant">SQL</span> file
</span> -<span class="ruby">p &lt;port&gt;                        connecting to <span class="hljs-constant">Hive</span> <span class="hljs-constant">Server</span> on port number
</span> -<span class="ruby"><span class="hljs-constant">S</span>,--silent                      <span class="hljs-constant">Silent</span> mode <span class="hljs-keyword">in</span> interactive shell
</span> -<span class="ruby">v,--verbose                     <span class="hljs-constant">Verbose</span> mode (echo executed <span class="hljs-constant">SQL</span> to the
</span>                                  console)</code></pre>

<pre class="prettyprint"><code class=" hljs ruby">直接指定使用hadoop14数据库
[hadoop<span class="hljs-variable">@hadoop</span> apache-hive-<span class="hljs-number">0</span>.<span class="hljs-number">13.1</span>-bin]<span class="hljs-variable">$ </span>bin/hive --database hadoop14 </code></pre>

<pre class="prettyprint"><code class=" hljs bash">在<span class="hljs-operator">-e</span>后面直接执行HQL语句
bin/hive <span class="hljs-operator">-e</span> <span class="hljs-string">'show databases'</span>  </code></pre>

<pre class="prettyprint"><code class=" hljs bash">把执行结果追加到文件中
bin/hive <span class="hljs-operator">-e</span> <span class="hljs-string">'show databases'</span> &gt; hivetest.txt </code></pre>

<pre class="prettyprint"><code class=" hljs bash">在linuxshell命令行执行一个写有sql语句的文件
bin/hive <span class="hljs-operator">-f</span> /opt/datas/hive.sql</code></pre>

<pre class="prettyprint"><code class=" hljs avrasm">只针对于当前shell生效的更改配置的参数
bin/hive --hiveconf hive<span class="hljs-preprocessor">.cli</span><span class="hljs-preprocessor">.print</span><span class="hljs-preprocessor">.current</span><span class="hljs-preprocessor">.db</span>=false</code></pre>



<pre class="prettyprint"><code class=" hljs avrasm">查看当前参数的设置的值是什么
<span class="hljs-keyword">set</span> hive<span class="hljs-preprocessor">.cli</span><span class="hljs-preprocessor">.print</span><span class="hljs-preprocessor">.current</span><span class="hljs-preprocessor">.db</span><span class="hljs-comment">;</span>
<span class="hljs-keyword">set</span> hive<span class="hljs-preprocessor">.cli</span><span class="hljs-preprocessor">.print</span><span class="hljs-preprocessor">.current</span><span class="hljs-preprocessor">.db</span>=false<span class="hljs-comment">;</span>
同样也可以更改当前参数的值，只针对于当前shell生效</code></pre>



<pre class="prettyprint"><code class=" hljs lua">新建库
hive (default)&gt; create database <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> exists db_01 location <span class="hljs-string">'/locate'</span>;
新建表
create <span class="hljs-built_in">table</span> db_01.tb_01(
name <span class="hljs-built_in">string</span>
)row format delimited fields terminated by <span class="hljs-string">'\t'</span>;
删除空的数据库：
drop database db02;
删除表语法
DROP (DATABASE|SCHEMA) [IF EXISTS] database_name [RESTRICT|CASCADE];
删除非空的数据库
drop database db01_loc CASCADE;
表的第一种创建方式：普通创建
create <span class="hljs-built_in">table</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> exists stu_info(
num int,
name <span class="hljs-built_in">string</span>
)
row format delimited fields terminated by <span class="hljs-string">'\t'</span>
stored as textfile;
<span class="hljs-built_in">load</span> data <span class="hljs-keyword">local</span> inpath <span class="hljs-string">'/opt/datas/student.txt'</span> into <span class="hljs-built_in">table</span> stu_info;
清空表的内容,保留了表的结构
truncate <span class="hljs-built_in">table</span> student;

删除表：
drop <span class="hljs-built_in">table</span> <span class="hljs-keyword">if</span> exists student;
创建表
create <span class="hljs-built_in">table</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> exists student(
num int,
name <span class="hljs-built_in">string</span>
)
row format delimited fields terminated by <span class="hljs-string">'\t'</span>
stored as textfile;
从本地加载
<span class="hljs-built_in">load</span> data <span class="hljs-keyword">local</span> inpath <span class="hljs-string">'/opt/datas/student.txt'</span> into <span class="hljs-built_in">table</span> student;
从HDFS加载
<span class="hljs-built_in">load</span> data inpath <span class="hljs-string">'/student.txt'</span> into <span class="hljs-built_in">table</span> student;
本地加载和HDFS加载的区别，一个本地的复制拷贝，一个是移动数据文件的位置到对应的表目录下
表的第二种创建方式：子查询
create <span class="hljs-built_in">table</span> stu_as as <span class="hljs-built_in">select</span> name from student;
特点：将子查询的结构赋予一张新的表
表的第三种创建方式：like方式
create <span class="hljs-built_in">table</span> stu_like like student;
特点：复制表的结构
建库：
create database <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> exists db_emp;
员工表：
create <span class="hljs-built_in">table</span> emp(
empno int,
ename <span class="hljs-built_in">string</span>,
job <span class="hljs-built_in">string</span>,
mgr int,
hiredate <span class="hljs-built_in">string</span>,
sal double,
comm double,
deptno int
)
row format delimited fields terminated by <span class="hljs-string">'\t'</span>;
<span class="hljs-built_in">load</span> data <span class="hljs-keyword">local</span> inpath <span class="hljs-string">'/opt/moduels/apache-hive-0.13.1-bin/emp.txt'</span> into <span class="hljs-built_in">table</span> emp;
加上overwrite参数执行的操作是，先删除数据，后加载数据
<span class="hljs-built_in">load</span> data <span class="hljs-keyword">local</span> inpath <span class="hljs-string">'/opt/moduels/apache-hive-0.13.1-bin/emp.txt'</span> overwrite into <span class="hljs-built_in">table</span> emp;
部门表：
create <span class="hljs-built_in">table</span> dept(
deptno int,
dname <span class="hljs-built_in">string</span>,
loc <span class="hljs-built_in">string</span>
)
row format delimited fields terminated by <span class="hljs-string">'\t'</span>;
<span class="hljs-built_in">load</span> data <span class="hljs-keyword">local</span> inpath <span class="hljs-string">'/opt/moduels/apache-hive-0.13.1-bin/dept.txt'</span> into <span class="hljs-built_in">table</span> dept;
创建表的时候还可以直接指定数据库文件加上LOCATION关键字，这样是共享同一份元数据，共享中的任意一个表如果被drop掉了，那么元数据库也就没有了，可以通过创建外部表解决共享元数据问题。
create <span class="hljs-built_in">table</span> emp1(
empno int,
ename <span class="hljs-built_in">string</span>,
job <span class="hljs-built_in">string</span>,
mgr int,
hiredate <span class="hljs-built_in">string</span>,
sal double,
comm double,
deptno int
)
row format delimited fields terminated by <span class="hljs-string">'\t'</span>
LOCATION <span class="hljs-string">'/user/hive/warehouse/emp'</span>;
创建外部表，通过EXTERNAL关键字
create EXTERNAL <span class="hljs-built_in">table</span> dept_ext(
deptno int,
dname <span class="hljs-built_in">string</span>,
loc <span class="hljs-built_in">string</span>
)
row format delimited fields terminated by <span class="hljs-string">'\t'</span>
LOCATION <span class="hljs-string">'/user/hive/warehouse/db_emp.db/dept'</span>;
管理表删除的时候是删除元数据和表的对应文件夹
外部表删除的时候只删除元数据
首先创建管理表，然后可以创建多个外部表
作用：保证数据的安全性</code></pre>

<h4 id="分区表">分区表</h4>

<blockquote>
  <p>分区表就是在原来表的基础上下一层添加文件夹，并标识这个分区就是分区字段的值…(这里暂时难以表述清楚..不好用文字描述)</p>
</blockquote>

<pre class="prettyprint"><code class=" hljs sql">创建分区表：分区表的分区是虚拟逻辑的
<span class="hljs-operator"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> emp_part(
empno <span class="hljs-keyword">int</span>,
ename string,
job string,
mgr <span class="hljs-keyword">int</span>,
hiredate string,
sal <span class="hljs-keyword">double</span>,
comm <span class="hljs-keyword">double</span>,
deptno <span class="hljs-keyword">int</span>
)
partitioned <span class="hljs-keyword">by</span> (<span class="hljs-keyword">date</span> string)
<span class="hljs-keyword">row</span> format delimited fields terminated <span class="hljs-keyword">by</span> <span class="hljs-string">'\t'</span>;</span>
加载数据并指定分区
<span class="hljs-operator"><span class="hljs-keyword">load</span> data <span class="hljs-keyword">local</span> inpath <span class="hljs-string">'/opt/moduels/apache-hive-0.13.1-bin/emp.txt'</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> emp_part partition (<span class="hljs-keyword">date</span>=<span class="hljs-string">'20170513'</span>);</span>
创建多个分区字段的表，下面案例是指定了date和hour两个分区字段
<span class="hljs-operator"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> emp_part3(
empno <span class="hljs-keyword">int</span>,
ename string,
job string,
mgr <span class="hljs-keyword">int</span>,
hiredate string,
sal <span class="hljs-keyword">double</span>,
comm <span class="hljs-keyword">double</span>,
deptno <span class="hljs-keyword">int</span>
)
partitioned <span class="hljs-keyword">by</span> (<span class="hljs-keyword">date</span> string,<span class="hljs-keyword">hour</span> string)
<span class="hljs-keyword">row</span> format delimited fields terminated <span class="hljs-keyword">by</span> <span class="hljs-string">'\t'</span>;</span>
加载两个分区字段的数据
<span class="hljs-operator"><span class="hljs-keyword">load</span> data <span class="hljs-keyword">local</span> inpath <span class="hljs-string">'/opt/moduels/apache-hive-0.13.1-bin/emp.txt'</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> emp_part3 partition (<span class="hljs-keyword">date</span>=<span class="hljs-string">'20170513'</span>,<span class="hljs-keyword">hour</span>=<span class="hljs-string">'11'</span>);</span>
</code></pre>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>