---
layout:     post
title:      spark中的动态executor分配
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/u014393917/article/details/50630829				</div>
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<h2>动态分配<span style="font-family:Arial">executor</span><span style="font-family:SimSun">的实例初始化部分</span></h2>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">如果</span><span style="color:#0800; background:rgb(255,255,255)">spark.executor.instances</span><span style="color:#000000; background:rgb(255,255,255)">配置项设置为0或者没有设置,这个默认情况下是一个未设置的值,yarn的运行模式时,这个配置通过--num-executors来得到.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">同时</span><span style="color:#0800; background:rgb(255,255,255)">spark.dynamicAllocation.enabled</span><span style="color:#000000; background:rgb(255,255,255)">配置项设置为true时.默认值为false,表示启用了动态分配executor.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">在driver端SparkContext生成时,会检查上面两个配置项,如果这两个配置满足动态executor分配的要求时,会生成一个</span><span style="color:#000000; background:rgb(228,228,255)">ExecutorAllocationManager</span><span style="color:#000000; background:rgb(255,255,255)">实例.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(228,228,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#66e7a; background:rgb(255,255,255)">_executorAllocationManager </span><span style="color:#000000; background:rgb(255,255,255)">=</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><span style="color:#0080; background:rgb(255,255,255)">if </span><span style="color:#000000; background:rgb(255,255,255)">(dynamicAllocationEnabled) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><span style="color:#000000; background:rgb(255,255,255)">Some</span><span style="color:#000000; background:rgb(255,255,255)">(</span><span style="color:#0080; background:rgb(255,255,255)">new </span><span style="color:#000000; background:rgb(255,255,255)">ExecutorAllocationManager(</span><span style="color:#0080; background:rgb(255,255,255)">this</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#66e7a; background:rgb(255,255,255)">listenerBus</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#66e7a; background:rgb(255,255,255)">_conf</span><span style="color:#000000; background:rgb(255,255,255)">))</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  } </span><span style="color:#0080; background:rgb(255,255,255)">else </span><span style="color:#000000; background:rgb(255,255,255)">{</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    None</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#66e7a; background:rgb(255,255,255)">_executorAllocationManager</span><span style="color:#000000; background:rgb(255,255,255)">.foreach(_.start())</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#00ff; background:rgb(255,255,255)">必要的配置项</span><span style="color:#000000; background:rgb(255,255,255)">:</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">1,配置项</span><span style="color:#0800; background:rgb(255,255,255)">spark.dynamicAllocation.minExecutors</span><span style="color:#000000; background:rgb(255,255,255)">,默认值0,最少分配的executor的个数.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">2,配置项</span><span style="color:#0800; background:rgb(255,255,255)">spark.dynamicAllocation.maxExecutors</span><span style="color:#000000; background:rgb(255,255,255)">,默认值int.maxvalue.最大可分配的executor的个数.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">3,配置项</span><span style="color:#0800; background:rgb(255,255,255)">spark.dynamicAllocation.initialExecutors</span><span style="color:#000000; background:rgb(255,255,255)">,默认值为配置项1的值,初始化时启用的executor的个数,</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">4,1,配置项</span><span style="color:#0800; background:rgb(255,255,255)">spark.dynamicAllocation.schedulerBacklogTimeout</span><span style="color:#000000; background:rgb(255,255,255)">,默认值1s,如果未分配的task等待分配的时间超过了这个配置的时间,表示需要新启动executor.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">4,2,配置项</span><span style="color:#0800; background:rgb(255,255,255)">spark.dynamicAllocation.sustainedSchedulerBacklogTimeout</span><span style="color:#000000; background:rgb(255,255,255)">,默认是4,1,配置项的值,这个配置用于设置在初始调度的executor调度延时后,每次的等待超时时间.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">5,配置项</span><span style="color:#0800; background:rgb(255,255,255)">spark.dynamicAllocation.executorIdleTimeout</span><span style="color:#000000; background:rgb(255,255,255)">,默认值60s,executor的空闲回收时间.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">6,配置项</span><span style="color:#0800; background:rgb(255,255,255)">spark.executor.cores</span><span style="color:#000000; background:rgb(255,255,255)">的配置(executor-cores)必须大于或等于配置项</span><span style="color:#0800; background:rgb(255,255,255)">spark.task.cpus</span><span style="color:#000000; background:rgb(255,255,255)">的值(这个配置默认是1,这是每个task需要的cpu的个数).</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">7,配置项</span><span style="color:#0800; background:rgb(255,255,255)">spark.shuffle.service.enabled</span><span style="color:#000000; background:rgb(255,255,255)">必须配置为true,默认为false.如果这个配置设置为true时,BlockManager实例生成时,需要读取</span><span style="color:#0800; background:rgb(255,255,255)">spark.shuffle.service.port</span><span style="color:#000000; background:rgb(255,255,255)">配置项配置的shuffle的端口,同时对应BlockManager的shuffleClient不在是默认的</span><span style="color:#000000; background:rgb(228,228,255)">BlockTransferService</span><span style="color:#000000; background:rgb(255,255,255)">实例,而是</span><span style="color:#000000; background:rgb(228,228,255)">ExternalShuffleClient</span><span style="color:#000000; background:rgb(255,255,255)">实例.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">8,初始化时,ExecutorAllocationManager中的属性</span><span style="color:#000000; background:rgb(255,228,255)">initializing</span><span style="color:#000000; background:rgb(255,255,255)">默认值为true,表示定时调度时,什么都不做.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">在执行ExecutorAllocationManager中的start函数时:</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#0080; background:rgb(255,255,255)">def </span><span style="color:#000000; background:rgb(255,255,255)">start(): </span><span style="color:#cc7832; background:rgb(255,255,255)">Unit </span><span style="color:#000000; background:rgb(255,255,255)">= {</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里把</span><span style="color:#000000; background:rgb(228,228,255)">ExecutorAllocationListener</span><span style="color:#000000; background:rgb(255,255,255)">实例(内部实现类)添加到sparkContext中的listenerBus中,用于监听stage,task的启动与完成,并做对应的操作.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  listenerBus.addListener(</span><span style="color:#66e7a; background:rgb(255,255,255)">listener</span><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><span style="color:#0080; background:rgb(255,255,255)">val </span><span style="color:#000000; background:rgb(255,255,255)">scheduleTask = </span><span style="color:#0080; background:rgb(255,255,255)">new </span><span style="color:#000000; background:rgb(255,255,255)">Runnable() {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><span style="color:#0080; background:rgb(255,255,255)">override def </span><span style="color:#000000; background:rgb(255,255,255)">run(): </span><span style="color:#cc7832; background:rgb(255,255,255)">Unit </span><span style="color:#000000; background:rgb(255,255,255)">= {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><span style="color:#0080; background:rgb(255,255,255)">try </span><span style="color:#000000; background:rgb(255,255,255)">{</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        schedule()</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      } </span><span style="color:#0080; background:rgb(255,255,255)">catch </span><span style="color:#000000; background:rgb(255,255,255)">{</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><span style="color:#0080; background:rgb(255,255,255)">case </span><span style="color:#000000; background:rgb(255,255,255)">ct: ControlThrowable =&gt;</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">          </span><span style="color:#0080; background:rgb(255,255,255)">throw </span><span style="color:#000000; background:rgb(255,255,255)">ct</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><span style="color:#0080; background:rgb(255,255,255)">case </span><span style="color:#000000; background:rgb(255,255,255)">t: </span><span style="color:#20999d; background:rgb(255,255,255)">Throwable </span><span style="color:#000000; background:rgb(255,255,255)">=&gt;</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">          logWarning(</span><span style="color:#0800; background:rgb(255,255,255)">s"Uncaught exception in thread </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#0800; background:rgb(255,255,255)">               </span><span style="color:#0b8bb; background:rgb(255,255,255)">$</span><span style="color:#000000; background:rgb(255,255,255)">{Thread.</span><span style="color:#000000; background:rgb(255,255,255)">currentThread</span><span style="color:#000000; background:rgb(255,255,255)">().getName}</span><span style="color:#0800; background:rgb(255,255,255)">"</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">t)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  }</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">定时100ms执行一次schedule的调度函数,来进行task的分析.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><span style="color:#66e7a; background:rgb(255,255,255)">executor</span><span style="color:#000000; background:rgb(255,255,255)">.scheduleAtFixedRate(scheduleTask</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#00ff; background:rgb(255,255,255)">0</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#66e7a; background:rgb(255,255,255)">intervalMillis</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">      </span><span style="color:#000000; background:rgb(255,255,255)">TimeUnit.</span><span style="color:#66e7a; background:rgb(255,255,255)">MILLISECONDS</span><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<h2>对<span style="font-family:Arial">executor</span><span style="font-family:SimSun">的</span>个数分配的计算</h2>
<p style="background:rgb(255,255,255)">针对task的调度主要由一个定时器每100ms进行一次schedule函数的调用.</p>
<p style="background:rgb(255,255,255)"><span style="color:#0080; background:rgb(255,255,255)">private def </span><span style="color:#000000; background:rgb(255,255,255)">schedule(): </span><span style="color:#cc7832; background:rgb(255,255,255)">Unit </span><span style="color:#000000; background:rgb(255,255,255)">= synchronized {</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">在这个函数中,首先得到当前的时间,</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><span style="color:#0080; background:rgb(255,255,255)">val </span><span style="color:#000000; background:rgb(255,255,255)">now = </span><span style="color:#66e7a; background:rgb(255,255,255)">clock</span><span style="color:#000000; background:rgb(255,255,255)">.getTimeMillis</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">在调用这个函数时,初始情况下,initializing的属性值为true,这个时候,这个函数什么也不做.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这个函数的内容,后面在进行分析.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  updateAndSyncNumExecutorsTarget(now)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这个removeTimes集合中记录有每一个executor没有被task占用后的时间,如果这个时间超过了上面配置的idle的时间,会移出掉这个executor,同时设置initializing属性为false,表示可以继续进行task的调度.retain函数只保留未超时的executor.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><span style="color:#66e7a; background:rgb(255,255,255)">removeTimes</span><span style="color:#000000; background:rgb(255,255,255)">.retain { </span><span style="color:#0080; background:rgb(255,255,255)">case </span><span style="color:#000000; background:rgb(255,255,255)">(executorId</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">expireTime) =&gt;</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><span style="color:#0080; background:rgb(255,255,255)">val </span><span style="color:#000000; background:rgb(255,255,255)">expired = now &gt;= expireTime</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><span style="color:#0080; background:rgb(255,255,255)">if </span><span style="color:#000000; background:rgb(255,255,255)">(expired) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><span style="color:#66e7a; background:rgb(255,255,255)">initializing </span><span style="color:#000000; background:rgb(255,255,255)">= </span><span style="color:#0080; background:rgb(255,255,255)">false</span><span style="color:#0080; background:rgb(255,255,255)"><br>
</span><span style="color:#0080; background:rgb(255,255,255)">      </span><span style="color:#000000; background:rgb(255,255,255)">removeExecutor(executorId)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    !expired</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p style="background:rgb(255,255,255)">如何知道stage被提交?看下面,</p>
<p style="background:rgb(255,255,255)">在SparkContext中,执行runJob命令时,针对一个stage进行submit操作时,会调用listenerBus中所有的listener对应的<span style="color:#000000; background:rgb(228,228,255)">onStageSubmitted</span>函数.</p>
<p style="background:rgb(255,255,255)">而在ExecutorAllocationManager进行start操作时,生成了一个listener,实例为ExecutorAllocationListener,并把这个listener添加到了listenerBus中.</p>
<p style="background:rgb(255,255,255)"> </p>
<p style="background:rgb(255,255,255)">接下来看看ExecutorAllocationListener中对应stage提交的监听处理:</p>
<p style="background:rgb(255,255,255)"><span style="color:#0080; background:rgb(255,255,255)">override def </span><span style="color:#000000; background:rgb(255,255,255)">onStageSubmitted(stageSubmitted: SparkListenerStageSubmitted)</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">: </span><span style="color:#cc7832; background:rgb(255,255,255)">Unit </span><span style="color:#000000; background:rgb(255,255,255)">= {</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里首先把initializing的属性值设置为false,表示下次定时调度时,需要执行executor的分配操作.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><span style="color:#66e7a; background:rgb(255,255,255)">initializing </span><span style="color:#000000; background:rgb(255,255,255)">= </span><span style="color:#0080; background:rgb(255,255,255)">false</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#0080; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#0080; background:rgb(255,255,255)">得到进行submit操作对应的stage的id与stage中对应的task的个数.</span><span style="color:#0080; background:rgb(255,255,255)"><br>
</span><span style="color:#0080; background:rgb(255,255,255)">  val </span><span style="color:#000000; background:rgb(255,255,255)">stageId = stageSubmitted.stageInfo.stageId</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><span style="color:#0080; background:rgb(255,255,255)">val </span><span style="color:#000000; background:rgb(255,255,255)">numTasks = stageSubmitted.stageInfo.numTasks</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  allocationManager.synchronized {</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">通过对应的stageId设置这个stage的task的个数,存储到stageIdToNumTasks集合中.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><span style="color:#66e7a; background:rgb(255,255,255)">stageIdToNumTasks</span><span style="color:#000000; background:rgb(255,255,255)">(stageId) = numTasks</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里更新allocationManager中的addTime的时间,</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">由当前时间加上配置</span><span style="color:#0800; background:rgb(255,255,255)">spark.dynamicAllocation.schedulerBacklogTimeout</span><span style="color:#000000; background:rgb(255,255,255)">的超时时间.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    allocationManager.onSchedulerBacklogged()</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里根据每个task对应的host,计算出每个host对应的task的个数,numTasksPending的个数原则上应该与stage中numTask的个数相同.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><span style="color:#808080; background:rgb(255,255,255)">// Compute the number of tasks requested by the stage on each host</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    </span><span style="color:#0080; background:rgb(255,255,255)">var </span><span style="color:#000000; background:rgb(255,255,255)">numTasksPending = </span><span style="color:#00ff; background:rgb(255,255,255)">0</span><span style="color:#00ff; background:rgb(255,255,255)"><br>
</span><span style="color:#00ff; background:rgb(255,255,255)">    </span><span style="color:#0080; background:rgb(255,255,255)">val </span><span style="color:#000000; background:rgb(255,255,255)">hostToLocalTaskCountPerStage = </span><span style="color:#0080; background:rgb(255,255,255)">new </span><span style="color:#000000; background:rgb(255,255,255)">mutable.HashMap[</span><span style="color:#20999d; background:rgb(255,255,255)">String</span><span style="color:#cc7832; background:rgb(255,255,255)">, Int</span><span style="color:#000000; background:rgb(255,255,255)">]()</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    stageSubmitted.stageInfo.taskLocalityPreferences.foreach { locality =&gt;</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><span style="color:#0080; background:rgb(255,255,255)">if </span><span style="color:#000000; background:rgb(255,255,255)">(!locality.isEmpty) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        numTasksPending += </span><span style="color:#00ff; background:rgb(255,255,255)">1</span><span style="color:#00ff; background:rgb(255,255,255)"><br>
</span><span style="color:#00ff; background:rgb(255,255,255)">        </span><span style="color:#000000; background:rgb(255,255,255)">locality.foreach { location =&gt;</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">          </span><span style="color:#0080; background:rgb(255,255,255)">val </span><span style="color:#000000; background:rgb(255,255,255)">count = hostToLocalTaskCountPerStage.getOrElse(location.host</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#00ff; background:rgb(255,255,255)">0</span><span style="color:#000000; background:rgb(255,255,255)">) + </span><span style="color:#00ff; background:rgb(255,255,255)">1</span><span style="color:#00ff; background:rgb(255,255,255)"><br>
</span><span style="color:#00ff; background:rgb(255,255,255)">          </span><span style="color:#000000; background:rgb(255,255,255)">hostToLocalTaskCountPerStage(location.host) = count</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    }</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">在对应的集合中,根据stageid与pending的task的个数,对应的host与host对应的task的个数进行存储.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><span style="color:#66e7a; background:rgb(255,255,255)">stageIdToExecutorPlacementHints</span><span style="color:#000000; background:rgb(255,255,255)">.put(stageId</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">      </span><span style="color:#000000; background:rgb(255,255,255)">(numTasksPending</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">hostToLocalTaskCountPerStage.toMap))</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">下面的函数迭代stageIdToExecutorPlacementHints集合中的values,并更新allocationManager中</span><span style="color:#000000; background:rgb(255,228,255)">localityAwareTasks</span><span style="color:#000000; background:rgb(255,255,255)">属性(存储待启动的task的个数)与</span><span style="color:#000000; background:rgb(255,228,255)">hostToLocalTaskCount</span><span style="color:#000000; background:rgb(255,255,255)">集合属性(存储host对应的task的个数)的值.添加到这里,主要是executor启动时对应的调度启动task</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><span style="color:#808080; background:rgb(255,255,255)">// Update the executor placement hints</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    </span><span style="color:#000000; background:rgb(255,255,255)">updateExecutorPlacementHints()</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p style="background:rgb(255,255,255)"> </p>
<p style="background:rgb(255,255,255)"><span style="color:#00ff">接面看看allocationManager中定时调度的</span><span style="color:#00ff; background:rgb(255,255,255)">updateAndSyncNumExecutorsTarget</span><span style="color:#00ff">函数</span>:</p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">现在来说说updateAndSyncNumExecutorsTarget函数与</span>addExecutors<span style="color:#000000; background:rgb(255,255,255)">函数的作用:</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">示例说明:</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">假定这次的stage需要的executor的个数为5,numExecutorsTarget的配置保持默认值0,</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">如果是第一次调度启动时,在updateAndSyncNumExecutorsTarget函数中:</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">1,先计算出这个stage需要的executor的个数,</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#0080; background:rgb(255,255,255)">val </span><span style="color:#000000; background:rgb(255,255,255)">maxNeeded = maxNumExecutorsNeeded</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><span style="color:#0080; background:rgb(255,255,255)">if </span><span style="color:#000000; background:rgb(255,255,255)">(</span><span style="color:#66e7a; background:rgb(255,255,255)">initializing</span><span style="color:#000000; background:rgb(255,255,255)">) {</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">如果函数进行这里,表示还没有stage提交,也就是没有job被执行.不进行调度.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><span style="color:#808080; background:rgb(255,255,255)">// Do not change our target while we are still initializing,</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    // Otherwise the first job may have to ramp up unnecessarily</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    </span><span style="color:#00ff; background:rgb(255,255,255)">0</span><span style="color:#00ff; background:rgb(255,255,255)"><br>
</span><span style="color:#00ff; background:rgb(255,255,255)">  </span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">2,进入的流程为</span><span style="color:#0080; background:rgb(255,255,255)">else if </span><span style="color:#000000; background:rgb(255,255,255)">(</span><span style="color:#66e7a; background:rgb(255,255,255)">addTime </span><span style="color:#000000; background:rgb(255,255,255)">!= </span><span style="color:#66e7a; background:rgb(255,255,255)">NOT_SET </span><span style="color:#000000; background:rgb(255,255,255)">&amp;&amp; now &gt;= </span><span style="color:#66e7a; background:rgb(255,255,255)">addTime</span><span style="color:#000000; background:rgb(255,255,255)">)部分.这个时候执行addExecutors函数,(这里假定时间已经达到了addTime的超时时间)</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这种情况下默认的初始executor的个数为0的情况下,在当前时间超过了等待超时时间后,会进入,第一次时需要等待一秒钟,每次执行会更新等待时间.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里根据要stage对应的task需要的executor的个数,并执行addExecutors的函数.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#0080; background:rgb(255,255,255)">else if </span><span style="color:#000000; background:rgb(255,255,255)">(</span><span style="color:#66e7a; background:rgb(255,255,255)">addTime </span><span style="color:#000000; background:rgb(255,255,255)">!= </span><span style="color:#66e7a; background:rgb(255,255,255)">NOT_SET </span><span style="color:#000000; background:rgb(255,255,255)">&amp;&amp; now &gt;= </span><span style="color:#66e7a; background:rgb(255,255,255)">addTime</span><span style="color:#000000; background:rgb(255,255,255)">) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><span style="color:#0080; background:rgb(255,255,255)">val </span><span style="color:#000000; background:rgb(255,255,255)">delta = addExecutors(maxNeeded)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    logDebug(</span><span style="color:#0800; background:rgb(255,255,255)">s"Starting timer to add more executors (to " </span><span style="color:#000000; background:rgb(255,255,255)">+</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><span style="color:#0800; background:rgb(255,255,255)">s"expire in </span><span style="color:#0b8bb; background:rgb(255,255,255)">$</span><span style="color:#66e7a; background:rgb(255,255,255)">sustainedSchedulerBacklogTimeoutS</span><span style="color:#0800; background:rgb(255,255,255)"> seconds)"</span><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><span style="color:#66e7a; background:rgb(255,255,255)">addTime </span><span style="color:#000000; background:rgb(255,255,255)">+= </span><span style="color:#66e7a; background:rgb(255,255,255)">sustainedSchedulerBacklogTimeoutS </span><span style="color:#000000; background:rgb(255,255,255)">* </span><span style="color:#00ff; background:rgb(255,255,255)">1000</span><span style="color:#00ff; background:rgb(255,255,255)"><br>
</span><span style="color:#00ff; background:rgb(255,255,255)">    </span><span style="color:#000000; background:rgb(255,255,255)">delta</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">在addExecutors函数中,先计算出目标的executor的个数(属性</span><span style="color:#66e7a; background:rgb(255,255,255)">numExecutorsTarget</span><span style="color:#000000; background:rgb(255,255,255)">),</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#808080; background:rgb(255,255,255)">// Do not request more executors if it would put our target over the upper bound</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">  </span><span style="color:#0080; background:rgb(255,255,255)">if </span><span style="color:#000000; background:rgb(255,255,255)">(</span><span style="color:#66e7a; background:rgb(255,255,255)">numExecutorsTarget </span><span style="color:#000000; background:rgb(255,255,255)">&gt;= </span><span style="color:#66e7a; background:rgb(255,255,255)">maxNumExecutors</span><span style="color:#000000; background:rgb(255,255,255)">) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    logDebug(</span><span style="color:#0800; background:rgb(255,255,255)">s"Not adding executors because our current target total " </span><span style="color:#000000; background:rgb(255,255,255)">+</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><span style="color:#0800; background:rgb(255,255,255)">s"is already </span><span style="color:#0b8bb; background:rgb(255,255,255)">$</span><span style="color:#66e7a; background:rgb(255,255,255)">numExecutorsTarget</span><span style="color:#0800; background:rgb(255,255,255)"> (limit </span><span style="color:#0b8bb; background:rgb(255,255,255)">$</span><span style="color:#66e7a; background:rgb(255,255,255)">maxNumExecutors</span><span style="color:#0800; background:rgb(255,255,255)">)"</span><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><span style="color:#66e7a; background:rgb(255,255,255)">numExecutorsToAdd </span><span style="color:#000000; background:rgb(255,255,255)">= </span><span style="color:#00ff; background:rgb(255,255,255)">1</span><span style="color:#00ff; background:rgb(255,255,255)"><br>
</span><span style="color:#00ff; background:rgb(255,255,255)">    </span><span style="color:#0080; background:rgb(255,255,255)">return </span><span style="color:#00ff; background:rgb(255,255,255)">0</span><span style="color:#00ff; background:rgb(255,255,255)"><br>
</span><span style="color:#00ff; background:rgb(255,255,255)">  </span><span style="color:#000000; background:rgb(255,255,255)">}</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><span style="color:#0080; background:rgb(255,255,255)">val </span><span style="color:#000000; background:rgb(255,255,255)">oldNumExecutorsTarget = </span><span style="color:#66e7a; background:rgb(255,255,255)">numExecutorsTarget</span><span style="color:#66e7a; background:rgb(255,255,255)"><br>
</span><span style="color:#66e7a; background:rgb(255,255,255)">  </span><span style="color:#808080; background:rgb(255,255,255)">// There's no point in wasting time ramping up to the number of executors we already have, so</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">  // make sure our target is at least as much as our current allocation:</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">  </span><span style="color:#66e7a; background:rgb(255,255,255)">numExecutorsTarget </span><span style="color:#000000; background:rgb(255,255,255)">= math.</span><span style="color:#000000; background:rgb(255,255,255)">max</span><span style="color:#000000; background:rgb(255,255,255)">(</span><span style="color:#66e7a; background:rgb(255,255,255)">numExecutorsTarget</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#66e7a; background:rgb(255,255,255)">executorIds</span><span style="color:#000000; background:rgb(255,255,255)">.size)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><span style="color:#808080; background:rgb(255,255,255)">// Boost our target with the number to add for this round:</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">  </span><span style="color:#66e7a; background:rgb(255,255,255)">numExecutorsTarget </span><span style="color:#000000; background:rgb(255,255,255)">+= </span><span style="color:#66e7a; background:rgb(255,255,255)">numExecutorsToAdd</span><span style="color:#66e7a; background:rgb(255,255,255)"><br>
</span><span style="color:#66e7a; background:rgb(255,255,255)">  </span><span style="color:#808080; background:rgb(255,255,255)">// Ensure that our target doesn't exceed what we need at the present moment:</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">  </span><span style="color:#66e7a; background:rgb(255,255,255)">numExecutorsTarget </span><span style="color:#000000; background:rgb(255,255,255)">= math.</span><span style="color:#000000; background:rgb(255,255,255)">min</span><span style="color:#000000; background:rgb(255,255,255)">(</span><span style="color:#66e7a; background:rgb(255,255,255)">numExecutorsTarget</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">maxNumExecutorsNeeded)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><span style="color:#808080; background:rgb(255,255,255)">// Ensure that our target fits within configured bounds:</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">  </span><span style="color:#66e7a; background:rgb(255,255,255)">numExecutorsTarget </span><span style="color:#000000; background:rgb(255,255,255)">= math.</span><span style="color:#000000; background:rgb(255,255,255)">max</span><span style="color:#000000; background:rgb(255,255,255)">(math.</span><span style="color:#000000; background:rgb(255,255,255)">min</span><span style="color:#000000; background:rgb(255,255,255)">(</span><span style="color:#66e7a; background:rgb(255,255,255)">numExecutorsTarget</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#66e7a; background:rgb(255,255,255)">maxNumExecutors</span><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">      </span><span style="color:#66e7a; background:rgb(255,255,255)">minNumExecutors</span><span style="color:#000000; background:rgb(255,255,255)">)</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">此时executorIds的长度为0,集合是个空集合,这个时候numExecutorsToAdd的值为默认的1,根据上面的代码计算完成后(maxNumExecutorsNeeded为5就是tasks需要的executor的个数),numExecutorsTarget的值为1.接下来计算出来一个值,如果这次任务的目标executor的个数高于上次tasks启动的目标executor的个数,delta的值是一个大于0的值.根据上面的说明,下面代码中这个delta的值为1,</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><span style="color:#0080; background:rgb(255,255,255)">val </span><span style="color:#000000; background:rgb(255,255,255)">delta = </span><span style="color:#66e7a; background:rgb(255,255,255)">numExecutorsTarget </span><span style="color:#000000; background:rgb(255,255,255)">- oldNumExecutorsTarget</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><span style="color:#808080; background:rgb(255,255,255)">// If our target has not changed, do not send a message</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">  // to the cluster manager and reset our exponential growth</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">  </span><span style="color:#0080; background:rgb(255,255,255)">if </span><span style="color:#000000; background:rgb(255,255,255)">(delta == </span><span style="color:#00ff; background:rgb(255,255,255)">0</span><span style="color:#000000; background:rgb(255,255,255)">) {</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">如果delta等于0,表示这次的目标executor的个数,与上次任务的executor的个数相同,重置增量的个数为1.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><span style="color:#66e7a; background:rgb(255,255,255)">numExecutorsToAdd </span><span style="color:#000000; background:rgb(255,255,255)">= </span><span style="color:#00ff; background:rgb(255,255,255)">1</span><span style="color:#00ff; background:rgb(255,255,255)"><br>
</span><span style="color:#00ff; background:rgb(255,255,255)">    </span><span style="color:#0080; background:rgb(255,255,255)">return </span><span style="color:#00ff; background:rgb(255,255,255)">0</span><span style="color:#00ff; background:rgb(255,255,255)"><br>
</span><span style="color:#00ff; background:rgb(255,255,255)">  </span><span style="color:#000000; background:rgb(255,255,255)">}</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">接下来,通过下面的代码通过SparkContext发起numExecutorsTarget的executor的启动,并在executor中加载对应的task的个数.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#0080; background:rgb(255,255,255)">val </span><span style="color:#000000; background:rgb(255,255,255)">addRequestAcknowledged = </span><span style="color:#66e7a; background:rgb(255,255,255)">testing </span><span style="color:#000000; background:rgb(255,255,255)">||</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    client.requestTotalExecutors(</span><span style="color:#66e7a; background:rgb(255,255,255)">numExecutorsTarget</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#66e7a; background:rgb(255,255,255)">localityAwareTasks</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">        </span><span style="color:#66e7a; background:rgb(255,255,255)">hostToLocalTaskCount</span><span style="color:#000000; background:rgb(255,255,255)">)</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">接下来,由于我们的任务执行还需要的executor的个数还需要4个(共需要),同时这个时候,delta的值为1,与numExecutorsToAdd的属性值相同,因此numExecutorsToAdd的值会*2.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#66e7a; background:rgb(255,255,255)">    numExecutorsToAdd </span><span style="color:#000000; background:rgb(255,255,255)">= </span><span style="color:#0080; background:rgb(255,255,255)">if </span><span style="color:#000000; background:rgb(255,255,255)">(delta == </span><span style="color:#66e7a; background:rgb(255,255,255)">numExecutorsToAdd</span><span style="color:#000000; background:rgb(255,255,255)">) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><span style="color:#66e7a; background:rgb(255,255,255)">numExecutorsToAdd </span><span style="color:#000000; background:rgb(255,255,255)">* </span><span style="color:#00ff; background:rgb(255,255,255)">2</span><span style="color:#00ff; background:rgb(255,255,255)"><br>
</span><span style="color:#00ff; background:rgb(255,255,255)">    </span><span style="color:#000000; background:rgb(255,255,255)">} </span><span style="color:#0080; background:rgb(255,255,255)">else </span><span style="color:#000000; background:rgb(255,255,255)">{</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><span style="color:#00ff; background:rgb(255,255,255)">1</span><span style="color:#00ff; background:rgb(255,255,255)"><br>
</span><span style="color:#00ff; background:rgb(255,255,255)">    </span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">3,调度定时器开始执行第二次调度启动,这个时候执行updateAndSyncNumExecutorsTarget函数时,numExecutorsTarget的值为1,需要的executor的个数为3,因此,还是会执行时间超时的流程.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#0080; background:rgb(255,255,255)">else if </span><span style="color:#000000; background:rgb(255,255,255)">(</span><span style="color:#66e7a; background:rgb(255,255,255)">addTime </span><span style="color:#000000; background:rgb(255,255,255)">!= </span><span style="color:#66e7a; background:rgb(255,255,255)">NOT_SET </span><span style="color:#000000; background:rgb(255,255,255)">&amp;&amp; now &gt;= </span><span style="color:#66e7a; background:rgb(255,255,255)">addTime</span><span style="color:#000000; background:rgb(255,255,255)">) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><span style="color:#0080; background:rgb(255,255,255)">val </span><span style="color:#000000; background:rgb(255,255,255)">delta = addExecutors(maxNeeded)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    logDebug(</span><span style="color:#0800; background:rgb(255,255,255)">s"Starting timer to add more executors (to " </span><span style="color:#000000; background:rgb(255,255,255)">+</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><span style="color:#0800; background:rgb(255,255,255)">s"expire in </span><span style="color:#0b8bb; background:rgb(255,255,255)">$</span><span style="color:#66e7a; background:rgb(255,255,255)">sustainedSchedulerBacklogTimeoutS</span><span style="color:#0800; background:rgb(255,255,255)"> seconds)"</span><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><span style="color:#66e7a; background:rgb(255,255,255)">addTime </span><span style="color:#000000; background:rgb(255,255,255)">+= </span><span style="color:#66e7a; background:rgb(255,255,255)">sustainedSchedulerBacklogTimeoutS </span><span style="color:#000000; background:rgb(255,255,255)">* </span><span style="color:#00ff; background:rgb(255,255,255)">1000</span><span style="color:#00ff; background:rgb(255,255,255)"><br>
</span><span style="color:#00ff; background:rgb(255,255,255)">    </span><span style="color:#000000; background:rgb(255,255,255)">delta</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">再次进入addExecutors函数,这个时候</span><span style="color:#66e7a; background:rgb(255,255,255)">numExecutorsToAdd</span><span style="color:#000000; background:rgb(255,255,255)">属性值为2,</span><span style="color:#66e7a; background:rgb(255,255,255)">numExecutorsTarget</span><span style="color:#000000; background:rgb(255,255,255)">属性值为1,executorsIds的size为1,已经有一个executor被启动,需要的executor的个数为3,最后计算完成后,</span><span style="color:#66e7a; background:rgb(255,255,255)">numExecutorsTarget</span><span style="color:#000000; background:rgb(255,255,255)">属性的值为3.计算出来当前的numExecutorsTarget与上一次的numExecutorsTarget的delta的值为2,开始根据这个值为3的numExecutorsTarget发起task的启动请求.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">接下来,由于计算出来的delta的值为2,而属性</span><span style="color:#66e7a; background:rgb(255,255,255)">numExecutorsToAdd</span><span style="color:#000000; background:rgb(255,255,255)">的值也为2,</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">因此</span><span style="color:#66e7a; background:rgb(255,255,255)">numExecutorsToAdd</span><span style="color:#000000; background:rgb(255,255,255)">属性值现在还是需要*2操作.执行完成后,最后这个</span><span style="color:#66e7a; background:rgb(255,255,255)">numExecutorsToAdd</span><span style="color:#000000; background:rgb(255,255,255)">属性值修改成了4.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">4,这个时候,由于还有部分task没有被执行,开始第三次的处理,此时,numExecutorTarget的值还是小于目标的executor的个数,接着执行addExecutors函数,此时,executorsIds的size为4,第一次执行一个,第二次启动了3个,这个时候,numExecutorsTarget的属性值变化情况:</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">首先先修改成4,(取numExecutorsTarget与executorIds.size中的最大值),</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">然后numExecutorsTarget += numExecutorsToAdd的值,这个时候值修改成了8.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">最后与共需要的executor的个数5取最小值,把值修改成5.计算出当前的numExecutorsTarget与上一次的numExecutorsTarget的差值为2,numExecutorsToAdd的值为4,因此重新修改numExecutorsToAdd的值为1.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这个时候调度程序会修改addTime的值为NOT_SET,表示不在执行executor的调度.因为executor已经够了.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">5,现在假定</span><span style="color:#0800; background:rgb(255,255,255)">spark.dynamicAllocation.initialExecutors</span><span style="color:#000000; background:rgb(255,255,255)">配置项配置有一个值,初始值为6.需要的executor的个数还是是5.这个时候,进入updateAndSyncNumExecutorsTarget函数时,执行如下的流程部分,因为初始的executor的个数大于了需要的executor的个数.这部分流程在设置有初始大小的executor个数或者说要执行的job的第二个stage的task的个数需要的executor的个数小于小次stage需要的executor的个数时,会被执行.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#0080; background:rgb(255,255,255)">else if </span><span style="color:#000000; background:rgb(255,255,255)">(maxNeeded &lt; </span><span style="color:#66e7a; background:rgb(255,255,255)">numExecutorsTarget</span><span style="color:#000000; background:rgb(255,255,255)">) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><span style="color:#808080; background:rgb(255,255,255)">// The target number exceeds the number we actually need, so stop adding new</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">  // executors and inform the cluster manager to cancel the extra pending requests</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">  </span><span style="color:#0080; background:rgb(255,255,255)">val </span><span style="color:#000000; background:rgb(255,255,255)">oldNumExecutorsTarget = </span><span style="color:#66e7a; background:rgb(255,255,255)">numExecutorsTarget</span><span style="color:#66e7a; background:rgb(255,255,255)"><br>
</span><span style="color:#66e7a; background:rgb(255,255,255)">  numExecutorsTarget </span><span style="color:#000000; background:rgb(255,255,255)">= math.</span><span style="color:#000000; background:rgb(255,255,255)">max</span><span style="color:#000000; background:rgb(255,255,255)">(maxNeeded</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#66e7a; background:rgb(255,255,255)">minNumExecutors</span><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><span style="color:#66e7a; background:rgb(255,255,255)">numExecutorsToAdd </span><span style="color:#000000; background:rgb(255,255,255)">= </span><span style="color:#00ff; background:rgb(255,255,255)">1</span><span style="color:#00ff; background:rgb(255,255,255)"><br>
</span><span style="color:#00ff; background:rgb(255,255,255)"><br>
</span><span style="color:#00ff; background:rgb(255,255,255)">  </span><span style="color:#808080; background:rgb(255,255,255)">// If the new target has not changed, avoid sending a message to the cluster manager</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">  </span><span style="color:#0080; background:rgb(255,255,255)">if </span><span style="color:#000000; background:rgb(255,255,255)">(</span><span style="color:#66e7a; background:rgb(255,255,255)">numExecutorsTarget </span><span style="color:#000000; background:rgb(255,255,255)">&lt; oldNumExecutorsTarget) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    client.requestTotalExecutors(</span><span style="color:#66e7a; background:rgb(255,255,255)">numExecutorsTarget</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#66e7a; background:rgb(255,255,255)">localityAwareTasks</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">      </span><span style="color:#66e7a; background:rgb(255,255,255)">hostToLocalTaskCount</span><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    logDebug(</span><span style="color:#0800; background:rgb(255,255,255)">s"Lowering target number of executors to </span><span style="color:#0b8bb; background:rgb(255,255,255)">$</span><span style="color:#66e7a; background:rgb(255,255,255)">numExecutorsTarget</span><span style="color:#0800; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#0800; background:rgb(255,255,255)">      (previously " </span><span style="color:#000000; background:rgb(255,255,255)">+</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><span style="color:#0800; background:rgb(255,255,255)">s"</span><span style="color:#0b8bb; background:rgb(255,255,255)">$</span><span style="color:#000000; background:rgb(255,255,255)">oldNumExecutorsTarget</span><span style="color:#0800; background:rgb(255,255,255)">) because not all requested executors are actually </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#0800; background:rgb(255,255,255)">      needed"</span><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><span style="color:#66e7a; background:rgb(255,255,255)">numExecutorsTarget </span><span style="color:#000000; background:rgb(255,255,255)">- oldNumExecutorsTarget</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">在上面的代码中,重新根据需要的executor的个数,计算出numExecutorsTarget的值,这个时候,新的numExecutorsTarget的值为5,而老的numExecutorsTarget的值为6,因此通过新的numExecutorsTarget直接调用SparkContext中对应的启动executor的函数,发起对executor的调度与task的启动.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<h2>通过<span style="font-family:Arial">SparkContext</span><span style="font-family:SimSun">调度</span><span style="font-family:Arial">executor</span></h2>
<p>在<span style="font-family:Times New Roman">allocationManager</span><span style="font-family:SimSun">中</span><span style="font-family:Times New Roman">,</span><span style="font-family:SimSun">对</span><span style="font-family:Times New Roman">executor</span><span style="font-family:SimSun">进行动态的调用后</span><span style="font-family:Times New Roman">,</span><span style="font-family:SimSun">会执行如下的代码片断</span><span style="font-family:Times New Roman">.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(228,228,255)">client</span><span style="color:#000000; background:rgb(255,255,255)">.requestTotalExecutors(</span><span style="color:#66e7a; background:rgb(255,255,255)">numExecutorsTarget</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#66e7a; background:rgb(255,255,255)">localityAwareTasks</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">     </span><span style="color:#66e7a; background:rgb(255,255,255)">hostToLocalTaskCount</span><span style="color:#000000; background:rgb(255,255,255)">)</span></p>
<p>在上面的代码中<span style="font-family:Times New Roman">,client</span><span style="font-family:SimSun">就是</span><span style="font-family:Times New Roman">SparkContext</span><span style="font-family:SimSun">实例</span><span style="font-family:Times New Roman">.</span></p>
<p>下面看看这个函数的处理流程<span style="font-family:Times New Roman">:</span></p>
<p>函数的传入参数中<span style="font-family:Times New Roman">:</span></p>
<p>numExecutors<span style="font-family:SimSun">是目标的</span><span style="font-family:Times New Roman">executor</span><span style="font-family:SimSun">的个数</span><span style="font-family:Times New Roman">,</span></p>
<p>第二个是共需要的<span style="font-family:Times New Roman">task</span><span style="font-family:SimSun">的个数</span><span style="font-family:Times New Roman">,</span></p>
<p>第三个是<span style="font-family:Times New Roman">host-&gt;taskCount</span><span style="font-family:SimSun">的集合</span><span style="font-family:Times New Roman">.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#0080; background:rgb(255,255,255)">private</span><span style="color:#000000; background:rgb(255,255,255)">[spark] </span><span style="color:#0080; background:rgb(255,255,255)">override def </span><span style="color:#000000; background:rgb(255,255,255)">requestTotalExecutors(</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    numExecutors: </span><span style="color:#cc7832; background:rgb(255,255,255)">Int,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">    </span><span style="color:#000000; background:rgb(255,255,255)">localityAwareTasks: </span><span style="color:#cc7832; background:rgb(255,255,255)">Int,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">    </span><span style="color:#000000; background:rgb(255,255,255)">hostToLocalTaskCount: scala.collection.immutable.Map[</span><span style="color:#20999d; background:rgb(255,255,255)">String</span><span style="color:#cc7832; background:rgb(255,255,255)">, Int</span><span style="color:#000000; background:rgb(255,255,255)">]</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  ): </span><span style="color:#cc7832; background:rgb(255,255,255)">Boolean </span><span style="color:#000000; background:rgb(255,255,255)">= {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  schedulerBackend </span><span style="color:#0080; background:rgb(255,255,255)">match </span><span style="color:#000000; background:rgb(255,255,255)">{</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><span style="color:#0080; background:rgb(255,255,255)">case </span><span style="color:#000000; background:rgb(255,255,255)">b: CoarseGrainedSchedulerBackend =&gt;</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里直接调用了GoarseGrainedSchedulerBackend中对应的函数.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      b.requestTotalExecutors(numExecutors</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">localityAwareTasks</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">          </span><span style="color:#000000; background:rgb(255,255,255)">hostToLocalTaskCount)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><span style="color:#0080; background:rgb(255,255,255)">case </span><span style="color:#000000; background:rgb(255,255,255)">_ =&gt;</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      logWarning(</span><span style="color:#0800; background:rgb(255,255,255)">"Requesting executors is only supported in coarse-grained mode"</span><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><span style="color:#0080; background:rgb(255,255,255)">false</span><span style="color:#0080; background:rgb(255,255,255)"><br>
</span><span style="color:#0080; background:rgb(255,255,255)">  </span><span style="color:#000000; background:rgb(255,255,255)">}</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p> </p>
<p><span style="color:#00ff">下面看看<span style="font-family:Times New Roman">GoarseGrainedSchedulerBackend</span><span style="font-family:SimSun">中</span><span style="font-family:Times New Roman">requestTotalExecutors</span><span style="font-family:SimSun">的函数实现</span></span>:</p>
<p style="background:rgb(255,255,255)"><span style="color:#0080; background:rgb(255,255,255)">final override def </span><span style="color:#000000; background:rgb(255,255,255)">requestTotalExecutors(</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    numExecutors: </span><span style="color:#cc7832; background:rgb(255,255,255)">Int,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">    </span><span style="color:#000000; background:rgb(255,255,255)">localityAwareTasks: </span><span style="color:#cc7832; background:rgb(255,255,255)">Int,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">    </span><span style="color:#000000; background:rgb(255,255,255)">hostToLocalTaskCount: </span><span style="color:#20999d; background:rgb(255,255,255)">Map</span><span style="color:#000000; background:rgb(255,255,255)">[</span><span style="color:#20999d; background:rgb(255,255,255)">String</span><span style="color:#cc7832; background:rgb(255,255,255)">, Int</span><span style="color:#000000; background:rgb(255,255,255)">]</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  ): </span><span style="color:#cc7832; background:rgb(255,255,255)">Boolean </span><span style="color:#000000; background:rgb(255,255,255)">= synchronized {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><span style="color:#0080; background:rgb(255,255,255)">if </span><span style="color:#000000; background:rgb(255,255,255)">(numExecutors &lt; </span><span style="color:#00ff; background:rgb(255,255,255)">0</span><span style="color:#000000; background:rgb(255,255,255)">) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><span style="color:#0080; background:rgb(255,255,255)">throw new </span><span style="color:#000000; background:rgb(255,255,255)">IllegalArgumentException(</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><span style="color:#0800; background:rgb(255,255,255)">"Attempted to request a negative number of executor(s) " </span><span style="color:#000000; background:rgb(255,255,255)">+</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><span style="color:#0800; background:rgb(255,255,255)">s"</span><span style="color:#0b8bb; background:rgb(255,255,255)">$</span><span style="color:#000000; background:rgb(255,255,255)">numExecutors</span><span style="color:#0800; background:rgb(255,255,255)"> from the cluster manager. Please specify a positive number!"</span><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><span style="color:#0080; background:rgb(255,255,255)">this</span><span style="color:#000000; background:rgb(255,255,255)">.</span><span style="color:#66e7a; background:rgb(255,255,255)">localityAwareTasks </span><span style="color:#000000; background:rgb(255,255,255)">= localityAwareTasks</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><span style="color:#0080; background:rgb(255,255,255)">this</span><span style="color:#000000; background:rgb(255,255,255)">.</span><span style="color:#66e7a; background:rgb(255,255,255)">hostToLocalTaskCount </span><span style="color:#000000; background:rgb(255,255,255)">= hostToLocalTaskCount</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">每次执行时,计算出还需要的共需要的executor的个数与正在执行或者等待回收的executor的个数之间的差值,这个差值是还需要启动的executor的个数.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><span style="color:#66e7a; background:rgb(255,255,255)">numPendingExecutors </span><span style="color:#000000; background:rgb(255,255,255)">=</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    math.</span><span style="color:#000000; background:rgb(255,255,255)">max</span><span style="color:#000000; background:rgb(255,255,255)">(numExecutors - numExistingExecutors + </span><span style="color:#66e7a; background:rgb(255,255,255)">executorsPendingToRemove</span><span style="color:#000000; background:rgb(255,255,255)">.size</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">       </span><span style="color:#00ff; background:rgb(255,255,255)">0</span><span style="color:#000000; background:rgb(255,255,255)">)</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里根据具体的cluster的部署模式(yarn,standalone,mesos,等),调用对应的函数进行executor的启动操作.这里我们看看standalone的操作.由</span><span style="color:#000000; background:rgb(228,228,255)">SparkDeploySchedulerBackend</span><span style="color:#000000; background:rgb(255,255,255)">实现.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这个函数的实现主要是通过向master发送一个</span><span style="color:#000000; background:rgb(228,228,255)">RequestExecutors</span><span style="color:#000000; background:rgb(255,255,255)">消息,这个消息是一个需要响应的消息.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这个消息在Master中通过</span><span style="color:#000000; background:rgb(228,228,255)">receiveAndReply</span><span style="color:#000000; background:rgb(255,255,255)">函数中的RequestExecutors部分进行处理.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  doRequestTotalExecutors(numExecutors)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p> </p>
<p><span style="color:#00ff">Master<span style="font-family:SimSun">中处理</span><span style="font-family:Times New Roman">executor</span><span style="font-family:SimSun">的申请</span></span>:</p>
<p style="background:rgb(255,255,255)"><span style="color:#0080; background:rgb(228,228,255)">case</span><span style="color:#0080; background:rgb(255,255,255)"> </span><span style="color:#000000; background:rgb(255,255,255)">RequestExecutors</span><span style="color:#000000; background:rgb(255,255,255)">(appId</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">requestedTotal) =&gt;</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><span style="color:#000000; background:rgb(228,228,255)">context.reply(handleRequestExecutors(appId</span><span style="color:#cc7832; background:rgb(228,228,255)">, </span><span style="color:#000000; background:rgb(228,228,255)">requestedTotal))</span></p>
<p> </p>
<p>看看这个的<span style="font-family:Times New Roman">handleRequestExecutors</span><span style="font-family:SimSun">函数</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#0080; background:rgb(255,255,255)">private def </span><span style="color:#000000; background:rgb(255,255,255)">handleRequestExecutors(appId: </span><span style="color:#20999d; background:rgb(255,255,255)">String</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">requestedTotal: </span><span style="color:#cc7832; background:rgb(255,255,255)">Int</span><span style="color:#000000; background:rgb(255,255,255)">)</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">: </span><span style="color:#cc7832; background:rgb(255,255,255)">Boolean </span><span style="color:#000000; background:rgb(255,255,255)">= {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><span style="color:#66e7a; background:rgb(255,255,255)">idToApp</span><span style="color:#000000; background:rgb(255,255,255)">.get(appId) </span><span style="color:#0080; background:rgb(255,255,255)">match </span><span style="color:#000000; background:rgb(255,255,255)">{</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这个函数中,根据传入的app对应的job共依赖的executor的个数,更新appInfo中executorLimit的值.并执行对executor的启动的调度.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><span style="color:#0080; background:rgb(255,255,255)">case </span><span style="color:#000000; background:rgb(255,255,255)">Some</span><span style="color:#000000; background:rgb(255,255,255)">(appInfo) =&gt;</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      logInfo(</span><span style="color:#0800; background:rgb(255,255,255)">s"Application </span><span style="color:#0b8bb; background:rgb(255,255,255)">$</span><span style="color:#000000; background:rgb(255,255,255)">appId</span><span style="color:#0800; background:rgb(255,255,255)"> requested to set total executors to </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#0800; background:rgb(255,255,255)">           </span><span style="color:#0b8bb; background:rgb(255,255,255)">$</span><span style="color:#000000; background:rgb(255,255,255)">requestedTotal</span><span style="color:#0800; background:rgb(255,255,255)">."</span><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      appInfo.</span><span style="color:#66e7a; background:rgb(255,255,255)">executorLimit </span><span style="color:#000000; background:rgb(255,255,255)">= requestedTotal</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">在这个调度的过程中通过</span><span style="color:#000000; background:rgb(228,228,255)">startExecutorsOnWorkers</span><span style="color:#000000; background:rgb(255,255,255)">函数来调度与启动executor在对应的worker中,</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">在判断要启动的executor的个数时,会根据</span><span style="color:#000000; background:rgb(228,228,255)">scheduleExecutorsOnWorkers</span><span style="color:#000000; background:rgb(255,255,255)">函数来判断executor的个数是否达到要求的appInfo.executorLimit的个数,如果达到指定的executor的个数时,调度不再执行executor的启动.判断worker是否有足够的资源启动executor时,通过对executor需要的cpu core的个数与executor需要的内存来判断worker是否有足够的对应资源启动executor,如果有,表示这个worker可以用来启动executor,迭代所有的worker进行executor的启动,当已经启动的executor的个数达到了appInfo的executorLimit的限制时,不在进行分配.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      schedule()</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><span style="color:#0080; background:rgb(255,255,255)">true</span><span style="color:#0080; background:rgb(255,255,255)"><br>
</span><span style="color:#0080; background:rgb(255,255,255)">    case </span><span style="color:#000000; background:rgb(255,255,255)">None =&gt;</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      logWarning(</span><span style="color:#0800; background:rgb(255,255,255)">s"Unknown application </span><span style="color:#0b8bb; background:rgb(255,255,255)">$</span><span style="color:#000000; background:rgb(255,255,255)">appId</span><span style="color:#0800; background:rgb(255,255,255)"> requested </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#0800; background:rgb(255,255,255)">           </span><span style="color:#0b8bb; background:rgb(255,255,255)">$</span><span style="color:#000000; background:rgb(255,255,255)">requestedTotal</span><span style="color:#0800; background:rgb(255,255,255)"> total executors."</span><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><span style="color:#0080; background:rgb(255,255,255)">false</span><span style="color:#0080; background:rgb(255,255,255)"><br>
</span><span style="color:#0080; background:rgb(255,255,255)">  </span><span style="color:#000000; background:rgb(255,255,255)">}</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p> </p>
<p><span style="color:#00ff">Driver<span style="font-family:SimSun">端处理</span><span style="font-family:Times New Roman">worker</span><span style="font-family:SimSun">对</span><span style="font-family:Times New Roman">executor</span><span style="font-family:SimSun">的启动后的监听</span></span>:</p>
<p style="background:rgb(255,255,255)">Worker端的executor启动后,会向driver发起一个<span style="color:#000000; background:rgb(228,228,255)">RegisterExecutor</span>消息.</p>
<p style="background:rgb(255,255,255)">这个消息在Driver端通过<span style="color:#000000; background:rgb(228,228,255)">CoarseGrainedSchedulerBackend</span>实例中的<span style="color:#000000; background:rgb(228,228,255)">receiveAndReply</span>函数中的RegisterExecutor部分来进行处理.</p>
<p style="background:rgb(255,255,255)"><span style="color:#0080; background:rgb(255,255,255)">case </span><span style="color:#000000; background:rgb(255,255,255)">RegisterExecutor</span><span style="color:#000000; background:rgb(255,255,255)">(executorId</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">executorRef</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">hostPort</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">cores</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">logUrls) =&gt;</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><span style="color:#0080; background:rgb(255,255,255)">if </span><span style="color:#000000; background:rgb(255,255,255)">(</span><span style="color:#66e7a; background:rgb(255,255,255)">executorDataMap</span><span style="color:#000000; background:rgb(255,255,255)">.contains(executorId)) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    context.reply(</span><span style="color:#000000; background:rgb(255,255,255)">RegisterExecutorFailed</span><span style="color:#000000; background:rgb(255,255,255)">(</span><span style="color:#0800; background:rgb(255,255,255)">"Duplicate executor ID: " </span><span style="color:#000000; background:rgb(255,255,255)">+ executorId))</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  } </span><span style="color:#0080; background:rgb(255,255,255)">else </span><span style="color:#000000; background:rgb(255,255,255)">{</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><span style="color:#808080; background:rgb(255,255,255)">// If the executor's rpc env is not listening for incoming connections, `hostPort`</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    // will be null, and the client connection should be used to contact the executor.</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    </span><span style="color:#0080; background:rgb(255,255,255)">val </span><span style="color:#000000; background:rgb(255,255,255)">executorAddress = </span><span style="color:#0080; background:rgb(255,255,255)">if </span><span style="color:#000000; background:rgb(255,255,255)">(executorRef.address != </span><span style="color:#0080; background:rgb(255,255,255)">null</span><span style="color:#000000; background:rgb(255,255,255)">) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        executorRef.address</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      } </span><span style="color:#0080; background:rgb(255,255,255)">else </span><span style="color:#000000; background:rgb(255,255,255)">{</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        context.senderAddress</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    logInfo(</span><span style="color:#0800; background:rgb(255,255,255)">s"Registered executor </span><span style="color:#0b8bb; background:rgb(255,255,255)">$</span><span style="color:#000000; background:rgb(255,255,255)">executorRef</span><span style="color:#0800; background:rgb(255,255,255)"> (</span><span style="color:#0b8bb; background:rgb(255,255,255)">$</span><span style="color:#000000; background:rgb(255,255,255)">executorAddress</span><span style="color:#0800; background:rgb(255,255,255)">) with ID </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#0800; background:rgb(255,255,255)">        </span><span style="color:#0b8bb; background:rgb(255,255,255)">$</span><span style="color:#000000; background:rgb(255,255,255)">executorId</span><span style="color:#0800; background:rgb(255,255,255)">"</span><span style="color:#000000; background:rgb(255,255,255)">)</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里把executor的信息存储到driver中对应的集合容器中.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">并更新待启动的executor的个数(</span><span style="color:#66e7a; background:rgb(255,255,255)">numPendingExecutors</span><span style="color:#000000; background:rgb(255,255,255)">属性).</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><span style="color:#66e7a; background:rgb(255,255,255)">addressToExecutorId</span><span style="color:#000000; background:rgb(255,255,255)">(executorAddress) = executorId</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><span style="color:#66e7a; background:rgb(255,255,255)">totalCoreCount</span><span style="color:#000000; background:rgb(255,255,255)">.addAndGet(cores)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><span style="color:#66e7a; background:rgb(255,255,255)">totalRegisteredExecutors</span><span style="color:#000000; background:rgb(255,255,255)">.addAndGet(</span><span style="color:#00ff; background:rgb(255,255,255)">1</span><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><span style="color:#0080; background:rgb(255,255,255)">val </span><span style="color:#000000; background:rgb(255,255,255)">data = </span><span style="color:#0080; background:rgb(255,255,255)">new </span><span style="color:#000000; background:rgb(255,255,255)">ExecutorData(executorRef</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">executorRef.address</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">      </span><span style="color:#000000; background:rgb(255,255,255)">executorAddress.host</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">      </span><span style="color:#000000; background:rgb(255,255,255)">cores</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">cores</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">logUrls)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><span style="color:#808080; background:rgb(255,255,255)">// This must be synchronized because variables mutated</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    // in this block are read when requesting executors</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    </span><span style="color:#000000; background:rgb(255,255,255)">CoarseGrainedSchedulerBackend.</span><span style="color:#0080; background:rgb(255,255,255)">this</span><span style="color:#000000; background:rgb(255,255,255)">.synchronized {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><span style="color:#66e7a; background:rgb(255,255,255)">executorDataMap</span><span style="color:#000000; background:rgb(255,255,255)">.put(executorId</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">data)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><span style="color:#0080; background:rgb(255,255,255)">if </span><span style="color:#000000; background:rgb(255,255,255)">(</span><span style="color:#66e7a; background:rgb(255,255,255)">numPendingExecutors </span><span style="color:#000000; background:rgb(255,255,255)">&gt; </span><span style="color:#00ff; background:rgb(255,255,255)">0</span><span style="color:#000000; background:rgb(255,255,255)">) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><span style="color:#66e7a; background:rgb(255,255,255)">numPendingExecutors </span><span style="color:#000000; background:rgb(255,255,255)">-= </span><span style="color:#00ff; background:rgb(255,255,255)">1</span><span style="color:#00ff; background:rgb(255,255,255)"><br>
</span><span style="color:#00ff; background:rgb(255,255,255)">        </span><span style="color:#000000; background:rgb(255,255,255)">logDebug(</span><span style="color:#0800; background:rgb(255,255,255)">s"Decremented number of pending executors </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#0800; background:rgb(255,255,255)">             </span><span style="color:#0800; background:rgb(255,255,255)">(</span><span style="color:#0b8bb; background:rgb(255,255,255)">$</span><span style="color:#66e7a; background:rgb(255,255,255)">numPendingExecutors</span><span style="color:#0800; background:rgb(255,255,255)"> left)"</span><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><span style="color:#808080; background:rgb(255,255,255)">// Note: some tests expect the reply to come after we put the executor in the map</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    </span><span style="color:#000000; background:rgb(255,255,255)">context.reply(</span><span style="color:#000000; background:rgb(255,255,255)">RegisteredExecutor</span><span style="color:#000000; background:rgb(255,255,255)">(executorAddress.host))</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里通过向allocationManager中的ExecutorAllocationListener中executorAdded的监听函数.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><span style="color:#66e7a; background:rgb(255,255,255)">listenerBus</span><span style="color:#000000; background:rgb(255,255,255)">.post(</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><span style="color:#000000; background:rgb(255,255,255)">SparkListenerExecutorAdded</span><span style="color:#000000; background:rgb(255,255,255)">(System.</span><span style="color:#000000; background:rgb(255,255,255)">currentTimeMillis</span><span style="color:#000000; background:rgb(255,255,255)">()</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">executorId</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">data))</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里在启动后的executors中对task进行调度与启动.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    makeOffers()</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  }</span></p>
<p style="background:rgb(255,255,255)"> </p>
<p style="background:rgb(255,255,255)">在ExecutorAllocationManager中,对executor注册,task启动与结束的监听处理:</p>
<p style="background:rgb(255,255,255)"><span style="color:#00ff">对executor的注册处理</span>:</p>
<p style="background:rgb(255,255,255)"><span style="color:#0080; background:rgb(255,255,255)">private def </span><span style="color:#000000; background:rgb(255,255,255)">onExecutorAdded(executorId: </span><span style="color:#20999d; background:rgb(255,255,255)">String</span><span style="color:#000000; background:rgb(255,255,255)">): </span><span style="color:#cc7832; background:rgb(255,255,255)">Unit </span><span style="color:#000000; background:rgb(255,255,255)">= synchronized {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><span style="color:#0080; background:rgb(255,255,255)">if </span><span style="color:#000000; background:rgb(255,255,255)">(!</span><span style="color:#66e7a; background:rgb(255,255,255)">executorIds</span><span style="color:#000000; background:rgb(255,255,255)">.contains(executorId)) {</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">把新启动的executor对应的id存储到 executorIds的集合中.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><span style="color:#66e7a; background:rgb(255,255,255)">executorIds</span><span style="color:#000000; background:rgb(255,255,255)">.add(executorId)</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里检查下所有的executor是否包含有task在运行,如果不包含的executor,添加到remoteTimes的集合中,这个remoteTimes中对应此executor有一个超时的清理时间,</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">如果executor不包含blockCache,</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">超时清理时间通过</span><span style="color:#0800; background:rgb(255,255,255)">spark.dynamicAllocation.executorIdleTimeout</span><span style="color:#000000; background:rgb(255,255,255)">配置.默认为60s</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">如果executor中包含有blockCache时,</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">    超时清理时间通过</span><span style="color:#0800; background:rgb(255,255,255)">spark.dynamicAllocation.cachedExecutorIdleTimeout</span><span style="color:#000000; background:rgb(255,255,255)">配置.默认不控制超时.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><span style="color:#808080; background:rgb(255,255,255)">// If an executor (call this executor X) is not removed because the lower bound</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    // has been reached, it will no longer be marked as idle. When new executors join,</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    // however, we are no longer at the lower bound, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#808080; background:rgb(255,255,255)">        </span><span style="color:#808080; background:rgb(255,255,255)">and so we must mark executor X</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    // as idle again so as not to forget that it is a candidate for removal.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#808080; background:rgb(255,255,255)">        </span><span style="color:#808080; background:rgb(255,255,255)"> (see SPARK-4951)</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    </span><span style="color:#66e7a; background:rgb(255,255,255)">executorIds</span><span style="color:#000000; background:rgb(255,255,255)">.filter(</span><span style="color:#66e7a; background:rgb(255,255,255)">listener</span><span style="color:#000000; background:rgb(255,255,255)">.isExecutorIdle).foreach(onExecutorIdle)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    logInfo(</span><span style="color:#0800; background:rgb(255,255,255)">s"New executor </span><span style="color:#0b8bb; background:rgb(255,255,255)">$</span><span style="color:#000000; background:rgb(255,255,255)">executorId</span><span style="color:#0800; background:rgb(255,255,255)"> has registered (new total is </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#0800; background:rgb(255,255,255)">        </span><span style="color:#0b8bb; background:rgb(255,255,255)">$</span><span style="color:#000000; background:rgb(255,255,255)">{</span><span style="color:#66e7a; background:rgb(255,255,255)">executorIds</span><span style="color:#000000; background:rgb(255,255,255)">.size}</span><span style="color:#0800; background:rgb(255,255,255)">)"</span><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  } </span><span style="color:#0080; background:rgb(255,255,255)">else </span><span style="color:#000000; background:rgb(255,255,255)">{</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    logWarning(</span><span style="color:#0800; background:rgb(255,255,255)">s"Duplicate executor </span><span style="color:#0b8bb; background:rgb(255,255,255)">$</span><span style="color:#000000; background:rgb(255,255,255)">executorId</span><span style="color:#0800; background:rgb(255,255,255)"> has registered"</span><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p style="background:rgb(255,255,255)"> </p>
<p style="background:rgb(255,255,255)"><span style="color:#00ff; background:rgb(255,255,255)">对task启动时的监听</span><span style="color:#000000; background:rgb(255,255,255)">:</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#0080; background:rgb(255,255,255)">override def </span><span style="color:#000000; background:rgb(255,255,255)">onTaskStart(taskStart: SparkListenerTaskStart): </span><span style="color:#cc7832; background:rgb(255,255,255)">Unit </span><span style="color:#000000; background:rgb(255,255,255)">= {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><span style="color:#0080; background:rgb(255,255,255)">val </span><span style="color:#000000; background:rgb(255,255,255)">stageId = taskStart.stageId</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><span style="color:#0080; background:rgb(255,255,255)">val </span><span style="color:#000000; background:rgb(255,255,255)">taskId = taskStart.taskInfo.taskId</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><span style="color:#0080; background:rgb(255,255,255)">val </span><span style="color:#000000; background:rgb(255,255,255)">taskIndex = taskStart.taskInfo.index</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><span style="color:#0080; background:rgb(255,255,255)">val </span><span style="color:#000000; background:rgb(255,255,255)">executorId = taskStart.taskInfo.executorId</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  allocationManager.synchronized {</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">首先更新正在运行的task的个数,</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><span style="color:#66e7a; background:rgb(255,255,255)">numRunningTasks </span><span style="color:#000000; background:rgb(255,255,255)">+= </span><span style="color:#00ff; background:rgb(255,255,255)">1</span><span style="color:#00ff; background:rgb(255,255,255)"><br>
</span><span style="color:#00ff; background:rgb(255,255,255)">    </span><span style="color:#808080; background:rgb(255,255,255)">// This guards against the race condition in which the `SparkListenerTaskStart`</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    // event is posted before the `SparkListenerBlockManagerAdded` event, which is</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    // possible because these events are posted in different threads. (see SPARK-4951)</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    </span><span style="color:#0080; background:rgb(255,255,255)">if </span><span style="color:#000000; background:rgb(255,255,255)">(!allocationManager.</span><span style="color:#66e7a; background:rgb(255,255,255)">executorIds</span><span style="color:#000000; background:rgb(255,255,255)">.contains(executorId)) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      allocationManager.onExecutorAdded(executorId)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">在stage与task的对应关系的集合中,设置stageId中包含的taskId的值.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><span style="color:#808080; background:rgb(255,255,255)">// If this is the last pending task, mark the scheduler queue as empty</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    </span><span style="color:#66e7a; background:rgb(255,255,255)">stageIdToTaskIndices</span><span style="color:#000000; background:rgb(255,255,255)">.getOrElseUpdate(stageId</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#0080; background:rgb(255,255,255)">new </span><span style="color:#000000; background:rgb(255,255,255)">mutable.HashSet[</span><span style="color:#cc7832; background:rgb(255,255,255)">Int</span><span style="color:#000000; background:rgb(255,255,255)">]) += </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">           </span><span style="color:#000000; background:rgb(255,255,255)">taskIndex</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里检查的stageid中对应的所有的正在运行的task的个数是否达到了stage需要运行的task的个数,</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">如果达到了需要运行的task的个数,设置allocationManager中</span><span style="color:#000000; background:rgb(255,228,255)">addTime</span><span style="color:#000000; background:rgb(255,255,255)">属性的值为NOT_SET.同时重置属性</span><span style="color:#000000; background:rgb(255,228,255)">numExecutorsToAdd</span><span style="color:#000000; background:rgb(255,255,255)">的值为1.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><span style="color:#0080; background:rgb(255,255,255)">if </span><span style="color:#000000; background:rgb(255,255,255)">(totalPendingTasks() == </span><span style="color:#00ff; background:rgb(255,255,255)">0</span><span style="color:#000000; background:rgb(255,255,255)">) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      allocationManager.onSchedulerQueueEmpty()</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">把task运行的executor的对应关系存储到对应的集合中,这个存储的集合用于判断executor是否是闲置的状态.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><span style="color:#808080; background:rgb(255,255,255)">// Mark the executor on which this task is scheduled as busy</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    </span><span style="color:#66e7a; background:rgb(255,255,255)">executorIdToTaskIds</span><span style="color:#000000; background:rgb(255,255,255)">.getOrElseUpdate(executorId</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#0080; background:rgb(255,255,255)">new </span><span style="color:#000000; background:rgb(255,255,255)">mutable.HashSet[</span><span style="color:#cc7832; background:rgb(255,255,255)">Long</span><span style="color:#000000; background:rgb(255,255,255)">]) += </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">         </span><span style="color:#000000; background:rgb(255,255,255)">taskId</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">由于executorId已经有task在运行,把这个executor从要移出的executor集合中移出</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">从</span><span style="color:#000000; background:rgb(228,228,255)">removeTimes</span><span style="color:#000000; background:rgb(255,255,255)">集合中移出,这个集合中存储了executor的闲置回收超时时间.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">从</span><span style="color:#000000; background:rgb(228,228,255)">executorsPendingToRemove</span><span style="color:#000000; background:rgb(255,255,255)">集合中移出,这个集合中存储了准备执行移出操作的executor的集合.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    allocationManager.onExecutorBusy(executorId)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#00ff; background:rgb(255,255,255)">对task</span><span style="color:#00ff; background:rgb(255,255,255)">停止</span><span style="color:#00ff; background:rgb(255,255,255)">时的监听</span><span style="color:#000000; background:rgb(255,255,255)">:</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#0080; background:rgb(255,255,255)">override def </span><span style="color:#000000; background:rgb(255,255,255)">onTaskEnd(taskEnd: SparkListenerTaskEnd): </span><span style="color:#cc7832; background:rgb(255,255,255)">Unit </span><span style="color:#000000; background:rgb(255,255,255)">= {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><span style="color:#0080; background:rgb(255,255,255)">val </span><span style="color:#000000; background:rgb(255,255,255)">executorId = taskEnd.taskInfo.executorId</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><span style="color:#0080; background:rgb(255,255,255)">val </span><span style="color:#000000; background:rgb(255,255,255)">taskId = taskEnd.taskInfo.taskId</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><span style="color:#0080; background:rgb(255,255,255)">val </span><span style="color:#000000; background:rgb(255,255,255)">taskIndex = taskEnd.taskInfo.index</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><span style="color:#0080; background:rgb(255,255,255)">val </span><span style="color:#000000; background:rgb(255,255,255)">stageId = taskEnd.stageId</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  allocationManager.synchronized {</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">把对应的运行的TASK的个数减去1,表示有一个task完成运行.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><span style="color:#66e7a; background:rgb(255,255,255)">numRunningTasks </span><span style="color:#000000; background:rgb(255,255,255)">-= </span><span style="color:#00ff; background:rgb(255,255,255)">1</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#00ff; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#00ff; background:rgb(255,255,255)">从对应的executor的关系集合中移出此task,如果这个executor已经没有了正在运行的task时,直接把这个executor执行idle的处理,也就是移动到</span><span style="color:#000000; background:rgb(228,228,255)">removeTimes</span><span style="color:#00ff; background:rgb(255,255,255)">集合中.</span><span style="color:#00ff; background:rgb(255,255,255)"><br>
</span><span style="color:#00ff; background:rgb(255,255,255)">    </span><span style="color:#808080; background:rgb(255,255,255)">// If the executor is no longer running any scheduled tasks, mark it as idle</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    </span><span style="color:#0080; background:rgb(255,255,255)">if </span><span style="color:#000000; background:rgb(255,255,255)">(</span><span style="color:#66e7a; background:rgb(255,255,255)">executorIdToTaskIds</span><span style="color:#000000; background:rgb(255,255,255)">.contains(executorId)) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><span style="color:#66e7a; background:rgb(255,255,255)">executorIdToTaskIds</span><span style="color:#000000; background:rgb(255,255,255)">(executorId) -= taskId</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><span style="color:#0080; background:rgb(255,255,255)">if </span><span style="color:#000000; background:rgb(255,255,255)">(</span><span style="color:#66e7a; background:rgb(255,255,255)">executorIdToTaskIds</span><span style="color:#000000; background:rgb(255,255,255)">(executorId).isEmpty) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><span style="color:#66e7a; background:rgb(255,255,255)">executorIdToTaskIds </span><span style="color:#000000; background:rgb(255,255,255)">-= executorId</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        allocationManager.onExecutorIdle(executorId)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><span style="color:#808080; background:rgb(255,255,255)">// If the task failed, we expect it to be resubmitted later. To ensure we have</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    // enough resources to run the resubmitted task, we need to mark the scheduler</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    // as backlogged again if it's not already marked as such (SPARK-8366)</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    </span><span style="color:#0080; background:rgb(255,255,255)">if </span><span style="color:#000000; background:rgb(255,255,255)">(taskEnd.reason != Success) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><span style="color:#0080; background:rgb(255,255,255)">if </span><span style="color:#000000; background:rgb(255,255,255)">(totalPendingTasks() == </span><span style="color:#00ff; background:rgb(255,255,255)">0</span><span style="color:#000000; background:rgb(255,255,255)">) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        allocationManager.onSchedulerBacklogged()</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><span style="color:#66e7a; background:rgb(255,255,255)">stageIdToTaskIndices</span><span style="color:#000000; background:rgb(255,255,255)">.get(stageId).foreach { _.remove(taskIndex) }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p style="background:rgb(255,255,255)"> </p>
<p style="background:rgb(255,255,255)"><span style="color:#00ff; background:rgb(255,255,255)">对</span><span style="color:#00ff; background:rgb(255,255,255)">stage</span><span style="color:#00ff; background:rgb(255,255,255)">停止时的监听</span><span style="color:#000000; background:rgb(255,255,255)">:</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#0080; background:rgb(255,255,255)">override def </span><span style="color:#000000; background:rgb(255,255,255)">onStageCompleted(stageCompleted: SparkListenerStageCompleted)</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">: </span><span style="color:#cc7832; background:rgb(255,255,255)">Unit </span><span style="color:#000000; background:rgb(255,255,255)">= {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><span style="color:#0080; background:rgb(255,255,255)">val </span><span style="color:#000000; background:rgb(255,255,255)">stageId = stageCompleted.stageInfo.stageId</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  allocationManager.synchronized {</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">从对应的集合中移出此stage.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><span style="color:#66e7a; background:rgb(255,255,255)">stageIdToNumTasks </span><span style="color:#000000; background:rgb(255,255,255)">-= stageId</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><span style="color:#66e7a; background:rgb(255,255,255)">stageIdToTaskIndices </span><span style="color:#000000; background:rgb(255,255,255)">-= stageId</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><span style="color:#66e7a; background:rgb(255,255,255)">stageIdToExecutorPlacementHints </span><span style="color:#000000; background:rgb(255,255,255)">-= stageId</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">更新allocationManager中对应各个job的stage中task与location的对应关系.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><span style="color:#808080; background:rgb(255,255,255)">// Update the executor placement hints</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    </span><span style="color:#000000; background:rgb(255,255,255)">updateExecutorPlacementHints()</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">所有的job都运行完成,暂停调度.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><span style="color:#808080; background:rgb(255,255,255)">// If this is the last stage with pending tasks, mark the scheduler queue as empty</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    // This is needed in case the stage is aborted for any reason</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    </span><span style="color:#0080; background:rgb(255,255,255)">if </span><span style="color:#000000; background:rgb(255,255,255)">(</span><span style="color:#66e7a; background:rgb(255,255,255)">stageIdToNumTasks</span><span style="color:#000000; background:rgb(255,255,255)">.isEmpty) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      allocationManager.onSchedulerQueueEmpty()</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><span style="color:#0080; background:rgb(255,255,255)">if </span><span style="color:#000000; background:rgb(255,255,255)">(</span><span style="color:#66e7a; background:rgb(255,255,255)">numRunningTasks </span><span style="color:#000000; background:rgb(255,255,255)">!= </span><span style="color:#00ff; background:rgb(255,255,255)">0</span><span style="color:#000000; background:rgb(255,255,255)">) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        logWarning(</span><span style="color:#0800; background:rgb(255,255,255)">"No stages are running, but numRunningTasks != 0"</span><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><span style="color:#66e7a; background:rgb(255,255,255)">numRunningTasks </span><span style="color:#000000; background:rgb(255,255,255)">= </span><span style="color:#00ff; background:rgb(255,255,255)">0</span><span style="color:#00ff; background:rgb(255,255,255)"><br>
</span><span style="color:#00ff; background:rgb(255,255,255)">      </span><span style="color:#000000; background:rgb(255,255,255)">}</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p style="background:rgb(255,255,255)"> </p>
<p style="background:rgb(255,255,255)"><span style="color:#00ff">在调度过程中发现executor超时需要移出时的处理</span>:</p>
<p style="background:rgb(255,255,255)"><span style="color:#0080; background:rgb(255,255,255)">private def </span><span style="color:#000000; background:rgb(255,255,255)">removeExecutor(executorId: </span><span style="color:#20999d; background:rgb(255,255,255)">String</span><span style="color:#000000; background:rgb(255,255,255)">): </span><span style="color:#cc7832; background:rgb(255,255,255)">Boolean </span><span style="color:#000000; background:rgb(255,255,255)">= synchronized {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><span style="color:#808080; background:rgb(255,255,255)">// Do not kill the executor if we are not aware of it (should never happen)</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">  </span><span style="color:#0080; background:rgb(255,255,255)">if </span><span style="color:#000000; background:rgb(255,255,255)">(!</span><span style="color:#66e7a; background:rgb(255,255,255)">executorIds</span><span style="color:#000000; background:rgb(255,255,255)">.contains(executorId)) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    logWarning(</span><span style="color:#0800; background:rgb(255,255,255)">s"Attempted to remove unknown executor </span><span style="color:#0b8bb; background:rgb(255,255,255)">$</span><span style="color:#000000; background:rgb(255,255,255)">executorId</span><span style="color:#0800; background:rgb(255,255,255)">!"</span><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><span style="color:#0080; background:rgb(255,255,255)">return false</span><span style="color:#0080; background:rgb(255,255,255)"><br>
</span><span style="color:#0080; background:rgb(255,255,255)">  </span><span style="color:#000000; background:rgb(255,255,255)">}</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><span style="color:#808080; background:rgb(255,255,255)">// Do not kill the executor again if it is already pending to be killed </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#808080; background:rgb(255,255,255)">      </span><span style="color:#808080; background:rgb(255,255,255)">(should never happen)</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">  </span><span style="color:#0080; background:rgb(255,255,255)">if </span><span style="color:#000000; background:rgb(255,255,255)">(</span><span style="color:#66e7a; background:rgb(255,255,255)">executorsPendingToRemove</span><span style="color:#000000; background:rgb(255,255,255)">.contains(executorId)) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    logWarning(</span><span style="color:#0800; background:rgb(255,255,255)">s"Attempted to remove executor </span><span style="color:#0b8bb; background:rgb(255,255,255)">$</span><span style="color:#000000; background:rgb(255,255,255)">executorId </span><span style="color:#0800; background:rgb(255,255,255)">" </span><span style="color:#000000; background:rgb(255,255,255)">+</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><span style="color:#0800; background:rgb(255,255,255)">s"when it is already pending to be removed!"</span><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><span style="color:#0080; background:rgb(255,255,255)">return false</span><span style="color:#0080; background:rgb(255,255,255)"><br>
</span><span style="color:#0080; background:rgb(255,255,255)">  </span><span style="color:#000000; background:rgb(255,255,255)">}</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里检查下现在存在的executor的个数是否小于了配置的最小的executor的个数,如果不小于才执行移出操作.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><span style="color:#808080; background:rgb(255,255,255)">// Do not kill the executor if we have already reached the lower bound</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">  </span><span style="color:#0080; background:rgb(255,255,255)">val </span><span style="color:#000000; background:rgb(255,255,255)">numExistingExecutors = </span><span style="color:#66e7a; background:rgb(255,255,255)">executorIds</span><span style="color:#000000; background:rgb(255,255,255)">.size - </span><span style="color:#66e7a; background:rgb(255,255,255)">executorsPendingToRemove</span><span style="color:#000000; background:rgb(255,255,255)">.size</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><span style="color:#0080; background:rgb(255,255,255)">if </span><span style="color:#000000; background:rgb(255,255,255)">(numExistingExecutors - </span><span style="color:#00ff; background:rgb(255,255,255)">1 </span><span style="color:#000000; background:rgb(255,255,255)">&lt; </span><span style="color:#66e7a; background:rgb(255,255,255)">minNumExecutors</span><span style="color:#000000; background:rgb(255,255,255)">) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    logDebug(</span><span style="color:#0800; background:rgb(255,255,255)">s"Not removing idle executor </span><span style="color:#0b8bb; background:rgb(255,255,255)">$</span><span style="color:#000000; background:rgb(255,255,255)">executorId</span><span style="color:#0800; background:rgb(255,255,255)"> because there are only " </span><span style="color:#000000; background:rgb(255,255,255)">+</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><span style="color:#0800; background:rgb(255,255,255)">s"</span><span style="color:#0b8bb; background:rgb(255,255,255)">$</span><span style="color:#000000; background:rgb(255,255,255)">numExistingExecutors</span><span style="color:#0800; background:rgb(255,255,255)"> executor(s) left (limit </span><span style="color:#0b8bb; background:rgb(255,255,255)">$</span><span style="color:#66e7a; background:rgb(255,255,255)">minNumExecutors</span><span style="color:#0800; background:rgb(255,255,255)">)"</span><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><span style="color:#0080; background:rgb(255,255,255)">return false</span><span style="color:#0080; background:rgb(255,255,255)"><br>
</span><span style="color:#0080; background:rgb(255,255,255)">  </span><span style="color:#000000; background:rgb(255,255,255)">}</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里发起对executor的停止操作.并把这个发起停止后的executor添加到</span><span style="color:#66e7a; background:rgb(255,255,255)">executorsPendingToRemov</span><span style="color:#000000; background:rgb(255,255,255)">集合中.等待回调此allocationManager中listener中的onExecutorRemoved函数.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><span style="color:#808080; background:rgb(255,255,255)">// Send a request to the backend to kill this executor</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">  </span><span style="color:#0080; background:rgb(255,255,255)">val </span><span style="color:#000000; background:rgb(255,255,255)">removeRequestAcknowledged = </span><span style="color:#66e7a; background:rgb(255,255,255)">testing </span><span style="color:#000000; background:rgb(255,255,255)">|| client.killExecutor(executorId)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><span style="color:#0080; background:rgb(255,255,255)">if </span><span style="color:#000000; background:rgb(255,255,255)">(removeRequestAcknowledged) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    logInfo(</span><span style="color:#0800; background:rgb(255,255,255)">s"Removing executor </span><span style="color:#0b8bb; background:rgb(255,255,255)">$</span><span style="color:#000000; background:rgb(255,255,255)">executorId</span><span style="color:#0800; background:rgb(255,255,255)"> because it has been idle for " </span><span style="color:#000000; background:rgb(255,255,255)">+</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><span style="color:#0800; background:rgb(255,255,255)">s"</span><span style="color:#0b8bb; background:rgb(255,255,255)">$</span><span style="color:#66e7a; background:rgb(255,255,255)">executorIdleTimeoutS</span><span style="color:#0800; background:rgb(255,255,255)"> seconds (new desired total will be </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#0800; background:rgb(255,255,255)">           </span><span style="color:#0b8bb; background:rgb(255,255,255)">$</span><span style="color:#000000; background:rgb(255,255,255)">{numExistingExecutors - </span><span style="color:#00ff; background:rgb(255,255,255)">1</span><span style="color:#000000; background:rgb(255,255,255)">}</span><span style="color:#0800; background:rgb(255,255,255)">)"</span><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><span style="color:#66e7a; background:rgb(255,255,255)">executorsPendingToRemove</span><span style="color:#000000; background:rgb(255,255,255)">.add(executorId)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><span style="color:#0080; background:rgb(255,255,255)">true</span><span style="color:#0080; background:rgb(255,255,255)"><br>
</span><span style="color:#0080; background:rgb(255,255,255)">  </span><span style="color:#000000; background:rgb(255,255,255)">} </span><span style="color:#0080; background:rgb(255,255,255)">else </span><span style="color:#000000; background:rgb(255,255,255)">{</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    logWarning(</span><span style="color:#0800; background:rgb(255,255,255)">s"Unable to reach the cluster manager to kill executor </span><span style="color:#0b8bb; background:rgb(255,255,255)">$</span><span style="color:#000000; background:rgb(255,255,255)">executorId</span><span style="color:#0800; background:rgb(255,255,255)">!"</span><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><span style="color:#0080; background:rgb(255,255,255)">false</span><span style="color:#0080; background:rgb(255,255,255)"><br>
</span><span style="color:#0080; background:rgb(255,255,255)">  </span><span style="color:#000000; background:rgb(255,255,255)">}</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p style="background:rgb(255,255,255)"> </p>
<p style="background:rgb(255,255,255)">allocationManager中监听executor的移出操作:</p>
<p style="background:rgb(255,255,255)"><span style="color:#0080; background:rgb(255,255,255)">override def </span><span style="color:#000000; background:rgb(255,255,255)">onExecutorRemoved(executorRemoved: SparkListenerExecutorRemoved)</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">: </span><span style="color:#cc7832; background:rgb(255,255,255)">Unit </span><span style="color:#000000; background:rgb(255,255,255)">= {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  allocationManager.onExecutorRemoved(executorRemoved.executorId)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">其实这个函数就是从对应的集合中移出此executor.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#0080; background:rgb(255,255,255)">private def </span><span style="color:#000000; background:rgb(255,255,255)">onExecutorRemoved(executorId: </span><span style="color:#20999d; background:rgb(255,255,255)">String</span><span style="color:#000000; background:rgb(255,255,255)">): </span><span style="color:#cc7832; background:rgb(255,255,255)">Unit </span><span style="color:#000000; background:rgb(255,255,255)">= synchronized {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><span style="color:#0080; background:rgb(255,255,255)">if </span><span style="color:#000000; background:rgb(255,255,255)">(</span><span style="color:#66e7a; background:rgb(255,255,255)">executorIds</span><span style="color:#000000; background:rgb(255,255,255)">.contains(executorId)) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><span style="color:#66e7a; background:rgb(255,255,255)">executorIds</span><span style="color:#000000; background:rgb(255,255,255)">.remove(executorId)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><span style="color:#66e7a; background:rgb(255,255,255)">removeTimes</span><span style="color:#000000; background:rgb(255,255,255)">.remove(executorId)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    logInfo(</span><span style="color:#0800; background:rgb(255,255,255)">s"Existing executor </span><span style="color:#0b8bb; background:rgb(255,255,255)">$</span><span style="color:#000000; background:rgb(255,255,255)">executorId</span><span style="color:#0800; background:rgb(255,255,255)"> has been removed (new total is </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#0800; background:rgb(255,255,255)">           </span><span style="color:#0b8bb; background:rgb(255,255,255)">$</span><span style="color:#000000; background:rgb(255,255,255)">{</span><span style="color:#66e7a; background:rgb(255,255,255)">executorIds</span><span style="color:#000000; background:rgb(255,255,255)">.size}</span><span style="color:#0800; background:rgb(255,255,255)">)"</span><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><span style="color:#0080; background:rgb(255,255,255)">if </span><span style="color:#000000; background:rgb(255,255,255)">(</span><span style="color:#66e7a; background:rgb(255,255,255)">executorsPendingToRemove</span><span style="color:#000000; background:rgb(255,255,255)">.contains(executorId)) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><span style="color:#66e7a; background:rgb(255,255,255)">executorsPendingToRemove</span><span style="color:#000000; background:rgb(255,255,255)">.remove(executorId)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      logDebug(</span><span style="color:#0800; background:rgb(255,255,255)">s"Executor </span><span style="color:#0b8bb; background:rgb(255,255,255)">$</span><span style="color:#000000; background:rgb(255,255,255)">executorId</span><span style="color:#0800; background:rgb(255,255,255)"> is no longer pending to " </span><span style="color:#000000; background:rgb(255,255,255)">+</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><span style="color:#0800; background:rgb(255,255,255)">s"be removed (</span><span style="color:#0b8bb; background:rgb(255,255,255)">$</span><span style="color:#000000; background:rgb(255,255,255)">{</span><span style="color:#66e7a; background:rgb(255,255,255)">executorsPendingToRemove</span><span style="color:#000000; background:rgb(255,255,255)">.size}</span><span style="color:#0800; background:rgb(255,255,255)"> left)"</span><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  } </span><span style="color:#0080; background:rgb(255,255,255)">else </span><span style="color:#000000; background:rgb(255,255,255)">{</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    logWarning(</span><span style="color:#0800; background:rgb(255,255,255)">s"Unknown executor </span><span style="color:#0b8bb; background:rgb(255,255,255)">$</span><span style="color:#000000; background:rgb(255,255,255)">executorId</span><span style="color:#0800; background:rgb(255,255,255)"> has been removed!"</span><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
            </div>
                </div>