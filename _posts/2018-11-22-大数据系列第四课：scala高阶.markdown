---
layout:     post
title:      大数据系列第四课：scala高阶
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<p><span style="font-size:14px;">第一阶段：<span style="font-family:'Times New Roman';">Spark streaming</span><span style="font-family:'宋体';">、</span><span style="font-family:'Times New Roman';">spark sql</span><span style="font-family:'宋体';">、</span><span style="font-family:'Times New Roman';">kafka</span><span style="font-family:'宋体';">、</span><span style="font-family:'Times New Roman';">spark</span><span style="font-family:'宋体';">内核原</span>
  理（必须有一个大型项目经验）；</span></p>
<p><span style="font-size:14px;">第二阶段：<span style="font-family:'Times New Roman';">spark</span><span style="font-family:'宋体';">运行的各种环境，各种故障的解决，性能</span>  优化（精通<span style="font-family:'Times New Roman';">spark</span><span style="font-family:'宋体';">内核、运行原理）；</span></span></p>
<p><span style="font-size:14px;">第三阶段：流处理、机器学习为鳌头，需要首先掌握前两个  阶段的内容；</span></p>
<p><span style="color:rgb(255,0,0);">跟随王家林老师的零基础讲解，注重动手实战，成为<span style="font-family:'Times New Roman';">spark</span><span style="font-family:'宋体';">高手，笑傲大数据之林！</span></span></p>
<p><span style="color:rgb(255,0,0);">第一部分：学习笔记</span></p>
<p>本期内容：</p>
<p><span></span>1 Scala<span style="font-family:'宋体';">模式匹配彻底详解</span></p>
<p><span></span>2 Scala<span style="font-family:'宋体';">类型系统彻底详解</span></p>
<p><span></span>3 Spark<span style="font-family:'宋体';">源码阅读及作业</span></p>
<p></p>
<p style="font-family:'宋体';"><strong>一、模式匹配和类型</strong></p>
<p style="font-family:'宋体';"><strong>（<span style="font-family:'Times New Roman';">1</span><span style="font-family:'宋体';">）模式匹配可以匹配类型、值等</span></strong></p>
<p style="font-family:'宋体';">1<span style="font-family:'宋体';">、值的匹配</span></p>
<pre><code class="language-java">def bigData(data:String){
	data match{
		case "Spark" =&gt;ptintln("Wow!")
		case "Hadoop" =&gt;println("OK")
		case _O =&gt;println(" The others!")  //匹配其他形式的字符串
	}
}
bigData("Hadoop") //传进Hadoop后，开始遍历匹配，匹配到后，会停止执行
bigData("Flink")  //匹配其他的形式字符串</code></pre>
<p style="font-family:'宋体';">模式匹配的时候进行判断</p>
<pre><code class="language-java">def bigData(data:String){
	data match{
		case "Spark" =&gt;ptintln("Wow!")
		case "Hadoop" =&gt;println("OK")
		case _ if data =="Flink" =&gt;println("Cool")
		case _ =&gt;println("Something else")
	}
}
bigData("Spark")
bigData("Flin")     //条件判断，进行分层过滤</code></pre>
<p style="font-family:'宋体';">用变量名接受了模式匹配输入的内容</p>
<pre><code class="language-java">def bigData(data:String){
	data match{
		case "Spark" =&gt;ptintln("Wow!")
		case "Hadoop" =&gt;println("OK")
		case data if data_ =="Flink" =&gt;println("Cool" + data_)
		case _ =&gt;println("Something else")
	} //将传进的data赋给变量data_
}</code></pre>
<p style="font-family:'宋体';">2<span style="font-family:'宋体';">、类型的匹配</span></p>
<pre><code class="language-java">import java.io._
def exception(e:Exception)
e catch{
	case fileException:FileNotFoundException =&gt;println("File not found:" +fileException)
	case _:Exception =&gt;ptintln(s"Exception getting thread from excutor SexecutedID",e)
}
//调用,匹配首先打印Exception,匹配类型
exception(new FileNotFoundException("Hello!"))</code></pre>
<p style="font-family:'宋体';">3<span style="font-family:'宋体';">、对集合进行匹配</span></p>
<p></p><pre><code class="language-java">def data(array:Array[String]){
array match{
case Array("Scala") =&gt;("Scala")  //匹配指定数组中的元素
case Array(Spark,hadoop,flink) =&gt;println(spark +":" +hadoop+":" +flink)
case Array("Spark", _*) =&gt;println("Spark ...")//匹配以某元素开头的元素
case _ =&gt;println("Unknown")    //匹配其他的数组元素
}
}
data(Array("Spark")
data(Array("Scala","Spark"),"Kafka")  //匹配将值传给匹配的变量并打印
</code></pre>
<p><span style="font-family:'宋体';">4、</span><span style="font-family:'Times New Roman';">case class</span></p>
<p style="font-family:'宋体';">case class person(name:String) //<span style="font-family:'宋体';">适合并发编程的消息传递</span></p>
<p style="font-family:'宋体';">自动生成当前消息的<span style="font-family:'Times New Roman';">case class</span><span style="font-family:'宋体';">的伴生对象</span><span style="font-family:'Times New Roman';">case object</span></p>
<p style="font-family:'宋体';"><span></span>(1)case class <span style="font-family:'宋体';">相当于</span><span style="font-family:'Times New Roman';">Java</span><span style="font-family:'宋体';">中</span><span style="font-family:'Times New Roman';">bin</span></p>
<p style="font-family:'宋体';"><span></span>(2)<span style="font-family:'宋体';">自己的实例化，调用伴生对象的</span><span style="font-family:'Times New Roman';">apply</span><span style="font-family:'宋体';">方法，返回一个实例</span></p>
<pre><code class="language-java">//case class Worker(id:String,salary:Double) extends Person(name)
case class Person //直接定义Person
case class Worker(name:String,salary:Double) extends Person
case class Student(name:String,score:Double) extends Person
//定义函数sayHi
def sayHi(person:Person){
	person match{
	case Student(name,score) =&gt;println("I am a student:" +name + score)
	case Worker(name,salary) =&gt;println("I am a Worker:" +name + salary)
	case _ =&gt;println("Unknown!")
	}
}
sayHi(Worker("Spark",32)) //传进参数，匹配变量并接收
sayHi(Student("Spark",31))</code></pre><br><p><strong>二、类型参数</strong></p>
<p>1<span style="font-family:'宋体';">、泛型类、函数</span></p>
<p></p><pre><code class="language-java">class Person[T](val content:T)
class Person[T](val content:T){
def getContent(id:T) = id + "_" +content
}
val p = new Person[String]("Spark")  //实例化对象的时候指定泛型类型String
p.getContent("Scala") //类型控制，这里必须传入String类型</code></pre>
<p>2、类型边界<span style="font-family:'Times New Roman';">(</span><span style="font-family:'宋体';">对类型本身指定边界</span><span style="font-family:'Times New Roman';">)</span></p>
<p>如：大数据<span style="font-family:'Times New Roman';">Spark</span><span style="font-family:'宋体';">工程师，调用</span><span style="font-family:'Times New Roman';">spark</span><span style="font-family:'宋体';">类型工作，也可以调用其子类型进行工作大数据</span><span style="font-family:'Times New Roman';">Spark</span><span style="font-family:'宋体';">工程师</span><span style="font-family:'Times New Roman';">[ _ &lt;:Spark</span><span style="font-family:'宋体';">技能</span><span style="font-family:'Times New Roman';">] //</span><span style="font-family:'宋体';">这边的上边界就是</span><span style="font-family:'Times New Roman';">[Spark</span><span style="font-family:'宋体';">技能</span><span style="font-family:'Times New Roman';">]</span><span style="font-family:'宋体';">。</span></p>
<pre><code class="language-java">1.class Pair[T &lt;: Comparable[T]](val first : T,val second : T){  
2.  def bigger = if(first.compareTo(second) &gt; 0)first else second    
3.}  
4.class Pair_Lower_Bound[T](val first:T,val second:T){  
5.  def replaceFirst[R &gt;: T](newFirst:R)= new Pair_Lower_Bound[R](newFirst,second)  
6.}  
7.object Typy_Variables_Bounds {  
8.  def main(args: Array[String]){  
9.    val pair = new Pair("Spark", "Hadoop")  
10.    println(pair.bigger)  
11.  }  
12.}  </code></pre>
<p><span></span>上述代码中给泛型类<span style="font-family:'Times New Roman';">Pair</span><span style="font-family:'宋体';">中的类型</span><span style="font-family:'Times New Roman';">T</span><span style="font-family:'宋体';">一个限定，即类型为</span><span style="font-family:'Times New Roman';">T</span><span style="font-family:'宋体';">的成员有一个方法为</span><span style="font-family:'Times New Roman';">CompareTo</span><span style="font-family:'宋体';">，如注释掉的代码会报错，因为不知道</span><span style="font-family:'Times New Roman';">first</span><span style="font-family:'宋体';">和</span><span style="font-family:'Times New Roman';">second</span><span style="font-family:'宋体';">的具体类型，无法判定</span><span style="font-family:'Times New Roman';">first</span><span style="font-family:'宋体';">和</span><span style="font-family:'Times New Roman';">second</span><span style="font-family:'宋体';">是否有</span><span style="font-family:'Times New Roman';">CompareTo</span><span style="font-family:'宋体';">，那么就需要对</span><span style="font-family:'Times New Roman';">T</span><span style="font-family:'宋体';">有一个限定（对变量类型本身的限定）。具体限定为</span><span style="font-family:'Times New Roman';">[T&lt;:Comparable[T]]</span><span style="font-family:'宋体';">，即</span><span style="font-family:'Times New Roman';">T</span><span style="font-family:'宋体';">类型为</span><span style="font-family:'Times New Roman';">Comparable</span><span style="font-family:'宋体';">的子类型（如：</span><span style="font-family:'Times New Roman';">compareTo</span><span style="font-family:'宋体';">），比较的实现为函数</span><span style="font-family:'Times New Roman';">bigger</span><span style="font-family:'宋体';">。</span><span style="font-family:'Times New Roman';">Class replaceFirst[R:&gt;T]</span><span style="font-family:'宋体';">说明</span><span style="font-family:'Times New Roman';">R</span><span style="font-family:'宋体';">类型为</span><span style="font-family:'Times New Roman';">T</span><span style="font-family:'宋体';">的父类，</span><span style="font-family:'Times New Roman';">Pair[T:&lt;ComparableTo[T]]</span><span style="font-family:'宋体';">说明</span><span style="font-family:'Times New Roman';">T</span><span style="font-family:'宋体';">类型为</span><span style="font-family:'Times New Roman';">ComparableTo[T]</span><span style="font-family:'宋体';">的下界。</span></p>
<p>3<span style="font-family:'宋体';">、</span><span style="font-family:'Times New Roman';">View Bounds</span><span style="font-family:'宋体';">视图界定</span><span style="font-family:'Times New Roman';">(</span><span style="font-family:'宋体';">没有上下边界的类型</span><span style="font-family:'Times New Roman';">)&amp;</span><span style="font-family:'宋体';">隐式转换</span></p>
<p><span></span>支持对类型本身就行隐式转换<span style="font-family:'Times New Roman';">(</span><span style="font-family:'宋体';">如：工作时可能出错，将其隐式转换为可以运行的状态，运行结束后再重新恢复原来的状态</span><span style="font-family:'Times New Roman';">)</span><span style="font-family:'宋体';">将指定的类型进行隐式转换，转换的类型可以作为类型上界、下界。</span></p>
<p><strong><span></span>View Bounds<span style="font-family:'宋体';">语法：</span><span style="font-family:'Times New Roman';">&lt;%</span></strong></p>
<pre><code class="language-java">1.class Pair_NotPerfect[T &lt;% Comparable[T]](val first : T,val second : T){  
2.    def bigger = if(first.compareTo(second) &gt; 0)first else second    
3.}  
1.val pair = new Pair_NotPerfect("Spark", "Hadoop")  
2.println(pair.bigger)  
3.  
4.val pairInt = new Pair_NotPerfect(3, 5) //Int -&gt; RichInt  
5.println(pairInt.bigger) </code></pre>
<p><span style="color:rgb(51,51,51);"><strong>试图界定：</strong>是指我们可以把具体的传入的</span><span style="color:rgb(51,51,51);">T</span><span style="color:rgb(51,51,51);">类型的实例转换成</span><span style="color:rgb(51,51,51);">Comparable[T]</span><span style="color:rgb(51,51,51);">类型，如果</span><span style="color:rgb(51,51,51);">comparable[T]</span><span style="color:rgb(51,51,51);">类型不是</span><span style="color:rgb(51,51,51);">T</span><span style="color:rgb(51,51,51);">类型的父类，使用</span><span style="color:rgb(51,51,51);">&lt;%</span><span style="color:rgb(51,51,51);">的方式可以进行隐式转换。</span></p>
<p><span style="color:rgb(51,51,51);"><span></span>视图界定与隐式转换的过程：在应用类型T无法满足上界Comparable[T]的时候，使用&lt;%做视图界定，将类型T隐式转换成Comparable[T]的子类型，例如整数类型Int会先变成RichInt类型，RichInt是以Comparable为类型上界的，所以用ComparaTo方法，即RichInt中有ComparaTo方法。</span></p>
<p><span></span>~[K:&lt;% Writable]  //K<span style="font-family:'宋体';">必须为</span><span style="font-family:'Times New Roman';">Writeble</span><span style="font-family:'宋体';">类型或者隐式转换为其类型，</span>在上下文中注入隐式值，而且注入的过程是自动的。</p>
<pre><code class="language-java">class Compare[T :Ordering](val n1:T,val n2:T){ //比较数字大小	
	def bigger(implicit ordered: Ordering[T]) if(ordered.Compare(n1,n2)&gt;0)n1 else n2 }//一定存在一个Ordering 的T类型
	new Compare[Int](8,3),bigger 
	new Compare[String]("Spark","Hadoop").bigger
}</code></pre>
<p><span></span>[T<span style="font-family:'宋体';">：</span><span style="font-family:'Times New Roman';">Ordering]</span><span style="font-family:'宋体';">其中的</span><span style="font-family:'Times New Roman';">Ordering</span><span style="font-family:'宋体';">为隐式的，也就是</span><span style="font-family:'Times New Roman';">Ordering[T]</span><span style="font-family:'宋体';">；函数</span><span style="font-family:'Times New Roman';">bigger</span><span style="font-family:'宋体';">中隐式传进一个参数</span><span style="font-family:'Times New Roman';">ordered</span><span style="font-family:'宋体';">，他是一种上下文界定的方式。</span></p>
<p>注：<span style="font-family:'Times New Roman';">String</span><span style="font-family:'宋体';">有一个</span><span style="font-family:'Times New Roman';">Ordering[String]</span></p>
<p>        Int <span style="font-family:'宋体';">有一个</span><span style="font-family:'Times New Roman';">Ordered[Int]</span></p>
<p>[T:Manifest] //<span style="font-family:'宋体';">实例化数组</span><span style="font-family:'Times New Roman';">Array[T]</span></p>
<p><strong>4<span style="font-family:'宋体';">、逆变和协变</span></strong></p>
<p>C[+T]<span style="font-family:'宋体';">：如果</span><span style="font-family:'Times New Roman';">A</span><span style="font-family:'宋体';">是</span><span style="font-family:'Times New Roman';">B</span><span style="font-family:'宋体';">的子类，那么</span><span style="font-family:'Times New Roman';">C[A]</span><span style="font-family:'宋体';">是</span><span style="font-family:'Times New Roman';">C[B]</span><span style="font-family:'宋体';">的子类。逆变范围小；</span></p>
<p>C[-T]<span style="font-family:'宋体';">：如果</span><span style="font-family:'Times New Roman';">A</span><span style="font-family:'宋体';">是</span><span style="font-family:'Times New Roman';">B</span><span style="font-family:'宋体';">的子类，那么</span><span style="font-family:'Times New Roman';">C[B]</span><span style="font-family:'宋体';">是</span><span style="font-family:'Times New Roman';">C[A]</span><span style="font-family:'宋体';">的子类。协变范围大；</span></p>
<p>C[T]<span style="font-family:'宋体';">：无论</span><span style="font-family:'Times New Roman';">A</span><span style="font-family:'宋体';">和</span><span style="font-family:'Times New Roman';">B</span><span style="font-family:'宋体';">是什么关系，</span><span style="font-family:'Times New Roman';">C[A]</span><span style="font-family:'宋体';">和</span><span style="font-family:'Times New Roman';">C[B]</span><span style="font-family:'宋体';">没有从属关系。</span></p>
<p><strong><span></span>class Person[+T] </strong>   //<span style="font-family:'宋体';">强制定义为协变类型</span></p>
<p><strong><span></span>[Dependence[_]]</strong> :<span style="font-family:'宋体';">表示可以为任何类型 相当于</span><span style="font-family:'Times New Roman';">[Dependence[T]]</span>  </p>
<p>Manifest:<span style="font-family:'宋体';">类型分类，上下文界定，有一个</span><span style="font-family:'Times New Roman';">Manifest</span><span style="font-family:'宋体';">的隐式值，想得到运行时的具体信息，使用</span><span style="font-family:'Times New Roman';">Manifest</span><span style="font-family:'宋体';">来存储具体的类型，后来演化为</span><span style="font-family:'Times New Roman';">ClassTag</span><span style="font-family:'宋体';">。</span></p>
<pre><code class="language-java">abstract class RDD[T: ClassTag](
    @transient private var _sc: SparkContext,
    @transient private var deps: Seq[Dependency[_]]
  )
T:ClassTag :运行的时候会有更完善的类型进行匹配
import scala.reflect
{{{
 *   scala&gt; def mkArray[T : ClassTag](elems: T*) = Array[T](elems: _*)  			//elems:可变参数
 *   mkArray: [T](elems: T*)(implicit evidence$1: 					scala.reflect.ClassTag[T])Array[T]  
 *	 根据运行时的类型进行完善匹配，只有运行的时候知道其类型，定义		的时候不知道
 *   scala&gt; mkArray(42, 13)
 *   res0: Array[Int] = Array(42, 13)
 *
 *   scala&gt; mkArray("Japan","Brazil","Germany")
 *   res1: Array[String] = Array(Japan, Brazil, Germany)
 * }}}
 *</code></pre>
<p><strong>5、多重界定</strong></p>
<p>（<span style="font-family:'Times New Roman';">1</span><span style="font-family:'宋体';">）</span><span style="font-family:'Times New Roman';">T&gt;:A&lt;:B (T</span><span style="font-family:'宋体';">同时拥有上界</span><span style="font-family:'Times New Roman';">B</span><span style="font-family:'宋体';">和下界Ａ，Ａ是Ｂ的子类型</span><span style="font-family:'Times New Roman';">)</span></p>
<p>（<span style="font-family:'Times New Roman';">2</span><span style="font-family:'宋体';">）</span><span style="font-family:'Times New Roman';">T&lt;:A with B</span><span style="font-family:'宋体';">（</span><span style="font-family:'Times New Roman';">T</span><span style="font-family:'宋体';">为</span><span style="font-family:'Times New Roman';">A</span><span style="font-family:'宋体';">或者</span><span style="font-family:'Times New Roman';">B</span><span style="font-family:'宋体';">的子类，</span><span style="font-family:'Times New Roman';">with</span><span style="font-family:'宋体';">为接口）</span></p>
<p>（<span style="font-family:'Times New Roman';">3</span><span style="font-family:'宋体';">）</span><span style="font-family:'Times New Roman';">T&lt;%A&lt;%B</span><span style="font-family:'宋体';">（视图界定，</span><span style="font-family:'Times New Roman';">T</span><span style="font-family:'宋体';">即可隐式转换为</span><span style="font-family:'Times New Roman';">A</span><span style="font-family:'宋体';">并且也可转换为</span><span style="font-family:'Times New Roman';">B</span><span style="font-family:'宋体';">的类型）</span></p>
<p>（<span style="font-family:'Times New Roman';">4</span><span style="font-family:'宋体';">）</span><span style="font-family:'Times New Roman';">T</span><span style="font-family:'宋体';">：</span><span style="font-family:'Times New Roman';">A</span><span style="font-family:'宋体';">：</span><span style="font-family:'Times New Roman';">B</span><span style="font-family:'宋体';">（上下文界定）</span></p>
<p><span style="color:rgb(255,0,0);">第二部分：</span></p>
<p><span></span>作业：阅读<span style="font-family:'Times New Roman';">Spark</span><span style="font-family:'宋体';">源码 </span><span style="font-family:'Times New Roman';">RDD</span><span style="font-family:'宋体';">、</span><span style="font-family:'Times New Roman';">HadoopRDD</span><span style="font-family:'宋体';">、</span><span style="font-family:'Times New Roman';">SparkContext</span><span style="font-family:'宋体';">、</span><span style="font-family:'Times New Roman';">Master</span><span style="font-family:'宋体';">、</span><span style="font-family:'Times New Roman';">Worker</span><span style="font-family:'宋体';">的源码，并分析里面使用的所有的模式匹配和类型参数的内容</span></p>
<pre><code class="language-java">/*
   * 类型参数的泛型
   * 定义了newAPIHadoopFile方法，它有三个类型K,V,F
   * 类型K,V,F使用限定，是这三个类型都是NewInputFormat[K, V]的子类型；
   * K,V,F的类型上界是NewInputFormat[K, V]；
   * Hadoop读取文件的时候，限定输入文件的类型为NewInputFormat的子类；
   * ClassTag[K],ClassTag[V],ClassTag[F]是具有丰富的上下文信息，运行时推断具体的类型。
   * implicit隐式转化
   * 类型的上界约束
   */
  def newAPIHadoopFile[K, V, F &lt;: NewInputFormat[K, V]]
      (path: String)
      (implicit km: ClassTag[K], vm: ClassTag[V], fm: ClassTag[F]): RDD[(K, V)] = withScope {
    newAPIHadoopFile(
      path,
      fm.runtimeClass.asInstanceOf[Class[F]],
      km.runtimeClass.asInstanceOf[Class[K]],
      vm.runtimeClass.asInstanceOf[Class[V]])
  }
 /*
   * 类型参数的泛型：视图界定（View Bounds）
   * 定义了rddToSequenceFileRDDFunctions方法，它有两个类型K,V，它们是Writable类型或者被隐式转换为Writable类型
   * 带一个参数rdd，它是带有(K, V)类型的RDD
   * 方法返回一个带有类型(K, V)的SequenceFileRDDFunctions
   * ClassTag是具有丰富的上下文信息，运行时推断具体的类型。
   * implicit隐式转化
   */    
  def rddToSequenceFileRDDFunctions[K &lt;% Writable: ClassTag, V &lt;% Writable: ClassTag](
      rdd: RDD[(K, V)]): SequenceFileRDDFunctions[K, V] = {
    val kf = implicitly[K =&gt; Writable]
    val vf = implicitly[V =&gt; Writable]
    // Set the Writable class to null and `SequenceFileRDDFunctions` will use Reflection to get it
    implicit val keyWritableFactory = new WritableFactory[K](_ =&gt; null, kf)
    implicit val valueWritableFactory = new WritableFactory[V](_ =&gt; null, vf)
    RDD.rddToSequenceFileRDDFunctions(rdd)
  }
 /*
   * 类型参数的泛型：上下文界定
   * 定义了rddToSequenceFileRDDFunctions方法，它有两个类型K,V，它们是Writable类型或者被隐式转换为Writable类型
   * K : Ordering : ClassTag 表示存在一个隐式值Ordering[K]，上下文界定
   * 方法返回一个带有类型[K, V, (K, V)] 的OrderedRDDFunctions
   * ClassTag是具有丰富的上下文信息，运行时推断具体的类型。
   */ 
  @deprecated("Replaced by implicit functions in the RDD companion object. This is " +
    "kept here only for backward compatibility.", "1.3.0")
  def rddToOrderedRDDFunctions[K : Ordering : ClassTag, V: ClassTag](
      rdd: RDD[(K, V)]): OrderedRDDFunctions[K, V, (K, V)] =
    RDD.rddToOrderedRDDFunctions(rdd)</code></pre><img src="https://img-blog.csdn.net/20160105090227196?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br><br><br><br><br><br><br><br><br><br><br><br><br><p><span style="font-family:'宋体';"><br></span></p>
<p><span style="font-family:'宋体';"><br></span></p>
<p><span style="font-family:'宋体';"><br></span></p>
<p><span style="font-family:'宋体';"><br></span></p>
<p><span style="font-family:'宋体';"><br></span></p>
            </div>
                </div>