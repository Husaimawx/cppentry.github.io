---
layout:     post
title:      Hive的两种操作模式
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<h3 id="hive的客户端操作">Hive的客户端操作</h3>

<p></p><div class="toc"><div class="toc">
<ul>
<li><ul>
<li><ul>
<li><a href="#hive%E7%9A%84%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%93%8D%E4%BD%9C" rel="nofollow">Hive的客户端操作</a><ul>
<li><ul>
<li><a href="#%E9%80%9A%E8%BF%87jdbc%E6%93%8D%E4%BD%9Chive" rel="nofollow">通过JDBC操作Hive</a></li>
<li><a href="#%E9%80%9A%E8%BF%87thrift%E6%93%8D%E4%BD%9Chive" rel="nofollow">通过Thrift操作Hive</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>




<h5 id="通过jdbc操作hive">通过JDBC操作Hive</h5>

<ul>
<li><p>首先 Hive 启动远程服务</p>

<p><code>hive --service hiveserver</code></p></li>
<li><p>需要的jar包</p>

<p><img src="https://img-blog.csdn.net/20170829093335491?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemQxNjE1ODA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="jar" title=""></p></li>
</ul>

<pre class="prettyprint"><code class="language-Java hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestQuery</span> {</span>

    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String dirver =<span class="hljs-string">"org.apache.hadoop.hive.jdbc.HiveDriver"</span>;
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String url =<span class="hljs-string">"jdbc:hive://192.168.131.111:10000/default"</span>;

    <span class="hljs-annotation">@Test</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testQuery</span>() <span class="hljs-keyword">throws</span> Exception{

        Class.forName(dirver);
        String sql = <span class="hljs-string">"select * from emp"</span>;
        Connection conn = DriverManager.getConnection(url);
        Statement st = conn.createStatement();
        ResultSet rs = st.executeQuery(sql);

        <span class="hljs-keyword">while</span>(rs.next()){
            <span class="hljs-comment">//不能写列名</span>
            String ename = rs.getString(<span class="hljs-number">2</span>);
            <span class="hljs-keyword">int</span> sal = rs.getInt(<span class="hljs-number">6</span>);
            System.out.println(ename+<span class="hljs-string">"\t"</span>+sal);
        }
        JDBCUtil.release(conn, st, rs);
    }
}</code></pre>



<h5 id="通过thrift操作hive">通过Thrift操作Hive</h5>



<pre class="prettyprint"><code class="language-Java hljs avrasm">package <span class="hljs-keyword">com</span><span class="hljs-preprocessor">.zd</span><span class="hljs-preprocessor">.thrift</span><span class="hljs-comment">;</span>

import java<span class="hljs-preprocessor">.util</span><span class="hljs-preprocessor">.List</span><span class="hljs-comment">;</span>
import org<span class="hljs-preprocessor">.apache</span><span class="hljs-preprocessor">.hadoop</span><span class="hljs-preprocessor">.hive</span><span class="hljs-preprocessor">.service</span><span class="hljs-preprocessor">.HiveClient</span><span class="hljs-comment">;</span>
import org<span class="hljs-preprocessor">.apache</span><span class="hljs-preprocessor">.thrift</span><span class="hljs-preprocessor">.protocol</span><span class="hljs-preprocessor">.TBinaryProtocol</span><span class="hljs-comment">;</span>
import org<span class="hljs-preprocessor">.apache</span><span class="hljs-preprocessor">.thrift</span><span class="hljs-preprocessor">.protocol</span><span class="hljs-preprocessor">.TProtocol</span><span class="hljs-comment">;</span>
import org<span class="hljs-preprocessor">.apache</span><span class="hljs-preprocessor">.thrift</span><span class="hljs-preprocessor">.transport</span><span class="hljs-preprocessor">.TSocket</span><span class="hljs-comment">;</span>
import org<span class="hljs-preprocessor">.junit</span><span class="hljs-preprocessor">.Test</span><span class="hljs-comment">;</span>

public class TestThrift {
    @Test
    public void testThrift() throws Exception{

        //创建socket连接
        TSocket socket = new TSocket(<span class="hljs-string">"192.168.131.111"</span>,<span class="hljs-number">10000</span>)<span class="hljs-comment">;</span>
        TProtocol prot = new TBinaryProtocol(socket)<span class="hljs-comment">;</span>

        //创建HiveClient
        HiveClient client = new HiveClient(prot)<span class="hljs-comment">;</span>

        //打开socket通信
        socket<span class="hljs-preprocessor">.open</span>()<span class="hljs-comment">;</span>

        //执行HQL语句
        //client<span class="hljs-preprocessor">.execute</span>(<span class="hljs-string">"desc emp"</span>)<span class="hljs-comment">;</span>
        client<span class="hljs-preprocessor">.execute</span>(<span class="hljs-string">"select * from emp where deptno=10"</span>)<span class="hljs-comment">;</span>

        //取出返回的结果
        List&lt;String&gt; list = client<span class="hljs-preprocessor">.fetchAll</span>()<span class="hljs-comment">;</span>

        //结果集以行为单位   被封装进List
        for (String string : list) {
            System<span class="hljs-preprocessor">.out</span><span class="hljs-preprocessor">.println</span>(string)<span class="hljs-comment">;</span>
        }
        socket<span class="hljs-preprocessor">.close</span>()<span class="hljs-comment">;</span>
    }
}</code></pre>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>