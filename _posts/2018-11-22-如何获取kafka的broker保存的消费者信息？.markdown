---
layout:     post
title:      如何获取kafka的broker保存的消费者信息？
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/rlnLo2pNEfx9c/article/details/82836941				</div>
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
    <div class="rich_media_content" id="js_content">
                    

                    

                    
                    
                    <p style="margin-left:.5em;">kafka的消费者对于kafka 082版本，有<br></p><p style="margin-left:.5em;">高阶API (例子：https://cwiki.apache.org/confluence/display/KAFKA/Consumer+Group+Example)</p><p style="margin-left:.5em;">和</p><p style="margin-left:.5em;">低阶API (例子：https://cwiki.apache.org/confluence/display/KAFKA/0.8.0+SimpleConsumer+Example)</p><p style="margin-left:.5em;">之分。</p><p style="margin-left:.5em;"><br></p><p style="margin-left:.5em;">两者的细节，可以对比上面链接的例子。</p><p style="margin-left:.5em;"><br></p><p style="margin-left:.5em;">高阶API消费者会有一个后台线程单独负责按照<span style="font-family:Roboto, sans-serif;font-size:15px;">auto.commit.enable=true;</span></p><p style="margin-left:.5em;">auto.commit.interval.ms={时间间隔}周期性提交offset到zk。</p><p style="margin-left:.5em;">zk保存的offset信息如下：</p><p style="text-align:center;margin-left:.5em;"><img src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_png/adI0ApTVBFUebPJ1icNM4cUm29mUNicrRu8EFkO8HzfiaIZLLCwDAAyiccc9qSeobLL3QRbJPYw6bEI3QRNnl9DJQA/640" alt="640"></p><p style="text-align:left;margin-left:.5em;"><br></p><p style="text-align:left;margin-left:.5em;">kafka010的版本,例子链接：</p><p style="text-align:left;margin-left:.5em;">http://kafka.apache.org/0102/javadoc/index.html?org/apache/kafka/clients/consumer/KafkaConsumer.html</p><p style="text-align:left;margin-left:.5em;">consumers在zookeeper上的信息已经没有：</p><p style="text-align:left;margin-left:.5em;"><br></p><p style="text-align:center;margin-left:.5em;"><img src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_png/adI0ApTVBFUebPJ1icNM4cUm29mUNicrRuXV8UVMhFP89jW042cJNyUQGM32mVEPREgYtNibULRZ3jJYt9yUjPerQ/640" alt="640"></p><p style="text-align:left;margin-left:.5em;">消费者的组和offset信息提交到broker的topic上了，topic名字__consumer_offsets。</p><p style="text-align:left;margin-left:.5em;">kafka 010的__consumer_offsets topic的schema信息：</p><pre style="background:none;"><code style="font-size:.85em;background:rgb(40,44,52);color:rgb(171,178,191);" class="hljs-default">val OFFSET_COMMIT_VALUE_SCHEMA_V1 = <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:22px;font-weight:400;font-style:normal;">new</span> Schema(<span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:22px;font-weight:400;font-style:normal;">new</span> Field(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:57px;font-weight:400;font-style:normal;">"offset"</span>, INT64),<br>    <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:21px;font-weight:400;font-style:normal;">new</span> Field(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:72px;font-weight:400;font-style:normal;">"metadata"</span>, STRING, <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:159px;font-weight:400;font-style:normal;">"Associated metadata."</span>, <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:14px;font-weight:400;font-style:normal;">""</span>),<br>    <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:21px;font-weight:400;font-style:normal;">new</span> Field(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:130px;font-weight:400;font-style:normal;">"commit_timestamp"</span>, INT64),<br>    <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:21px;font-weight:400;font-style:normal;">new</span> Field(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:130px;font-weight:400;font-style:normal;">"expire_timestamp"</span>, INT64))</code></pre><p style="text-align:left;margin-left:.5em;">topic具体数据如下：<br></p><pre style="background:none;"><code style="font-size:.85em;background:rgb(40,44,52);color:rgb(171,178,191);" class="hljs-default">(test1,test,0)<br><span class="hljs-default-selector-attr" style="color:rgb(209,154,102);background:rgba(0,0,0,0);width:245px;font-weight:400;font-style:normal;">[OffsetMetadata[26231,NO_METADATA]</span>,CommitTime 1537587480006,ExpirationTime 1537673880006]</code></pre><p style="text-align:left;margin-left:.5em;"><br></p><p style="text-align:left;margin-left:.5em;">获取消费者offset的信息主要是为了监控kafka消费者消费的lag 进而把控消费者的处理情况，本文主要是帮助大家获取kafka-0.10.+版本的消费者已经提交的offset信息，然后后面会再出文章去帮助大家获取broker上指定topic分区的最大offset。</p><p style="text-align:left;margin-left:.5em;"><br></p><p style="text-align:left;margin-left:.5em;">主函数完整代码。</p><pre style="background:none;"><code style="font-size:.85em;background:rgb(40,44,52);color:rgb(171,178,191);" class="hljs-default">package bigdata.spark.kafka<br><br>import java.nio.ByteBuffer<br>import java.util.Properties<br>import java.util.concurrent.TimeUnit<br><br>import kafka.common.{KafkaException, OffsetAndMetadata}<br>import org.apache.kafka.clients.consumer.{Consumer, ConsumerRecords, KafkaConsumer}<br>import org.apache.kafka.common.TopicPartition<br>import bigdata.spark.kafka.GroupMetadataManager._<br>import <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:22px;font-weight:400;font-style:normal;">com</span>.github.benmanes.caffeine.cache.{Cache, Caffeine, RemovalCause, RemovalListener}<br><br>object monitor {<br>  def createKafkaConsumer(): Consumer[Array[Byte], Array[Byte]] = {<br>    val prop<span class="hljs-default-variable" style="color:rgb(209,154,102);background:rgba(0,0,0,0);width:15px;font-weight:400;font-style:normal;">s:</span> Properties = <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:22px;font-weight:400;font-style:normal;">new</span> Properties()<br>    props.<span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:22px;font-weight:400;font-style:normal;">put</span>(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:137px;font-weight:400;font-style:normal;">"bootstrap.servers"</span>, <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:137px;font-weight:400;font-style:normal;">"mt-mdh.local:9093"</span>)<br>    props.<span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:22px;font-weight:400;font-style:normal;">put</span>(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:72px;font-weight:400;font-style:normal;">"group.id"</span>, <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:50px;font-weight:400;font-style:normal;">"test2"</span>)<br>    props.<span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:22px;font-weight:400;font-style:normal;">put</span>(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:144px;font-weight:400;font-style:normal;">"enable.auto.commit"</span>, <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:50px;font-weight:400;font-style:normal;">"false"</span>)<br>    props.<span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:22px;font-weight:400;font-style:normal;">put</span>(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:137px;font-weight:400;font-style:normal;">"auto.offset.reset"</span>, <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:72px;font-weight:400;font-style:normal;">"earliest"</span>)<br>    props.<span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:22px;font-weight:400;font-style:normal;">put</span>(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:130px;font-weight:400;font-style:normal;">"key.deserializer"</span>, <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:441px;font-weight:400;font-style:normal;">"org.apache.kafka.common.serialization.ByteArrayDeserializer"</span>)<br>    props.<span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:22px;font-weight:400;font-style:normal;">put</span>(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:144px;font-weight:400;font-style:normal;">"value.deserializer"</span>, <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:441px;font-weight:400;font-style:normal;">"org.apache.kafka.common.serialization.ByteArrayDeserializer"</span>)<br>    <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:21px;font-weight:400;font-style:normal;">new</span> KafkaConsumer[Array[Byte], Array[Byte]](props)<br>  }<br>  def readMessageKey(<span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">buffer</span>: ByteBuffer): BaseKey = {<br>    val <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:50px;font-weight:400;font-style:normal;">version</span> = <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">buffer</span>.getShort<br>    val keySchema = schemaForKey(<span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:51px;font-weight:400;font-style:normal;">version</span>)<br>    val key = keySchema.<span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:29px;font-weight:400;font-style:normal;">read</span>(<span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">buffer</span>)<br>//<br>    <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:14px;font-weight:400;font-style:normal;">if</span> (<span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:50px;font-weight:400;font-style:normal;">version</span> &lt;= CURRENT_OFFSET_KEY_SCHEMA_VERSION) {<br>      // <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:50px;font-weight:400;font-style:normal;">version</span> <span class="hljs-default-number" style="color:rgb(209,154,102);background:rgba(0,0,0,0);width:7px;font-weight:400;font-style:normal;">0</span> <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:22px;font-weight:400;font-style:normal;">and</span> <span class="hljs-default-number" style="color:rgb(209,154,102);background:rgba(0,0,0,0);width:7px;font-weight:400;font-style:normal;">1</span> refer <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:14px;font-weight:400;font-style:normal;">to</span> offset<br>      val group = key.<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:21px;font-weight:400;font-style:normal;">get</span>(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:50px;font-weight:400;font-style:normal;">"group"</span>).asInstanceOf[String]<br>      val topic = key.<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:21px;font-weight:400;font-style:normal;">get</span>(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:50px;font-weight:400;font-style:normal;">"topic"</span>).asInstanceOf[String]<br>      val partition = key.<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:21px;font-weight:400;font-style:normal;">get</span>(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:79px;font-weight:400;font-style:normal;">"partition"</span>).asInstanceOf[Int]<br><br>      OffsetKey(<span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:51px;font-weight:400;font-style:normal;">version</span>, GroupTopicPartition(group, <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:22px;font-weight:400;font-style:normal;">new</span> TopicPartition(topic, partition)))<br>    }<span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:29px;font-weight:400;font-style:normal;">else</span> <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:14px;font-weight:400;font-style:normal;">if</span> (<span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:50px;font-weight:400;font-style:normal;">version</span> == CURRENT_GROUP_KEY_SCHEMA_VERSION) {<br>      // <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:50px;font-weight:400;font-style:normal;">version</span> <span class="hljs-default-number" style="color:rgb(209,154,102);background:rgba(0,0,0,0);width:7px;font-weight:400;font-style:normal;">2</span> refers <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:14px;font-weight:400;font-style:normal;">to</span> offset<br>      val group = key.<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:21px;font-weight:400;font-style:normal;">get</span>(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:50px;font-weight:400;font-style:normal;">"group"</span>).asInstanceOf[String]<br><br>      GroupMetadataKey(<span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:51px;font-weight:400;font-style:normal;">version</span>, group)<br>    } <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:29px;font-weight:400;font-style:normal;">else</span> {<br>      <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:36px;font-weight:400;font-style:normal;">throw</span> <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:22px;font-weight:400;font-style:normal;">new</span> IllegalStateException(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:130px;font-weight:400;font-style:normal;">"Unknown version "</span> + <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:51px;font-weight:400;font-style:normal;">version</span> + <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:210px;font-weight:400;font-style:normal;">" for group metadata message"</span>)<br>    }<br>  }<br>  def readOffsetMessageValue(<span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">buffer</span>: ByteBuffer): OffsetAndMetadata = {<br>    <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:14px;font-weight:400;font-style:normal;">if</span> (<span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">buffer</span> == null) { // tombstone<br>      null<br>    } <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:29px;font-weight:400;font-style:normal;">else</span> {<br>      val <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:51px;font-weight:400;font-style:normal;">version</span> = <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">buffer</span>.getShort<br>      val valueSchema = schemaForOffset(<span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:50px;font-weight:400;font-style:normal;">version</span>)<br>      val value = valueSchema.<span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:28px;font-weight:400;font-style:normal;">read</span>(<span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">buffer</span>)<br><br>      <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:15px;font-weight:400;font-style:normal;">if</span> (<span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:51px;font-weight:400;font-style:normal;">version</span> == <span class="hljs-default-number" style="color:rgb(209,154,102);background:rgba(0,0,0,0);width:8px;font-weight:400;font-style:normal;">0</span>) {<br>        val offset = value.<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:22px;font-weight:400;font-style:normal;">get</span>(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:58px;font-weight:400;font-style:normal;">"offset"</span>).asInstanceOf[Long]<br>        val metadata = value.<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:22px;font-weight:400;font-style:normal;">get</span>(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:72px;font-weight:400;font-style:normal;">"metadata"</span>).asInstanceOf[String]<br>        val timestamp = value.<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:21px;font-weight:400;font-style:normal;">get</span>(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:80px;font-weight:400;font-style:normal;">"timestamp"</span>).asInstanceOf[Long]<br><br>        OffsetAndMetadata(offset, metadata, timestamp)<br>      } <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:28px;font-weight:400;font-style:normal;">else</span> <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:14px;font-weight:400;font-style:normal;">if</span> (<span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:50px;font-weight:400;font-style:normal;">version</span> == <span class="hljs-default-number" style="color:rgb(209,154,102);background:rgba(0,0,0,0);width:7px;font-weight:400;font-style:normal;">1</span>) {<br>        val offset = value.<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:22px;font-weight:400;font-style:normal;">get</span>(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:58px;font-weight:400;font-style:normal;">"offset"</span>).asInstanceOf[Long]<br>        val metadata = value.<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:22px;font-weight:400;font-style:normal;">get</span>(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:72px;font-weight:400;font-style:normal;">"metadata"</span>).asInstanceOf[String]<br>        val commitTimestamp = value.<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:22px;font-weight:400;font-style:normal;">get</span>(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:130px;font-weight:400;font-style:normal;">"commit_timestamp"</span>).asInstanceOf[Long]<br>        val expireTimestamp = value.<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:22px;font-weight:400;font-style:normal;">get</span>(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:130px;font-weight:400;font-style:normal;">"expire_timestamp"</span>).asInstanceOf[Long]<br><br>        OffsetAndMetadata(offset, metadata, commitTimestamp, expireTimestamp)<br>      } <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:28px;font-weight:400;font-style:normal;">else</span> {<br>        <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:36px;font-weight:400;font-style:normal;">throw</span> <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:22px;font-weight:400;font-style:normal;">new</span> IllegalStateException(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:231px;font-weight:400;font-style:normal;">"Unknown offset message version"</span>)<br>      }<br>    }<br>  }<br>// 主要类是 kafkaStateActor<br>  def main(arg<span class="hljs-default-variable" style="color:rgb(209,154,102);background:rgba(0,0,0,0);width:14px;font-weight:400;font-style:normal;">s:</span> Array[String]): Unit = {<br>    val groupTopicPartitionOffsetMap:Cache[(String, String, Int), OffsetAndMetadata] = Caffeine<br>      .newBuilder()<br>      .maximumSize(<span class="hljs-default-number" style="color:rgb(209,154,102);background:rgba(0,0,0,0);width:29px;font-weight:400;font-style:normal;">1025</span>)<br>      .expireAfterAccess(<span class="hljs-default-number" style="color:rgb(209,154,102);background:rgba(0,0,0,0);width:15px;font-weight:400;font-style:normal;">10</span>, TimeUnit.DAYS)<br>      //    .removalListener(<span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:22px;font-weight:400;font-style:normal;">new</span> RemovalListener[(String, String, Int), OffsetAndMetadata] {<br>      //      override def onRemoval(key: (String, String, Int), value: OffsetAndMetadata, cause: RemovalCause): Unit = {<br>      //        println(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:72px;font-weight:400;font-style:normal;">"remove !"</span>)<br>      //      }<br>      //    })<br>      .build[(String, String, Int), OffsetAndMetadata]()<br>    val consumer = createKafkaConsumer()<br>    consumer.subscribe(java.util.Arrays.asList(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:145px;font-weight:400;font-style:normal;">"__consumer_offsets"</span>))<br>    <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:36px;font-weight:400;font-style:normal;">while</span> (true){<br>      val record<span class="hljs-default-variable" style="color:rgb(209,154,102);background:rgba(0,0,0,0);width:15px;font-weight:400;font-style:normal;">s:</span> ConsumerRecords[Array[Byte], Array[Byte]] = consumer.poll(<span class="hljs-default-number" style="color:rgb(209,154,102);background:rgba(0,0,0,0);width:22px;font-weight:400;font-style:normal;">100</span>)<br>      val iterator = records.iterator()<br>      <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:36px;font-weight:400;font-style:normal;">while</span> (iterator.hasNext) {<br>        val record = iterator.<span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:28px;font-weight:400;font-style:normal;">next</span>()<br>        readMessageKey(ByteBuffer.wrap(record.key()))<span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:36px;font-weight:400;font-style:normal;">match</span> {<br>          case OffsetKey(<span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:51px;font-weight:400;font-style:normal;">version</span>, key) =&gt;<br>            val orgnal = record.value()<br>            <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:15px;font-weight:400;font-style:normal;">if</span>(orgnal!=null){<br>              val value: OffsetAndMetadata = readOffsetMessageValue(ByteBuffer.wrap(record.value()))<br>              val newKey = (key.group, key.topicPartition.topic, key.topicPartition.partition)<br>              println(newKey)<br>              println(value)<br>              groupTopicPartitionOffsetMap.<span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:22px;font-weight:400;font-style:normal;">put</span>(newKey, value)<br>            }<br>          case GroupMetadataKey(<span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:51px;font-weight:400;font-style:normal;">version</span>, key) =&gt;<br>            Nil<br>        }<br>      }<br>    }<br>  }<br><br>}</code></pre><p style="text-align:left;margin-left:.5em;"><br></p><p style="text-align:left;margin-left:.5em;">工具类，可以关注公众号，输入 <strong>1025</strong> 获取。</p><p style="text-align:left;margin-left:.5em;"><br></p><p style="text-align:left;margin-left:.5em;">在庆祝中秋佳节之际，星球降价 33 元 ，明天恢复原价 179元。</p><p style="text-align:center;margin-left:.5em;"><img src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_jpg/adI0ApTVBFWEbA0t2WgVoUbCSPAic4uAuwkHOg8iczLJQ4gpogt2Gy2FelL1iaM9jW6IPAtjuB4c3ZmfmNb1vRy2w/640" alt="640"></p>
                </div>
              </div>
                </div>