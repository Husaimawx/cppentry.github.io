---
layout:     post
title:      Hadoop入门专家引导
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                Hadoop你是否了解，本文就像大家简单Hadoop入门知识，希望正在学习Hadoop以及对学习Hadoop感兴趣的朋友们一起来关注。<br>AD：<br>本节和大家介绍一下Hadoop入门，主要内容是Hadoop概论，Hadoop的基本概念等内容，希望通过本节的介绍，大家对Hadoop有初步的认识。下面是具体介绍。<br><br>Hadoop入门<br><br>Hadoop是GoogleMapReduce的一个Java实现。MapReduce是一种简化的分布式编程模式，让程序自动分布到一个由普通机器组成的超大集群上并发执行。就如同java程序员可以不考虑内存泄露一样，MapReduce的run-time系统会解决输入数据的分布细节，跨越机器集群的程序执行调度，处理机器的失效，并且管理机器之间的通讯请求。这样的模式允许程序员可以不需要有什么并发处理或者分布式系统的经验，就可以处理超大的分布式系统得资源。<br><br>一、概论<br>作为Hadoop程序员，他要做的事情就是：<br>1、定义Mapper，处理输入的Key-Value对，输出中间结果。<br>2、定义Reducer，可选，对中间结果进行规约，输出最终结果。<br>3、定义InputFormat和OutputFormat，可选，InputFormat将每行输入文件的内容转换为Java类供Mapper函数使用，不定义时默认为String。<br>4、定义main函数，在里面定义一个Job并运行它。<br>然后的事情就交给系统了。Hadoop入门首先要了解一下基本概念。<br><br>1.基本概念：Hadoop的HDFS实现了google的GFS文件系统，NameNode作为文件系统的负责调度运行在master，DataNode运行在每个机器上。同时Hadoop实现了Google的MapReduce，JobTracker作为MapReduce的总调度运行在master，TaskTracker则运行在每个机器上执行Task。<br><br>2.main()函数，创建JobConf，定义Mapper，Reducer，Input/OutputFormat和输入输出文件目录，最后把Job提交給JobTracker，等待Job结束。<br><br>3.JobTracker，创建一个InputFormat的实例，调用它的getSplits()方法，把输入目录的文件拆分成FileSplist作为Mappertask的输入，生成Mappertask加入Queue。<br><br>4.TaskTracker向JobTracker索求下一个Map/Reduce。<br><br>MapperTask先从InputFormat创建RecordReader，循环读入FileSplits的内容生成Key与Value，传给Mapper函数，处理完后中间结果写成SequenceFile.<br>ReducerTask从运行Mapper的TaskTracker的Jetty上使用http协议获取所需的中间内容（33%），Sort/Merge后（66%），执行Reducer函数，最后按照OutputFormat写入结果目录。<br>TaskTracker每10秒向JobTracker报告一次运行情况，每完成一个Task10秒后，就会向JobTracker索求下一个Task。<br>Nutch项目的全部数据处理都构建在Hadoop之上，详见ScalableComputingwithHadoop。下面我们再来看一下Hadoop入门介绍中程序员编写的代码。<br><br>二、程序员编写的代码<br>我们做一个简单的分布式的Grep，简单对输入文件进行逐行的正则匹配，如果符合就将该行打印到输出文件。因为是简单的全部输出，所以我们只要写Mapper函数，不用写Reducer函数，也不用定义Input/OutputFormat。<br><br><br>packagedemo.hadoop  <br>publicclassHadoopGrep{  <br>publicstaticclassRegMapperextendsMapReduceBaseimplementsMapper{  <br>privatePatternpattern;  <br>publicvoidconfigure(JobConfjob){  <br>pattern=Pattern.compile(job.get("mapred.mapper.regex"));  <br>}  <br><br>publicvoidmap(WritableComparablekey,Writablevalue,OutputCollectoroutput,Reporterreporter)  <br>throwsIOException{  <br>Stringtext=((Text)value).toString();  <br>Matchermatcher=pattern.matcher(text);  <br>if(matcher.find()){  <br>output.collect(key,value);  <br>}}  <br>}  <br>privateHadoopGrep(){  <br>}//singleton  <br><br>publicstaticvoidmain(String[]args)throwsException{  <br>JobConfgrepJob=newJobConf(HadoopGrep.class);  <br>grepJob.setJobName("grep-search");  <br>grepJob.set("mapred.mapper.regex",args[2]);  <br>grepJob.setInputPath(newPath(args[0]));  <br>grepJob.setOutputPath(newPath(args[1]));  <br>grepJob.setMapperClass(RegMapper.class);  <br>grepJob.setReducerClass(IdentityReducer.class);  <br>JobClient.runJob(grepJob);  <br>}  <br>} <br>RegMapper类的configure()函数接受由main函数传入的查找字符串，map()函数进行正则匹配，key是行数，value是文件行的内容，符合的文件行放入中间结果。<br>main()函数定义由命令行参数传入的输入输出目录和匹配字符串，Mapper函数为RegMapper类，Reduce函数是什么都不做，直接把中间结果输出到最终结果的的IdentityReducer类，运行Job。整个代码非常简单，丝毫没有分布式编程的任何细节。请期待下节关于Hadoop入门介绍。            </div>
                </div>