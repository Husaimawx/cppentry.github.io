---
layout:     post
title:      HDFS的基本概念
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<div id="cnblogs_post_body">
<h2>转载：http://www.cnblogs.com/forfuture1978/archive/2010/03/14/1685351.html<br></h2>
<h2><br></h2>
<h2><strong>HDFS的基本概念</strong></h2>
<h3><strong>1.1、数据块(block)</strong></h3>
<ul><li>HDFS(Hadoop Distributed File System)默认的最基本的存储单位是64M的数据块。 </li><li>和普通文件系统相同的是，HDFS中的文件是被分成64M一块的数据块存储的。 </li><li>不同于普通文件系统的是，HDFS中，如果一个文件小于一个数据块的大小，并不占用整个数据块存储空间。</li></ul><h3><strong>1.2、元数据节点(Namenode)和数据节点(datanode)</strong></h3>
<ul><li>元数据节点用来管理文件系统的命名空间
<ul><li>其将所有的文件和文件夹的元数据保存在一个文件系统树中。 </li><li>这些信息也会在硬盘上保存成以下文件：命名空间镜像(namespace image)及修改日志(edit log) </li><li>其还保存了一个文件包括哪些数据块，分布在哪些数据节点上。然而这些信息并不存储在硬盘上，而是在系统启动的时候从数据节点收集而成的。</li></ul></li><li>数据节点是文件系统中真正存储数据的地方。
<ul><li>客户端(client)或者元数据信息(namenode)可以向数据节点请求写入或者读出数据块。 </li><li>其周期性的向元数据节点回报其存储的数据块信息。</li></ul></li><li>从元数据节点(secondary namenode)
<ul><li>从元数据节点并不是元数据节点出现问题时候的备用节点，它和元数据节点负责不同的事情。 </li><li>其主要功能就是周期性将元数据节点的命名空间镜像文件和修改日志合并，以防日志文件过大。这点在下面会相信叙述。 </li><li>合并过后的命名空间镜像文件也在从元数据节点保存了一份，以防元数据节点失败的时候，可以恢复。</li></ul></li></ul><h4><strong>1.2.1、元数据节点文件夹结构</strong></h4>
<p><a href="http://images.cnblogs.com/cnblogs_com/forfuture1978/WindowsLiveWriter/Hadoop_10C71/image_2.png" rel="nofollow"><img title="image" alt="image" src="http://images.cnblogs.com/cnblogs_com/forfuture1978/WindowsLiveWriter/Hadoop_10C71/image_thumb.png" border="0" height="82" width="227" style="border-right:0px;border-top:0px;display:inline;border-left:0px;border-bottom:0px;"></a>
</p>
<ul><li>VERSION文件是java properties文件，保存了HDFS的版本号。
<ul><li>layoutVersion是一个负整数，保存了HDFS的持续化在硬盘上的数据结构的格式版本号。 </li><li>namespaceID是文件系统的唯一标识符，是在文件系统初次格式化时生成的。 </li><li>cTime此处为0 </li><li>storageType表示此文件夹中保存的是元数据节点的数据结构。</li></ul></li></ul><table border="1" cellpadding="2" cellspacing="0" width="400"><tbody><tr><td valign="top" width="400">
<p>namespaceID=1232737062</p>
<p>cTime=0</p>
<p>storageType=NAME_NODE</p>
<p>layoutVersion=-18</p>
</td>
</tr></tbody></table><h4><strong>1.2.2、文件系统命名空间映像文件及修改日志</strong></h4>
<ul><li>当文件系统客户端(client)进行写操作时，首先把它记录在修改日志中(edit log) </li><li>元数据节点在内存中保存了文件系统的元数据信息。在记录了修改日志后，元数据节点则修改内存中的数据结构。 </li><li>每次的写操作成功之前，修改日志都会同步(sync)到文件系统。 </li><li>fsimage文件，也即命名空间映像文件，是内存中的元数据在硬盘上的checkpoint，它是一种序列化的格式，并不能够在硬盘上直接修改。 </li><li>同数据的机制相似，当元数据节点失败时，则最新checkpoint的元数据信息从fsimage加载到内存中，然后逐一重新执行修改日志中的操作。 </li><li>从元数据节点就是用来帮助元数据节点将内存中的元数据信息checkpoint到硬盘上的 </li><li>checkpoint的过程如下：
<ul><li>从元数据节点通知元数据节点生成新的日志文件，以后的日志都写到新的日志文件中。 </li><li>从元数据节点用http get从元数据节点获得fsimage文件及旧的日志文件。 </li><li>从元数据节点将fsimage文件加载到内存中，并执行日志文件中的操作，然后生成新的fsimage文件。 </li><li>从元数据节点奖新的fsimage文件用http post传回元数据节点 </li><li>元数据节点可以将旧的fsimage文件及旧的日志文件，换为新的fsimage文件和新的日志文件(第一步生成的)，然后更新fstime文件，写入此次checkpoint的时间。
</li><li>这样元数据节点中的fsimage文件保存了最新的checkpoint的元数据信息，日志文件也重新开始，不会变的很大了。</li></ul></li></ul><p><a href="http://images.cnblogs.com/cnblogs_com/forfuture1978/WindowsLiveWriter/Hadoop_10C71/hadoop01_2.jpg" rel="nofollow"><img title="hadoop01" alt="hadoop01" src="http://images.cnblogs.com/cnblogs_com/forfuture1978/WindowsLiveWriter/Hadoop_10C71/hadoop01_thumb.jpg" border="0" height="473" width="644" style="border-right:0px;border-top:0px;display:inline;border-left:0px;border-bottom:0px;"></a>
</p>
<h4><strong>1.2.3、从元数据节点的目录结构</strong></h4>
<p><a href="http://images.cnblogs.com/cnblogs_com/forfuture1978/WindowsLiveWriter/Hadoop_10C71/image_4.png" rel="nofollow"><img title="image" alt="image" src="http://images.cnblogs.com/cnblogs_com/forfuture1978/WindowsLiveWriter/Hadoop_10C71/image_thumb_1.png" border="0" height="161" width="378" style="border-right:0px;border-top:0px;display:inline;border-left:0px;border-bottom:0px;"></a>
</p>
<h4><strong>1.2.4、数据节点的目录结构</strong></h4>
<p><a href="http://images.cnblogs.com/cnblogs_com/forfuture1978/WindowsLiveWriter/Hadoop_10C71/image_6.png" rel="nofollow"><img title="image" alt="image" src="http://images.cnblogs.com/cnblogs_com/forfuture1978/WindowsLiveWriter/Hadoop_10C71/image_thumb_2.png" border="0" height="224" width="310" style="border-right:0px;border-top:0px;display:inline;border-left:0px;border-bottom:0px;"></a>
</p>
<ul><li>数据节点的VERSION文件格式如下：</li></ul><table border="1" cellpadding="2" cellspacing="0" width="400"><tbody><tr><td valign="top" width="400">
<p>namespaceID=1232737062</p>
<p>storageID=DS-1640411682-127.0.1.1-50010-1254997319480</p>
<p>cTime=0</p>
<p>storageType=DATA_NODE</p>
<p>layoutVersion=-18</p>
</td>
</tr></tbody></table><ul><li>blk_&lt;id&gt;保存的是HDFS的数据块，其中保存了具体的二进制数据。 </li><li>blk_&lt;id&gt;.meta保存的是数据块的属性信息：版本信息，类型信息，和checksum </li><li>当一个目录中的数据块到达一定数量的时候，则创建子文件夹来保存数据块及数据块属性信息。</li></ul><h2><strong>二、数据流(data flow)</strong></h2>
<h3><strong>2.1、读文件的过程</strong></h3>
<ul><li>客户端(client)用FileSystem的open()函数打开文件 </li><li>DistributedFileSystem用RPC调用元数据节点，得到文件的数据块信息。 </li><li>对于每一个数据块，元数据节点返回保存数据块的数据节点的地址。 </li><li>DistributedFileSystem返回FSDataInputStream给客户端，用来读取数据。 </li><li>客户端调用stream的read()函数开始读取数据。 </li><li>DFSInputStream连接保存此文件第一个数据块的最近的数据节点。 </li><li>Data从数据节点读到客户端(client) </li><li>当此数据块读取完毕时，DFSInputStream关闭和此数据节点的连接，然后连接此文件下一个数据块的最近的数据节点。 </li><li>当客户端读取完毕数据的时候，调用FSDataInputStream的close函数。 </li><li>在读取数据的过程中，如果客户端在与数据节点通信出现错误，则尝试连接包含此数据块的下一个数据节点。 </li><li>失败的数据节点将被记录，以后不再连接。</li></ul><p><a href="http://images.cnblogs.com/cnblogs_com/forfuture1978/WindowsLiveWriter/Hadoop_10C71/image_8.png" rel="nofollow"><img title="image" alt="image" src="http://images.cnblogs.com/cnblogs_com/forfuture1978/WindowsLiveWriter/Hadoop_10C71/image_thumb_3.png" border="0" height="342" width="561" style="border-right:0px;border-top:0px;display:inline;border-left:0px;border-bottom:0px;"></a>
</p>
<h3><strong>2.2、写文件的过程</strong></h3>
<ul><li>客户端调用create()来创建文件 </li><li>DistributedFileSystem用RPC调用元数据节点，在文件系统的命名空间中创建一个新的文件。 </li><li>元数据节点首先确定文件原来不存在，并且客户端有创建文件的权限，然后创建新文件。 </li><li>DistributedFileSystem返回DFSOutputStream，客户端用于写数据。 </li><li>客户端开始写入数据，DFSOutputStream将数据分成块，写入data queue。 </li><li>Data queue由Data Streamer读取，并通知元数据节点分配数据节点，用来存储数据块(每块默认复制3块)。分配的数据节点放在一个pipeline里。
</li><li>Data Streamer将数据块写入pipeline中的第一个数据节点。第一个数据节点将数据块发送给第二个数据节点。第二个数据节点将数据发送给第三个数据节点。
</li><li>DFSOutputStream为发出去的数据块保存了ack queue，等待pipeline中的数据节点告知数据已经写入成功。 </li><li>如果数据节点在写入的过程中失败：
<ul><li>关闭pipeline，将ack queue中的数据块放入data queue的开始。 </li><li>当前的数据块在已经写入的数据节点中被元数据节点赋予新的标示，则错误节点重启后能够察觉其数据块是过时的，会被删除。 </li><li>失败的数据节点从pipeline中移除，另外的数据块则写入pipeline中的另外两个数据节点。 </li><li>元数据节点则被通知此数据块是复制块数不足，将来会再创建第三份备份。</li></ul></li><li>当客户端结束写入数据，则调用stream的close函数。此操作将所有的数据块写入pipeline中的数据节点，并等待ack queue返回成功。最后通知元数据节点写入完毕。</li></ul><p><a href="http://images.cnblogs.com/cnblogs_com/forfuture1978/WindowsLiveWriter/Hadoop_10C71/image_10.png" rel="nofollow"><img title="image" alt="image" src="http://images.cnblogs.com/cnblogs_com/forfuture1978/WindowsLiveWriter/Hadoop_10C71/image_thumb_4.png" border="0" height="345" width="561" style="border-right:0px;border-top:0px;display:inline;border-left:0px;border-bottom:0px;"></a></p>
</div>
<br>            </div>
                </div>