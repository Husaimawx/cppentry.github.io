---
layout:     post
title:      Hadoop示例程序WordCount详解及实例
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<h2 style="color:rgb(51,51,51);">1.图解MapReduce</h2>
<p style="color:rgb(51,51,51);"><img src="http://hi.csdn.net/attachment/201101/4/0_12941441301s90.gif" alt=""></p>
<p style="color:rgb(51,51,51);"> </p>
<p style="color:rgb(51,51,51);"><img src="http://hi.csdn.net/attachment/201101/4/0_12941441348CAe.gif" alt=""></p>
<p style="color:rgb(51,51,51);"> </p>
<p style="color:rgb(51,51,51);"><img src="http://hi.csdn.net/attachment/201101/4/0_129414413795ZO.gif" alt=""></p>
<p style="color:rgb(51,51,51);"> </p>
<p style="color:rgb(51,51,51);"><img src="http://hi.csdn.net/attachment/201101/4/0_1294144140gAGH.gif" alt=""></p>
<h2 style="color:rgb(51,51,51);"><a name="t1" style="color:rgb(51,102,153);"></a>2.简历过程：</h2>
<p style="color:rgb(51,51,51);"><strong>Input:</strong></p>
<p style="color:rgb(51,51,51);">Hello World Bye World</p>
<p style="color:rgb(51,51,51);">Hello Hadoop Bye Hadoop</p>
<p style="color:rgb(51,51,51);">Bye Hadoop Hello Hadoop</p>
<p style="color:rgb(51,51,51);"><strong>Map:</strong></p>
<p style="color:rgb(51,51,51);">&lt;Hello,1&gt;</p>
<p style="color:rgb(51,51,51);">&lt;World,1&gt;</p>
<p style="color:rgb(51,51,51);">&lt;Bye,1&gt;</p>
<p style="color:rgb(51,51,51);">&lt;World,1&gt;</p>
<p style="color:rgb(51,51,51);">&lt;Hello,1&gt;</p>
<p style="color:rgb(51,51,51);">&lt;Hadoop,1&gt;</p>
<p style="color:rgb(51,51,51);">&lt;Bye,1&gt;</p>
<p style="color:rgb(51,51,51);">&lt;Hadoop,1&gt;</p>
<p style="color:rgb(51,51,51);">&lt;Bye,1&gt;</p>
<p style="color:rgb(51,51,51);">&lt;Hadoop,1&gt;</p>
<p style="color:rgb(51,51,51);">&lt;Hello,1&gt;</p>
<p style="color:rgb(51,51,51);">&lt;Hadoop,1&gt;</p>
<p style="color:rgb(51,51,51);"><strong>Sort:</strong></p>
<p style="color:rgb(51,51,51);">&lt;Bye,1&gt;</p>
<p style="color:rgb(51,51,51);">&lt;Bye,1&gt;</p>
<p style="color:rgb(51,51,51);">&lt;Bye,1&gt;</p>
<p style="color:rgb(51,51,51);">&lt;Hadoop,1&gt;</p>
<p style="color:rgb(51,51,51);">&lt;Hadoop,1&gt;</p>
<p style="color:rgb(51,51,51);">&lt;Hadoop,1&gt;</p>
<p style="color:rgb(51,51,51);">&lt;Hadoop,1&gt;</p>
<p style="color:rgb(51,51,51);">&lt;Hello,1&gt;</p>
<p style="color:rgb(51,51,51);">&lt;Hello,1&gt;</p>
<p style="color:rgb(51,51,51);">&lt;Hello,1&gt;</p>
<p style="color:rgb(51,51,51);">&lt;World,1&gt;</p>
<p style="color:rgb(51,51,51);">&lt;World,1&gt;</p>
<p style="color:rgb(51,51,51);"><strong>Combine:</strong></p>
<p style="color:rgb(51,51,51);">&lt;Bye,1,1,1&gt;</p>
<p style="color:rgb(51,51,51);">&lt;Hadoop,1,1,1,1&gt;</p>
<p style="color:rgb(51,51,51);">&lt;Hello,1,1,1&gt;</p>
<p style="color:rgb(51,51,51);">&lt;World,1,1&gt;</p>
<p style="color:rgb(51,51,51);"><strong>Reduce:</strong></p>
<p style="color:rgb(51,51,51);">&lt;Bye,3&gt;</p>
<p style="color:rgb(51,51,51);">&lt;Hadoop,4&gt;</p>
<p style="color:rgb(51,51,51);">&lt;Hello,3&gt;</p>
<p style="color:rgb(51,51,51);">&lt;World,2&gt;</p>
<h2 style="color:rgb(51,51,51);"><a name="t2" style="color:rgb(51,102,153);"></a>3.代码实例：</h2>
<div>
<div>
<div style="color:#C0C0C0;"><strong>[c-sharp]</strong> <a href="http://blog.csdn.net/xw13106209/article/details/6116323#" rel="nofollow" title="view plain" style="color:rgb(160,160,160);">view plain</a><a href="http://blog.csdn.net/xw13106209/article/details/6116323#" rel="nofollow" title="copy" style="color:rgb(160,160,160);">copy</a></div>
</div>
<ol start="1" style="color:rgb(92,92,92);"><li style="color:inherit;"><span style="color:#000000;">package com.felix;  </span></li><li><span style="color:#000000;">import java.io.IOException;  </span></li><li style="color:inherit;"><span style="color:#000000;">import java.util.Iterator;  </span></li><li><span style="color:#000000;">import java.util.StringTokenizer;  </span></li><li style="color:inherit;"><span style="color:#000000;">import org.apache.hadoop.fs.Path;  </span></li><li><span style="color:#000000;">import org.apache.hadoop.io.IntWritable;  </span></li><li style="color:inherit;"><span style="color:#000000;">import org.apache.hadoop.io.LongWritable;  </span></li><li><span style="color:#000000;">import org.apache.hadoop.io.Text;  </span></li><li style="color:inherit;"><span style="color:#000000;">import org.apache.hadoop.mapred.FileInputFormat;  </span></li><li><span style="color:#000000;">import org.apache.hadoop.mapred.FileOutputFormat;  </span></li><li style="color:inherit;"><span style="color:#000000;">import org.apache.hadoop.mapred.JobClient;  </span></li><li><span style="color:#000000;">import org.apache.hadoop.mapred.JobConf;  </span></li><li style="color:inherit;"><span style="color:#000000;">import org.apache.hadoop.mapred.MapReduceBase;  </span></li><li><span style="color:#000000;">import org.apache.hadoop.mapred.Mapper;  </span></li><li style="color:inherit;"><span style="color:#000000;">import org.apache.hadoop.mapred.OutputCollector;  </span></li><li><span style="color:#000000;">import org.apache.hadoop.mapred.Reducer;  </span></li><li style="color:inherit;"><span style="color:#000000;">import org.apache.hadoop.mapred.Reporter;  </span></li><li><span style="color:#000000;">import org.apache.hadoop.mapred.TextInputFormat;  </span></li><li style="color:inherit;"><span style="color:#000000;">import org.apache.hadoop.mapred.TextOutputFormat;  </span></li><li><span style="color:#000000;"><span style="color:rgb(0,130,0);">/**</span> </span></li><li style="color:inherit;"><span style="color:#000000;"><span style="color:rgb(0,130,0);"> * </span> </span></li><li><span style="color:#000000;"><span style="color:rgb(0,130,0);"> * 描述：WordCount explains by Felix</span> </span></li><li style="color:inherit;"><span style="color:#000000;"><span style="color:rgb(0,130,0);"> * @author Hadoop Dev Group</span> </span></li><li><span style="color:#000000;"><span style="color:rgb(0,130,0);"> */</span>  </span></li><li style="color:inherit;"><span style="color:#000000;"><span style="color:rgb(0,102,153);">public</span> </span><span style="color:rgb(0,102,153);">class</span> WordCount  </li><li><span style="color:#000000;">{  </span></li><li style="color:inherit;"><span style="color:#000000;">    <span style="color:rgb(0,130,0);">/**</span> </span></li><li><span style="color:#000000;"><span style="color:rgb(0,130,0);">     * MapReduceBase类:实现了Mapper和Reducer接口的基类（其中的方法只是实现接口，而未作任何事情）</span> </span></li><li style="color:inherit;"><span style="color:#000000;"><span style="color:rgb(0,130,0);">     * Mapper接口：</span> </span></li><li><span style="color:#000000;"><span style="color:rgb(0,130,0);">     * WritableComparable接口：实现WritableComparable的类可以相互比较。所有被用作key的类应该实现此接口。</span> </span></li><li style="color:inherit;"><span style="color:#000000;"><span style="color:rgb(0,130,0);">     * Reporter 则可用于报告整个应用的运行进度，本例中未使用。 </span> </span></li><li><span style="color:#000000;"><span style="color:rgb(0,130,0);">     * </span> </span></li><li style="color:inherit;"><span style="color:#000000;"><span style="color:rgb(0,130,0);">     */</span>  </span></li><li><span style="color:#000000;">    <span style="color:rgb(0,102,153);">public</span> </span><span style="color:rgb(0,102,153);">static</span> <span style="color:rgb(0,102,153);">class</span> Map extends MapReduceBase implements  </li><li style="color:inherit;"><span style="color:#000000;">            Mapper&lt;LongWritable, Text, Text, IntWritable&gt;  </span></li><li><span style="color:#000000;">    {  </span></li><li style="color:inherit;"><span style="color:#000000;">        <span style="color:rgb(0,130,0);">/**</span> </span></li><li><span style="color:#000000;"><span style="color:rgb(0,130,0);">         * LongWritable, IntWritable, Text 均是 Hadoop 中实现的用于封装 Java 数据类型的类，这些类实现了WritableComparable接口，</span> </span></li><li style="color:inherit;"><span style="color:#000000;"><span style="color:rgb(0,130,0);">         * 都能够被串行化从而便于在分布式环境中进行数据交换，你可以将它们分别视为long,int,String 的替代品。</span> </span></li><li><span style="color:#000000;"><span style="color:rgb(0,130,0);">         */</span>  </span></li><li style="color:inherit;"><span style="color:#000000;">        <span style="color:rgb(0,102,153);">private</span> final </span><span style="color:rgb(0,102,153);">static</span> IntWritable one = <span style="color:rgb(0,102,153);">new</span> IntWritable(1);  </li><li><span style="color:#000000;">        <span style="color:rgb(0,102,153);">private</span> Text word = </span><span style="color:rgb(0,102,153);">new</span> Text();  </li><li style="color:inherit;"><span style="color:#000000;">          </span></li><li><span style="color:#000000;">        <span style="color:rgb(0,130,0);">/**</span> </span></li><li style="color:inherit;"><span style="color:#000000;"><span style="color:rgb(0,130,0);">         * Mapper接口中的map方法：</span> </span></li><li><span style="color:#000000;"><span style="color:rgb(0,130,0);">         * void map(K1 key, V1 value, OutputCollector&lt;K2,V2&gt; output, Reporter reporter)</span> </span></li><li style="color:inherit;"><span style="color:#000000;"><span style="color:rgb(0,130,0);">         * 映射一个单个的输入k/v对到一个中间的k/v对</span> </span></li><li><span style="color:#000000;"><span style="color:rgb(0,130,0);">         * 输出对不需要和输入对是相同的类型，输入对可以映射到0个或多个输出对。</span> </span></li><li style="color:inherit;"><span style="color:#000000;"><span style="color:rgb(0,130,0);">         * OutputCollector接口：收集Mapper和Reducer输出的&lt;k,v&gt;对。</span> </span></li><li><span style="color:#000000;"><span style="color:rgb(0,130,0);">         * OutputCollector接口的collect(k, v)方法:增加一个(k,v)对到output</span> </span></li><li style="color:inherit;"><span style="color:#000000;"><span style="color:rgb(0,130,0);">         */</span>  </span></li><li><span style="color:#000000;">        <span style="color:rgb(0,102,153);">public</span> </span><span style="color:rgb(0,102,153);">void</span> map(LongWritable key, Text value,  </li><li style="color:inherit;"><span style="color:#000000;">                OutputCollector&lt;Text, IntWritable&gt; output, Reporter reporter)  </span></li><li><span style="color:#000000;">                throws IOException  </span></li><li style="color:inherit;"><span style="color:#000000;">        {  </span></li><li><span style="color:#000000;">            String line = value.toString();  </span></li><li style="color:inherit;"><span style="color:#000000;">            StringTokenizer tokenizer = <span style="color:rgb(0,102,153);">new</span> StringTokenizer(line);  </span></li><li><span style="color:#000000;">            <span style="color:rgb(0,102,153);">while</span> (tokenizer.hasMoreTokens())  </span></li><li style="color:inherit;"><span style="color:#000000;">            {  </span></li><li><span style="color:#000000;">                word.<span style="color:rgb(0,102,153);">set</span>(tokenizer.nextToken());  </span></li><li style="color:inherit;"><span style="color:#000000;">                output.collect(word, one);  </span></li><li><span style="color:#000000;">            }  </span></li><li style="color:inherit;"><span style="color:#000000;">        }  </span></li><li><span style="color:#000000;">    }  </span></li><li style="color:inherit;"><span style="color:#000000;">    <span style="color:rgb(0,102,153);">public</span> </span><span style="color:rgb(0,102,153);">static</span> <span style="color:rgb(0,102,153);">class</span> Reduce extends MapReduceBase implements  </li><li><span style="color:#000000;">            Reducer&lt;Text, IntWritable, Text, IntWritable&gt;  </span></li><li style="color:inherit;"><span style="color:#000000;">    {  </span></li><li><span style="color:#000000;">        <span style="color:rgb(0,102,153);">public</span> </span><span style="color:rgb(0,102,153);">void</span> reduce(Text key, Iterator&lt;IntWritable&gt; values,  </li><li style="color:inherit;"><span style="color:#000000;">                OutputCollector&lt;Text, IntWritable&gt; output, Reporter reporter)  </span></li><li><span style="color:#000000;">                throws IOException  </span></li><li style="color:inherit;"><span style="color:#000000;">        {  </span></li><li><span style="color:#000000;">            <span style="color:rgb(0,102,153);">int</span> sum = 0;  </span></li><li style="color:inherit;"><span style="color:#000000;">            <span style="color:rgb(0,102,153);">while</span> (values.hasNext())  </span></li><li><span style="color:#000000;">            {  </span></li><li style="color:inherit;"><span style="color:#000000;">                sum += values.next().<span style="color:rgb(0,102,153);">get</span>();  </span></li><li><span style="color:#000000;">            }  </span></li><li style="color:inherit;"><span style="color:#000000;">            output.collect(key, <span style="color:rgb(0,102,153);">new</span> IntWritable(sum));  </span></li><li><span style="color:#000000;">        }  </span></li><li style="color:inherit;"><span style="color:#000000;">    }  </span></li><li><span style="color:#000000;">    <span style="color:rgb(0,102,153);">public</span> </span><span style="color:rgb(0,102,153);">static</span> <span style="color:rgb(0,102,153);">void</span> main(String[] args) throws Exception  </li><li style="color:inherit;"><span style="color:#000000;">    {  </span></li><li><span style="color:#000000;">        <span style="color:rgb(0,130,0);">/**</span> </span></li><li style="color:inherit;"><span style="color:#000000;"><span style="color:rgb(0,130,0);">         * JobConf：map/reduce的job配置类，向hadoop框架描述map-reduce执行的工作</span> </span></li><li><span style="color:#000000;"><span style="color:rgb(0,130,0);">         * 构造方法：JobConf()、JobConf(Class exampleClass)、JobConf(Configuration conf)等</span> </span></li><li style="color:inherit;"><span style="color:#000000;"><span style="color:rgb(0,130,0);">         */</span>  </span></li><li><span style="color:#000000;">        JobConf conf = <span style="color:rgb(0,102,153);">new</span> JobConf(WordCount.</span><span style="color:rgb(0,102,153);">class</span>);  </li><li style="color:inherit;"><span style="color:#000000;">        conf.setJobName(<span style="color:#0000FF;">"wordcount"</span>);           </span><span style="color:rgb(0,130,0);">//设置一个用户定义的job名称</span>  </li><li><span style="color:#000000;">        conf.setOutputKeyClass(Text.<span style="color:rgb(0,102,153);">class</span>);    </span><span style="color:rgb(0,130,0);">//为job的输出数据设置Key类</span>  </li><li style="color:inherit;"><span style="color:#000000;">        conf.setOutputValueClass(IntWritable.<span style="color:rgb(0,102,153);">class</span>);   </span><span style="color:rgb(0,130,0);">//为job输出设置value类</span>  </li><li><span style="color:#000000;">        conf.setMapperClass(Map.<span style="color:rgb(0,102,153);">class</span>);         </span><span style="color:rgb(0,130,0);">//为job设置Mapper类</span>  </li><li style="color:inherit;"><span style="color:#000000;">        conf.setCombinerClass(Reduce.<span style="color:rgb(0,102,153);">class</span>);      </span><span style="color:rgb(0,130,0);">//为job设置Combiner类</span>  </li><li><span style="color:#000000;">        conf.setReducerClass(Reduce.<span style="color:rgb(0,102,153);">class</span>);        </span><span style="color:rgb(0,130,0);">//为job设置Reduce类</span>  </li><li style="color:inherit;"><span style="color:#000000;">        conf.setInputFormat(TextInputFormat.<span style="color:rgb(0,102,153);">class</span>);    </span><span style="color:rgb(0,130,0);">//为map-reduce任务设置InputFormat实现类</span>  </li><li><span style="color:#000000;">        conf.setOutputFormat(TextOutputFormat.<span style="color:rgb(0,102,153);">class</span>);  </span><span style="color:rgb(0,130,0);">//为map-reduce任务设置OutputFormat实现类</span>  </li><li style="color:inherit;"><span style="color:#000000;">        <span style="color:rgb(0,130,0);">/**</span> </span></li><li><span style="color:#000000;"><span style="color:rgb(0,130,0);">         * InputFormat描述map-reduce中对job的输入定义</span> </span></li><li style="color:inherit;"><span style="color:#000000;"><span style="color:rgb(0,130,0);">         * setInputPaths():为map-reduce job设置路径数组作为输入列表</span> </span></li><li><span style="color:#000000;"><span style="color:rgb(0,130,0);">         * setInputPath()：为map-reduce job设置路径数组作为输出列表</span> </span></li><li style="color:inherit;"><span style="color:#000000;"><span style="color:rgb(0,130,0);">         */</span>  </span></li><li><span style="color:#000000;">        FileInputFormat.setInputPaths(conf, <span style="color:rgb(0,102,153);">new</span> Path(args[0]));  </span></li><li style="color:inherit;"><span style="color:#000000;">        FileOutputFormat.setOutputPath(conf, <span style="color:rgb(0,102,153);">new</span> Path(args[1]));  </span></li><li><span style="color:#000000;">        JobClient.runJob(conf);         <span style="color:rgb(0,130,0);">//运行一个job</span>  </span></li><li style="color:inherit;"><span style="color:#000000;">    }  </span></li><li><span style="color:#000000;">}  </span></li></ol></div>
            </div>
                </div>