---
layout:     post
title:      Hive总结
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                <h3>Hive是什么？</h3>

<p>Hive是基于Hadoop的一个数据仓库工具，可以将结构化的数据文件映射为一张数据库表，并提供类SQL查询功能。</p>

<h3>Hive的特点？</h3>

<p>可扩展 Hive可以自由的扩展集群的规模，一般情况下不需要重启服务。</p>

<p>延展性 Hive支持用户自定义函数，用户可以根据自己的需求来实现自己的函数。</p>

<p>容错 良好的容错性，节点出现问题SQL仍可完成执行。</p>

<h3>Hive的架构图？</h3>

<p><img alt="" class="has" height="422" src="https://img-blog.csdn.net/20180905214453733?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY4ODg3Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="810"></p>

<h3>Hive与hadoop的关系？</h3>

<p>Hive利用HDFS存储数据，利用MapReduce查询数据</p>

<p><img alt="" class="has" height="198" src="https://img-blog.csdn.net/201809052106581?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY4ODg3Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="489"></p>

<h3>Hive与传统数据库对比？</h3>

<p><img alt="" class="has" height="248" src="https://img-blog.csdn.net/20180905210749273?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjY4ODg3Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="401"></p>

<p>总结：hive具有sql数据库的外表，但应用场景完全不同，hive只适合用来做批量数据统计分析</p>

<h3>Hive的数据存储？</h3>

<p style="margin-left:0cm;">1、Hive中所有的数据都存储在 HDFS 中，没有专门的数据存储格式（可支持Text，SequenceFile，ParquetFile，RCFILE等）</p>

<p style="margin-left:0cm;">2、只需要在创建表的时候告诉 Hive 数据中的列分隔符和行分隔符，Hive 就可以解析数据。</p>

<p style="margin-left:0cm;">3、Hive 中包含以下数据模型：DB、Table，External Table，Partition，Bucket。</p>

<ul><li>db：在hdfs中表现为${hive.metastore.warehouse.dir}目录下一个文件夹</li>
	<li>table：在hdfs中表现所属db目录下一个文件夹</li>
	<li>external table：外部表, 与table类似，不过其数据存放位置可以在任意指定路径</li>
</ul><p>普通表: 删除表后, hdfs上的文件都删了</p>

<p>External外部表删除后, hdfs上的文件没有删除, 只是把文件删除了</p>

<ul><li>partition：在hdfs中表现为table目录下的子目录</li>
	<li>bucket：桶, 在hdfs中表现为同一个表目录下根据hash散列之后的多个文件, 会根据不同的文件把数据放到不同的文件中</li>
</ul><h1> 2、Hive基础操作</h1>

<ol><li>
	<ol><li> <a name="_Toc436149207"></a><a name="_Toc439081671">DDL</a>操作</li>
		<li>
		<pre class="has">
<code>建表语法
CREATE [EXTERNAL] TABLE [IF NOT EXISTS] table_name 
   [(col_name data_type [COMMENT col_comment], ...)] 
   [COMMENT table_comment] 
   [PARTITIONED BY (col_name data_type [COMMENT col_comment], ...)] 
   [CLUSTERED BY (col_name, col_name, ...) 
   [SORTED BY (col_name [ASC|DESC], ...)] INTO num_buckets BUCKETS] 
   [ROW FORMAT row_format] 
   [STORED AS file_format] 
   [LOCATION hdfs_path]



说明：
1、CREATE TABLE 创建一个指定名字的表。如果相同名字的表已经存在，则抛出异常；用户可以用 IF NOT EXISTS 选项来忽略这个异常。
2、EXTERNAL关键字可以让用户创建一个外部表，在建表的同时指定一个指向实际数据的路径（LOCATION），Hive 创建内部表时，会将数据移动到数据仓库指向的路径；若创建外部表，仅记录数据所在的路径，不对数据的位置做任何改变。在删除表的时候，内部表的元数据和数据会被一起删除，而外部表只删除元数据，不删除数据。
3、LIKE 允许用户复制现有的表结构，但是不复制数据。
4、ROW FORMAT 
DELIMITED [FIELDS TERMINATED BY char] [COLLECTION ITEMS TERMINATED BY char] 
        [MAP KEYS TERMINATED BY char] [LINES TERMINATED BY char] 
   | SERDE serde_name [WITH SERDEPROPERTIES (property_name=property_value, property_name=property_value, ...)]
用户在建表的时候可以自定义 SerDe 或者使用自带的 SerDe。如果没有指定 ROW FORMAT 或者 ROW FORMAT DELIMITED，将会使用自带的 SerDe。在建表的时候，用户还需要为表指定列，用户在指定表的列的同时也会指定自定义的 SerDe，Hive通过 SerDe 确定表的具体的列的数据。
5、STORED AS 
SEQUENCEFILE|TEXTFILE|RCFILE
如果文件数据是纯文本，可以使用 STORED AS TEXTFILE。如果数据需要压缩，使用 STORED AS SEQUENCEFILE。

6、CLUSTERED BY
对于每一个表（table）或者分区， Hive可以进一步组织成桶，也就是说桶是更为细粒度的数据范围划分。Hive也是 针对某一列进行桶的组织。Hive采用对列值哈希，然后除以桶的个数求余的方式决定该条记录存放在哪个桶当中。 
把表（或者分区）组织成桶（Bucket）有两个理由：
（1）获得更高的查询处理效率。桶为表加上了额外的结构，Hive 在处理有些查询时能利用这个结构。具体而言，连接两个在（包含连接列的）相同列上划分了桶的表，可以使用 Map 端连接 （Map-side join）高效的实现。比如JOIN操作。对于JOIN操作两个表有一个相同的列，如果对这两个表都进行了桶操作。那么将保存相同列值的桶进行JOIN操作就可以，可以大大较少JOIN的数据量。
（2）使取样（sampling）更高效。在处理大规模数据集时，在开发和修改查询的阶段，如果能在数据集的一小部分数据上试运行查询，会带来很多方便。
</code></pre>

		<p> </p>
		</li>
		<li>
		<ol><li> <a name="_Toc436149211"></a><a name="_Toc439081675">DML</a>操作</li>
			<li>语法结构</li>
		</ol></li>
	</ol></li>
</ol><p style="margin-left:0cm;">LOAD DATA [LOCAL] INPATH 'filepath' [OVERWRITE] INTO</p>

<p style="margin-left:0cm;">TABLE tablename [PARTITION (partcol1=val1, partcol2=val2 ...)]</p>

<p style="margin-left:0cm;">说明：</p>

<ol><li>Load 操作只是单纯的复制/移动操作，将数据文件移动到 Hive 表对应的位置。</li>
	<li>filepath：</li>
</ol><p style="margin-left:0cm;">     相对路径，例如：project/data1</p>

<p style="margin-left:0cm;">     绝对路径，例如：/user/hive/project/data1</p>

<p style="margin-left:0cm;">    包含模式的完整 URI，列如：</p>

<p style="margin-left:0cm;">    hdfs://namenode:9000/user/hive/project/data1</p>

<ol><li>LOCAL关键字</li>
</ol><p style="margin-left:0cm;">如果指定了 LOCAL， load 命令会去查找本地文件系统中的 filepath。</p>

<p style="margin-left:0cm;">如果没有指定 LOCAL 关键字，则根据inpath中的<a>uri</a><a class="msocomanchor" href="#_msocom_1" rel="nofollow" id="_anchor_1" name="_msoanchor_1">[M1]</a> 查找文件</p>

<ol><li>OVERWRITE 关键字</li>
</ol><p style="margin-left:0cm;">如果使用了 OVERWRITE 关键字，则目标表（或者分区）中的内容会被删除，然后再将 filepath 指向的文件/目录中的内容添加到表/分区中。</p>

<p>如果目标表（分区）已经有一个文件，并且文件名和 filepath 中的文件名冲突，那么现有的文件会被新文件所替代。</p>

<hr><p><a name="_msocom_1"></a></p>

<p style="margin-left:0cm;">如果指定了 LOCAL，那么：</p>

<p style="margin-left:0cm;">load 命令会去查找本地文件系统中的 filepath。如果发现是相对路径，则路径会被解释为相对于当前用户的当前路径。</p>

<p style="margin-left:0cm;">load 命令会将 filepath中的文件复制到目标文件系统中。目标文件系统由表的位置属性决定。被复制的数据文件移动到表的数据对应的位置。</p>

<p style="margin-left:0cm;">如果没有指定 LOCAL 关键字，如果 filepath 指向的是一个完整的 URI，hive 会直接使用这个 URI。 否则：如果没有指定 schema 或者 authority，Hive 会使用在 hadoop 配置文件中定义的 schema 和 authority，fs.default.name 指定了 Namenode 的 URI。</p>

<p style="margin-left:0cm;">如果路径不是绝对的，Hive 相对于/user/进行解释。</p>

<p style="margin-left:0cm;">Hive 会将 filepath 中指定的文件内容移动到 table （或者 partition）所指定的路径中。</p>

<p> </p>

<ul><li>基本的Select操作</li>
</ul><ul><li>语法结构</li>
</ul><p style="margin-left:0cm;">SELECT [ALL | DISTINCT] select_expr, select_expr, ...</p>

<p style="margin-left:0cm;">FROM table_reference</p>

<p style="margin-left:0cm;">[WHERE where_condition]</p>

<p style="margin-left:0cm;">[GROUP BY col_list [HAVING condition]]</p>

<p style="margin-left:0cm;">[CLUSTER BY col_list</p>

<p style="margin-left:0cm;">  | [DISTRIBUTE BY col_list] [SORT BY| ORDER BY col_list]</p>

<p style="margin-left:0cm;">]</p>

<p style="margin-left:0cm;">[LIMIT number]</p>

<p style="margin-left:0cm;"> </p>

<p style="margin-left:0cm;"><em>注：1</em><em>、order by </em><em>会对输入做全局排序，因此只有一个reducer</em><em>，会导致当输入规模较大时，需要较长的计算时间。</em></p>

<p style="margin-left:0cm;"><em>2</em><em>、sort by</em><em>不是全局排序，其在数据进入reducer</em><em>前完成排序。因此，如果用sort by</em><em>进行排序，并且设置mapred.reduce.tasks&gt;1</em><em>，则sort by</em><em>只保证每个reducer</em><em>的输出有序，不保证全局有序。</em></p>

<p style="margin-left:0cm;"><em>3</em><em>、distribute by</em><em>根据distribute by</em><em>指定的内容将数据分到同一个reducer</em><em>。</em></p>

<p style="margin-left:0cm;"><em>4</em><em>、Cluster by </em><em>除了具有Distribute by</em><em>的功能外，还会对该字段进行排序。因此，常常认为cluster by = distribute by + sort by</em></p>

<p> </p>

<h2 style="margin-left:0cm;"> Hive Join</h2>

<ul><li>语法结构</li>
</ul><p style="margin-left:0cm;">join_table:</p>

<p style="margin-left:0cm;">  table_reference JOIN table_factor [join_condition]</p>

<p style="margin-left:0cm;">  | table_reference {LEFT|RIGHT|FULL} [OUTER] JOIN table_reference join_condition</p>

<p style="margin-left:0cm;">  | table_reference LEFT SEMI JOIN table_reference join_condition</p>

<p style="margin-left:0cm;">Hive 支持等值连接（equality joins）、外连接（outer joins）和（left/right joins）。Hive <strong>不支持非等值的连接</strong>，因为非等值连接非常难转化到 map/reduce 任务。</p>

<p style="margin-left:0cm;">另外，Hive 支持多于 2 个表的连接。</p>

<p>写 join 查询时，需要注意几个关键点：</p>

<p><strong>1. </strong><strong>只支持等值join</strong></p>

<p style="margin-left:0cm;">例如：</p>

<p style="margin-left:0cm;">  SELECT a.* FROM a JOIN b ON (a.id = b.id)</p>

<p style="margin-left:0cm;">  SELECT a.* FROM a JOIN b</p>

<p style="margin-left:0cm;">    ON (a.id = b.id AND a.department = b.department)</p>

<p style="margin-left:0cm;">是正确的，然而:</p>

<p style="margin-left:0cm;">  SELECT a.* FROM a JOIN b ON (a.id&gt;b.id)</p>

<p style="margin-left:0cm;">是错误的。</p>

<p style="margin-left:0cm;"> </p>

<p style="margin-left:0cm;"><strong>2. </strong><strong>可以 join 多于 2 个表。</strong></p>

<p style="margin-left:18pt;">例如</p>

<p style="margin-left:0cm;">  SELECT a.val, b.val, c.val FROM a JOIN b</p>

<p style="margin-left:0cm;">    ON (a.key = b.key1) JOIN c ON (c.key = b.key2)</p>

<p style="margin-left:0cm;">如果join中多个表的 join key 是同一个，则 join 会被转化为单个 map/reduce 任务，例如：</p>

<p style="margin-left:0cm;">  SELECT a.val, b.val, c.val FROM a JOIN b</p>

<p style="margin-left:0cm;">    ON (a.key = b.key1) JOIN c</p>

<p style="margin-left:0cm;">    ON (c.key = b.key1)</p>

<p style="margin-left:0cm;">被转化为单个 map/reduce 任务，因为 join 中只使用了 b.key1 作为 join key。</p>

<p style="margin-left:0cm;">SELECT a.val, b.val, c.val FROM a JOIN b ON (a.key = b.key1)</p>

<p style="margin-left:0cm;">  JOIN c ON (c.key = b.key2)</p>

<p style="margin-left:0cm;">而这一 join 被转化为 2 个 map/reduce 任务。因为 b.key1 用于第一次 join 条件，而 b.key2 用于第二次 join。</p>

<p style="margin-left:0cm;">  </p>

<p style="margin-left:0cm;"><strong>3</strong><strong>．join 时，每次 map/reduce 任务的逻辑：</strong></p>

<p style="margin-left:0cm;">    reducer 会缓存 join 序列中除了最后一个表的所有表的记录，再通过最后一个表将结果序列化到文件系统。这一实现有助于在 reduce 端减少内存的使用量。实践中，应该把最大的那个表写在最后（否则会因为缓存浪费大量内存）。例如：</p>

<p style="margin-left:0cm;"> SELECT a.val, b.val, c.val FROM a</p>

<p style="margin-left:0cm;">    JOIN b ON (a.key = b.key1) JOIN c ON (c.key = b.key1)</p>

<p style="margin-left:0cm;">所有表都使用同一个 join key（使用 1 次 map/reduce 任务计算）。Reduce 端会缓存 a 表和 b 表的记录，然后每次取得一个 c 表的记录就计算一次 join 结果，类似的还有：</p>

<p style="margin-left:0cm;">  SELECT a.val, b.val, c.val FROM a</p>

<p style="margin-left:0cm;">    JOIN b ON (a.key = b.key1) JOIN c ON (c.key = b.key2)</p>

<p style="margin-left:0cm;">这里用了 2 次 map/reduce 任务。第一次缓存 a 表，用 b 表序列化；第二次缓存第一次 map/reduce 任务的结果，然后用 c 表序列化。</p>

<p style="margin-left:0cm;"> </p>

<p style="margin-left:0cm;"><strong>4</strong><strong>．LEFT，RIGHT 和 FULL OUTER 关键字用于处理 join 中空记录的情况</strong></p>

<p style="margin-left:0cm;">例如：</p>

<p style="margin-left:0cm;">  SELECT a.val, b.val FROM</p>

<p style="margin-left:0cm;">a LEFT OUTER  JOIN b ON (a.key=b.key)</p>

<p style="margin-left:0cm;">对应所有 a 表中的记录都有一条记录输出。输出的结果应该是 a.val, b.val，当 a.key=b.key 时，而当 b.key 中找不到等值的 a.key 记录时也会输出:</p>

<p style="margin-left:0cm;">a.val, NULL</p>

<p style="margin-left:0cm;">所以 a 表中的所有记录都被保留了；</p>

<p style="margin-left:0cm;">“a RIGHT OUTER JOIN b”会保留所有 b 表的记录。</p>

<p style="margin-left:0cm;"> </p>

<p style="margin-left:0cm;"><strong>Join </strong><strong>发生在 WHERE 子句之前</strong>。如果你想限制 join 的输出，应该在 WHERE 子句中写过滤条件——或是在 join 子句中写。这里面一个容易混淆的问题是表分区的情况：</p>

<p style="margin-left:0cm;">  SELECT a.val, b.val FROM a</p>

<p style="margin-left:0cm;">  LEFT OUTER JOIN b ON (a.key=b.key)</p>

<p style="margin-left:0cm;">  WHERE a.ds='2009-07-07' AND b.ds='2009-07-07'</p>

<p style="margin-left:0cm;">会 join a 表到 b 表（OUTER JOIN），列出 a.val 和 b.val 的记录。WHERE 从句中可以使用其他列作为过滤条件。但是，如前所述，如果 b 表中找不到对应 a 表的记录，b 表的所有列都会列出 NULL，<strong>包括 ds 列</strong>。也就是说，join 会过滤 b 表中不能找到匹配 a 表 join key 的所有记录。这样的话，LEFT OUTER 就使得查询结果与 WHERE 子句无关了。解决的办法是在 OUTER JOIN 时使用以下语法：</p>

<p style="margin-left:0cm;">  SELECT a.val, b.val FROM a LEFT OUTER JOIN b</p>

<p style="margin-left:0cm;">  ON (a.key=b.key AND</p>

<p style="margin-left:0cm;">      b.ds='2009-07-07' AND</p>

<p style="margin-left:0cm;">      a.ds='2009-07-07')</p>

<p style="margin-left:0cm;">这一查询的结果是预先在 join 阶段过滤过的，所以不会存在上述问题。这一逻辑也可以应用于 RIGHT 和 FULL 类型的 join 中。</p>

<p style="margin-left:0cm;"> </p>

<p style="margin-left:0cm;"><strong>Join </strong><strong>是不能交换位置的。</strong>无论是 LEFT 还是 RIGHT join，都是左连接的。</p>

<p style="margin-left:0cm;">  SELECT a.val1, a.val2, b.val, c.val</p>

<p style="margin-left:0cm;">  FROM a</p>

<p style="margin-left:0cm;">  JOIN b ON (a.key = b.key)</p>

<p style="margin-left:0cm;">  LEFT OUTER JOIN c ON (a.key = c.key)</p>

<p style="margin-left:0cm;">先 join a 表到 b 表，丢弃掉所有 join key 中不匹配的记录，然后用这一中间结果和 c 表做 join。这一表述有一个不太明显的问题，就是当一个 key 在 a 表和 c 表都存在，但是 b 表中不存在的时候：整个记录在第一次 join，即 a JOIN b 的时候都被丢掉了（包括a.val1，a.val2和a.key），然后我们再和 c 表 join 的时候，如果 c.key 与 a.key 或 b.key 相等，就会得到这样的结果：NULL, NULL, NULL, c.val</p>            </div>
                </div>