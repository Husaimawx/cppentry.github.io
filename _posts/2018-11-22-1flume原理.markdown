---
layout:     post
title:      1flume原理
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                <span></span><div><span style="text-indent:13px;font-size:16px;background-color:rgb(254,254,254);color:rgb(51,51,51);font-family:SimSun, STSong;line-height:1.75;"><em>Flume 作为 cloudera 开发的实时日志收集系统，受到了业界的认可与广泛应用。Flume 初始的发行版本目前被统称为 Flume OG（original generation），属于 cloudera。但随着 FLume 功能的扩展，Flume OG 代码工程臃肿、核心组件设计不合理、核心配置不标准等缺点暴露出来，尤其是在 Flume OG 的最后一个发行版本 0.94.0 中，日志传输不稳定的现象尤为严重，为了解决这些问题，2011 年 10 月 22 号，cloudera 完成了 Flume-728，对 Flume 进行了里程碑式的改动：重构核心组件、核心配置以及代码架构，重构后的版本统称为 Flume NG（next generation）；改动的另一原因是将 Flume 纳入 apache 旗下，cloudera Flume 改名为 Apache Flume。IBM 的这篇文章：《 </em></span><span style="text-indent:13px;font-size:16px;background-color:rgb(254,254,254);color:rgb(148,148,148);font-family:SimSun, STSong;line-height:1.75;"><strong><em>Flume NG：Flume 发展史上的第一次革命</em></strong></span><span style="text-indent:13px;font-size:16px;background-color:rgb(254,254,254);color:rgb(51,51,51);font-family:SimSun, STSong;line-height:1.75;"><em> 》，从基本组件以及用户体验的角度阐述 Flume OG 到 Flume NG 发生的革命性变化。本文就不再赘述各种细枝末节了，不过这里还是简要提下 Flume NG （1.x.x）的主要变化：</em></span></div><ul><li style="list-style-type:disc;list-style-position:inside;text-align:justify;font-size:14px;"><span style="font-size:16px;background-color:rgb(254,254,254);line-height:1.75;color:rgb(51,51,51);font-family:SimSun, STSong;"><em>sources和sinks 使用channels 进行链接</em></span></li><li style="list-style-type:disc;list-style-position:inside;text-align:justify;font-size:14px;"><span style="font-size:16px;background-color:rgb(254,254,254);line-height:1.75;color:rgb(51,51,51);font-family:SimSun, STSong;"><em>两个主要channel 。1，  in-memory channel  非持久性支持，速度快。2 ， JDBC-based channel 持久性支持。</em></span></li><li style="list-style-type:disc;list-style-position:inside;text-align:justify;font-size:14px;"><span style="font-size:16px;background-color:rgb(254,254,254);line-height:1.75;color:rgb(51,51,51);font-family:SimSun, STSong;"><em>不再区分逻辑和物理node，所有物理节点统称为 “agents”,每个agents 都能运行0个或多个sources 和sinks</em></span></li><li style="list-style-type:disc;list-style-position:inside;text-align:justify;font-size:14px;"><span style="font-size:16px;background-color:rgb(254,254,254);line-height:1.75;color:rgb(51,51,51);font-family:SimSun, STSong;"><em>不再需要master节点和对zookeeper的依赖，配置文件简单化。</em></span></li><li style="list-style-type:disc;list-style-position:inside;text-align:justify;font-size:14px;"><span style="font-size:16px;background-color:rgb(254,254,254);line-height:1.75;color:rgb(51,51,51);font-family:SimSun, STSong;"><em>插件化，一部分面对用户，工具或系统开发人员。</em></span></li><li style="list-style-type:disc;list-style-position:inside;text-align:justify;font-size:14px;"><span style="font-size:16px;background-color:rgb(254,254,254);line-height:1.75;color:rgb(51,51,51);font-family:SimSun, STSong;"><em>使用Thrift、Avro Flume sources 可以从flume0.9.4 发送 events  到flume 1.x</em></span></li></ul><div style="text-indent:13px;text-align:left;font-size:14px;"><span style="text-indent:13px;font-size:16px;background-color:rgb(254,254,254);line-height:1.75;color:rgb(51,51,51);font-family:SimSun, STSong;"><em>注：本文所使用的 Flume 版本为 flume-1.4.0-cdh4.7.0，不需要额外的安装过程，解压缩即可用。 </em></span></div><div style="text-indent:13px;text-align:left;font-size:14px;"><span style="text-indent:13px;font-size:17px;background-color:rgb(254,254,254);line-height:1.75;color:rgb(51,51,51);font-family:SimSun, STSong;"><strong><em>1、Flume 的 一些核心概念：</em></strong></span></div><div style="font-size:14px;overflow:auto;"><div><br></div><table style="table-layout:fixed;border-collapse:collapse;border:1px solid #ccc;width:601px;" border="1" cellspacing="0" cellpadding="0"><colgroup><col style="width:77px;"><col style="width:524px;"></colgroup><tbody><tr><td style="text-align:left;vertical-align:top;background-color:rgb(254,254,254);"><div><span style="font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', Helvetica, Tahoma, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', SimSun, '宋体', Heiti, '黑体', sans-serif;font-size:14px;">组件</span></div></td><td style="text-align:left;vertical-align:top;background-color:rgb(254,254,254);"><div><span style="font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', Helvetica, Tahoma, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', SimSun, '宋体', Heiti, '黑体', sans-serif;font-size:14px;">功能</span></div></td></tr><tr><td style="text-align:left;vertical-align:top;background-color:rgb(254,254,254);"><div><span style="font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', Helvetica, Tahoma, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', SimSun, '宋体', Heiti, '黑体', sans-serif;font-size:14px;">Agent</span></div></td><td style="text-align:left;vertical-align:top;background-color:rgb(254,254,254);"><div><span style="font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', Helvetica, Tahoma, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', SimSun, '宋体', Heiti, '黑体', sans-serif;font-size:14px;">使用JVM 运行Flume。每台机器运行一个agent，但是可以在一个agent中包含多个sources和sinks。</span></div></td></tr><tr><td style="text-align:left;vertical-align:top;background-color:rgb(254,254,254);"><div><span style="font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', Helvetica, Tahoma, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', SimSun, '宋体', Heiti, '黑体', sans-serif;font-size:14px;">Client</span></div></td><td style="text-align:left;vertical-align:top;background-color:rgb(254,254,254);"><div><span style="font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', Helvetica, Tahoma, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', SimSun, '宋体', Heiti, '黑体', sans-serif;font-size:14px;">生产数据，运行在一个独立的线程。</span></div></td></tr><tr><td style="text-align:left;vertical-align:top;background-color:rgb(254,254,254);"><div><span style="font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', Helvetica, Tahoma, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', SimSun, '宋体', Heiti, '黑体', sans-serif;font-size:14px;">Source</span></div></td><td style="text-align:left;vertical-align:top;background-color:rgb(254,254,254);"><div><span style="font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', Helvetica, Tahoma, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', SimSun, '宋体', Heiti, '黑体', sans-serif;font-size:14px;">从Client收集数据，传递给Channel。</span></div></td></tr><tr><td style="text-align:left;vertical-align:top;background-color:rgb(254,254,254);"><div><span style="font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', Helvetica, Tahoma, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', SimSun, '宋体', Heiti, '黑体', sans-serif;font-size:14px;">Sink</span></div></td><td style="text-align:left;vertical-align:top;background-color:rgb(254,254,254);"><div><span style="font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', Helvetica, Tahoma, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', SimSun, '宋体', Heiti, '黑体', sans-serif;font-size:14px;">从Channel收集数据，运行在一个独立线程。</span></div></td></tr><tr><td style="text-align:left;vertical-align:top;background-color:rgb(254,254,254);"><div><span style="font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', Helvetica, Tahoma, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', SimSun, '宋体', Heiti, '黑体', sans-serif;font-size:14px;">Channel</span></div></td><td style="text-align:left;vertical-align:top;background-color:rgb(254,254,254);"><div><span style="font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', Helvetica, Tahoma, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', SimSun, '宋体', Heiti, '黑体', sans-serif;font-size:14px;">连接 sources 和 sinks ，这个有点像一个队列。</span></div></td></tr><tr><td style="text-align:left;vertical-align:top;background-color:rgb(254,254,254);"><div><span style="font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', Helvetica, Tahoma, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', SimSun, '宋体', Heiti, '黑体', sans-serif;font-size:14px;">Events</span></div></td><td style="text-align:left;vertical-align:top;background-color:rgb(254,254,254);"><div><span style="font-family:'-apple-system', BlinkMacSystemFont, 'PingFang SC', Helvetica, Tahoma, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', SimSun, '宋体', Heiti, '黑体', sans-serif;font-size:14px;">可以是日志记录、 avro 对象等。</span></div></td></tr></tbody></table><div><br></div></div><div style="text-indent:13px;text-align:left;font-size:14px;"><span style="text-indent:13px;font-size:17px;background-color:rgb(254,254,254);line-height:1.75;color:rgb(51,51,51);font-family:SimSun, STSong;"><strong><em>1.1 数 据流模型</em></strong></span></div><div style="text-indent:13px;text-align:left;font-size:14px;"><span style="text-indent:13px;font-size:16px;background-color:rgb(254,254,254);line-height:1.75;color:rgb(51,51,51);font-family:SimSun, STSong;"><em>Flume以agent为最小的独立运行单位。一个agent就是一个JVM。单agent由Source、Sink和Channel三大组件构成，如下图：</em></span></div><div style="text-align:left;"></div><div style="text-indent:13px;text-align:left;font-size:14px;"><span style="text-indent:13px;font-size:16px;background-color:rgb(254,254,254);line-height:1.75;color:rgb(51,51,51);font-family:SimSun, STSong;"><em>  图一</em></span></div><div style="text-indent:13px;text-align:left;font-size:14px;"><span style="text-indent:13px;font-size:16px;background-color:rgb(254,254,254);line-height:1.75;color:rgb(51,51,51);font-family:SimSun, STSong;"><em>Flume的数据流由事件(Event)贯穿始终。事件是Flume的基本数据单位，它携带日志数据(字节数组形式)并且携带有头信息，这些Event由Agent外部的Source，比如上图中的Web Server生成。当Source捕获事件后会进行特定的格式化，然后Source会把事件推入(单个或多个)Channel中。你可以把Channel看作是一个缓冲区，它将保存事件直到Sink处理完该事件。Sink负责持久化日志或者把事件推向另一个Source。</em></span></div><div style="text-indent:13px;text-align:left;font-size:14px;"><span style="text-indent:13px;font-size:16px;background-color:rgb(254,254,254);line-height:1.75;color:rgb(51,51,51);font-family:SimSun, STSong;"><em>很直白的设计，其中值得注意的是，Flume提供了大量内置的Source、Channel和Sink类型。不同类型的Source,Channel和Sink可以自由组合。组合方式基于用户设置的配置文件，非常灵活。比如：Channel可以把事件暂存在内存里，也可以持久化到本地硬盘上。Sink可以把日志写入HDFS, HBase，甚至是另外一个Source等等。</em></span></div><div style="text-indent:13px;text-align:left;font-size:14px;"><span style="text-indent:13px;font-size:16px;background-color:rgb(254,254,254);line-height:1.75;color:rgb(51,51,51);font-family:SimSun, STSong;"><em>如果你以为Flume就这些能耐那就大错特错了。Flume支持用户建立多级流，也就是说，多个agent可以协同工作，并且支持Fan-in、Fan-out、Contextual Routing、Backup Routes。如下图所示：</em></span></div><div style="text-align:left;"></div><div style="text-indent:13px;text-align:left;font-size:14px;"><span style="text-indent:13px;font-size:17px;background-color:rgb(254,254,254);line-height:1.75;color:rgb(51,51,51);font-family:SimSun, STSong;"><strong><em>1.2 高可靠性</em></strong></span></div><div style="text-indent:13px;text-align:left;font-size:14px;"><span style="text-indent:13px;font-size:16px;background-color:rgb(254,254,254);line-height:1.75;color:rgb(51,51,51);font-family:SimSun, STSong;"><em>作为生产环境运行的软件，高可靠性是必须的。</em></span></div><div style="text-indent:13px;text-align:left;font-size:14px;"><span style="text-indent:13px;font-size:16px;background-color:rgb(254,254,254);line-height:1.75;color:rgb(51,51,51);font-family:SimSun, STSong;"><em>从单agent来看，Flume使用基于事务的数据传递方式来保证事件传递的可靠性。Source和Sink被封装进一个事务。事件被存放在Channel中直到该事件被处理，Channel中的事件才会被移除。这是Flume提供的点到点的可靠机制。</em></span></div><div style="text-indent:13px;text-align:left;font-size:14px;"><span style="text-indent:13px;font-size:16px;background-color:rgb(254,254,254);line-height:1.75;color:rgb(51,51,51);font-family:SimSun, STSong;"><em>从多级流来看，前一个agent的sink和后一个agent的source同样有它们的事务来保障数据的可靠性。</em></span></div><div style="text-indent:13px;text-align:left;font-size:14px;"><span style="text-indent:13px;font-size:17px;background-color:rgb(254,254,254);line-height:1.75;color:rgb(51,51,51);font-family:SimSun, STSong;"><strong><em>1.3 可恢复性</em></strong></span></div><div style="text-indent:13px;text-align:left;font-size:14px;"><span style="text-indent:13px;font-size:16px;background-color:rgb(254,254,254);line-height:1.75;color:rgb(51,51,51);font-family:SimSun, STSong;"><em>还是靠Channel。推荐使用FileChannel，事件持久化在本地文件系统里(性能较差)。</em></span></div><div style="text-indent:13px;text-align:left;font-size:14px;"><span style="text-indent:13px;font-size:17px;background-color:rgb(254,254,254);line-height:1.75;color:rgb(51,51,51);font-family:SimSun, STSong;"><strong><em>2、Flume 整体架构介绍</em></strong></span></div><div style="text-indent:13px;text-align:left;font-size:14px;"><span style="text-indent:13px;font-size:16px;background-color:rgb(254,254,254);line-height:1.75;color:rgb(51,51,51);font-family:SimSun, STSong;"><em>Flume架构整体上看就是  source --&gt;c hannel --&gt; sink  的三层架构（参见最上面的 图一），类似生成者和消费者的架构，他们之间通过queue（channel）传输，解耦。</em></span></div><div style="text-indent:13px;text-align:left;font-size:14px;"><span style="text-indent:13px;font-size:16px;background-color:rgb(254,254,254);line-height:1.75;color:rgb(51,51,51);font-family:SimSun, STSong;"><em>Source:完成对日志数据的收集，分成 transtion 和 event 打入到channel之中。 </em></span></div><div style="text-indent:13px;text-align:left;font-size:14px;"><span style="text-indent:13px;font-size:16px;background-color:rgb(254,254,254);line-height:1.75;color:rgb(51,51,51);font-family:SimSun, STSong;"><em>Channel:主要提供一个队列的功能，对source提供中的数据进行简单的缓存。 </em></span></div><div style="text-indent:13px;text-align:left;font-size:14px;"><span style="text-indent:13px;font-size:16px;background-color:rgb(254,254,254);line-height:1.75;color:rgb(51,51,51);font-family:SimSun, STSong;"><em>Sink:取出Channel中的数据，进行相应的存储文件系统，数据库，或者提交到远程服务器。 </em></span></div><div style="text-indent:13px;text-align:left;font-size:14px;"><span style="text-indent:13px;font-size:16px;background-color:rgb(254,254,254);line-height:1.75;color:rgb(51,51,51);font-family:SimSun, STSong;"><em>对现有程序改动最小的使用方式是使用是直接读取程序原来记录的日志文件，基本可以实现无缝接入，不需要对现有程序进行任何改动。 </em></span></div><div style="text-indent:13px;text-align:left;font-size:14px;"><span style="text-indent:13px;font-size:16px;background-color:rgb(254,254,254);line-height:1.75;color:rgb(51,51,51);font-family:SimSun, STSong;"><em>对于直接读取文件Source, 主要有两种方式： </em></span></div><div style="text-indent:13px;text-align:left;font-size:14px;"><span style="text-indent:13px;font-size:17px;background-color:rgb(254,254,254);line-height:1.75;color:rgb(51,51,51);font-family:SimSun, STSong;"><strong><em>2.1 Exec source</em></strong></span></div><div style="text-indent:13px;text-align:left;font-size:14px;"><span style="text-indent:13px;font-size:16px;background-color:rgb(254,254,254);line-height:1.75;color:rgb(51,51,51);font-family:SimSun, STSong;"><em>可通过写Unix command的方式组织数据，最常用的就是tail -F [file]。</em></span></div><div style="text-indent:13px;text-align:left;font-size:14px;"><span style="text-indent:13px;font-size:16px;background-color:rgb(254,254,254);line-height:1.75;color:rgb(51,51,51);font-family:SimSun, STSong;"><em>可以实现实时传输，但在flume不运行和脚本错误时，会丢数据，也不支持断点续传功能。因为没有记录上次文件读到的位置，从而没办法知道，下次再读时，从什么地方开始读。特别是在日志文件一直在增加的时候。flume的source挂了。等flume的source再次开启的这段时间内，增加的日志内容，就没办法被source读取到了。不过flume有一个execStream的扩展，可以自己写一个监控日志增加情况，把增加的日志，通过自己写的工具把增加的内容，传送给flume的node。再传送给sink的node。要是能在tail类的source中能支持，在node挂掉这段时间的内容，等下次node开启后在继续传送，那就更完美了。</em></span></div><div style="text-indent:13px;text-align:left;font-size:14px;"><span style="text-indent:13px;font-size:17px;background-color:rgb(254,254,254);line-height:1.75;color:rgb(51,51,51);font-family:SimSun, STSong;"><strong><em>2.2 Spooling Directory Source</em></strong></span></div><div style="text-indent:13px;text-align:left;font-size:14px;"><span style="text-indent:13px;font-size:16px;background-color:rgb(254,254,254);line-height:1.75;color:rgb(51,51,51);font-family:SimSun, STSong;"><em>SpoolSource:是监测配置的目录下新增的文件，并将文件中的数据读取出来，可实现准实时。需要注意两点：1、拷贝到spool目录下的文件不可以再打开编辑。2、spool目录下不可包含相应的子目录。在实际使用的过程中，可以结合log4j使用，使用log4j的时候，将log4j的文件分割机制设为1分钟一次，将文件拷贝到spool的监控目录。log4j有一个TimeRolling的插件，可以把log4j分割的文件到spool目录。基本实现了实时的监控。Flume在传完文件之后，将会修改文件的后缀，变为.COMPLETED（后缀也可以在配置文件中灵活指定） </em></span></div><div style="text-indent:13px;text-align:left;font-size:14px;"><span style="text-indent:13px;font-size:16px;background-color:rgb(254,254,254);line-height:1.75;color:rgb(51,51,51);font-family:SimSun, STSong;"><em>ExecSource，SpoolSource对比：ExecSource可以实现对日志的实时收集，但是存在Flume不运行或者指令执行出错时，将无法收集到日志数据，无法何证日志数据的完整性。SpoolSource虽然无法实现实时的收集数据，但是可以使用以分钟的方式分割文件，趋近于实时。如果应用无法实现以分钟切割日志文件的话，可以两种收集方式结合使用。 </em></span></div><div style="text-indent:13px;text-align:left;font-size:14px;"><span style="text-indent:13px;font-size:16px;background-color:rgb(254,254,254);line-height:1.75;color:rgb(51,51,51);font-family:SimSun, STSong;"><em>Channel有多种方式：有MemoryChannel, JDBC Channel, MemoryRecoverChannel, FileChannel。MemoryChannel可以实现高速的吞吐，但是无法保证数据的完整性。MemoryRecoverChannel在官方文档的建议上已经建义使用FileChannel来替换。FileChannel保证数据的完整性与一致性。在具体配置FileChannel时，建议FileChannel设置的目录和程序日志文件保存的目录设成不同的磁盘，以便提高效率。 </em></span></div><div style="text-indent:13px;text-align:left;font-size:14px;"><span style="text-indent:13px;font-size:16px;background-color:rgb(254,254,254);line-height:1.75;color:rgb(51,51,51);font-family:SimSun, STSong;"><em>Sink在设置存储数据时，可以向文件系统中，数据库中，hadoop中储数据，在日志数据较少时，可以将数据存储在文件系中，并且设定一定的时间间隔保存数据。在日志数据较多时，可以将相应的日志数据存储到Hadoop中，便于日后进行相应的数据分析。 </em></span></div><div><br></div>            </div>
                </div>