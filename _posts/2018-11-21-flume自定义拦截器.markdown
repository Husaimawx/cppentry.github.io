---
layout:     post
title:      flume自定义拦截器
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                <h2>                                           <span style="font-size:24px;">    flume自定义拦截器</span></h2><h2>1. <strong> <span style="font-family:'黑体';">背景介绍</span></strong></h2><p>Flume<span style="font-family:'宋体';">是</span><span style="font-family:'Times New Roman';">Cloudera</span><span style="font-family:'宋体';">提供的一个高可用的，高可靠的，分布式的海量日志采集、聚合和传输的系统，</span><span style="font-family:'Times New Roman';">Flume</span><span style="font-family:'宋体';">支持在日志系统中定制各类数据发送方，用于收集数据；同时，</span><span style="font-family:'Times New Roman';">Flume</span><span style="font-family:'宋体';">提供对数据进行简单处理，并写到各种数据接受方（可定制）的能力。</span><span style="font-family:'Times New Roman';">Flume</span><span style="font-family:'宋体';">有各种自带的拦截器，比如：</span><span style="font-family:'Times New Roman';">TimestampInterceptor</span><span style="font-family:'宋体';">、</span><span style="color:rgb(0,0,0);background:rgb(255,255,255);">HostInterceptor<span style="font-family:'宋体';">、</span><span style="font-family:Arial;">RegexExtractorInterceptor</span><span style="font-family:'宋体';">等，</span></span>通过使用不同的拦截器，实现不同的功能。但是以上的这些拦截器，不能改变原有日志数据的内容或者对日志信息添加一定的处理逻辑<span style="font-family:'宋体';">，当一条日志信息有几十个甚至上百个字段的时候，在传统的</span>Flume<span style="font-family:'宋体';">处理下，收集到的日志还是会有对应这么多的字段</span>，也不能对你想要的字段进行对应的处理。</p><p> </p><h2>2. <strong> <span style="font-family:'黑体';">自定义拦截器</span></strong></h2><p>根据实际业务的需求，为了更好的满足数据在应用层的处理，通过<span style="color:rgb(255,0,0);"><span style="font-family:'宋体';">自定义</span>Flume<span style="font-family:'宋体';">拦截器</span></span><span style="color:rgb(255,0,0);">，</span><span style="color:rgb(255,0,0);">过滤掉不需要的字段，并对指定字段加密处理，</span>将源数据进行预处理。减少了数据的传输量，降低了存储的开销。</p><p> </p><p> </p><p> </p><p>                  </p><p> </p><p> </p><p> </p><p> </p><p> </p><h2>3. <strong> <span style="font-family:'黑体';">实现</span></strong></h2><p>本技术方案核心包括二部分：</p><p>①　<span style="font-family:'宋体';">编写</span>java<span style="font-family:'宋体';">代码，自定义拦截器；</span></p><p> </p><p>内容包括：</p><p>1. <span style="font-family:'宋体';">定义一个类</span>CustomParameterInterceptor<span style="color:rgb(255,0,0);"><span style="font-family:'宋体';">实现</span>Interceptor<span style="font-family:'宋体';">接口</span></span>。</p><p>2.  <span style="font-family:'宋体';">在</span>CustomParameterInterceptor<span style="font-family:'宋体';">类中定义变量，这些变量是需要到 </span><span style="font-family:'Times New Roman';">Flume</span><span style="font-family:'宋体';">的配置文件中进行配置使用的。每一行字段间的分隔符</span><span style="font-family:'Times New Roman';">(fields_separator)</span><span style="font-family:'宋体';">、通过分隔符分隔后，所需要列字段的下标（</span><span style="font-family:'Times New Roman';">indexs</span><span style="font-family:'宋体';">）、多个下标使用的分隔符（</span><span style="font-family:'Times New Roman';">indexs_separator)</span><span style="font-family:'宋体';">、多个下标使用的分隔符（</span><span style="font-family:'Times New Roman';">indexs_separator)</span><span style="font-family:'宋体';">。</span></p><p>3. <span style="font-family:'宋体';">添加</span>CustomParameterInterceptor<span style="font-family:'宋体';">的有参构造方法。并对相应的变量进行处理。将配置文件中传过来的</span><span style="font-family:'Times New Roman';">unicode</span><span style="font-family:'宋体';">编码进行转换为字符串。</span></p><p>4. <span style="font-family:'宋体';">写具体的要处理的逻辑</span>intercept()<span style="font-family:'宋体';">方法，一个是单个处理的，一个是批量处理。</span></p><p>5. <span style="font-family:'宋体';">接口中定义了一个内部接口</span>Builder<span style="font-family:'宋体';">，在</span><span style="font-family:'Times New Roman';">configure</span><span style="font-family:'宋体';">方法中，进行一些参数配置。并给出，在</span><span style="font-family:'Times New Roman';">flume</span><span style="font-family:'宋体';">的</span><span style="font-family:'Times New Roman';">conf</span><span style="font-family:'宋体';">中没配置一些参数时，给出其默认值。通过其</span><span style="font-family:'Times New Roman';">builder</span><span style="font-family:'宋体';">方法，返回一个</span><span style="font-family:'Times New Roman';">CustomParameterInterceptor</span><span style="font-family:'宋体';">对象。</span></p><p>6. <span style="font-family:'宋体';">定义一个静态类，类中封装</span>MD5<span style="font-family:'宋体';">加密方法</span></p><p>7.  <span style="font-family:'宋体';">通过以上步骤，</span><span style="color:rgb(255,0,0);"><span style="font-family:'宋体';">自定义拦截器的代码开发已完成，然后打包成</span>jar<span style="font-family:'宋体';">，</span></span><span style="color:rgb(255,0,0);"> </span><span style="color:rgb(255,0,0);"><span style="font-family:'宋体';">放到</span>Flume<span style="font-family:'宋体';">的根目录下的</span><span style="font-family:'Times New Roman';">lib</span><span style="font-family:'宋体';">中</span></span></p><p> </p><p> </p><p> </p><p> </p><p> </p><p> </p><p> </p><p>②　<span style="font-family:'宋体';">修改</span>Flume<span style="font-family:'宋体';">的配置信息</span></p><p><span style="font-family:'宋体';">新增配置文件</span>spool-interceptor-hdfs.conf<span style="font-family:'宋体';">，内容为：</span></p><p>a1.channels = c1</p><p>a1.sources = r1</p><p>a1.sinks = s1</p><p> </p><p>#channel</p><p>a1.channels.c1.type = memory</p><p>a1.channels.c1.capacity=100000</p><p>a1.channels.c1.transactionCapacity=50000</p><p> </p><p>#source</p><p>a1.sources.r1.channels = c1</p><p>a1.sources.r1.type = spooldir</p><p>a1.sources.r1.spoolDir = /root/data/</p><p>a1.sources.r1.batchSize= 50</p><p>a1.sources.r1.inputCharset = UTF-8</p><p> </p><p>a1.sources.r1.interceptors =i1 i2</p><p>a1.sources.r1.interceptors.i1.type =cn.itcast.interceptor.CustomParameterInterceptor$Builder</p><p>a1.sources.r1.interceptors.i1.fields_separator=\\u0009</p><p>a1.sources.r1.interceptors.i1.indexs =0,1,3,5,6</p><p>a1.sources.r1.interceptors.i1.indexs_separator =\\u002c</p><p>a1.sources.r1.interceptors.i1.encrypted_field_index =0</p><p> </p><p>a1.sources.r1.interceptors.i2.type = org.apache.flume.interceptor.TimestampInterceptor$Builder</p><p> </p><p> </p><p>#sink</p><p>a1.sinks.s1.channel = c1</p><p>a1.sinks.s1.type = hdfs</p><p>a1.sinks.s1.hdfs.path =hdfs://192.168.200.101:9000/flume/%Y%m%d</p><p>a1.sinks.s1.hdfs.filePrefix = event</p><p>a1.sinks.s1.hdfs.fileSuffix = .log</p><p>a1.sinks.s1.hdfs.rollSize = 10485760</p><p>a1.sinks.s1.hdfs.rollInterval =20</p><p>a1.sinks.s1.hdfs.rollCount = 0</p><p>a1.sinks.s1.hdfs.batchSize = 1500</p><p>a1.sinks.s1.hdfs.round = true</p><p>a1.sinks.s1.hdfs.roundUnit = minute</p><p>a1.sinks.s1.hdfs.threadsPoolSize = 25</p><p>a1.sinks.s1.hdfs.useLocalTimeStamp = true</p><p>a1.sinks.s1.hdfs.minBlockReplicas = 1</p><p>a1.sinks.s1.hdfs.fileType =DataStream</p><p>a1.sinks.s1.hdfs.writeFormat = Text</p><p>a1.sinks.s1.hdfs.callTimeout = 60000</p><p>a1.sinks.s1.hdfs.idleTimeout =60</p><p> </p><p> </p><p> </p><p> </p><p>启动：</p><p>bin/flume-ng agent -c conf -f conf/spool-interceptor-hdfs.conf -name a1 -Dflume.root.logger=DEBUG,console	</p>            </div>
                </div>