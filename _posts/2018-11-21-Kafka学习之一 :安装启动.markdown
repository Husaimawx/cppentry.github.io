---
layout:     post
title:      Kafka学习之一 :安装启动
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/feng973/article/details/78803575				</div>
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<p>参考和转载： <br>
<a href="http://kafka.apache.org/intro" rel="nofollow">Kafka</a> <br>
<a href="http://orchome.com/6" rel="nofollow">kafka安装和启动</a> <br>
<a href="http://www.linuxidc.com/Linux/2016-05/131749.htm" rel="nofollow">Linux环境信息</a> <br>
<a href="http://blog.51cto.com/10120275/1865479" rel="nofollow">kafka-topics.sh –describe显示结果解释</a> <br>
<strong>Java环境：</strong> <br>
[hao973@bogon ~]$ java -version <br>
java version “1.8.0_121” <br>
Java(TM) SE Runtime Environment (build 1.8.0_121-b13) <br>
Java HotSpot(TM) 64-Bit Server VM (build 25.121-b13, mixed mode)</p>

<p><strong>Linux环境信息：</strong> <br>
cat /proc/version <br>
Linux version 2.6.32-431.el6.x86_64 (mockbuild@x86-023.build.eng.bos.redhat.com) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) ) #1 SMP Sun Nov 10 22:19:54 EST 2013 <br>
cat /etc/issue <br>
Red Hat Enterprise Linux Server release 6.5 (Santiago)</p>

<p><strong><em>假设现在没有Kafka和ZooKeeper环境。</em></strong></p>

<p><strong>Step 1: 下载代码</strong> <br>
下载0.10.0.0版本并且解压它。<a href="http://kafka.apache.org/downloads" rel="nofollow">Kafka下载地址</a></p>

<pre class="prettyprint"><code class=" hljs autohotkey">tar -xzf kafk<span class="hljs-built_in">a_2</span>.<span class="hljs-number">11</span>-<span class="hljs-number">0.10</span>.<span class="hljs-number">0.0</span>.tgz 
cd kafk<span class="hljs-built_in">a_2</span>.<span class="hljs-number">11</span>-<span class="hljs-number">0.10</span>.<span class="hljs-number">0.0</span></code></pre>

<p><strong>Step 2: 启动服务</strong></p>

<p>运行kafka需要使用Zookeeper，所以你需要先启动Zookeeper，如果你没有Zookeeper，你可以使用kafka自带打包和配置好的Zookeeper。</p>



<pre class="prettyprint"><code class=" hljs avrasm">./bin/zookeeper-server-start<span class="hljs-preprocessor">.sh</span>  ./config/zookeeper<span class="hljs-preprocessor">.properties</span> 
[<span class="hljs-number">2017</span>-<span class="hljs-number">12</span>-<span class="hljs-number">13</span> <span class="hljs-number">22</span>:<span class="hljs-number">49</span>:<span class="hljs-number">40</span>,<span class="hljs-number">427</span>] INFO Reading configuration from: ./config/zookeeper<span class="hljs-preprocessor">.properties</span> (org<span class="hljs-preprocessor">.apache</span><span class="hljs-preprocessor">.zookeeper</span><span class="hljs-preprocessor">.server</span><span class="hljs-preprocessor">.quorum</span><span class="hljs-preprocessor">.QuorumPeerConfig</span>)
......
</code></pre>

<p>现在启动kafka服务</p>



<pre class="prettyprint"><code class=" hljs avrasm">./bin/kafka-server-start<span class="hljs-preprocessor">.sh</span> ./config/server<span class="hljs-preprocessor">.properties</span> &amp;

......
[<span class="hljs-number">2017</span>-<span class="hljs-number">12</span>-<span class="hljs-number">13</span> <span class="hljs-number">23</span>:<span class="hljs-number">34</span>:<span class="hljs-number">33</span>,<span class="hljs-number">284</span>] INFO [KafkaServer id=<span class="hljs-number">0</span>] started (kafka<span class="hljs-preprocessor">.server</span><span class="hljs-preprocessor">.KafkaServer</span>)</code></pre>

<p><strong>启动kafka服务时出现错误：</strong> <br>
java.net.UnknownHostException: bogon: bogon: Name or service not known</p>



<pre class="prettyprint"><code class=" hljs oxygene">[<span class="hljs-number">2017</span>-<span class="hljs-number">12</span>-<span class="hljs-number">13</span> <span class="hljs-number">23</span>:<span class="hljs-number">22</span>:<span class="hljs-number">42</span>,<span class="hljs-number">479</span>] FATAL [KafkaServer id=<span class="hljs-number">0</span>] Fatal error during KafkaServer startup. Prepare <span class="hljs-keyword">to</span> shutdown (kafka.server.KafkaServer)
java.net.UnknownHostException: bogon: bogon: Name <span class="hljs-keyword">or</span> service <span class="hljs-keyword">not</span> known
    at java.net.InetAddress.getLocalHost(InetAddress.java:<span class="hljs-number">1505</span>)
    ......
Caused <span class="hljs-keyword">by</span>: java.net.UnknownHostException: bogon: Name <span class="hljs-keyword">or</span> service <span class="hljs-keyword">not</span> known
    at java.net.Inet6AddressImpl.lookupAllHostAddr(Native <span class="hljs-function"><span class="hljs-keyword">Method</span>)
    .....</span></code></pre>

<p>解决办法： <br>
修改 /etc/hosts， 在后面添加 bogon <br>
修改前： <br>
[root@bogon ~]# vim /etc/hosts <br>
  1 127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4  <br>
  2 ::1         localhost localhost.localdomain localhost6 localhost6.localdomain6  <br>
修改后： <br>
[root@bogon ~]# vim /etc/hosts <br>
  1 127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4 bogon <br>
  2 ::1         localhost localhost.localdomain localhost6 localhost6.localdomain6 bogon</p>

<p><strong>Step 3: 创建一个主题(topic)</strong></p>

<p>创建一个名为“test”的Topic，只有一个分区和一个备份：</p>



<pre class="prettyprint"><code class=" hljs brainfuck"><span class="hljs-string">.</span><span class="hljs-comment">/bin/kafka</span><span class="hljs-literal">-</span><span class="hljs-comment">topics</span><span class="hljs-string">.</span><span class="hljs-comment">sh</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">create</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">zookeeper</span> <span class="hljs-comment">localhost:2181</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">replication</span><span class="hljs-literal">-</span><span class="hljs-comment">factor</span> <span class="hljs-comment">1</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">partitions</span> <span class="hljs-comment">1</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">topic</span> <span class="hljs-comment">test</span>

<span class="hljs-comment">Created</span> <span class="hljs-comment">topic</span> <span class="hljs-comment">"test"</span><span class="hljs-string">.</span></code></pre>

<p>创建好之后，可以通过运行以下命令，查看已创建的topic信息：</p>



<pre class="prettyprint"><code class=" hljs brainfuck"><span class="hljs-string">.</span><span class="hljs-comment">/bin/kafka</span><span class="hljs-literal">-</span><span class="hljs-comment">topics</span><span class="hljs-string">.</span><span class="hljs-comment">sh</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">list</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">zookeeper</span> <span class="hljs-comment">localhost:2181</span>

<span class="hljs-comment">test</span></code></pre>

<p>或者，除了手工创建topic外，你也可以配置你的broker，当发布一个不存在的topic时自动创建topic。</p>

<p><strong>Step 4: 发送消息</strong></p>

<p>Kafka提供了一个命令行的工具，可以从输入文件或者命令行中读取消息并发送给Kafka集群。每一行是一条消息。 <br>
运行producer（生产者）,然后在控制台输入几条消息到服务器。</p>



<pre class="prettyprint"><code class=" hljs coffeescript">./bin/kafka-<span class="hljs-built_in">console</span>-producer.sh --broker-list <span class="hljs-attribute">localhost</span>:<span class="hljs-number">9092</span> --topic test 
&gt;<span class="hljs-keyword">this</span> <span class="hljs-keyword">is</span> a message
&gt;<span class="hljs-keyword">this</span> <span class="hljs-keyword">is</span> a other messgae</code></pre>

<p><strong>Step 5: 消费消息</strong></p>

<p>Kafka也提供了一个消费消息的命令行工具，将存储的信息输出出来。</p>



<pre class="prettyprint"><code class=" hljs oxygene">./bin/kafka-console-consumer.sh --zookeeper localhost:<span class="hljs-number">2181</span> --topic test --<span class="hljs-keyword">from</span>-beginning

<span class="hljs-keyword">Using</span> the ConsoleConsumer <span class="hljs-keyword">with</span> <span class="hljs-keyword">old</span> consumer <span class="hljs-keyword">is</span> <span class="hljs-keyword">deprecated</span> <span class="hljs-keyword">and</span> will be removed <span class="hljs-keyword">in</span> a <span class="hljs-keyword">future</span> major release. Consider <span class="hljs-keyword">using</span> the <span class="hljs-keyword">new</span> consumer <span class="hljs-keyword">by</span> passing [bootstrap-server] instead <span class="hljs-keyword">of</span> [zookeeper].

this <span class="hljs-keyword">is</span> a message
this <span class="hljs-keyword">is</span> a other messgae</code></pre>

<p>如果你有2台不同的终端上运行上述命令，那么当你在运行生产者时，消费者就能消费到生产者发送的消息。 <br>
所有的命令行工具有很多的选项，你可以查看文档来了解更多的功能。</p>

<p><strong>Step 6: 设置多个broker集群</strong></p>

<p>到目前，我们只是单一的运行一个broker,，没什么意思。对于Kafka,一个broker仅仅只是一个集群的大小, 所有让我们多设几个broker. <br>
首先为每个broker创建一个配置文件:</p>



<pre class="prettyprint"><code class=" hljs axapta">cp config/<span class="hljs-keyword">server</span>.properties config/<span class="hljs-keyword">server</span>-<span class="hljs-number">1.</span>properties 
cp config/<span class="hljs-keyword">server</span>.properties config/<span class="hljs-keyword">server</span>-<span class="hljs-number">2.</span>properties</code></pre>

<p>现在编辑这些新建的文件，设置以下属性：</p>



<pre class="prettyprint"><code class=" hljs ruby">config/server-<span class="hljs-number">1</span>.<span class="hljs-symbol">properties:</span> 
    broker.id=<span class="hljs-number">1</span> 
    listeners=<span class="hljs-constant">PLAINTEXT</span><span class="hljs-symbol">://</span><span class="hljs-symbol">:</span><span class="hljs-number">9093</span> 
    log.dir=<span class="hljs-regexp">/tmp/kafka</span>-logs-<span class="hljs-number">1</span>

config/server-<span class="hljs-number">2</span>.<span class="hljs-symbol">properties:</span> 
    broker.id=<span class="hljs-number">2</span> 
    listeners=<span class="hljs-constant">PLAINTEXT</span><span class="hljs-symbol">://</span><span class="hljs-symbol">:</span><span class="hljs-number">9094</span> 
    log.dir=<span class="hljs-regexp">/tmp/kafka</span>-logs-<span class="hljs-number">2</span></code></pre>

<p>broker.id是集群中每个节点的唯一且永久的名称，我们修改端口和日志分区是因为我们现在在同一台机器上运行，我们要防止broker在同一端口上注册和覆盖对方的数据。</p>

<p>我们已经运行了zookeeper和刚才的一个kafka节点，所有我们只需要在启动2个新的kafka节点。</p>



<pre class="prettyprint"><code class=" hljs r">./bin/kafka-server-start.sh config/server-<span class="hljs-number">1.</span>properties &amp;


[<span class="hljs-number">1</span>] <span class="hljs-number">8363</span>
<span class="hljs-keyword">...</span>
[<span class="hljs-number">2017</span>-<span class="hljs-number">12</span>-<span class="hljs-number">14</span> <span class="hljs-number">00</span>:<span class="hljs-number">37</span>:<span class="hljs-number">35</span>,<span class="hljs-number">935</span>] INFO [KafkaServer id=<span class="hljs-number">1</span>] started (kafka.server.KafkaServer)

./bin/kafka-server-start.sh config/server-<span class="hljs-number">2.</span>properties &amp;


[<span class="hljs-number">2</span>] <span class="hljs-number">8665</span>
<span class="hljs-keyword">...</span>
[<span class="hljs-number">2017</span>-<span class="hljs-number">12</span>-<span class="hljs-number">14</span> <span class="hljs-number">00</span>:<span class="hljs-number">39</span>:<span class="hljs-number">48</span>,<span class="hljs-number">446</span>] INFO [KafkaServer id=<span class="hljs-number">2</span>] started (kafka.server.KafkaServer)</code></pre>

<p>现在，我们创建一个新topic，把备份设置为：3</p>



<pre class="prettyprint"><code class=" hljs brainfuck"><span class="hljs-string">.</span><span class="hljs-comment">/bin/kafka</span><span class="hljs-literal">-</span><span class="hljs-comment">topics</span><span class="hljs-string">.</span><span class="hljs-comment">sh</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">create</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">zookeeper</span> <span class="hljs-comment">localhost:2181</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">replication</span><span class="hljs-literal">-</span><span class="hljs-comment">factor</span> <span class="hljs-comment">3</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">partitions</span> <span class="hljs-comment">1</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">topic</span> <span class="hljs-comment">my</span><span class="hljs-literal">-</span><span class="hljs-comment">replicated</span><span class="hljs-literal">-</span><span class="hljs-comment">topic</span>

<span class="hljs-comment">Created</span> <span class="hljs-comment">topic</span> <span class="hljs-comment">"my</span><span class="hljs-literal">-</span><span class="hljs-comment">replicated</span><span class="hljs-literal">-</span><span class="hljs-comment">topic"</span><span class="hljs-string">.</span></code></pre>

<p>好了，现在我们已经有了一个集群了，我们怎么知道每个集群在做什么呢？运行命令“describe topics”</p>



<pre class="prettyprint"><code class=" hljs lasso"><span class="hljs-built_in">.</span>/bin/kafka<span class="hljs-attribute">-topics</span><span class="hljs-built_in">.</span>sh <span class="hljs-subst">--</span>describe <span class="hljs-subst">--</span>zookeeper localhost:<span class="hljs-number">2181</span> <span class="hljs-subst">--</span>topic my<span class="hljs-attribute">-replicated</span><span class="hljs-attribute">-topic</span>

Topic:my<span class="hljs-attribute">-replicated</span><span class="hljs-attribute">-topic</span>   PartitionCount:<span class="hljs-number">1</span>    ReplicationFactor:<span class="hljs-number">3</span> Configs:
    Topic: my<span class="hljs-attribute">-replicated</span><span class="hljs-attribute">-topic</span>  Partition: <span class="hljs-number">0</span>    Leader: <span class="hljs-number">2</span>   Replicas: <span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span> Isr: <span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span></code></pre>

<p>这是一个解释输出，第一行是所有分区的摘要，每一行提供一个分区信息，因为我们只有一个分区，所以只有一行。</p>



<pre class="prettyprint"><code class=" hljs bash">    <span class="hljs-string">"leader"</span>:该节点负责所有指定分区的读和写，每个节点的领导都是随机选择的。
    <span class="hljs-string">"replicas"</span>:备份的节点，无论该节点是否是leader或者目前是否还活着，只是显示。
    <span class="hljs-string">"isr"</span>:备份节点的集合，也就是活着的节点集合。</code></pre>

<p>我们运行这个命令，看看一开始我们创建的那个节点：</p>



<pre class="prettyprint"><code class=" hljs brainfuck"><span class="hljs-string">.</span><span class="hljs-comment">/bin/kafka</span><span class="hljs-literal">-</span><span class="hljs-comment">topics</span><span class="hljs-string">.</span><span class="hljs-comment">sh</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">describe</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">zookeeper</span> <span class="hljs-comment">localhost:2181</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">topic</span> <span class="hljs-comment">test</span>

<span class="hljs-comment">Topic:test</span>  <span class="hljs-comment">PartitionCount:1</span>    <span class="hljs-comment">ReplicationFactor:1</span> <span class="hljs-comment">Configs:</span>
    <span class="hljs-comment">Topic:</span> <span class="hljs-comment">test</span> <span class="hljs-comment">Partition:</span> <span class="hljs-comment">0</span>    <span class="hljs-comment">Leader:</span> <span class="hljs-comment">0</span>   <span class="hljs-comment">Replicas:</span> <span class="hljs-comment">0</span> <span class="hljs-comment">Isr:</span> <span class="hljs-comment">0</span></code></pre>

<p>没有惊喜，刚才创建的topic（主题）没有Replicas，所以是0。</p>

<p>让我们来发布一些信息在新的topic上：</p>



<pre class="prettyprint"><code class=" hljs coffeescript">./bin/kafka-<span class="hljs-built_in">console</span>-producer.sh --broker-list <span class="hljs-attribute">localhost</span>:<span class="hljs-number">9092</span> --topic my-replicated-topic

&gt;<span class="hljs-keyword">this</span> <span class="hljs-keyword">is</span> a message
&gt;<span class="hljs-keyword">this</span> <span class="hljs-keyword">is</span> a other message
&gt;
</code></pre>

<p>现在，消费这些消息。</p>



<pre class="prettyprint"><code class=" hljs oxygene">./bin/kafka-console-consumer.sh --zookeeper localhost:<span class="hljs-number">2181</span> --<span class="hljs-keyword">from</span>-beginning --topic my-replicated-topic

<span class="hljs-keyword">Using</span> the ConsoleConsumer <span class="hljs-keyword">with</span> <span class="hljs-keyword">old</span> consumer <span class="hljs-keyword">is</span> <span class="hljs-keyword">deprecated</span> <span class="hljs-keyword">and</span> will be removed <span class="hljs-keyword">in</span> a <span class="hljs-keyword">future</span> major release. Consider <span class="hljs-keyword">using</span> the <span class="hljs-keyword">new</span> consumer <span class="hljs-keyword">by</span> passing [bootstrap-server] instead <span class="hljs-keyword">of</span> [zookeeper].

this <span class="hljs-keyword">is</span> a message
this <span class="hljs-keyword">is</span> a other message
</code></pre>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>