---
layout:     post
title:      Spark学习笔记总结-超级经典总结
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<div id="cnblogs_post_body" style="line-height:1.8;font-family:Verdana, Geneva, Arial, Helvetica, sans-serif;font-size:13px;background-color:rgb(238,238,238);">
<p style="line-height:1.8;"><span style="font-size:18px;"><strong>Spark<span style="font-family:'宋体';">简介</span></strong></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;">     spark <span style="font-family:'宋体';">可以很容易和</span><span style="font-family:Calibri;">yarn</span><span style="font-family:'宋体';">结合，直接调用</span><span style="font-family:Calibri;">HDFS</span><span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">Hbase</span><span style="font-family:'宋体';">上面的数据，和</span><span style="font-family:Calibri;">hadoop</span><span style="font-family:'宋体';">结合。配置很容易。</span></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;">     spark<span style="font-family:'宋体';">发展迅猛，框架比</span><span style="font-family:Calibri;">hadoop</span><span style="font-family:'宋体';">更加灵活实用。减少了延时处理，提高性能效率实用灵活性。也可以与</span><span style="font-family:Calibri;">hadoop</span><span style="font-family:'宋体';">切实相互结合。</span> <br></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;">     spark<span style="font-family:'宋体';">核心部分分为</span><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">。</span><span style="font-family:Calibri;">Spark SQL</span><span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">Spark
 Streaming</span><span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">MLlib</span><span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">GraphX</span><span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">Spark
 R</span><span style="font-family:'宋体';">等核心组件解决了很多的大数据问题，其完美的框架日受欢迎。其相应的生态环境包括</span><span style="font-family:Calibri;">zepplin</span><span style="font-family:'宋体';">等可视化方面，正日益壮大。大型公司争相实用</span><span style="font-family:Calibri;">spark</span><span style="font-family:'宋体';">来代替原有</span><span style="font-family:Calibri;">hadoop</span><span style="font-family:'宋体';">上相应的功能模块。</span><span style="font-family:Calibri;">Spark</span><span style="font-family:'宋体';">读写过程不像</span><span style="font-family:Calibri;">hadoop</span><span style="font-family:'宋体';">溢出写入磁盘，都是基于内存，因此速度很快。另外</span><span style="background-color:rgb(255,255,0);">DAG<span style="font-family:'宋体';">作业调度系</span>统的宽窄依赖</span>让<span style="font-family:Calibri;">Spark</span><span style="font-family:'宋体';">速度提高。</span></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;"> </span></p>
<hr><p style="line-height:1.8;"> </p>
<p style="line-height:1.8;"><span style="font-size:18px;"><strong>Spark<span style="font-family:'宋体';">核心组成</span></strong></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;">1<span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">RDD</span></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;">     是<span style="background-color:rgb(255,255,0);">弹性分布式数据集</span>，完全弹性的，如果数据丢失一部分还可以重建。有自动容错、位置感知调度和可伸缩性，通过数据检查点和记录数据更新金象容错性检查。通过<span style="background-color:rgb(255,255,0);">SparkContext.textFile()</span>加载文件变成<span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">，然后通过</span><span style="background-color:rgb(255,255,0);">transformation构建新的<span style="font-family:Calibri;">RDD</span></span><span style="font-family:'宋体';">，通过</span><span style="background-color:rgb(255,255,0);">action</span>将<span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">存<span style="background-color:rgb(255,255,0);">储到外部系统</span>。</span></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;">     RDD<span style="font-family:'宋体';">使用</span><span style="background-color:rgb(255,255,0);">延迟加载</span>，也就是懒加载，只有当用到的时候才加载数据。如果加载存储所有的中间过程会浪费空间。因此要延迟加载。一旦<span style="font-family:Calibri;">spark</span><span style="font-family:'宋体';">看到整个变换链，他可以计算仅需的结果数据，如果下面的函数不需要数据那么数据也不会再加载。</span>转换<span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">是惰性的</span>，只有在动作中才可以使用它们。</span></p>
<p style="line-height:1.8;"><span style="font-size:18px;">     Spark<span style="font-family:'宋体';">分为</span><span style="background-color:rgb(255,255,0);"><span style="font-family:Calibri;">driver</span><span style="font-family:'宋体';">和</span><span style="font-family:Calibri;">executor</span></span><span style="font-family:'宋体';">，</span><span style="font-family:Calibri;background-color:rgb(255,255,0);">driver</span><span style="font-family:'宋体';"><span style="background-color:rgb(255,255,0);">提交作业</span>，</span><span style="font-family:Calibri;">executor</span><span style="font-family:'宋体';">是</span><span style="font-family:Calibri;">application</span><span style="font-family:'宋体';">早</span><span style="font-family:Calibri;">worknode</span><span style="font-family:'宋体';">上的进程，运行</span><span style="font-family:Calibri;">task</span><span style="font-family:'宋体';">，</span><span style="font-family:Calibri;background-color:rgb(255,255,0);">driver</span><span style="font-family:'宋体';">对应为</span><span style="font-family:Calibri;background-color:rgb(255,255,0);">sparkcontext</span><span style="font-family:'宋体';">。</span><span style="font-family:Calibri;">Spark</span><span style="font-family:'宋体';">的</span><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">操作有</span><span style="font-family:Calibri;">transformation</span><span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">action</span><span style="font-family:'宋体';">。</span><span style="font-family:Calibri;">Transformation</span><span style="font-family:'宋体';">对</span><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">进行依赖包装，</span><span style="background-color:rgb(255,255,0);"><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">所对应的依赖都进行</span><span style="font-family:Calibri;">DAG</span></span><span style="font-family:'宋体';"><span style="background-color:rgb(255,255,0);">的构建并保存</span>，在</span><span style="font-family:Calibri;">worknode</span><span style="font-family:'宋体';">挂掉之后除了通过备份恢复还可以通过元数据对其保存的依赖再计算一次得到。当作业提交也就是调用</span><span style="font-family:Calibri;">runJob</span><span style="font-family:'宋体';">时，</span><span style="font-family:Calibri;">spark</span><span style="font-family:'宋体';">会根据</span><span style="background-color:rgb(255,255,0);"><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">构建</span><span style="font-family:Calibri;">DAG</span></span><span style="font-family:'宋体';"><span style="background-color:rgb(255,255,0);">图</span>，提交给</span><span style="font-family:Calibri;background-color:rgb(255,255,0);">DAGScheduler</span><span style="font-family:'宋体';">，这个</span>DAGScheduler<span style="font-family:'宋体';">是在</span><span style="font-family:Calibri;">SparkContext</span>创建时一同初始化的，他会对作业进行调度处理。当依赖图构建好以后，从<span style="font-family:Calibri;">action</span><span style="font-family:'宋体';">开始进行解析，每一个操作作为一个</span><span style="font-family:Calibri;">task</span><span style="font-family:'宋体';">，<span style="background-color:rgb(255,255,0);">每遇到</span></span><span style="font-family:Calibri;">shuffle</span><span style="font-family:'宋体';">就切割成为一个</span><span style="font-family:Calibri;">taskSet</span><span style="font-family:'宋体';">，并把数据输出到磁盘，</span>如果不是<span style="font-family:Calibri;">shuffle</span><span style="font-family:'宋体';">数据还在内存中存储</span>。就这样再往前推进，直到没有算子，然后运行从前面开始，如果没有<span style="font-family:Calibri;">action</span><span style="font-family:'宋体';">的算子在这里不会执行，直到遇到</span><span style="font-family:Calibri;">action</span><span style="font-family:'宋体';">为止才开始运行，这就形成了</span><span style="font-family:Calibri;">spark</span><span style="font-family:'宋体';">的懒加载，</span><span style="font-family:Calibri;">taskset</span><span style="font-family:'宋体';">提交给</span><span style="font-family:Calibri;">TaskSheduler</span><span style="font-family:'宋体';">生成</span><span style="font-family:Calibri;">TaskSetManager</span><span style="font-family:'宋体';">并且提交给</span><span style="font-family:Calibri;">Executor</span><span style="font-family:'宋体';">运行，运行结束后反馈给</span><span style="font-family:Calibri;">DAGScheduler</span><span style="font-family:'宋体';">完成一个</span><span style="font-family:Calibri;">taskSet</span><span style="font-family:'宋体';">，之后再提交下一个，当</span><span style="font-family:Calibri;">TaskSet</span><span style="font-family:'宋体';">运行失败时就返回</span><span style="font-family:Calibri;">DAGScheduler</span><span style="font-family:'宋体';">并重新再次创建。<span style="background-color:rgb(255,255,0);">一个</span></span><span style="background-color:rgb(255,255,0);"><span style="font-family:Calibri;">job</span><span style="font-family:'宋体';">里面可能有多个</span><span style="font-family:Calibri;">TaskSet</span><span style="font-family:'宋体';">，一个</span><span style="font-family:Calibri;">application</span><span style="font-family:'宋体';">可能包含多个</span><span style="font-family:Calibri;">job</span><span style="font-family:'宋体';">。</span></span></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;"> </span></p>
<hr><p style="line-height:1.8;"> </p>
<p style="line-height:1.8;"><span style="font-size:18px;">2<span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">Spark Streaming</span> <br></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;">     通过对<span style="font-family:Calibri;background-color:rgb(255,255,0);">kafka</span><span style="font-family:'宋体';"><span style="background-color:rgb(255,255,0);">数据读取</span>，将</span><span style="font-family:Calibri;">Stream</span><span style="font-family:'宋体';">数据分成小的时间片段（几秒），以类似</span><span style="font-family:Calibri;">batch</span><span style="font-family:'宋体';">批处理的方式来处理这一部分小数据，每个时间片生成一个</span><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">，有高效的容错性，对小批量数据可以兼容批量实时数据处理的逻辑算法，用一些历史数据和实时数据联合进行分析，比如分类算法等。也可以对小批量的</span><span style="background-color:rgb(255,255,0);"><span style="font-family:Calibri;">stream</span><span style="font-family:'宋体';">进行</span><span style="font-family:Calibri;">mapreduce</span><span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">join</span></span><span style="font-family:'宋体';"><span style="background-color:rgb(255,255,0);">等操</span>作，而保证其实时性。针对数据流时间要求不到毫秒级的工程性问题都可以。</span></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;">     Spark Streaming<span style="font-family:'宋体';">也有一个</span><span style="font-family:Calibri;background-color:rgb(255,255,0);">StreamingContext</span><span style="font-family:'宋体';">，其核心是</span><span style="background-color:rgb(255,255,0);">DStream</span>，是通过以组时间序列上的连续<span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">来组成的，包含一个有</span><span style="font-family:Calibri;">Time</span><span style="font-family:'宋体';">作为</span><span style="font-family:Calibri;">key</span><span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">作为</span><span style="font-family:Calibri;">value</span><span style="font-family:'宋体';">的结构体，每一个</span><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">都包含特定时间间隔的数据流，可以通过</span><span style="font-family:Calibri;">persist</span><span style="font-family:'宋体';">将其持久化。在接受不断的数据流后，在</span><span style="font-family:Calibri;">blockGenerator</span><span style="font-family:'宋体';">中维护一个队列，将流数据放到队列中，等处理时间间隔到来后将其中的所有数据合并成为一个</span><span style="font-family:Calibri;">RDD(</span><span style="font-family:'宋体';">这一间隔中的数据</span><span style="font-family:Calibri;">)</span><span style="font-family:'宋体';">。其作业提交和</span><span style="font-family:Calibri;">spark</span><span style="font-family:'宋体';">相似，只不过在提交时拿到</span><span style="font-family:Calibri;">DStream</span><span style="font-family:'宋体';">内部的</span><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">并产生</span><span style="font-family:Calibri;">Job</span><span style="font-family:'宋体';">提交，</span><span style="background-color:rgb(255,255,0);"><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">在</span><span style="font-family:Calibri;">action</span><span style="font-family:'宋体';">触发之后，将</span><span style="font-family:Calibri;">job</span><span style="font-family:'宋体';">提交给</span><span style="font-family:Calibri;">jobManager</span><span style="font-family:'宋体';">中的</span><span style="font-family:Calibri;">JobQueue</span><span style="font-family:'宋体';">，又</span><span style="font-family:Calibri;">jobScheduler</span><span style="font-family:'宋体';">调度，</span><span style="font-family:Calibri;">JobScheduler</span><span style="font-family:'宋体';">将</span><span style="font-family:Calibri;">job</span><span style="font-family:'宋体';">提交到</span><span style="font-family:Calibri;">spark</span><span style="font-family:'宋体';">的</span><span style="font-family:Calibri;">job</span><span style="font-family:'宋体';">调度器，然后将</span><span style="font-family:Calibri;">job</span><span style="font-family:'宋体';">转换成为大量的任务分发给</span><span style="font-family:Calibri;">spark</span><span style="font-family:'宋体';">集群执行。</span></span><span style="font-family:Calibri;">Job</span><span style="font-family:'宋体';">从</span><span style="font-family:Calibri;">outputStream</span><span style="font-family:'宋体';">中生成的，然后触发反向回溯执行</span><span style="font-family:Calibri;">DStreamDAG</span><span style="font-family:'宋体';">。在流数据处理的过程中，一般节点失效的处理比离线数据要复杂。</span><span style="font-family:Calibri;">Spark
 streamin</span><span style="font-family:'宋体';">在</span><span style="font-family:Calibri;">1.3</span><span style="font-family:'宋体';">之后可以周期性的将</span><span style="font-family:Calibri;">DStream</span><span style="font-family:'宋体';">写入</span><span style="font-family:Calibri;">HDFS</span><span style="font-family:'宋体';">，同时将</span><span style="font-family:Calibri;">offset</span><span style="font-family:'宋体';">也进行存储，避免写到</span><span style="font-family:Calibri;">zk</span><span style="font-family:'宋体';">。一旦主节点失效，会通过</span><span style="font-family:Calibri;">checkpoint</span><span style="font-family:'宋体';">的方式读取之前的数据。当</span><span style="font-family:Calibri;">worknode</span><span style="font-family:'宋体';">节点失效，如果</span><span style="font-family:Calibri;">HDFS</span><span style="font-family:'宋体';">或文件作为输入源那</span><span style="font-family:Calibri;">Spark</span><span style="font-family:'宋体';">会根据依赖关系重新计算数据，如果是基于</span><span style="font-family:Calibri;">Kafka</span><span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">Flume</span><span style="font-family:'宋体';">等网络数据源</span><span style="font-family:Calibri;">spark</span><span style="font-family:'宋体';">会将手机的数据源在集群中的不同节点进行备份，一旦有一个工作节点失效，系统能够根据另一份还存在的数据重新计算，但是如果接受节点失效会丢失一部分数据，同时接受线程会在其他的节点上重新启动并接受数据。</span></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;"> </span></p>
<hr><p style="line-height:1.8;"> </p>
<p style="line-height:1.8;"><span style="font-size:18px;">3<span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">Graphx</span></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;">     主要用于图的计算。核心算法有<span style="font-family:Calibri;">PageRank</span><span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">SVD</span><span style="font-family:'宋体';">奇异矩阵、</span><span style="font-family:Calibri;">TriangleConut</span><span style="font-family:'宋体';">等。</span></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;"> </span></p>
<hr><p style="line-height:1.8;"> </p>
<p style="line-height:1.8;"><span style="font-size:18px;">4<span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">Spark SQL</span></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;">    是<span style="font-family:Calibri;">Spark</span><span style="font-family:'宋体';">新推出的交互式大数据</span><span style="font-family:Calibri;">SQL</span><span style="font-family:'宋体';">技术。把</span><span style="font-family:Calibri;">sql</span><span style="font-family:'宋体';">语句翻译成</span><span style="font-family:Calibri;">Spark</span><span style="font-family:'宋体';">上的</span><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">操作可以支持</span><span style="font-family:Calibri;">Hive</span><span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">Json</span><span style="font-family:'宋体';">等类型的数据。</span></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;"> </span></p>
<hr><p style="line-height:1.8;"> </p>
<p style="line-height:1.8;"><span style="font-size:18px;">5<span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">Spark R</span></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;">     通过<span style="font-family:Calibri;">R</span><span style="font-family:'宋体';">语言调用</span><span style="font-family:Calibri;">spark</span><span style="font-family:'宋体';">，目前不会拥有像</span><span style="font-family:Calibri;">Scala</span><span style="font-family:'宋体';">或者</span><span style="font-family:Calibri;">java</span><span style="font-family:'宋体';">那样广泛的</span><span style="font-family:Calibri;">API</span><span style="font-family:'宋体';">，</span><span style="font-family:Calibri;">Spark</span><span style="font-family:'宋体';">通过</span><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">类提供</span><span style="font-family:Calibri;">Spark
 API</span><span style="font-family:'宋体';">，并且允许用户使用</span><span style="font-family:Calibri;">R</span><span style="font-family:'宋体';">交互式方式在集群中运行任务。同时集成了</span><span style="font-family:Calibri;">MLlib</span><span style="font-family:'宋体';">机器学习类库。</span></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;"> </span></p>
<hr><p style="line-height:1.8;"> </p>
<p style="line-height:1.8;"><span style="font-size:18px;">6<span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">MLBase</span></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;">     从上到下包括了<span style="font-family:Calibri;">MLOptimizer</span><span style="font-family:'宋体';">（给使用者）、</span><span style="font-family:Calibri;">MLI</span><span style="font-family:'宋体';">（给算法使用者）、</span><span style="font-family:Calibri;">MLlib</span><span style="font-family:'宋体';">（给算法开发者）、</span><span style="font-family:Calibri;">Spark</span><span style="font-family:'宋体';">。也可以直接使用</span><span style="font-family:Calibri;">MLlib</span><span style="font-family:'宋体';">。</span><span style="font-family:Calibri;">ML
 Optimizer</span><span style="font-family:'宋体';">，一个优化机器学习选择更合适的算法和相关参数的模块，还有</span><span style="font-family:Calibri;">MLI</span><span style="font-family:'宋体';">进行特征抽取和高级</span><span style="font-family:Calibri;">ML</span><span style="font-family:'宋体';">编程 抽象算法实现</span><span style="font-family:Calibri;">API</span><span style="font-family:'宋体';">平台，</span><span style="font-family:Calibri;">MLlib</span><span style="font-family:'宋体';">分布式机器学习库，可以不断扩充算法。</span><span style="font-family:Calibri;">MLRuntime</span><span style="font-family:'宋体';">基于</span><span style="font-family:Calibri;">spark</span><span style="font-family:'宋体';">计算框架，将</span><span style="font-family:Calibri;">Spark</span><span style="font-family:'宋体';">的分布式计算应用到机器学习领域。</span><span style="font-family:Calibri;">MLBase</span><span style="font-family:'宋体';">提供了一个简单的声明方法指定机器学习任务，并且动态地选择最优的学习算法。</span></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;"> </span></p>
<hr><p style="line-height:1.8;"> </p>
<p style="line-height:1.8;"><span style="font-size:18px;">7<span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">Tachyon</span></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;">      <span style="background-color:rgb(255,255,0);">高容错的分布式文件系统</span>。宣称其性能是<span style="font-family:Calibri;">HDFS</span><span style="font-family:'宋体';">的</span><span style="font-family:Calibri;">3000</span><span style="font-family:'宋体';">多倍</span>。有类似<span style="background-color:rgb(255,255,0);"><span style="font-family:Calibri;">java</span><span style="font-family:'宋体';">的接口，也实现了</span><span style="font-family:Calibri;">HDFS</span></span><span style="font-family:'宋体';"><span style="background-color:rgb(255,255,0);">接口</span>，所以</span><span style="font-family:Calibri;">Spark</span><span style="font-family:'宋体';">和</span><span style="font-family:Calibri;">MR</span><span style="font-family:'宋体';">程序不需要任何的修改就可以运行。目前支持</span><span style="font-family:Calibri;">HDFS</span><span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">S3</span><span style="font-family:'宋体';">等。</span></span></p>
<hr><p style="line-height:1.8;"><span style="font-size:18px;"> </span></p>
<p style="line-height:1.8;"><span style="font-size:18px;">8<span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">Spark</span><span style="font-family:'宋体';">算子</span></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;">1<span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">Map</span><span style="font-family:'宋体';">。对原数据进行处理，类似于遍历操作，转换成</span><span style="font-family:Calibri;">MappedRDD</span><span style="font-family:'宋体';">，原分区不变。</span></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;">2<span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">flatMap</span><span style="font-family:'宋体';">。将原来的</span><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">中的每一个元素通过函数转换成新的元素，将</span><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">的每个集合中的元素合并成一个集合。比如一个元素里面多个</span><span style="font-family:Calibri;">list</span><span style="font-family:'宋体';">，通过这个函数都合并成一个大的</span><span style="font-family:Calibri;">list</span><span style="font-family:'宋体';">，最经典的就是</span><span style="font-family:Calibri;">wordcount</span><span style="font-family:'宋体';">中将每一行元素进行分词以后成为，通过</span><span style="font-family:Calibri;">flapMap</span><span style="font-family:'宋体';">变成一个个的单词，</span><span style="font-family:Calibri;">line.flapMap(_.split(</span><span style="font-family:'宋体';">“
 ”</span><span style="font-family:Calibri;">)).map((_,1))</span><span style="font-family:'宋体';">如果通过</span><span style="font-family:Calibri;">map</span><span style="font-family:'宋体';">就会将一行的单词变成一个</span><span style="font-family:Calibri;">list</span><span style="font-family:'宋体';">。</span></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;">3<span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">mapPartitions</span><span style="font-family:'宋体';">。对每个分区进行迭代，生成</span><span style="font-family:Calibri;">MapPartitionsRDD</span><span style="font-family:'宋体';">。</span></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;">4<span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">Union</span><span style="font-family:'宋体';">。是将两个</span><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">合并成一个。使用这个函数要保证两个</span><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">元素的数据类型相同，返回的</span><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">的数据类型和被合并的</span><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">数据类型相同。</span></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;">5<span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">Filter</span><span style="font-family:'宋体';">。其功能是对元素进行过滤，对每个元素调用</span><span style="font-family:Calibri;">f</span><span style="font-family:'宋体';">函数，返回值为</span><span style="font-family:Calibri;">true</span><span style="font-family:'宋体';">的元素就保留在</span><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">中。</span></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;">6<span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">Distinct</span><span style="font-family:'宋体';">。对</span><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">中元素进行去重操作。</span></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;">7<span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">Subtract</span><span style="font-family:'宋体';">。对</span><span style="font-family:Calibri;">RDD1</span><span style="font-family:'宋体';">中取出</span><span style="font-family:Calibri;">RDD1</span><span style="font-family:'宋体';">与</span><span style="font-family:Calibri;">RDD2</span><span style="font-family:'宋体';">交集中的所有元素。</span></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;">8<span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">Sample</span><span style="font-family:'宋体';">。对</span><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">中的集合内元素进行采样，第一个参数</span><span style="font-family:Calibri;">withReplacement</span><span style="font-family:'宋体';">是</span><span style="font-family:Calibri;">true</span><span style="font-family:'宋体';">表示有放回取样，</span><span style="font-family:Calibri;">false</span><span style="font-family:'宋体';">表示无放回。第二个参数表示</span>比例，第三个参数是随机种子。如<span style="font-family:Calibri;">data.sample(true,
 0.3,new Random().nextInt())</span><span style="font-family:'宋体';">。</span></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;">9<span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">takeSample</span><span style="font-family:'宋体';">。和</span><span style="font-family:Calibri;">sample</span><span style="font-family:'宋体';">用法相同，只不第二个参数换成了个数。返回也不是</span><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">，而是</span><strong>collect</strong>。</span></p>
<p style="line-height:1.8;"><span style="font-size:18px;">10<span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">Cache</span><span style="font-family:'宋体';">。</span>将<span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">缓存到内存中</span>。相当于<span style="font-family:Calibri;">persist</span><span style="font-family:'宋体';">（</span><span style="font-family:Calibri;">MEMORY_ONLY</span><span style="font-family:'宋体';">）。可以通过参数设置缓存和运行内存之间的比例，如果数据量大于</span><span style="font-family:Calibri;">cache</span><span style="font-family:'宋体';">内存则会丢失。</span></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;">11<span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">Persist</span><span style="font-family:'宋体';">。里面参数可以选择</span><span style="font-family:Calibri;">DISK_ONLY/MEMORY_ONLY/MEMORY_AND_DISK</span><span style="font-family:'宋体';">等，其中的</span><span style="font-family:Calibri;">MEMORY_AND_DISK</span><span style="font-family:'宋体';">当缓存空间满了后自动溢出到磁盘。</span></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;">12<span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">MapValues</span><span style="font-family:'宋体';">。针对</span><span style="font-family:Calibri;">KV</span><span style="font-family:'宋体';">数据，对数据中的</span><span style="font-family:Calibri;">value</span><span style="font-family:'宋体';">进行</span><span style="font-family:Calibri;">map</span><span style="font-family:'宋体';">操作，而不对</span><span style="font-family:Calibri;">key</span><span style="font-family:'宋体';">进行处理。</span></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;">13<span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">reduceByKey</span><span style="font-family:'宋体';">。针对</span><span style="font-family:Calibri;">KV</span><span style="font-family:'宋体';">数据将相同</span><span style="font-family:Calibri;">key</span><span style="font-family:'宋体';">的</span><span style="font-family:Calibri;">value</span><span style="font-family:'宋体';">聚合到一起。与</span><span style="font-family:Calibri;">groupByKey</span><span style="font-family:'宋体';">不同，会进行一个类似</span><span style="font-family:Calibri;">mapreduce</span><span style="font-family:'宋体';">中的</span><span style="font-family:Calibri;">combine</span><span style="font-family:'宋体';">操作，减少相应的数据</span><span style="font-family:Calibri;">IO</span><span style="font-family:'宋体';">操作，加快效率。如果想进行一些非叠加操作，我们可以将</span><span style="font-family:Calibri;">value</span><span style="font-family:'宋体';">组合成字符串或其他格式将相同</span><span style="font-family:Calibri;">key</span><span style="font-family:'宋体';">的</span><span style="font-family:Calibri;">value</span><span style="font-family:'宋体';">组合在一起，再通过迭代，组合的数据拆开操作。</span></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;">14<span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">partitionBy</span><span style="font-family:'宋体';">。可以将</span><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">进行分区，重新生成一个</span><span style="font-family:Calibri;">ShuffleRDD</span><span style="font-family:'宋体';">，进行一个</span><span style="font-family:Calibri;">shuffle</span><span style="font-family:'宋体';">操作，对后面进行频繁的</span><span style="font-family:Calibri;">shuffle</span><span style="font-family:'宋体';">操作可以加快效率。</span></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;">15<span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">randomSplit</span><span style="font-family:'宋体';">。对</span><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">进行随机切分。如</span><span style="font-family:Calibri;">data.randomSplit(new
 double[]{0.7, 0.3})</span><span style="font-family:'宋体';">返回一个</span><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">的数组。</span></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;">16<span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">Cogroup</span><span style="font-family:'宋体';">。对两个</span><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">中的</span><span style="font-family:Calibri;">KV</span><span style="font-family:'宋体';">元素，每个</span><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">中相同</span><span style="font-family:Calibri;">key</span><span style="font-family:'宋体';">中的元素分别聚合成一个集合。与</span><span style="font-family:Calibri;">reduceByKey</span><span style="font-family:'宋体';">不同的是针对两个</span><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">中相同的</span><span style="font-family:Calibri;">key</span><span style="font-family:'宋体';">的元素进行合并。</span></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;">17<span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">Join</span><span style="font-family:'宋体';">。相当于</span><span style="font-family:Calibri;">inner join</span><span style="font-family:'宋体';">。对两个需要连接的</span><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">进行</span><span style="font-family:Calibri;">cogroup</span><span style="font-family:'宋体';">，然后对每个</span><span style="font-family:Calibri;">key</span><span style="font-family:'宋体';">下面的</span><span style="font-family:Calibri;">list</span><span style="font-family:'宋体';">进行笛卡尔积的操作，输出两两相交的两个集合作为</span><span style="font-family:Calibri;">value</span><span style="font-family:'宋体';">。
 相当于</span><span style="font-family:Calibri;">sql</span><span style="font-family:'宋体';">中</span><span style="font-family:Calibri;">where a.key=b.key</span><span style="font-family:'宋体';">。</span></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;">18<span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">leftOutJoin</span><span style="font-family:'宋体';">，</span><span style="font-family:Calibri;">rightOutJoin</span><span style="font-family:'宋体';">。在数据库中</span><strong>左连接以左表为坐标将表中所有的数据列出来，</strong>右面不存在的用<span style="font-family:Calibri;">null</span><span style="font-family:'宋体';">填充。在这里面对</span><span style="font-family:Calibri;">join</span><span style="font-family:'宋体';">的基础上判断左侧的</span><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">元素是否是空，如果是空则填充。右连接则相反。</span></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;">19<span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">saveAsTestFile</span><span style="font-family:'宋体';">。将数据输出到</span><span style="font-family:Calibri;">HDFS</span><span style="font-family:'宋体';">的指定目录。</span></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;">20<span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">saveAsObjectFile</span><span style="font-family:'宋体';">。写入</span><span style="font-family:Calibri;">HDFS</span><span style="font-family:'宋体';">为</span><span style="font-family:Calibri;">SequenceFile</span><span style="font-family:'宋体';">格式。</span></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;">21<span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">Collect</span><span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">collectAsMap</span><span style="font-family:'宋体';">。将</span>RDD<span style="font-family:'宋体';">转换成</span><span style="font-family:Calibri;">list</span><span style="font-family:'宋体';">或者</span><span style="font-family:Calibri;">Map</span>。结果以<span style="font-family:Calibri;">List</span><span style="font-family:'宋体';">或者</span><span style="font-family:Calibri;">HashMap</span><span style="font-family:'宋体';">的方式输出。</span></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;">22<span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">Count</span><span style="font-family:'宋体';">。对</span><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">的元素进行统计，返回个数。</span></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;">23<span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">Top</span><span style="font-family:'宋体';">（</span><span style="font-family:Calibri;">k</span><span style="font-family:'宋体';">）。返回最大的</span><span style="font-family:Calibri;">k</span><span style="font-family:'宋体';">个元素，返回</span><span style="font-family:Calibri;">List</span><span style="font-family:'宋体';">的形式。</span></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;">24<span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">Take</span><span style="font-family:'宋体';">返回数据的前</span><span style="font-family:Calibri;">k</span><span style="font-family:'宋体';">个元素。</span></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;">25<span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">takeOrdered</span><span style="font-family:'宋体';">。返回数据的最小的</span><span style="font-family:Calibri;">k</span><span style="font-family:'宋体';">个元素，并在返回中保持元素的顺序。</span></span></p>
<hr><p style="line-height:1.8;"> </p>
<p style="line-height:1.8;"><span style="font-size:18px;">9<span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">Tips</span></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;">1<span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">RDD.repartition(n)</span><span style="font-family:'宋体';">可以在最初对</span><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">进行分区操作，这个操作实际上是一个</span><span style="font-family:Calibri;">shuffle</span><span style="font-family:'宋体';">，可能比较耗时，但是如果之后的</span><span style="font-family:Calibri;">action</span><span style="font-family:'宋体';">比较多的话，可以减少下面操作的时间。其中的</span><span style="font-family:Calibri;">n</span><span style="font-family:'宋体';">值看</span><span style="font-family:Calibri;">cpu</span><span style="font-family:'宋体';">的个数，一般大于</span><span style="font-family:Calibri;">2</span><span style="font-family:'宋体';">倍</span><span style="font-family:Calibri;">cpu</span><span style="font-family:'宋体';">，小于</span><span style="font-family:Calibri;">1000</span><span style="font-family:'宋体';">。</span></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;">2<span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">Action</span><span style="font-family:'宋体';">不能够太多，每一次的</span><span style="font-family:Calibri;">action</span><span style="font-family:'宋体';">都会将以上的</span><span style="font-family:Calibri;">taskset</span><span style="font-family:'宋体';">划分一个</span><span style="font-family:Calibri;">job</span><span style="font-family:'宋体';">，这样当</span><span style="font-family:Calibri;">job</span><span style="font-family:'宋体';">增多，而其中</span><span style="font-family:Calibri;">task</span><span style="font-family:'宋体';">并不释放，会占用更多的内存，使得</span><span style="font-family:Calibri;">gc</span><span style="font-family:'宋体';">拉低效率。</span></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;">3<span style="font-family:'宋体';">、在</span><span style="font-family:Calibri;">shuffle</span><span style="font-family:'宋体';">前面进行一个过滤，减少</span><span style="font-family:Calibri;">shuffle</span><span style="font-family:'宋体';">数据，并且过滤掉</span><span style="font-family:Calibri;">null</span><span style="font-family:'宋体';">值，以及空值。</span></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;">4<span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">groupBy</span><span style="font-family:'宋体';">尽量通过</span><span style="font-family:Calibri;">reduceBy</span><span style="font-family:'宋体';">替代。</span><span style="font-family:Calibri;">reduceBy</span><span style="font-family:'宋体';">会在</span><span style="font-family:Calibri;">work</span><span style="font-family:'宋体';">节点做一次</span><span style="font-family:Calibri;">reduce</span><span style="font-family:'宋体';">，在整体进行</span><span style="font-family:Calibri;">reduce</span><span style="font-family:'宋体';">，相当于做了一次</span><span style="font-family:Calibri;">hadoop</span><span style="font-family:'宋体';">中的</span><span style="font-family:Calibri;">combine</span><span style="font-family:'宋体';">操作，而</span><span style="font-family:Calibri;">combine</span><span style="font-family:'宋体';">操作和</span><span style="font-family:Calibri;">reduceBy</span><span style="font-family:'宋体';">逻辑一致，这个</span><span style="font-family:Calibri;">groupBy</span><span style="font-family:'宋体';">不能保证。</span></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;">5<span style="font-family:'宋体';">、做</span><span style="font-family:Calibri;">join</span><span style="font-family:'宋体';">的时候，尽量用小</span><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">去</span><span style="font-family:Calibri;">join</span><span style="font-family:'宋体';">大</span><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">，用大</span><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">去</span><span style="font-family:Calibri;">join</span><span style="font-family:'宋体';">超大的</span><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">。</span></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;">6<span style="font-family:'宋体';">、避免</span><span style="font-family:Calibri;">collect</span><span style="font-family:'宋体';">的使用。因为</span><span style="font-family:Calibri;">collect</span><span style="font-family:'宋体';">如果数据集超大的时候，会通过各个</span><span style="font-family:Calibri;">work</span><span style="font-family:'宋体';">进行收集，</span><span style="font-family:Calibri;">io</span><span style="font-family:'宋体';">增多，拉低性能，因此当数据集很大时要</span><span style="font-family:Calibri;">save</span><span style="font-family:'宋体';">到</span><span style="font-family:Calibri;">HDFS</span><span style="font-family:'宋体';">。</span></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;">7<span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">如果后面使用迭代，建议</span><span style="font-family:Calibri;">cache</span><span style="font-family:'宋体';">，但是一定要估计好数据的大小，避免比</span><span style="font-family:Calibri;">cache</span><span style="font-family:'宋体';">设定的内存还要大，如果大过内存就会删除之前存储的</span><span style="font-family:Calibri;">cache</span><span style="font-family:'宋体';">，可能导致计算错误，如果想要完全的存储可以使用</span><span style="font-family:Calibri;">persist</span><span style="font-family:'宋体';">（</span><span style="font-family:Calibri;">MEMORY_AND_DISK</span><span style="font-family:'宋体';">），因为</span><span style="font-family:Calibri;">cache</span><span style="font-family:'宋体';">就是</span><span style="font-family:Calibri;">persist</span><span style="font-family:'宋体';">（</span><span style="font-family:Calibri;">MEMORY_ONLY</span><span style="font-family:'宋体';">）。</span></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;">8<span style="font-family:'宋体';">、设置</span><span style="font-family:Calibri;">spark.cleaner.ttl</span><span style="font-family:'宋体';">，定时清除</span><span style="font-family:Calibri;">task</span><span style="font-family:'宋体';">，因为</span><span style="font-family:Calibri;">job</span><span style="font-family:'宋体';">的原因可能会缓存很多执行过去的</span><span style="font-family:Calibri;">task</span><span style="font-family:'宋体';">，所以定时回收可能避免集中</span><span style="font-family:Calibri;">gc</span><span style="font-family:'宋体';">操作拉低性能。</span></span></p>
<p style="line-height:1.8;"><span style="font-size:18px;">9<span style="font-family:'宋体';">、适当</span><span style="font-family:Calibri;">pre-partition</span><span style="font-family:'宋体';">，通过</span><span style="font-family:Calibri;">partitionBy</span><span style="font-family:'宋体';">（）设定，每次</span><span style="font-family:Calibri;">partiti</span></span></p>
</div>
<div id="MySignature" style="font-family:Verdana, Geneva, Arial, Helvetica, sans-serif;font-size:13px;background-color:rgb(238,238,238);">
厚积薄发，行胜于言@飞鸟各投林</div>
            </div>
                </div>