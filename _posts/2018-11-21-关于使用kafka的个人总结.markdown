---
layout:     post
title:      关于使用kafka的个人总结
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/sniperken/article/details/52636675				</div>
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">     本篇文章算是对几个月工作的一个总结吧，接触了几个月的kafka和flume，感觉自己也只能算是了解kafka的阶段，接下来也打算深入研究下kafka的原理，下面写的算是对工作中使用到的kafka方面的东西做个总结吧！</span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">     </span></p>
<p><strong><span style="font-family:'Microsoft YaHei';font-size:18px;">kafka概述</span></strong></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">（有空可以浏览一下http://orchome.com）</span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">      当前kafka版本为0.10.0.0。</span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">      关于Kafka需要了解的几个关键词：</span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">      ①Producer</span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">          发布消息的对象（flume）      </span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">      ②Consumer</span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">          订阅发布的消息并处理消息的对象（spark）</span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">      ③Broker</span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">          Producer把生产的消息“推”到Broker中，Consumer可以从Broker中订阅一个  或多个topic，并从Broker中“拉”消息进行消费</span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">      ④Topic</span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">          Kafka中把消息分门别类，每一类消息是一个topic</span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">      ⑤Partition</span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">          Kafka把每个Topic分成多个partition，每个partition中的消息是有序的，partition中的每条消息都会被分配一个有序的id（offset） </span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;"> </span></p>
<p><strong><span style="font-family:'Microsoft YaHei';font-size:18px;">Topic &amp; Partition</span></strong></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">   1.kafka把一个topic分为1个或以上的partition，每个partition在物理上对应一个文件夹，</span></p>
<p style="text-align:center;"><span style="font-family:'Microsoft YaHei';font-size:14px;">    <img src="https://img-blog.csdn.net/20160923115752572?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">文件夹中存储的是该partition的所有消息以及一个索引文件。（以第一个消息的offset命名）   </span></p>
<p style="text-align:center;"><span style="font-family:'Microsoft YaHei';font-size:14px;"> <img src="https://img-blog.csdn.net/20160923115736884?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">   </span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">   2.每一个分区都是一个顺序的消息队列，并且可以持续的添加。分区中的每条消息都被分配了一个序列号，即偏移量(64字节的offset)，在每个分区中的偏移量都是唯一的</span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;"> </span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">   3.在发送一条消息时，可以指定这条消息的key，producer根据这个key和partition机制来判断将这条消息发送到哪个parition（通过实现kafka.producer.Partitioner接口）。key相同的消息会被发送并存储到同一个partition里</span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;"> </span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">   4.每一条消息被发送到broker时，会根据分区的规则选择被存储到哪一个partition在创建topic时可以在config/server.properties中指定这个partition的数量</span></p>
<p style="text-align:center;"><span style="font-family:'Microsoft YaHei';font-size:14px;">    <img src="https://img-blog.csdn.net/20160923115814573?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;"> </span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">  </span></p>
<p><strong><span style="font-family:'Microsoft YaHei';font-size:18px;">offset</span></strong></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">   1.消费者所持有的仅有的元数据就是这个偏移量，也就是消费者在这个log中的位置。 这个偏移量由消费者控制。</span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;"> </span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">   2.当消费者消费消息的时候，偏移量会线性的增加。实际偏移量由消费者控制，消费者可以将偏移量重置为之前的一个偏移量，重新读取消息。</span></p>
<p><strong><span style="font-family:'Microsoft YaHei';font-size:14px;"> </span></strong></p>
<p><strong><span style="font-family:'Microsoft YaHei';font-size:14px;"> </span></strong></p>
<p><strong><span style="font-family:'Microsoft YaHei';font-size:14px;">具体使用：</span></strong></p>
<p><strong><span style="font-family:'Microsoft YaHei';font-size:14px;"> </span></strong></p>
<p><strong><span style="font-family:'Microsoft YaHei';font-size:14px;">开启kafka前先要开启zookeeper</span></strong></p>
<p><strong><span style="font-family:'Microsoft YaHei';font-size:14px;"> </span></strong></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">1.<strong>bin/zkServer.sh start</strong></span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">2.<strong>开启kafka server</strong></span></p>
<p><strong><span style="font-family:'Microsoft YaHei';font-size:14px;">   bin/kafka-server-start  config/server.properties</span></strong></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">3.<strong>测试时可以先开kafka的producer</strong></span></p>
<p><strong><span style="font-family:'Microsoft YaHei';font-size:14px;"><span style="color:rgb(51,51,51);">bin/kafka-console-producer.sh --broker-list localhost:9092 --topic test</span><span style="color:rgb(51,51,51);">（</span><span style="color:rgb(51,51,51);">--broker-list是kafka所在主机</span><span style="color:rgb(51,51,51);">）</span></span></strong></p>
<p><strong><span style="font-family:'Microsoft YaHei';font-size:14px;">  再开启kafka的consumer</span></strong></p>
<p><strong><span style="color:rgb(51,51,51);"><span style="font-family:'Microsoft YaHei';font-size:14px;">bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic test --from-beginning</span></span></strong></p>
<p><strong><span style="color:rgb(51,51,51);"><span style="font-family:'Microsoft YaHei';font-size:14px;">接着就可以在producer中发送消息</span></span></strong></p>
<p><strong><span style="color:rgb(51,51,51);"><span style="font-family:'Microsoft YaHei';font-size:14px;"> </span></span></strong></p>
<p><strong><span style="color:rgb(51,51,51);"><span style="font-family:'Microsoft YaHei';font-size:14px;"> </span></span></strong></p>
<p><strong><span style="font-family:'Microsoft YaHei';font-size:18px;"><span style="color:rgb(51,51,51);">K</span><span style="color:rgb(51,51,51);">afka配置文件：</span></span></strong></p>
<p><strong><span style="color:rgb(51,51,51);"><span style="font-family:'Microsoft YaHei';font-size:14px;">几个关键配置：</span></span></strong></p>
<p><strong><span style="color:rgb(51,51,51);"><span style="font-family:'Microsoft YaHei';font-size:14px;">broker.id=0</span></span></strong></p>
<p><strong><span style="color:rgb(51,51,51);"><span style="font-family:'Microsoft YaHei';font-size:14px;">listeners=PLAINTEXT://172.16.49.173:9092</span></span></strong></p>
<p><strong><span style="color:rgb(51,51,51);"><span style="font-family:'Microsoft YaHei';font-size:14px;">port=9092</span></span></strong></p>
<p><strong><span style="color:rgb(51,51,51);"><span style="font-family:'Microsoft YaHei';font-size:14px;">log.dirs=kafka-logs</span></span></strong></p>
<p><strong><span style="color:rgb(51,51,51);"><span style="font-family:'Microsoft YaHei';font-size:14px;">zookeeper.connect=localhost:2181</span></span></strong></p>
<p><strong><span style="font-family:'Microsoft YaHei';font-size:14px;"><span style="color:rgb(255,0,0);">listeners一定要配置成为IP地址；如果配置为localhost或服务器的hostname,在使用java发送数据时</span><span style="color:rgb(255,0,0);">可能</span><span style="color:rgb(255,0,0);">会抛出异常：org.apache.kafka.common.errors.TimeoutException:
 Batch Expired</span><span style="color:rgb(255,0,0);"> 。因为在没有配置advertised.host.name 的情况下，Kafka并没有广播我们配置的host.name，而是广播了主机配置的hostname。远端的客户端并没有配置 hosts，所以自然是连接不上这个hostname的</span><span style="color:rgb(255,0,0);">，</span><span style="color:rgb(255,0,0);">也可以在远端客户端配置hosts</span></span></strong></p>
<p><strong><span style="font-family:'Microsoft YaHei';font-size:14px;"><span style="color:rgb(255,0,0);">Z</span><span style="color:rgb(255,0,0);">ookeeper.connect中zk集群地址以“，”分隔</span></span></strong></p>
<h1><span style="color:rgb(51,51,51);"><span style="font-family:'Microsoft YaHei';font-size:18px;">集群的配置</span></span></h1>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">与单机的配置差不多，只是listeners的配置需要改为集群服务的IP地址和采用的端口。</span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">关于kafka的监控：</span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">  可以使用kafkaOffSetMonitor</span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">  （https://github.com/quantifind/KafkaOffsetMonitor/releases/download/v0.2.1/KafkaOffsetMonitor-assembly-0.2.1.jar）</span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">将KafkaOffsetMonitor-assembly-0.2.0.jar上传到服务器后，可以新建一个脚本用于启动该应用。脚本内容如下：</span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">java -cp KafkaOffsetMonitor-assembly-0.2.0.jar</span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">    com.quantifind.kafka.offsetapp.OffsetGetterWeb</span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">--zk zk1:2181,zk2:2181,zk3:2181     </span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">--port 8088</span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">--refresh 10.seconds     </span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">--retain 2.days</span></p>
<p style="text-align:center;"><strong><span style="color:rgb(51,51,51);"><span style="font-family:'Microsoft YaHei';font-size:14px;"> <img src="https://img-blog.csdn.net/20160923115848729?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></span></span></strong></p>
<p><strong><span style="font-family:'Microsoft YaHei';font-size:14px;">   </span><span style="font-family:'Microsoft YaHei';font-size:18px;">zk集群</span></strong></p>
<p style="text-align:center;"><span style="font-family:'Microsoft YaHei';font-size:14px;"> <img src="https://img-blog.csdn.net/20160923115900809?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">Consumer消费情况</span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">（左上角显示的是topic生产速率，右上角是consumer消费速率，蓝色的表示当前Topic中的Message数目，灰色的表示当前Consumer消费的offset位置，红色的表示蓝色灰色的差值，即当前Consumer滞后于Producer的message数目）</span></p>
<p style="text-align:center;"><span style="font-family:'Microsoft YaHei';font-size:14px;"><img src="https://img-blog.csdn.net/20160923115925278?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></span></p>
<p style="text-align:center;"><span style="font-family:'Microsoft YaHei';font-size:14px;"><img src="https://img-blog.csdn.net/20160923115938104?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br></span></p>
<p></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;"> </span></p>
<p><span style="font-family:'Microsoft YaHei';font-size:14px;">       这里有一个坑，默认情况下Producer往一个不存在的Topic发送message时会自动创建这个Topic。由于在这个封装中，有同时传递message和topic的情况，如果调用方法时传入的参数反了，将会在Kafka集群中自动创建Topic。在正常情况下，应该是先把Topic根据需要创建好，然后Producer往该Topic发送Message，最好把Kafka这个默认自动创建Topic的功能关掉。 <br>
　　如果真的不小心创建了多余的Topic，在删除时，会出现“marked for deletion”提示，只是将该topic标记为删除，使用list命令仍然能看到。如果需要调整这两个功能的话，在server.properties中配置如下两个参数：</span></p>
<p><strong><span style="font-family:'Microsoft YaHei';font-size:14px;">auto.create.topics.enable   默认值true</span></strong></p>
<p><strong><span style="font-family:'Microsoft YaHei';font-size:14px;">delete.topic.enable   默认值false</span></strong></p>
            </div>
                </div>