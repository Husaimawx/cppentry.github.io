---
layout:     post
title:      kafka消息队列环境搭建
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<p><span style="color:rgb(66,66,66);">Kafka</span></p>
<p> </p>
<p>Kafka是由LinkedIn开发的一个分布式的消息系统，使用Scala编写，它以可水平扩展和高吞吐率而被广泛使用。目前越来越多的开源分布式处理系统如Cloudera、Apache Storm、Spark都支持与Kafka集成。InfoQ一直在紧密关注<a href="http://www.infoq.com/cn/kafka/" rel="nofollow"><span style="color:rgb(40,106,178);">Kafka的应用以及发展</span></a><span style="font-family:Helvetica;">，</span>“Kafka剖析”专栏将会从架构设计、实现、应用场景、性能等方面深度解析Kafka。</p>
<h2><span style="color:rgb(34,34,34);"><span style="font-family:Helvetica;">背景介绍</span></span></h2>
<h3><span style="color:rgb(34,34,34);">Kafka创建背景</span></h3>
<p>Kafka是一个消息系统，原本开发自LinkedIn，用作LinkedIn的活动流（Activity Stream）和运营数据处理管道（Pipeline）的基础。现在它已被<a href="https://cwiki.apache.org/confluence/display/KAFKA/Powered+By" rel="nofollow"><span style="color:rgb(40,106,178);"><span style="font-family:Helvetica;">多家不同类型的公司</span></span></a> 作为多种类型的数据管道和消息系统使用。</p>
<p><span style="font-family:Helvetica;">活动流数据是几乎所有站点在对其网站使用情况做报表时都要用到的数据中最常规的部分。活动数据包括页面访问量（</span>Page View）、被查看内容方面的信息以及搜索情况等内容。这种数据通常的处理方式是先把各种活动以日志的形式写入某种文件，然后周期性地对这些文件进行统计分析。运营数据指的是服务器的性能数据（CPU、IO使用率、请求时间、服务日志等等数据)。运营数据的统计方法种类繁多。</p>
<p><span style="font-family:Helvetica;">近年来，活动和运营数据处理已经成为了网站软件产品特性中一个至关重要的组成部分，这就需要一套稍微更加复杂的基础设施对其提供支持。</span></p>
<h3><span style="color:rgb(34,34,34);">Kafka简介</span></h3>
<p>Kafka是一种分布式的，基于发布/订阅的消息系统。主要设计目标如下：</p>
<p>· <span style="font-family:Helvetica;">以时间复杂度为</span>O(1)的方式提供消息持久化能力，即使对TB级以上数据也能保证常数时间复杂度的访问性能。</p>
<p>· <span style="font-family:Helvetica;">高吞吐率。即使在非常廉价的商用机器上也能做到单机支持每秒</span>100K条以上消息的传输。</p>
<p>· <span style="font-family:Helvetica;">支持</span>Kafka Server间的消息分区，及分布式消费，同时保证每个Partition内的消息顺序传输。</p>
<p>· <span style="font-family:Helvetica;">同时支持离线数据处理和实时数据处理。</span></p>
<p>· Scale out：支持在线水平扩展。</p>
<h3><span style="color:rgb(34,34,34);"><span style="font-family:Helvetica;">为何使用消息系统</span></span></h3>
<p>· <strong><span style="font-family:Helvetica;">解耦</span></strong></p>
<p><span style="font-family:Helvetica;">在项目启动之初来预测将来项目会碰到什么需求，是极其困难的。消息系统在处理过程中间插入了一个隐含的、基于数据的接口层，两边的处理过程都要实现这一接口。这允许你独立的扩展或修改两边的处理过程，只要确保它们遵守同样的接口约束。</span></p>
<p>· </p>
<p>· <strong><span style="font-family:Helvetica;">冗余</span></strong></p>
<p><span style="font-family:Helvetica;">有些情况下，处理数据的过程会失败。除非数据被持久化，否则将造成丢失。消息队列把数据进行持久化直到它们已经被完全处理，通过这一方式规避了数据丢失风险。许多消息队列所采用的</span>"插入-获取-删除"范式中，在把一个消息从队列中删除之前，需要你的处理系统明确的指出该消息已经被处理完毕，从而确保你的数据被安全的保存直到你使用完毕。</p>
<p>· </p>
<p>· <strong><span style="font-family:Helvetica;">扩展性</span></strong></p>
<p><span style="font-family:Helvetica;">因为消息队列解耦了你的处理过程，所以增大消息入队和处理的频率是很容易的，只要另外增加处理过程即可。不需要改变代码、不需要调节参数。扩展就像调大电力按钮一样简单。</span></p>
<p>· </p>
<p>· <strong><span style="font-family:Helvetica;">灵活性</span> &amp; 峰值处理能力</strong></p>
<p><span style="font-family:Helvetica;">在访问量剧增的情况下，应用仍然需要继续发挥作用，但是这样的突发流量并不常见；如果为以能处理这类峰值访问为标准来投入资源随时待命无疑是巨大的浪费。使用消息队列能够使关键组件顶住突发的访问压力，而不会因为突发的超负荷的请求而完全崩溃。</span></p>
<p>· </p>
<p>· <strong><span style="font-family:Helvetica;">可恢复性</span></strong></p>
<p><span style="font-family:Helvetica;">系统的一部分组件失效时，不会影响到整个系统。消息队列降低了进程间的耦合度，所以即使一个处理消息的进程挂掉，加入队列中的消息仍然可以在系统恢复后被处理。</span></p>
<p>· </p>
<p>· <strong><span style="font-family:Helvetica;">顺序保证</span></strong></p>
<p><span style="font-family:Helvetica;">在大多使用场景下，数据处理的顺序都很重要。大部分消息队列本来就是排序的，并且能保证数据会按照特定的顺序来处理。</span>Kafka保证一个Partition内的消息的有序性。</p>
<p>· </p>
<p>· <strong><span style="font-family:Helvetica;">缓冲</span></strong></p>
<p><span style="font-family:Helvetica;">在任何重要的系统中，都会有需要不同的处理时间的元素。例如，加载一张图片比应用过滤器花费更少的时间。消息队列通过一个缓冲层来帮助任务最高效率的执行</span>———写入队列的处理会尽可能的快速。该缓冲有助于控制和优化数据流经过系统的速度。</p>
<p>· </p>
<p>· <strong><span style="font-family:Helvetica;">异步通信</span></strong></p>
<p><span style="font-family:Helvetica;">很多时候，用户不想也不需要立即处理消息。消息队列提供了异步处理机制，允许用户把一个消息放入队列，但并不立即处理它。想向队列中放入多少消息就放多少，然后在需要的时候再去处理它们。</span></p>
<p>· </p>
<p>· <strong>Kafka<span style="font-family:'宋体';">核心</span><span style="font-family:Helvetica;">API</span></strong><span style="font-family:'宋体';">：</span></p>
<p>· <a href="http://orchome.com/190" rel="nofollow"><u><span style="color:rgb(0,0,255);">Producer API</span></u></a> <span style="font-family:'宋体';">允许应用程序发送数据流到</span>kafka<span style="font-family:'宋体';">集群中的</span><span style="font-family:Calibri;">topic</span><span style="font-family:'宋体';">。</span></p>
<p>· <a href="http://orchome.com/200" rel="nofollow"><u><span style="color:rgb(0,0,255);">Consumer API</span></u></a> <span style="font-family:'宋体';">允许应用程序从</span>kafka<span style="font-family:'宋体';">集群的</span><span style="font-family:Calibri;">topic</span><span style="font-family:'宋体';">中读取数据流。</span></p>
<p>· <a href="http://orchome.com/304" rel="nofollow"><u><span style="color:rgb(0,0,255);">Streams API</span></u></a> <span style="font-family:'宋体';">允许从输入</span>topic<span style="font-family:'宋体';">转换数据流到输出</span><span style="font-family:Calibri;">topic</span><span style="font-family:'宋体';">。</span></p>
<p>· <a href="http://orchome.com/455" rel="nofollow"><u><span style="color:rgb(0,0,255);">Connect API</span></u></a> <span style="font-family:'宋体';">通过实现连接器（</span>connector<span style="font-family:'宋体';">），不断地从一些源系统或应用程序中拉取数据到</span><span style="font-family:Calibri;">kafka</span><span style="font-family:'宋体';">，或从</span><span style="font-family:Calibri;">kafka</span><span style="font-family:'宋体';">提交数据到宿系统（</span><span style="font-family:Calibri;">sink
 system</span><span style="font-family:'宋体';">）或应用程序。</span></p>
<h3><span style="color:rgb(34,34,34);"><span style="font-family:Helvetica;">常用</span>Message Queue对比</span></h3>
<p>· </p>
<p><strong>RabbitMQ</strong></p>
<p>· </p>
<p>RabbitMQ是使用Erlang编写的一个开源的消息队列，本身支持很多的协议：AMQP，XMPP, SMTP, STOMP，也正因如此，它非常重量级，更适合于企业级的开发。同时实现了Broker构架，这意味着消息在发送给客户端时先在中心队列排队。对路由，负载均衡或者数据持久化都有很好的支持。</p>
<p>· </p>
<p>· </p>
<p><strong>Redis</strong></p>
<p>· </p>
<p>Redis是一个基于Key-Value对的NoSQL数据库，开发维护很活跃。虽然它是一个Key-Value数据库存储系统，但它本身支持MQ功能，所以完全可以当做一个轻量级的队列服务来使用。对于RabbitMQ和Redis的入队和出队操作，各执行100万次，每10万次记录一次执行时间。测试数据分为128Bytes、512Bytes、1K和10K四个不同大小的数据。实验表明：入队时，当数据比较小时Redis的性能要高于RabbitMQ，而如果数据大小超过了10K，Redis则慢的无法忍受；出队时，无论数据大小，Redis都表现出非常好的性能，而RabbitMQ的出队性能则远低于Redis。</p>
<p>· </p>
<p>· </p>
<p><strong>ZeroMQ</strong></p>
<p>· </p>
<p>ZeroMQ号称最快的消息队列系统，尤其针对大吞吐量的需求场景。ZeroMQ能够实现RabbitMQ不擅长的高级/复杂的队列，但是开发人员需要自己组合多种技术框架，技术上的复杂度是对这MQ能够应用成功的挑战。ZeroMQ具有一个独特的非中间件的模式，你不需要安装和运行一个消息服务器或中间件，因为你的应用程序将扮演这个服务器角色。你只需要简单的引用ZeroMQ程序库，可以使用NuGet安装，然后你就可以愉快的在应用程序之间发送消息了。但是ZeroMQ仅提供非持久性的队列，也就是说如果宕机，数据将会丢失。其中，Twitter的Storm
 0.9.0以前的版本中默认使用ZeroMQ作为数据流的传输（Storm从0.9版本开始同时支持ZeroMQ和Netty作为传输模块）。</p>
<p>· </p>
<p>· </p>
<p><strong>ActiveMQ</strong></p>
<p>· </p>
<p>ActiveMQ是Apache下的一个子项目。 类似于ZeroMQ，它能够以代理人和点对点的技术实现队列。同时类似于RabbitMQ，它少量代码就可以高效地实现高级应用场景。</p>
<p>· </p>
<p>· </p>
<p><strong>Kafka/Jafka</strong></p>
<p>· </p>
<p>Kafka是Apache下的一个子项目，是一个高性能跨语言分布式发布/订阅消息队列系统，而Jafka是在Kafka之上孵化而来的，即Kafka的一个升级版。具有以下特性：快速持久化，可以在O(1)的系统开销下进行消息持久化；高吞吐，在一台普通的服务器上既可以达到10W/s的吞吐速率；完全的分布式系统，Broker、Producer、Consumer都原生自动支持分布式，自动实现负载均衡；支持Hadoop数据并行加载，对于像Hadoop的一样的日志数据和离线分析系统，但又要求实时处理的限制，这是一个可行的解决方案。Kafka通过Hadoop的并行加载机制统一了在线和离线的消息处理。Apache
 Kafka相对于ActiveMQ是一个非常轻量级的消息系统，除了性能非常好之外，还是一个工作良好的分布式系统。</p>
<p>· </p>
<h2><span style="color:rgb(34,34,34);">Kafka架构</span></h2>
<h3><span style="color:rgb(34,34,34);">Terminology</span></h3>
<p>· <strong>Broker</strong></p>
<p>Kafka集群包含一个或多个服务器，这种服务器被称为broker</p>
<p>· </p>
<p>· <strong>Topic</strong></p>
<p><span style="font-family:Helvetica;">每条发布到</span>Kafka集群的消息都有一个类别，这个类别被称为Topic。（物理上不同Topic的消息分开存储，逻辑上一个Topic的消息虽然保存于一个或多个broker上但用户只需指定消息的Topic即可生产或消费数据而不必关心数据存于何处）</p>
<p>· </p>
<p>· <strong>Partition</strong></p>
<p>Parition是物理上的概念，每个Topic包含一个或多个Partition.</p>
<p>· </p>
<p>· <strong>Producer</strong></p>
<p><span style="font-family:Helvetica;">负责发布消息到</span>Kafka broker</p>
<p>· </p>
<p>· <strong>Consumer</strong></p>
<p><span style="font-family:Helvetica;">消息消费者，向</span>Kafka broker读取消息的客户端。</p>
<p>· </p>
<p>· <strong>Consumer Group</strong></p>
<p><span style="font-family:Helvetica;">每个</span>Consumer属于一个特定的Consumer Group（可为每个Consumer指定group name，若不指定group name则属于默认的group）。</p>
<p>· </p>
<p><br></p>
<h3><span style="color:rgb(34,34,34);">Kafk<img src="" alt="">a拓扑结构</span></h3>
<p> </p>
<p><span style="font-family:Helvetica;">如上图所示，一个典型的</span>Kafka集群中包含若干Producer（可以是web前端产生的Page View，或者是服务器日志，系统CPU、Memory等），若干broker（Kafka支持水平扩展，一般broker数量越多，集群吞吐率越高），若干Consumer Group，以及一个<a href="http://zookeeper.apache.org/" rel="nofollow"><span style="color:rgb(40,106,178);">Zookeeper</span></a><span style="font-family:Helvetica;">集群。</span>Kafka通过Zookeeper管理集群配置，选举leader，以及在Consumer
 Group发生变化时进行rebalance。Producer使用push模式将消息发布到broker，Consumer使用pull模式从broker订阅并消费消息。</p>
<p>· </p>
<p>Kafka <span style="font-family:'宋体';">优点</span></p>
<p>1. <span style="font-family:'宋体';">可扩展。</span>Kafka<span style="font-family:'宋体';">集群可以透明的扩展，增加新的服务器进集群。</span></p>
<p>2. <span style="font-family:'宋体';">高性能。</span>Kafka<span style="font-family:'宋体';">性能远超过传统的</span><span style="font-family:Arial;">ActiveMQ</span><span style="font-family:'宋体';">、</span><span style="font-family:Arial;">RabbitMQ</span><span style="font-family:'宋体';">等，</span><span style="font-family:Arial;">Kafka</span><span style="font-family:'宋体';">支持</span><span style="font-family:Arial;">Batch</span><span style="font-family:'宋体';">操作。</span></p>
<p>3. <span style="font-family:'宋体';">容错性。</span>Kafka<span style="font-family:'宋体';">每个</span><span style="font-family:Arial;">Partition</span><span style="font-family:'宋体';">数据会复制到几台服务器，当某个</span><span style="font-family:Arial;">Broker</span><span style="font-family:'宋体';">失效时，</span><span style="font-family:Arial;">Zookeeper</span><span style="font-family:'宋体';">将通知生产者和消费者从而使用其他的</span><span style="font-family:Arial;">Broker</span><span style="font-family:'宋体';">。</span></p>
<p>· </p>
<p>Kafka <span style="font-family:'宋体';">缺点</span></p>
<p>1. <span style="font-family:'宋体';">重复消息。</span>Kafka<span style="font-family:'宋体';">保证每条消息至少送达一次，虽然几率很小，但一条消息可能被送达多次。</span></p>
<p>2. <span style="font-family:'宋体';">消息乱序。</span>Kafka<span style="font-family:'宋体';">某一个固定的</span><span style="font-family:Arial;">Partition</span><span style="font-family:'宋体';">内部的消息是保证有序的，如果一个</span><span style="font-family:Arial;">Topic</span><span style="font-family:'宋体';">有多个</span><span style="font-family:Arial;">Partition</span><span style="font-family:'宋体';">，</span><span style="font-family:Arial;">partition</span><span style="font-family:'宋体';">之间的消息送达不保证有序。</span></p>
<p>3. <span style="font-family:'宋体';">复杂性。</span>Kafka<span style="font-family:'宋体';">需要</span><span style="font-family:Arial;">Zookeeper</span><span style="font-family:'宋体';">的支持，</span><span style="font-family:Arial;">Topic</span><span style="font-family:'宋体';">一般需要人工创建，部署和维护比一般</span><span style="font-family:Arial;">MQ</span><span style="font-family:'宋体';">成本更高。</span></p>
<h1><strong><span style="font-family:'宋体';">搭建环境</span></strong></h1>
<h2><strong>1. <span style="font-family:'宋体';">安装</span><span style="font-family:Verdana;">JDK</span></strong></h2>
<p><span style="color:rgb(17,17,17);">1.1 <span style="font-family:'宋体';">安装文件：</span><span style="font-family:Verdana;">http://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html</span><span style="font-family:'宋体';">下载</span><span style="font-family:Verdana;">Server
 JRE.</span></span><span style="color:rgb(17,17,17);"><br></span><span style="color:rgb(17,17,17);">1.2 <span style="font-family:'宋体';">安装完成后需要添加以下的环境变量（右键点击</span><span style="font-family:Verdana;">“</span><span style="font-family:'宋体';">我的电脑</span><span style="font-family:Verdana;">” -&gt; "</span><span style="font-family:'宋体';">高级系统设置</span><span style="font-family:Verdana;">"
 -&gt; "</span><span style="font-family:'宋体';">环境变量</span><span style="font-family:Verdana;">" </span><span style="font-family:'宋体';">）：</span></span></p>
<p>· </p>
<p><span style="color:rgb(17,17,17);">· </span><span style="color:rgb(17,17,17);">JAVA_HOME: C:\Program Files (x86)\Java\jre1.8.0_60<span style="font-family:'宋体';">（这个是默认安装路径，如果安装过程中更改了安装目录，把更改后的路径填上就行了）</span></span></p>
<p>· </p>
<p><span style="color:rgb(17,17,17);">· </span><span style="color:rgb(17,17,17);">PATH:
<span style="font-family:'宋体';">在现有的值后面添加</span><span style="font-family:Verdana;">"; %JAVA_HOME%\bin"</span></span></p>
<p><span style="color:rgb(17,17,17);">1.3 <span style="font-family:'宋体';">打开</span><span style="font-family:Verdana;">cmd</span><span style="font-family:'宋体';">运行
</span><span style="font-family:Verdana;">"java -version" </span><span style="font-family:'宋体';">查看当前系统</span><span style="font-family:Verdana;">Java</span><span style="font-family:'宋体';">的版本：</span></span></p>
<p><span style="color:rgb(17,17,17);"> <img src="" alt=""></span></p>
<p><span style="color:rgb(17,17,17);"> </span></p>
<h2><strong>2. <span style="font-family:'宋体';">安装</span><span style="font-family:Verdana;">Zookeeper</span></strong></h2>
<p><span style="color:rgb(17,17,17);">Kafka<span style="font-family:'宋体';">的运行依赖于</span><span style="font-family:Verdana;">Zookeeper</span><span style="font-family:'宋体';">，所以在运行</span><span style="font-family:Verdana;">Kafka</span><span style="font-family:'宋体';">之前我们需要安装并运行</span><span style="font-family:Verdana;">Zookeeper</span></span></p>
<p><span style="color:rgb(17,17,17);">2.1 <span style="font-family:'宋体';">下载安装文件：</span><span style="font-family:Verdana;"> http://zookeeper.apache.org/releases.html</span></span></p>
<p><span style="color:rgb(17,17,17);">2.2 <span style="font-family:'宋体';">解压文件（本文解压到</span><span style="font-family:Verdana;"> G:\zookeeper-3.4.8</span><span style="font-family:'宋体';">）</span></span></p>
<p><span style="color:rgb(17,17,17);">2.3 <span style="font-family:'宋体';">打开</span><span style="font-family:Verdana;">G:\zookeeper-3.4.8\conf</span><span style="font-family:'宋体';">，把</span><span style="font-family:Verdana;">zoo_sample.cfg</span><span style="font-family:'宋体';">重命名成</span><span style="font-family:Verdana;">zoo.cfg</span></span></p>
<p><span style="color:rgb(17,17,17);">2.4 <span style="font-family:'宋体';">从文本编辑器里打开</span><span style="font-family:Verdana;">zoo.cfg</span></span></p>
<p><span style="color:rgb(17,17,17);">2.5 <span style="font-family:'宋体';">把</span><span style="font-family:Verdana;">dataDir</span><span style="font-family:'宋体';">的值改成</span><span style="font-family:Verdana;">“:\zookeeper-3.4.8\data”</span></span></p>
<p><span style="color:rgb(17,17,17);">2.6 <span style="font-family:'宋体';">添加如下系统变量：</span></span></p>
<p>· </p>
<p><span style="color:rgb(17,17,17);">· </span><span style="color:rgb(17,17,17);">ZOOKEEPER_HOME: G:\zookeeper-3.4.8</span></p>
<p><span style="color:rgb(17,17,17);">· </span><span style="color:rgb(17,17,17);">Path:
<span style="font-family:'宋体';">在现有的值后面添加 </span><span style="font-family:Verdana;">";%ZOOKEEPER_HOME%\bin;"</span></span></p>
<p><span style="color:rgb(17,17,17);">2.7 <span style="font-family:'宋体';">运行</span><span style="font-family:Verdana;">Zookeeper:
</span><span style="font-family:'宋体';">打开</span><span style="font-family:Verdana;">cmd</span><span style="font-family:'宋体';">然后执行</span></span></p>
<p><span style="background:rgb(245,245,245);">zkserver </span></p>
<h2><strong>3. <span style="font-family:'宋体';">安装并运行</span><span style="font-family:Verdana;">Kafka</span></strong></h2>
<p><span style="color:rgb(17,17,17);">3.1 <span style="font-family:'宋体';">下载安装文件：</span><span style="font-family:Verdana;"> </span></span><a href="http://kafka.apache.org/downloads.html" rel="nofollow"><u><span style="color:rgb(0,102,204);">http://kafka.apache.org/downloads.html</span></u></a></p>
<p><span style="color:rgb(17,17,17);">3.2 <span style="font-family:'宋体';">解压文件（本文解压到</span><span style="font-family:Verdana;"> G:\kafka_2.11-0.10.0.1</span><span style="font-family:'宋体';">）</span></span></p>
<p><span style="color:rgb(17,17,17);">3.3 <span style="font-family:'宋体';">打开</span><span style="font-family:Verdana;">G:\kafka_2.11-0.10.0.1\config</span></span></p>
<p><span style="color:rgb(17,17,17);">3.4 <span style="font-family:'宋体';">从文本编辑器里打开 </span>
<span style="font-family:Verdana;">server.properties</span></span></p>
<p><span style="color:rgb(17,17,17);">3.5 <span style="font-family:'宋体';">把 </span><span style="font-family:Verdana;">log.dirs</span><span style="font-family:'宋体';">的值改成</span><span style="font-family:Verdana;"> “G:\kafka_2.11-0.10.0.1\kafka-logs”</span></span></p>
<p><span style="color:rgb(17,17,17);">3.6 <span style="font-family:'宋体';">打开</span><span style="font-family:Verdana;">cmd</span></span></p>
<p><span style="color:rgb(17,17,17);">3.7 <span style="font-family:'宋体';">进入</span><span style="font-family:Verdana;">kafka</span><span style="font-family:'宋体';">文件目录</span><span style="font-family:Verdana;">: cd /d G:\kafka_2.11-0.10.0.1\</span></span></p>
<p><span style="color:rgb(17,17,17);">3.8 <span style="font-family:'宋体';">输入并执行以打开</span><span style="font-family:Verdana;">kafka:</span></span></p>
<p><span style="background:rgb(245,245,245);">.\bin\windows\kafka-server-</span><span style="color:rgb(0,0,255);background:rgb(245,245,245);">start</span><span style="background:rgb(245,245,245);">.bat .\config\server.properties</span></p>
<p><span style="color:rgb(17,17,17);"> </span></p>
<h2><strong>4. <span style="font-family:'宋体';">创建</span><span style="font-family:Verdana;">topics</span></strong></h2>
<p><span style="color:rgb(17,17,17);">4.1 <span style="font-family:'宋体';">打开</span><span style="font-family:Verdana;">cmd
</span><span style="font-family:'宋体';">并进入</span><span style="font-family:Verdana;">G:\kafka_2.11-0.10.0.1\bin\windows</span></span></p>
<p><span style="color:rgb(17,17,17);">4.2 <span style="font-family:'宋体';">创建一个</span><span style="font-family:Verdana;">topic</span><span style="font-family:'宋体';">：</span></span></p>
<p><span style="background:rgb(245,245,245);">kafka-topics.bat --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test</span></p>
<p><span style="color:rgb(17,17,17);"> </span></p>
<h2><strong>5. 打开一个Producer：</strong></h2>
<p><span style="color:rgb(0,0,255);background:rgb(245,245,245);">cd</span><span style="background:rgb(245,245,245);"> /d G:\kafka_2.11-0.10.0.1\bin\windows</span></p>
<p><span style="background:rgb(245,245,245);">kafka-console-producer.bat --broker-list localhost:9092 --topic test</span></p>
<p><span style="color:rgb(17,17,17);"> </span></p>
<h2><strong>6. 打开一个Consumer:</strong></h2>
<p><span style="color:rgb(0,0,255);background:rgb(245,245,245);">cd</span><span style="background:rgb(245,245,245);"> /d G:\kafka_2.11-0.10.0.1\bin\windows</span></p>
<p><span style="background:rgb(245,245,245);">kafka-console-consumer.bat --zookeeper localhost:2181 --topic test</span></p>
<p><span style="color:rgb(17,17,17);"><span style="font-family:'宋体';">然后就可以在</span>Producer<span style="font-family:'宋体';">控制台窗口输入消息了。在消息输入过后，很快</span><span style="font-family:Verdana;">Consumer</span><span style="font-family:'宋体';">窗口就会显示出</span><span style="font-family:Verdana;">Producer</span><span style="font-family:'宋体';">发送的消息：</span></span></p>
<p><span style="color:rgb(17,17,17);"> </span></p>
<p> <img src="" alt=""></p>
<p> </p>
            </div>
                </div>