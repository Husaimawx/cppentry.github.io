---
layout:     post
title:      Kafka入门
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<h2 id="kafka是什么使用场景">kafka是什么、使用场景</h2>

<p>kafka是一个高吞吐的分布式消息队列系统。特点是生产者消费者模式，先进先出（FIFO）保证顺序，自己不丢数据，默认每隔7天清理数据。消息列队常见场景：系统之间解耦合、峰值压力缓冲、异步通信。</p>



<h2 id="kafka生产消息存储消息消费消息">kafka生产消息、存储消息、消费消息</h2>

<p><img src="https://img-blog.csdn.net/20180909202408441?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FuZHJvaWRfeHVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述" title=""> <br>
Kafka架构是由producer（消息生产者）、consumer（消息消费者）、borker(kafka集群的server，负责处理消息读、写请求，存储消息，在kafka cluster这一层这里，其实里面是有很多个broker)、topic（消息队列/分类相当于队列，里面有生产者和消费者模型）、zookeeper(元数据信息存在zookeeper中，包括：存储消费偏移量，topic话题信息，partition信息) 这些部分组成。 <br>
kafka里面的消息是有topic来组织的，简单的我们可以想象为一个队列，一个队列就是一个topic，然后它把每个topic又分为很多个partition，这个是为了做并行的，在每个partition内部消息强有序，相当于有序的队列，其中每个消息都有个序号offset，比如0到12，从前面读往后面写。一个partition对应一个broker，一个broker可以管多个partition，比如说，topic有6个partition，有两个broker，那每个broker就管3个partition。这个partition可以很简单想象为一个文件，当数据发过来的时候它就往这个partition上面append，追加就行，消息不经过内存缓冲，直接写入文件，kafka和很多消息系统不一样，很多消息系统是消费完了我就把它删掉，而kafka是根据时间策略删除，而不是消费完就删除，在kafka里面没有一个消费完这么个概念，只有过期这样一个概念。 <br>
producer自己决定往哪个partition里面去写，这里有一些的策略，譬如如果hash，不用多个partition之间去join数据了。consumer自己维护消费到哪个offset，每个consumer都有对应的group，group内是queue消费模型（各个consumer消费不同的partition，因此一个消息在group内只消费一次），group间是publish-subscribe消费模型，各个group各自独立消费，互不影响，因此一个消息在被每个group消费一次。</p>



<h2 id="kafka的特点">kafka的特点</h2>

<p>1.系统的特点 <br>
生产者消费者模型，FIFO <br>
Partition内部是FIFO的，partition之间呢不是FIFO的，当然我们可以把topic设为一个partition，这样就是严格的FIFO。 <br>
2.高性能 <br>
单节点支持上千个客户端，百MB/s吞吐，接近网卡的极限 <br>
3.持久性 <br>
消息直接持久化在普通磁盘上且性能好 <br>
直接写到磁盘中去，就是直接append到磁盘里去，这样的好处是直接持久化，数据不会丢失，第二个好处是顺序写，然后消费数据也是顺序的读，所以持久化的同时还能保证顺序，比较好，因为磁盘顺序读比较好。 <br>
4.分布式 <br>
数据副本冗余、流量负载均衡、可扩展 <br>
分布式，数据副本，也就是同一份数据可以到不同的broker上面去，也就是当一份数据，磁盘坏掉的时候，数据不会丢失，比如3个副本，就是在3个机器磁盘都坏掉的情况下数据才会丢，在大量使用情况下看这样是非常好的，负载均衡，可扩展，在线扩展，不需要停服务。 <br>
5.很灵活 <br>
消息长时间持久化+Client维护消费状态 <br>
消费方式非常灵活，第一原因是消息持久化时间跨度比较长，一天或者一星期等，第二消费状态自己维护消费到哪个地方了可以自定义消费偏移量。</p>



<h2 id="kafka集群搭建">kafka集群搭建</h2>

<p>1.上传kafka_2.10-0.8.2.2.tgz包到三个不同节点上，解压 <br>
<img src="https://img-blog.csdn.net/20180909203354238?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FuZHJvaWRfeHVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述" title=""> <br>
2.配置../ kafka_2.10-0.8.2.2/config/server.properties文件 <br>
节点编号：（不同节点按0,1,2,3整数来配置） <br>
<img src="https://img-blog.csdn.net/20180909203525149?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FuZHJvaWRfeHVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述" title=""> <br>
真实数据存储位置： <br>
<img src="https://img-blog.csdn.net/20180909203547104?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FuZHJvaWRfeHVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述" title=""> <br>
zookeeper的节点： <br>
<img src="https://img-blog.csdn.net/20180909203603641?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FuZHJvaWRfeHVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述" title=""> <br>
3.启动zookeeper集群。 <br>
4.三个节点上，启动kafka:</p>



<pre class="prettyprint"><code class=" hljs axapta">bin/kafka-<span class="hljs-keyword">server</span>-start.sh   config/<span class="hljs-keyword">server</span>.properties</code></pre>

<p>最好使用自己写的脚本启动，将启动命令写入到一个文件： <br>
<strong>（放在与bin同一级别下，注意创建后要修改权限：chmod 755 startkafka.sh）</strong></p>



<pre class="prettyprint"><code class=" hljs avrasm">nohup bin/kafka-server-start<span class="hljs-preprocessor">.sh</span>   config/server<span class="hljs-preprocessor">.properties</span> &gt; kafka<span class="hljs-preprocessor">.log</span> <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> &amp;</code></pre>

<p>5.相关命令 <br>
<strong>创建topic：</strong></p>



<pre class="prettyprint"><code class=" hljs brainfuck"><span class="hljs-string">.</span><span class="hljs-comment">/kafka</span><span class="hljs-literal">-</span><span class="hljs-comment">topics</span><span class="hljs-string">.</span><span class="hljs-comment">sh</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">zookeeper</span> <span class="hljs-comment">node3:2181</span><span class="hljs-string">,</span><span class="hljs-comment">node4:2181</span><span class="hljs-string">,</span><span class="hljs-comment">node5:2181</span>  <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">create</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">topic</span> <span class="hljs-comment">topic2017</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">partitions</span> <span class="hljs-comment">3</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">replication</span><span class="hljs-literal">-</span><span class="hljs-comment">factor</span> <span class="hljs-comment">3</span></code></pre>

<p><strong>用一台节点控制台来当kafka的生产者：</strong></p>



<pre class="prettyprint"><code class=" hljs lasso"><span class="hljs-built_in">.</span>/kafka<span class="hljs-attribute">-console</span><span class="hljs-attribute">-producer</span><span class="hljs-built_in">.</span>sh  <span class="hljs-subst">--</span>topic  topic2017 
<span class="hljs-subst">--</span>broker<span class="hljs-attribute">-list</span> node1:<span class="hljs-number">9092</span>,node2:<span class="hljs-number">9092</span>,node3:<span class="hljs-number">9092</span></code></pre>

<p><strong>用另一台节点控制台来当kafka的消费者：</strong></p>



<pre class="prettyprint"><code class=" hljs brainfuck"><span class="hljs-string">.</span><span class="hljs-comment">/kafka</span><span class="hljs-literal">-</span><span class="hljs-comment">console</span><span class="hljs-literal">-</span><span class="hljs-comment">consumer</span><span class="hljs-string">.</span><span class="hljs-comment">sh</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">zookeeper</span> <span class="hljs-comment">node3:2181</span><span class="hljs-string">,</span><span class="hljs-comment">node4:2181</span><span class="hljs-string">,</span><span class="hljs-comment">node5:2181</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">topic</span> <span class="hljs-comment">topic2017</span></code></pre>

<p><strong>查看kafka中topic列表:</strong></p>



<pre class="prettyprint"><code class=" hljs brainfuck"><span class="hljs-string">.</span><span class="hljs-comment">/kafka</span><span class="hljs-literal">-</span><span class="hljs-comment">topics</span><span class="hljs-string">.</span><span class="hljs-comment">sh</span>  <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">list</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">zookeeper</span> <span class="hljs-comment">node3:2181</span><span class="hljs-string">,</span><span class="hljs-comment">node4:2181</span><span class="hljs-string">,</span><span class="hljs-comment">node5:2181</span></code></pre>

<p><strong>查看kafka中topic的描述：</strong></p>



<pre class="prettyprint"><code class=" hljs brainfuck"><span class="hljs-string">.</span><span class="hljs-comment">/kafka</span><span class="hljs-literal">-</span><span class="hljs-comment">topics</span><span class="hljs-string">.</span><span class="hljs-comment">sh</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">describe</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">zookeeper</span> <span class="hljs-comment">node3:2181</span><span class="hljs-string">,</span><span class="hljs-comment">node4:2181</span><span class="hljs-string">,</span><span class="hljs-comment">node5:2181</span>  <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">topic</span> <span class="hljs-comment">topic2017</span></code></pre>

<p><img src="https://img-blog.csdn.net/20180909204306724?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FuZHJvaWRfeHVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述" title=""> <br>
注意：ISR是检查数据的完整性有哪些个节点。 <br>
<strong>查看zookeeper中topic相关信息：</strong> <br>
（1）启动zookeeper客户端：</p>



<pre class="prettyprint"><code class=" hljs avrasm">./zkCli<span class="hljs-preprocessor">.sh</span></code></pre>

<p>（2）查看topic相关信息：</p>



<pre class="prettyprint"><code class=" hljs mel"><span class="hljs-keyword">ls</span> /brokers/topics</code></pre>

<p>（3）查看消费者相关信息：</p>

<pre class="prettyprint"><code class=" hljs mel"><span class="hljs-keyword">ls</span> /consumers</code></pre>

<p>6.删除kafka中的数据 <br>
（1）在kafka集群中删除topic，当前topic被标记成删除</p>



<pre class="prettyprint"><code class=" hljs brainfuck"><span class="hljs-string">.</span><span class="hljs-comment">/kafka</span><span class="hljs-literal">-</span><span class="hljs-comment">topics</span><span class="hljs-string">.</span><span class="hljs-comment">sh</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">zookeeper</span> <span class="hljs-comment">node3:2181</span><span class="hljs-string">,</span><span class="hljs-comment">node4:2181</span><span class="hljs-string">,</span><span class="hljs-comment">node5:2181</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">delete</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">topic</span> <span class="hljs-comment">t1205</span></code></pre>

<p>在每台broker节点上删除当前这个topic对应的真实数据。 <br>
（2）进入zookeeper客户端，删除topic信息</p>



<pre class="prettyprint"><code class=" hljs ">rmr /brokers/topics/t1205</code></pre>

<p>（3）删除zookeeper中被标记为删除的topic信息</p>



<pre class="prettyprint"><code class=" hljs ">rmr /admin/delete_topics/t1205</code></pre>



<h2 id="kafka的leader的均衡机制">kafka的leader的均衡机制</h2>

<p>当一个broker停止或者crashes时，所有本来将它作为leader的分区将会把leader转移到其他broker上去，极端情况下，会导致同一个leader管理多个分区，导致负载不均衡，同时当这个broker重启时，如果这个broker不再是任何分区的leader,kafka的client也不会从这个broker来读取消息，从而导致资源的浪费。 <br>
kafka中有一个被称为优先副本（preferred replicas）的概念。如果一个分区有3个副本，且这3个副本的优先级别分别为0,1,2，根据优先副本的概念，0会作为leader 。当0节点的broker挂掉时，会启动1这个节点broker当做leader。当0节点的broker再次启动后，会自动恢复为此partition的leader。不会导致负载不均衡和资源浪费，这就是leader的均衡机制。 <br>
在配置文件conf/ server.properties中配置开启（默认就是开启）：</p>



<pre class="prettyprint"><code class=" hljs avrasm">auto<span class="hljs-preprocessor">.leader</span><span class="hljs-preprocessor">.rebalance</span><span class="hljs-preprocessor">.enable</span> true</code></pre>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>