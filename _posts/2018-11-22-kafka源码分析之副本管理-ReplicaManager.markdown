---
layout:     post
title:      kafka源码分析之副本管理-ReplicaManager
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/u014393917/article/details/52043040				</div>
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<h1><strong>ReplicaManager</strong></h1>
<p>说明<span style="font-family:Times New Roman">,</span><span style="font-family:SimSun">此组件用于管理</span><span style="font-family:Times New Roman">kafka</span><span style="font-family:SimSun">中各</span><span style="font-family:Times New Roman">partition</span><span style="font-family:SimSun">的副本信息</span><span style="font-family:Times New Roman">.,</span><span style="font-family:SimSun">实例依赖于</span><span style="font-family:Times New Roman">kafkaScheduler</span><span style="font-family:SimSun">与</span><span style="font-family:Times New Roman">logManager</span><span style="font-family:SimSun">的实例</span><span style="font-family:Times New Roman">.</span><span style="font-family:SimSun">并处理对消息的添加与读取的操作</span><span style="font-family:Times New Roman">.</span><span style="font-family:SimSun">副本间数据的同步等操作。</span></p>
<h2><strong><em>实例创建与启动</em></strong></h2>
<h3><strong>实例创建</strong></h3>
<p style="background:rgb(255,255,255)"><em><span style="color:#66e7a; background:rgb(255,255,255)">replicaManager </span></em><span style="color:#000000; background:rgb(255,255,255)">= </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">ReplicaManager(config</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><em><span style="color:#66e7a; background:rgb(255,255,255)">metrics</span></em><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">time</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><em><span style="color:#66e7a; background:rgb(255,255,255)">kafkaMetricsTime</span></em><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">  </span><em><span style="color:#66e7a; background:rgb(255,255,255)">zkUtils</span></em><span style="color:#cc7832; background:rgb(255,255,255)">, </span><em><span style="color:#66e7a; background:rgb(255,255,255)">kafkaScheduler</span></em><span style="color:#cc7832; background:rgb(255,255,255)">, </span><em><span style="color:#66e7a; background:rgb(255,255,255)">logManager</span></em><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">  </span><em><span style="color:#66e7a; background:rgb(255,255,255)">isShuttingDown</span></em><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><em><span style="color:#66e7a; background:rgb(255,255,255)">replicaManager</span></em><span style="color:#000000; background:rgb(255,255,255)">.startup()</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">首先先看看这个实例生成时,需要进行处理的流程:</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里生成一个epoch的值,这个值用于在leader发生变化后的修改.</span></p>
<p style="background:rgb(255,255,255)"><em><span style="color:#808080; background:rgb(255,255,255)">/* epoch of the controller that last changed the leader */</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span></em><span style="color:#80800; background:rgb(255,255,255)">@volatile </span><strong><span style="color:#0080; background:rgb(255,255,255)">var </span></strong><em><span style="color:#66e7a; background:rgb(255,255,255)">controllerEpoch</span></em><span style="color:#000000; background:rgb(255,255,255)">: </span><span style="color:#cc7832; background:rgb(255,255,255)">Int </span><span style="color:#000000; background:rgb(255,255,255)">= KafkaController.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">InitialControllerEpoch </span></em><span style="color:#000000; background:rgb(255,255,255)">- </span><span style="color:#00ff; background:rgb(255,255,255)">1</span><span style="color:#00ff; background:rgb(255,255,255)"><br>
</span><strong><span style="color:#0080; background:rgb(255,255,255)">private val </span></strong><em><span style="color:#66e7a; background:rgb(255,255,255)">localBrokerId </span></em><span style="color:#000000; background:rgb(255,255,255)">= config.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">brokerId</span><span style="color:#66e7a; background:rgb(255,255,255)"><br>
</span></em><strong><span style="color:#0080; background:rgb(255,255,255)">private val </span></strong><em><span style="color:#66e7a; background:rgb(255,255,255)">allPartitions </span></em><span style="color:#000000; background:rgb(255,255,255)">= </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">Pool[(</span><span style="color:#20999d; background:rgb(255,255,255)">String</span><span style="color:#cc7832; background:rgb(255,255,255)">, Int</span><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">Partition]</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><strong><span style="color:#0080; background:rgb(255,255,255)">private val </span></strong><em><span style="color:#66e7a; background:rgb(255,255,255)">replicaStateChangeLock </span></em><span style="color:#000000; background:rgb(255,255,255)">= </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">Object</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里生成一个用于同步partition副本数据线程的管理组件.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><em><span style="color:#66e7a; background:rgb(255,255,255)">replicaFetcherManager </span></em><span style="color:#000000; background:rgb(255,255,255)">= </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">ReplicaFetcherManager(config</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><strong><span style="color:#0080; background:rgb(255,255,255)">this</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">metrics</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">jTime</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">       </span><span style="color:#000000; background:rgb(255,255,255)">threadNamePrefix)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><strong><span style="color:#0080; background:rgb(255,255,255)">private val </span></strong><em><span style="color:#66e7a; background:rgb(255,255,255)">highWatermarkCheckPointThreadStarted </span></em><span style="color:#000000; background:rgb(255,255,255)">= </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">AtomicBoolean(</span><strong><span style="color:#0080; background:rgb(255,255,255)">false</span></strong><span style="color:#000000; background:rgb(255,255,255)">)</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里读取每个logdir的目录下的文件</span><strong><span style="color:#0800; background:rgb(255,255,255)">replication-offset-checkpoint</span></strong><span style="color:#000000; background:rgb(255,255,255)">,这个文件中记录了每个目录下记录的partition对应的最后一个checkpoint的offset值.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><em><span style="color:#66e7a; background:rgb(255,255,255)">highWatermarkCheckpoints </span></em><span style="color:#000000; background:rgb(255,255,255)">= config.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">logDirs</span></em><span style="color:#000000; background:rgb(255,255,255)">.map(dir =&gt; (</span></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">File(dir).getAbsolutePath</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">OffsetCheckpoint(</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">File(dir</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#000000; background:rgb(255,255,255)">ReplicaManager.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">HighWatermarkFilename</span></em><span style="color:#000000; background:rgb(255,255,255)">))</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">)</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">).toMap</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><strong><span style="color:#0080; background:rgb(255,255,255)">private var </span></strong><em><span style="color:#66e7a; background:rgb(255,255,255)">hwThreadInitialized </span></em><span style="color:#000000; background:rgb(255,255,255)">= </span><strong><span style="color:#0080; background:rgb(255,255,255)">false</span><span style="color:#0080; background:rgb(255,255,255)"><br>
</span><span style="color:#0080; background:rgb(255,255,255)">this</span></strong><span style="color:#000000; background:rgb(255,255,255)">.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">logIdent </span></em><span style="color:#000000; background:rgb(255,255,255)">= </span><strong><span style="color:#0800; background:rgb(255,255,255)">"[Replica Manager on Broker " </span></strong><span style="color:#000000; background:rgb(255,255,255)">+ </span><em><span style="color:#66e7a; background:rgb(255,255,255)">localBrokerId </span></em><span style="color:#000000; background:rgb(255,255,255)">+ </span><strong><span style="color:#0800; background:rgb(255,255,255)">"]: "</span><span style="color:#0800; background:rgb(255,255,255)"><br>
</span><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><em><span style="color:#66e7a; background:rgb(255,255,255)">stateChangeLogger </span></em><span style="color:#000000; background:rgb(255,255,255)">= KafkaController.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">stateChangeLogger</span></em></p>
<p style="background:rgb(255,255,255)"><em><span style="color:#66e7a; background:rgb(255,255,255)"> </span></em></p>
<p style="background:rgb(255,255,255)"><em><span style="color:#66e7a; background:rgb(255,255,255)">这里定义一个用于存储partition的leader改变顺序的集合.</span><span style="color:#66e7a; background:rgb(255,255,255)"><br>
</span></em><strong><span style="color:#0080; background:rgb(255,255,255)">private val </span></strong><em><span style="color:#66e7a; background:rgb(255,255,255)">isrChangeSet</span></em><span style="color:#000000; background:rgb(255,255,255)">: mutable.Set[TopicAndPartition] = </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">      </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">mutable.HashSet[TopicAndPartition]()</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><strong><span style="color:#0080; background:rgb(255,255,255)">private val </span></strong><em><span style="color:#66e7a; background:rgb(255,255,255)">lastIsrChangeMs </span></em><span style="color:#000000; background:rgb(255,255,255)">= </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">AtomicLong(System.</span><em><span style="color:#000000; background:rgb(255,255,255)">currentTimeMillis</span></em><span style="color:#000000; background:rgb(255,255,255)">())</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><strong><span style="color:#0080; background:rgb(255,255,255)">private val </span></strong><em><span style="color:#66e7a; background:rgb(255,255,255)">lastIsrPropagationMs </span></em><span style="color:#000000; background:rgb(255,255,255)">= </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">AtomicLong(System.</span><em><span style="color:#000000; background:rgb(255,255,255)">currentTimeMillis</span></em><span style="color:#000000; background:rgb(255,255,255)">())</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里读取配置</span><strong><span style="color:#0800; background:rgb(255,255,255)">producer.purgatory.purge.interval.requests</span></strong><span style="color:#000000; background:rgb(255,255,255)">,默认值1000,用于在procucer的ack设置是-1或者1时,跟踪消息是否添加成功,使用DelayedProduce实现.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><em><span style="color:#66e7a; background:rgb(255,255,255)">delayedProducePurgatory </span></em><span style="color:#000000; background:rgb(255,255,255)">= </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">DelayedOperationPurgatory[DelayedProduce](</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  purgatoryName = </span><strong><span style="color:#0800; background:rgb(255,255,255)">"Produce"</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">config.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">brokerId</span></em><span style="color:#cc7832; background:rgb(255,255,255)">,</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">  </span><span style="color:#000000; background:rgb(255,255,255)">config.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">producerPurgatoryPurgeIntervalRequests</span></em><span style="color:#000000; background:rgb(255,255,255)">)</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里读取配置</span><strong><span style="color:#0800; background:rgb(255,255,255)">fetch.purgatory.purge.interval.requests</span></strong><span style="color:#000000; background:rgb(255,255,255)">,默认值1000,</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><em><span style="color:#66e7a; background:rgb(255,255,255)">delayedFetchPurgatory </span></em><span style="color:#000000; background:rgb(255,255,255)">= </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">DelayedOperationPurgatory[DelayedFetch](</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  purgatoryName = </span><strong><span style="color:#0800; background:rgb(255,255,255)">"Fetch"</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">config.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">brokerId</span></em><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">  </span><span style="color:#000000; background:rgb(255,255,255)">config.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">fetchPurgatoryPurgeIntervalRequests</span></em><span style="color:#000000; background:rgb(255,255,255)">)</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<h3><strong>启动<span style="font-family:Arial">ReplicaManager</span><span style="font-family:SimSun">实例</span><span style="font-family:Arial">:</span></strong></h3>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0080; background:rgb(228,228,255)">def</span><span style="color:#0080; background:rgb(255,255,255)"> </span></strong><span style="color:#000000; background:rgb(255,255,255)">startup() {</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里生成两个后台的调度线程,第一个用于定期检查partition对应的isr是否有心跳过期的isr,</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这个定期的检查周期通过</span><strong><span style="color:#0800; background:rgb(255,255,255)">replica.lag.time.max.ms</span></strong><span style="color:#000000; background:rgb(255,255,255)">配置.默认是10秒.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">第二个用于定期通知zk的对应路径,有partition的isr发生改变.定期发送消息的周期是2.5秒.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><em><span style="color:#808080; background:rgb(255,255,255)">// start ISR expiration thread</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">  </span></em><span style="color:#000000; background:rgb(255,255,255)">scheduler.schedule(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"isr-expiration"</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">maybeShrinkIsr</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">      </span><span style="color:#000000; background:rgb(255,255,255)">period = config.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">replicaLagTimeMaxMs</span></em><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">unit = TimeUnit.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">MILLISECONDS</span></em><span style="color:#000000; background:rgb(255,255,255)">)</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><span style="color:#000000; background:rgb(228,228,255)">scheduler.schedule(</span><strong><span style="color:#0800; background:rgb(228,228,255)">"isr-change-propagation"</span></strong><span style="color:#cc7832; background:rgb(228,228,255)">, </span><span style="color:#000000; background:rgb(228,228,255)">maybePropagateIsrChanges</span><span style="color:#cc7832; background:rgb(228,228,255)">,</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(228,228,255)">      </span><span style="color:#000000; background:rgb(228,228,255)">period = </span><span style="color:#00ff; background:rgb(228,228,255)">2500L</span><span style="color:#cc7832; background:rgb(228,228,255)">, </span><span style="color:#000000; background:rgb(228,228,255)">unit = TimeUnit.MILLISECONDS)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<h3><strong>partition<span style="font-family:SimSun">的</span><span style="font-family:Arial">leader</span><span style="font-family:SimSun">定时副本过期检查</span><span style="font-family:Arial">:</span></strong></h3>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">通过ReplicaManager启动时,定期调用maybeShrinkIsr函数来进行处理,</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">当follower的副本向leader的副本进行数据同步操作时，如果副本已经读取到leader的log的最后的offset部分时，表示这个副本同步达到最新的副本状态，会更新每一个副本的心跳时间，这个函数定期检查这个心跳时间是否超过了配置的时间，如果超过了，就会移出这个副本在isr上的选择。</span></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0080; background:rgb(255,255,255)">private def </span></strong><span style="color:#000000; background:rgb(255,255,255)">maybeShrinkIsr(): </span><span style="color:#cc7832; background:rgb(255,255,255)">Unit </span><span style="color:#000000; background:rgb(255,255,255)">= {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  trace(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Evaluating ISR list of partitions to see which replicas can be removed from </span></strong></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0800; background:rgb(255,255,255)">          the ISR"</span></strong><span style="color:#000000; background:rgb(255,255,255)">)</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">直接迭代当前的broker中所有的分配的partition的集合,并调用partition内部的处理函数.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">在ReplicaManager中的allPartitions集合存储有当前broker中所有的partition.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><em><span style="color:#66e7a; background:rgb(255,255,255)">allPartitions</span></em><span style="color:#000000; background:rgb(255,255,255)">.values.foreach(partition =&gt; </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">      partition.maybeShrinkIsr(config.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">replicaLagTimeMaxMs</span></em><span style="color:#000000; background:rgb(255,255,255)">))</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">接下来看看Partition中处理isr的过期检查流程:</span></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0080; background:rgb(228,228,255)">def</span><span style="color:#0080; background:rgb(255,255,255)"> </span></strong><span style="color:#000000; background:rgb(255,255,255)">maybeShrinkIsr(replicaMaxLagTimeMs: </span><span style="color:#cc7832; background:rgb(255,255,255)">Long</span><span style="color:#000000; background:rgb(255,255,255)">) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">leaderHWIncremented = </span><em><span style="color:#000000; background:rgb(255,255,255)">inWriteLock</span></em><span style="color:#000000; background:rgb(255,255,255)">(</span><em><span style="color:#66e7a; background:rgb(255,255,255)">leaderIsrUpdateLock</span></em><span style="color:#000000; background:rgb(255,255,255)">) {</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里首先检查当前的partition的loader是否是当前的broker,如果不是,这个地方得到的值是false,</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">否则执行leaderReplica的处理部分</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    leaderReplicaIfLocal() </span><strong><span style="color:#0080; background:rgb(255,255,255)">match </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><strong><span style="color:#0080; background:rgb(255,255,255)">case </span></strong><em><span style="color:#000000; background:rgb(255,255,255)">Some</span></em><span style="color:#000000; background:rgb(255,255,255)">(leaderReplica) =&gt;</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">当前的partition在当前的机器上是leader时,检查这个partition的所有的副本中,是否有过期的副本,也就是超过了指定的时间没有更新心跳的副本,得到这个过期的副本集合.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">outOfSyncReplicas = getOutOfSyncReplicas(leaderReplica</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">              </span><span style="color:#000000; background:rgb(255,255,255)">replicaMaxLagTimeMs)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">if</span></strong><span style="color:#000000; background:rgb(255,255,255)">(outOfSyncReplicas.size &gt; </span><span style="color:#00ff; background:rgb(255,255,255)">0</span><span style="color:#000000; background:rgb(255,255,255)">) {</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里表示当前的partition中有副本过期,得到新的未过期的副本.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">          </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">newInSyncReplicas = </span><em><span style="color:#66e7a; background:rgb(255,255,255)">inSyncReplicas </span></em><span style="color:#000000; background:rgb(255,255,255)">-- outOfSyncReplicas</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">          </span><em><span style="color:#000000; background:rgb(255,255,255)">assert</span></em><span style="color:#000000; background:rgb(255,255,255)">(newInSyncReplicas.size &gt; </span><span style="color:#00ff; background:rgb(255,255,255)">0</span><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">          info(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Shrinking ISR for partition [%s,%d] from %s to %s"</span></strong><span style="color:#000000; background:rgb(255,255,255)">.format(topic</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">             </span><span style="color:#000000; background:rgb(255,255,255)">partitionId</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">             </span><em><span style="color:#66e7a; background:rgb(255,255,255)">inSyncReplicas</span></em><span style="color:#000000; background:rgb(255,255,255)">.map(_.brokerId).mkString(</span><strong><span style="color:#0800; background:rgb(255,255,255)">","</span></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">             </span><span style="color:#000000; background:rgb(255,255,255)">newInSyncReplicas.map(_.brokerId).mkString(</span><strong><span style="color:#0800; background:rgb(255,255,255)">","</span></strong><span style="color:#000000; background:rgb(255,255,255)">)))</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">updateIsr函数用于对副本改变后的isr的更新,具体流程:</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">1,在zk中</span><strong><span style="color:#0800; background:rgb(255,255,255)">/brokers/topics/topicname/partitions/paritionid/</span><span style="color:#0800; background:rgb(228,228,255)">state</span></strong><span style="color:#000000; background:rgb(255,255,255)">路径下更新最新的isr记录.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">2,在ReplicaManager中的</span><span style="color:#000000; background:rgb(228,228,255)">isrChangeSet</span><span style="color:#000000; background:rgb(255,255,255)">集合中添加副本变化的TopicAndPartition,标记下这个partition的isr被修改.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">3,更新</span><em><span style="color:#66e7a; background:rgb(255,255,255)">inSyncReplicas</span></em><span style="color:#000000; background:rgb(255,255,255)">集合为新的副本集合.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">          </span><em><span style="color:#808080; background:rgb(255,255,255)">// update ISR in zk and in cache</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">          </span></em><span style="color:#000000; background:rgb(255,255,255)">updateIsr(newInSyncReplicas)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">          </span><em><span style="color:#808080; background:rgb(255,255,255)">// we may need to increment high watermark since ISR could be down to 1</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">          </span></em><span style="color:#000000; background:rgb(255,255,255)">replicaManager.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">isrShrinkRate</span></em><span style="color:#000000; background:rgb(255,255,255)">.mark()</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里根据当前leaderReplica的副本的</span><span style="color:#000000; background:rgb(228,228,255)">highWatermark</span><span style="color:#000000; background:rgb(255,255,255)">与当前的partition中最大的offsetMeta进行比较,如果leader对应的最高的消息的offset小于当前partition中最大的offsetMeta对应的offset,或者当前leader对应highWatermark的segment的baseoffset小于partition中最大的offset对应的segment的baseoffset时,这个函数返回true,否则返回false.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">          maybeIncrementLeaderHW(leaderReplica)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        } </span><strong><span style="color:#0080; background:rgb(255,255,255)">else </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">          </span><strong><span style="color:#0080; background:rgb(255,255,255)">false</span><span style="color:#0080; background:rgb(255,255,255)"><br>
</span><span style="color:#0080; background:rgb(255,255,255)">        </span></strong><span style="color:#000000; background:rgb(255,255,255)">}</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><strong><span style="color:#0080; background:rgb(255,255,255)">case </span></strong><span style="color:#000000; background:rgb(255,255,255)">None =&gt; </span><strong><span style="color:#0080; background:rgb(255,255,255)">false </span></strong><em><span style="color:#808080; background:rgb(255,255,255)">// do nothing if no longer leader</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    </span></em><span style="color:#000000; background:rgb(255,255,255)">}</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">如果上面的处理得到的返回值是true,表示isr有发生过变化,尝试执行当前的副本中针对此partition当前挂起的任务.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">挂起的任务处理包含有fetch与produce的操作.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><em><span style="color:#808080; background:rgb(255,255,255)">// some delayed operations may be unblocked after HW changed</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">  </span></em><strong><span style="color:#0080; background:rgb(228,228,255)">if </span></strong><span style="color:#000000; background:rgb(228,228,255)">(leaderHWIncremented)</span><span style="color:#000000; background:rgb(228,228,255)"><br>
</span><span style="color:#000000; background:rgb(228,228,255)">    tryCompleteDelayedRequests()</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<h3><strong>把<span style="font-family:Arial">isr</span><span style="font-family:SimSun">的改变更新到</span><span style="font-family:Arial">zk</span><span style="font-family:SimSun">中</span></strong></h3>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这个由一个定时器每2500ms执行一次</span><span style="color:#000000; background:rgb(228,228,255)">maybePropagateIsrChanges</span><span style="color:#000000; background:rgb(255,255,255)">函数。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这个函数在定时执行的maybeShrinkIsr函数中如果发现有副本没有心跳更新时，会执行partition的updateIsr的操作，这个操作会把isr发生过变化的partition记录到</span><span style="color:#000000; background:rgb(228,228,255)">isrChangeSet</span><span style="color:#000000; background:rgb(255,255,255)">集合中.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这个函数在有partition的副本心跳超时后，把isr的变化对应的partition更新到zk中的</span><strong><span style="color:#0800; background:rgb(255,255,255)">/isr_change_notification/isr_change_</span></strong><span style="color:#000000; background:rgb(255,255,255)">节点中。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">更新条件，isrChangeSet集合不为空，最后一次有副本超时的更新已经超过了5秒或者上一次更新到zk中超时的变化信息已经超过了60秒，</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span><em><span style="color:#808080; background:rgb(255,255,255)">*/</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span></em><strong><span style="color:#0080; background:rgb(255,255,255)">def </span></strong><span style="color:#000000; background:rgb(255,255,255)">maybePropagateIsrChanges() {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">now = System.</span><em><span style="color:#000000; background:rgb(255,255,255)">currentTimeMillis</span></em><span style="color:#000000; background:rgb(255,255,255)">()</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><em><span style="color:#66e7a; background:rgb(255,255,255)">isrChangeSet </span></em><span style="color:#000000; background:rgb(255,255,255)">synchronized {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">if </span></strong><span style="color:#000000; background:rgb(255,255,255)">(</span><em><span style="color:#66e7a; background:rgb(255,255,255)">isrChangeSet</span></em><span style="color:#000000; background:rgb(255,255,255)">.nonEmpty &amp;&amp;</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      (</span><em><span style="color:#66e7a; background:rgb(255,255,255)">lastIsrChangeMs</span></em><span style="color:#000000; background:rgb(255,255,255)">.get() </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">          + ReplicaManager.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">IsrChangePropagationBlackOut </span></em><span style="color:#000000; background:rgb(255,255,255)">&lt; now ||</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">               </span><em><span style="color:#66e7a; background:rgb(255,255,255)">lastIsrPropagationMs</span></em><span style="color:#000000; background:rgb(255,255,255)">.get() </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">               + ReplicaManager.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">IsrChangePropagationInterval </span></em><span style="color:#000000; background:rgb(255,255,255)">&lt; now)</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">      ) </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">    {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      ReplicationUtils.</span><em><span style="color:#000000; background:rgb(255,255,255)">propagateIsrChanges</span></em><span style="color:#000000; background:rgb(255,255,255)">(zkUtils</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><em><span style="color:#66e7a; background:rgb(255,255,255)">isrChangeSet</span></em><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><em><span style="color:#66e7a; background:rgb(255,255,255)">isrChangeSet</span></em><span style="color:#000000; background:rgb(255,255,255)">.clear()</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><em><span style="color:#66e7a; background:rgb(255,255,255)">lastIsrPropagationMs</span></em><span style="color:#000000; background:rgb(255,255,255)">.set(now)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<h2><strong><em>副本的<span style="font-family:Arial">leader</span><span style="font-family:SimSun">的切换处理</span></em></strong></h2>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这个部分在kafka leader的节点处理对partition的leader的变化后，会向对应的broker节点发起一个LeaderAndIsr的请求，这个请求主要用于处理副本变成leader或者从leader变化成follower时需要执行的操作。这个分析在KafkaApis中的处理partition的LeaderAndIsr的请求部分进行了分析，这里不做明细的说明，说明下主要流程：</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">如果副本从follower切换成了leader节点，那么这个副本中用于同步数据的线程会被停止，同时修改partition对应的leaderId为partition的leader节点对应的brokerId.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">如果副本从leader切换成follower时，在这个节点的数据同步线程中加入这个partition的同步,设置这个partition对应的leaderId的值为当前的leader节点的id.</span></p>
<h2><strong><em>处理消息追加</em></strong></h2>
<p style="background:rgb(255,255,255)">首先行看看这个函数的定义部分,最后的responseCallback是一个函数,这个函数由调用方来进行实现,主要是对消息添加后的状态的处理,如Produce的请求时,会根据这个响应的消息加上认证失败的消息判断是否需要向client端发送失败的数据回去.第三个参数表示是否是内部操作,如果是Produce时,这个参数为false(clientId不是<strong><span style="color:#0800; background:rgb(255,255,255)">__admin_client</span></strong>).当一个produce向对应的partition写入消息或者针对consumer（使用的topic来记录group与offset信息时）的syncGroup与commitOffset时，会执行这个操作。</p>
<p style="background:rgb(255,255,255)"> </p>
<h3><strong>appendMessages<span style="font-family:SimSun">函数</span></strong></h3>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">在produce向broker写入数据时，会通过replicaManager中的appendMessages来进行消息的添加操作。这个函数的最后一个参数是一个回调函数，也就是上面处理produce请求中定义的函数，用于根据ack的操作，向client端回写操作的情况。</span></p>
<p style="background:rgb(255,255,255)"><em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span></em><strong><span style="color:#0080; background:rgb(255,255,255)">def </span></strong><span style="color:#000000; background:rgb(255,255,255)">appendMessages(timeout: </span><span style="color:#cc7832; background:rgb(255,255,255)">Long,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                   </span><span style="color:#000000; background:rgb(255,255,255)">requiredAcks: </span><span style="color:#cc7832; background:rgb(255,255,255)">Short,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                   </span><span style="color:#000000; background:rgb(255,255,255)">internalTopicsAllowed: </span><span style="color:#cc7832; background:rgb(255,255,255)">Boolean,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                   </span><span style="color:#000000; background:rgb(255,255,255)">messagesPerPartition: Map[TopicAndPartition</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">MessageSet]</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><span style="color:#000000; background:rgb(255,255,255)">responseCallback: Map[TopicAndPartition</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">ProducerResponseStatus] =&gt; </span><span style="color:#cc7832; background:rgb(255,255,255)">Unit</span><span style="color:#000000; background:rgb(255,255,255)">) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">if </span></strong><span style="color:#000000; background:rgb(255,255,255)">(isValidRequiredAcks(requiredAcks)) {</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">如果ack的值是一个正确的值时，通过appendToLocalLog函数，向log中写入对应的partition的消息,并得到写入后的状态值。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">sTime = SystemTime.</span><em><span style="color:#000000; background:rgb(255,255,255)">milliseconds</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">localProduceResults = appendToLocalLog(internalTopicsAllowed</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">            </span><span style="color:#000000; background:rgb(255,255,255)">messagesPerPartition</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">requiredAcks)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    debug(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Produce to local log in %d ms"</span></strong><span style="color:#000000; background:rgb(255,255,255)">.format(SystemTime.</span><em><span style="color:#000000; background:rgb(255,255,255)">milliseconds </span></em><span style="color:#000000; background:rgb(255,255,255)">- sTime))</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里生成produce的写入消息的状态，记录每个partition中写入后的错误代码，开始的offset与结束的offset的值。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">produceStatus = localProduceResults.map {</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">       </span><strong><span style="color:#0080; background:rgb(255,255,255)">case </span></strong><span style="color:#000000; background:rgb(255,255,255)">(topicAndPartition</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">result) =&gt;</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">          topicAndPartition -&gt;</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">              </span><em><span style="color:#000000; background:rgb(255,255,255)">ProducePartitionStatus</span></em><span style="color:#000000; background:rgb(255,255,255)">(</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">                result.info.lastOffset + </span><span style="color:#00ff; background:rgb(255,255,255)">1</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><em><span style="color:#808080; background:rgb(255,255,255)">// required offset</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">                </span><span style="color:#000000; background:rgb(255,255,255)">ProducerResponseStatus</span></em><span style="color:#000000; background:rgb(255,255,255)">(result.errorCode</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">result.info.firstOffset)) </span><em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    </span></em><span style="color:#000000; background:rgb(255,255,255)">}</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">if </span></strong><span style="color:#000000; background:rgb(255,255,255)">(delayedRequestRequired(requiredAcks</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">messagesPerPartition</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">              </span><span style="color:#000000; background:rgb(255,255,255)">localProduceResults)) {</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这种情况下，ack的值是默认的-1,同时向对应的partition的log中写入消息失败的个数小于请求的消息的partition的个数，表示这里面有成功写入到log的消息，根据produce的ack的超时时间，与每个partition的写入消息的状态，等待延时处理并发送结果给client端。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><em><span style="color:#808080; background:rgb(255,255,255)">// create delayed produce operation</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">      </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">produceMetadata = </span><em><span style="color:#000000; background:rgb(255,255,255)">ProduceMetadata</span></em><span style="color:#000000; background:rgb(255,255,255)">(requiredAcks</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">produceStatus)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">delayedProduce = </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">DelayedProduce(timeout</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">produceMetadata</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><strong><span style="color:#0080; background:rgb(255,255,255)">this</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">,</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">             </span><span style="color:#000000; background:rgb(255,255,255)">responseCallback)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">      </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">producerRequestKeys = messagesPerPartition.keys.map(</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">              </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">TopicPartitionOperationKey(_)).toSeq</span></p>
<p style="background:rgb(255,255,255)"><em><span style="color:#808080; background:rgb(255,255,255)"> </span></em></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里最长等待达到ack的超时时间的等待，如果都还没有得到ack的响应，向client端返回的消息就是对应的错误代码，</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">处理流程，迭代操作请求消息的所有的partition的状态：</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">1,如果当前的broker中找不到对应的partition的结果，错误代码</span><span style="color:#000000; background:rgb(228,228,255)">UnknownTopicOrPartitionCode</span><span style="color:#000000; background:rgb(255,255,255)">。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">2,如果partition对应的副本个数小于配置的最少副本个数的值，</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">               错误代码</span><span style="color:#000000; background:rgb(228,228,255)">NotEnoughReplicasAfterAppendCode</span><span style="color:#000000; background:rgb(255,255,255)">。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">3,如果partition的副本在当前的broker中不是leader的副本，</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">               错误代码</span><span style="color:#000000; background:rgb(228,228,255)">NotLeaderForPartitionCode</span><span style="color:#000000; background:rgb(255,255,255)">。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">4,正常完成添加消息的操作，错误代码</span><span style="color:#000000; background:rgb(228,228,255)">NoError</span><span style="color:#000000; background:rgb(255,255,255)">。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">5,如果在指定的超时时间内，还没有完成所有的操作，错误代码</span><span style="color:#000000; background:rgb(228,228,255)">RequestTimedOutCode</span><span style="color:#000000; background:rgb(255,255,255)">。</span><em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">      </span><span style="color:#66e7a; background:rgb(255,255,255)">delayedProducePurgatory</span></em><span style="color:#000000; background:rgb(255,255,255)">.tryCompleteElseWatch(delayedProduce</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">               </span><span style="color:#000000; background:rgb(255,255,255)">producerRequestKeys)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    } </span><strong><span style="color:#0080; background:rgb(255,255,255)">else </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这种情况下，表示ack不是-1,或者说当前的写入全部出错，直接向client端响应。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">在client端的produce中，建议把ack的值设置成1,这样能保证数据最少写入到了leader中，同时又能快速的向client端进行响应。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><em><span style="color:#808080; background:rgb(255,255,255)">// we can respond immediately</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">      </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">produceResponseStatus = produceStatus.mapValues(status =&gt; </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">              status.responseStatus)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      responseCallback(produceResponseStatus)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  } </span><strong><span style="color:#0080; background:rgb(255,255,255)">else </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">如果流程执行到这里时，表示消息没有被成功添加，因为ack的值认证不合法，向client端响应的错误代码是</span><em><span style="color:#66e7a; background:rgb(255,255,255)">INVALID_REQUIRED_ACKS</span></em><span style="color:#000000; background:rgb(255,255,255)">。</span><em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">responseStatus = messagesPerPartition.map {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><strong><span style="color:#0080; background:rgb(255,255,255)">case </span></strong><span style="color:#000000; background:rgb(255,255,255)">(topicAndPartition</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">messageSet) =&gt;</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        (topicAndPartition -&gt;</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">                </span><em><span style="color:#000000; background:rgb(255,255,255)">ProducerResponseStatus</span></em><span style="color:#000000; background:rgb(255,255,255)">(Errors.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">INVALID_REQUIRED_ACKS</span></em><span style="color:#000000; background:rgb(255,255,255)">.code</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                  </span><span style="color:#000000; background:rgb(255,255,255)">LogAppendInfo.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">UnknownLogAppendInfo</span></em><span style="color:#000000; background:rgb(255,255,255)">.firstOffset))</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    }</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    responseCallback(responseStatus)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<h3><strong>appendToLocalLog<span style="font-family:SimSun">函数的执行流程：</span></strong></h3>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里把produce端请求过来的针对每个partition的消息，把这些消息添加到对应的partition的log中。</span><em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span></em><strong><span style="color:#0080; background:rgb(255,255,255)">private def </span></strong><span style="color:#000000; background:rgb(255,255,255)">appendToLocalLog(internalTopicsAllowed: </span><span style="color:#cc7832; background:rgb(255,255,255)">Boolean,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                   </span><span style="color:#000000; background:rgb(255,255,255)">messagesPerPartition: Map[TopicAndPartition</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">MessageSet]</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">            </span><span style="color:#000000; background:rgb(255,255,255)">requiredAcks: </span><span style="color:#cc7832; background:rgb(255,255,255)">Short</span><span style="color:#000000; background:rgb(255,255,255)">): Map[TopicAndPartition</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">LogAppendResult] = {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  trace(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Append [%s] to local log "</span></strong><span style="color:#000000; background:rgb(255,255,255)">.format(messagesPerPartition))</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">对请求的消息进行迭代，每次迭代可以得到一个partition与这个partition对应的请求需要写入消息集合。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  messagesPerPartition.map {</span></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0080; background:rgb(255,255,255)">case </span></strong><span style="color:#000000; background:rgb(255,255,255)">(topicAndPartition</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">messages) =&gt;</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      BrokerTopicStats.</span><em><span style="color:#000000; background:rgb(255,255,255)">getBrokerTopicStats</span></em><span style="color:#000000; background:rgb(255,255,255)">(</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">         topicAndPartition.topic).</span><em><span style="color:#66e7a; background:rgb(255,255,255)">totalProduceRequestRate</span></em><span style="color:#000000; background:rgb(255,255,255)">.mark()</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      BrokerTopicStats.</span><em><span style="color:#000000; background:rgb(255,255,255)">getBrokerAllTopicsStats</span></em><span style="color:#000000; background:rgb(255,255,255)">().</span><em><span style="color:#66e7a; background:rgb(255,255,255)">totalProduceRequestRate</span></em><span style="color:#000000; background:rgb(255,255,255)">.mark()</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">如果要添加的消息是</span><strong><span style="color:#0800; background:rgb(255,255,255)">__consumer_offsets </span></strong><span style="color:#000000; background:rgb(255,255,255)">topic的内容时，同时这个client端不是admin的client端，提示这个消息不能被添加。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><em><span style="color:#808080; background:rgb(255,255,255)">// reject appending to internal topics if it is not allowed</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">if </span></strong><span style="color:#000000; background:rgb(255,255,255)">(Topic.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">InternalTopics</span></em><span style="color:#000000; background:rgb(255,255,255)">.contains(topicAndPartition.topic) </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">                   &amp;&amp; !internalTopicsAllowed) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      (topicAndPartition</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><em><span style="color:#000000; background:rgb(255,255,255)">LogAppendResult</span></em><span style="color:#000000; background:rgb(255,255,255)">(</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        LogAppendInfo.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">UnknownLogAppendInfo</span></em><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><em><span style="color:#000000; background:rgb(255,255,255)">Some</span></em><span style="color:#000000; background:rgb(255,255,255)">(</span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">InvalidTopicException(</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0800; background:rgb(255,255,255)">"Cannot append to internal topic %s"</span></strong></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0800; background:rgb(255,255,255)">    </span></strong><span style="color:#000000; background:rgb(255,255,255)">.format(topicAndPartition.topic)))))</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    } </span><strong><span style="color:#0080; background:rgb(255,255,255)">else </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里表示当前的client可以对这个topic进行消息的添加操作。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">在针对每个partition的处理中，如果处理成功添加到Log中会响应回去的信息包含一个info,</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">如果处理消息的添加出错时，响应的info是一个</span><em><span style="color:#66e7a; background:rgb(255,255,255)">UnknownLogAppendInfo</span></em><span style="color:#000000; background:rgb(255,255,255)">实例与异常。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><strong><span style="color:#0080; background:rgb(255,255,255)">try </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">得到要添加消息的partition的实例，并向这个实例的leader的副本中添加消息到log中。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">如果当前的broker中没有找到对应的partition时，这个会生成一个exception.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">向partition的log中添加消息的流程：</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">1,检查当前的broker中对应此partition的副本是否是leader,如果不是，</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">              exception为</span><span style="color:#000000; background:rgb(228,228,255)">NotLeaderForPartitionException</span><span style="color:#000000; background:rgb(255,255,255)">。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">2,当前的broker是partition的leader,得到这个副本对应的Log实例，并得到最小需要的副本个数。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">3,如果ack的值是-1,同时这个配置的最小副本个数大于isr的副本集合过数，</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">              生成exception为</span><span style="color:#000000; background:rgb(228,228,255)">NotEnoughReplicasException</span><span style="color:#000000; background:rgb(255,255,255)">。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">4,通过log实例的append函数向segment中添加消息,</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">4,1,得到当前的next的offset当前要添加的消息集合的firstOffset的值。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">4,2,得到当前log中活动的segment的实例，如果当前的消息加上当前segment已经存在的消息超过了每一个segment配置的大小或者说这个segment已经超过了需要重新生成segment最长活动时间或者当前的segment的index已经达到了最大的个数时，结束当前的segment,并重新生成segment,否则直接得到当前的segment的实例。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">4,3,向当前的活动的segment中写入log日志与index信息，并得到appendInfo的lestOffset的值。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">4,4,更新当前partition的offsetMetadata的值为当前的lastOffset的值加1.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">4,5在向partition写入数据后，会计算当前partition的</span><span style="color:#000000; background:rgb(255,228,255)">highWatermark</span><span style="color:#000000; background:rgb(255,255,255)">值，这个值取isr的同步副本集合列表中副本对应的endoffset最小的值，这个highWatermark的值表示这个partition的committed的offset的值。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">partitionOpt = getPartition(topicAndPartition.topic</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">                   </span><span style="color:#000000; background:rgb(255,255,255)">topicAndPartition.partition)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">info = partitionOpt </span><strong><span style="color:#0080; background:rgb(255,255,255)">match </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">          </span><strong><span style="color:#0080; background:rgb(255,255,255)">case </span></strong><em><span style="color:#000000; background:rgb(255,255,255)">Some</span></em><span style="color:#000000; background:rgb(255,255,255)">(partition) =&gt;</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">            partition.appendMessagesToLeader(</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">                messages.asInstanceOf[ByteBufferMessageSet]</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">                 </span><span style="color:#000000; background:rgb(255,255,255)">requiredAcks)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">          </span><strong><span style="color:#0080; background:rgb(255,255,255)">case </span></strong><span style="color:#000000; background:rgb(255,255,255)">None =&gt; </span><strong><span style="color:#0080; background:rgb(255,255,255)">throw new </span></strong><span style="color:#000000; background:rgb(255,255,255)">UnknownTopicOrPartitionException(</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">            </span><strong><span style="color:#0800; background:rgb(255,255,255)">"Partition %s doesn't exist on %d"</span><span style="color:#0800; background:rgb(255,255,255)"><br>
</span><span style="color:#0800; background:rgb(255,255,255)">            </span></strong><span style="color:#000000; background:rgb(255,255,255)">.format(topicAndPartition</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><em><span style="color:#66e7a; background:rgb(255,255,255)">localBrokerId</span></em><span style="color:#000000; background:rgb(255,255,255)">))</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">得到向partition中添加的记录的条数。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">numAppendedMessages =</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">          </span><strong><span style="color:#0080; background:rgb(255,255,255)">if </span></strong><span style="color:#000000; background:rgb(255,255,255)">(info.firstOffset == -</span><span style="color:#00ff; background:rgb(255,255,255)">1L </span><span style="color:#000000; background:rgb(255,255,255)">|| info.lastOffset == -</span><span style="color:#00ff; background:rgb(255,255,255)">1L</span><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">            </span><span style="color:#00ff; background:rgb(255,255,255)">0</span><span style="color:#00ff; background:rgb(255,255,255)"><br>
</span><span style="color:#00ff; background:rgb(255,255,255)">          </span><strong><span style="color:#0080; background:rgb(255,255,255)">else</span><span style="color:#0080; background:rgb(255,255,255)"><br>
</span><span style="color:#0080; background:rgb(255,255,255)">            </span></strong><span style="color:#000000; background:rgb(255,255,255)">info.lastOffset - info.firstOffset + </span><span style="color:#00ff; background:rgb(255,255,255)">1</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#00ff; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#00ff; background:rgb(255,255,255)">这里生成每个topic的统计信息。</span><em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">        </span></em><span style="color:#000000; background:rgb(255,255,255)">BrokerTopicStats.</span><em><span style="color:#000000; background:rgb(255,255,255)">getBrokerTopicStats</span></em><span style="color:#000000; background:rgb(255,255,255)">(topicAndPartition.topic)</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">              .</span><em><span style="color:#66e7a; background:rgb(255,255,255)">bytesInRate</span></em><span style="color:#000000; background:rgb(255,255,255)">.mark(messages.sizeInBytes)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        BrokerTopicStats.</span><em><span style="color:#000000; background:rgb(255,255,255)">getBrokerAllTopicsStats</span></em></p>
<p style="background:rgb(255,255,255)"><em><span style="color:#000000; background:rgb(255,255,255)">              </span></em><span style="color:#000000; background:rgb(255,255,255)">.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">bytesInRate</span></em><span style="color:#000000; background:rgb(255,255,255)">.mark(messages.sizeInBytes)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        BrokerTopicStats.</span><em><span style="color:#000000; background:rgb(255,255,255)">getBrokerTopicStats</span></em><span style="color:#000000; background:rgb(255,255,255)">(topicAndPartition.topic)</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">              .</span><em><span style="color:#66e7a; background:rgb(255,255,255)">messagesInRate</span></em><span style="color:#000000; background:rgb(255,255,255)">.mark(numAppendedMessages)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        BrokerTopicStats.</span><em><span style="color:#000000; background:rgb(255,255,255)">getBrokerAllTopicsStats</span></em><span style="color:#000000; background:rgb(255,255,255)">.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">messagesInRate</span></em><span style="color:#000000; background:rgb(255,255,255)">.mark(</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">              numAppendedMessages)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        trace(</span><strong><span style="color:#0800; background:rgb(255,255,255)">日志</span></strong><span style="color:#000000; background:rgb(255,255,255)">)</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        (topicAndPartition</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><em><span style="color:#000000; background:rgb(255,255,255)">LogAppendResult</span></em><span style="color:#000000; background:rgb(255,255,255)">(info))</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      } </span><strong><span style="color:#0080; background:rgb(255,255,255)">catch </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span><em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">        </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">case </span></strong><span style="color:#000000; background:rgb(255,255,255)">e: KafkaStorageException =&gt;</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">          fatal(</span><strong><span style="color:#0800; background:rgb(255,255,255)">错误日志,这里会直接结束掉当前的broker进程</span></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">          Runtime.</span><em><span style="color:#000000; background:rgb(255,255,255)">getRuntime</span></em><span style="color:#000000; background:rgb(255,255,255)">.halt(</span><span style="color:#00ff; background:rgb(255,255,255)">1</span><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">          (topicAndPartition</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><strong><span style="color:#0080; background:rgb(255,255,255)">null</span></strong><span style="color:#000000; background:rgb(255,255,255)">)</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">下面的情况，根据向partition中写入log信息出现的错误，生成不同的响应结果,这个用于判断向某个partition中写入消息失败的具体错误 。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">case </span></strong><span style="color:#000000; background:rgb(255,255,255)">utpe: UnknownTopicOrPartitionException =&gt;</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">          (topicAndPartition</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">             </span><em><span style="color:#000000; background:rgb(255,255,255)">LogAppendResult</span></em><span style="color:#000000; background:rgb(255,255,255)">(LogAppendInfo.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">UnknownLogAppendInfo</span></em><span style="color:#cc7832; background:rgb(255,255,255)">, </span><em><span style="color:#000000; background:rgb(255,255,255)">Some</span></em><span style="color:#000000; background:rgb(255,255,255)">(utpe)))</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">case </span></strong><span style="color:#000000; background:rgb(255,255,255)">nle: NotLeaderForPartitionException =&gt;</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">          (topicAndPartition</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">             </span><em><span style="color:#000000; background:rgb(255,255,255)">LogAppendResult</span></em><span style="color:#000000; background:rgb(255,255,255)">(LogAppendInfo.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">UnknownLogAppendInfo</span></em><span style="color:#cc7832; background:rgb(255,255,255)">, </span><em><span style="color:#000000; background:rgb(255,255,255)">Some</span></em><span style="color:#000000; background:rgb(255,255,255)">(nle)))</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">case </span></strong><span style="color:#000000; background:rgb(255,255,255)">mtle: MessageSizeTooLargeException =&gt;</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">          (topicAndPartition</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">             </span><em><span style="color:#000000; background:rgb(255,255,255)">LogAppendResult</span></em><span style="color:#000000; background:rgb(255,255,255)">(LogAppendInfo.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">UnknownLogAppendInfo</span></em><span style="color:#cc7832; background:rgb(255,255,255)">, </span><em><span style="color:#000000; background:rgb(255,255,255)">Some</span></em><span style="color:#000000; background:rgb(255,255,255)">(mtle)))</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">case </span></strong><span style="color:#000000; background:rgb(255,255,255)">mstle: MessageSetSizeTooLargeException =&gt;</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">          (topicAndPartition</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">             </span><em><span style="color:#000000; background:rgb(255,255,255)">LogAppendResult</span></em><span style="color:#000000; background:rgb(255,255,255)">(LogAppendInfo.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">UnknownLogAppendInfo</span></em><span style="color:#cc7832; background:rgb(255,255,255)">, </span><em><span style="color:#000000; background:rgb(255,255,255)">Some</span></em><span style="color:#000000; background:rgb(255,255,255)">(mstle)))</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">case </span></strong><span style="color:#000000; background:rgb(255,255,255)">imse : InvalidMessageSizeException =&gt;</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">          (topicAndPartition</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">             </span><em><span style="color:#000000; background:rgb(255,255,255)">LogAppendResult</span></em><span style="color:#000000; background:rgb(255,255,255)">(LogAppendInfo.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">UnknownLogAppendInfo</span></em><span style="color:#cc7832; background:rgb(255,255,255)">, </span><em><span style="color:#000000; background:rgb(255,255,255)">Some</span></em><span style="color:#000000; background:rgb(255,255,255)">(imse)))</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">case </span></strong><span style="color:#000000; background:rgb(255,255,255)">t: </span><span style="color:#20999d; background:rgb(255,255,255)">Throwable </span><span style="color:#000000; background:rgb(255,255,255)">=&gt;</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">          BrokerTopicStats.</span><em><span style="color:#000000; background:rgb(255,255,255)">getBrokerTopicStats</span></em><span style="color:#000000; background:rgb(255,255,255)">(topicAndPartition.topic)</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">               .</span><em><span style="color:#66e7a; background:rgb(255,255,255)">failedProduceRequestRate</span></em><span style="color:#000000; background:rgb(255,255,255)">.mark()</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">          BrokerTopicStats.</span><em><span style="color:#000000; background:rgb(255,255,255)">getBrokerAllTopicsStats</span></em><span style="color:#000000; background:rgb(255,255,255)">.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">failedProduceRequestRate</span></em><span style="color:#000000; background:rgb(255,255,255)">.mark()</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">          error(</span><strong><span style="color:#0800; background:rgb(255,255,255)">这里打印非处理的异常</span></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">          (topicAndPartition</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">             </span><em><span style="color:#000000; background:rgb(255,255,255)">LogAppendResult</span></em><span style="color:#000000; background:rgb(255,255,255)">(LogAppendInfo.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">UnknownLogAppendInfo</span></em><span style="color:#cc7832; background:rgb(255,255,255)">, </span><em><span style="color:#000000; background:rgb(255,255,255)">Some</span></em><span style="color:#000000; background:rgb(255,255,255)">(t)))</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      }//end case by partition</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  }//end partitions messages的迭代处理</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<h2><strong><em>处理消息的读取</em></strong></h2>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">当一个consumer发起一个poll的请求时，会异步的执行这个consumer中所有的partition数据消费的fetch的请求操作，这个操作通过KafkaApis中对应的请求来调用ReplicaManager中的fetchMessages的函数来进行处理。</span></p>
<h3><strong>fetchMessages<span style="font-family:SimSun">的入口函数</span></strong></h3>
<p>这个函数在<span style="font-family:Times New Roman">kafkaApis</span><span style="font-family:SimSun">中根据请求的</span><span style="font-family:Times New Roman">parition</span><span style="font-family:SimSun">集合，直接调用了</span><span style="font-family:Times New Roman">ReplicaManager</span><span style="font-family:SimSun">中的</span><span style="font-family:Times New Roman">fetchMessages</span><span style="font-family:SimSun">的函数，接下来这部分主要看看这个函数的执行逻辑。</span></p>
<p>先根据函数的定义来进行说明，这个函数中最后一个<span style="font-family:Times New Roman">responseCallback</span><span style="font-family:SimSun">是一个用于向请求的</span><span style="font-family:Times New Roman">client</span><span style="font-family:SimSun">端回写</span><span style="font-family:Times New Roman">fetch</span><span style="font-family:SimSun">的响应结果的回调函数。</span></p>
<p>fetchInfo<span style="font-family:SimSun">参数是需要进行</span><span style="font-family:DejaVu Sans Mono">fetch</span><span style="font-family:SimSun">操作的</span><span style="font-family:DejaVu Sans Mono">partition</span><span style="font-family:SimSun">与开始的</span><span style="font-family:DejaVu Sans Mono">offset</span><span style="font-family:SimSun">的信息。</span><em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span></em><strong><span style="color:#0080; background:rgb(255,255,255)">def </span></strong><span style="color:#000000; background:rgb(255,255,255)">fetchMessages(timeout: </span><span style="color:#cc7832; background:rgb(255,255,255)">Long,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)"> </span><span style="color:#000000; background:rgb(255,255,255)">replicaId: </span><span style="color:#cc7832; background:rgb(255,255,255)">Int,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)"> </span><span style="color:#000000; background:rgb(255,255,255)">fetchMinBytes: </span><span style="color:#cc7832; background:rgb(255,255,255)">Int,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)"> </span><span style="color:#000000; background:rgb(255,255,255)">fetchInfo: immutable.Map[TopicAndPartition</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">PartitionFetchInfo]</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)"> </span><span style="color:#000000; background:rgb(255,255,255)">responseCallback: Map[TopicAndPartition</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">FetchResponsePartitionData] =&gt; </span><span style="color:#cc7832; background:rgb(255,255,255)">Unit</span><span style="color:#000000; background:rgb(255,255,255)">) {</span></p>
<p><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p><span style="color:#000000; background:rgb(255,255,255)">首先判断下进行fetch操作的副本节点的id，如果replicaId是一个大于或等于0的值，表示这个请求是一个从当前的partition的follower节点发起的副本复制请求。</span></p>
<p><span style="color:#000000; background:rgb(255,255,255)">如果是-1或者-2时，表示这是一个由consumer发起的请求。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">isFromFollower = replicaId &gt;= </span><span style="color:#00ff; background:rgb(255,255,255)">0</span></p>
<p><span style="color:#00ff; background:rgb(255,255,255)"> </span></p>
<p><span style="color:#00ff; background:rgb(255,255,255)">检查replicaId是否是</span><em><span style="color:#66e7a; background:rgb(255,255,255)">DebuggingConsumerId（-2）</span></em><span style="color:#00ff; background:rgb(255,255,255)">对应的值，如果是consumer的请求，这个值默认是-1,也就是说当是一个副本复制的请求或者是consumer默认的请求过来时，这个地方生成出来的变量是一个true值。</span><span style="color:#00ff; background:rgb(255,255,255)"><br>
</span><span style="color:#00ff; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">fetchOnlyFromLeader: </span><span style="color:#cc7832; background:rgb(255,255,255)">Boolean </span><span style="color:#000000; background:rgb(255,255,255)">= replicaId != Request.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">DebuggingConsumerId</span></em></p>
<p><em><span style="color:#66e7a; background:rgb(255,255,255)"> </span></em></p>
<p><em><span style="color:#66e7a; background:rgb(255,255,255)">这里得到的fetchOnlyCommitted的值如果是true表示这是一个consumer的请求，读取数据时不一定得到到的最后的offset是log的endoffset而是这个partition中所有的副本中最小的一个endoffset的值。</span><span style="color:#66e7a; background:rgb(255,255,255)"><br>
</span><span style="color:#66e7a; background:rgb(255,255,255)">  </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">fetchOnlyCommitted: </span><span style="color:#cc7832; background:rgb(255,255,255)">Boolean </span><span style="color:#000000; background:rgb(255,255,255)">= ! Request.</span><em><span style="color:#000000; background:rgb(255,255,255)">isValidBrokerId</span></em><span style="color:#000000; background:rgb(255,255,255)">(replicaId)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span></p>
<p><span style="color:#000000; background:rgb(255,255,255)">从Log中加载对应的offset的消息记录到buffer中。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><em><span style="color:#808080; background:rgb(255,255,255)">// read from local logs</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">  </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">logReadResults = readFromLocalLog(fetchOnlyFromLeader</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">fetchOnlyCommitted</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p><span style="color:#cc7832; background:rgb(255,255,255)">       </span><span style="color:#000000; background:rgb(255,255,255)">fetchInfo)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span></p>
<p><span style="color:#000000; background:rgb(255,255,255)">这里根据读取消息的结果集信息，同时如果请求的replicaId的值是对应这个partition的follower的副本节点时，这里检查这个副本对应的offset是否已经达到了当前的leader的offset的值，如果已经达到，表示这个副本已经是最新的值，检查这个副本对应的broker是否在isr的副本集合中，如果不在，把这个副本添加到isr的副本复制集合中，同时更新zk中对应此partition的isr的集合信息。</span></p>
<p><span style="color:#000000; background:rgb(255,255,255)">如果是consumer来消费数据时，这个流程不会判断。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">更新这个副本同步到的最新的一条offset的metadata信息，把同步到的最新的这条消息的offsetmetadata存储为这个副本对应的</span><span style="color:#000000; background:rgb(255,228,255)">logEndOffset</span><span style="color:#000000; background:rgb(255,255,255)">。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><em><span style="color:#808080; background:rgb(255,255,255)">// if the fetch comes from the follower,</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">  // update its corresponding log end offset</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">  </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">if</span></strong><span style="color:#000000; background:rgb(255,255,255)">(Request.</span><em><span style="color:#000000; background:rgb(255,255,255)">isValidBrokerId</span></em><span style="color:#000000; background:rgb(255,255,255)">(replicaId))</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    updateFollowerLogReadResults(replicaId</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">logReadResults)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><em><span style="color:#808080; background:rgb(255,255,255)">// check if this fetch request can be satisfied right away</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">  </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">bytesReadable = logReadResults.values.map(</span></p>
<p><span style="color:#000000; background:rgb(255,255,255)">          _.info.messageSet.sizeInBytes).sum</span></p>
<p><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p><span style="color:#000000; background:rgb(255,255,255)">这里得到响应的所有的partition的集合中读取消息的响应代码不是NoError的代码的集合，这个地方的调用返回的是一个true/flase的值，如果是true表示响应的partition中包含有错误的partition的消息读取，否则表示读取消息完全正确。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">errorReadingData = logReadResults.values.foldLeft(</span><strong><span style="color:#0080; background:rgb(255,255,255)">false</span></strong><span style="color:#000000; background:rgb(255,255,255)">) (</span></p>
<p><span style="color:#000000; background:rgb(255,255,255)">(errorIncurred</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">readResult) =&gt;</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">       errorIncurred || (readResult.errorCode != ErrorMapping.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">NoError</span></em><span style="color:#000000; background:rgb(255,255,255)">)</span></p>
<p><span style="color:#000000; background:rgb(255,255,255)">  )</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span></p>
<p><span style="color:#000000; background:rgb(255,255,255)">如果当前的请求没有设置超时时间或者请求的partition的集合为空，或者说这次请求有足够的数据进行响应，或者有读取消息错误时，直接向请求的client端响应读取的结果。</span><em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">  </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">if</span></strong><span style="color:#000000; background:rgb(255,255,255)">(timeout &lt;= </span><span style="color:#00ff; background:rgb(255,255,255)">0 </span><span style="color:#000000; background:rgb(255,255,255)">|| fetchInfo.size &lt;= </span><span style="color:#00ff; background:rgb(255,255,255)">0 </span><span style="color:#000000; background:rgb(255,255,255)">|| bytesReadable &gt;= fetchMinBytes || </span></p>
<p><span style="color:#000000; background:rgb(255,255,255)">           errorReadingData) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">fetchPartitionData = logReadResults.mapValues(result =&gt;</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><em><span style="color:#000000; background:rgb(255,255,255)">FetchResponsePartitionData</span></em><span style="color:#000000; background:rgb(255,255,255)">(result.errorCode</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">result.hw</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p><span style="color:#cc7832; background:rgb(255,255,255)">           </span><span style="color:#000000; background:rgb(255,255,255)">result.info.messageSet))</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    responseCallback(fetchPartitionData)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  } </span><strong><span style="color:#0080; background:rgb(255,255,255)">else </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span></p>
<p><span style="color:#000000; background:rgb(255,255,255)">这种情况下表示当前的消息读取没有读取到指定的最小的byte字节数，同时消息读取也没有发生对应的错误处理的处理情况,生成用于延时处理的DelayedFetch实例，并根据处理的每一个partition生成key,执行延时的响应处理。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><em><span style="color:#808080; background:rgb(255,255,255)">// construct the fetch results from the read results</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">fetchPartitionStatus = logReadResults.map {</span></p>
<p><span style="color:#000000; background:rgb(255,255,255)">      </span><strong><span style="color:#0080; background:rgb(255,255,255)">case </span></strong><span style="color:#000000; background:rgb(255,255,255)">(topicAndPartition</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">result) =&gt;</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        (topicAndPartition</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><em><span style="color:#000000; background:rgb(255,255,255)">FetchPartitionStatus</span></em><span style="color:#000000; background:rgb(255,255,255)">(result.info.fetchOffsetMetadata</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p><span style="color:#cc7832; background:rgb(255,255,255)">           </span><span style="color:#000000; background:rgb(255,255,255)">fetchInfo.get(topicAndPartition).get))</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">fetchMetadata = </span><em><span style="color:#000000; background:rgb(255,255,255)">FetchMetadata</span></em><span style="color:#000000; background:rgb(255,255,255)">(fetchMinBytes</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">fetchOnlyFromLeader</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p><span style="color:#cc7832; background:rgb(255,255,255)">             </span><span style="color:#000000; background:rgb(255,255,255)">fetchOnlyCommitted</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">isFromFollower</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">fetchPartitionStatus)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">delayedFetch = </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">DelayedFetch(timeout</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">fetchMetadata</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><strong><span style="color:#0080; background:rgb(255,255,255)">this</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p><span style="color:#cc7832; background:rgb(255,255,255)">         </span><span style="color:#000000; background:rgb(255,255,255)">responseCallback)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">delayedFetchKeys = fetchPartitionStatus.keys.map(</span></p>
<p><span style="color:#000000; background:rgb(255,255,255)">          </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">TopicPartitionOperationKey(_)).toSeq</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    </span><span style="color:#66e7a; background:rgb(255,255,255)">delayedFetchPurgatory</span></em><span style="color:#000000; background:rgb(255,255,255)">.tryCompleteElseWatch(delayedFetch</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">delayedFetchKeys)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<h3><strong>从<span style="font-family:Arial">LogManager</span><span style="font-family:SimSun">组件中加载</span><span style="font-family:Arial">fetch</span><span style="font-family:SimSun">请求的数据集</span></strong></h3>
<p style="background:rgb(255,255,255)">在执行fetchMessages的操作时，根据请求对应的partition与offset的信息，通过ReplicaManager组件中的<span style="color:#000000; background:rgb(228,228,255)">readFromLocalLog</span>函数会迭代向对应的partition的Log执行消息的加载处理，这个过程通过LogManager进行处理。</p>
<p style="background:rgb(255,255,255)"> </p>
<p style="background:rgb(255,255,255)">首先先看看ReplicaManager中readFromLocalLog函数:</p>
<p style="background:rgb(255,255,255)">这个函数中传入的参数，第一个表示是否只读取leader的副本的数据，非debug时这个值为true,</p>
<p style="background:rgb(255,255,255)">第二个参数表示是否只读取committed完成的数据，committed的数据是只有副本同步成功后的offset的记录才叫committed的数据。<em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span></em><strong><span style="color:#0080; background:rgb(255,255,255)">def </span></strong><span style="color:#000000; background:rgb(255,255,255)">readFromLocalLog(fetchOnlyFromLeader: </span><span style="color:#cc7832; background:rgb(255,255,255)">Boolean,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                     </span><span style="color:#000000; background:rgb(255,255,255)">readOnlyCommitted: </span><span style="color:#cc7832; background:rgb(255,255,255)">Boolean,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                     </span><span style="color:#000000; background:rgb(255,255,255)">readPartitionInfo: Map[TopicAndPartition</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">PartitionFetchInfo]): Map[TopicAndPartition</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">LogReadResult] = {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">对请求的要fetch的partition的集合进行迭代处理。这个迭代返回的一个map的key是partition,value是读取到的消息或者说对应的错误信息。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  readPartitionInfo.map { </span><strong><span style="color:#0080; background:rgb(255,255,255)">case </span></strong><span style="color:#000000; background:rgb(255,255,255)">(</span><em><span style="color:#000000; background:rgb(255,255,255)">TopicAndPartition</span></em><span style="color:#000000; background:rgb(255,255,255)">(topic</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">partition)</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">                </span><em><span style="color:#000000; background:rgb(255,255,255)">PartitionFetchInfo</span></em><span style="color:#000000; background:rgb(255,255,255)">(offset</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">fetchSize)) =&gt;</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    BrokerTopicStats.</span><em><span style="color:#000000; background:rgb(255,255,255)">getBrokerTopicStats</span></em><span style="color:#000000; background:rgb(255,255,255)">(topic).</span><em><span style="color:#66e7a; background:rgb(255,255,255)">totalFetchRequestRate</span></em><span style="color:#000000; background:rgb(255,255,255)">.mark()</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    BrokerTopicStats.</span><em><span style="color:#000000; background:rgb(255,255,255)">getBrokerAllTopicsStats</span></em><span style="color:#000000; background:rgb(255,255,255)">().</span><em><span style="color:#66e7a; background:rgb(255,255,255)">totalFetchRequestRate</span></em><span style="color:#000000; background:rgb(255,255,255)">.mark()</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">partitionDataAndOffsetInfo =</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><strong><span style="color:#0080; background:rgb(255,255,255)">try </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        trace(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Fetching log segment for topic %s, partition %d, offset %d,</span></strong></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0800; background:rgb(255,255,255)">              size %d"</span></strong><span style="color:#000000; background:rgb(255,255,255)">.format(topic</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">partition</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">offset</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">fetchSize))</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">根据fetch是否只能读取partition的leader的副本的数据来得到副本，如果只能读取leader上的数据，那么这里检查当前broker中对应的这个副本是否是leader的副本，</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">如果不是会生成</span><span style="color:#000000; background:rgb(228,228,255)">NotLeaderForPartitionException</span><span style="color:#000000; background:rgb(255,255,255)">的exception.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">如果fetch的传入的fetchOnlyFromLeader的值false,表示这是一个debug的模式，得到这个partition在当前节点上的副本，如果当前broker没有对应这个partition的副本时，</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">生成一个</span><span style="color:#000000; background:rgb(228,228,255)">ReplicaNotAvailableException</span><span style="color:#000000; background:rgb(255,255,255)">的exception.</span><em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">        </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">localReplica = </span><strong><span style="color:#0080; background:rgb(255,255,255)">if </span></strong><span style="color:#000000; background:rgb(255,255,255)">(fetchOnlyFromLeader)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">          getLeaderReplicaIfLocal(topic</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">partition)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">else</span><span style="color:#0080; background:rgb(255,255,255)"><br>
</span><span style="color:#0080; background:rgb(255,255,255)">          </span></strong><span style="color:#000000; background:rgb(255,255,255)">getReplicaOrException(topic</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">partition)</span></p>
<p style="background:rgb(255,255,255)"><em><span style="color:#808080; background:rgb(255,255,255)"> </span></em></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">如果传入的参数说明只能读取当前partition对应的所有副本中最小的offset的值，得到这个commited的offset,也就是highWatermark的offset的值(所有副本中同步到的最小的offset),否则这个值为None,如果是None时，表示可以读取到当前的副本中最后一条记录。在非consumer的fetch请求时，这个值为None</span><em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">        </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">maxOffsetOpt = </span><strong><span style="color:#0080; background:rgb(255,255,255)">if </span></strong><span style="color:#000000; background:rgb(255,255,255)">(readOnlyCommitted)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">          </span><em><span style="color:#000000; background:rgb(255,255,255)">Some</span></em><span style="color:#000000; background:rgb(255,255,255)">(localReplica.highWatermark.messageOffset)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">else</span><span style="color:#0080; background:rgb(255,255,255)"><br>
</span><span style="color:#0080; background:rgb(255,255,255)">          </span></strong><span style="color:#000000; background:rgb(255,255,255)">None</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里得到当前的副本中最后一条记录的offset的标记值,通过得到这个副本对应的Log实例，并执行其read函数来读取指定大小的数据。</span><em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">        </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">initialLogEndOffset = localReplica.logEndOffset</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">logReadInfo = localReplica.log </span><strong><span style="color:#0080; background:rgb(255,255,255)">match </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">          </span><strong><span style="color:#0080; background:rgb(255,255,255)">case </span></strong><em><span style="color:#000000; background:rgb(255,255,255)">Some</span></em><span style="color:#000000; background:rgb(255,255,255)">(log) =&gt;</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">            log.read(offset</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">fetchSize</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">maxOffsetOpt)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">          </span><strong><span style="color:#0080; background:rgb(255,255,255)">case </span></strong><span style="color:#000000; background:rgb(255,255,255)">None =&gt;</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">            error(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Leader for partition [%s,%d] does not have a local log"</span></strong></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0800; background:rgb(255,255,255)">                </span></strong><span style="color:#000000; background:rgb(255,255,255)">.format(topic</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">partition))</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">            </span><em><span style="color:#000000; background:rgb(255,255,255)">FetchDataInfo</span></em><span style="color:#000000; background:rgb(255,255,255)">(LogOffsetMetadata.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">UnknownOffsetMetadata</span></em><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">                 </span><span style="color:#000000; background:rgb(255,255,255)">MessageSet.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">Empty</span></em><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里根据当前的副本中最后一条记录的offset减去读取到的消息的offset,如果这个值小于或等于0,表示这次读取达到了当前log中的最后一条消息。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">readToEndOfLog = initialLogEndOffset.messageOffset - </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">             logReadInfo.fetchOffsetMetadata.messageOffset &lt;= </span><span style="color:#00ff; background:rgb(255,255,255)">0</span><span style="color:#00ff; background:rgb(255,255,255)"><br>
</span><span style="color:#00ff; background:rgb(255,255,255)">根据读取到的消息，当前partition中committed的offset，读取大小，是否已经读取到最后一条消息生成一个LogReadResult的实例，这个实例最后的一个参数表示是否有错误的错误实例。</span><span style="color:#00ff; background:rgb(255,255,255)"><br>
</span><span style="color:#00ff; background:rgb(255,255,255)">        </span><span style="color:#000000; background:rgb(255,255,255)">LogReadResult(logReadInfo</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">localReplica.highWatermark.messageOffset</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">             </span><span style="color:#000000; background:rgb(255,255,255)">fetchSize</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">readToEndOfLog</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">None)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      } </span><strong><span style="color:#0080; background:rgb(255,255,255)">catch </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span><em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">        </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">case </span></strong><span style="color:#000000; background:rgb(255,255,255)">utpe: UnknownTopicOrPartitionException =&gt;</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">          LogReadResult(</span><em><span style="color:#000000; background:rgb(255,255,255)">FetchDataInfo</span></em><span style="color:#000000; background:rgb(255,255,255)">(LogOffsetMetadata.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">UnknownOffsetMetadata</span></em><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">              </span><span style="color:#000000; background:rgb(255,255,255)">MessageSet.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">Empty</span></em><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">-</span><span style="color:#00ff; background:rgb(255,255,255)">1L</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">fetchSize</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><strong><span style="color:#0080; background:rgb(255,255,255)">false</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">, </span><em><span style="color:#000000; background:rgb(255,255,255)">Some</span></em><span style="color:#000000; background:rgb(255,255,255)">(utpe))</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">case </span></strong><span style="color:#000000; background:rgb(255,255,255)">nle: NotLeaderForPartitionException =&gt;</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">          LogReadResult(</span><em><span style="color:#000000; background:rgb(255,255,255)">FetchDataInfo</span></em><span style="color:#000000; background:rgb(255,255,255)">(LogOffsetMetadata.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">UnknownOffsetMetadata</span></em><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">              </span><span style="color:#000000; background:rgb(255,255,255)">MessageSet.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">Empty</span></em><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">-</span><span style="color:#00ff; background:rgb(255,255,255)">1L</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">fetchSize</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><strong><span style="color:#0080; background:rgb(255,255,255)">false</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">, </span><em><span style="color:#000000; background:rgb(255,255,255)">Some</span></em><span style="color:#000000; background:rgb(255,255,255)">(nle))</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">case </span></strong><span style="color:#000000; background:rgb(255,255,255)">rnae: ReplicaNotAvailableException =&gt;</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">          LogReadResult(</span><em><span style="color:#000000; background:rgb(255,255,255)">FetchDataInfo</span></em><span style="color:#000000; background:rgb(255,255,255)">(LogOffsetMetadata.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">UnknownOffsetMetadata</span></em><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">              </span><span style="color:#000000; background:rgb(255,255,255)">MessageSet.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">Empty</span></em><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">-</span><span style="color:#00ff; background:rgb(255,255,255)">1L</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">fetchSize</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><strong><span style="color:#0080; background:rgb(255,255,255)">false</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">, </span><em><span style="color:#000000; background:rgb(255,255,255)">Some</span></em><span style="color:#000000; background:rgb(255,255,255)">(rnae))</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">case </span></strong><span style="color:#000000; background:rgb(255,255,255)">oor : OffsetOutOfRangeException =&gt;</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">          LogReadResult(</span><em><span style="color:#000000; background:rgb(255,255,255)">FetchDataInfo</span></em><span style="color:#000000; background:rgb(255,255,255)">(LogOffsetMetadata.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">UnknownOffsetMetadata</span></em><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">              </span><span style="color:#000000; background:rgb(255,255,255)">MessageSet.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">Empty</span></em><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">-</span><span style="color:#00ff; background:rgb(255,255,255)">1L</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">fetchSize</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><strong><span style="color:#0080; background:rgb(255,255,255)">false</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">, </span><em><span style="color:#000000; background:rgb(255,255,255)">Some</span></em><span style="color:#000000; background:rgb(255,255,255)">(oor))</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">case </span></strong><span style="color:#000000; background:rgb(255,255,255)">e: </span><span style="color:#20999d; background:rgb(255,255,255)">Throwable </span><span style="color:#000000; background:rgb(255,255,255)">=&gt;</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">          BrokerTopicStats.</span><em><span style="color:#000000; background:rgb(255,255,255)">getBrokerTopicStats</span></em><span style="color:#000000; background:rgb(255,255,255)">(topic)</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">               .</span><em><span style="color:#66e7a; background:rgb(255,255,255)">failedFetchRequestRate</span></em><span style="color:#000000; background:rgb(255,255,255)">.mark()</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">          BrokerTopicStats.</span><em><span style="color:#000000; background:rgb(255,255,255)">getBrokerAllTopicsStats</span></em><span style="color:#000000; background:rgb(255,255,255)">()</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">               .</span><em><span style="color:#66e7a; background:rgb(255,255,255)">failedFetchRequestRate</span></em><span style="color:#000000; background:rgb(255,255,255)">.mark()</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">          error(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Error processing fetch operation on partition [%s,%d] offset </span></strong></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0800; background:rgb(255,255,255)">                %d"</span></strong><span style="color:#000000; background:rgb(255,255,255)">.format(topic</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">partition</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">offset)</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">e)</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">          LogReadResult(</span><em><span style="color:#000000; background:rgb(255,255,255)">FetchDataInfo</span></em><span style="color:#000000; background:rgb(255,255,255)">(LogOffsetMetadata.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">UnknownOffsetMetadata</span></em><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">              </span><span style="color:#000000; background:rgb(255,255,255)">MessageSet.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">Empty</span></em><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">-</span><span style="color:#00ff; background:rgb(255,255,255)">1L</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">fetchSize</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><strong><span style="color:#0080; background:rgb(255,255,255)">false</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">, </span><em><span style="color:#000000; background:rgb(255,255,255)">Some</span></em><span style="color:#000000; background:rgb(255,255,255)">(e))</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    (</span><em><span style="color:#000000; background:rgb(255,255,255)">TopicAndPartition</span></em><span style="color:#000000; background:rgb(255,255,255)">(topic</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">partition)</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">partitionDataAndOffsetInfo)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#00ff; background:rgb(255,255,255)">接下来看看Log的read函数，如何处理对某一个partition数据的fetch</span><span style="color:#000000; background:rgb(255,255,255)">:</span></p>
<p style="background:rgb(255,255,255)"><em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span></em><strong><span style="color:#0080; background:rgb(255,255,255)">def </span></strong><span style="color:#000000; background:rgb(255,255,255)">read(startOffset: </span><span style="color:#cc7832; background:rgb(255,255,255)">Long, </span><span style="color:#000000; background:rgb(255,255,255)">maxLength: </span><span style="color:#cc7832; background:rgb(255,255,255)">Int, </span><span style="color:#000000; background:rgb(255,255,255)">maxOffset: Option[</span><span style="color:#cc7832; background:rgb(255,255,255)">Long</span><span style="color:#000000; background:rgb(255,255,255)">] = None)</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">: FetchDataInfo = {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  trace(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Reading %d bytes from offset %d in log %s of length %d bytes"</span></strong></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0800; background:rgb(255,255,255)">         </span></strong><span style="color:#000000; background:rgb(255,255,255)">.format(maxLength</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">startOffset</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">name</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">size))</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">得到当前的partition中当前的副本log中最后一个被append进去的offset的metadata信息，这个offset是下一个消息进行来时的offset.</span><em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">  </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">currentNextOffsetMetadata = </span><em><span style="color:#66e7a; background:rgb(255,255,255)">nextOffsetMetadata</span><span style="color:#66e7a; background:rgb(255,255,255)"><br>
</span><span style="color:#66e7a; background:rgb(255,255,255)">  </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">next = currentNextOffsetMetadata.messageOffset</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">如果请求传入的开始的offset的值已经与当前最后一条消息添加后得到的offset值相同，表示partitoin中没有最新的日志,这个时候，直接返回一个空的消息读取集合。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">if</span></strong><span style="color:#000000; background:rgb(255,255,255)">(startOffset == next)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">return </span></strong><em><span style="color:#000000; background:rgb(255,255,255)">FetchDataInfo</span></em><span style="color:#000000; background:rgb(255,255,255)">(currentNextOffsetMetadata</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">MessageSet.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">Empty</span></em><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">从segments的集合中根据当前的开始的offset得到对应的segment中baseOffset等于或小于这个值的segment.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">var </span></strong><span style="color:#000000; background:rgb(255,255,255)">entry = </span><em><span style="color:#66e7a; background:rgb(255,255,255)">segments</span></em><span style="color:#000000; background:rgb(255,255,255)">.floorEntry(startOffset)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">如果startOffset大于了最大的offset或者通过startOffset没有得到对应的segment时，直接结束这个读取流程，并throw一个OffsetOutOfRangeException异常。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><em><span style="color:#808080; background:rgb(255,255,255)">// attempt to read beyond the log end offset is an error</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">  </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">if</span></strong><span style="color:#000000; background:rgb(255,255,255)">(startOffset &gt; next || entry == </span><strong><span style="color:#0080; background:rgb(255,255,255)">null</span></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">throw new </span></strong><span style="color:#000000; background:rgb(255,255,255)">OffsetOutOfRangeException(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Request for offset %d but we only have log </span></strong></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0800; background:rgb(255,255,255)">          segments in the range %d to %d."</span></strong></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0800; background:rgb(255,255,255)">          </span></strong><span style="color:#000000; background:rgb(255,255,255)">.format(startOffset</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><em><span style="color:#66e7a; background:rgb(255,255,255)">segments</span></em><span style="color:#000000; background:rgb(255,255,255)">.firstKey</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">next))</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">  </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">while</span></strong><span style="color:#000000; background:rgb(255,255,255)">(entry != </span><strong><span style="color:#0080; background:rgb(255,255,255)">null</span></strong><span style="color:#000000; background:rgb(255,255,255)">) {</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里根据当前的segment是否是最后一个segment(最后一个是活动的segment),如果是，得到当前segment中写入到的消息的最后一个position的位置（下一条记录append的开始位置）,如果不是最后一个segment时，得到这个segment的size大小。</span><em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">maxPosition = {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><strong><span style="color:#0080; background:rgb(255,255,255)">if </span></strong><span style="color:#000000; background:rgb(255,255,255)">(entry == </span><em><span style="color:#66e7a; background:rgb(255,255,255)">segments</span></em><span style="color:#000000; background:rgb(255,255,255)">.lastEntry) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">exposedPos = </span><em><span style="color:#66e7a; background:rgb(255,255,255)">nextOffsetMetadata</span></em><span style="color:#000000; background:rgb(255,255,255)">.relativePositionInSegment.toLong</span></p>
<p style="background:rgb(255,255,255)"><em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">        </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">if </span></strong><span style="color:#000000; background:rgb(255,255,255)">(entry != </span><em><span style="color:#66e7a; background:rgb(255,255,255)">segments</span></em><span style="color:#000000; background:rgb(255,255,255)">.lastEntry)</span><em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">          </span></em><span style="color:#000000; background:rgb(255,255,255)">entry.getValue.size</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">else</span><span style="color:#0080; background:rgb(255,255,255)"><br>
</span><span style="color:#0080; background:rgb(255,255,255)">          </span></strong><span style="color:#000000; background:rgb(255,255,255)">exposedPos</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      } </span><strong><span style="color:#0080; background:rgb(255,255,255)">else </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        entry.getValue.size</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    }</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">通过对应的Segment的read函数，从指定的开始offset开始读取，允许读取的maxOffset这个值根据是否是consumer的fetch来控制，如果是consumer时，这是所有的副本中最小的一个endOffset,否则是leader副本中的endOffset,maxPosition是这个segment最后的position的位置。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">fetchInfo = entry.getValue.read(startOffset</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">maxOffset</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">maxLength</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">              </span><span style="color:#000000; background:rgb(255,255,255)">maxPosition)</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">如果从segment中读取返回的是一个null值，表示这个offset在log中不存在消息，从这个segment开始向后查找下一个segment，并重复执行上面的操作，直到读取到最后一个segment为结束。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">if</span></strong><span style="color:#000000; background:rgb(255,255,255)">(fetchInfo == </span><strong><span style="color:#0080; background:rgb(255,255,255)">null</span></strong><span style="color:#000000; background:rgb(255,255,255)">) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      entry = </span><em><span style="color:#66e7a; background:rgb(255,255,255)">segments</span></em><span style="color:#000000; background:rgb(255,255,255)">.higherEntry(entry.getKey)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    } </span><strong><span style="color:#0080; background:rgb(255,255,255)">else </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><strong><span style="color:#0080; background:rgb(255,255,255)">return </span></strong><span style="color:#000000; background:rgb(255,255,255)">fetchInfo</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这种情况下，表示对segment从开始位置对应的segment向后找到所有的segment后，没有找到对应的数据，直接返回一个空的消息集合。</span><em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">  </span><span style="color:#000000; background:rgb(255,255,255)">FetchDataInfo</span></em><span style="color:#000000; background:rgb(255,255,255)">(</span><em><span style="color:#66e7a; background:rgb(255,255,255)">nextOffsetMetadata</span></em><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">MessageSet.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">Empty</span></em><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#00ff; background:rgb(255,255,255)">读取Log中某一个Segment指定大小的消息</span><span style="color:#000000; background:rgb(255,255,255)">：</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这个在读取Log中的消息时会根据开始的offset找到对应的segment开始消息的读取，通过调用LogSegment中的read函数来进行处理，</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这个函数中，第一个参数是开始的offset的位置，第二个参数是读取的最大可能的offset的值，如果是consumer过来时，这个值是</span><span style="color:#000000; background:rgb(255,228,255)">highWatermark</span><span style="color:#000000; background:rgb(255,255,255)">的值，否则是当前的副本的endOffset.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">第三个参数maxSize表示读取的最大byte字节数。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">第四个参数是这个segment中最后的position的位置。</span></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0080; background:rgb(255,255,255)">def </span></strong><span style="color:#000000; background:rgb(255,255,255)">read(startOffset: </span><span style="color:#cc7832; background:rgb(255,255,255)">Long, </span><span style="color:#000000; background:rgb(255,255,255)">maxOffset: Option[</span><span style="color:#cc7832; background:rgb(255,255,255)">Long</span><span style="color:#000000; background:rgb(255,255,255)">]</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">maxSize: </span><span style="color:#cc7832; background:rgb(255,255,255)">Int,</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">         </span><span style="color:#000000; background:rgb(255,255,255)">maxPosition: </span><span style="color:#cc7832; background:rgb(255,255,255)">Long </span><span style="color:#000000; background:rgb(255,255,255)">= size): FetchDataInfo = {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">if</span></strong><span style="color:#000000; background:rgb(255,255,255)">(maxSize &lt; </span><span style="color:#00ff; background:rgb(255,255,255)">0</span><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">throw new </span></strong><span style="color:#000000; background:rgb(255,255,255)">IllegalArgumentException(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Invalid max size for log read (%d)"</span></strong></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0800; background:rgb(255,255,255)">          </span></strong><span style="color:#000000; background:rgb(255,255,255)">.format(maxSize))</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">根据开始执行数据读取的offset找到这个offset对应log中segment的position,流程：</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">1,先根据startOffset从index中找到这个offset对应的索引的存储信息，找到索引中小于或等于这个信息的索引的offset的存储位置，</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">2,根据这个offset对应的索引的position开始值，从这个segment中这个position开始读取，直到读取数据并比对读取到数据的offset是否大于或等于这个startOffset,如果是，返回这个offset的position,否则返回null,表示没有读取到这个startOffset的offset或者更大的offset。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">logSize = log.sizeInBytes </span><em><span style="color:#808080; background:rgb(255,255,255)">// this may change, need to save a consistent copy</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">  </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">startPosition = translateOffset(startOffset)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">如果在segment对应的日志文件中没有找到开始查询的offset或者更大的offet,直接返回一个nulL值，表示需要执行下一个segment的查找。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><em><span style="color:#808080; background:rgb(255,255,255)">// if the start position is already off the end of the log, return null</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">  </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">if</span></strong><span style="color:#000000; background:rgb(255,255,255)">(startPosition == </span><strong><span style="color:#0080; background:rgb(255,255,255)">null</span></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">return null</span><span style="color:#0080; background:rgb(255,255,255)"><br>
</span></strong></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0080; background:rgb(255,255,255)">生成一个开始执行查找操作的metadata</span><span style="color:#0080; background:rgb(255,255,255)"><br>
</span><span style="color:#0080; background:rgb(255,255,255)">  val </span></strong><span style="color:#000000; background:rgb(255,255,255)">offsetMetadata = </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">LogOffsetMetadata(startOffset</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><strong><span style="color:#0080; background:rgb(255,255,255)">this</span></strong><span style="color:#000000; background:rgb(255,255,255)">.baseOffset</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">       </span><span style="color:#000000; background:rgb(255,255,255)">startPosition.position)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">如果要查找的大小为0,表示没有必要进行查询，直接返回一个空的消息集合。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><em><span style="color:#808080; background:rgb(255,255,255)">// if the size is zero, still return a log segment but with zero size</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">  </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">if</span></strong><span style="color:#000000; background:rgb(255,255,255)">(maxSize == </span><span style="color:#00ff; background:rgb(255,255,255)">0</span><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">return </span></strong><em><span style="color:#000000; background:rgb(255,255,255)">FetchDataInfo</span></em><span style="color:#000000; background:rgb(255,255,255)">(offsetMetadata</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">MessageSet.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">Empty</span></em><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里根据要执行的最大的offset的值，计算出要读取的数据长度，</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">1,如果maxOffset的值不是None时，根据这个offset（必须大于startOffset）从segment中计算出这个fofset对应的位置，如果在segment中找到了maxOffset对应的位置或者文件最后的位置，根据这个位置与这次要进行读取的最大的byte字节数，取最小值来计算出要读取的长度，也就是说如果当前的文件还剩下的长度小于要读取的字节数，取剩余的长度，否则按读取的字节数来当要读取的长度。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">2,如果maxOffset的值是None时，这里的计算相对简单，直接根据文件的最后位置减去开始读取的位置得到一个长度与要读取的最大的长度取最小值。</span><em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">  </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">length = </span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    maxOffset </span><strong><span style="color:#0080; background:rgb(255,255,255)">match </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><strong><span style="color:#0080; background:rgb(255,255,255)">case </span></strong><span style="color:#000000; background:rgb(255,255,255)">None =&gt;</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><em><span style="color:#808080; background:rgb(255,255,255)">// no max offset, just read until the max position</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">        </span><span style="color:#000000; background:rgb(255,255,255)">min</span></em><span style="color:#000000; background:rgb(255,255,255)">((maxPosition - startPosition.position).toInt</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">maxSize)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><strong><span style="color:#0080; background:rgb(255,255,255)">case </span></strong><em><span style="color:#000000; background:rgb(255,255,255)">Some</span></em><span style="color:#000000; background:rgb(255,255,255)">(offset) =&gt; {</span><em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">        </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">if</span></strong><span style="color:#000000; background:rgb(255,255,255)">(offset &lt; startOffset)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">          </span><strong><span style="color:#0080; background:rgb(255,255,255)">throw new </span></strong><span style="color:#000000; background:rgb(255,255,255)">IllegalArgumentException(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Attempt to read with a maximum offset </span></strong></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0800; background:rgb(255,255,255)">              (%d) less than the start offset (%d)."</span></strong><span style="color:#000000; background:rgb(255,255,255)">.format(offset</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">startOffset))</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">mapping = translateOffset(offset</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">startPosition.position)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">endPosition = </span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">          </span><strong><span style="color:#0080; background:rgb(255,255,255)">if</span></strong><span style="color:#000000; background:rgb(255,255,255)">(mapping == </span><strong><span style="color:#0080; background:rgb(255,255,255)">null</span></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">            logSize </span><em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">          </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">else</span><span style="color:#0080; background:rgb(255,255,255)"><br>
</span><span style="color:#0080; background:rgb(255,255,255)">            </span></strong><span style="color:#000000; background:rgb(255,255,255)">mapping.position</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><em><span style="color:#000000; background:rgb(255,255,255)">min</span></em><span style="color:#000000; background:rgb(255,255,255)">(</span><em><span style="color:#000000; background:rgb(255,255,255)">min</span></em><span style="color:#000000; background:rgb(255,255,255)">(maxPosition</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">endPosition) - startPosition.position</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">maxSize).toInt</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    }</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">最后，根据计算出来的开始位置与要读取的长度，从日志文件中读取消息并存储到一个buffer中。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><em><span style="color:#000000; background:rgb(255,255,255)">FetchDataInfo</span></em><span style="color:#000000; background:rgb(255,255,255)">(offsetMetadata</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">log.read(startPosition.position</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">length))</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<h3><strong>延时处理<span style="font-family:Arial">fetch</span><span style="font-family:SimSun">的请求响应</span></strong></h3>
<p>当一个<span style="font-family:Times New Roman">fetch</span><span style="font-family:SimSun">的请求处理时，如果对应的</span><span style="font-family:Times New Roman">partition</span><span style="font-family:SimSun">集合有部分</span><span style="font-family:Times New Roman">fetch</span><span style="font-family:SimSun">出现错误时，会生成一个步处理的操作，</span><span style="color:#000000; background:rgb(255,255,255)">DelayedFetch，并通过</span><em><span style="color:#66e7a; background:rgb(255,255,255)">delayedFetchPurgatory</span></em><span style="color:#000000; background:rgb(255,255,255)">来进行处理。</span></p>
<p><span style="color:#000000; background:rgb(255,255,255)">1,先看看第一步完成请求或者放入监听的操作,：</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">1,1,首先执行DelayedFetch中的</span><span style="color:#000000; background:rgb(228,228,255)">tryComplete</span><span style="color:#000000; background:rgb(255,255,255)">函数来检查是否执行完成。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span><em><span style="color:#808080; background:rgb(255,255,255)">*/</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span></em><strong><span style="color:#0080; background:rgb(255,255,255)">override def </span></strong><span style="color:#000000; background:rgb(255,255,255)">tryComplete() : </span><span style="color:#cc7832; background:rgb(255,255,255)">Boolean </span><span style="color:#000000; background:rgb(255,255,255)">= {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">var </span></strong><span style="color:#000000; background:rgb(255,255,255)">accumulatedSize = </span><span style="color:#00ff; background:rgb(255,255,255)">0</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#00ff; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#00ff; background:rgb(255,255,255)">迭代每一个partition的处理结果的状态集，</span><span style="color:#00ff; background:rgb(255,255,255)"><br>
</span><span style="color:#00ff; background:rgb(255,255,255)">  </span><span style="color:#000000; background:rgb(255,255,255)">fetchMetadata.fetchPartitionStatus.foreach {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">case </span></strong><span style="color:#000000; background:rgb(255,255,255)">(topicAndPartition</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">fetchStatus) =&gt;</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">fetchOffset = fetchStatus.startOffsetMetadata</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><strong><span style="color:#0080; background:rgb(255,255,255)">try </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">if </span></strong><span style="color:#000000; background:rgb(255,255,255)">(fetchOffset != LogOffsetMetadata.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">UnknownOffsetMetadata</span></em><span style="color:#000000; background:rgb(255,255,255)">) {</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">如果处理这个partition时，得到的处理结果不是一个</span><em><span style="color:#66e7a; background:rgb(255,255,255)">UnknownOffsetMetadata</span></em><span style="color:#000000; background:rgb(255,255,255)">实例时，得到当前的broker中的副本，这个副本必须是leader的副本。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">          </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">replica = replicaManager.getLeaderReplicaIfLocal(</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">               topicAndPartition.topic</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">topicAndPartition.partition)</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">得到用于进行读取时，最大可能读取到的最后的一个offset值。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">          </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">endOffset =</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">            </span><strong><span style="color:#0080; background:rgb(255,255,255)">if </span></strong><span style="color:#000000; background:rgb(255,255,255)">(fetchMetadata.fetchOnlyCommitted)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">              replica.highWatermark</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">            </span><strong><span style="color:#0080; background:rgb(255,255,255)">else</span><span style="color:#0080; background:rgb(255,255,255)"><br>
</span><span style="color:#0080; background:rgb(255,255,255)">              </span></strong><span style="color:#000000; background:rgb(255,255,255)">replica.logEndOffset</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">如果针对这一个partition开始读取的offset的值与当前可以用于读取的endOffset的值不相同，表示当前的partition中有可以读取的数据,或者endOffset小于beginOffset.</span><em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">          </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">if </span></strong><span style="color:#000000; background:rgb(255,255,255)">(endOffset.messageOffset != fetchOffset.messageOffset) {</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">如果当前最后一个可以读取的endOffset对应的segment的baseOffset的值小于fetchOffset对应的segment的baseOffset的值，表示当前要开始查询的位置可能在当前endOffset对应的segment中。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">            </span><strong><span style="color:#0080; background:rgb(255,255,255)">if </span></strong><span style="color:#000000; background:rgb(255,255,255)">(endOffset.onOlderSegment(fetchOffset)) {</span><em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">              </span></em><span style="color:#000000; background:rgb(255,255,255)">debug(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Satisfying fetch %s since it is fetching later segments of </span></strong></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0800; background:rgb(255,255,255)">                  partition %s."</span></strong><span style="color:#000000; background:rgb(255,255,255)">.format(fetchMetadata</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">topicAndPartition))</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">执行完成操作，这里会调用onComplete函数</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">              </span><strong><span style="color:#0080; background:rgb(255,255,255)">return </span></strong><span style="color:#000000; background:rgb(255,255,255)">forceComplete()</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">            } </span><strong><span style="color:#0080; background:rgb(255,255,255)">else if </span></strong><span style="color:#000000; background:rgb(255,255,255)">(fetchOffset.onOlderSegment(endOffset)) {</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">如果当前开始要读取的fetchOffset对应的segment的baseOffset小于endOffset对应的segment的开始位置，表示这个开始位置对应的segment是endOffset对应的segment的前面的segment,</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">执行完成操作，这里会调用onComplete函数</span><em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">              </span></em><span style="color:#000000; background:rgb(255,255,255)">debug(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Satisfying fetch %s immediately since it is fetching older </span></strong></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0800; background:rgb(255,255,255)">                      segments."</span></strong><span style="color:#000000; background:rgb(255,255,255)">.format(fetchMetadata))</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">              </span><strong><span style="color:#0080; background:rgb(255,255,255)">return </span></strong><span style="color:#000000; background:rgb(255,255,255)">forceComplete()</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">            } </span><strong><span style="color:#0080; background:rgb(255,255,255)">else if </span></strong><span style="color:#000000; background:rgb(255,255,255)">(fetchOffset.messageOffset &lt; endOffset.messageOffset) {</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这种情况，表示当前读取的消息正常，读取的offset小于当前endOffset中对应的这个messageOffset的值(最后一个可以读取到的offset)。累加出共读取到的数据的字节大小。</span><em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">              </span></em><span style="color:#000000; background:rgb(255,255,255)">accumulatedSize += math.</span><em><span style="color:#000000; background:rgb(255,255,255)">min</span></em><span style="color:#000000; background:rgb(255,255,255)">(endOffset.positionDiff(fetchOffset)</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">                    </span><span style="color:#000000; background:rgb(255,255,255)">fetchStatus.fetchInfo.fetchSize)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">            }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">          }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      } </span><strong><span style="color:#0080; background:rgb(255,255,255)">catch </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">case </span></strong><span style="color:#000000; background:rgb(255,255,255)">utpe: UnknownTopicOrPartitionException =&gt; </span><em><span style="color:#808080; background:rgb(255,255,255)">// Case B</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">          </span></em><span style="color:#000000; background:rgb(255,255,255)">debug(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Broker no longer know of %s, satisfy %s </span></strong></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0800; background:rgb(255,255,255)">                   immediately"</span></strong><span style="color:#000000; background:rgb(255,255,255)">.format(topicAndPartition</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">fetchMetadata))</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">          </span><strong><span style="color:#0080; background:rgb(255,255,255)">return </span></strong><span style="color:#000000; background:rgb(255,255,255)">forceComplete()</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">case </span></strong><span style="color:#000000; background:rgb(255,255,255)">nle: NotLeaderForPartitionException =&gt;  </span><em><span style="color:#808080; background:rgb(255,255,255)">// Case A</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">          </span></em><span style="color:#000000; background:rgb(255,255,255)">debug(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Broker is no longer the leader of %s, satisfy %s </span></strong></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0800; background:rgb(255,255,255)">                 immediately"</span></strong><span style="color:#000000; background:rgb(255,255,255)">.format(topicAndPartition</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">fetchMetadata))</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">          </span><strong><span style="color:#0080; background:rgb(255,255,255)">return </span></strong><span style="color:#000000; background:rgb(255,255,255)">forceComplete()</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><em><span style="color:#808080; background:rgb(255,255,255)">// Case D</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">  </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">if </span></strong><span style="color:#000000; background:rgb(255,255,255)">(accumulatedSize &gt;= fetchMetadata.fetchMinBytes)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    forceComplete()</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">else</span><span style="color:#0080; background:rgb(255,255,255)"><br>
</span><span style="color:#0080; background:rgb(255,255,255)">    false</span><span style="color:#0080; background:rgb(255,255,255)"><br>
</span></strong><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">当达到延时的时间间隔或者对tryComplete执行完成时，执行的onComplete函数：</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这个函数重新执行上面分析的从LogManager组件中加载fetch请求的数据集的部分的操作，并通过回调函数向client端回写处理的结果。</span></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0080; background:rgb(255,255,255)">override def </span></strong><span style="color:#000000; background:rgb(255,255,255)">onComplete() {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">logReadResults = replicaManager.readFromLocalLog(</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">fetchMetadata.fetchOnlyLeader</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">    </span><span style="color:#000000; background:rgb(255,255,255)">fetchMetadata.fetchOnlyCommitted</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">    </span><span style="color:#000000; background:rgb(255,255,255)">fetchMetadata.fetchPartitionStatus.mapValues(status =&gt; status.fetchInfo))</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">fetchPartitionData = logReadResults.mapValues(result =&gt;</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    FetchResponsePartitionData(result.errorCode</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">result.hw</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">      result.info.messageSet))</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  responseCallback(fetchPartitionData)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<h2><strong><em>定时持久化<span style="font-family:Arial">HighWaterMarks</span><span style="font-family:SimSun">线程</span></em></strong></h2>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">当一个Broker上线时，执行ReplicaManager中的becomeLeaderOrFollower函数时，如果这个函数没有被初始化时，会启动一个定时器对副本中可以的offset的信息进行定时的持久化的操作。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">highWaterMarks中记录有所有在isr队列中的副本的最小可见的offset的信息。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">定时时间由</span><strong><span style="color:#0800; background:rgb(255,255,255)">replica.high.watermark.checkpoint.interval.ms</span></strong><span style="color:#000000; background:rgb(255,255,255)">配置，默认值5秒。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">定时执行的函数：</span></p>
<p style="background:rgb(255,255,255)"><em><span style="color:#808080; background:rgb(255,255,255)">// Flushes the highwatermark value for all partitions to the highwatermark file</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span></em><strong><span style="color:#0080; background:rgb(255,255,255)">def </span></strong><span style="color:#000000; background:rgb(255,255,255)">checkpointHighWatermarks() {</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里迭代所有的partition中副本在当前的broker中包含的所有的副本集合。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">replicas = </span><em><span style="color:#66e7a; background:rgb(255,255,255)">allPartitions</span></em><span style="color:#000000; background:rgb(255,255,255)">.values.map(_.getReplica(config.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">brokerId</span></em><span style="color:#000000; background:rgb(255,255,255)">))</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">          .collect{</span><strong><span style="color:#0080; background:rgb(255,255,255)">case </span></strong><em><span style="color:#000000; background:rgb(255,255,255)">Some</span></em><span style="color:#000000; background:rgb(255,255,255)">(replica) =&gt; replica}</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">根据当前broker中包含的副本集合，按副本存储的目录进行分组。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">replicasByDir = replicas.filter(_.log.isDefined).groupBy(</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">           _.log.get.dir.getParentFile.getAbsolutePath)</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">迭代按目录分组的所有的副本集合,并根据目录生成一个topicPartition-&gt;offset的map集合，把这个集合直接写入到dir中对应的</span><strong><span style="color:#0800; background:rgb(255,255,255)">replication-offset-checkpoint</span></strong><span style="color:#000000; background:rgb(255,255,255)">文件中。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">for</span></strong><span style="color:#000000; background:rgb(255,255,255)">((dir</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">reps) &lt;- replicasByDir) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">hwms = reps.map(r =&gt; (</span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">TopicAndPartition(r) -&gt; </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">          r.highWatermark.messageOffset)).toMap</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">try </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><em><span style="color:#66e7a; background:rgb(255,255,255)">highWatermarkCheckpoints</span></em><span style="color:#000000; background:rgb(255,255,255)">(dir).write(hwms)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    } </span><strong><span style="color:#0080; background:rgb(255,255,255)">catch </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><strong><span style="color:#0080; background:rgb(255,255,255)">case </span></strong><span style="color:#000000; background:rgb(255,255,255)">e: IOException =&gt;</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        fatal(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Error writing to highwatermark file: "</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">e)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        Runtime.</span><em><span style="color:#000000; background:rgb(255,255,255)">getRuntime</span></em><span style="color:#000000; background:rgb(255,255,255)">().halt(</span><span style="color:#00ff; background:rgb(255,255,255)">1</span><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<h2><strong><em>副本复制</em></strong></h2>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">当一个副本被标记为是一个follower的副本时，会生成一个副本复制的线程，用于同步这个副本对应的partition的leader的消息。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这个线程在LeaderAndIsr请求发起时，通过调用ReplicaManager中的</span><span style="color:#000000; background:rgb(228,228,255)">becomeLeaderOrFollower</span><span style="color:#000000; background:rgb(255,255,255)">函数为入口发起,如果副本是follower的副本时，执行</span><span style="color:#000000; background:rgb(228,228,255)">makeFollowers</span><span style="color:#000000; background:rgb(255,255,255)">函数，最终根据每一个broker生成一个同步的</span><span style="color:#000000; background:rgb(228,228,255)">ReplicaFetcherThread</span><span style="color:#000000; background:rgb(255,255,255)">线程。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这个线程的定时执行间隔通过</span><strong><span style="color:#0800; background:rgb(255,255,255)">replica.fetch.backoff.ms</span></strong><span style="color:#000000; background:rgb(255,255,255)">配置，默认值为1秒。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">线程执行的入口函数：</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">在这个函数中，根据当前线程对应的broker中需要同步的partition的集合，生成fetch的请求，</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">如果当前的线程中没有需要同步的partition时，会根据上面提到的配置的间隔时间进行wait操作。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">根据生成的请求执行processFetchRequest的操作。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><strong><span style="color:#0080; background:rgb(255,255,255)">override def </span></strong><span style="color:#000000; background:rgb(255,255,255)">doWork() {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">fetchRequest = </span><em><span style="color:#000000; background:rgb(255,255,255)">inLock</span></em><span style="color:#000000; background:rgb(255,255,255)">(</span><em><span style="color:#66e7a; background:rgb(255,255,255)">partitionMapLock</span></em><span style="color:#000000; background:rgb(255,255,255)">) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">fetchRequest = buildFetchRequest(</span><em><span style="color:#66e7a; background:rgb(255,255,255)">partitionMap</span></em><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">if </span></strong><span style="color:#000000; background:rgb(255,255,255)">(fetchRequest.isEmpty) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      trace(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"There are no active partitions. Back off for %d ms before sending a fetch </span></strong></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0800; background:rgb(255,255,255)">            request"</span></strong><span style="color:#000000; background:rgb(255,255,255)">.format(fetchBackOffMs))</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><em><span style="color:#66e7a; background:rgb(255,255,255)">partitionMapCond</span></em><span style="color:#000000; background:rgb(255,255,255)">.await(fetchBackOffMs</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">TimeUnit.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">MILLISECONDS</span></em><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    fetchRequest</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">if </span></strong><span style="color:#000000; background:rgb(255,255,255)">(!fetchRequest.isEmpty)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    processFetchRequest(fetchRequest)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">1,根据partition leader broker对应的partition的集合，生成fetch的请求：</span></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0080; background:rgb(255,255,255)">protected def </span></strong><span style="color:#000000; background:rgb(255,255,255)">buildFetchRequest(partitionMap: Map[TopicAndPartition</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">PartitionFetchState]): FetchRequest = {</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">requestMap = mutable.Map.</span><em><span style="color:#000000; background:rgb(255,255,255)">empty</span></em><span style="color:#000000; background:rgb(255,255,255)">[TopicPartition</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">JFetchRequest.PartitionData]</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">根据这个线程对应的broker的所有的partition生成fetch消息的请求信息，包含每个partition对应的offset开始值。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  partitionMap.foreach { </span><strong><span style="color:#0080; background:rgb(255,255,255)">case </span></strong><span style="color:#000000; background:rgb(255,255,255)">((</span><em><span style="color:#000000; background:rgb(255,255,255)">TopicAndPartition</span></em><span style="color:#000000; background:rgb(255,255,255)">(topic</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">partition)</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">                   </span><span style="color:#000000; background:rgb(255,255,255)">partitionFetchState)) =&gt;</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">if </span></strong><span style="color:#000000; background:rgb(255,255,255)">(partitionFetchState.isActive)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      requestMap(</span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">TopicPartition(topic</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">partition)) = </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">          </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">JFetchRequest.PartitionData(partitionFetchState.offset</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><em><span style="color:#66e7a; background:rgb(255,255,255)">fetchSize</span></em><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">FetchRequest(</span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">JFetchRequest(</span><em><span style="color:#66e7a; background:rgb(255,255,255)">replicaId</span></em><span style="color:#cc7832; background:rgb(255,255,255)">, </span><em><span style="color:#66e7a; background:rgb(255,255,255)">maxWait</span></em><span style="color:#cc7832; background:rgb(255,255,255)">, </span><em><span style="color:#66e7a; background:rgb(255,255,255)">minBytes</span></em><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">          </span><span style="color:#000000; background:rgb(255,255,255)">requestMap.asJava))</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">2,执行fetch请求的处理：</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">2,1发起fetch的请求，向对应的broker节点。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">2,2请求响应正确的消息处理：</span></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0080; background:rgb(255,255,255)">case </span></strong><span style="color:#000000; background:rgb(255,255,255)">Errors.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">NONE </span></em><span style="color:#000000; background:rgb(255,255,255)">=&gt;</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">try </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">得到fetch结果的消息集合，在验证完成消息集合后，得到这个消息集合中最后一条记录的offset的值，</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">messages = partitionData.toByteBufferMessageSet</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">validBytes = messages.validBytes</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">newOffset = messages.shallowIterator.toSeq.lastOption </span><strong><span style="color:#0080; background:rgb(255,255,255)">match </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><strong><span style="color:#0080; background:rgb(255,255,255)">case </span></strong><em><span style="color:#000000; background:rgb(255,255,255)">Some</span></em><span style="color:#000000; background:rgb(255,255,255)">(m: MessageAndOffset) =&gt; m.nextOffset</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><strong><span style="color:#0080; background:rgb(255,255,255)">case </span></strong><span style="color:#000000; background:rgb(255,255,255)">None =&gt; currentPartitionFetchState.offset</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    }</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">更新对应响应消息的partition对应的offset为fetch到的最后一条消息的offset.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><em><span style="color:#66e7a; background:rgb(255,255,255)">partitionMap</span></em><span style="color:#000000; background:rgb(255,255,255)">.put(topicAndPartition</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">PartitionFetchState(newOffset))</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><em><span style="color:#66e7a; background:rgb(255,255,255)">fetcherLagStats</span></em><span style="color:#000000; background:rgb(255,255,255)">.getFetcherLagStats(topic</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">partitionId).lag = Math.</span><em><span style="color:#000000; background:rgb(255,255,255)">max</span></em><span style="color:#000000; background:rgb(255,255,255)">(</span><span style="color:#00ff; background:rgb(255,255,255)">0L</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">                 </span><span style="color:#000000; background:rgb(255,255,255)">partitionData.highWatermark - newOffset)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><em><span style="color:#66e7a; background:rgb(255,255,255)">fetcherStats</span></em><span style="color:#000000; background:rgb(255,255,255)">.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">byteRate</span></em><span style="color:#000000; background:rgb(255,255,255)">.mark(validBytes)</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">执行processPartitionData函数来处理fetch响应过来的消息集合。</span><em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    </span></em><span style="color:#000000; background:rgb(255,255,255)">processPartitionData(topicAndPartition</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">currentPartitionFetchState.offset</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">           </span><span style="color:#000000; background:rgb(255,255,255)">partitionData)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  } </span><strong><span style="color:#0080; background:rgb(255,255,255)">catch </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">case </span></strong><span style="color:#000000; background:rgb(255,255,255)">ime: InvalidMessageException =&gt;</span><em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">      </span><span style="color:#66e7a; background:rgb(255,255,255)">logger</span></em><span style="color:#000000; background:rgb(255,255,255)">.error(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Found invalid messages during fetch for partition [" </span></strong><span style="color:#000000; background:rgb(255,255,255)">+ topic + </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">           </span><strong><span style="color:#0800; background:rgb(255,255,255)">"," </span></strong><span style="color:#000000; background:rgb(255,255,255)">+ partitionId + </span><strong><span style="color:#0800; background:rgb(255,255,255)">"] offset " </span></strong><span style="color:#000000; background:rgb(255,255,255)">+ currentPartitionFetchState.offset  + </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">           </span><strong><span style="color:#0800; background:rgb(255,255,255)">" error " </span></strong><span style="color:#000000; background:rgb(255,255,255)">+ ime.getMessage)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">case </span></strong><span style="color:#000000; background:rgb(255,255,255)">e: </span><span style="color:#20999d; background:rgb(255,255,255)">Throwable </span><span style="color:#000000; background:rgb(255,255,255)">=&gt;</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><strong><span style="color:#0080; background:rgb(255,255,255)">throw new </span></strong><span style="color:#000000; background:rgb(255,255,255)">KafkaException(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"error processing data for partition [%s,%d] </span></strong></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0800; background:rgb(255,255,255)">        offset %d"</span><span style="color:#0800; background:rgb(255,255,255)"><br>
</span><span style="color:#0800; background:rgb(255,255,255)">        </span></strong><span style="color:#000000; background:rgb(255,255,255)">.format(topic</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">partitionId</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">currentPartitionFetchState.offset)</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">e)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  }</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">用于处理某个partition的fetch响应的消息集合：</span></p>
<p style="background:rgb(255,255,255)"><em><span style="color:#808080; background:rgb(255,255,255)">// process fetched data</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span></em><strong><span style="color:#0080; background:rgb(255,255,255)">def </span></strong><span style="color:#000000; background:rgb(255,255,255)">processPartitionData(topicAndPartition: TopicAndPartition</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">fetchOffset: </span><span style="color:#cc7832; background:rgb(255,255,255)">Long, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">partitionData: PartitionData) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">try </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><em><span style="color:#000000; background:rgb(255,255,255)">TopicAndPartition</span></em><span style="color:#000000; background:rgb(255,255,255)">(topic</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">partitionId) = topicAndPartition</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">replica = replicaMgr.getReplica(topic</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">partitionId).get</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">messageSet = partitionData.toByteBufferMessageSet</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    warnIfMessageOversized(messageSet)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里首先检查fetch请求前的offset(发起请求时offset的开始值)与当前的副本中最后一条消息的offset的值是否相同，这个值必须相同。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">if </span></strong><span style="color:#000000; background:rgb(255,255,255)">(fetchOffset != replica.logEndOffset.messageOffset)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><strong><span style="color:#0080; background:rgb(255,255,255)">throw new </span></strong><span style="color:#000000; background:rgb(255,255,255)">RuntimeException(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Offset mismatch: fetched offset = %d, log end offset </span></strong></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0800; background:rgb(255,255,255)">        = %d."</span></strong><span style="color:#000000; background:rgb(255,255,255)">.format(fetchOffset</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">replica.logEndOffset.messageOffset))</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    trace(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Follower %d has replica log end offset %d for partition %s. Received %d </span></strong></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0800; background:rgb(255,255,255)">           messages and leader hw %d"</span><span style="color:#0800; background:rgb(255,255,255)"><br>
</span><span style="color:#0800; background:rgb(255,255,255)">          </span></strong><span style="color:#000000; background:rgb(255,255,255)">.format(replica.brokerId</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">replica.logEndOffset.messageOffset</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">             </span><span style="color:#000000; background:rgb(255,255,255)">topicAndPartition</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">messageSet.sizeInBytes</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">             </span><span style="color:#000000; background:rgb(255,255,255)">partitionData.highWatermark))</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">通过副本对应的Log实例，向Log中写入这个消息集合，在写入这个消息集合时，设置assignOffsets的值为false,因为这个消息集合已经存在对应的offset,不需要对offset进行分配。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    replica.log.get.append(messageSet</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">assignOffsets = </span><strong><span style="color:#0080; background:rgb(255,255,255)">false</span></strong><span style="color:#000000; background:rgb(255,255,255)">)</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    trace(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Follower %d has replica log end offset %d after appending %d bytes of </span></strong></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0800; background:rgb(255,255,255)">           messages for partition %s"</span><span style="color:#0800; background:rgb(255,255,255)"><br>
</span><span style="color:#0800; background:rgb(255,255,255)">          </span></strong><span style="color:#000000; background:rgb(255,255,255)">.format(replica.brokerId</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">replica.logEndOffset.messageOffset</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">             </span><span style="color:#000000; background:rgb(255,255,255)">messageSet.sizeInBytes</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">topicAndPartition))</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">得到响应的消息中响应过来的leader的副本中记录的highWatermark的offset与当前的副本中最后的offset的值，取最小的offset为当前副本的highWatermark的值。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">followerHighWatermark = replica.logEndOffset.messageOffset.min(</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">            partitionData.highWatermark)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><em><span style="color:#808080; background:rgb(255,255,255)">// for the follower replica, we do not need to keep</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    // its segment base offset the physical position,</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    // these values will be computed upon making the leader</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    </span></em><span style="color:#000000; background:rgb(255,255,255)">replica.highWatermark = </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">LogOffsetMetadata(followerHighWatermark)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    trace(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Follower %d set replica high watermark for partition [%s,%d] to %s"</span><span style="color:#0800; background:rgb(255,255,255)"><br>
</span><span style="color:#0800; background:rgb(255,255,255)">          </span></strong><span style="color:#000000; background:rgb(255,255,255)">.format(replica.brokerId</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">topic</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">partitionId</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">followerHighWatermark))</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  } </span><strong><span style="color:#0080; background:rgb(255,255,255)">catch </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">case </span></strong><span style="color:#000000; background:rgb(255,255,255)">e: KafkaStorageException =&gt;</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      fatal(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Disk error while replicating data."</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">e)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      Runtime.</span><em><span style="color:#000000; background:rgb(255,255,255)">getRuntime</span></em><span style="color:#000000; background:rgb(255,255,255)">.halt(</span><span style="color:#00ff; background:rgb(255,255,255)">1</span><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">2,3处理响应的partition中出现的</span><span style="color:#000000; background:rgb(228,228,255)">OFFSET_OUT_OF_RANGE</span><span style="color:#000000; background:rgb(255,255,255)">错误代码：</span></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0080; background:rgb(255,255,255)">case </span></strong><span style="color:#000000; background:rgb(255,255,255)">Errors.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">OFFSET_OUT_OF_RANGE </span></em><span style="color:#000000; background:rgb(255,255,255)">=&gt;</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">try </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里根据handleOffsetOutOfRange函数得到这个partition处理的最新的offset,并更新到下次进行fetch操作的offset中。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">newOffset = handleOffsetOutOfRange(topicAndPartition)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><em><span style="color:#66e7a; background:rgb(255,255,255)">partitionMap</span></em><span style="color:#000000; background:rgb(255,255,255)">.put(topicAndPartition</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">PartitionFetchState(newOffset))</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    error(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Current offset %d for partition [%s,%d] out of range; reset offset to %d"</span><span style="color:#0800; background:rgb(255,255,255)"><br>
</span><span style="color:#0800; background:rgb(255,255,255)">      </span></strong><span style="color:#000000; background:rgb(255,255,255)">.format(currentPartitionFetchState.offset</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">topic</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">partitionId</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">newOffset))</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  } </span><strong><span style="color:#0080; background:rgb(255,255,255)">catch </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">case </span></strong><span style="color:#000000; background:rgb(255,255,255)">e: </span><span style="color:#20999d; background:rgb(255,255,255)">Throwable </span><span style="color:#000000; background:rgb(255,255,255)">=&gt;</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      error(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Error getting offset for partition [%s,%d] to broker %d"</span></strong></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0800; background:rgb(255,255,255)">            </span></strong><span style="color:#000000; background:rgb(255,255,255)">.format(topic</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">partitionId</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">sourceBroker.id)</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">e)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      partitionsWithError += topicAndPartition</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  }</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">offset超出范围的partition的响应的处理：</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span><em><span style="color:#808080; background:rgb(255,255,255)">*/</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span></em><strong><span style="color:#0080; background:rgb(255,255,255)">def </span></strong><span style="color:#000000; background:rgb(255,255,255)">handleOffsetOutOfRange(topicAndPartition: TopicAndPartition): </span><span style="color:#cc7832; background:rgb(255,255,255)">Long </span><span style="color:#000000; background:rgb(255,255,255)">= {</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">得到当前的partition在当前的节点上的副本。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">replica = replicaMgr.getReplica(topicAndPartition.topic</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">          </span><span style="color:#000000; background:rgb(255,255,255)">topicAndPartition.partition).get</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里直接向leader的副本发起一个</span><span style="color:#000000; background:rgb(228,228,255)">ListOffsetRequest</span><span style="color:#000000; background:rgb(255,255,255)">请求，并得到这个partition中最大的一个offset的值。</span><em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">  </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">leaderEndOffset: </span><span style="color:#cc7832; background:rgb(255,255,255)">Long </span><span style="color:#000000; background:rgb(255,255,255)">= earliestOrLatestOffset(topicAndPartition</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">ListOffsetRequest.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">LATEST_TIMESTAMP</span></em><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">    </span><span style="color:#000000; background:rgb(255,255,255)">brokerConfig.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">brokerId</span></em><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">如果当前leader中的副本的最大的offset小于当前副本中最大的offset,表示当前的副本中的数据比leader中的数据数据多，</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">if </span></strong><span style="color:#000000; background:rgb(255,255,255)">(leaderEndOffset &lt; replica.logEndOffset.messageOffset) {</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">检查</span><strong><span style="color:#0800; background:rgb(255,255,255)">unclean.leader.election.enable</span></strong><span style="color:#000000; background:rgb(255,255,255)">配置是否配置为true,这种情况，这个配置必须为true.</span><em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">if </span></strong><span style="color:#000000; background:rgb(255,255,255)">(!LogConfig.</span><em><span style="color:#000000; background:rgb(255,255,255)">fromProps</span></em><span style="color:#000000; background:rgb(255,255,255)">(brokerConfig.originals</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">        </span><span style="color:#000000; background:rgb(255,255,255)">AdminUtils.</span><em><span style="color:#000000; background:rgb(255,255,255)">fetchEntityConfig</span></em><span style="color:#000000; background:rgb(255,255,255)">(replicaMgr.zkUtils</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">      </span><span style="color:#000000; background:rgb(255,255,255)">ConfigType.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">Topic</span></em><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">topicAndPartition.topic)).</span><em><span style="color:#66e7a; background:rgb(255,255,255)">uncleanLeaderElectionEnable</span></em><span style="color:#000000; background:rgb(255,255,255)">) {</span></p>
<p style="background:rgb(255,255,255)"><em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">      </span></em><span style="color:#000000; background:rgb(255,255,255)">fatal(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Halting because log truncation is not allowed for topic %s,"</span></strong></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0800; background:rgb(255,255,255)">        </span></strong><span style="color:#000000; background:rgb(255,255,255)">.format(topicAndPartition.topic) +</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><strong><span style="color:#0800; background:rgb(255,255,255)">" Current leader %d's latest offset %d is less than replica %d's latest offset </span></strong></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0800; background:rgb(255,255,255)">        %d"</span></strong><span style="color:#000000; background:rgb(255,255,255)">.format(sourceBroker.id</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">leaderEndOffset</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">brokerConfig.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">brokerId</span></em><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">             </span><span style="color:#000000; background:rgb(255,255,255)">replica.logEndOffset.messageOffset))</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      Runtime.</span><em><span style="color:#000000; background:rgb(255,255,255)">getRuntime</span></em><span style="color:#000000; background:rgb(255,255,255)">.halt(</span><span style="color:#00ff; background:rgb(255,255,255)">1</span><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    warn(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Replica %d for partition %s reset its fetch offset from %d to current leader </span></strong></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0800; background:rgb(255,255,255)">         %d's latest offset %d"</span><span style="color:#0800; background:rgb(255,255,255)"><br>
</span><span style="color:#0800; background:rgb(255,255,255)">      </span></strong><span style="color:#000000; background:rgb(255,255,255)">.format(brokerConfig.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">brokerId</span></em><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">topicAndPartition</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">          </span><span style="color:#000000; background:rgb(255,255,255)">replica.logEndOffset.messageOffset</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">sourceBroker.id</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">leaderEndOffset))</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">对当前副本中的日志文件进行截断，截断到leader的endOffset对应的位置，同时根据这个offset更新对应的</span><span style="color:#000000; background:rgb(228,228,255)">RecoveryPointOffsets</span><span style="color:#000000; background:rgb(255,255,255)">的值。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这个过程会更新对应目录下</span><strong><span style="color:#0800; background:rgb(255,255,255)">recovery-point-offset-checkpoint</span></strong><span style="color:#000000; background:rgb(255,255,255)">文件的内容。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    replicaMgr.logManager.truncateTo(Map(topicAndPartition -&gt; leaderEndOffset))</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">返回新的offset的值为leader的副本中最后个endoffset的值。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    leaderEndOffset</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  } </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这种情况下，表示leader的副本中最大的offset的值比当前的副本中最大的offset的值大，也就是说当前的副本中最大的offset其实是小于leader的副本中最小的offset.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">else </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">发起一个ListOffsetRequest请求。这个请求得到当前leader的副本中最小的offset的值。</span><em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">leaderStartOffset: </span><span style="color:#cc7832; background:rgb(255,255,255)">Long </span><span style="color:#000000; background:rgb(255,255,255)">= earliestOrLatestOffset(topicAndPartition</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">          </span><span style="color:#000000; background:rgb(255,255,255)">ListOffsetRequest.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">EARLIEST_TIMESTAMP</span></em><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">          </span><span style="color:#000000; background:rgb(255,255,255)">brokerConfig.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">brokerId</span></em><span style="color:#000000; background:rgb(255,255,255)">)</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    warn(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Replica %d for partition %s reset its fetch offset from %d to current leader </span></strong></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0800; background:rgb(255,255,255)">        %d's start offset %d"</span><span style="color:#0800; background:rgb(255,255,255)"><br>
</span><span style="color:#0800; background:rgb(255,255,255)">      </span></strong><span style="color:#000000; background:rgb(255,255,255)">.format(brokerConfig.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">brokerId</span></em><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">topicAndPartition</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">        </span><span style="color:#000000; background:rgb(255,255,255)">replica.logEndOffset.messageOffset</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">sourceBroker.id</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">leaderStartOffset))</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里根据得到的leader的副本中最小的offset与当前的副本中最大的offset取最大值，这个值是下次执行fetch时使用的startOffset的值。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">offsetToFetch = Math.</span><em><span style="color:#000000; background:rgb(255,255,255)">max</span></em><span style="color:#000000; background:rgb(255,255,255)">(leaderStartOffset</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">          </span><span style="color:#000000; background:rgb(255,255,255)">replica.logEndOffset.messageOffset)</span></p>
<p style="background:rgb(255,255,255)"><em><span style="color:#808080; background:rgb(255,255,255)"> </span></em></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">如果leader的副本中对应的最小的offset的值大于了当前副本中最大的offset的值。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里会删除当前副本中Log下所有的segment的日志与索引文件，并根据这个leaderStartOffset的offset的值，生成一个新的segment的实例，更新这个partition的</span><span style="color:#000000; background:rgb(228,228,255)">RecoveryPointOffsets</span><span style="color:#000000; background:rgb(255,255,255)">的值。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这个过程会更新对应目录下</span><strong><span style="color:#0800; background:rgb(255,255,255)">recovery-point-offset-checkpoint</span></strong><span style="color:#000000; background:rgb(255,255,255)">文件的内容。</span><em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">if </span></strong><span style="color:#000000; background:rgb(255,255,255)">(leaderStartOffset &gt; replica.logEndOffset.messageOffset)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      replicaMgr.logManager.truncateFullyAndStartAt(topicAndPartition</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p><span style="color:#cc7832; background:rgb(255,255,255)">           </span><span style="color:#000000; background:rgb(255,255,255)">leaderStartOffset)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    offsetToFetch</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
            </div>
                </div>