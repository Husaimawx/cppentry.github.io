---
layout:     post
title:      centos6.4安装hbase
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<h2><strong>hbase集群版</strong></h2>
<p>安装好hadoop并创建好目录<br>
./bin/hadoop fs -mkdir /hbase<br><br>
所有hbase节点同步时间<br>
ntpdate ntp.api.bz<br>
hwclock -w<br><br><br>
下载hbase<br>
以下在hbase master节点操作<br>
http://mirrors.cnnic.cn/apache/hbase/stable/hbase-1.1.2-bin.tar.gz<br>
tar zxvf hbase-1.1.2-bin.tar.gz<br>
mv hbase-1.1.2 /home/hadoop<br>
chown -R hadoop.hadoop /home/hadoop/hbase-1.1.2<br>
su - hadoop<br><br>
修改配置文件<br>
cd hbase-1.1.2/conf<br><br>
vim regionservers<br>
添加<br></p><pre><code class="language-plain">slave1
slave2
slave3</code></pre><br>
vim hbase-site.xml<br><pre><code class="language-plain">&lt;?xml version="1.0"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?&gt;
&lt;configuration&gt;
  &lt;property&gt;
    &lt;name&gt;hbase.rootdir&lt;/name&gt;
    &lt;value&gt;hdfs://master1:9000/hbase&lt;/value&gt;
  &lt;/property&gt;
  &lt;property&gt;
    &lt;name&gt;hbase.cluster.distributed&lt;/name&gt;
    &lt;value&gt;true&lt;/value&gt;
  &lt;/property&gt;
  &lt;property&gt;
    &lt;name&gt;hbase.zookeeper.quorum&lt;/name&gt;
    &lt;value&gt;192.168.20.211,192.168.20.212,192.168.20.213&lt;/value&gt;
  &lt;/property&gt;
&lt;/configuration&gt;</code></pre><br><br>
vim hbase-env.sh<br><br><br>
复制代码到regionservers节点<br>
scp -r hbase-1.1.2/ slave1:/home/hadoop/<br>
scp -r hbase-1.1.2/ slave2:/home/hadoop/<br>
scp -r hbase-1.1.2/ slave3:/home/hadoop/<br><br><br>
启动hbase集群<br>
/home/hadoop/hbase-1.1.2/bin/start-hbase.sh<br><br><br>
访问hbase web页<br>
http://192.168.20.221:16010<br><br><br>
停止hbase集群<br>
/home/hadoop/hbase-1.1.2/bin/stop-hbase.sh<br><br>
进入hbase shell<br>
/home/hadoop/hbase-1.1.2/bin/hbase shell<br><br><br><p><br></p>
<p></p>
<h2><strong>单机版</strong></h2>
<p></p>
<p>安装jdk</p>
<p>http://blog.csdn.net/u013619834/article/details/38894649<br></p>
<p><br></p>
<p>下载<br></p>
<p>wget http://apache.fayea.com/apache-mirror/hbase/stable/hbase-0.98.5-hadoop2-bin.tar.gz</p>
<p><br></p>
<p>安装<br></p>
tar zxvf hbase-0.98.5-hadoop2-bin.tar.gz<br>
mv hbase-0.98.5-hadoop2 /usr/local/hbase<br>
mkdir -p /hbase/data<br><br>
cd /usr/local/hbase<br>
vim conf/hbase-site.xml<br>
添加<br><pre><code class="language-plain">&lt;configuration&gt;
    &lt;property&gt;
        &lt;name&gt;hbase.rootdir&lt;/name&gt;
        &lt;value&gt;file:///hbase/data&lt;/value&gt;
    &lt;/property&gt;
&lt;/configuration&gt;</code></pre><br>
启动hbase<br>
./bin/start-hbase.sh<br><br>
用shell连接Hbase<br>
./bin/hbase shell<br><br>
查看帮助<br>
help<br><br>
查看hbase版本<br>
version<br><br>
查看状态<br>
status<br><br>
创建表<br>
create 't1', 'c1'<br><br>
列出所有的表<br>
list<br><br>
插入第1条数据<br>
put 't1', 'row1', 'c1:a', 'value1'<br><br>
插入第2条数据<br>
put 't1', 'row2', 'c1:a', 'value2'<br><br>
插入第2条数据<br>
put 't1', 'row3', 'c1:b', 'value3'<br><br>
scan表<br>
scan 't1',{LIMIT=&gt;1}<br><br>
查看数据<br>
get 't1', 'row1'<br><br>
查总数<br>
count 't1'<br><br>
删除表<br>
disable 't2'<br>
drop 't2'<br><br>
更新一条记录(就是重写一遍进行覆盖)<br><p>put 't1', 'row1', 'c1:a', 'value1'</p>
<p><br></p>
<p>单表导出</p>
<p>/home/hadoop/hbase/bin/hbase org.apache.hadoop.hbase.mapreduce.Driver export resources_picture_common resources_picture_common</p>
<p><br></p>
<p>单表导入（需要提前创建表结构）</p>
<p>/home/hadoop/hbase/bin/hbase org.apache.hadoop.hbase.mapreduce.Driver import resources_picture_common resources_picture_common/<br></p>
<p><br></p>
<p><br></p>
<h2>在HBASE上安装启动thrift并使用python通过thrift连接hbase进行测试<br></h2>
<p>yum install automake libtool flex bison pkgconfig gcc-c++ boost-devel libevent-devel zlib-devel python-devel<br><br>
wget http://ftp.gnu.org/gnu/bison/bison-2.5.tar.gz<br>
cd bison-2.5<br>
./configure<br>
make<br>
make install<br><br>
tar zxvf thrift-0.9.2.tar.gz<br>
cd thrift-0.9.2<br>
./configure --prefix=/usr/local/thrift --with-python --with-lua=no<br>
make<br>
make install<br><br>
添加环境变量<br>
echo "export PATH=/usr/local/thrift/bin:\$PATH" &gt;&gt;/etc/profile.d/app.sh<br>
source /etc/profile<br><br>
查看thrift版本<br>
thrift -version<br><br>
让thrift支持hbase<br>
cd ~<br>
thrift --gen py /usr/local/src/hbase-0.98.8/hbase-thrift/src/main/resources/org/apache/hadoop/hbase/thrift/Hbase.thrift<br>
会在当前目前下创建一个目录gen-py<br><br><br>
启动thrift服务：<br>
./bin/hbase thrift -p 9090 start<br><br><br><br><br>
在客户端进行测试<br>
pip install thrift<br><br>
把gen-py目录复制到python相关目录中<br>
cp -r gen-py/hbase /usr/local/python276/lib/python2.7/site-packages<br><br>
PYTHON连接Hbase的代码<br>
#!/usr/bin/env python<br><br>
import sys<br>
sys.path.append('/usr/local/python276/lib/python2.7/site-packages/hbase')<br><br>
from thrift import Thrift<br>
from thrift.transport import TSocket<br>
from thrift.transport import TTransport<br>
from thrift.protocol import TBinaryProtocol<br>
from hbase import Hbase<br><br>
from hbase.ttypes import *<br><br>
transport = TSocket.TSocket('192.168.3.109', 9090)<br>
transport = TTransport.TBufferedTransport(transport)<br>
protocol = TBinaryProtocol.TBinaryProtocol(transport)<br>
client = Hbase.Client(protocol)<br><br>
transport.open()<br><br>
print(client.getTableNames())<br><br><br></p>
<h2>在HBASE上安装启动thrift并使用PHP通过thrift连接hbase进行测试</h2>
<br><br>
让thrift支持hbase<br>
cd ~<br>
thrift --gen py /usr/local/src/hbase-0.98.8/hbase-thrift/src/main/resources/org/apache/hadoop/hbase/thrift/Hbase.thrift<br>
会在当前目前下创建一个目录gen-py<br><br>
复制thrift源码中的thrift中的/usr/local/src/thrift-0.9.2/lib/php和gen-py到项目的目录下<br><br><br><p>php代码如下</p>
<p></p>
<pre><code class="language-php">&lt;?php

# Change this to match your thrift root.
$GLOBALS['THRIFT_ROOT'] = 'Hbase/thrift/lib/Thrift';

require_once($GLOBALS['THRIFT_ROOT'].'/Thrift.php');

# Something is wrong with this. Is this the PHP way of doing things?
# Old versions of thrift seemingly worked with just a couple includes.
require_once($GLOBALS['THRIFT_ROOT'].'/Type/TMessageType.php');
require_once($GLOBALS['THRIFT_ROOT'].'/Type/TType.php');
require_once($GLOBALS['THRIFT_ROOT'].'/Exception/TException.php');
require_once($GLOBALS['THRIFT_ROOT'].'/Factory/TStringFuncFactory.php');
require_once($GLOBALS['THRIFT_ROOT'].'/StringFunc/TStringFunc.php');
require_once($GLOBALS['THRIFT_ROOT'].'/StringFunc/Core.php');
require_once($GLOBALS['THRIFT_ROOT'].'/Transport/TSocket.php');
require_once($GLOBALS['THRIFT_ROOT'].'/Transport/TBufferedTransport.php');
require_once($GLOBALS['THRIFT_ROOT'].'/Protocol/TBinaryProtocol.php');

require_once($GLOBALS['THRIFT_ROOT'].'/../../../../Hbase/Hbase.php');
require_once($GLOBALS['THRIFT_ROOT'].'/../../../../Hbase/Types.php');

use Thrift\Transport\TSocket;
use Thrift\Transport\TBufferedTransport;
use Thrift\Protocol\TBinaryProtocol;
use Hbase\HbaseClient;
use Hbase\ColumnDescriptor;
use Hbase\Mutation;


$socket = new TSocket('192.168.2.104', 9090);

$socket-&gt;setSendTimeout(10000); // Ten seconds (too long for production, but this is just a demo ;)
$socket-&gt;setRecvTimeout(20000); // Twenty seconds
$transport = new TBufferedTransport($socket);
$protocol = new TBinaryProtocol($transport);
$client = new HbaseClient($protocol);

$transport-&gt;open();


$tableName = 'ktapinginxlog';

//查询表的描述
$descriptors = $client-&gt;getColumnDescriptors($tableName);
asort( $descriptors );
foreach ( $descriptors as $col ) {
  //echo( "  column: {$col-&gt;name}, maxVer: {$col-&gt;maxVersions}\n" );
}

//获取表一行数据
$row_name = '00120';
$fam_col_name = 'a:uri';
$arr = $client-&gt;get($tableName, $row_name, $fam_col_name, array());
//print_r($arr);


//scan table
//http://blog.csdn.net/aylazhang/article/details/8563895
//http://blog.csdn.net/zhumin726/article/details/8552748
//http://hbase.apache.org/apidocs/org/apache/hadoop/hbase/filter
$filter ="(PrefixFilter('1') AND (PrefixFilter('17'))";
$scan = new \Hbase\TScan();
$scan-&gt;filterString=$filter;
$scanner = $client-&gt;scannerOpenWithScan($tableName, $scan, array());

while (TRUE) {
    $get_arr = $client-&gt;scannerGetList($scanner,1);
    
    if(!$get_arr) {
        break;
    }
    print_r($get_arr);
    echo "&lt;br&gt;";
}


//$client-&gt;scannerClose($scan);


// echo "----scanner get ------\r\n";
// $startRow = '1';
// $columns = array ('column' =&gt; 'a', );
// $scan = $client-&gt;scannerOpen($tableName, $startRow, $columns, array());
// $nbRows = 1000;
// $arr = $client-&gt;scannerGetList($scan, $nbRows);
// print_r($arr);



$transport-&gt;close();
</code></pre><br><br><p></p>
            </div>
                </div>