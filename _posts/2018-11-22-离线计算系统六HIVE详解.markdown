---
layout:     post
title:      离线计算系统六HIVE详解
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<p>目录<br>
课程大纲（HIVE增强）	3</p>
<ol>
<li>Hive基本概念	4<br>
1.1	Hive简介	4<br>
1.1.1	什么是Hive	4<br>
1.1.2	为什么使用Hive	4<br>
1.1.3	Hive的特点	4<br>
1.2	Hive架构	5<br>
1.2.1	架构图	5<br>
1.2.2	基本组成	5<br>
1.2.3	各组件的基本功能	5<br>
1.3	Hive与Hadoop的关系	6<br>
1.4	Hive与传统数据库对比	6<br>
1.5	Hive的数据存储	6</li>
<li>Hive基本操作	7<br>
2.1	DDL操作	7<br>
2.1.1	创建表	7<br>
2.1.2	修改表	9<br>
2.1.3	显示命令	11<br>
2.2	DML操作	11<br>
2.2.1	Load	11<br>
2.2.2	Insert	13<br>
2.2.3	SELECT	15<br>
2.3 Hive Join	18<br>
2.5 Hive Shell使用进阶	21<br>
2.5.1 Hive命令行	21<br>
2.5.2. Hive参数配置方式	23</li>
<li>Hive函数	24<br>
4.1 内置运算符	24<br>
4.2 内置函数	24<br>
4.3 Hive自定义函数和Transform	24<br>
4.3.1 自定义函数类别	24<br>
4.3.2 UDF开发实例	24<br>
4.3.3 Transform实现	25</li>
<li>Hive执行过程实例分析	26<br>
5.1 JOIN	26<br>
5.2 GROUP BY	26<br>
5.3 DISTINCT	27</li>
<li>Hive使用注意点（各种小细节）	27<br>
6.1 字符集	27<br>
6.2 压缩	28<br>
6.3 count(distinct)	28<br>
6.4 子查询	28<br>
6.5 Join中处理null值的语义区别	28<br>
6.6 分号字符	29<br>
6.7 Insert	29<br>
6.7.1新增数据	29<br>
6.7.2 插入次序	30<br>
6.7.3 初始值	30</li>
<li>Hive优化技巧	31<br>
7.1 HADOOP计算框架特性	31<br>
7.2 优化的常用手段概述	31<br>
7.3 全排序	32<br>
7.3.1 例1	32<br>
7.3.2 例2	34<br>
7.4 怎样写exist/in子句	36<br>
7.5 怎样决定reducer个数	36<br>
7.6 合并MapReduce操作	36<br>
7.7 Bucket 与 Sampling	37<br>
7.8  Partition优化	38<br>
7.9 JOIN优化	39<br>
7.9.1 JOIN原则	39<br>
7.9.2  Map Join	39<br>
7.10 数据倾斜	40<br>
7.10.1 空值数据倾斜	40<br>
7.10.2 不同数据类型关联产生数据倾斜	41<br>
7.10.3 大表Join的数据偏斜	41<br>
7.11 合并小文件	42<br>
7.12 Group By 优化	43<br>
7.12.1 Map端部分聚合：	43<br>
7.12.2 有数据倾斜的时候进行负载均衡	43</li>
<li>Hive实战	44<br>
Hive 实战案例1——数据ETL	44<br>
需求：	44<br>
数据示例：	44<br>
实现步骤：	45<br>
Hive 实战案例2——访问时长统计	47<br>
需求：	47<br>
实现步骤：	47<br>
Hive实战案例3——级联求和	48<br>
需求：	48<br>
实现步骤	48</li>
</ol>
<p>课程大纲（HIVE增强）</p>
<p>Hive增强 HIVE基本概念<br>
HIVE架构及运行机制<br>
HQL-DDL基本语法<br>
HQL-DML基本语法<br>
HIVE的join<br>
HIVE UDF函数<br>
HIVE shell基本操作<br>
HIVE 参数配置<br>
HIVE 自定义函数和Transform<br>
HIVE 执行HQL的实例分析<br>
HIVE最佳实践注意点<br>
HIVE优化策略<br>
HIVE实战案例1<br>
HIVE实战案例2<br>
HIVE实战案例3</p>
<p>学习目标：<br>
1、熟练掌握hive的使用<br>
2、熟练掌握hql的编写<br>
3、理解hive的工作原理<br>
4、具备hive应用实战能力</p>
<p>Hive基本概念<br>
Hive简介<br>
什么是Hive<br>
Hive是基于Hadoop的一个数据仓库工具，可以将结构化的数据文件映射为一张数据库表，并提供类SQL查询功能。<br>
为什么使用Hive<br>
直接使用hadoop所面临的问题<br>
人员学习成本太高<br>
项目周期要求太短<br>
MapReduce实现复杂查询逻辑开发难度太大</p>
<p>为什么要使用Hive<br>
操作接口采用类SQL语法，提供快速开发的能力。<br>
避免了去写MapReduce，减少开发人员的学习成本。<br>
扩展功能很方便。<br>
Hive的特点<br>
可扩展<br>
Hive可以自由的扩展集群的规模，一般情况下不需要重启服务。</p>
<p>延展性<br>
Hive支持用户自定义函数，用户可以根据自己的需求来实现自己的函数。</p>
<p>容错<br>
良好的容错性，节点出现问题SQL仍可完成执行。<br>
Hive架构<br>
架构图</p>
<p>Jobtracker是hadoop1.x中的组件，它的功能相当于： Resourcemanager+AppMaster</p>
<p>TaskTracker 相当于：  Nodemanager  +  yarnchild</p>
<p>基本组成<br>
用户接口：包括 CLI、JDBC/ODBC、WebGUI。<br>
元数据存储：通常是存储在关系数据库如 mysql , derby中。<br>
解释器、编译器、优化器、执行器。<br>
各组件的基本功能<br>
用户接口主要由三个：CLI、JDBC/ODBC和WebGUI。其中，CLI为shell命令行；JDBC/ODBC是Hive的JAVA实现，与传统数据库JDBC类似；WebGUI是通过浏览器访问Hive。<br>
元数据存储：Hive 将元数据存储在数据库中。Hive 中的元数据包括表的名字，表的列和分区及其属性，表的属性（是否为外部表等），表的数据所在目录等。<br>
解释器、编译器、优化器完成 HQL 查询语句从词法分析、语法分析、编译、优化以及查询计划的生成。生成的查询计划存储在 HDFS 中，并在随后有 MapReduce 调用执行。<br>
Hive与Hadoop的关系<br>
Hive利用HDFS存储数据，利用MapReduce查询数据</p>
<p>Hive与传统数据库对比</p>
<p>总结：hive具有sql数据库的外表，但应用场景完全不同，hive只适合用来做批量数据统计分析<br>
Hive的数据存储<br>
1、Hive中所有的数据都存储在 HDFS 中，没有专门的数据存储格式（可支持Text，SequenceFile，ParquetFile，RCFILE等）<br>
2、只需要在创建表的时候告诉 Hive 数据中的列分隔符和行分隔符，Hive 就可以解析数据。<br>
3、Hive 中包含以下数据模型：DB、Table，External Table，Partition，Bucket。<br>
db：在hdfs中表现为${hive.metastore.warehouse.dir}目录下一个文件夹<br>
table：在hdfs中表现所属db目录下一个文件夹<br>
external table：与table类似，不过其数据存放位置可以在任意指定路径<br>
partition：在hdfs中表现为table目录下的子目录<br>
bucket：在hdfs中表现为同一个表目录下根据hash散列之后的多个文件</p>
<p>1.6 HIVE的安装部署<br>
1.6.1 安装<br>
单机版：<br>
元数据库mysql版：</p>
<p>1.6.2 使用方式<br>
Hive交互shell<br>
bin/hive</p>
<p>Hive thrift服务</p>
<p>启动方式，（假如是在hadoop01上）：<br>
启动为前台：bin/hiveserver2<br>
启动为后台：nohup bin/hiveserver2 1&gt;/var/log/hiveserver.log 2&gt;/var/log/hiveserver.err &amp;</p>
<p>启动成功后，可以在别的节点上用beeline去连接<br>
方式（1）<br>
hive/bin/beeline  回车，进入beeline的命令界面<br>
输入命令连接hiveserver2<br>
beeline&gt; !connect jdbc:hive2//mini1:10000<br>
（hadoop01是hiveserver2所启动的那台主机名，端口默认是10000）<br>
方式（2）<br>
或者启动就连接：<br>
bin/beeline -u jdbc:hive2://mini1:10000 -n hadoop</p>
<p>接下来就可以做正常sql查询了</p>
<p>Hive命令<br>
[hadoop@hdp-node-02 ~]$ hive  -e  ‘sql’</p>
<p>Hive基本操作<br>
DDL操作<br>
创建表<br>
建表语法<br>
CREATE [EXTERNAL] TABLE [IF NOT EXISTS] table_name<br>
[(col_name data_type [COMMENT col_comment], …)]<br>
[COMMENT table_comment]<br>
[PARTITIONED BY (col_name data_type [COMMENT col_comment], …)]<br>
[CLUSTERED BY (col_name, col_name, …)<br>
[SORTED BY (col_name [ASC|DESC], …)] INTO num_buckets BUCKETS]<br>
[ROW FORMAT row_format]<br>
[STORED AS file_format]<br>
[LOCATION hdfs_path]</p>
<p>说明：<br>
CREATE TABLE 创建一个指定名字的表。如果相同名字的表已经存在，则抛出异常；用户可以用 IF NOT EXISTS 选项来忽略这个异常。<br>
EXTERNAL关键字可以让用户创建一个外部表，在建表的同时指定一个指向实际数据的路径（LOCATION），Hive 创建内部表时，会将数据移动到数据仓库指向的路径；若创建外部表，仅记录数据所在的路径，不对数据的位置做任何改变。在删除表的时候，内部表的元数据和数据会被一起删除，而外部表只删除元数据，不删除数据。<br>
LIKE 允许用户复制现有的表结构，但是不复制数据。<br>
ROW FORMAT<br>
DELIMITED [FIELDS TERMINATED BY char] [COLLECTION ITEMS TERMINATED BY char]<br>
[MAP KEYS TERMINATED BY char] [LINES TERMINATED BY char]<br>
| SERDE serde_name [WITH SERDEPROPERTIES (property_name=property_value, property_name=property_value, …)]<br>
用户在建表的时候可以自定义 SerDe 或者使用自带的 SerDe。如果没有指定 ROW FORMAT 或者 ROW FORMAT DELIMITED，将会使用自带的 SerDe。在建表的时候，用户还需要为表指定列，用户在指定表的列的同时也会指定自定义的 SerDe，Hive通过 SerDe 确定表的具体的列的数据。<br>
STORED AS<br>
SEQUENCEFILE|TEXTFILE|RCFILE<br>
如果文件数据是纯文本，可以使用 STORED AS TEXTFILE。如果数据需要压缩，使用 STORED AS SEQUENCEFILE。</p>
<p>6、CLUSTERED BY<br>
对于每一个表（table）或者分区， Hive可以进一步组织成桶，也就是说桶是更为细粒度的数据范围划分。Hive也是 针对某一列进行桶的组织。Hive采用对列值哈希，然后除以桶的个数求余的方式决定该条记录存放在哪个桶当中。<br>
把表（或者分区）组织成桶（Bucket）有两个理由：<br>
（1）获得更高的查询处理效率。桶为表加上了额外的结构，Hive 在处理有些查询时能利用这个结构。具体而言，连接两个在（包含连接列的）相同列上划分了桶的表，可以使用 Map 端连接 （Map-side join）高效的实现。比如JOIN操作。对于JOIN操作两个表有一个相同的列，如果对这两个表都进行了桶操作。那么将保存相同列值的桶进行JOIN操作就可以，可以大大较少JOIN的数据量。<br>
（2）使取样（sampling）更高效。在处理大规模数据集时，在开发和修改查询的阶段，如果能在数据集的一小部分数据上试运行查询，会带来很多方便。</p>
<p>具体实例<br>
创建内部表mytable。</p>
<p>创建外部表pageview。</p>
<p>创建分区表invites。<br>
create table student_p(Sno int,Sname string,Sex string,Sage int,Sdept string) partitioned by(part string) row format delimited fields terminated by ','stored as textfile;</p>
<p>创建带桶的表student。</p>
<p>修改表<br>
增加/删除分区<br>
语法结构<br>
ALTER TABLE table_name ADD [IF NOT EXISTS] partition_spec [ LOCATION ‘location1’ ] partition_spec [ LOCATION ‘location2’ ] …<br>
partition_spec:<br>
: PARTITION (partition_col = partition_col_value, partition_col = partiton_col_value, …)</p>
<p>ALTER TABLE table_name DROP partition_spec, partition_spec,…<br>
具体实例<br>
alter table student_p add partition(part=‘a’) partition(part=‘b’);</p>
<p>重命名表<br>
语法结构<br>
ALTER TABLE table_name RENAME TO new_table_name<br>
具体实例</p>
<p>增加/更新列<br>
语法结构<br>
ALTER TABLE table_name ADD|REPLACE COLUMNS (col_name data_type [COMMENT col_comment], …)</p>
<p>注：ADD是代表新增一字段，字段位置在所有列后面(partition列前)，REPLACE则是表示替换表中所有字段。</p>
<p>ALTER TABLE table_name CHANGE [COLUMN] col_old_name col_new_name column_type [COMMENT col_comment] [FIRST|AFTER column_name]<br>
具体实例</p>
<p>显示命令<br>
show tables<br>
show databases<br>
show partitions<br>
show functions<br>
desc extended t_name;<br>
desc formatted table_name;<br>
DML操作<br>
Load<br>
语法结构<br>
LOAD DATA [LOCAL] INPATH ‘filepath’ [OVERWRITE] INTO<br>
TABLE tablename [PARTITION (partcol1=val1, partcol2=val2 …)]</p>
<p>说明：<br>
Load 操作只是单纯的复制/移动操作，将数据文件移动到 Hive 表对应的位置。<br>
filepath：<br>
相对路径，例如：project/data1<br>
绝对路径，例如：/user/hive/project/data1<br>
包含模式的完整 URI，列如：<br>
hdfs://namenode:9000/user/hive/project/data1<br>
LOCAL关键字<br>
如果指定了 LOCAL， load 命令会去查找本地文件系统中的 filepath。<br>
如果没有指定 LOCAL 关键字，则根据inpath中的uri查找文件</p>
<p>OVERWRITE 关键字<br>
如果使用了 OVERWRITE 关键字，则目标表（或者分区）中的内容会被删除，然后再将 filepath 指向的文件/目录中的内容添加到表/分区中。<br>
如果目标表（分区）已经有一个文件，并且文件名和 filepath 中的文件名冲突，那么现有的文件会被新文件所替代。</p>
<p>具体实例<br>
加载相对路径数据。</p>
<p>加载绝对路径数据。</p>
<p>加载包含模式数据。</p>
<p>OVERWRITE关键字使用。</p>
<p>Insert<br>
将查询结果插入Hive表<br>
语法结构<br>
INSERT OVERWRITE TABLE tablename1 [PARTITION (partcol1=val1, partcol2=val2 …)] select_statement1 FROM from_statement</p>
<p>Multiple inserts:<br>
FROM from_statement<br>
INSERT OVERWRITE TABLE tablename1 [PARTITION (partcol1=val1, partcol2=val2 …)] select_statement1<br>
[INSERT OVERWRITE TABLE tablename2 [PARTITION …] select_statement2] …</p>
<p>Dynamic partition inserts:<br>
INSERT OVERWRITE TABLE tablename PARTITION (partcol1[=val1], partcol2[=val2] …) select_statement FROM from_statement</p>
<p>具体实例<br>
1、基本模式插入。</p>
<p>2、多插入模式。</p>
<p>3、自动分区模式。</p>
<p>导出表数据<br>
语法结构<br>
INSERT OVERWRITE [LOCAL] DIRECTORY directory1 SELECT … FROM …</p>
<p>multiple inserts:<br>
FROM from_statement<br>
INSERT OVERWRITE [LOCAL] DIRECTORY directory1 select_statement1<br>
[INSERT OVERWRITE [LOCAL] DIRECTORY directory2 select_statement2] …</p>
<p>具体实例<br>
1、导出文件到本地。</p>
<p>说明：<br>
数据写入到文件系统时进行文本序列化，且每列用^A来区分，\n为换行符。用more命令查看时不容易看出分割符，可以使用: sed -e ‘s/\x01/|/g’ filename来查看。</p>
<p>2、导出数据到HDFS。</p>
<p>SELECT<br>
基本的Select操作<br>
语法结构<br>
SELECT [ALL | DISTINCT] select_expr, select_expr, …<br>
FROM table_reference<br>
[WHERE where_condition]<br>
[GROUP BY col_list [HAVING condition]]<br>
[CLUSTER BY col_list<br>
| [DISTRIBUTE BY col_list] [SORT BY| ORDER BY col_list]<br>
]<br>
[LIMIT number]</p>
<p>注：1、order by 会对输入做全局排序，因此只有一个reducer，会导致当输入规模较大时，需要较长的计算时间。<br>
2、sort by不是全局排序，其在数据进入reducer前完成排序。因此，如果用sort by进行排序，并且设置mapred.reduce.tasks&gt;1，则sort by只保证每个reducer的输出有序，不保证全局有序。<br>
3、distribute by根据distribute by指定的内容将数据分到同一个reducer。<br>
4、Cluster by 除了具有Distribute by的功能外，还会对该字段进行排序。因此，常常认为cluster by = distribute by + sort by</p>
<p>具体实例<br>
1、获取年龄大的3个学生。</p>
<p>2、查询学生信息按年龄，降序排序。</p>
<p>3、按学生名称汇总学生年龄。</p>
<p>2.3 Hive Join<br>
语法结构<br>
join_table:<br>
table_reference JOIN table_factor [join_condition]<br>
| table_reference {LEFT|RIGHT|FULL} [OUTER] JOIN table_reference join_condition<br>
| table_reference LEFT SEMI JOIN table_reference join_condition<br>
Hive 支持等值连接（equality joins）、外连接（outer joins）和（left/right joins）。Hive 不支持非等值的连接，因为非等值连接非常难转化到 map/reduce 任务。<br>
另外，Hive 支持多于 2 个表的连接。<br>
写 join 查询时，需要注意几个关键点：</p>
<ol>
<li>
<p>只支持等值join<br>
例如：<br>
SELECT a.* FROM a JOIN b ON (<a href="http://a.id" rel="nofollow">a.id</a> = <a href="http://b.id" rel="nofollow">b.id</a>)<br>
SELECT a.* FROM a JOIN b<br>
ON (<a href="http://a.id" rel="nofollow">a.id</a> = <a href="http://b.id" rel="nofollow">b.id</a> AND a.department = b.department)<br>
是正确的，然而:<br>
SELECT a.* FROM a JOIN b ON (<a href="http://a.id" rel="nofollow">a.id</a>&gt;<a href="http://b.id" rel="nofollow">b.id</a>)<br>
是错误的。</p>
</li>
<li>
<p>可以 join 多于 2 个表。<br>
例如<br>
SELECT a.val, b.val, c.val FROM a JOIN b<br>
ON (a.key = b.key1) JOIN c ON (c.key = b.key2)<br>
如果join中多个表的 join key 是同一个，则 join 会被转化为单个 map/reduce 任务，例如：<br>
SELECT a.val, b.val, c.val FROM a JOIN b<br>
ON (a.key = b.key1) JOIN c<br>
ON (c.key = b.key1)<br>
被转化为单个 map/reduce 任务，因为 join 中只使用了 b.key1 作为 join key。<br>
SELECT a.val, b.val, c.val FROM a JOIN b ON (a.key = b.key1)<br>
JOIN c ON (c.key = b.key2)<br>
而这一 join 被转化为 2 个 map/reduce 任务。因为 b.key1 用于第一次 join 条件，而 b.key2 用于第二次 join。</p>
</li>
</ol>
<p>3．join 时，每次 map/reduce 任务的逻辑：<br>
reducer 会缓存 join 序列中除了最后一个表的所有表的记录，再通过最后一个表将结果序列化到文件系统。这一实现有助于在 reduce 端减少内存的使用量。实践中，应该把最大的那个表写在最后（否则会因为缓存浪费大量内存）。例如：<br>
SELECT a.val, b.val, c.val FROM a<br>
JOIN b ON (a.key = b.key1) JOIN c ON (c.key = b.key1)<br>
所有表都使用同一个 join key（使用 1 次 map/reduce 任务计算）。Reduce 端会缓存 a 表和 b 表的记录，然后每次取得一个 c 表的记录就计算一次 join 结果，类似的还有：<br>
SELECT a.val, b.val, c.val FROM a<br>
JOIN b ON (a.key = b.key1) JOIN c ON (c.key = b.key2)<br>
这里用了 2 次 map/reduce 任务。第一次缓存 a 表，用 b 表序列化；第二次缓存第一次 map/reduce 任务的结果，然后用 c 表序列化。</p>
<p>4．LEFT，RIGHT 和 FULL OUTER 关键字用于处理 join 中空记录的情况<br>
例如：<br>
SELECT a.val, b.val FROM<br>
a LEFT OUTER  JOIN b ON (a.key=b.key)<br>
对应所有 a 表中的记录都有一条记录输出。输出的结果应该是 a.val, b.val，当 a.key=b.key 时，而当 b.key 中找不到等值的 a.key 记录时也会输出:<br>
a.val, NULL<br>
所以 a 表中的所有记录都被保留了；<br>
“a RIGHT OUTER JOIN b”会保留所有 b 表的记录。</p>
<p>Join 发生在 WHERE 子句之前。如果你想限制 join 的输出，应该在 WHERE 子句中写过滤条件——或是在 join 子句中写。这里面一个容易混淆的问题是表分区的情况：<br>
SELECT a.val, b.val FROM a<br>
LEFT OUTER JOIN b ON (a.key=b.key)<br>
WHERE a.ds=‘2009-07-07’ AND b.ds=‘2009-07-07’<br>
会 join a 表到 b 表（OUTER JOIN），列出 a.val 和 b.val 的记录。WHERE 从句中可以使用其他列作为过滤条件。但是，如前所述，如果 b 表中找不到对应 a 表的记录，b 表的所有列都会列出 NULL，包括 ds 列。也就是说，join 会过滤 b 表中不能找到匹配 a 表 join key 的所有记录。这样的话，LEFT OUTER 就使得查询结果与 WHERE 子句无关了。解决的办法是在 OUTER JOIN 时使用以下语法：<br>
SELECT a.val, b.val FROM a LEFT OUTER JOIN b<br>
ON (a.key=b.key AND<br>
b.ds=‘2009-07-07’ AND<br>
a.ds=‘2009-07-07’)<br>
这一查询的结果是预先在 join 阶段过滤过的，所以不会存在上述问题。这一逻辑也可以应用于 RIGHT 和 FULL 类型的 join 中。</p>
<p>Join 是不能交换位置的。无论是 LEFT 还是 RIGHT join，都是左连接的。<br>
SELECT a.val1, a.val2, b.val, c.val<br>
FROM a<br>
JOIN b ON (a.key = b.key)<br>
LEFT OUTER JOIN c ON (a.key = c.key)<br>
先 join a 表到 b 表，丢弃掉所有 join key 中不匹配的记录，然后用这一中间结果和 c 表做 join。这一表述有一个不太明显的问题，就是当一个 key 在 a 表和 c 表都存在，但是 b 表中不存在的时候：整个记录在第一次 join，即 a JOIN b 的时候都被丢掉了（包括a.val1，a.val2和a.key），然后我们再和 c 表 join 的时候，如果 c.key 与 a.key 或 b.key 相等，就会得到这样的结果：NULL, NULL, NULL, c.val</p>
<p>具体实例<br>
获取已经分配班级的学生姓名。</p>
<p>获取尚未分配班级的学生姓名。</p>
<p>LEFT  SEMI  JOIN是IN/EXISTS的高效实现。</p>
<p>3 Hive Shell参数<br>
3.1 Hive命令行<br>
语法结构<br>
hive [-hiveconf x=y]* [&lt;-i filename&gt;]* [&lt;-f filename&gt;|&lt;-e query-string&gt;] [-S]<br>
说明：<br>
-i 从文件初始化HQL。<br>
-e从命令行执行指定的HQL<br>
-f 执行HQL脚本<br>
-v 输出执行的HQL语句到控制台<br>
-p  connect to Hive Server on port number<br>
-hiveconf x=y Use this to set hive/hadoop configuration variables.<br>
具体实例<br>
1、运行一个查询。</p>
<p>2、运行一个文件。</p>
<p>3、运行参数文件。</p>
<p>3.2 Hive参数配置方式<br>
Hive参数大全：<br>
<a href="https://cwiki.apache.org/confluence/display/Hive/Configuration+Properties" rel="nofollow">https://cwiki.apache.org/confluence/display/Hive/Configuration+Properties</a></p>
<p>开发Hive应用时，不可避免地需要设定Hive的参数。设定Hive的参数可以调优HQL代码的执行效率，或帮助定位问题。然而实践中经常遇到的一个问题是，为什么设定的参数没有起作用？这通常是错误的设定方式导致的。</p>
<p>对于一般参数，有以下三种设定方式：<br>
配置文件<br>
命令行参数<br>
参数声明</p>
<p>配置文件：Hive的配置文件包括<br>
用户自定义配置文件：<span class="katex--inline"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi><mi>I</mi><mi>V</mi><msub><mi>E</mi><mi>C</mi></msub><mi>O</mi><mi>N</mi><msub><mi>F</mi><mi>D</mi></msub><mi>I</mi><mi>R</mi><mi mathvariant="normal">/</mi><mi>h</mi><mi>i</mi><mi>v</mi><mi>e</mi><mo>−</mo><mi>s</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi mathvariant="normal">.</mi><mi>x</mi><mi>m</mi><mi>l</mi><mi mathvariant="normal">默</mi><mi mathvariant="normal">认</mi><mi mathvariant="normal">配</mi><mi mathvariant="normal">置</mi><mi mathvariant="normal">文</mi><mi mathvariant="normal">件</mi><mi mathvariant="normal">：</mi></mrow><annotation encoding="application/x-tex">HIVE_CONF_DIR/hive-site.xml 
默认配置文件：</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 1em; vertical-align: -0.25em;"></span><span class="mord mathit" style="margin-right: 0.08125em;">H</span><span class="mord mathit" style="margin-right: 0.07847em;">I</span><span class="mord mathit" style="margin-right: 0.22222em;">V</span><span class="mord"><span class="mord mathit" style="margin-right: 0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.328331em;"><span class="" style="top: -2.55em; margin-left: -0.05764em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathit mtight" style="margin-right: 0.07153em;">C</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"><span class=""></span></span></span></span></span></span><span class="mord mathit" style="margin-right: 0.02778em;">O</span><span class="mord mathit" style="margin-right: 0.10903em;">N</span><span class="mord"><span class="mord mathit" style="margin-right: 0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.328331em;"><span class="" style="top: -2.55em; margin-left: -0.13889em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathit mtight" style="margin-right: 0.02778em;">D</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"><span class=""></span></span></span></span></span></span><span class="mord mathit" style="margin-right: 0.07847em;">I</span><span class="mord mathit" style="margin-right: 0.00773em;">R</span><span class="mord">/</span><span class="mord mathit">h</span><span class="mord mathit">i</span><span class="mord mathit" style="margin-right: 0.03588em;">v</span><span class="mord mathit">e</span><span class="mspace" style="margin-right: 0.222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right: 0.222222em;"></span></span><span class="base"><span class="strut" style="height: 0.69444em; vertical-align: 0em;"></span><span class="mord mathit">s</span><span class="mord mathit">i</span><span class="mord mathit">t</span><span class="mord mathit">e</span><span class="mord">.</span><span class="mord mathit">x</span><span class="mord mathit">m</span><span class="mord mathit" style="margin-right: 0.01968em;">l</span><span class="mord cjk_fallback">默</span><span class="mord cjk_fallback">认</span><span class="mord cjk_fallback">配</span><span class="mord cjk_fallback">置</span><span class="mord cjk_fallback">文</span><span class="mord cjk_fallback">件</span><span class="mord cjk_fallback">：</span></span></span></span></span>HIVE_CONF_DIR/hive-default.xml<br>
用户自定义配置会覆盖默认配置。<br>
另外，Hive也会读入Hadoop的配置，因为Hive是作为Hadoop的客户端启动的，Hive的配置会覆盖Hadoop的配置。<br>
配置文件的设定对本机启动的所有Hive进程都有效。</p>
<p>命令行参数：启动Hive（客户端或Server方式）时，可以在命令行添加-hiveconf param=value来设定参数，例如：<br>
bin/hive -hiveconf hive.root.logger=INFO,console<br>
这一设定对本次启动的Session（对于Server方式启动，则是所有请求的Sessions）有效。</p>
<p>参数声明：可以在HQL中使用SET关键字设定参数，例如：<br>
set mapred.reduce.tasks=100;<br>
这一设定的作用域也是session级的。</p>
<p>上述三种设定方式的优先级依次递增。即参数声明覆盖命令行参数，命令行参数覆盖配置文件设定。注意某些系统级的参数，例如log4j相关的设定，必须用前两种方式设定，因为那些参数的读取在Session建立以前已经完成了。</p>
<ol start="4">
<li>Hive函数<br>
4.1 内置运算符<br>
内容较多，见《Hive官方文档》</li>
</ol>
<p>4.2 内置函数<br>
内容较多，见《Hive官方文档》</p>
<p>4.3 Hive自定义函数和Transform<br>
当Hive提供的内置函数无法满足你的业务处理需要时，此时就可以考虑使用用户自定义函数（UDF：user-defined function）。<br>
4.3.1 自定义函数类别<br>
UDF  作用于单个数据行，产生一个数据行作为输出。（数学函数，字符串函数）<br>
UDAF（用户定义聚集函数）：接收多个输入数据行，并产生一个输出数据行。（count，max）</p>
<p>4.3.2 UDF开发实例<br>
1、先开发一个java类，继承UDF，并重载evaluate方法<br>
package cn.itcast.bigdata.udfimport org.apache.hadoop.hive.ql.exec.UDF;import org.apache.hadoop.io.Text;public final class Lower extends UDF{	public Text evaluate(final Text s){		if(s==null){return null;}		return new Text(s.toString().toLowerCase());	}}</p>
<p>2、打成jar包上传到服务器<br>
3、将jar包添加到hive的classpath<br>
hive&gt;add JAR /home/hadoop/udf.jar;<br>
创建临时函数与开发好的java class关联<br>
Hive&gt;create temporary function toprovince as ‘cn.itcast.bigdata.udf.ToProvince’;</p>
<p>即可在hql中使用自定义的函数strip<br>
Select strip(name),age from t_test;<br>
4.3.3 Transform实现<br>
Hive的 TRANSFORM 关键字提供了在SQL中调用自写脚本的功能<br>
适合实现Hive中没有的功能又不想写UDF的情况</p>
<p>使用示例1：下面这句sql就是借用了weekday_mapper.py对数据进行了处理.<br>
CREATE TABLE u_data_new (  movieid INT,  rating INT,  weekday INT,  userid INT)ROW FORMAT DELIMITEDFIELDS TERMINATED BY ‘\t’;add FILE weekday_mapper.py;INSERT OVERWRITE TABLE u_data_newSELECT  TRANSFORM (movieid, rating, unixtime,userid)  USING ‘python weekday_mapper.py’  AS (movieid, rating, weekday,userid)FROM u_data;</p>
<p>其中weekday_mapper.py内容如下<br>
#!/bin/pythonimport sysimport datetimefor line in sys.stdin:  line = line.strip()  movieid, rating, unixtime,userid = line.split(’\t’)  weekday = datetime.datetime.fromtimestamp(float(unixtime)).isoweekday()  print ‘\t’.join([movieid, rating, str(weekday),userid])</p>
<p>使用示例2：下面的例子则是使用了shell的cat命令来处理数据<br>
FROM invites a INSERT OVERWRITE TABLE events SELECT TRANSFORM(a.foo, a.bar) AS (oof, rab) USING ‘/bin/cat’ WHERE a.ds &gt; ‘2008-08-09’;<br>
5. Hive实战<br>
Hive 实战案例1——数据ETL<br>
需求：<br>
对web点击流日志基础数据表进行etl（按照仓库模型设计）<br>
按各时间维度统计来源域名top10<br>
已有数据表 “t_orgin_weblog” ：<br>
±-----------------±-----------±---------±-+|     col_name     | data_type  | comment  |±-----------------±-----------±---------±-+| valid            | string     |          || remote_addr      | string     |          || remote_user      | string     |          || time_local       | string     |          || request          | string     |          || status           | string     |          || body_bytes_sent  | string     |          || http_referer     | string     |          || http_user_agent  | string     |          |±-----------------±-----------±---------±-+</p>
<p>数据示例：<br>
| true|1.162.203.134| - | 18/Sep/2013:13:47:35| /images/my.jpg                        | 200| 19939 | “<a href="http://www.angularjs.cn/A0d9" rel="nofollow">http://www.angularjs.cn/A0d9</a>”                      | "Mozilla/5.0 (Windows   || true|1.202.186.37 | - | 18/Sep/2013:15:39:11| /wp-content/uploads/2013/08/windjs.png| 200| 34613 | “<a href="http://cnodejs.org/topic/521a30d4bee8d3cb1272ac0f" rel="nofollow">http://cnodejs.org/topic/521a30d4bee8d3cb1272ac0f</a>” | "Mozilla/5.0 (Macintosh;|</p>
<p>实现步骤：<br>
1、对原始数据进行抽取转换<br>
–将来访url分离出host  path  query  query id<br>
drop table if exists t_etl_referurl;create table t_etl_referurl asSELECT a.*,b.*FROM t_orgin_weblog a LATERAL VIEW parse_url_tuple(regexp_replace(http_referer, “”", “”), ‘HOST’, ‘PATH’,‘QUERY’, ‘QUERY:id’) b as host, path, query, query_id</p>
<p>3、从前述步骤进一步分离出日期时间形成ETL明细表“t_etl_detail”    day tm<br>
drop table if exists t_etl_detail;create table t_etl_detail as select b.*,substring(time_local,0,11) as daystr,substring(time_local,13) as tmstr,substring(time_local,4,3) as month,substring(time_local,0,2) as day,substring(time_local,13,2) as hourfrom t_etl_referurl b;</p>
<p>3、对etl数据进行分区(包含所有数据的结构化信息)<br>
drop table t_etl_detail_prt;create table t_etl_detail_prt(valid                   string,remote_addr            string,remote_user            string,time_local               string,request                 string,status                  string,body_bytes_sent         string,http_referer             string,http_user_agent         string,host                   string,path                   string,query                  string,query_id               string,daystr                 string,tmstr                  string,month                  string,day                    string,hour                   string) partitioned by (mm string,dd string);</p>
<p>导入数据<br>
insert into table t_etl_detail_prt partition(mm=‘Sep’,dd=‘18’)select * from t_etl_detail where daystr=‘18/Sep/2013’;insert into table t_etl_detail_prt partition(mm=‘Sep’,dd=‘19’)select * from t_etl_detail where daystr=‘19/Sep/2013’;</p>
<p>分个时间维度统计各referer_host的访问次数并排序<br>
create table t_refer_host_visit_top_tmp asselect referer_host,count(*) as counts,mm,dd,hh from t_display_referer_counts group by hh,dd,mm,referer_host order by hh asc,dd asc,mm asc,counts desc;</p>
<p>4、来源访问次数topn各时间维度URL<br>
取各时间维度的referer_host访问次数topn<br>
select * from (select referer_host,counts,concat(hh,dd),row_number() over (partition by concat(hh,dd) order by concat(hh,dd) asc) as od from t_refer_host_visit_top_tmp) t where od&lt;=3;</p>
<p>Hive 实战案例2——访问时长统计<br>
需求：<br>
从web日志中统计每日访客平均停留时间<br>
实现步骤：<br>
由于要从大量请求中分辨出用户的各次访问，逻辑相对复杂，通过hive直接实现有困难，因此编写一个mr程序来求出访客访问信息（详见代码）<br>
启动mr程序获取结果：<br>
[hadoop@hdp-node-01 ~]$ hadoop jar weblog.jar cn.itcast.bigdata.hive.mr.UserStayTime /weblog/input /weblog/stayout</p>
<p>将mr的处理结果导入hive表<br>
drop table t_display_access_info_tmp;create table t_display_access_info_tmp(remote_addr string,firt_req_time string,last_req_time string,stay_long bigint)row format delimited fields terminated by ‘\t’;load data inpath ‘/weblog/stayout4’ into table t_display_access_info_tmp;</p>
<p>3、得出访客访问信息表 “t_display_access_info”<br>
由于有一些访问记录是单条记录，mr程序处理处的结果给的时长是0，所以考虑给单次请求的停留时间一个默认市场30秒<br>
drop table t_display_access_info;create table t_display_access_info asselect remote_addr,firt_req_time,last_req_time,case stay_longwhen 0 then 30000else stay_longend as stay_longfrom t_display_access_info_tmp;</p>
<p>4、统计所有用户停留时间平均值<br>
select avg(stay_long) from t_display_access_info;</p>
<p>Hive实战案例3——级联求和<br>
需求：<br>
有如下访客访问次数统计表 t_access_times<br>
访客 月份 访问次数<br>
A 2015-01-02 5<br>
A 2015-01-03 15<br>
B 2015-01-01 5<br>
A 2015-01-04 8<br>
B 2015-01-05 25<br>
A 2015-01-06 5<br>
A 2015-02-02 4<br>
A 2015-02-06 6<br>
B 2015-02-06 10<br>
B 2015-02-07 5<br>
…… …… ……</p>
<p>需要输出报表：t_access_times_accumulate<br>
访客 月份 月访问总计 累计访问总计<br>
A 2015-01 33 33<br>
A 2015-02 10 43<br>
……. ……. ……. …….<br>
B 2015-01 30 30<br>
B 2015-02 15 45<br>
……. ……. ……. …….</p>
<p>实现步骤<br>
可以用一个hql语句即可实现：<br>
select A.username,A.month,max(A.salary) as salary,sum(B.salary) as accumulatefrom (select username,month,sum(salary) as salary from t_access_times group by username,month) A inner join (select username,month,sum(salary) as salary from t_access_times group by username,month) BonA.username=B.usernamewhere B.month &lt;= A.monthgroup by A.username,A.monthorder by A.username,A.month;</p>

            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>