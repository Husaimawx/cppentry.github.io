---
layout:     post
title:      使用flume收集日志
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。转载请注明出处					https://blog.csdn.net/dianan1/article/details/80117692				</div>
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<h2 id="flume介绍">flume介绍</h2>

<p>Flume是Cloudera提供的一个高可用的，高可靠的，分布式的海量日志采集、聚合和传输的系统，Flume支持在日志系统中定制各类数据发送方，用于收集数据；同时，Flume提供对数据进行简单处理，并写到各种数据接受方（可定制）的能力。 <br>
官网文档：<a href="http://flume.apache.org/FlumeUserGuide.html" rel="nofollow">http://flume.apache.org/FlumeUserGuide.html</a></p>



<h2 id="flume安装">flume安装</h2>

<p>flume依赖于java1.8+，安装flume首先要安装java环境</p>



<pre class="prettyprint"><code class=" hljs lasso">apt install openjdk<span class="hljs-subst">-</span><span class="hljs-number">8</span><span class="hljs-attribute">-jre</span><span class="hljs-attribute">-headless</span></code></pre>

<p>然后下载源码包</p>



<pre class="prettyprint"><code class=" hljs avrasm">wget http://mirrors<span class="hljs-preprocessor">.tuna</span><span class="hljs-preprocessor">.tsinghua</span><span class="hljs-preprocessor">.edu</span><span class="hljs-preprocessor">.cn</span>/apache/flume/<span class="hljs-number">1.8</span><span class="hljs-number">.0</span>/apache-flume-<span class="hljs-number">1.8</span><span class="hljs-number">.0</span>-bin<span class="hljs-preprocessor">.tar</span><span class="hljs-preprocessor">.gz</span></code></pre>

<p>解压并移动到想要的目录，此处移动至/opt下</p>



<pre class="prettyprint"><code class=" hljs lasso">tar <span class="hljs-attribute">-zxvf</span> apache<span class="hljs-attribute">-flume</span><span class="hljs-subst">-</span><span class="hljs-number">1.8</span><span class="hljs-number">.0</span><span class="hljs-attribute">-bin</span><span class="hljs-built_in">.</span>tar<span class="hljs-built_in">.</span>gz
mv apache<span class="hljs-attribute">-flume</span><span class="hljs-subst">-</span><span class="hljs-number">1.8</span><span class="hljs-number">.0</span><span class="hljs-attribute">-bin</span> /opt/flume<span class="hljs-subst">-</span><span class="hljs-number">1.8</span><span class="hljs-number">.0</span></code></pre>

<p>运行以下命令查看版本号验证是否安装成功，正常显示版本号则安装成功</p>



<pre class="prettyprint"><code class=" hljs livecodeserver">/opt/flume-<span class="hljs-number">1.8</span><span class="hljs-number">.0</span>/bin/flume-ng <span class="hljs-built_in">version</span></code></pre>



<h2 id="flume基础配置">flume基础配置</h2>

<p>还需要进入到conf目录下在flume-env.sh文件中配置一下flume的JAVA_HOME值。</p>



<pre class="prettyprint"><code class=" hljs avrasm">cd /opt/flume-<span class="hljs-number">1.8</span><span class="hljs-number">.0</span>/conf
<span class="hljs-keyword">cp</span> flume-env<span class="hljs-preprocessor">.sh</span><span class="hljs-preprocessor">.template</span> flume-env<span class="hljs-preprocessor">.sh</span>
vi /opt/flume-<span class="hljs-number">1.8</span><span class="hljs-number">.0</span>/conf/flume-env<span class="hljs-preprocessor">.sh</span></code></pre>

<p>配置完成之后进入/opt/flume-1.8.0目录执行以下命令测试环境是否配置成功</p>



<pre class="prettyprint"><code class=" hljs avrasm">/opt/flume-<span class="hljs-number">1.8</span><span class="hljs-number">.0</span>/bin/flume-ng agent --conf conf --conf-file conf/flume-conf<span class="hljs-preprocessor">.properties</span><span class="hljs-preprocessor">.template</span> --name agent -Dflume<span class="hljs-preprocessor">.root</span><span class="hljs-preprocessor">.logger</span>=INFO,console</code></pre>



<h2 id="flume启动命令">flume启动命令</h2>

<p>原文：<a href="https://blog.csdn.net/qianshangding0708/article/details/48088611" rel="nofollow">https://blog.csdn.net/qianshangding0708/article/details/48088611</a></p>



<h3 id="命令">命令</h3>

<table>
<thead>
<tr>
  <th>参数</th>
  <th>描述</th>
</tr>
</thead>
<tbody><tr>
  <td>help</td>
  <td>打印帮助信息</td>
</tr>
<tr>
  <td>agent</td>
  <td>运行一个Flume Agent</td>
</tr>
<tr>
  <td>avro-client</td>
  <td>运行一个Avro Flume 客户端</td>
</tr>
<tr>
  <td>version</td>
  <td>显示Flume版本</td>
</tr>
</tbody></table>




<h3 id="全局选项">全局选项</h3>

<table>
<thead>
<tr>
  <th>参数</th>
  <th>描述</th>
</tr>
</thead>
<tbody><tr>
  <td>–conf,-c </td>
  <td>在目录使用配置文件。指定配置文件放在什么目录</td>
</tr>
<tr>
  <td>–classpath,-C </td>
  <td>追加一个classpath</td>
</tr>
<tr>
  <td>–dryrun,-d</td>
  <td>不真正运行Agent，而只是打印命令一些信息。</td>
</tr>
<tr>
  <td>–plugins-path </td>
  <td>插件目录列表。默认：$FLUME_HOME/plugins.d</td>
</tr>
<tr>
  <td>-Dproperty=value</td>
  <td>设置一个JAVA系统属性值。</td>
</tr>
<tr>
  <td>-Xproperty=value</td>
  <td>设置一个JAVA -X的选项。</td>
</tr>
</tbody></table>




<h3 id="agent选项">Agent选项</h3>

<table>
<thead>
<tr>
  <th>参数</th>
  <th>描述</th>
</tr>
</thead>
<tbody><tr>
  <td>–conf-file,-f </td>
  <td>指定配置文件，这个配置文件必须在全局选项的–conf参数定义的目录下。（必填）</td>
</tr>
<tr>
  <td>–name,-n </td>
  <td>Agent的名称（必填）</td>
</tr>
<tr>
  <td>–help,-h</td>
  <td>帮助</td>
</tr>
</tbody></table>




<h3 id="avro客户端选项">Avro客户端选项</h3>

<table>
<thead>
<tr>
  <th>参数</th>
  <th>描述</th>
</tr>
</thead>
<tbody><tr>
  <td>–rpcProps,-P </td>
  <td>连接参数的配置文件。</td>
</tr>
<tr>
  <td>–host,-H </td>
  <td>Event所要发送到的Hostname。</td>
</tr>
<tr>
  <td>–port,-p </td>
  <td>Avro Source的端口。</td>
</tr>
<tr>
  <td>–dirname </td>
  <td>Avro Source流到达的目录。</td>
</tr>
<tr>
  <td>–filename,-F </td>
  <td>Avro Source流到达的文件名。</td>
</tr>
<tr>
  <td>–headerFile,-R </td>
  <td>设置一个JAVA -X的选项。</td>
</tr>
</tbody></table>


<p>启动Avro客户端要么指定–rpcProps，要么指定–host和–port。</p>



<h2 id="flume-agent配置">flume agent配置</h2>

<p>flume通过配置文件来指定每个agent的日志采集源（source）、传输方式（channel）和目的地（sink）。一个机器可以运行多个agent，多个机器间的agent也可以互相连接。</p>



<h3 id="source">source</h3>

<p>在我们的应用场景中，最常用的source类型是exec和spooling，这里主要介绍这两个，其余可参考官方文档。 <br>
如果要收集docker的日志，可以参考这篇文章：<a href="https://blog.csdn.net/yanghua_kobe/article/details/50642601" rel="nofollow">https://blog.csdn.net/yanghua_kobe/article/details/50642601</a></p>

<h4 id="exec-source">exec source</h4>

<p>官方文档：<a href="http://flume.apache.org/FlumeUserGuide.html#exec-source" rel="nofollow">http://flume.apache.org/FlumeUserGuide.html#exec-source</a> <br>
这个source主要用来监控某个文件新增的log数据。</p>

<p>exec可以通过指定的操作对日志进行读取，使用exec时需要指定shell命令，对日志进行读取，下面给出一个具体的例子：</p>



<pre class="prettyprint"><code class=" hljs avrasm">a1<span class="hljs-preprocessor">.sources</span> = <span class="hljs-built_in">r1</span>
a1<span class="hljs-preprocessor">.channels</span> = c1
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.r</span>1<span class="hljs-preprocessor">.type</span> = exec
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.r</span>1<span class="hljs-preprocessor">.command</span> = tail -F /var/log/secure
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.r</span>1<span class="hljs-preprocessor">.channels</span> = c1</code></pre>



<h4 id="spooling-directory-source">spooling directory source</h4>

<p>官方文档：<a href="http://flume.apache.org/FlumeUserGuide.html#spooling-directory-source" rel="nofollow">http://flume.apache.org/FlumeUserGuide.html#spooling-directory-source</a> <br>
这个source主要用来监控某个目录下新增的文件。</p>

<p>spo_dir可以读取文件夹里的日志，使用时指定一个文件夹，可以读取该文件夹中的所有文件，需要注意的是该文件夹中的文件在读取过程中不能修改，同时文件名也不能修改。下面给出一个具体的例子：</p>



<pre class="prettyprint"><code class=" hljs avrasm">agent-<span class="hljs-number">1.</span>channels = ch-<span class="hljs-number">1</span>
agent-<span class="hljs-number">1.</span>sources = src-<span class="hljs-number">1</span>
agent-<span class="hljs-number">1.</span>sources<span class="hljs-preprocessor">.src</span>-<span class="hljs-number">1.</span>type = spooldir
agent-<span class="hljs-number">1.</span>sources<span class="hljs-preprocessor">.src</span>-<span class="hljs-number">1.</span>channels = ch-<span class="hljs-number">1</span>
agent-<span class="hljs-number">1.</span>sources<span class="hljs-preprocessor">.src</span>-<span class="hljs-number">1.</span>spoolDir = /var/log/apache/flumeSpool
agent-<span class="hljs-number">1.</span>sources<span class="hljs-preprocessor">.src</span>-<span class="hljs-number">1.</span>fileHeader = true</code></pre>



<h4 id="avro-source">avro source</h4>

<p>官方文档：<a href="http://flume.apache.org/FlumeUserGuide.html#avro-source" rel="nofollow">http://flume.apache.org/FlumeUserGuide.html#avro-source</a> <br>
这个source主要用来连接两个agent。更详细的参数配置请参考官方文档。 <br>
avro可以监听和收集指定端口的日志，使用avro的source需要说明被监听的主机ip和端口号，下面给出一个具体的例子：</p>



<pre class="prettyprint"><code class=" hljs avrasm">a1<span class="hljs-preprocessor">.sources</span> = <span class="hljs-built_in">r1</span>
a1<span class="hljs-preprocessor">.channels</span> = c1
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.r</span>1<span class="hljs-preprocessor">.type</span> = avro
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.r</span>1<span class="hljs-preprocessor">.channels</span> = c1
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.r</span>1<span class="hljs-preprocessor">.bind</span> = <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.r</span>1<span class="hljs-preprocessor">.port</span> = <span class="hljs-number">4141</span></code></pre>



<h3 id="channel">channel</h3>

<p>官方文档：<a href="http://flume.apache.org/FlumeUserGuide.html#flume-channel-selectors" rel="nofollow">http://flume.apache.org/FlumeUserGuide.html#flume-channel-selectors</a> <br>
Flume的channel种类并不多，最常用的是memory channel，下面给出例子：</p>



<pre class="prettyprint"><code class=" hljs avrasm">a1<span class="hljs-preprocessor">.channels</span> = c1
a1<span class="hljs-preprocessor">.channels</span><span class="hljs-preprocessor">.c</span>1<span class="hljs-preprocessor">.type</span> = memory
a1<span class="hljs-preprocessor">.channels</span><span class="hljs-preprocessor">.c</span>1<span class="hljs-preprocessor">.capacity</span> = <span class="hljs-number">10000</span>
a1<span class="hljs-preprocessor">.channels</span><span class="hljs-preprocessor">.c</span>1<span class="hljs-preprocessor">.transactionCapacity</span> = <span class="hljs-number">10000</span>
a1<span class="hljs-preprocessor">.channels</span><span class="hljs-preprocessor">.c</span>1<span class="hljs-preprocessor">.byteCapacityBufferPercentage</span> = <span class="hljs-number">20</span>
a1<span class="hljs-preprocessor">.channels</span><span class="hljs-preprocessor">.c</span>1<span class="hljs-preprocessor">.byteCapacity</span> = <span class="hljs-number">800000</span></code></pre>



<h3 id="sink">sink</h3>

<p>官方文档：<a href="http://flume.apache.org/FlumeUserGuide.html#flume-sinks" rel="nofollow">http://flume.apache.org/FlumeUserGuide.html#flume-sinks</a> <br>
在我们的应用场景中，最常用的sink是file roll sink，即将采集到的日志事件写入本地文件中保存起来。另外常用的还有logger sink，一般用于调试。avro sink则是为了连接多个agent服务的，我们的应用场景中暂时还没有用到。</p>



<h4 id="logger-sink">logger sink</h4>

<p>官方文档：<a href="http://flume.apache.org/FlumeUserGuide.html#logger-sink" rel="nofollow">http://flume.apache.org/FlumeUserGuide.html#logger-sink</a> <br>
logger顾名思义，就是将收集到的日志写到flume的log中，是个十分简单但非常实用的sink。参数配置请参考官方文档。</p>



<h4 id="avro-sink">avro sink</h4>

<p>官方文档：<a href="http://flume.apache.org/FlumeUserGuide.html#avro-sink" rel="nofollow">http://flume.apache.org/FlumeUserGuide.html#avro-sink</a> <br>
avro可以将接受到的日志发送到指定端口，供级联agent的下一跳收集和接受日志，使用时需要指定目的ip和端口。更详细的参数配置请参考官方文档。例子如下：</p>



<pre class="prettyprint"><code class=" hljs avrasm">a1<span class="hljs-preprocessor">.channels</span> = c1
a1<span class="hljs-preprocessor">.sinks</span> = k1
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.k</span>1<span class="hljs-preprocessor">.type</span> = avro
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.k</span>1<span class="hljs-preprocessor">.channel</span> = c1
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.k</span>1<span class="hljs-preprocessor">.hostname</span> = <span class="hljs-number">10.10</span><span class="hljs-number">.10</span><span class="hljs-number">.10</span>
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.k</span>1<span class="hljs-preprocessor">.port</span> = <span class="hljs-number">4545</span></code></pre>



<h4 id="file-roll-sink">file roll sink</h4>

<p>官方文档：<a href="http://flume.apache.org/FlumeUserGuide.html#file-roll-sink" rel="nofollow">http://flume.apache.org/FlumeUserGuide.html#file-roll-sink</a> <br>
file_roll可以将一定时间内收集到的日志写到一个指定的文件中，具体过程为用户指定一个文件夹和一个周期，然后启动agent，这时该文件夹会产生一个文件将该周期内收集到的日志全部写进该文件内，直到下一个周期再次产生一个新文件继续写入，以此类推，周而复始。更详细的参数配置请参考官方文档。下面给出一个具体的例子：</p>



<pre class="prettyprint"><code class=" hljs avrasm">a1<span class="hljs-preprocessor">.channels</span> = c1
a1<span class="hljs-preprocessor">.sinks</span> = k1
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.k</span>1<span class="hljs-preprocessor">.type</span> = file_roll
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.k</span>1<span class="hljs-preprocessor">.channel</span> = c1
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.k</span>1<span class="hljs-preprocessor">.sink</span><span class="hljs-preprocessor">.directory</span> = /var/log/flume</code></pre>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>