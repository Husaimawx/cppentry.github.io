---
layout:     post
title:      flume 笔记
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<h2><a id="flume1_0"></a>flume学习笔记(1)</h2>
<h4><a id="Flume_2"></a>一，Flume简介</h4>
<p>官方网站： <a href="http://flume.apache.org/" rel="nofollow">http://flume.apache.org/</a><br>
用户文档： <a href="http://flume.apache.org/FlumeUserGuide.html" rel="nofollow">http://flume.apache.org/FlumeUserGuide.html</a></p>
<ul>
<li>Flume是一个高可用的，高可靠的，分布式的海量日志采集、聚合和传输的系统，Flume支持在日志系统中定制各类数据发送方，用于收集数据；同时，Flume提供对数据进行简单处理，并写到各种数据接受方(比如文本、HDFS、Hbase等)的能力 。</li>
</ul>
<h4><a id="flume_9"></a>二、flume的特点</h4>
<ul>
<li>
<p>flume的数据流由事件(Event)贯穿始终。事件是Flume的基本数据单位，它携带日志数据(字节数组形式)并且携带有头信息，这些Event由Agent外部的Source生成，当Source捕获事件后会进行特定的格式化，然后Source会把事件推入(单个或多个)Channel中。你可以把Channel看作是一个缓冲区，它将保存事件直到Sink处理完该事件。Sink负责持久化日志或者把事件推向另一个Source。</p>
<p>（1）flume的可靠性<br>
　　　　当节点出现故障时，日志能够被传送到其他节点上而不会丢失。Flume提供了三种级别的可靠性保障，从强到弱依次分别为：end-to-end（收到数据agent首先将event写到磁盘上，当数据传送成功后，再删除；如果数据发送失败，可以重新发送。），Store on failure（这也是scribe采用的策略，当数据接收方crash时，将数据写到本地，待恢复后，继续发送），Besteffort（数据发送到接收方后，不会进行确认）。</p>
<p>（2）flume的可恢复性<br>
　　　　还是靠Channel。推荐使用FileChannel，事件持久化在本地文件系统里(性能较差)。</p>
</li>
</ul>
<h4><a id="flume_19"></a>三、flume的核心组件</h4>
<p>（1）Agent</p>
<ul>
<li>Flume 运行的核心是 Agent。Flume以agent为最小的独立运行单位。一个agent就是一个JVM。它是一个完整的数据收集工具，每台机器运行一个agent，但是可以在一个agent中包含多个sources和sinks。含有三个核心组件，分别是 source、 channel、 sink。通过这些组件， Event 可以从一个地方流向另一个地方。</li>
</ul>
<p>（2）Event</p>
<ul>
<li>一个数据单元，消息头和消息体组成。（Events可以是日志记录、 avro 对象等。）</li>
</ul>
<p>（3） Source</p>
<ul>
<li>Source是数据的收集端，负责将数据捕获后进行特殊的格式化，将数据封装到事件（event） 里，然后将事件推入Channel中。 Flume提供了很多内置的 Source， 支持 Avro， log4j， syslog 和 http post(body为json格式)。可以让应用程序同已有的Source直接打交道，如AvroSource，SyslogTcpSource。 如果内置的Source无法满足需要， Flume还支持自定义Source。</li>
<li><img src="http://phx884iy9.bkt.clouddn.com/it/flume/source.png" alt="在这里插入图片描述"></li>
</ul>
<p>（4） Channel</p>
<ul>
<li>Channel是连接Source和Sink的组件，大家可以将它看做一个数据的缓冲区（数据队列），它可以将事件暂存到内存中也可以持久化到本地磁盘上，直到Sink处理完该事件。介绍两个较为常用的Channel， MemoryChannel和FileChannel。</li>
<li><img src="http://phx884iy9.bkt.clouddn.com/it/flume/channel.png" alt="在这里插入图片描述"></li>
</ul>
<p>（5） Sink</p>
<ul>
<li>Sink从Channel中取出事件，然后将数据发到别处，可以向文件系统、数据库、 hadoop存数据， 也可以是其他agent的Source。在日志数据较少时，可以将数据存储在文件系统中，并且设定一定的时间间隔保存数据。</li>
<li><img src="http://phx884iy9.bkt.clouddn.com/it/flume/sink.png" alt="在这里插入图片描述"></li>
</ul>
<h4><a id="flume_44"></a>四、flume的传输过程</h4>
<ul>
<li>source监控某个文件，文件产生新的数据，拿到该数据后，将数据封装在一个Event中，并put到channel后commit提交，channel队列先进先出，sink去channel队列中拉取数据，然后写入到hdfs或者HBase中。</li>
<li><img src="http://phx884iy9.bkt.clouddn.com/it/flume/%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="在这里插入图片描述"></li>
<li><img src="http://phx884iy9.bkt.clouddn.com/it/flume/%E6%9E%B6%E6%9E%84%E5%9B%BE2.png" alt="在这里插入图片描述"></li>
</ul>
<h4><a id="Flume_50"></a>五、Flume拦截器、数据流以及可靠性</h4>
<p>（1） Flume拦截器</p>
<ul>
<li>当我们需要对数据进行过滤时，除了我们在Source、 Channel和Sink进行代码修改之外， Flume为我们提供了拦截器，拦截器也是chain形式的。拦截器的位置在Source和Channel之间，当我们为Source指定拦截器后，我们在拦截器中会得到event，根据需求我们可以对event进行保留还是抛弃，抛弃的数据不会进入Channel中。</li>
<li><img src="http://phx884iy9.bkt.clouddn.com/it/flume/%E6%8B%A6%E6%88%AA%E5%99%A8.png" alt="在这里插入图片描述"></li>
</ul>
<p>（2） Flume数据流</p>
<ul>
<li>Flume 的核心是把数据从数据源收集过来，再送到目的地。为了保证输送一定成功，在送到目的地之前，会先缓存数据，待数据真正到达目的地后，删除自己缓存的数据。</li>
<li>Flume 传输的数据的基本单位是 Event，如果是文本文件，通常是一行记录，这也是事务的基本单位。 Event 从 Source，流向 Channel，再到 Sink，  　　　　本身为一个 byte 数组，并可携带 headers 信息。 Event 代表着一个数据流的最小完整单元，从外部数据源来，向外部的目的地去。</li>
<li>Flume提供了大量内置的Source、Channel和Sink类型。不同类型的Source,Channel和Sink可以自由组合。组合方式基于用户设置的配置文件，非常灵活。比如：Channel可以把事件暂存在内存里，也可以持久化到本地硬盘上。Sink可以把日志写入HDFS, HBase，甚至是另外一个Source等等。Flume支持用户建立多级流。也就是说，多个agent可以协同工作，并且支持Fan-in、Fan-out、Contextual Routing、Backup Routes，这也正是Flume强大之处。</li>
</ul>
<p>（3）Flume的可靠性</p>
<ul>
<li>Flume 使用事务性的方式保证传送Event整个过程的可靠性。 Sink 必须在Event 被存入 Channel 后，或者，已经被传达到下一站agent里，又或者，已经被存入外部数据目的地之后，才能把 Event 从 Channel 中 remove 掉。这样数据流里的 event 无论是在一个 agent 里还是多个 agent 之间流转，都能保证可靠，因为以上的事务保证了 event 会被成功存储起来。比如 Flume支持在本地保存一份文件 channel 作为备份，而memory channel 将event存在内存 queue 里，速度快，但丢失的话无法恢复。</li>
</ul>
<blockquote>
<p>本人也是刚刚学习大数据相关知识，上述的知识也是从网上收集的资料，对自身的学习提供了非常大的帮助。<br>
我这里也搜集了大量的视频资料<br>
Flume视频及其他视频资源，可加我QQ：1731765178（掘金杨）</p>
</blockquote>

            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>