---
layout:     post
title:      IT学习笔记--Hbase
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                <p>1.Hbase简介</p>

<p>Hbase是分布式、面向列的开源数据库（其实准确的说是面向列族）。HDFS为Hbase提供可靠的底层数据存储服务，MapReduce为Hbase提供高性能的计算能力，Zookeeper为Hbase提供稳定服务和Failover机制，因此我们说Hbase是一个通过大量廉价的机器解决海量数据的高速存储和读取的分布式数据库解决方案。</p>

<p>2. Hbase的几个特点</p>

<p>1）海量存储：适合存储PB级别的海量数据，在PB级别的数据以及采用廉价PC存储的情况下，能在几十到百毫秒内返回数据。</p>

<p>2）列式存储：其实说的是列族存储，Hbase是根据列族来存储数据的。列族下面可以有非常多的列，列族在创建表的时候就必须指定。</p>

<p>下面是一个简单的关系型数据库的表和Hbase数据库的表：</p>

<p>RDBMS的表：</p>

<p><img alt="" class="has" src="https://blog-10039692.file.myqcloud.com/1506395416442_9799_1506395418658.png"></p>

<p>Hbase的表：</p>

<p><img alt="" class="has" src="https://blog-10039692.file.myqcloud.com/1506395429843_274_1506395431874.png"></p>

<p>下图是针对Hbase和关系型数据库的基本的一个比较：</p>

<p><img alt="" class="has" src="https://blog-10039692.file.myqcloud.com/1506395449042_5248_1506395451085.png"></p>

<p>3）极易扩展：主要体现在两个方面，一个是基于上层处理能力（RegionServer）的扩展，一个是基于存储的扩展（HDFS）。通过横向添加RegionSever（作用是管理region、承接业务的访问）的机器，进行水平扩展，提升Hbase上层的处理能力，提升Hbsae服务更多Region的能力。</p>

<p>4）稀疏：主要是针对Hbase列的灵活性，在列族中，你可以指定任意多的列，在列数据为空的情况下，是不会占用存储空间的。</p>

<p>3. Hbase几个重要概念</p>

<p>1）Column Family：又叫列族，Hbase通过列族划分数据的存储，列族下面可以包含任意多的列，实现灵活的数据存取。可以用家族的概念来理解，一个家族是由很多个家庭组成的。列族也类似，列族是由一个一个的列组成（任意多）。</p>

<p>注意：1）Hbase表的创建的时候就必须指定列族。就像关系型数据库创建的时候必须指定具体的列是一样的。</p>

<p>            2）Hbase的列族不是越多越好，官方推荐的是列族最好小于或者等于3。我们使用的场景一般是1个列族。</p>

<p>             3）每一个列，都必须归属于一个Column Family，这个归属关系是在写数据时指定的，而不是建表时预先定义。</p>

<p>2）Rowkey：它和mysql中的主键是完全一样的，Hbase使用Rowkey来唯一的区分某一行的数据。由于Hbase只支持3中查询方式：</p>

<ul><li>基于Rowkey的单行查询</li>
	<li>基于Rowkey的范围扫描</li>
	<li>全表扫描</li>
</ul><p>因此，Rowkey对Hbase的性能影响非常大，Rowkey的设计就显得尤为的重要。设计的时候要兼顾基于Rowkey的单行查询也要兼顾Rowkey的范围扫描。 </p>

<p>3）Region：它和关系型数据库的分区或者分片差不多。Hbase会将一个大表的数据基于Rowkey的不同范围分配到不同的Region中，每个Region负责一定范围的数据访问和存储。这样即使是一张巨大的表，由于被切割到不同的region，访问起来的时延也很低。Region是Hbase中负载均衡的基本单元，当一个Region增长到一定大小以后，会自动分裂成两个。</p>

<p>4）TimeStamp：它对Hbase来说至关重要，因为它是实现Hbase多版本的关键。</p>

<ul><li>在Hbase中使用不同的timestame来标识相同rowkey行对应的不通版本的数据。</li>
	<li>在写入数据的时候，如果用户没有指定对应的timestamp，Hbase会自动添加一个timestamp，timestamp和服务器时间保持一致。</li>
	<li>在Hbase中，相同rowkey的数据按照timestamp倒序排列。默认查询的是最新的版本，用户可同指定timestamp的值来读取旧版本的数据。</li>
</ul><p> 5）KeyValue：</p>

<p>KeyValue类是HBase中数据存储的核心，由keylength、valuelength、key、value四个部分组成，其中Key又由Row Length、Row、Column Family Length、Column Family、Column Qualifier（列名）、Time Stamp、Key Type七部分组成。每一行中的每一列数据，都被包装成独立的拥有<strong>特定结构</strong>的KeyValue。 <br>
KeyValue不会在块之间拆分。例如，如果有一个8 MB的KeyValue，即使块大小是64kb，这个KeyValue将作为一个连贯块读取。 <br>
结构如下：</p>

<p><img alt="这里写图片描述" class="has" src="https://img-blog.csdn.net/20170812141655031?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcGluZ19odQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"></p>

<p>其中： </p>

<ul><li>KeyLength存储Key的长度，占4B；</li>
	<li> ValueLength存储Value的长度,4B；</li>
	<li>Key存储具体的Cell数据为：</li>
</ul><pre class="has">
<code>1、 Row Length：存储rowkey的长度，占2B (Bytes.SIZEOF_INT)；
2、 Row：存储Rowkey实际内容，其大小为Row Length ；
3、 Column Family Length：存储列簇Column Family的长度，占1B (Bytes.SIZEOF_BYTE)； 
4、 Column Family：存储Column Family实际内容，大小为Column Family Length；
5、 Column Qualifier：存储Column Qualifier对应的数据。
6、 Time Stamp：存储时间戳Time Stamp，占8B (Bytes.SIZEOF_LONG)；
7、 Key Type：存储Key类型Key Type，占1B ( Bytes.SIZEOF_BYTE)，Type分为Put、Delete、DeleteColumn、DeleteFamilyVersion、DeleteFamily、Maximum、Minimum等类型，标记这个KeyValue的类型；
由于Key中其它的字段占用大小已经知道，并且知道整个Key的大小，因此没有存储Column Qualifier的大小。</code></pre>

<ul><li>Value：存储单元格Cell对应的实际的值Value。例如：对于<code>Put : rowkey=row1, cf:attr1=value1</code>操作，Key对应关系如下:</li>
</ul><pre class="has">
<code>rowlength -----------→ 4
row -----------------→ row1
columnfamilylength --→ 2
columnfamily --------→ cf
columnqualifier -----→ attr1
timestamp -----------→ server time of Put
keytype -------------→ Put</code></pre>

<p>rowlength占用2B空间，因此解释了rowkey的最大长度不能超过64kb。</p>

<p>4. Hbase存储系统的架构</p>

<p>HBase分布式数据库，只是分布式存储系统中的一部分，其系统组成包含HDFS、Region Server、Master节点、ZooKeeper集群等四大部分。各部分的具体功能如下描述：</p>

<p>1）HDFS</p>

<p>HBase底层存储上依赖于HDFS，HDFS保证了HBase的高可靠性。HDFS为RegionServer和Master节点提供分布式存储服务，同时保证数据的可靠性，主要功能如下：</p>

<ul><li>提供元数据和表数据的存储</li>
	<li>数据多副本保存，保证数据的高可靠性和高可用性</li>
</ul><p>2）Master节点主要负责：</p>

<ul><li>为Region Server(在hbase中称之为RegionServer)分配region。</li>
	<li>负责整个集群的负载均衡</li>
	<li>维护集群中的元数据</li>
	<li>负责监控整个集群，发现失效的RegionServer，并重新分配其上的Region</li>
</ul><p>3）RegionServer主要负责：</p>

<ul><li>管理Master分配的Region，处理来自客户端对Region的读取工作</li>
	<li>切分在运行过程中变得过大的Region</li>
	<li>负责和底层的HDFS交互，存储数据</li>
</ul><p>4）ZooKeeper功能：</p>

<ul><li>保证集群中仅仅存在一个Master能够运行</li>
	<li>监控RegionServer的状态，通过回调的形式通知Master  RegionServer的上下线的信息</li>
	<li>存储寻址的入口地址</li>
</ul><p>5. Hbase的Region实例及寻址</p>

<p>Region类似于数据库的分片和分区的概念，每个Region负责一小部分Rowkey范围的数据的读写和维护，Region包含了对应的起始行到结束行的所有信息。master将对应的region分配给不同的RergionServer，由RegionSever来提供Region的读写服务和相关的管理工作。</p>

<p>1）region实例</p>

<p><img alt="" class="has" src="https://blog-10039692.file.myqcloud.com/1506395939695_3236_1506395941866.png"></p>

<p>上图模拟了一个Hbase的表是如何拆分成region，以及分配到不同的RegionServer中去。上面是1个Userinfo表，里面有7条记录，其中rowkey为0001到0002的记录被分配到了Region1上，Rowkey为0003到0004的记录被分配到了Region2上，而rowkey为0005、0006和0007的记录则被分配到了Region3上。region1和region2被master分配给了RegionServer1（RS1），Region3被master配分给了RegionServer2（RS2）。</p>

<p>2）region的寻址</p>

<p>既然读写都在RegionServer上发生，我们前面有讲到，每个RegionSever为一定数量的region服务，那么client要对某一行数据做读写的时候如何能知道具体要去访问哪个RegionServer呢？那就是接下来我们要讨论寻址问题。</p>

<p>0.96版本以后将-ROOT-表去掉了。如下图所示：</p>

<p><img alt="" class="has" src="https://blog-10039692.file.myqcloud.com/1506396002537_2157_1506396004590.png"></p>

<p>访问路径变成了3步：</p>

<p>第1步：Client请求ZK获取.META.所在的RegionServer的地址。</p>

<p>第2步：Client请求.META.所在的RegionServer获取访问数据所在的RegionServer地址，client会将.META.的相关信息cache下来，以便下一次快速访问。</p>

<p>第3步：Client请求数据所在的RegionServer，获取所需要的数据。</p>

<p>总结去掉-ROOT-的原因有如下2点：</p>

<p>其一：提高性能<br>
其二：2层结构已经足以满足集群的需求</p>

<p>这里还有一个问题需要说明，那就是Client会缓存.META.的数据，用来加快访问，既然有缓存，那它什么时候更新？如果.META.更新了，比如Region1不在RegionServer2上了，被转移到了RegionServer3上。client的缓存没有更新会有什么情况？<br>
其实，Client的元数据缓存不更新，当.META.的数据发生更新。如上面的例子，由于Region1的位置发生了变化，Client再次根据缓存去访问的时候，会出现错误，当出现异常达到重试次数后就会去.META.所在的RegionServer获取最新的数据，如果.META.所在的RegionServer也变了，Client就会去ZK上获取.META.所在的RegionServer的最新地址。</p>

<p>6. Hbase的写逻辑：Hbase的写逻辑涉及到写内存、写log、刷盘等操作。</p>

<p>1）Hbase写入逻辑：其流程如下</p>

<p><img alt="" class="has" src="https://blog-10039692.file.myqcloud.com/1506396036453_6524_1506396038477.png"></p>

<p>从上图可以看出氛围3步骤：</p>

<p>第1步：Client获取数据写入的Region所在的RegionServer<br>
第2步：请求写Hlog<br>
第3步：请求写MemStore</p>

<p>只有当写Hlog和写MemStore都成功了才算请求写入完成。MemStore后续会逐渐刷到HDFS中。</p>

<p>注意：Hlog存储在HDFS，当RegionServer出现异常，需要使用Hlog来恢复数据。</p>

<p>2）MemStore刷盘：</p>

<p>为了提高Hbase的写入性能，当写请求写入MemStore后，不会立即刷盘。而是会等到一定的时候进行刷盘的操作。在以下几个场景会触发刷盘的操作：</p>

<p>（1）全局内存控制</p>

<p>这个全局的参数是控制内存整体的使用情况，当所有memstore占整个heap的最大比例的时候，会触发刷盘的操作。这个参数是hbase.regionserver.global.memstore.upperLimit，默认为整个heap内存的40%。但这并不意味着全局内存触发的刷盘操作会将所有的MemStore都进行刷盘，而是通过另外一个参数hbase.regionserver.global.memstore.lowerLimit来控制，默认是整个heap内存的35%。当flush到所有memstore占整个heap内存的比率为35%的时候，就停止刷盘。这么做主要是为了减少刷盘对业务带来的影响，实现平滑系统负载的目的。</p>

<p>（2）Memstore达到上限</p>

<p>当MemStore的大小达到hbase.hregion.memstore.flush.size大小的时候会触发刷盘，默认128M大小。</p>

<p>（3）RegionServer的Hlog数量达到上限</p>

<p>前面说到Hlog为了保证Hbase数据的一致性，那么如果Hlog太多的话，会导致故障恢复的时间太长，因此Hbase会对Hlog的最大个数做限制。当达到Hlog的最大个数的时候，会强制刷盘。这个参数是hase.regionserver.max.logs，默认是32个。</p>

<p>（4）手动触发</p>

<p>可以通过hbase shell或者java api手工触发flush的操作。</p>

<p>（5）关闭RegionServer触发</p>

<p>在正常关闭RegionServer会触发刷盘的操作，全部数据刷盘后就不需要再使用Hlog恢复数据。</p>

<p>（6）Region使用Hlog恢复完数据后触发</p>

<p>当RegionServer出现故障的时候，其上面的Region会迁移到其他正常的RegionServer上，在恢复完Region的数据后，会触发刷盘，当刷盘完成后才会提供给业务访问。</p>

<p>7. Hlog</p>

<p>Hlog是Hbase实现WAL（Write ahead log）方式产生的日志信息，内部是一个简单的顺序日志。每个RegionServer对应1个Hlog(备注：1.x版本的可以开启MultiWAL功能，允许多个Hlog)，所有对于该RegionServer的写入都被记录到Hlog中。Hlog实现的功能就是我们前面讲到的保证数据安全。当RegionServer出现问题的时候，能跟进Hlog来做数据恢复。此外为了保证恢复的效率，Hbase会限制最大保存的Hlog数量，如果达到Hlog的最大个数（hase.regionserver.max.logs参数控制）的时候，就会触发强制刷盘操作。对于已经刷盘的数据，其对应的Hlog会有一个过期的概念，Hlog过期后，会被监控线程移动到 .oldlogs，然后会被自动删除掉。</p>

<p>Hlog从产生到最后删除需要经历如下几个过程（即生命周期）：</p>

<ul><li>
	<p>产生<br>
	所有涉及到数据的变更都会先写Hlog，除非是你关闭了Hlog</p>
	</li>
	<li>
	<p>滚动<br>
	Hlog的大小通过参数hbase.regionserver.logroll.period控制，默认是1个小时，时间达到hbase.regionserver.logroll.period 设置的时间，Hbase会创建一个新的Hlog文件。这就实现了Hlog滚动的目的。Hbase通过hbase.regionserver.maxlogs参数控制Hlog的个数。滚动的目的，为了控制单个Hlog文件过大的情况，方便后续的过期和删除。</p>
	</li>
	<li>
	<p>过期<br>
	前面我们有讲到sequenceid这个东东，Hlog的过期依赖于对sequenceid的判断。Hbase会将Hlog的sequenceid和Hfile最大的sequenceid（刷新到的最新位置）进行比较，如果该Hlog文件中的sequenceid比刷新的最新位置的sequenceid都要小，那么这个Hlog就过期了，过期了以后，对应Hlog会被移动到.oldlogs目录。<br>
	这里有个问题，为什么要将过期的Hlog移动到.oldlogs目录，而不是直接删除呢？<br>
	答案是因为Hbase还有一个主从同步的功能，这个依赖Hlog来同步Hbase的变更，有一种情况不能删除Hlog，那就是Hlog虽然过期，但是对应的Hlog并没有同步完成，因此比较好的做好是移动到别的目录。再增加对应的检查和保留时间。</p>
	</li>
	<li>删除<br>
	如果Hbase开启了replication，当replication执行完一个Hlog的时候，会删除Zoopkeeper上的对应Hlog节点。在Hlog被移动到.oldlogs目录后，Hbase每隔hbase.master.cleaner.interval（默认60秒）时间会去检查.oldlogs目录下的所有Hlog，确认对应的Zookeeper的Hlog节点是否被删除，如果Zookeeper 上不存在对应的Hlog节点，那么就直接删除对应的Hlog。<br>
	hbase.master.logcleaner.ttl（默认10分钟）这个参数设置Hlog在.oldlogs目录保留的最长时间。</li>
</ul><p>8. Eclipse 连接Hbase需要注意的地方：</p>

<p>1） 首先查看linux服务器/etc/hostname文件配置，将/etc/hosts文件127.0.0.1 localhost注释掉，改成ip hostname。服务器端就处理完了。</p>

<p>windows客户端修改hosts为linux服务器ip linux服务器hostname(做个域名映射)。</p>

<p>启动hbase，在浏览器访问查看master地址，之前我的master地址一直是127.0.0.1或localhost，所以访问不到，经以上所述配置，master地址就是hostname，以下测试代码能测通了。</p>

<p>2）在hbase-site.xml的配置项中加入：</p>

<p><img alt="这里写图片描述" class="has" src="https://img-blog.csdn.net/20170825175158687?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbnl5anM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"></p>

<p>重启hbase之后，再次用telnet测试就可以了： <br>
如下： <br><img alt="这里写图片描述" class="has" src="https://img-blog.csdn.net/20170825175230977?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbnl5anM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"> <br>
telnet结果如下，什么都没有表示已经通了 <br><img alt="这里写图片描述" class="has" src="https://img-blog.csdn.net/20170825175320789?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbnl5anM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"></p>

<p>同时用netstat再次查看hbase服务： <br><img alt="这里写图片描述" class="has" src="https://img-blog.csdn.net/20170825175343770?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbnl5anM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"></p>

<p> 解决了下面这个问题，即：</p>

<p>能够正常ping通，如下: <br><img alt="这里写图片描述" class="has" src="https://img-blog.csdn.net/20170826145823652?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbnl5anM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"></p>

<p>但是telnet不通： <br><img alt="这里写图片描述" class="has" src="https://img-blog.csdn.net/20170826145658840?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbnl5anM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"></p>

<p><strong>这说明本机的ip到hbase集群所在的linux机器的网络是通的，但是外部并不能访问hbase服务。</strong></p>

<p>具体可参考这篇文档：<a href="https://blog.csdn.net/nyyjs/article/details/77584776?utm_source=debugrun&amp;utm_medium=referral" rel="nofollow">Eclipse和HBase连不上的问题分析</a> </p>

<p>3）在windows下要修改C:\Windows\System32\drivers\etc的hosts，添加上虚拟机的ip和名称对应。</p>            </div>
                </div>