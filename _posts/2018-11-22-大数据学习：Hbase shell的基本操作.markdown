---
layout:     post
title:      大数据学习：Hbase shell的基本操作
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                <p>　    HBase的命令行工具，最简单的接口，适合HBase管理使用，可以使用shell命令来查询HBase中数据的详细情况。安装完HBase之后，启动hadoop集群(利用hdfs存储)，启动zookeeper，使用start-hbase.sh命令开启hbase服务，最后在shell中执行hbase shell就可以进入命令行界面</p><p>　　Habse shell的help对语法的介绍很全,hbase shell 的操作分为 10类，j本文只介绍前4类常用的，分别是：gerneral,ddl,namespace,dml</p><p>　　1. Gerneral</p><p>　　status：查询当前服务器状态。</p><p>　　</p><center><img src="https://img-blog.csdn.net/2018042618072075" alt=""><br></center><p></p><p>　　Version:查看当前版本</p><p>　　</p><center><img src="https://img-blog.csdn.net/20180426180728502" alt=""><br></center><p></p><p>　　Whoami:查询当前hbase用户</p><p>　　</p><center><img src="https://img-blog.csdn.net/20180426180738345" alt=""><br></center><p></p><p>　　Table_help:表的引用，通过获取一张表的引用来对这张表进行添加删除数据等等操作，现在不推荐使用</p><p>　　2. DDL</p><p>　　Create:创建一个表</p><p>　　###创建一个表名为qianfeng，cf为列族</p><p>　　create 'qianfeng','cf'</p><p>　　</p><center><img src="https://img-blog.csdn.net/20180426180748593" alt=""><br></center><p></p><p>　　list：列出HBase的所有表</p><p>　　</p><center><img src="https://img-blog.csdn.net/20180426180818434" alt=""><br></center><p></p><p>　　· disable：禁用一张表</p><p>　　· ##禁用表‘qianfeng’</p><p>　　· disable ‘qianfeng’</p><p>　　· is_disabled：表是否被禁用</p><p>　　· ##验证表‘qianfeng’是否被禁用</p><p>　　· is_disabled ‘qianfeng’</p><p>　　· </p><center><img src="https://img-blog.csdn.net/2018042618083029" alt=""><br></center><p></p><p>　　· enable: 启用一张表</p><p>　　· ##启用表‘qianfeng’</p><p>　　· enable ‘qianfeng’</p><p>　　· is_enabled：表是否被启用</p><p>　　· ##验证表‘qianfeng’是否被启用</p><p>　　· is_enabled ‘qianfeng’</p><p>　　· </p><center><img src="https://img-blog.csdn.net/20180426180840910" alt=""><br></center><p></p><p>　　· describe：查看表的描述</p><p>　　· ##查看‘qianfeng’表的描述信息</p><p>　　· describe ‘qianfeng’</p><p>　　· </p><center><img src="https://img-blog.csdn.net/2018042618085072" alt=""><br></center><p></p><p>　　· alter：修改表的结构</p><p>　　· ##给表‘qianfeng’加入一个列族‘cf1’</p><p>　　· alter ‘qianfeng’,’cf1’</p><p>　　· </p><center><img src="https://img-blog.csdn.net/20180426180857675" alt=""><br></center><p></p><p>　　· exists：验证表是否存在</p><p>　　· ##验证表‘qianfeng’是否存在</p><p>　　· exists ‘qianfeng’</p><p>　　· </p><center><img src="https://img-blog.csdn.net/20180426180905952" alt=""><br></center><p></p><p>　　· drop：删除表，表需先禁用，然后才能删除</p><p>　　· ##删除表‘qianfeng’</p><p>　　· disable ‘qianfeng’</p><p>　　· drop ‘qianfeng’</p><p>　　· </p><center><img src="https://img-blog.csdn.net/20180426180914899" alt=""><br></center><p></p><p>　　· disable_all：禁用多个表</p><p>　　drop_all：删除多个表，表需先禁用，然后才能删除</p><p>　　3. Namespace</p><p>　　create_namespace:创建命名空间，相当于关系型数据库里创建一个数据库</p><p>　　##创建一个命名空间名为‘qf’,并添加属性</p><p>　　create_namespace ‘qf’, {'PROPERTY_NAME'=&gt;'PROPERTY_VALUE'}</p><p>　　alter_namespace：修改，添加，删除命名空间的属性</p><p>　　##设置命名空间qf的属性</p><p>　　alter_namespace 'qf', {METHOD =&gt; 'set', 'PROPERTY_NAME' =&gt; 'PROPERTY_VALUE'}</p><p>　　##删除命名空间qf的属性</p><p>　　alter_namespace 'qf', {METHOD =&gt; 'unset', NAME=&gt;'PROPERTY_NAME'}</p><p>　　describe_namespace：获取命名空间的描述</p><p>　　##获取命名空间‘qf’的描述信息</p><p>　　describe_namespace ‘qf’</p><p>　　</p><center><img src="https://img-blog.csdn.net/2018042618092544" alt=""><br></center><p></p><p>　　drop_namespace：删除命名空间</p><p>　　##删除命名空间‘qf’</p><p>　　drop_namespace ‘qf’</p><p>　　list_namespace：查看所有命名空间</p><p>　　</p><center><img src="https://img-blog.csdn.net/20180426180932404" alt=""><br></center><p></p><p>　　list_namespace_tables：查看命名空间下的所有表</p><p>　　##查看命名空间‘ns1’下的所有表</p><p>　　list_namespace_tables ‘ns1’</p><center><img src="https://img-blog.csdn.net/20180426180939692" alt=""><br></center><p></p><p>　　4. DML</p><p>　　先在命名空间‘qianfeng’(如果没有这个命名空间要先创建此命名空间)下创建一张表test,列族为‘cf’作为测试用</p><p>　　create ‘qianfeng：test’,’cf’</p><p>　　put:添加cell(数据)</p><p>　　# #向命名空间qianfeng下表test的rowkey为r1的列族下添加数据</p><p>　　put 'qianfeng:test','r1','cf:uname','zhangsan'</p><p>　　scan:扫描全表</p><p>　　scan ‘qianfeng:test’</p><p>　　</p><center><img src="https://img-blog.csdn.net/20180426180948695" alt=""><br></center><p></p><p>　　get:得到某一列或cell的数据。</p><p>　　##向命名空间qianfeng下表test的rowkey为r1的列族下添加数据</p><p>　　put 'qianfeng:test','r1','cf:age','23'</p><p>　　##获取列族cf下rowkey为r1的所有数据</p><p>　　get ‘qianfeng:test’,’r1’</p><p>　　</p><center><img src="https://img-blog.csdn.net/20180426181000741" alt=""><br></center><p></p><p>　　##获取列族cf下rowkey为r1，列名为uname的数据(获取一个cell)</p><p>　　get 'qianfeng:test','r1','cf:uname'</p><p>　　</p><center><img src="https://img-blog.csdn.net/20180426181008818" alt=""><br></center><p></p><p>　　truncate:清空表，不用disable (只是清空数据)</p><p>　　##清空表‘qianfeng:test’</p><p>　　truncate ‘qianfeng:test’</p><p>　　</p><center><img src="https://img-blog.csdn.net/20180426181016242" alt=""><br></center><p></p><p>　　查看‘qianfeng’下所有的表</p><p>　　</p><center><img src="https://img-blog.csdn.net/20180426181026126" alt=""><br></center><p></p><p>　　以上为hbase shell脚本的基础操作，都应该熟练掌握。在掌握hbase shell脚本的基础上学习hbase 的java api,会显得事半功倍。</p>            </div>
                </div>