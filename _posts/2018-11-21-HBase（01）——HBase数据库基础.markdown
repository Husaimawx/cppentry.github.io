---
layout:     post
title:      HBase（01）——HBase数据库基础
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<p></p><div class="toc"><h3>HBase基础</h3><ul><ul><li><a href="#HBase_1" rel="nofollow">HBase数据库介绍</a></li><li><a href="#HBase_11" rel="nofollow">HBase特点</a></li><li><a href="#HBase_22" rel="nofollow">HBase的存储机制</a></li><li><a href="#HBase_38" rel="nofollow">HBase中的表的特点</a></li></ul></ul></div><p></p>
<h2><a id="HBase_1"></a>HBase数据库介绍</h2>
<p>HBase是基于Google BigTable模型开发的，典型的key/value系统。正如Bigtable利用Google文件系统提供的分布式数据存储一样，HBase在Hadoop和HDFS之上提供类似Bigtable的功能。<br>
它是建立在hdfs之上，提供<strong>高可靠性、高性能、列存储、可伸缩、实时读写nosql的数据库系统</strong>。<br>
它是Apache Hadoop生态系统中的重要一员，主要<strong>用于海量结构化和半结构化数据存储。</strong><br>
它介于nosql和RDBMS之间，仅能通过主键(row key)和主键的range来检索数据，仅支持单行事务(可通过hive支持来实现多表join等复杂操作)。<br>
HBase查询数据功能很简单，不支持join等复杂操作，不支持复杂的事务（行级的事务）<br>
与hadoop一样，Hbase目标主要依靠<strong>横向扩展</strong>，通过不断增加廉价的商用服务器，来增加计算和存储能力。<br>
该项目的目标是托管非常大的表 （数十亿行X百万列 ） 在硬件集群上。<br>
<img src="https://img-blog.csdn.net/20181003142820937?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0ZlbmdnbXM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"><br>
官方地址：<a href="http://hbase.apache.org/" rel="nofollow">http://hbase.apache.org/</a></p>
<h2><a id="HBase_11"></a>HBase特点</h2>
<p>（翻译自官网）<br>
线性、模块化、可扩展。<br>
严格一致的读写操作。<br>
表的自动和可配置分片<br>
RegionServers之间的自动故障转移支持，高可用性。<br>
HBase表支持Hadoop MapReduce作业。<br>
易于使用的Java API，用于客户端访问。<br>
阻塞缓存和Bloom Filters以进行实时查询。<br>
提供了跨集群数据复制。</p>
<h2><a id="HBase_22"></a>HBase的存储机制</h2>
<p>HBase是一个<strong>面向列的数据库</strong>，在表中它由行排序。<br>
表模式定义只能列族，也就是键值对。一个表有多个列族以及每一个列族可以有任意数量的列。后续列的值连续地存储在磁盘上。表中的每个单元格值都具有时间戳。<br>
总之，在一个HBase：<br>
表是行的集合。<br>
行是列族的集合。<br>
列族是列的集合。<br>
列是键值对的集合。<br>
注：<br>
面向列的数据库是存储数据表作为数据列的部分，而不是作为行数据。它们拥有列族。</p>

<table>
<thead>
<tr>
<th>行式数据库</th>
<th>列式数据库</th>
</tr>
</thead>
<tbody>
<tr>
<td>它适用于联机事务处理（OLTP）。</td>
<td>它适用于在线分析处理（OLAP）。</td>
</tr>
<tr>
<td>这样的数据库被设计为小数目的行和列。</td>
<td>面向列的数据库设计的巨大表。</td>
</tr>
</tbody>
</table><h2><a id="HBase_38"></a>HBase中的表的特点</h2>
<p>大：一个表可以有上十亿行，上百万列<br>
无模式：每行都有一个可排序的主键和任意多的列，列可以根据需要动态的增加，同一张表中不同的行可以有截然不同的列；<br>
面向列:面向列(族)的存储和权限控制，列(族)独立检索。<br>
稀疏:对于为空(null)的列，并不占用存储空间，因此，表可以设计的非常稀疏。<br>
数据多版本：每个单元中的数据可以有多个版本，默认情况下版本号自动分配，是单元格插入时的时间戳<br>
数据类型单一：Hbase中的数据都是字节数组 byte[]。</p>
<br>

<table>
<thead>
<tr>
<th>HBase</th>
<th>RDBMS</th>
</tr>
</thead>
<tbody>
<tr>
<td>无模式，不具有固定列模式的概念;仅定义列族。</td>
<td>有模式，描述表的整体结构的约束。</td>
</tr>
<tr>
<td>专门创建为宽表。 HBase是横向扩展。</td>
<td>都是细而专的小表。很难形成规模。</td>
</tr>
<tr>
<td>没有任何事务。</td>
<td>RDBMS是事务性的。</td>
</tr>
<tr>
<td>反规范化的数据。</td>
<td>具有规范化的数据。</td>
</tr>
<tr>
<td>适合用于半结构以及结构化数据。</td>
<td>适合用于结构化数据。</td>
</tr>
</tbody>
</table>
            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>