---
layout:     post
title:      kafka源码之kafkaserver的启动
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/u014393917/article/details/52042820				</div>
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<h1><strong>KAFKA<span style="font-family:SimSun;">的启动</span></strong></h1>
<p>Kafka<span style="font-family:SimSun;">启动时</span><span style="font-family:'Times New Roman';">,</span><span style="font-family:SimSun;">通过进入</span><span style="font-family:'Times New Roman';">kafka</span><span style="font-family:SimSun;">的</span><span style="font-family:'Times New Roman';">bin</span><span style="font-family:SimSun;">路径下</span><span style="font-family:'Times New Roman';">,</span><span style="font-family:SimSun;">执行如下脚本</span><span style="font-family:'Times New Roman';">:</span></p>
<p>./kafka-server-start.sh ../config/server.properties</p>
<p> </p>
<p>这个脚本会启动<span style="font-family:'Times New Roman';">Kafka</span><span style="font-family:SimSun;">类的实例</span><span style="font-family:'Times New Roman';">,</span><span style="font-family:SimSun;">并执行</span><span style="font-family:'Times New Roman';">main</span><span style="font-family:SimSun;">函数</span><span style="font-family:'Times New Roman';">,</span><span style="font-family:SimSun;">传入的参数是</span><span style="font-family:'Times New Roman';">server.properties</span><span style="font-family:SimSun;">的路径</span><span style="font-family:'Times New Roman';">.</span></p>
<p style="background:rgb(255,255,255);"><strong><span style="background:rgb(228,228,255);">def</span><span style="background:rgb(255,255,255);"> </span></strong><span style="color:#000000;background:rgb(255,255,255);">main(args: Array[</span><span style="color:#20999d;background:rgb(255,255,255);">String</span><span style="color:#000000;background:rgb(255,255,255);">]): </span><span style="color:#cc7832;background:rgb(255,255,255);">Unit </span><span style="color:#000000;background:rgb(255,255,255);">= {</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">  </span><strong><span style="background:rgb(255,255,255);">try </span></strong><span style="color:#000000;background:rgb(255,255,255);">{</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">加载对应的server.properties配置文件,并生成Properties实例.</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">    </span><strong><span style="background:rgb(255,255,255);">val </span></strong><span style="color:#000000;background:rgb(255,255,255);">serverProps = </span><em><span style="color:#000000;background:rgb(255,255,255);">getPropsFromArgs</span></em><span style="color:#000000;background:rgb(255,255,255);">(args)</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">这里生成一个KafkaServer的实例,这个实例生成时,会在实例中同时生成一个KafkaServer的实例,</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">生成KafkaServer实例前,需要先通过serverProps生成出一个KafkaConfig的实例.</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">    </span><strong><span style="background:rgb(255,255,255);">val </span></strong><span style="color:#000000;background:rgb(255,255,255);">kafkaServerStartable = KafkaServerStartable.</span><em><span style="color:#000000;background:rgb(255,255,255);">fromProps</span></em><span style="color:#000000;background:rgb(255,255,255);">(serverProps)</span><span style="color:#000000;background:rgb(255,255,255);"><br></span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">添加对kill操作的勾子函数.用于处理,如果直接kill时关闭kafkaserver.</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">    </span><em><span style="color:#808080;background:rgb(255,255,255);">// attach shutdown handler to catch control-c</span><span style="color:#808080;background:rgb(255,255,255);"><br></span><span style="color:#808080;background:rgb(255,255,255);">    </span></em><span style="color:#000000;background:rgb(255,255,255);">Runtime.</span><em><span style="color:#000000;background:rgb(255,255,255);">getRuntime</span></em><span style="color:#000000;background:rgb(255,255,255);">().addShutdownHook(</span><strong><span style="background:rgb(255,255,255);">new </span></strong><span style="color:#000000;background:rgb(255,255,255);">Thread() {</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">      </span><strong><span style="background:rgb(255,255,255);">override def </span></strong><span style="color:#000000;background:rgb(255,255,255);">run() = {</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">        kafkaServerStartable.shutdown</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">      }</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">    })</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">启动并等待server停止.</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">    kafkaServerStartable.startup</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">    kafkaServerStartable.awaitShutdown</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">  }</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">  </span><strong><span style="background:rgb(255,255,255);">catch </span></strong><span style="color:#000000;background:rgb(255,255,255);">{</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">    </span><strong><span style="background:rgb(255,255,255);">case </span></strong><span style="color:#000000;background:rgb(255,255,255);">e: </span><span style="color:#20999d;background:rgb(255,255,255);">Throwable </span><span style="color:#000000;background:rgb(255,255,255);">=&gt;</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">      fatal(e)</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">      System.</span><em><span style="color:#000000;background:rgb(255,255,255);">exit</span></em><span style="color:#000000;background:rgb(255,255,255);">(</span><span style="background:rgb(255,255,255);">1</span><span style="color:#000000;background:rgb(255,255,255);">)</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">  }</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">  </span><span style="color:#000000;background:rgb(228,228,255);">System.exit(</span><span style="background:rgb(228,228,255);">0</span><span style="color:#000000;background:rgb(228,228,255);">)</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">}</span></p>
<p> </p>
<h2><strong><em>根据<span style="font-family:Arial;">properties</span><span style="font-family:SimSun;">生成</span><span style="font-family:Arial;">server</span><span style="font-family:SimSun;">实例</span></em></strong></h2>
<p>在<span style="color:#000000;background:rgb(255,255,255);">KafkaServerStartable.</span><em><span style="color:#000000;background:rgb(255,255,255);">fromProps</span></em><span style="color:#000000;background:rgb(255,255,255);">(serverProps)函数调用时,也就是kakfa启动时,</span></p>
<p style="background:rgb(255,255,255);"><strong><span style="background:rgb(255,255,255);">new </span></strong><span style="color:#000000;background:rgb(255,255,255);">KafkaServerStartable(KafkaConfig.</span><em><span style="color:#000000;background:rgb(255,255,255);">fromProps</span></em><span style="color:#000000;background:rgb(255,255,255);">(serverProps))</span></p>
<p style="background:rgb(255,255,255);"><span style="background:rgb(255,255,255);">KafkaServerStartable实例生成时,会生成KafkaServer实例</span><span style="color:#000000;background:rgb(255,255,255);">:</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">  </span><strong><span style="background:rgb(255,255,255);">class </span></strong><span style="color:#000000;background:rgb(255,255,255);">KafkaServerStartable(</span><strong><span style="background:rgb(255,255,255);">val </span></strong><span style="color:#000000;background:rgb(255,255,255);">serverConfig: KafkaConfig) </span><strong><span style="background:rgb(255,255,255);">extends </span></strong><span style="color:#000000;background:rgb(255,255,255);">Logging {</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">         </span><strong><span style="background:rgb(255,255,255);">private val </span></strong><em><span style="background:rgb(255,255,255);">server </span></em><span style="color:#000000;background:rgb(255,255,255);">= </span><strong><span style="background:rgb(255,255,255);">new </span></strong><span style="color:#000000;background:rgb(255,255,255);">KafkaServer(serverConfig)</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);"> </span></p>
<p style="background:rgb(255,255,255);"><span style="background:rgb(255,255,255);">KafkaConfig.</span><em><span style="background:rgb(255,255,255);">fromProps</span></em><span style="background:rgb(255,255,255);">(serverProps)的函数调用流程</span><span style="color:#000000;background:rgb(255,255,255);">:</span></p>
<p style="background:rgb(255,255,255);"><strong><span style="background:rgb(228,228,255);">def</span><span style="background:rgb(255,255,255);"> </span></strong><span style="color:#000000;background:rgb(255,255,255);">fromProps(props: Properties): KafkaConfig =</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">  </span><span style="color:#000000;background:rgb(228,228,255);">fromProps(props</span><span style="color:#cc7832;background:rgb(228,228,255);">, </span><strong><span style="background:rgb(228,228,255);">true</span></strong><span style="color:#000000;background:rgb(228,228,255);">)</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);"><br></span><strong><span style="background:rgb(255,255,255);">def </span></strong><span style="color:#000000;background:rgb(255,255,255);">fromProps(props: Properties</span><span style="color:#cc7832;background:rgb(255,255,255);">, </span><span style="color:#000000;background:rgb(255,255,255);">doLog: </span><span style="color:#cc7832;background:rgb(255,255,255);">Boolean</span><span style="color:#000000;background:rgb(255,255,255);">): KafkaConfig =</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">  </span><strong><span style="background:rgb(255,255,255);">new </span></strong><span style="color:#000000;background:rgb(255,255,255);">KafkaConfig(props</span><span style="color:#cc7832;background:rgb(255,255,255);">, </span><span style="color:#000000;background:rgb(255,255,255);">doLog)</span></p>
<p><span style="color:#000000;background:rgb(255,255,255);"> </span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);"> </span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">KafkaServer实例用于对所有的组件进行统一的初始化与启动.</span></p>
<h2><strong><em>KafkaServer<span style="font-family:SimSun;">的启动</span></em></strong></h2>
<p>在<span style="font-family:'Times New Roman';">Kafka</span><span style="font-family:SimSun;">的</span><span style="font-family:'Times New Roman';">main</span><span style="font-family:SimSun;">函数中执行</span><span style="font-family:'Times New Roman';">startup</span><span style="font-family:SimSun;">时</span><span style="font-family:'Times New Roman';">,</span><span style="font-family:SimSun;">会调用</span><span style="font-family:'Times New Roman';">KafkaServer</span><span style="font-family:SimSun;">实例中的</span><span style="font-family:'Times New Roman';">startup</span><span style="font-family:SimSun;">函数</span><span style="font-family:'Times New Roman';">.</span></p>
<p>在<span style="font-family:'Times New Roman';">KafkaServer</span><span style="font-family:SimSun;">的实例生成时</span><span style="font-family:'Times New Roman';">,</span><span style="font-family:SimSun;">会在每个</span><span style="font-family:'Times New Roman';">logDir</span><span style="font-family:SimSun;">的目录下生成一个</span><span style="font-family:'Times New Roman';">meta.properties</span><span style="font-family:SimSun;">配置文件</span><span style="font-family:'Times New Roman';">,</span></p>
<p>这个文件中主要记录有这个<span style="font-family:'Times New Roman';">kafka</span><span style="font-family:SimSun;">的版本与</span><span style="font-family:'Times New Roman';">broker.id</span><span style="font-family:SimSun;">的值</span><span style="font-family:'Times New Roman';">.</span></p>
<p>KafkaServer<span style="font-family:SimSun;">的实例启动时</span><span style="font-family:'Times New Roman';">,</span><span style="font-family:SimSun;">会生成</span><span style="font-family:'Times New Roman';">kafka</span><span style="font-family:SimSun;">对外服务的</span><span style="font-family:'Times New Roman';">socket server</span><span style="font-family:SimSun;">与相关组件</span><span style="font-family:'Times New Roman';">,</span><span style="font-family:SimSun;">并对其进行启动</span><span style="font-family:'Times New Roman';">.</span></p>
<p> </p>
<p><span>在执行<span style="font-family:'Times New Roman';">startup</span><span style="font-family:SimSun;">函数时</span><span style="font-family:'Times New Roman';">,</span><span style="font-family:SimSun;">下面分析下这个函数的具体的执行流程</span></span>:</p>
<p>1,<span style="font-family:SimSun;">设置</span><span style="font-family:'Times New Roman';">brokerState</span><span style="font-family:SimSun;">的状态为</span><span style="font-family:'Times New Roman';">Starting</span><span style="font-family:SimSun;">的状态</span><span style="font-family:'Times New Roman';">.</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(228,228,255);">brokerState</span><span style="color:#000000;background:rgb(255,255,255);">.newState(Starting)</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);"> </span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">2,启动kafka的调度器,这个KafkaScheduler的实例生成时需要得到</span><strong><span style="background:rgb(255,255,255);">background.threads</span></strong><span style="color:#000000;background:rgb(255,255,255);">配置的值,默认是10个,用于配置后台线程池的个数.</span></p>
<p style="background:rgb(255,255,255);"><em><span style="color:#808080;background:rgb(255,255,255);">/* start scheduler */</span><span style="color:#808080;background:rgb(255,255,255);"><br></span><span style="background:rgb(255,255,255);">kafkaScheduler</span></em><span style="color:#000000;background:rgb(255,255,255);">.startup()</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);"> </span></p>
<p>3,<span style="font-family:SimSun;">初始化与</span><span style="font-family:'Times New Roman';">zookeeper</span><span style="font-family:SimSun;">的连接</span><span style="font-family:'Times New Roman';">,</span></p>
<p>这里需要的配置项<span style="font-family:'Times New Roman';">:</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">配置项</span><strong><span style="background:rgb(228,228,255);">zookeeper.connect</span></strong><span style="color:#000000;background:rgb(255,255,255);">,默认值</span><strong><span style="background:rgb(255,255,255);">localhost:2181</span></strong><span style="color:#000000;background:rgb(255,255,255);">.用于设置kafka连接的zookeeper的连接地址.</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">配置项</span><strong><span style="background:rgb(255,255,255);">zookeeper.session.timeout.ms</span></strong><span style="color:#000000;background:rgb(255,255,255);">,默认值6000ms,用于控制zk的session的超时时间,可设置为同步时间的2倍或3倍.</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">配置项</span><strong><span style="background:rgb(228,228,255);">zookeeper.connection.timeout.ms</span></strong><span style="color:#000000;background:rgb(255,255,255);">,默认值6000ms,用于配置连接zk的连接超时时间.</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">配置项</span><strong><span style="background:rgb(255,255,255);">zookeeper.sync.time.ms</span></strong><span style="color:#000000;background:rgb(255,255,255);">,默认值2000ms,用于与zk进行同步的时间间隔,</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">配置项</span><strong><span style="background:rgb(255,255,255);">zookeeper.set.acl</span></strong><span style="color:#000000;background:rgb(255,255,255);">,是否启用zookeeper的acl控制,默认值为false,表示不启用.</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);"> </span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">这里得到的zkUtils实例是一个ZkUtils的实例,在实例生成后,会判断zk中是否存在如下地址,如果不存在,会创建对应的路径在zk上.</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">路径</span><strong><span style="background:rgb(255,255,255);">/consumers</span></strong><span style="color:#000000;background:rgb(255,255,255);">,这个路径用于消费者的client.id存储对应消费的offset的路径.</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">路径</span><strong><span style="background:rgb(255,255,255);">/brokers/ids</span></strong><span style="color:#000000;background:rgb(255,255,255);">,这个路径用于存储所有的broker id的路径.</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">路径</span><strong><span style="background:rgb(255,255,255);">/brokers/topics</span></strong><span style="color:#000000;background:rgb(255,255,255);">,用于存储每个broker对应的topics的信息,</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">路径</span><strong><span style="background:rgb(255,255,255);">/config/changes</span></strong><span style="color:#000000;background:rgb(255,255,255);">,还不知道,后期用到在说.</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">路径</span><strong><span style="background:rgb(255,255,255);">/config/topics</span></strong><span style="color:#000000;background:rgb(255,255,255);">,还不知道,后期用到在说.</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">路径</span><strong><span style="background:rgb(255,255,255);">/config/clients</span></strong><span style="color:#000000;background:rgb(255,255,255);">,还不知道,后期用到在说.</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">路径</span><strong><span style="background:rgb(255,255,255);">/admin/delete_topics</span></strong><span style="color:#000000;background:rgb(255,255,255);">,用于存储删除的topic的信息.</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">路径</span><strong><span style="background:rgb(255,255,255);">/brokers/seqid</span></strong><span style="color:#000000;background:rgb(255,255,255);">,还不知道,后期用到在说.</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">路径</span><strong><span style="background:rgb(255,255,255);">/isr_change_notification</span></strong><span style="color:#000000;background:rgb(255,255,255);">,这个用于在kafka的副本broker发生变化时用于通知的存储路径.</span></p>
<p style="background:rgb(255,255,255);"><em><span style="color:#808080;background:rgb(255,255,255);">/* setup zookeeper */</span><span style="color:#808080;background:rgb(255,255,255);"><br></span><span style="background:rgb(255,255,255);">zkUtils </span></em><span style="color:#000000;background:rgb(255,255,255);">= initZk()</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);"> </span></p>
<p>4,<span style="font-family:SimSun;">初始化创建并启动</span><span style="font-family:'Times New Roman';">LogManager</span><span style="font-family:SimSun;">的实例</span><span style="font-family:'Times New Roman';">,</span></p>
<p style="background:rgb(255,255,255);"><em><span style="color:#808080;background:rgb(255,255,255);">/* start log manager */</span><span style="color:#808080;background:rgb(255,255,255);"><br></span><span style="background:rgb(255,255,255);">logManager </span></em><span style="color:#000000;background:rgb(255,255,255);">= createLogManager(</span><em><span style="background:rgb(255,255,255);">zkUtils</span></em><span style="color:#000000;background:rgb(255,255,255);">.zkClient</span><span style="color:#cc7832;background:rgb(255,255,255);">, </span><em><span style="background:rgb(255,255,255);">brokerState</span></em><span style="color:#000000;background:rgb(255,255,255);">)</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><em><span style="background:rgb(255,255,255);">logManager</span></em><span style="color:#000000;background:rgb(255,255,255);">.startup()</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);"> </span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">5,得到当前配置文件中的brokerId的信息.</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">如果broker.id的配置没有配置(小于0的值时),同时</span><strong><span style="background:rgb(255,255,255);">broker.id.generation.enable</span></strong><span style="color:#000000;background:rgb(255,255,255);">配置为true,默认也就是true,这个时候根据zk中</span><strong><span style="background:rgb(255,255,255);">/brokers/seqid</span></strong><span style="color:#000000;background:rgb(255,255,255);">路径的version值,第一次从0开始,每次增加.并加上</span><strong><span style="background:rgb(255,255,255);">reserved.broker.max.id</span></strong><span style="color:#000000;background:rgb(255,255,255);">配置的值,默认是1000,来充当这个server的broker.id,同时把这个broker.id更新到logDir目录下的meta.properties文件中,下次读取时,直接读取这个配置文件中的broker.id的值,而不需要重新进行创建.</span></p>
<p style="background:rgb(255,255,255);"><em><span style="color:#808080;background:rgb(255,255,255);">/* generate brokerId */</span><span style="color:#808080;background:rgb(255,255,255);"><br></span></em><span style="color:#000000;background:rgb(255,255,255);">config.</span><em><span style="background:rgb(255,255,255);">brokerId </span></em><span style="color:#000000;background:rgb(255,255,255);">=  getBrokerId</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><strong><span style="background:rgb(255,255,255);">this</span></strong><span style="color:#000000;background:rgb(255,255,255);">.</span><em><span style="background:rgb(255,255,255);">logIdent </span></em><span style="color:#000000;background:rgb(255,255,255);">= </span><strong><span style="background:rgb(255,255,255);">"[Kafka Server " </span></strong><span style="color:#000000;background:rgb(255,255,255);">+ config.</span><em><span style="background:rgb(255,255,255);">brokerId </span></em><span style="color:#000000;background:rgb(255,255,255);">+ </span><strong><span style="background:rgb(255,255,255);">"], "</span></strong></p>
<p style="background:rgb(255,255,255);"><strong><span style="background:rgb(255,255,255);"> </span></strong></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">6,生成并启动kafka的SocketServer.</span></p>
<p style="background:rgb(255,255,255);"><em><span style="background:rgb(255,255,255);">socketServer </span></em><span style="color:#000000;background:rgb(255,255,255);">= </span><strong><span style="background:rgb(255,255,255);">new </span></strong><span style="color:#000000;background:rgb(255,255,255);">SocketServer(config</span><span style="color:#cc7832;background:rgb(255,255,255);">, </span><em><span style="background:rgb(255,255,255);">metrics</span></em><span style="color:#cc7832;background:rgb(255,255,255);">, </span><em><span style="background:rgb(255,255,255);">kafkaMetricsTime</span></em><span style="color:#000000;background:rgb(255,255,255);">)</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><em><span style="background:rgb(255,255,255);">socketServer</span></em><span style="color:#000000;background:rgb(255,255,255);">.startup()</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);"> </span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">7,生成并启动ReplicaManager,此实例依赖kafkaScheduler与logManager实例.</span></p>
<p style="background:rgb(255,255,255);"><em><span style="color:#808080;background:rgb(255,255,255);">/* start replica manager */</span><span style="color:#808080;background:rgb(255,255,255);"><br></span><span style="background:rgb(255,255,255);">replicaManager </span></em><span style="color:#000000;background:rgb(255,255,255);">= </span><strong><span style="background:rgb(255,255,255);">new </span></strong><span style="color:#000000;background:rgb(255,255,255);">ReplicaManager(config</span><span style="color:#cc7832;background:rgb(255,255,255);">, </span><em><span style="background:rgb(255,255,255);">metrics</span></em><span style="color:#cc7832;background:rgb(255,255,255);">, </span><span style="color:#000000;background:rgb(255,255,255);">time</span><span style="color:#cc7832;background:rgb(255,255,255);">, </span><em><span style="background:rgb(255,255,255);">kafkaMetricsTime</span></em><span style="color:#cc7832;background:rgb(255,255,255);">, </span></p>
<p style="background:rgb(255,255,255);"><span style="color:#cc7832;background:rgb(255,255,255);">  </span><em><span style="background:rgb(255,255,255);">zkUtils</span></em><span style="color:#cc7832;background:rgb(255,255,255);">, </span><em><span style="background:rgb(255,255,255);">kafkaScheduler</span></em><span style="color:#cc7832;background:rgb(255,255,255);">, </span><em><span style="background:rgb(255,255,255);">logManager</span></em><span style="color:#cc7832;background:rgb(255,255,255);">,</span><span style="color:#cc7832;background:rgb(255,255,255);"><br></span><span style="color:#cc7832;background:rgb(255,255,255);">  </span><em><span style="background:rgb(255,255,255);">isShuttingDown</span></em><span style="color:#000000;background:rgb(255,255,255);">)</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><em><span style="background:rgb(255,255,255);">replicaManager</span></em><span style="color:#000000;background:rgb(255,255,255);">.startup()</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);"> </span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">8,生成并启动KafkaController实例,此使用用于控制当前的broker中的所有的leader的partition的操作.</span></p>
<p style="background:rgb(255,255,255);"><em><span style="color:#808080;background:rgb(255,255,255);">/* start kafka controller */</span><span style="color:#808080;background:rgb(255,255,255);"><br></span><span style="background:rgb(255,255,255);">kafkaController </span></em><span style="color:#000000;background:rgb(255,255,255);">= </span><strong><span style="background:rgb(255,255,255);">new </span></strong><span style="color:#000000;background:rgb(255,255,255);">KafkaController(config</span><span style="color:#cc7832;background:rgb(255,255,255);">, </span><em><span style="background:rgb(255,255,255);">zkUtils</span></em><span style="color:#cc7832;background:rgb(255,255,255);">, </span><em><span style="background:rgb(255,255,255);">brokerState</span></em><span style="color:#cc7832;background:rgb(255,255,255);">,</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#cc7832;background:rgb(255,255,255);">    </span><em><span style="background:rgb(255,255,255);">kafkaMetricsTime</span></em><span style="color:#cc7832;background:rgb(255,255,255);">, </span><em><span style="background:rgb(255,255,255);">metrics</span></em><span style="color:#cc7832;background:rgb(255,255,255);">, </span><span style="color:#000000;background:rgb(255,255,255);">threadNamePrefix)</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><em><span style="background:rgb(255,255,255);">kafkaController</span></em><span style="color:#000000;background:rgb(255,255,255);">.startup()</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);"> </span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">9,生成并启动GroupCoordinator的实例,这个是0.9新加入的一个玩意,用于对consumer中新加入的与partition的检查,并对partition与consumer进行平衡操作.</span></p>
<p style="background:rgb(255,255,255);"><em><span style="color:#808080;background:rgb(255,255,255);">/* start kafka coordinator */</span><span style="color:#808080;background:rgb(255,255,255);"><br></span><span style="background:rgb(255,255,255);">consumerCoordinator </span></em><span style="color:#000000;background:rgb(255,255,255);">= GroupCoordinator.</span><em><span style="color:#000000;background:rgb(255,255,255);">create</span></em><span style="color:#000000;background:rgb(255,255,255);">(config</span><span style="color:#cc7832;background:rgb(255,255,255);">, </span><em><span style="background:rgb(255,255,255);">zkUtils</span></em><span style="color:#cc7832;background:rgb(255,255,255);">, </span><em><span style="background:rgb(255,255,255);">replicaManager</span></em><span style="color:#000000;background:rgb(255,255,255);">)</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><em><span style="background:rgb(255,255,255);">consumerCoordinator</span></em><span style="color:#000000;background:rgb(255,255,255);">.startup()</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);"> </span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">10,根据</span><strong><span style="background:rgb(255,255,255);">authorizer.class.name</span></strong><span style="color:#000000;background:rgb(255,255,255);">配置项配置的Authorizer的实现类,生成一个用于认证的实例,用于对用户的操作进行认证.这个默认为不认证.</span></p>
<p style="background:rgb(255,255,255);"><em><span style="color:#808080;background:rgb(255,255,255);">/* Get the authorizer and initialize it if one is specified.*/</span><span style="color:#808080;background:rgb(255,255,255);"><br></span><span style="background:rgb(255,255,255);">authorizer </span></em><span style="color:#000000;background:rgb(255,255,255);">= </span><em><span style="color:#000000;background:rgb(255,255,255);">Option</span></em><span style="color:#000000;background:rgb(255,255,255);">(config.</span><em><span style="background:rgb(255,255,255);">authorizerClassName</span></em><span style="color:#000000;background:rgb(255,255,255);">).filter(_.nonEmpty).map { authorizerClassName =&gt;</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">  </span><strong><span style="background:rgb(255,255,255);">val </span></strong><span style="color:#000000;background:rgb(255,255,255);">authZ = CoreUtils.</span><em><span style="color:#000000;background:rgb(255,255,255);">createObject</span></em><span style="color:#000000;background:rgb(255,255,255);">[Authorizer](authorizerClassName)</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">  authZ.configure(config.originals())</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">  authZ</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">}</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);"> </span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">11,生成用于对外对外提供服务的KafkaApis实例,并设置当前的broker的状态为运行状态.</span></p>
<p style="background:rgb(255,255,255);"><em><span style="color:#808080;background:rgb(255,255,255);">/* start processing requests */</span><span style="color:#808080;background:rgb(255,255,255);"><br></span><span style="background:rgb(255,255,255);">apis </span></em><span style="color:#000000;background:rgb(255,255,255);">= </span><strong><span style="background:rgb(255,255,255);">new </span></strong><span style="color:#000000;background:rgb(255,255,255);">KafkaApis(</span><em><span style="background:rgb(255,255,255);">socketServer</span></em><span style="color:#000000;background:rgb(255,255,255);">.</span><em><span style="background:rgb(255,255,255);">requestChannel</span></em><span style="color:#cc7832;background:rgb(255,255,255);">, </span><em><span style="background:rgb(255,255,255);">replicaManager</span></em><span style="color:#cc7832;background:rgb(255,255,255);">, </span></p>
<p style="background:rgb(255,255,255);"><span style="color:#cc7832;background:rgb(255,255,255);">   </span><em><span style="background:rgb(255,255,255);">consumerCoordinator</span></em><span style="color:#cc7832;background:rgb(255,255,255);">,</span><span style="color:#cc7832;background:rgb(255,255,255);"><br></span><span style="color:#cc7832;background:rgb(255,255,255);">   </span><em><span style="background:rgb(255,255,255);">kafkaController</span></em><span style="color:#cc7832;background:rgb(255,255,255);">, </span><em><span style="background:rgb(255,255,255);">zkUtils</span></em><span style="color:#cc7832;background:rgb(255,255,255);">, </span><span style="color:#000000;background:rgb(255,255,255);">config.</span><em><span style="background:rgb(255,255,255);">brokerId</span></em><span style="color:#cc7832;background:rgb(255,255,255);">, </span><span style="color:#000000;background:rgb(255,255,255);">config</span><span style="color:#cc7832;background:rgb(255,255,255);">, </span><em><span style="background:rgb(255,255,255);">metadataCache</span></em><span style="color:#cc7832;background:rgb(255,255,255);">, </span><em><span style="background:rgb(255,255,255);">metrics</span></em><span style="color:#cc7832;background:rgb(255,255,255);">,</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#cc7832;background:rgb(255,255,255);">   </span><em><span style="background:rgb(255,255,255);">authorizer</span></em><span style="color:#000000;background:rgb(255,255,255);">)</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><em><span style="background:rgb(255,255,255);">requestHandlerPool </span></em><span style="color:#000000;background:rgb(255,255,255);">= </span><strong><span style="background:rgb(255,255,255);">new </span></strong><span style="color:#000000;background:rgb(255,255,255);">KafkaRequestHandlerPool(config.</span><em><span style="background:rgb(255,255,255);">brokerId</span></em><span style="color:#cc7832;background:rgb(255,255,255);">, </span><em><span style="background:rgb(255,255,255);">socketServer</span></em><span style="color:#000000;background:rgb(255,255,255);">.</span><em><span style="background:rgb(255,255,255);">requestChannel</span></em><span style="color:#cc7832;background:rgb(255,255,255);">, </span><em><span style="background:rgb(255,255,255);">apis</span></em><span style="color:#cc7832;background:rgb(255,255,255);">, </span><span style="color:#000000;background:rgb(255,255,255);">config.</span><em><span style="background:rgb(255,255,255);">numIoThreads</span></em><span style="color:#000000;background:rgb(255,255,255);">)</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><em><span style="background:rgb(255,255,255);">brokerState</span></em><span style="color:#000000;background:rgb(255,255,255);">.newState(RunningAsBroker)</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);"> </span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">12,生成动态配置修改的处理管理,主要是topic修改与client端配置的修改,并把已经存在的clientid对应的配置进行修改.</span></p>
<p style="background:rgb(255,255,255);"><em><span style="color:#808080;background:rgb(255,255,255);">/* start dynamic config manager */</span><span style="color:#808080;background:rgb(255,255,255);"><br></span><span style="background:rgb(255,255,255);">dynamicConfigHandlers </span></em><span style="color:#000000;background:rgb(255,255,255);">= </span><em><span style="background:rgb(255,255,255);">Map</span></em><span style="color:#000000;background:rgb(255,255,255);">[</span><span style="color:#20999d;background:rgb(255,255,255);">String</span><span style="color:#cc7832;background:rgb(255,255,255);">, </span><span style="color:#000000;background:rgb(255,255,255);">ConfigHandler](</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">ConfigType.</span><em><span style="background:rgb(255,255,255);">Topic </span></em><span style="color:#000000;background:rgb(255,255,255);">-&gt; </span><strong><span style="background:rgb(255,255,255);">new </span></strong><span style="color:#000000;background:rgb(255,255,255);">TopicConfigHandler(</span><em><span style="background:rgb(255,255,255);">logManager</span></em><span style="color:#000000;background:rgb(255,255,255);">)</span><span style="color:#cc7832;background:rgb(255,255,255);">,</span><span style="color:#cc7832;background:rgb(255,255,255);"><br></span><span style="color:#cc7832;background:rgb(255,255,255);">    </span><span style="color:#000000;background:rgb(255,255,255);">ConfigType.</span><em><span style="background:rgb(255,255,255);">Client </span></em><span style="color:#000000;background:rgb(255,255,255);">-&gt; </span><strong><span style="background:rgb(255,255,255);">new </span></strong><span style="color:#000000;background:rgb(255,255,255);">ClientIdConfigHandler(</span><em><span style="background:rgb(255,255,255);">apis</span></em><span style="color:#000000;background:rgb(255,255,255);">.</span><em><span style="background:rgb(255,255,255);">quotaManagers</span></em><span style="color:#000000;background:rgb(255,255,255);">)</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">)</span><em><span style="color:#808080;background:rgb(255,255,255);"><br></span><span style="color:#808080;background:rgb(255,255,255);">// </span></em><strong><em><span style="background:rgb(255,255,255);">TODO: Move this logic to DynamicConfigManager</span><span style="background:rgb(255,255,255);"><br></span></em></strong><span style="color:#000000;background:rgb(255,255,255);">AdminUtils.</span><em><span style="color:#000000;background:rgb(255,255,255);">fetchAllEntityConfigs</span></em><span style="color:#000000;background:rgb(255,255,255);">(</span><em><span style="background:rgb(255,255,255);">zkUtils</span></em><span style="color:#cc7832;background:rgb(255,255,255);">, </span><span style="color:#000000;background:rgb(255,255,255);">ConfigType.</span><em><span style="background:rgb(255,255,255);">Client</span></em><span style="color:#000000;background:rgb(255,255,255);">).foreach {</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">  </span><strong><span style="background:rgb(255,255,255);">case </span></strong><span style="color:#000000;background:rgb(255,255,255);">(clientId</span><span style="color:#cc7832;background:rgb(255,255,255);">, </span><span style="color:#000000;background:rgb(255,255,255);">properties) =&gt; </span><em><span style="background:rgb(255,255,255);">dynamicConfigHandlers</span></em><span style="color:#000000;background:rgb(255,255,255);">(ConfigType.</span><em><span style="background:rgb(255,255,255);">Client</span></em><span style="color:#000000;background:rgb(255,255,255);">).processConfigChanges(clientId</span><span style="color:#cc7832;background:rgb(255,255,255);">, </span><span style="color:#000000;background:rgb(255,255,255);">properties)</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">}</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><em><span style="color:#808080;background:rgb(255,255,255);">// Create the config manager. start listening to notifications</span><span style="color:#808080;background:rgb(255,255,255);"><br></span><span style="background:rgb(255,255,255);">dynamicConfigManager </span></em><span style="color:#000000;background:rgb(255,255,255);">= </span><strong><span style="background:rgb(255,255,255);">new </span></strong><span style="color:#000000;background:rgb(255,255,255);">DynamicConfigManager(</span><em><span style="background:rgb(255,255,255);">zkUtils</span></em><span style="color:#cc7832;background:rgb(255,255,255);">, </span><em><span style="background:rgb(255,255,255);">dynamicConfigHandlers</span></em><span style="color:#000000;background:rgb(255,255,255);">)</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><em><span style="background:rgb(255,255,255);">dynamicConfigManager</span></em><span style="color:#000000;background:rgb(255,255,255);">.startup()</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);"> </span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">13,生成kafka的心跳检查处理工具,这里需要使用到listeners的配置,根据是否在IAAS的环境下,需要使用到</span><strong><span style="background:rgb(228,228,255);">advertised</span></strong><span style="color:#000000;background:rgb(255,255,255);">相关配置,</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">如果</span><strong><span style="background:rgb(228,228,255);">advertised.listeners</span></strong><span style="color:#000000;background:rgb(255,255,255);">配置项存在,直接使用配置的listener,</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">否则,如果</span><strong><span style="background:rgb(228,228,255);">advertised.host.name</span></strong><span style="color:#000000;background:rgb(255,255,255);">配置项或者</span><strong><span style="background:rgb(255,255,255);">advertised.port</span></strong><span style="color:#000000;background:rgb(255,255,255);">配置项存在,使用这两个配置项,并使用明文传输(</span><strong><span style="background:rgb(255,255,255);">PLAINTEXT://host:port</span></strong><span style="color:#000000;background:rgb(255,255,255);">),如果</span><strong><span style="background:rgb(255,255,255);">advertised.port</span></strong><span style="color:#000000;background:rgb(255,255,255);">没有配置,直接使用port的配置,host可以没有设置</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">最后,如果上面的不都满足,直接使用listeners的配置.默认是</span><strong><span style="background:rgb(255,255,255);">PLAINTEXT://:port</span></strong></p>
<p style="background:rgb(255,255,255);"><em><span style="color:#808080;background:rgb(255,255,255);">/* tell everyone we are alive */</span><span style="color:#808080;background:rgb(255,255,255);"><br></span></em><strong><span style="background:rgb(255,255,255);">val </span></strong><span style="color:#000000;background:rgb(255,255,255);">listeners = config.</span><em><span style="background:rgb(255,255,255);">advertisedListeners</span></em><span style="color:#000000;background:rgb(255,255,255);">.map {</span><strong><span style="background:rgb(255,255,255);">case</span></strong><span style="color:#000000;background:rgb(255,255,255);">(protocol</span><span style="color:#cc7832;background:rgb(255,255,255);">, </span><span style="color:#000000;background:rgb(255,255,255);">endpoint) =&gt;</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">  </span><strong><span style="background:rgb(255,255,255);">if </span></strong><span style="color:#000000;background:rgb(255,255,255);">(endpoint.port == </span><span style="background:rgb(255,255,255);">0</span><span style="color:#000000;background:rgb(255,255,255);">)</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">    (protocol</span><span style="color:#cc7832;background:rgb(255,255,255);">, </span><em><span style="color:#000000;background:rgb(255,255,255);">EndPoint</span></em><span style="color:#000000;background:rgb(255,255,255);">(endpoint.host</span><span style="color:#cc7832;background:rgb(255,255,255);">, </span><em><span style="background:rgb(255,255,255);">socketServer</span></em><span style="color:#000000;background:rgb(255,255,255);">.boundPort(protocol)</span><span style="color:#cc7832;background:rgb(255,255,255);">, </span><span style="color:#000000;background:rgb(255,255,255);">endpoint.protocolType))</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">  </span><strong><span style="background:rgb(255,255,255);">else</span><span style="background:rgb(255,255,255);"><br></span><span style="background:rgb(255,255,255);">    </span></strong><span style="color:#000000;background:rgb(255,255,255);">(protocol</span><span style="color:#cc7832;background:rgb(255,255,255);">, </span><span style="color:#000000;background:rgb(255,255,255);">endpoint)</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">}</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><em><span style="background:rgb(255,255,255);">kafkaHealthcheck </span></em><span style="color:#000000;background:rgb(255,255,255);">= </span><strong><span style="background:rgb(255,255,255);">new </span></strong><span style="color:#000000;background:rgb(255,255,255);">KafkaHealthcheck(config.</span><em><span style="background:rgb(255,255,255);">brokerId</span></em><span style="color:#cc7832;background:rgb(255,255,255);">, </span><span style="color:#000000;background:rgb(255,255,255);">listeners</span><span style="color:#cc7832;background:rgb(255,255,255);">, </span><em><span style="background:rgb(255,255,255);">zkUtils</span></em><span style="color:#000000;background:rgb(255,255,255);">)</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><em><span style="background:rgb(255,255,255);">kafkaHealthcheck</span></em><span style="color:#000000;background:rgb(255,255,255);">.startup()</span></p>
            </div>
                </div>