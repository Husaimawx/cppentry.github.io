---
layout:     post
title:      HBase学习笔记
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/Li_and_Li/article/details/80568332				</div>
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<p></p><div class="toc">
<ul>
<li><a href="#hbase%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0" rel="nofollow">HBase学习笔记</a><ul>
<li><a href="#1-hbase%E7%89%B9%E6%80%A7" rel="nofollow">1、    HBase特性</a></li>
<li><a href="#2-hbase%E8%AE%BF%E9%97%AE%E6%8E%A5%E5%8F%A3" rel="nofollow">2、    HBase访问接口</a></li>
<li><a href="#3-hbase%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B" rel="nofollow">3、    HBase数据模型</a></li>
<li><a href="#4-%E5%8C%BA%E5%9F%9F" rel="nofollow">4、    区域</a></li>
<li><a href="#5-%E5%AE%9E%E7%8E%B0" rel="nofollow">5、    实现</a></li>
<li><a href="#6-%E8%BF%90%E8%A1%8C%E4%B8%AD%E7%9A%84hbase" rel="nofollow">6、    运行中的HBase</a></li>
<li><a href="#7-hbase-shell" rel="nofollow">7、    HBase shell</a></li>
<li><a href="#8-hbase%E5%92%8Crdbms%E7%9A%84%E6%AF%94%E8%BE%83" rel="nofollow">8、    HBase和RDBMS的比较</a></li>
</ul>
</li>
</ul>
</div>


<h1 id="hbase学习笔记">HBase学习笔记</h1>

<p>是BigTable的开源实现</p>



<h2 id="1-hbase特性">1、    HBase特性</h2>

<p>高可靠，高性能，面向列，可伸缩。 <br>
  HBase–&gt;分布式数据库–&gt;可以用来存储非结构化和半结构化的松散数据 <br>
十亿行，百万列的级别 <br>
虽然已经有了HDFS和MapReduce，但是Hadoop主要解决大规模数据离线批处理，没有办法实现大数据实时处理需求的。</p>

<h2 id="2-hbase访问接口">2、    HBase访问接口</h2>

<p>提供了一个原生Java API，Shell命令，Thrift Gateway， REST Gateway <br>
提供SQL类型接口：Pig， 数据仓库Hive</p>



<h2 id="3-hbase数据模型">3、    HBase数据模型</h2>

<p>HBase是一个稀疏的多维度的排序映射表，标的索引通过（行键， 列族， 列限定符， 时间戳）定位一个数据的。每一个数据都是未经解释的字符串。</p>

<p>物理上，所有的列族成员都一起存放在文件系统中，所以，虽然HBase描述为一个面向列的存储器，但实际更加准确的说法是它是一个面向列族的存储器。由于调优和存储都是在列族这个层次上进行的，所以最好使所有列族成员都有相同的访问模式和大小特征。</p>



<h2 id="4-区域">4、    区域</h2>

<p>HBase自动把表水平划分成区域，每个区域由表中行的子集构成。每个区域由他所属的表，它所包含的第一行及其最后一行（不包括最后一行）来表示。 <br>
区域是HBase在集群上分布数据的最小单位，</p>



<h2 id="5-实现">5、    实现</h2>

<p>正如HDFS和YARN是由客户端，slave，master（即HDFS的namenode，datanode,以及YARN的资源管理器和节点管理器）组成。HBase也采用相同的模型， <br>
HBase采用master节点协调管理一个或多个regionserver。</p>



<h2 id="6-运行中的hbase">6、    运行中的HBase</h2>

<p>HBase内部保留名为hbase:meta的特殊目录表，他们维护着当前集群上所有区域的列表，状态和位置。Hbase:meta表表中使用区域名作为键。区域名（由所属的表名，区域的起始行，区域的创建时间，对其整体进行的MD5哈希值）组成。</p>



<h2 id="7-hbase-shell">7、    HBase shell</h2>



<pre class="prettyprint"><code class="language-shell hljs haskell">%hbase shell
<span class="hljs-title">hbase</span>(main):<span class="hljs-number">001</span>:<span class="hljs-number">0</span>&gt;
<span class="hljs-title">hbase</span>(main):<span class="hljs-number">001</span>:<span class="hljs-number">0</span>&gt;create ‘test’, ‘<span class="hljs-typedef"><span class="hljs-keyword">data</span>’</span>
<span class="hljs-title">hbase</span>(main):<span class="hljs-number">001</span>:<span class="hljs-number">0</span>&gt;list
<span class="hljs-title">hbase</span>(main):<span class="hljs-number">001</span>:<span class="hljs-number">0</span>&gt;put ‘test’, ‘row1’, ‘<span class="hljs-typedef"><span class="hljs-keyword">data</span>:1’,‘value1’</span>
<span class="hljs-title">hbase</span>(main):<span class="hljs-number">001</span>:<span class="hljs-number">0</span>&gt;put ‘test’, ‘row2’, ‘<span class="hljs-typedef"><span class="hljs-keyword">data</span>:2’,‘value2’</span>
<span class="hljs-title">hbase</span>(main):<span class="hljs-number">001</span>:<span class="hljs-number">0</span>&gt;get ‘test’ ‘row1’
<span class="hljs-title">hbase</span>(main):<span class="hljs-number">001</span>:<span class="hljs-number">0</span>&gt;scan ‘test’
&gt;//删除表
<span class="hljs-title">hbase</span>(main):<span class="hljs-number">001</span>:<span class="hljs-number">0</span>&gt;disable ‘test’
<span class="hljs-title">hbase</span>(main):<span class="hljs-number">001</span>:<span class="hljs-number">0</span>&gt;drop ‘test’</code></pre>

<h2 id="8-hbase和rdbms的比较">8、    HBase和RDBMS的比较</h2>

<p>HBase的特性：</p>

<ul>
<li>没有真正的索引 <br>
行是顺序存储的，每行中的列也是，所以不存在索引膨胀的问题，而且插入性能和表的大小无关</li>
<li>自动分区 <br>
 在表增长的时候，表会自动分裂成区域，并分布到可用的节点上</li>
<li>线性扩展和对于新节点的自动处理 <br>
 增加一个节点，把它指向现有集群并运行regionserver。区域自动重新进行平衡，负载均匀分布</li>
<li>普通商用硬件支持 <br>
 底层硬件廉价，RDBMS需要支持大量IO，因此要求昂贵的硬件</li>
<li>容错 <br>
 大量节点意味着每个节点的重要性并不突出，不用担心单个节点的失效</li>
<li>批处理 <br>
 MapReduce集成功能使我们可以用全并行的分布式作业根据“数据的位置”来处理他们。</li>
</ul>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>