---
layout:     post
title:      Kafka对比其他MQ
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，如需转载，请注明出处。					https://blog.csdn.net/Post_Yuan/article/details/52404417				</div>
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<p><span style="font-size:14px;">与其他MQ相比较，Kafka有一些优缺点，主要如下，</span></p>
<p><span style="font-size:14px;">优点：</span></p>
<p></p>
<ol><li><span style="font-size:14px;"><span></span>可扩展。Kafka集群可以透明的扩展，增加新的服务器进集群。</span></li><li><span style="font-size:14px;"><span></span>高性能。Kafka性能远超过传统的ActiveMQ、RabbitMQ等，Kafka支持Batch操作。</span></li><li><span style="font-size:14px;"><span></span>容错性。Kafka每个Partition数据会复制到几台服务器，当某个Broker失效时，Zookeeper将通知生产者和消费者从而使用其他的Broker。</span></li></ol><p></p>
<p><span style="font-size:14px;">缺点：</span></p>
<p></p>
<ol><li><span style="font-size:14px;"><span></span>重复消息。Kafka保证每条消息至少送达一次，虽然几率很小，但一条消息可能被送达多次。</span></li><li><span style="font-size:14px;"><span></span>消息乱序。Kafka某一个固定的Partition内部的消息是保证有序的，如果一个Topic有多个Partition，partition之间的消息送达不保证有序。</span></li><li><span style="font-size:14px;"><span></span>复杂性。Kafka需要Zookeeper的支持，Topic一般需要人工创建，部署和维护比一般MQ成本更高。</span></li></ol><div><span style="font-size:14px;"><strong>RabbitMQ</strong></span></div>
<div><span style="font-size:14px;"><strong><br></strong></span></div>
<div><span style="font-size:14px;"><span></span></span></div>
<div><span style="font-size:14px;"><span></span>遵循AMQP实现，传统的messaging queue系统实现，基于Erlang语言开发，用在对数据一致性、稳定性和可靠性要求很高的场景，对性能和吞吐量还在其次。支持协议还包括XMPP、SMTP、STOMP，是一款重量级MQ，更适合于企业级的开发。实现Broker构架，消息在发送给客户端时先在中心队列排队。对路由、负载均衡及数据持久化都有良好的支持。</span></div>
<div><span style="font-size:14px;"><br></span></div>
<div><span style="font-size:14px;"><strong>ZeroMQ</strong></span></div>
<div><span style="font-size:14px;"><br></span></div>
<div><span style="font-size:14px;">只是一个网络编程的Pattern库，将常见的网络请求形式模式化、组件化。ZeroMQ能实现RabbitMQ不擅长的高级复杂队列，但开发人员需要自己组合多种技术框架，技术复杂度是一个挑战。仅提供非持久性的队列，如果Down机，数据将丢失。</span></div>
<div><span style="font-size:14px;"><br></span></div>
<div><span style="font-size:14px;"><strong>Redis</strong></span></div>
<div><span style="font-size:14px;"><br></span></div>
<div><span style="font-size:14px;">Key-Value的NoSQL数据库，本身也支持MQ功能，可以完全当做一个轻量级的队列使用。Redis在数据量大的时候入队较慢，Redis出队则无论数据量大小性能都不错。</span></div>
<div><span style="font-size:14px;"><strong><br></strong></span></div>
<div><span style="font-size:14px;"><strong>Kafka</strong></span></div>
<div><span style="font-size:14px;"><br></span></div>
<div><span style="font-size:14px;"><span></span>LinkedIn开源的MQ系统，基于Pull的模式来处理消息消费，追求高吞吐量，一开始的目的是用于日志收集和传输，0.8开始支持复制，不支持事务，适合产生大量数据的互联网服务的数据收集业务。</span></div>
<p></p>
            </div>
                </div>