---
layout:     post
title:      Hbase API中常用类介绍和使用
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<p>Hbase API 常用类应用</p>
<p>网上Hbase的介绍有很多，案例也不少。自己写了个Demo，进行一些简单的总结。</p>
<h4>HBase 常用类介绍。</h4>
<p><span style="color:#FF0000;">JAVA API </span><span style="color:#FF0000;">和</span><span style="color:#FF0000;"> HBase</span><span style="color:#FF0000;">数据库模型之间的关系</span></p>
<table cellpadding="0" border="1" cellspacing="0" style="color:rgb(0,0,0);"><tbody><tr><td>
<p>JAVA 类</p>
</td>
<td>
<p>Hbase 数据模型</p>
</td>
</tr><tr><td>
<p>HBaseAdmin</p>
</td>
<td>
<p>数据库(database)</p>
</td>
</tr><tr><td>
<p>HBaseConfiguration</p>
</td>
</tr><tr><td>
<p>HTable</p>
</td>
<td>
<p>表(table)</p>
</td>
</tr><tr><td>
<p>HTableDescriptor</p>
</td>
<td>
<p>列族(Column Family)</p>
</td>
</tr><tr><td>
<p>Put</p>
</td>
<td>
<p>行列操作</p>
</td>
</tr><tr><td>
<p>Get</p>
</td>
</tr><tr><td>
<p>Scanner</p>
</td>
</tr></tbody></table><p> </p>
<p>下面说说JAVA API 提供的这些类的功能。和他们之间有什么样的联系。</p>
<p><span style="color:#FF0000;">1.HBaseConfiguration</span></p>
<p>关系：org.apache.hadoop.hbase.HBaseConfiguration</p>
<p>作用：通过此类可以对HBase进行配置</p>
<p>用法实例： Configuration config = HBaseConfiguration.create();</p>
<p><span style="color:#ff0000;">说明： HBaseConfiguration.create() 默认会从classpath 中查找 hbase-site.xml 中的配置信息，初始化 Configuration。</span></p>
<p><span style="color:#ff0000;">当然也可以直接通过在类中指定配置信息，如下：</span></p>
<p><span style="color:#ff0000;">conf=HBaseConfiguration.create();<br><span></span>conf.set("hbase.zookeeper.quorum", "192.168.1.221");<br><span></span>conf.set("hbase.zookeeper.property.clientPort", "3351");<br><span></span>conf.set("hbase.master", "192.168.1.221:600000");<br></span></p>
<p><span style="color:#FF0000;">2.HBaseAdmin</span></p>
<p>关系：org.apache.hadoop.hbase.client.HBaseAdmin</p>
<p>作用：提供接口关系HBase 数据库中的表信息</p>
<p>用法：HBaseAdmin admin = new HBaseAdmin(config);</p>
<p>3.HTableDescriptor</p>
<p>关系：org.apache.hadoop.hbase.HTableDescriptor</p>
<p>作用：HTableDescriptor 类包含了表的名字以及表的列族信息</p>
<p>用法：HTableDescriptor htd =new HTableDescriptor(tablename);</p>
<p>           Htd.addFamily(new HColumnDescriptor(“myFamily”));</p>
<p><span style="color:#FF0000;">4.HColumnDescriptor</span></p>
<p>关系：org.apache.hadoop.hbase.HColumnDescriptor</p>
<p>作用：HColumnDescriptor 维护列族的信息</p>
<p>用法：HTableDescriptor htd =new HTableDescriptor(tablename);</p>
<p>           Htd.addFamily(new HColumnDescriptor(“myFamily”));</p>
<p><span style="color:#FF0000;">5.HTable</span></p>
<p>关系：org.apache.hadoop.hbase.client.HTable</p>
<p>作用：HTable 和 HBase 的表通信</p>
<p>用法：HTable tab = new HTable(config,Bytes.toBytes(tablename));</p>
<p>           ResultScanner sc = tab.getScanner(Bytes.toBytes(“familyName”));</p>
<p>说明：获取表内列族 familyNme 的所有数据。</p>
<p><span style="color:#FF0000;">6.Put</span></p>
<p>关系：org.apache.hadoop.hbase.client.Put</p>
<p>作用：获取单个行的数据</p>
<p>用法：HTable table = new HTable(config,Bytes.toBytes(tablename));</p>
<p>           Put put = new Put(row);</p>
<p>           p.add(family,qualifier,value);</p>
<p>说明：向表 tablename 添加 “family,qualifier,value”指定的值。</p>
<p><span style="color:#FF0000;">7.Get</span></p>
<p>关系：org.apache.hadoop.hbase.client.Get</p>
<p>作用：获取单个行的数据</p>
<p>用法：HTable table = new HTable(config,Bytes.toBytes(tablename));</p>
<p>           Get get = new Get(Bytes.toBytes(row));</p>
<p>           Result result = table.get(get);</p>
<p>说明：获取 tablename 表中 row 行的对应数据</p>
<p><span style="color:#FF0000;">8.ResultScanner</span></p>
<p>关系：Interface</p>
<p>作用：获取值的接口</p>
<p>用法：ResultScanner scanner = table.getScanner(Bytes.toBytes(family));</p>
<p>           For(Result rowResult : scanner){</p>
<p>                   Bytes[] str = rowResult.getValue(family,column);</p>
<p>}</p>
<p>说明：循环获取行中列值。</p>
<p>下面例子使用的就是上面提供的类和接口。</p>
<p><strong><span style="color:#FF0000;">例子</span><span style="color:#FF0000;">1</span><span style="color:#FF0000;">：</span></strong></p>
<p><span style="color:rgb(63,95,191);">/**</span></p>
<p><span style="color:rgb(63,95,191);">     * </span><span style="color:rgb(63,95,191);">获取表中所有数据</span></p>
<p><span style="color:rgb(63,95,191);">     */</span></p>
<p>    <span style="color:rgb(100,100,100);">@SuppressWarnings</span>(<span style="color:rgb(42,0,255);">"unchecked"</span>)</p>
<p>    <strong><span style="color:rgb(127,0,85);">public</span><span style="color:rgb(127,0,85);">static</span></strong> List&lt;Map&gt; getDateAll(String tablename){</p>
<p>       ResultScanner rs = <strong><span style="color:rgb(127,0,85);">null</span></strong>;</p>
<p>       HTable table  = <strong><span style="color:rgb(127,0,85);">null</span></strong>;</p>
<p>       <strong><span style="color:rgb(127,0,85);">try</span></strong> {</p>
<p>           table = <strong><span style="color:rgb(127,0,85);">new</span></strong> HTable(<em><span style="color:rgb(0,0,192);">cfg</span></em>,tablename);</p>
<p>           Scan s = <strong><span style="color:rgb(127,0,85);">new</span></strong> Scan();</p>
<p>           //扫描全表，性能不佳</p>
<p>           rs = table.getScanner(s);</p>
<p>           <strong><span style="color:rgb(127,0,85);">for(Result r=rs.next();r!=null;r=rs.next()){</span>                      <span style="color:rgb(127,0,85);">for</span></strong>(KeyValue kv : r.raw()){</p>
<p>                  System.<em><span style="color:rgb(0,0,192);">out</span></em>.println(<strong><span style="color:rgb(127,0,85);">new</span></strong> String(kv.getValue()));</p>
<p>              }</p>
<p>           }</p>
<p>       } <strong><span style="color:rgb(127,0,85);">catch</span></strong> (Exception e) {</p>
<p>           <strong><span style="color:rgb(127,0,85);">return</span><span style="color:rgb(127,0,85);">null</span></strong>;</p>
<p>       }<strong><span style="color:rgb(127,0,85);">finally</span></strong>{</p>
<p>           rs.close();</p>
<p>       }</p>
<p>       <strong><span style="color:rgb(127,0,85);">return</span></strong> list;</p>
<p>    }</p>
<p>HBase是大数据的分布式数据库，当使用全表扫描肯定是不合理。下面的例子相比较例子1做些优化。</p>
<p><strong><span style="color:#FF0000;">例子</span><span style="color:#FF0000;">2</span></strong></p>
<p><span style="color:rgb(63,95,191);">/**</span></p>
<p><span style="color:rgb(63,95,191);">     * </span><span style="color:rgb(63,95,191);">指定</span><span style="color:rgb(63,95,191);">rowkey</span><span style="color:rgb(63,95,191);">的开始和结束扫描表数据</span></p>
<p><span style="color:rgb(63,95,191);">     */</span></p>
<p>    <span style="color:rgb(100,100,100);">@SuppressWarnings</span>(<span style="color:rgb(42,0,255);">"unchecked"</span>)</p>
<p>    <strong><span style="color:rgb(127,0,85);">public</span><span style="color:rgb(127,0,85);">static</span></strong> List&lt;Map&gt; getDateAll(String tablename){</p>
<p>       ... //篇幅原因省略</p>
<p>       <strong><span style="color:rgb(127,0,85);">try</span></strong> {</p>
<p>           table = <strong><span style="color:rgb(127,0,85);">new</span></strong> HTable(<em><span style="color:rgb(0,0,192);">cfg</span></em>,tablename);</p>
<p>           Scan s = <strong><span style="color:rgb(127,0,85);">new</span></strong> Scan();</p>
<p>           //通过rowkey来指定数据开始和结束，性能上较例子1高很多 </p>
<p>            s.setStartRow(Bytes.toBytes(“2012-12-22”));</p>
<p>           s.setStopRow(Bytes.toBytes(“2012-12-23”));</p>
<p>           rs = table.getScanner(s);</p>
<p>           ... //篇幅原因省略</p>
<p>       } <strong><span style="color:rgb(127,0,85);">catch</span></strong> (Exception e) {</p>
<p>           <strong><span style="color:rgb(127,0,85);">...</span></strong>//篇幅原因省略</p>
<p>    }</p>
<p>当使用扫描器 scan.setStartRow(Bytes)和scan.setStopRow(Bytes)查询的数据还不能满足结果集的话，下面的一些类就派上用场了，他就是Filter。</p>
<h4>客户端请求过滤器</h4>
<p>A.      逐一说一下Filter。</p>
<p><span style="color:#FF0000;">1.</span>       <span style="color:#FF0000;">FilterList  </span></p>
<p>FilterList 代表一个过滤器列表，过滤器间具有</p>
<p>FilterList.Operator.MUST_PASS_ALL 和</p>
<p>FilterList.Operator.MUST_PASS_ONE 的关系，下面展示一个过滤器的 “或”关系。</p>
<p>下面FilterList 列表中检查同一属性的'value1' 或'value2' 。</p>
<div style="background:rgb(238,238,238);">
<p>FilterList list = new FilterList(<span style="color:#FF0000;">FilterList.Operator.MUST_PASS_ONE</span>);</p>
<p>SingleColumnValueFilter filter1 = new SingleColumnValueFilter(Bytes.toBytes(“cfamily”), Bytes.toBytes(“column”),CompareOp.EQUAL,Bytes.toBytes("value1"));</p>
<p>list.add(filter1);</p>
<p>SingleColumnValueFilter filter2 = new SingleColumnValueFilter(Bytes.toBytes(“cfamily”), Bytes.toBytes(“column”), CompareOp.EQUAL, Bytes.toBytes("value2"));</p>
<p>List.add(filter2);</p>
</div>
<p> </p>
<p><span style="color:#FF0000;">2.</span>       <span style="color:#FF0000;">SingleColumnValueFilter   </span></p>
<p>SingleColumnValueFilter 用于测试列值相等 (CompareOp.EQUAL ), 不等(CompareOp.NOT_EQUAL),或范围 (e.g., CompareOp.GREATER). 下面示例检查列值和字符串'my values' 相等...</p>
<div style="background:rgb(238,238,238);">
<pre>SingleColumnValueFilter filter = new SingleColumnValueFilter(Bytes.toBytes(“cFamily”), Bytes.toBytes(“column”), CompareOp.EQUAL, Bytes.toBytes("values"));</pre>
<pre>scan.setFilter(filter);</pre>
</div>
<p><span style="color:#FF0000;">3.</span>       <span style="color:#FF0000;">ColumnPrefixFilter</span></p>
<p>ColumnPrefixFilter 用于指定列名前缀值相等</p>
<div style="background:rgb(238,238,238);">
<pre>Byte[] prefix = Bytes.toBytes(“values”);</pre>
<pre>Filter f = new ColumnPrefixFilter(prefix);</pre>
<pre>scan.setFilter(f);</pre>
</div>
<p><span style="color:#FF0000;">4.</span>       <span style="color:#FF0000;">MultipleColumnPrefixFilter</span></p>
<p>MultipleColumnPrefixFilter 和 ColumnPrefixFilter 行为差不多，但可以指定多个前缀。</p>
<div style="background:rgb(238,238,238);">
<pre>byte[][] prefixes = new byte[][] {Bytes.toBytes("value1"), Bytes.toBytes("value2")};</pre>
<pre>Filter f = new MultipleColumnPrefixFilter(prefixes);</pre>
<pre>scan.setFilter(f);</pre>
</div>
<p><span style="color:#FF0000;">5.</span>       <span style="color:#FF0000;">QualifierFilter</span></p>
<p>QualifierFilter 是基于列名的过滤器。</p>
<div style="background:rgb(238,238,238);">
<pre>Filter f = new QualifierFilter(“QualifierName”);</pre>
<pre>scan.setFilter(f);</pre>
</div>
<p><span style="color:#FF0000;">6.</span>       <span style="color:#FF0000;">RowFilter</span></p>
<p>RowFilter 是rowkey过滤器,通常根据rowkey来指定范围时，使用scan扫描器的StartRow和StopRow 方法比较好。Rowkey也可以使用。</p>
<div style="background:rgb(238,238,238);">
<pre>Filter f = new RowFilter(“rowkey”);</pre>
<pre>scan.setFilter(f);</pre>
</div>
<p>B.比较器</p>
<p><span style="color:#FF0000;">7.</span>       <span style="color:#FF0000;">RegexStringComparator</span></p>
<p>RegexStringComparator 是支持正则表达式的比较器。</p>
<p>过滤器配合上比较器会很方便。看下面的代码。</p>
<p>解释一下：代码中绿色字体标注的代码就是正则比较器的使用方法。参数 reg 就是正则验证的规则。</p>
<div style="background:rgb(238,238,238);">
<pre>HTable table = new HTable(cfg,"datainfo");</pre>
<pre>Scan scan = new Scan();</pre>
<pre>String reg = "^136([0-9]{8})$";//满足136开头的手机号</pre>
<pre><span style="color:#FF0000;">RowFilter filter = new RowFilter(CompareOp.EQUAL, </span></pre>
<pre><span style="color:rgb(0,176,80);">new RegexStringComparator(reg)</span><span style="color:#FF0000;">);</span></pre>
<pre>scan.setFilter(filter);</pre>
<pre>ResultScanner rs = table.getScanner(scan);</pre>
<pre>for(Result rr : rs){</pre>
<pre>for(KeyValue kv : rr.raw()){</pre>
<pre>         ...</pre>
<pre>}</pre>
<pre>}</pre>
</div>
<p><span style="color:#FF0000;">8.</span>       <span style="color:#FF0000;">SubstringComparator</span></p>
<p>SubstringComparator 用于检测一个子串是否存在于值中。大小写不敏感。</p>
<div style="background:rgb(238,238,238);">
<pre>//检测values 是否存在于查询的列值中</pre>
<pre>SubstringComparator comp = new SubstringComparator("values");</pre>
<pre>SingleColumnValueFilter filter = new SingleColumnValueFilter(Bytes.toBytes(“family”), Bytes.toBytes(“column”),CompareOp.EQUAL, Bytes.toBytes(“value”));</pre>
<pre>scan.setFilter(filter);</pre>
</div>
            </div>
                </div>