---
layout:     post
title:      kafka简介
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<h4 id="kafka是什么">kafka是什么</h4>

<ul>
<li>Apache Kafka 是一个开源消息系统，由scala写成。最初是由Linkedln公司开发，于2011年开源。</li>
<li><strong>Kafka是一个分布式消息队列</strong> Kafka对消息保存时根据Topic进行归类，发送消息者称为Producer，消息接受者称为Consumer，此外kafka集群有多个kafka实例组成，每个实例(server)成为broker。</li>
<li>无论是kafka集群，还是producer和consumer都依赖于<strong>zookeeper</strong>集群保存一些meta信息，来保证系统可用性。</li>
</ul>

<h4 id="消息系统分类">消息系统分类</h4>



<h5 id="peer-to-peer">Peer-to-Peer</h5>

<p><img src="https://img-blog.csdn.net/2018080820315526?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIzMjI5NTkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述" title=""></p>

<h6 id="特点">特点</h6>

<ul>
<li>一般基于Pull或者Polling接收消息</li>
<li>发送到队列中的消息被一个而且仅仅一个接收者所接收，即使有多个接收者在同一个队列中侦听同意消息</li>
<li>既支持异步“即发即弃”的消息传送方式，也支持同步请求/应答传送方式</li>
</ul>



<h5 id="发布订阅">发布/订阅</h5>

<p><img src="https://img-blog.csdn.net/20180808203213427?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIzMjI5NTkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述" title=""></p>

<h6 id="特点-1">特点</h6>

<ul>
<li>发布到一个主题的消息，可被多个订阅这所接收</li>
<li>发布/订阅既可基于Push消费数据，也可基于Pull或者Polling消费数据</li>
<li>解耦能力比P2P模型更强</li>
</ul>



<h4 id="消息系统适用场景">消息系统适用场景</h4>

<ul>
<li><strong>解耦</strong>    各位系统之间通过消息系统这个统一的接口交换数据，无须了解彼此的存在</li>
<li><strong>冗余</strong>    部分消息系统具有消息持久化能力，可规避消息处理前丢失的风险</li>
<li><strong>扩展</strong>    消息系统是统一的数据接口，各系统可独立扩展</li>
<li><strong>峰值处理能力消息</strong>      系统可顶住峰值流量，业务系统可根据处理能力从消息系统中获取并处理对应量的请求</li>
<li><strong>可恢复性</strong>  系统中部分组件失效并不会影响整个系统，它恢复后仍然可从消息系统中获取并处理数据</li>
<li><strong>异步通信</strong>  在不需要立即处理请求的场景下，可以将请求放入消息系统，合适的时候再处理</li>
</ul>



<h4 id="常用消息系统对比">常用消息系统对比</h4>

<ul>
<li><strong>RabbitMQ</strong> Erlang编写，支持多协议 AMQP，XMPP，SMTP，STOMP。支持负载均衡、数据持久化。同时</li>
</ul>

<p>支持Peer-to-Peer和发布/订阅模式</p>

<ul>
<li><strong>Redis</strong> 基于Key-Value对的NoSQL数据库，同时支持MQ功能，可做轻量级队列服务使用。就入队操作而言，</li>
</ul>

<p>Redis对短消息（小于10KB）的性能比RabbitMQ好，长消息的性能比RabbitMQ差。</p>

<ul>
<li><strong>ZeroMQ</strong>    轻量级，不需要单独的消息服务器或中间件，应用程序本身扮演该角色，Peer-to-Peer。它实质上是一个库，需要开发人员自己组合多种技术，使用复杂度高</li>
<li><strong>ActiveMQ</strong> JMS实现，Peer-to-Peer，支持持久化、XA事务</li>
<li><strong>Kafka/Jafka</strong> 高性能跨语言的分布式发布/订阅消息系统，数据持久化，全分布式，同时支持在线和离线处理</li>
<li><strong>MetaQ/RocketMQ</strong> 纯Java实现，发布/订阅消息系统，支持本地事务和XA分布式事务</li>
</ul>



<h4 id="kafka设计目标">kafka设计目标</h4>

<ul>
<li>高吞吐率 在廉价的商用机器上单机可支持每秒100万条消息的读写</li>
<li>消息持久化 所有消息均被持久化到磁盘，无消息丢失，支持消息重放</li>
<li>完全分布式 Producer， Broker， Consumer均支持水平扩展</li>
<li>同时适应在线流处理和离线批处理</li>
</ul>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>