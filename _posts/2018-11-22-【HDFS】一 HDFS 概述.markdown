---
layout:     post
title:      【HDFS】一 HDFS 概述
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<p><strong>1.1 HDFS 产生背景</strong></p>
<p>随着数据量越来越大，在一个操作系统管辖的范围内存不下了，那么就分配到更多的操作系统管理的磁盘中，但是不方便管理和维护，迫切需要一种系统来管理多台机器上的文件，这就是分布式文件管理系统。HDFS 只是分布式文件管理系统中的一种。</p>
<p><strong>1.2 HDFS 概念</strong></p>
<p>HDFS，它是一个文件系统，用于存储文件，通过目录树来定位文件；<br>
其次，它是分布 式的，由很多服务器联合起来实现其功能，集群中的服务器有各自的角色。<br>
HDFS 的设计适合一次写入，多次读出的场景，且不支持文件的修改。适合用来做数据 分析，并不适合用来做网盘应用。</p>
<p><strong>1.3 HDFS 优缺点</strong></p>
<p>1.3.1 优点</p>
<ol>
<li>
<p>高容错性</p>
<ul>
<li>数据自动保存多个副本。它通过增加副本的形式，提高容错性；</li>
<li>某一个副本丢失以后，它可以自动恢复。</li>
</ul>
</li>
<li>
<p>适合大数据处理</p>
<ul>
<li>数据规模：能够处理数据规模达到 GB、TB、甚至 PB 级别的数据；</li>
<li>文件规模：能够处理百万规模以上的文件数量，数量相当之大。</li>
</ul>
</li>
<li>
<p>流式数据访问，它能保证数据的一致性。</p>
</li>
<li>
<p>可构建在廉价机器上，通过多副本机制，提高可靠性。可构建在廉价机器上，通过多副本机制，提高可靠性。</p>
</li>
</ol>
<p>1.3.2 缺点</p>
<ol>
<li>
<p>不适合低延时数据访问，比如毫秒级的存储数据，是做不到的。</p>
</li>
<li>
<p>无法高效的对大量小文件进行存储。</p>
<ul>
<li>存储大量小文件的话，它会占用 NameNode 大量的内存来存储文件、目录和块信 息。这样是不可取的，因为NameNode 的内存总是有限的；</li>
<li>小文件存储的寻址时间会超过读取时间，它违反了HDFS 的设计目标。</li>
</ul>
</li>
<li>
<p>并发写入、文件随机修改。</p>
<ul>
<li>一个文件只能有一个写，不允许多个线程同时写；</li>
<li>仅支持数据 append（追加），不支持文件的随机修改。</li>
</ul>
</li>
</ol>
<p><strong>1.4 HDFS 组成架构</strong></p>
<p><img src="https://img-blog.csdnimg.cn/20181103203846253.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NvdXJjZV8wMA==,size_16,color_FFFFFF,t_70" alt="HDFS 的架构图"><br>
这种架构主要由四个部分组成，分别为 HDFS Client、NameNode、DataNode 和 Secondary NameNode。下面我们分别介绍这四个组成部分。</p>
<p><font color="#FF4500" size="4" face="黑体">1、Client：就是客户端。</font></p>
<ul>
<li>文件切分。文件上传HDFS 的时候，Client 将文件切分成一个一个的 Block，然后 进行存储；</li>
<li>与NameNode 交互，获取文件的位置信息；</li>
<li>与DataNode 交互，读取或者写入数据；</li>
<li>Client 提供一些命令来管理HDFS，比如启动或者关闭 HDFS；</li>
<li>Client 可以通过一些命令来访问HDFS；</li>
</ul>
<p><font color="#48D1CC" size="4" face="黑体">2、NameNode：就是 Master，它是一个主管、管理者。</font></p>
<ul>
<li>管理 HDFS 的名称空间；</li>
<li>管理数据块（Block）映射信息；</li>
<li>配置副本策略；</li>
<li>处理客户端读写请求。</li>
</ul>
<p><font color="#7FFF00" size="4" face="黑体">3、 DataNode：就是 Slave。NameNode 下达命令，DataNode 执行实际的操作</font></p>
<ul>
<li>存储实际的数据块；</li>
<li>执行数据块的读/写操作。</li>
</ul>
<p><font color="#B22222" size="4" face="黑体">4、Secondary NameNode：并非 NameNode 的热备。当 NameNode 挂掉的时候，它并不能马 上替换 NameNode 并提供服务。</font></p>
<ul>
<li>辅助 NameNode，分担其工作量；</li>
<li>定期合并 Fsimage 和 Edits，并推送给 NameNode；</li>
<li>在紧急情况下，可辅助恢复NameNode。</li>
</ul>
<p><strong>1.5 HDFS 文件块大小</strong></p>
<p>HDFS 中的文件在物理上是分块存储（block），块的大小可以通过配置参数( dfs.blocksize) 来规定，默认大小在 hadoop2.x 版本中是 128M，老版本中是 64M。<br>
HDFS 的块比磁盘的块大，其目的是为了最小化寻址开销。如果块设置得足够大，从磁盘传输数据的时间会明显大于定位这个块开始位置所需的时间。因而 ，传输一个由多个块组成的文件的时间取决于磁盘传输速率。<br>
如果寻址时间约为 10ms，而 传输速率为 100MB/s，为了使寻址时间仅占传输时间的1%， 我们要将块大小设置约为 100MB。默认的块大小 128MB。<br>
块的大小：10ms<em>100</em>100M/s = 100M<br>
<img src="https://img-blog.csdnimg.cn/20181103204950338.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NvdXJjZV8wMA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>块设置太小，会增加寻址时间，程序一直在找快开始的位置；<br>
块太大，从磁盘传输数据的时间会明显大于定位这个快开始的位置所需时间，导致程序一直在处理数据，会非常慢。<br>
总结：HDFS块的大小设置主要取决于磁盘的传输速率。</p>

            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>