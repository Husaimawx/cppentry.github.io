---
layout:     post
title:      flume总结
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                <p><img alt="" class="has" height="185" src="https://img-blog.csdn.net/2018101911164133?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NDg0NzM0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="456"></p>

<p>source：采集数据</p>

<p>channel：缓冲区，如果不用channel可能导致source中数据过大而瘫痪。</p>

<p>sink：读取缓冲区数据，读取完删除该数据。</p>

<p>三者用Event类型来交互数据</p>

<p></p>

<p></p>

<p>flume安全问题：flume链式集成</p>

<p></p>

<p><img alt="" class="has" height="365" src="https://img-blog.csdn.net/20181019111641362?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NDg0NzM0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="667"></p>

<p>配置：                            </p>

<p> </p>

<p><img alt="" class="has" height="300" src="https://img-blog.csdn.net/20181019111641225?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NDg0NzM0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="331"></p>

<p> </p>

<p> </p>

<p>*flume的版本区别</p>

<p>flume特点</p>

<p>1.采集大量的log数据</p>

<p>2.高可靠性高效性和高可用性</p>

<p>3.分布式</p>

<p>4.不仅可以采集转移数据，还可以对数据进行初级的处理操作（对数据的简单清洗可以由flume来完成）</p>

<p> </p>

<p> </p>

<p>*flume-ng的架构组件</p>

<p>一个flume的服务节点被称作一个agent，一个agent里面包含：</p>

<p>source</p>

<p>channel</p>

<p>sink</p>

<p>三种组件之间通过Event来交互数据(Event由两部分构成：header和body，header里面放多个kv对，body存放字节数组（被采集的正式数据被封装在body里面）)</p>

<p> </p>

<p>一个source可以对接多个channel</p>

<p>一个sink只能对接一个channel</p>

<p> </p>

<p> </p>

<p>flume的agent之间可以链式集成</p>

<p> </p>

<p> </p>

<p> </p>

<p>从网络端口上采集数据，并把数据显示在log控制台</p>

<p>source：netcat 类型</p>

<p>sink：logger 类型</p>

<p>channel：Memory 类型</p>

<p> </p>

<p> </p>

<p>*flume的开发过程</p>

<p>1.选择source、channel、sink的类型</p>

<p>2.创建配置文件</p>

<p>3.声明agent、source、channel、sink的名称</p>

<p>4.各自配置source、channel、sink的参数</p>

<p>5.把source、channel、sink连接起来</p>

<p> </p>

<p>flume-ng agent -c conf -f netcat_to_logger.conf --name a</p>

<p> </p>

<p>telnet centos1 8888</p>

<p> </p>

<p>yum install telnet.x86_64</p>

<p> </p>

<p>*flume的source和sink的类型</p>

<p>source：Avro Source：监听在agent的某个网络端口上等待接受数据并且采集，网络协议是avro的协议</p>

<p>                     当配置agent链式集成的时候一般用avro类型的source</p>

<p>        Spooling Directory Source：监听一个文件夹，当这个文件夹下有新的文件放入进来的时候，采集这个文件的内容作为数据内容</p>

<p>                                   限制1，文件进入到被监听文件夹后就不允许再被编辑了</p>

<p>                                   限制2，文件夹放入的文件不能重名</p>

<p> </p>

<p>        Taildir Source：监听多个文件，当这些文件中有新的内容出现时，会近实时的被flume采集，新增的内容就是被采集的内容</p>

<p>        Kafka Source：从kafka里获取数据，作为采集内容</p>

<p>        NetCat source：测试时常用，和avro source的采集过程类似，只不过是采用tcp或udp协议来传输被采集的数据</p>

<p>sink：HDFS Sink：把采集到的数据存放到hdfs上</p>

<p>      Hive Sink：把采集到的数据存放到hive中        </p>

<p>      HBaseSinks：把数据采集到hbase中</p>

<p>      Kafka Sink：把采集到的数据存放到kafka中</p>

<p>      Avro Sink：把数据以avro的协议发送出去，一般用于链式集成多个agent的场景下</p>

<p>      Logger Sink：用来测试和调试</p>

<p>      </p>

<p>channel：Memory Channel 效率高速度快 但数据可能会丢失</p>

<p>         Kafka Channel  效率高速度快，数据不会丢失，配置比较复杂</p>

<p>         File Channel 效率低会有磁盘io，但是数据不会丢失</p>

<p>         JDBC Channel   把数据放入数据库中</p>

<p>         </p>

<p> </p>

<p> </p>

<p> </p>

<p>Exec Source 接受unix的指令执行的标准输出结果作为采集的数据内容</p>

<p>            如：cat [named pipe]</p>

<p>                tail -F [file]</p>

<p>JMS Source  从消息队列中采集数据内容</p>

<p>            activemq等</p>

<p> </p>

<p>Sequence Generator Source 产生序列模拟数据</p>

<p>Syslog Sources 采集系统日志</p>

<p> </p>

<p> </p>

<p>1.从目录中监听新文件，把新文件数据采集到hdfs上</p>

<p>source：Spooling Directory Source</p>

<p>sink：HDFS Sink</p>

<p>channel：Memory Channel</p>

<p> </p>

<p>魔数</p>

<p>coffee</p>

<p>seq</p>

<p> </p>

<p>1.定义avrosource接受avro客户端发送的数据，然后把数据打印在控制台</p>

<p>source：avro source</p>

<p>sink：logger</p>

<p>channel：Memory Channel</p>

<p> </p>

<p> </p>

<p>*avro客户端开发</p>

<p>1.使用RpcClientFactory来构建RpcClient实例</p>

<p>2.使用EventBuilder来构建Event的实例</p>

<p>3.使用RpcClient的append方法来发送Event给avro source</p>

<p> </p>

<p>1.当客户端持续高速发送event给一个avro source的时候他是否可以承载</p>

<p>avro source对数据采集要使用分布式的方式来采集</p>

<p>在客户端方需要使用负载均衡的方式来把数据发送到服务端</p>

<p>使用：LoadBalancing RPC client</p>

<p>2.当服务端失败的时候，客户端就会直接报错，导致数据无法发送</p>

<p>avro source对数据的采集要使用分布式</p>

<p>客户端可以采用：Failover Client客户端来发送数据到服务端</p>

<p> </p>

<p>定义avrosource接受avro客户端发送的数据，然后把数据打印在控制台</p>

<p>failover 客户端开发</p>

<p>1.需要2个agent运行在两个节点上</p>

<p>2.RpcClient需要定义成failover类型的客户端</p>

<p>3.定义event，发送event。。。</p>

<p> </p>

<p>定义loadbalanceing的客户端</p>

<p>1.需要至少2个agent运行在不同的节点上</p>

<p>2.RpcClient需要定义成loadbalanceing的客户端</p>

<p>  创建配置文件，添加内容：</p>

<p>  client.type = default_loadbalance</p>

<p>  hosts = h1 h2</p>

<p>  hosts.h1=centos1:8888</p>

<p>  hosts.h2=centos2:8888</p>

<p>  host-selector = round_robin</p>

<p>3.使用上述配置创建rpcclient</p>

<p>4.启动两个agent，启动客户端，查看两个agent上接收到的数据内容</p>

<p> </p>

<p>*flume的source</p>

<p>source上有两个组件：</p>

<p>selector：选择器（分类）</p>

<p>interceptor：拦截器(处理和过滤)</p>

<p>selector和interceptor的位置在source之后和channel之前</p>

<p>selector的作用就是决定source中的一个event该进入哪些channel。</p>

<p>selector有两种类型：</p>

<p>    1.replicating： 每个对接source的channel都会接到相同的并且重复的event数据</p>

<p>     2.multiplexing： 一个event，只能进入一个channel，有selector的参数来决定应该进入那个channel</p>

<p> </p>

<p>interceptor的类型：</p>

<p>    Timestamp Interceptor：给event的header上添加一个key=timestamp,value=时间戳的一个kv对</p>

<p>    Host Interceptor：给event的header上添加一个key=host，value等于当前主机host名称的一个kv对</p>

<p>    Search and Replace Interceptor 根据正则表达式来匹配查找event的body转换成字符串后的内容，匹配上会后用新的内容来替换。</p>

<p> </p>

<p>*自定义拦截器</p>

<p>自定义拦截器的实现步骤：</p>

<p>1.先定义一个类实现org.apache.flume.interceptor.Interceptor接口</p>

<p>2.在这个接口里面主要实现这里面的两个interceptor方法，intercept方法</p>

<p>3.在自定义的interceptor类里面，定义一个名称为Builder的内部类实现Interceptor.Builder，在Builder内部类里面实现Interceptor的初始化过程</p>

<p>4.把项目打成jar包，放入flume的agent运行的classpath下</p>

<p>5.在flume的conf配置文件里让interceptor的type指向我们自定义的interceptor类</p>

<p> </p>

<p>~~~~~~ 最近不忙，闲下来总结的，有错误的还希望各位同行指点，主要是给自己做记录。</p>            </div>
                </div>