---
layout:     post
title:      Hadoop的数据分析引擎：Hive
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                数据分析的引擎：<br>1、Hive  ---&gt; 属于Hadoop，支持SQL<br>   Pig   ---&gt; 属于Hadoop，支持PigLatin<br>   <br>2、Spark SQL ---&gt; 类似Hive，支持SQL和DSL<br><p>3、（了解）Impala</p><p>一、什么是Hive？<br><span style="white-space:pre;">	</span>1、Hive是一个翻译器，SQL ---&gt; Hive引擎  ---&gt; MR程序<br><span style="white-space:pre;">	</span>2、Hive是构建在HDFS上的一个数据仓库（Data Warehouse）<br><span style="white-space:pre;">			</span>Hive       HDFS<br><span style="white-space:pre;">			</span>表         目录<br><span style="white-space:pre;">			</span>分区       目录<br><span style="white-space:pre;">			</span>数据       文件<br><span style="white-space:pre;">			</span>桶         文件<br><span style="white-space:pre;">			</span><br><span style="white-space:pre;">	</span>3、Hive支持SQL（SQL99标准的一个自子集）<br><br><br>二、Hive的体系结构（画图）<br><img src="https://img-blog.csdn.net/20180505152413116" alt=""><br><br>三、安装和配置<br><span style="white-space:pre;">	</span>tar -zxvf apache-hive-2.3.0-bin.tar.gz -C ~/training/<br><span style="white-space:pre;">	</span>设置环境变量 <br><span style="white-space:pre;">		</span>HIVE_HOME=/root/training/apache-hive-2.3.0-bin<br><span style="white-space:pre;">		</span>export HIVE_HOME<br><span style="white-space:pre;">		</span>PATH=$HIVE_HOME/bin:$PATH<br><span style="white-space:pre;">		</span>export PATH<br><span style="white-space:pre;">	</span>核心配置文件: conf/hive-site.xml<br><span style="white-space:pre;">	</span>1、嵌入模式<br><span style="white-space:pre;">		</span>(*)不需要MySQL的支持，使用Hive的自带的数据库Derby<br><span style="white-space:pre;">		</span>(*)局限：只支持一个连接<br><span style="white-space:pre;">			</span>&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;<br><span style="white-space:pre;">			</span>&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?&gt;<br><span style="white-space:pre;">			</span>&lt;configuration&gt;<br><span style="white-space:pre;">			</span>&lt;property&gt;<br><span style="white-space:pre;">			</span>   &lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;<br><span style="white-space:pre;">			</span>   &lt;value&gt;jdbc:derby:;databaseName=metastore_db;create=true&lt;/value&gt;<br><span style="white-space:pre;">			</span>&lt;/property&gt;<br><span style="white-space:pre;">			</span>&lt;property&gt;<br><span style="white-space:pre;">			</span>   &lt;name&gt;javax.jdo.option.ConnectionDriverName&lt;/name&gt;<br><span style="white-space:pre;">			</span>   &lt;value&gt;org.apache.derby.jdbc.EmbeddedDriver&lt;/value&gt;<br><span style="white-space:pre;">			</span>&lt;/property&gt;<br><span style="white-space:pre;">			</span>&lt;property&gt;<br><span style="white-space:pre;">			</span>   &lt;name&gt;hive.metastore.local&lt;/name&gt;<br><span style="white-space:pre;">			</span>   &lt;value&gt;true&lt;/value&gt;<br><span style="white-space:pre;">			</span>&lt;/property&gt;<br><span style="white-space:pre;">			</span>&lt;property&gt;<br><span style="white-space:pre;">			</span>   &lt;name&gt;hive.metastore.warehouse.dir&lt;/name&gt;<br><span style="white-space:pre;">			</span>   &lt;value&gt;file:///root/training/apache-hive-2.3.0-bin/warehouse&lt;/value&gt;<br><span style="white-space:pre;">			</span>&lt;/property&gt;<br><br><span style="white-space:pre;">			</span>&lt;/configuration&gt;<br><span style="white-space:pre;">			</span>初始化Derby数据库<br><span style="white-space:pre;">			</span>schematool -dbType derby -initSchema<br><span style="white-space:pre;">			</span>日志<br><span style="white-space:pre;">			</span>Hive-on-MR is deprecated in Hive 2 and may not be available in the future versions. Consider using a different execution engine (i.e. spark, tez) or using Hive 1.X releases.<br><span style="white-space:pre;">	</span><br><span style="white-space:pre;">	</span>2、本地模式、远程模式：需要MySQL<br><span style="white-space:pre;">		</span>（*）MySQL的客户端： mysql front  http://www.mysqlfront.de/<br><span style="white-space:pre;">		</span>（*）重新创建hive-site.xml<br><span style="white-space:pre;">				</span>&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;<br><span style="white-space:pre;">				</span>&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?&gt;<br><span style="white-space:pre;">				</span>&lt;configuration&gt;<br><span style="white-space:pre;">				</span>&lt;property&gt;<br><span style="white-space:pre;">				</span>   &lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;<br><span style="white-space:pre;">				</span>   &lt;value&gt;jdbc:mysql://localhost:3306/hive?useSSL=false&lt;/value&gt;<br><span style="white-space:pre;">				</span>&lt;/property&gt;<br><span style="white-space:pre;">				</span>&lt;property&gt;<br><span style="white-space:pre;">				</span>   &lt;name&gt;javax.jdo.option.ConnectionDriverName&lt;/name&gt;<br><span style="white-space:pre;">				</span>   &lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt;<br><span style="white-space:pre;">				</span>&lt;/property&gt;<br><span style="white-space:pre;">				</span>&lt;property&gt;<br><span style="white-space:pre;">				</span>   &lt;name&gt;javax.jdo.option.ConnectionUserName&lt;/name&gt;<br><span style="white-space:pre;">				</span>   &lt;value&gt;hiveowner&lt;/value&gt;<br><span style="white-space:pre;">				</span>&lt;/property&gt;<br><span style="white-space:pre;">				</span>&lt;property&gt;<br><span style="white-space:pre;">				</span>   &lt;name&gt;javax.jdo.option.ConnectionPassword&lt;/name&gt;<br><span style="white-space:pre;">				</span>   &lt;value&gt;Welcome_1&lt;/value&gt;<br><span style="white-space:pre;">				</span>&lt;/property&gt;<br><span style="white-space:pre;">				</span>&lt;/configuration&gt;<br><span style="white-space:pre;">		</span>（*）将mysql的jar包放到lib目录下<br><span style="white-space:pre;">		</span>      注意一定要使用高版本的MySQL驱动（5.1.43以上的版本）<span style="white-space:pre;">	</span>  <br><span style="white-space:pre;">		</span>（*）初始化MySQL<span style="white-space:pre;">	</span><br><span style="white-space:pre;">			</span>（*）老版本：当第一次启动HIve的时候 自动进行初始化<br><span style="white-space:pre;">			</span>（*）新版本：schematool -dbType mysql -initSchema<br><span style="white-space:pre;">					</span>Starting metastore schema initialization to 2.3.0<br><span style="white-space:pre;">					</span>Initialization script hive-schema-2.3.0.mysql.sql<br><span style="white-space:pre;">					</span>Initialization script completed<br><span style="white-space:pre;">					</span>schemaTool completed<br>四、Hive的数据模型（最重要的内容） ----&gt; 注意：默认：列的分隔符是tab键（制表符）<br><span style="white-space:pre;">	</span>测试数据：员工表和部门表<br><span style="white-space:pre;">	</span>7654,MARTIN,SALESMAN,7698,1981/9/28,1250,1400,30<br><span style="white-space:pre;">	</span>1、内部表：相当于MySQL的表  对应的HDFS的目录  /user/hive/warehouse<br><span style="white-space:pre;">			</span>create table emp<br><span style="white-space:pre;">			</span>(empno int,<br><span style="white-space:pre;">			</span>ename string,<br><span style="white-space:pre;">			</span>job string,<br><span style="white-space:pre;">			</span>mgr int,<br><span style="white-space:pre;">			</span>hiredate string,<br><span style="white-space:pre;">			</span>sal int,<br><span style="white-space:pre;">			</span>comm int,<br><span style="white-space:pre;">			</span>deptno int);<br><span style="white-space:pre;">		</span>插入数据 insert、load语句（从某个HDFS的目录或者本地Linux的目录上，把数据导入Hive的表 本质ctrl+x）<br><span style="white-space:pre;">		</span>load data inpath '/scott/emp.csv' into table emp;    导入HDFS的数据<br><span style="white-space:pre;">		</span>load data local inpath '/root/temp/*****' into table emp;    导入本地Linux的数据<br><span style="white-space:pre;">		</span><br><span style="white-space:pre;">		</span>创建表的时候，一定指定分隔符<br><span style="white-space:pre;">			</span>create table emp1<br><span style="white-space:pre;">			</span>(empno int,<br><span style="white-space:pre;">			</span>ename string,<br><span style="white-space:pre;">			</span>job string,<br><span style="white-space:pre;">			</span>mgr int,<br><span style="white-space:pre;">			</span>hiredate string,<br><span style="white-space:pre;">			</span>sal int,<br><span style="white-space:pre;">			</span>comm int,<br><span style="white-space:pre;">			</span>deptno int)<br><span style="white-space:pre;">			</span>row format delimited fields terminated by ',';<span style="white-space:pre;">		</span><br><span style="white-space:pre;">		</span>创建部门表  并且导入数据<br><span style="white-space:pre;">			</span>create table dept<br><span style="white-space:pre;">			</span>(deptno int,<br><span style="white-space:pre;">			</span>dname string,<br><span style="white-space:pre;">			</span>loc string)<br><span style="white-space:pre;">			</span>row format delimited fields terminated by ',';<span style="white-space:pre;">	</span><br><span style="white-space:pre;">	</span><br><span style="white-space:pre;">	</span>2、分区表: 可以提高查询的效率的----&gt; 通过查看SQL的执行计划<br><span style="white-space:pre;">		</span>根据员工的部门号创建分区<br><span style="white-space:pre;">			</span>create table emp_part<br><span style="white-space:pre;">			</span>(empno int,<br><span style="white-space:pre;">			</span>ename string,<br><span style="white-space:pre;">			</span>job string,<br><span style="white-space:pre;">			</span>mgr int,<br><span style="white-space:pre;">			</span>hiredate string,<br><span style="white-space:pre;">			</span>sal int,<br><span style="white-space:pre;">			</span>comm int)<br><span style="white-space:pre;">			</span>partitioned by (deptno int)<br><span style="white-space:pre;">			</span>row format delimited fields terminated by ',';<br><span style="white-space:pre;">	</span><br><span style="white-space:pre;">		</span>指明导入的数据的分区（通过子查询导入数据） ----&gt; MapReduce程序<br><span style="white-space:pre;">			</span>insert into table emp_part partition(deptno=10) select empno,ename,job,mgr,hiredate,sal,comm from emp1 where deptno=10;<br><span style="white-space:pre;">			</span>insert into table emp_part partition(deptno=20) select empno,ename,job,mgr,hiredate,sal,comm from emp1 where deptno=20;<br><span style="white-space:pre;">			</span>insert into table emp_part partition(deptno=30) select empno,ename,job,mgr,hiredate,sal,comm from emp1 where deptno=30;<br></p><p><br></p><p>3、外部表：参考讲义P47<br><span style="white-space:pre;">			</span>create external table students_ext<br><span style="white-space:pre;">			</span>(sid int,sname string,age int)<br><span style="white-space:pre;">			</span>row format delimited fields terminated by ','<br><span style="white-space:pre;">			</span>location '/students1';<br><span style="white-space:pre;">			</span><br><span style="white-space:pre;">			</span>补充点知识：Oracle数据库中的外部表<br><span style="white-space:pre;">						</span>数据有两种加载方式<br><span style="white-space:pre;">						</span>（1）SQL*Loader<br><span style="white-space:pre;">						</span>（2）数据泵 Data Pump<br><span style="white-space:pre;">		</span><br><span style="white-space:pre;">	</span>4、桶表: 桶是一个文件<br><span style="white-space:pre;">		</span>(*) 复习：hash分区<br><span style="white-space:pre;">		</span>(*) 举例：创建一个桶表，根据员工的职位（job）进行分桶<br><span style="white-space:pre;">			</span>create table emp_bucket<br><span style="white-space:pre;">			</span>(empno int,<br><span style="white-space:pre;">			</span>ename string,<br><span style="white-space:pre;">			</span>job string,<br><span style="white-space:pre;">			</span>mgr int,<br><span style="white-space:pre;">			</span>hiredate string,<br><span style="white-space:pre;">			</span>sal int,<br><span style="white-space:pre;">			</span>comm int,<br><span style="white-space:pre;">			</span>deptno int)<br><span style="white-space:pre;">			</span>clustered by (job) into 4 buckets<br><span style="white-space:pre;">			</span>row format delimited fields terminated by ',';<span style="white-space:pre;">	</span><br><br><br>                需要设置环境变量：set hive.enforce.bucketing = true;<br><span style="white-space:pre;">		</span>通过子查询插入数据<br><span style="white-space:pre;">		</span>insert into emp_bucket select * from emp1;<br><span style="white-space:pre;">	</span><br><span style="white-space:pre;">	</span>5、视图：view  虚表<br><span style="white-space:pre;">		</span>(1) 视图不存数据  视图依赖的表叫基表<br><span style="white-space:pre;">		</span>(2) 操作视图 跟操作表 一样<br><span style="white-space:pre;">		</span>(3) 视图可以提高查询的效率吗？<br><span style="white-space:pre;">			</span>不可以、视图是简化复杂的查询<br><span style="white-space:pre;">			</span><br><span style="white-space:pre;">		</span>(4) 举例  查询员工信息：部门名称 员工姓名<br><span style="white-space:pre;">				</span>create view myview<br><span style="white-space:pre;">				</span>as<span style="white-space:pre;">	</span><br><span style="white-space:pre;">				</span>select dept.dname,emp1.ename<br><span style="white-space:pre;">				</span>from emp1,dept<br><span style="white-space:pre;">				</span>where emp1.deptno=dept.deptno;<br><span style="white-space:pre;">				</span><br><span style="white-space:pre;">		</span>(5) 补充：如果视图可以缓存数据 ------&gt; 物化视图（可以缓存数据）<br><span style="white-space:pre;">	</span><br>五、Hive的查询：就是SQL：select<span style="white-space:pre;">	</span>---&gt; MapReduce<br><span style="white-space:pre;">	</span>1、查询所有的员工信息<br><span style="white-space:pre;">	</span>    select * from emp1;<br><span style="white-space:pre;">		</span><br><span style="white-space:pre;">	</span>2、查询员工信息：员工号 姓名 薪水<br><span style="white-space:pre;">	</span>    select empno,ename,sal from emp1;<br><span style="white-space:pre;">		</span><br><span style="white-space:pre;">	</span>3、多表查询  部门名称  员工姓名<br><span style="white-space:pre;">		</span>select dept.dname,emp1.ename<br><span style="white-space:pre;">		</span>from emp1,dept<br><span style="white-space:pre;">		</span>where emp1.deptno=dept.deptno;<span style="white-space:pre;">	</span><br><br><br><span style="white-space:pre;">	</span>4、子查询：<br><span style="white-space:pre;">	</span>    hive只支持：from和where子句中的子查询<br><span style="white-space:pre;">		</span><br><span style="white-space:pre;">	</span>   补充：Oracle数据库中的子查询支持：from、where、select、having后面<br><span style="white-space:pre;">	</span>                         不能使用子查询：group by<br><br><br><span style="white-space:pre;">	</span>5、条件函数:  case .... when ....（Oracle中叫条件表达式）<br><span style="white-space:pre;">	</span>              是标准的SQL语句<br><span style="white-space:pre;">				</span>  就是在SQL中实现一个if  else 逻辑<br><span style="white-space:pre;">				</span>  <br><span style="white-space:pre;">	</span>    举例：做报表，根据职位给员工涨工资<br><span style="white-space:pre;">		</span>      PRESIDENT  1000<br><span style="white-space:pre;">			</span>  MANAGER    800<br><span style="white-space:pre;">			</span>  其他       400<br><span style="white-space:pre;">			</span>  <br><span style="white-space:pre;">			</span>  把涨前、涨后的薪水显示出来<br><span style="white-space:pre;">				</span>select empno,ename,job,sal,<br><span style="white-space:pre;">				</span>case job when 'PRESIDENT' then sal+1000<br><span style="white-space:pre;">						</span> when 'MANAGER' then sal+800<br><span style="white-space:pre;">						</span> else sal+400<br><span style="white-space:pre;">				</span>end <br><span style="white-space:pre;">				</span>from emp1;<span style="white-space:pre;">			</span>  <br><span style="white-space:pre;">			</span>  <br><span style="white-space:pre;">		</span>补充：Oracle中，条件表达式还有一种方式：decode函数 ---&gt; Oracle自己的语法<br><span style="white-space:pre;">							</span> <span style="white-space:pre;">						</span> <br>六、Hive的Java API：本质就是JDBC程序<br><span style="white-space:pre;">	</span>1、把lib下jar包<br><span style="white-space:pre;">	</span>2、启动HiveServer2<br><span style="white-space:pre;">	</span>3、错误<br><span style="white-space:pre;">	</span>    User: root is not allowed to impersonate anonymous<br>            配置Hadoop中core-site.xml文件，增加如下配置：<br><span style="white-space:pre;">			</span>&lt;property&gt;<br><span style="white-space:pre;">			</span>  &lt;name&gt;hadoop.proxyuser.root.hosts&lt;/name&gt;<br><span style="white-space:pre;">			</span>  &lt;value&gt;*&lt;/value&gt;<br><span style="white-space:pre;">			</span>&lt;/property&gt;<br><span style="white-space:pre;">				</span>   <br><span style="white-space:pre;">			</span>&lt;property&gt;<br><span style="white-space:pre;">			</span>  &lt;name&gt;hadoop.proxyuser.root.groups&lt;/name&gt;<br><span style="white-space:pre;">			</span>  &lt;value&gt;*&lt;/value&gt;<br><span style="white-space:pre;">			</span>&lt;/property&gt;<br><span style="white-space:pre;">			</span><br></p><p><span style="white-space:pre;">	</span>4、hive早期版本中，还有一种方式  Thrift Client</p><p><br></p>七、Hive的自定义函数（UDF：user defined function）：本质就是一个Java程序<br><span style="white-space:pre;">	</span>1、封装业务逻辑<br><span style="white-space:pre;">	</span>2、举例<br><span style="white-space:pre;">		</span>（1）实现类似Oracle中的concat函数：拼加字符串<br><span style="white-space:pre;">				</span>select concat('hello',' world') from dual; -----&gt; 得到  hello world<br><span style="white-space:pre;">		</span>（2）根据员工的薪水，判断薪水的级别<br><span style="white-space:pre;">		</span>      sal &lt;1000    ----&gt; Grade A<br><span style="white-space:pre;">			</span>  1000&lt;=sal&lt;3000 --&gt; Grade B<br><span style="white-space:pre;">			</span>  sal&gt;=3000     ---&gt; Grade C<br><span style="white-space:pre;">	</span>3、部署自定义的函数<br><span style="white-space:pre;">	</span>   add jar /root/temp/udf.jar;<br><span style="white-space:pre;">	</span>   <br><span style="white-space:pre;">	</span>   为函数创建别名<br><span style="white-space:pre;">	</span>   create temporary function myconcat as 'udf.MyConcatString';<br><span style="white-space:pre;">	</span>   create temporary function checksal as 'udf.CheckSalaryGrade';<br><span style="white-space:pre;">	</span><br><span style="white-space:pre;">	</span>4、数据分析引擎：Pig也有自定义函数（三种）<span style="white-space:pre;">	</span><br><span style="white-space:pre;">		</span>（1）自定义的过滤函数：相当于where条件<br><span style="white-space:pre;">		</span>（2）自定义的运算函数<br><span style="white-space:pre;">		</span>（3）自定义的加载函数（最麻烦）<span style="white-space:pre;">	</span><br>            </div>
                </div>