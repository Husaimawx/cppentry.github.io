---
layout:     post
title:      Hive表
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<p>一、Hive运行模式 <br></p>
<p>       1.Hive的运行模式即任务的执行环境</p>
<p>       2.分为本地与集群两种,我们可以通过mapred.job.tracker 来指明<br>
         设置方式：hive &gt; SET mapred.job.tracker=local</p>
<p>二、Hive的启动方式</p>
<p>       1.hive 命令行模式，直接输入#/hive/bin/hive的执行程序，或者输入 #hive --service cli </p>
<p>       2. hive web界面的 (端口号9999), 启动方式 #hive --service hwi 或者用于通过浏览器来访问hive，http://hadoop0:9999/hwi/<br></p>
<p>三、Hive与传统数据库</p>
<p>       <img alt="" src="https://img-blog.csdn.net/20150531205221436"></p>
<p>四、Hive的数据类型</p>
<p>        1.基本数据类型</p>
<p>         tinyint/smallint/int/bigint<br>
         float/double<br>
         boolean<br>
         string</p>
<p>        2.复杂数据类型</p>
<p>         Array/Map/Struct<br>
       【注：没有date/datetime】</p>
<p>五、Hive的数据存储</p>
<p>        1. Hive的数据存储基于Hadoop HDFS<br>
        2.Hive没有专门的数据存储格式<br>
        3.存储结构主要包括：数据库、文件、表、视图<br>
        4.Hive默认可以直接加载文本文件（TextFile），还支持sequence file 、RC file【<a href="http://my.oschina.net/leejun2005/blog/280896?utm_source=tuicool" rel="nofollow">基于 Hive 的文件格式：RCFile 简介及其应用</a>】<br>
        5.创建表时，指定Hive数据的列分隔符与行分隔符，Hive即可解析数据<br></p>
<p>六、Hive的数据模型</p>
<p>        6.1 Hive的数据模型-数据库 <br></p>
<p>            1.类似传统数据库的DataBase<br>
            2.默认数据库"default"     hive&gt; use default;<br>
            3.创建一个新库   hive &gt; create database test_dw;</p>
<p>         6.2 Hive的数据模型-内部表</p>
<p>            1. 与数据库中的 Table 在概念上是类似<br>
            2.每一个 Table 在 Hive 中都有一个相应的目录存储数据。例如，一个表 test，它在 HDFS 中的路径为：/user/hive/warehouse/test。<br>
               warehouse是在 hive-site.xml 中由 ${hive.metastore.warehouse.dir} 指定的数据仓库的目录。所有的 Table 数据（不包括 External Table）都保存在这个目录中。<br>
           3.删除表时，元数据与数据都会被删除<br></p>
<p>           4.在本地创建数据文件inner_table.dat<br>
           5.创建表 hive&gt;create table inner_table (key string);<br>
           6.加载数据 hive&gt;load data local inpath '/root/inner_table.dat' into table inner_table;<br>
           7.查看数据  select * from inner_table<br>
                                select count(*) from inner_table<br>
           8.删除表 drop table inner_table</p>
<p>        6.3 Hive的数据模型-分区表</p>
<p>           1.Partition 对应于数据库的 Partition 列的密集索引<br>
           2.在 Hive 中，表中的一个 Partition 对应于表下的一个目录，所有的 Partition 的数据都存储在对应的目录中<br>
             例如：test表中包含 date 和 city 两个 Partition，则对应于date=20130201, city = bj 的 HDFS 子目录为：/warehouse/test/date=20130201/city=bj<br>
                                                                                                     对应于date=20130202, city=sh 的HDFS 子目录为；/warehouse/test/date=20130202/city=sh</p>
<p>           3.创建分区表 <br></p>
<pre><code class="language-sql">CREATE TABLE tmp_table #表名
(
title   string, # 字段名称 字段类型
minimum_bid     double,
quantity        bigint,
have_invoice    bigint
)COMMENT '注释：XXX' #表注释
 PARTITIONED BY(pt STRING) #分区表字段（如果你文件非常之大的话，采用分区表可以快过滤出按分区字段划分的数据）
 ROW FORMAT DELIMITED 
   FIELDS TERMINATED BY '\001'   # 字段是用什么分割开的
STORED AS SEQUENCEFILE; #用哪种方式存储数据，SEQUENCEFILE是hadoop自带的文件压缩格式
</code></pre>
<p>          4.一些相关命令<br>
             SHOW TABLES; # 查看所有的表<br>
            SHOW TABLES '*TMP*'; #支持模糊查询<br>
            SHOW PARTITIONS TMP_TABLE; #查看表有哪些分区<br>
            DESCRIBE TMP_TABLE; #查看表结构</p>
<p>          5.练习</p>
<p>           创建数据文件 a.c<br>
           创建表     </p>
<pre><code class="language-sql">      create table people(userid int,username string) partitioned by(nation string) row format delimited fields terminated by '\t' stored as TEXTFILE LOCATION '/people'; stored as TEXTFILE;</code></pre>           加载数据到分区<br><pre><code class="language-sql">      load data local inpath '/a.c' into table people  partition (nation='China'); 
</code></pre>           查看数据         <pre><code class="language-sql">      select * from people;
      select count(*) from people;
</code></pre>
<p>           在Hive命令行下在HDFS上创建文件夹并上传文件<br></p>
<pre><code class="language-sql">      dfs -mkdir 
      dfs -put /b.j  /people/nation=Japan;
</code></pre>           为表添加元数据信息<pre><code class="language-sql">      alter table add partition (nation='Japan') location"/people/nation=Japan";</code></pre>
<p>           查看数据         </p>
<pre><code class="language-sql">      select * from people;     
</code></pre>
<p></p>
<p>           删除分区</p>
<pre><code class="language-sql">      alter table people drop partition (nation='Japan');</code></pre>           删除表 <pre><code class="language-sql">      drop table partition_table
</code></pre>
<p>       6.4 Hive的数据模型-外部表<br></p>
<p>           1.指向已经在 HDFS 中存在的数据，可以创建 Partition<br>
           2.它和 内部表 在元数据的组织上是相同的，而实际数据的存储则有较大的差异<br>
              内部表 的创建过程和数据加载过程（这两个过程可以在同一个语句中完成）,在加载数据的过程中，实际数据会被移动到数据仓库目录中；之后对数据的访问将会直接在数据仓库目录中完成。删除表时，表中的数据和元数据将会被同时删除。<br>
              外部表 只有一个过程，加载数据和创建表同时完成，并不会移动到数据仓库目录中，只是与外部数据建立一个链接。当删除一个外部表时，仅删除该链接。</p>
<p>           3.创建外部表的格式</p>
<pre><code class="language-sql">CREATE EXTERNAL TABLE page_view
( viewTime INT,
  userid BIGINT,
  page_url STRING,     
 referrer_url STRING,                             
  ip STRING COMMENT 'IP Address of the User',
  country STRING COMMENT 'country of origination‘
)
    COMMENT 'This is the staging page view table'
    ROW FORMAT DELIMITED FIELDS TERMINATED BY '44' LINES     TERMINATED BY '12'
    STORED AS TEXTFILE
    LOCATION 'hdfs://centos:9000/user/data/staging/page_view';
</code></pre>
<p>           4.练习</p>
<p>           创建数据文件external_table.dat<br>
           创建表<br>
            hive&gt;create external table external_table1 (key string) ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t' location '/home/external';<br>
           在HDFS创建目录/home/external 并把数据上传到HDFS上<br>
           #hadoop fs -put  /home/external_table.dat   /home/external<br>
           加载数据<br>
           LOAD DATA INPATH '/home/external_table1.dat' INTO TABLE external_table1;<br>
          查看数据<br>
          select * from external_table<br>
          select count(*) from external_table<br>
          删除表 <br>
          drop table external_table</p>
<p>七、Hive的数据模型-表的操作</p>
<p>        表的修改<br>
          alter table target_tab add columns (cols,string)<br>
        表的删除<br>
         drop table       <br>
        导入数据</p>
<p>       （1）当数据被加载至表中时，不会对数据进行任何转换。Load 操作只是将数据复制/移动至 Hive 表对应的位置。<br>
       （2）格式：    </p>
<pre><code class="language-sql">        LOAD DATA [LOCAL] INPATH 'filepath' [OVERWRITE]    INTO TABLE tablename    [PARTITION (partcol1=val1, partcol2=val2 ...)]
</code></pre>       （3）把一个Hive表导入到另一个已建Hive表    <br><p></p>
<p>                 方式一<br></p>
<pre><code class="language-sql">        INSERT OVERWRITE TABLE tablename [PARTITION (partcol1=val1, partcol2=val2 ...)] select_statement FROM from_statement
</code></pre>                方式二<br><pre><code class="language-sql">        CREATE [EXTERNAL] TABLE [IF NOT EXISTS] table_name 
	       (col_name data_type, ...)	…
	        AS SELECT …
</code></pre>          查询
<p></p>
<p>          （1）格式   <br></p>
<pre><code class="language-sql">        SELECT [ALL | DISTINCT] select_expr, select_expr, ...
	FROM table_reference 
	[WHERE where_condition] 
	[GROUP BY col_list] 
	[ CLUSTER BY col_list | [DISTRIBUTE BY col_list] [SORT BY col_list] | [ORDER BY col_list] ]
	[LIMIT number]
</code></pre>               其中 DISTRIBUTE BY 指定分发器（Partitioner）,多Reducer可用
<p></p>
<p>          （2）基于Partition的查询  <br>
                 一般 SELECT 查询是全表扫描。但如果是分区表，查询就可以利用分区剪枝（input pruning）的特性，类似“分区索引“”，只扫描一个表中它关心的那一部分。Hive 当前  的实现是，只有分区断言（Partitioned by）出现在离 FROM 子句最近的那个WHERE 子句中，才会启用分区剪枝。例如，如果 page_views 表（按天分区）使用 date 列分区，以下语句只会读取分区为‘2008-03-01’的数据。
<br></p>
<pre><code class="language-sql">       SELECT page_views.*    FROM page_views    WHERE page_views.date &gt;= '2013-03-01' AND page_views.date &lt;= '2013-03-01'</code></pre>          （3）IMIT Clause <br>
                  Limit 可以限制查询的记录数。查询的结果是随机选择的。下面的查询语句从 t1 表中随机查询5条记录：<pre><code class="language-sql">         SELECT * FROM t1 LIMIT 5</code></pre>          （4）Top N查询<br><p>                 下面的查询语句查询销售记录最大的 5 个销售代表。<br></p><pre><code class="language-sql">         SELECT * FROM sales SORT BY amount DESC LIMIT 5</code></pre>       表的连接         <br><p>        （1）内连接<br></p><pre><code class="language-sql">         select b.name,a.* from dim_ac a join acinfo b on (a.ac=b.acip) limit 10;</code></pre>        （2）左外连接<br><pre><code class="language-sql">         select b.name,a.* from dim_ac a left outer join acinfo b on a.ac=b.acip limit 10;</code></pre>八、Hive的API
<p>      JAVA客户端相关代码:<br></p><pre><code class="language-java">Class.forName("org.apache.hadoop.hive.jdbc.HiveDriver");
Connection con = DriverManager.getConnection("jdbc:hive://192.168.1.102:10000/wlan_dw", " root", "123");
Statement stmt = con.createStatement();
String querySQL="SELECT * FROM wlan_dw.dim_m order by flux desc limit 10";

ResultSet res = stmt.executeQuery(querySQL);  

while (res.next()) {
System.out.println(res.getString(1) +"\t" +res.getLong(2)+"\t" +res.getLong(3)+"\t" +res.getLong(4)+"\t" +res.getLong(5));
}

</code></pre><br><br>
  <br>
  <br><br><br><br><br><br><br>
     <br>
     <br><br>
、
<p></p>
<p>                <br></p>
<br><br><br><br><p></p>
<p></p>
<p></p>
<p></p>
<p>       <br></p>
<p>   <br><br></p>
<p><br>
          <br><br><br><br><br><br><br><br><br></p>
            </div>
                </div>