---
layout:     post
title:      hive2安装
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，欢迎转载，转载时请注明出处。欢迎留言讨论，大数据讨论qq群201011292					https://blog.csdn.net/Dante_003/article/details/54944319				</div>
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<h3 id="简介">简介</h3>

<p>hive是基于hadoop的hdfs和mapreduce的一个数据仓库。hdfs是hive的存储，mapreduce是hive的sql执行引擎。hive可以将结构化的数据文件映射为一张数据库表，并提供完整的sql查询功能。</p>

<p>可以理解hive为一个sql解析器来接收发过来的任务，并将任务翻译成mapreduce任务去执行sql查询。</p>

<p>开发者可以通过hive的jdbc、jdbc、jdbc，重要的事情说三遍，因为这个实在是太方便了，而且hive的sql支持sql2003标准。目前大数据生态圈里的很多大数据技术都自成一家，数据操作的api都有自己的规范，使用起来很不方便，所以hive这个支持sql2003标准真的给开发带来很大方便。 <br>
继续刚才的，开发者通过hive的jdbc给hive传入sql，hive将sql解析成hive的mapreduce(spark、tez)任务执行，最后将结果反馈给开发者调用端。</p>

<p>闲话篇:由于hive的执行引擎是基于hadoop的mapreduce，但mapreduce本身很多计算过程是通过硬盘读写的，所以速度非常慢，所以基于hadoop的mapreduce执行引擎的hive执行效率并不是很高。所以就又了后来的hive on tez，hive on spark，tez也是一个分布式的计算引擎，可能知道的人比较少，hive on tez是早于hive on spark的，spark吸取了很多tez的优点，于2014 2015年诞生，非常的好用。下一篇我们来讲hive on spark。</p>

<h3 id="环境">环境</h3>

<p>hadoop2.6.4集群(hadoop集群就不讲了，可看我的hadoop安装文章) <br>
hive-2.0.0 <br>
jdk-1.7（安装略，与hadoop安装一起的）</p>

<h3 id="安装hive">安装hive</h3>

<p>安装参考官网<a href="https://cwiki.apache.org/confluence/display/Hive/GettingStarted" rel="nofollow">https://cwiki.apache.org/confluence/display/Hive/GettingStarted</a></p>

<h4 id="1下载安装">1.下载安装</h4>

<p><a href="http://mirror.bit.edu.cn/apache/hive/" rel="nofollow">http://mirror.bit.edu.cn/apache/hive/</a> <br>
下载hive，我下载的版本为hive2.0.0</p>

<pre class="prettyprint"><code class="language-bash hljs ">tar -xzvf apache-hive-<span class="hljs-number">2.0</span>.<span class="hljs-number">0</span>-bin.tar.gz -C /opt
mv apache-hive-<span class="hljs-number">2.0</span>.<span class="hljs-number">0</span>-bin hive</code></pre>



<h4 id="2配置">2.配置</h4>

<ul>
<li>配置文件</li>
</ul>

<pre class="prettyprint"><code class=" hljs lasso">cd conf
mv hive<span class="hljs-attribute">-default</span><span class="hljs-built_in">.</span><span class="hljs-built_in">xml</span><span class="hljs-built_in">.</span>template hive<span class="hljs-attribute">-site</span><span class="hljs-built_in">.</span><span class="hljs-built_in">xml</span>
mv hive<span class="hljs-attribute">-log4j2</span><span class="hljs-built_in">.</span>properties<span class="hljs-built_in">.</span>template hive<span class="hljs-attribute">-log4j2</span><span class="hljs-built_in">.</span>properties
mv hive<span class="hljs-attribute">-exec</span><span class="hljs-attribute">-log4j2</span><span class="hljs-built_in">.</span>properties<span class="hljs-built_in">.</span>template hive<span class="hljs-attribute">-exec</span><span class="hljs-attribute">-log4j2</span><span class="hljs-built_in">.</span>properties</code></pre>

<ul>
<li>hive-site.xml</li>
</ul>

<p>hive需要一个数据库来存hive数据库的元数据，如表库字段等信息。hive默认使用的是apache的derby数据库，生产环境中一般使用mysql来当hive的元数据数据库metastore。 <br>
将mysql的驱动mysql-connector-java-xxx.jar 拷贝到 hive/lib/下面 <br>
下面需要在hive-site.xml里面配置mysql的连接信息。</p>



<pre class="prettyprint"><code class=" hljs avrasm">cd conf
<span class="hljs-keyword">cp</span> hive-default<span class="hljs-preprocessor">.template</span> hive-site<span class="hljs-preprocessor">.xml</span>
vi hive-site<span class="hljs-preprocessor">.xml</span>
<span class="hljs-preprocessor">###将下面信息添加到hive-site.xml中，并且去掉hive-site.xml中同样的配置</span></code></pre>



<pre class="prettyprint"><code class="language-xml hljs "><span class="hljs-tag">&lt;<span class="hljs-title">property</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="hljs-tag">&lt;/<span class="hljs-title">name</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">value</span>&gt;</span>jdbc:mysql://192.168.1.82:3306/hive?createDatabaseIfNotExist=true&amp;useUnicode=true&amp;characterEncoding=UTF-8<span class="hljs-tag">&lt;/<span class="hljs-title">value</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">description</span>&gt;</span>JDBC connect string for a JDBC metastore<span class="hljs-tag">&lt;/<span class="hljs-title">description</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">property</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">property</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class="hljs-tag">&lt;/<span class="hljs-title">name</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">value</span>&gt;</span>com.mysql.jdbc.Driver<span class="hljs-tag">&lt;/<span class="hljs-title">value</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">description</span>&gt;</span>Driver class name for a JDBC metastore<span class="hljs-tag">&lt;/<span class="hljs-title">description</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">property</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">property</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class="hljs-tag">&lt;/<span class="hljs-title">name</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">value</span>&gt;</span>root<span class="hljs-tag">&lt;/<span class="hljs-title">value</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">description</span>&gt;</span>username to use against metastore database<span class="hljs-tag">&lt;/<span class="hljs-title">description</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">property</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">property</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class="hljs-tag">&lt;/<span class="hljs-title">name</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">value</span>&gt;</span>123456<span class="hljs-tag">&lt;/<span class="hljs-title">value</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">description</span>&gt;</span>password to use against metastore database<span class="hljs-tag">&lt;/<span class="hljs-title">description</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">property</span>&gt;</span></code></pre>



<h4 id="3初始化hive的metastore">3.初始化hive的metastore</h4>

<pre class="prettyprint"><code class="language-bash hljs ">schematool -initSchema -dbType mysql
<span class="hljs-comment">###当出现下面的信息表示初始化成功</span>
Starting metastore schema initialization to <span class="hljs-number">2.0</span>.<span class="hljs-number">0</span>
Initialization script hive-schema-<span class="hljs-number">2.0</span>.<span class="hljs-number">0</span>.mysql.sql
Initialization script completed
schemaTool completed
<span class="hljs-comment">###这时候你就可以去你的mysql数据库中查看metastore的信息</span></code></pre>



<h4 id="4其它">4.其它</h4>

<p>这里有些人发现hive是基于hadoop的，但一直没有配置hadoop的信息。如果你的hive是安装在hadoop一个节点上，且这个节点上的环境变量里面有HADOOP_HOME，hive会使用这个位置下面hadoop的配置信息</p>

<h3 id="启动">启动</h3>

<p>hive的启动有两种，一种cli命令行模式的已经弃用</p>

<pre class="prettyprint"><code class="language-bash hljs ">bin/hive</code></pre>

<p>另外一种是hiveserver模式，hiveserver模式有很多缺陷，也已经启用，现在有了hiveserver2</p>



<pre class="prettyprint"><code class="language-bash hljs ">hive --service hiveserver2</code></pre>



<h3 id="测试">测试</h3>

<ul>
<li>webui <br>
可以在<a href="http://ip:10002/" rel="nofollow">http://ip:10002/</a>上面看到hiveserver2的页面</li>
<li>beeline</li>
</ul>

<pre class="prettyprint"><code class="language-bash hljs "><span class="hljs-comment">#敲入下面命令通过beeline进入hive</span>
beeline -u jdbc:hive2://localhost:<span class="hljs-number">10000</span>

Connecting to jdbc:hive2://localhost:<span class="hljs-number">10000</span>
Connected to: Apache Hive (version <span class="hljs-number">2.0</span>.<span class="hljs-number">0</span>)
Driver: Hive JDBC (version <span class="hljs-number">2.0</span>.<span class="hljs-number">0</span>)
<span class="hljs-number">16</span>/<span class="hljs-number">10</span>/<span class="hljs-number">10</span> <span class="hljs-number">09</span>:<span class="hljs-number">31</span>:<span class="hljs-number">13</span> [main]: WARN jdbc.HiveConnection: Request to <span class="hljs-keyword">set</span> autoCommit to <span class="hljs-literal">false</span>; Hive does not support autoCommit=false.
Transaction isolation: TRANSACTION_REPEATABLE_READ
Beeline version <span class="hljs-number">2.0</span>.<span class="hljs-number">0</span> by Apache Hive
<span class="hljs-number">0</span>: jdbc:hive2://localhost:<span class="hljs-number">10000</span>&gt;

<span class="hljs-comment">#查看数据库情况</span>
show databases;

+----------------+--+
| database_name |
+----------------+--+
| default |
+----------------+--+
<span class="hljs-number">1</span> row selected (<span class="hljs-number">0.084</span> seconds)
<span class="hljs-number">0</span>: jdbc:hive2://localhost:<span class="hljs-number">10000</span>&gt;

<span class="hljs-comment">#创建表</span>
create table test (f1 string,f2 string);
<span class="hljs-comment">#插入数据</span>
insert into test values(<span class="hljs-string">"1"</span>,<span class="hljs-string">"2"</span>);
insert into test values(<span class="hljs-string">"3"</span>,<span class="hljs-string">"4"</span>);
insert into test values(<span class="hljs-string">"5"</span>,<span class="hljs-string">"6"</span>);
<span class="hljs-comment">#查看数据</span>
select * from test;</code></pre>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>