---
layout:     post
title:      Flume安装及简单部署
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<h1 style="font-weight:400;line-height:1.1;color:rgb(69,69,69);background-color:rgb(255,255,255);">
1 Flume简介</h1>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
Flume是Cloudera提供的一个高可用、高可靠、分布式的海量日志采集、聚合和传输的系统。Flume支持在日志系统中定制各类数据发送方用于收集数据，同时Flume提供对数据的简单处理，并将数据处理结果写入各种数据接收方的能力。</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
Flume作为Cloudera开发的实时日志收集系统，受到了业界的认可与广泛应用。2010年11月Cloudera开源了Flume的第一个可用版本0.9.2，这个系列版本被统称为Flume-OG。随着Flume功能的扩展，Flume-OG代码工程臃肿、核心组件设计不合理、核心配置不标准等缺点暴露出来，尤其是在Flume-OG的最后一个发行版本 0.94.0中，日志传输不稳定的现象尤为严重。为了解决这些问题，2011年10月Cloudera重构了核心组件、核心配置和代码架构，重构后的版本统称为Flume-NG。改动的另一原因是将
 Flume 纳入 Apache 旗下，Cloudera Flume改名为Apache Flume。</p>
<h1 style="font-weight:400;line-height:1.1;color:rgb(69,69,69);background-color:rgb(255,255,255);">
<a name="t1" style="background:transparent;color:rgb(66,139,202);"></a>2 Flume工作原理</h1>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
Flume的数据流由事件（Event）贯穿始终。事件是Flume的基本数据单位，它携带日志数据（字节数组形式）并且携带有头信息，这些Event由Agent外部的Source生成，当Source捕获事件后会进行特定的格式化，然后Source会把事件推入（单个或多个）Channel中。可以把Channel看作是一个缓冲区，它将保存事件直到Sink处理完该事件。Sink负责持久化日志或者把事件推向另一个Source。以下是Flume的一些核心概念：</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
（1）Events：一个数据单元，带有一个可选的消息头,可以是日志记录、avro 对象等。</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
（2）Agent：JVM中一个独立的Flume进程，包含组件Source、Channel、Sink。</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
（3）Client：运行于一个独立线程，用于生产数据并将其发送给Agent。</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
（4）Source：用来消费传递到该组件的Event,从Client收集数据，传递给Channel。</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
（5）Channel：中转Event的一个临时存储，保存Source组件传递过来的Event，其实就是连接 Source 和 Sink ，有点像一个消息队列。</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
（6）Sink：从Channel收集数据，运行在一个独立线程。</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
Flume以Agent为最小的独立运行单位，一个Agent就是一个JVM。单Agent由Source、Sink和Channel三大组件构成，如下图所示：</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
<img src="https://img-blog.csdn.net/20160908163126720" alt="" style="border:0px;vertical-align:middle;"><br></p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
值得注意的是，Flume提供了大量内置的Source、Channel和Sink类型。不同类型的Source、Channel和Sink可以自由组合。组合方式基于用户设置的配置文件，非常灵活。比如：Channel可以把事件暂存在内存里，也可以持久化到本地硬盘上；Sink可以把日志写入HDFS、HBase、ES甚至是另外一个Source等等。Flume支持用户建立多级流，也就是说多个Agent可以协同工作,如下图所示:</p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
<img src="https://img-blog.csdn.net/20160908163150212" alt="" style="border:0px;vertical-align:middle;"></p>
<h1 style="font-weight:400;line-height:1.1;color:rgb(69,69,69);background-color:rgb(255,255,255);">
<a name="t2" style="background:transparent;color:rgb(66,139,202);"></a>3 Flume的安装</h1>
<h2 style="font-weight:400;line-height:1.1;color:rgb(69,69,69);font-size:30px;background-color:rgb(255,255,255);">
<a name="t3" style="background:transparent;color:rgb(66,139,202);"></a>3.1 安装JDK</h2>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
具体方法略。</p>
<h2 style="font-weight:400;line-height:1.1;color:rgb(69,69,69);font-size:30px;background-color:rgb(255,255,255);">
<a name="t4" style="background:transparent;color:rgb(66,139,202);"></a>3.2 下载安装包并解压</h2>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
$ wget http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.6.0-cdh5.7.1.tar.gz</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
$ tar -xvf flume-ng-1.6.0-cdh5.7.1.tar.gz</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
$ rm flume-ng-1.6.0-cdh5.7.1.tar.gz</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
$ mv apache-flume-1.6.0-cdh5.7.1-binflume-1.6.0-cdh5.7.1</p>
<h2 style="font-weight:400;line-height:1.1;color:rgb(69,69,69);font-size:30px;background-color:rgb(255,255,255);">
<a name="t5" style="background:transparent;color:rgb(66,139,202);"></a>3.3 配置环境变量</h2>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
$ cd /home/hadoop</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
$ vim .bash_profile</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
export FLUME_HOME=/home/hadoop/app/cdh/flume-1.6.0-cdh5.7.1</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
export PATH=$PATH:$FLUME_HOME/bin</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
$ source .bash_profile</p>
<h2 style="font-weight:400;line-height:1.1;color:rgb(69,69,69);font-size:30px;background-color:rgb(255,255,255);">
<a name="t6" style="background:transparent;color:rgb(66,139,202);"></a>3.4 配置flume-env.sh文件</h2>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
$ cd app/cdh/flume-1.6.0-cdh5.7.1/conf/</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
$ cp flume-env.sh.template flume-env.sh</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
$ vim flume-env.sh</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
export JAVA_HOME=/home/hadoop/app/jdk1.7.0_79</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
export HADOOP_HOME=/home/hadoop/app/cdh/hadoop-2.6.0-cdh5.7.1</p>
<h2 style="font-weight:400;line-height:1.1;color:rgb(69,69,69);font-size:30px;background-color:rgb(255,255,255);">
<a name="t7" style="background:transparent;color:rgb(66,139,202);"></a>3.5 版本验证</h2>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
$ flume-ng version</p>
<h1 style="font-weight:400;line-height:1.1;color:rgb(69,69,69);background-color:rgb(255,255,255);">
<a name="t8" style="background:transparent;color:rgb(66,139,202);"></a>4 Flume部署示例</h1>
<h2 style="font-weight:400;line-height:1.1;color:rgb(69,69,69);font-size:30px;background-color:rgb(255,255,255);">
<a name="t9" style="background:transparent;color:rgb(66,139,202);"></a>4.1 Avro</h2>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
Flume可以通过Avro监听某个端口并捕获传输的数据，具体示例如下：</p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
// 创建一个Flume配置文件</p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
$ cd app/cdh/flume-1.6.0-cdh5.7.1</p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
$ mkdir example</p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
$ cp conf/flume-conf.properties.template example/netcat.conf</p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
 </p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
// 配置netcat.conf用于实时获取另一终端输入的数据</p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
$ vim example/netcat.conf</p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
# Name the components on this agent</p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
a1.sources = r1</p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
a1.sinks = k1</p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
a1.channels = c1</p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
# Describe/configure the source</p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
a1.sources.r1.type = netcat</p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
a1.sources.r1.bind = localhost</p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
a1.sources.r1.port = 44444</p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
# Describe the sink</p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
a1.sinks.k1.type = logger</p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
# Use a channel that buffers events in memory</p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
a1.channels.c1.type = memory</p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
a1.channels.c1.capacity = 1000</p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
a1.channels.c1.transactionCapacity = 100</p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
# Bind the source and sink to the channel</p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
a1.sources.r1.channels = c1</p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
a1.sinks.k1.channel = c1</p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
 </p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
// 运行FlumeAgent，监听本机的44444端口</p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
$ flume-ng agent -c conf -f example/netcat.conf -n a1 -Dflume.root.logger=INFO,console</p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
<img src="https://img-blog.csdn.net/20160908163332846" alt="" style="border:0px;vertical-align:middle;"></p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
// 打开另一终端，通过telnet登录localhost的44444，输入测试数据</p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
$ telnet localhost 44444</p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
</p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
<img src="https://img-blog.csdn.net/20160908163351049" alt="" style="border:0px;vertical-align:middle;"></p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
// 查看flume收集数据情况</p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
<img src="https://img-blog.csdn.net/20160908163442565" alt="" style="border:0px;vertical-align:middle;"><br></p>
<h2 style="font-weight:400;line-height:1.1;color:rgb(69,69,69);font-size:30px;background-color:rgb(255,255,255);">
<a name="t10" style="background:transparent;color:rgb(66,139,202);"></a>4.2 Spool</h2>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
Spool用于监测配置的目录下新增的文件，并将文件中的数据读取出来。需要注意两点：拷贝到spool目录下的文件不可以再打开编辑、spool目录下不可包含相应的子目录。具体示例如下：</p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
// 创建两个Flume配置文件</p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
$ cd app/cdh/flume-1.6.0-cdh5.7.1</p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
$ cp conf/flume-conf.properties.template example/spool1.conf</p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
$ cp conf/flume-conf.properties.template example/spool2.conf</p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
 </p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
// 配置spool1.conf用于监控目录avro_data的文件，将文件内容发送到本地60000端口</p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
$ vim example/spool1.conf</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
# Namethe components</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
local1.sources= r1</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
local1.sinks= k1</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
local1.channels= c1</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
# Source</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
local1.sources.r1.type= spooldir</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
local1.sources.r1.spoolDir= /home/hadoop/avro_data</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
# Sink</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
local1.sinks.k1.type= avro</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
local1.sinks.k1.hostname= localhost</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
local1.sinks.k1.port= 60000</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
#Channel</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
local1.channels.c1.type= memory</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
# Bindthe source and sink to the channel</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
local1.sources.r1.channels= c1</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
local1.sinks.k1.channel= c1</p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
 </p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
// 配置spool2.conf用于从本地60000端口获取数据并写入HDFS</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
# Namethe components</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
a1.sources= r1</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
a1.sinks= k1</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
a1.channels= c1</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
# Source</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
a1.sources.r1.type= avro</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
a1.sources.r1.channels= c1</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
a1.sources.r1.bind= localhost</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
a1.sources.r1.port= 60000</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
# Sink</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
a1.sinks.k1.type= hdfs</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
a1.sinks.k1.hdfs.path= hdfs://localhost:9000/user/wcbdd/flumeData</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
a1.sinks.k1.rollInterval= 0</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
a1.sinks.k1.hdfs.writeFormat= Text</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
a1.sinks.k1.hdfs.fileType= DataStream</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
# Channel</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
a1.channels.c1.type= memory</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
a1.channels.c1.capacity= 10000</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
# Bind the source and sink to the channel</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
a1.sources.r1.channels= c1</p>
<p style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
a1.sinks.k1.channel= c1</p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
 </p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
// 分别打开两个终端，运行如下命令启动两个Flume Agent</p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
$ flume-ng agent -c conf -f example/spool2.conf -n a1</p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
$ flume-ng agent -c conf -f example/spool1.conf -n local1</p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
 </p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
// 查看本地文件系统中需要监控的avro_data目录内容</p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
$ cd avro_data</p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
$ cat avro_data.txt</p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
<img src="https://img-blog.csdn.net/20160908163608484" alt="" style="border:0px;vertical-align:middle;"></p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
 </p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
// 查看写HDFS的Agent，检查是否捕获了数据别写入HDFS</p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
<img src="https://img-blog.csdn.net/20160908163631285" alt="" style="border:0px;vertical-align:middle;"></p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
 </p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
// 通过WEB UI查看HDFS中的文件</p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
<img src="https://img-blog.csdn.net/20160908163649567" alt="" style="border:0px;vertical-align:middle;"></p>
<h2 style="font-weight:400;line-height:1.1;color:rgb(69,69,69);font-size:30px;background-color:rgb(255,255,255);">
<a name="t11" style="background:transparent;color:rgb(66,139,202);"></a>4.3 其它</h2>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
Flume内置了大量的Source，其中Avro Source、Thrift Source、Spooling Directory Source、Kafka Source具有较好的性能和较广泛的使用场景。下面是Source的一些参考资料：</p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
<img src="https://img-blog.csdn.net/20160908163716642" alt="" style="border:0px;vertical-align:middle;"></p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
<img src="https://img-blog.csdn.net/20160908163728986" alt="" style="border:0px;vertical-align:middle;"></p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
<img src="https://img-blog.csdn.net/20160908163736786" alt="" style="border:0px;vertical-align:middle;"></p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
<img src="https://img-blog.csdn.net/20160908163740330" alt="" style="border:0px;vertical-align:middle;"><img src="https://img-blog.csdn.net/20160908163743052" alt="" style="border:0px;vertical-align:middle;"></p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
<img src="https://img-blog.csdn.net/20160908163746158" alt="" style="border:0px;vertical-align:middle;"></p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
<img src="https://img-blog.csdn.net/20160908163748864" alt="" style="border:0px;vertical-align:middle;"></p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
<img src="https://img-blog.csdn.net/20160908163751705" alt="" style="border:0px;vertical-align:middle;"></p>
<p align="left" style="color:rgb(69,69,69);background-color:rgb(255,255,255);">
<img src="https://img-blog.csdn.net/20160908163754599" alt="" style="border:0px;vertical-align:middle;"></p>
            </div>
                </div>