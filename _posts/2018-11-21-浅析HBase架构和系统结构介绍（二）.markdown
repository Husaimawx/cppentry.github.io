---
layout:     post
title:      浅析HBase架构和系统结构介绍（二）
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主John Lau原创文章，未经博主允许不得转载					https://blog.csdn.net/GreatElite/article/details/18899281				</div>
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<h2><span style="font-size:18px;">2 HBase架构</span></h2>
<p><span style="font-size:18px;"> <img src="https://img-blog.csdn.net/20140202121537812?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvR3JlYXRFbGl0ZQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></span></p>
<p><span style="font-size:18px;">                                                                     <strong>HBase系统架构图</strong>(注意，每个HRegsionServer维护一个HLog文件)</span></p>
<span style="font-size:18px;"><br clear="all"></span>
<p><span style="font-size:18px;"> </span></p>
<h3><span style="font-size:18px;">2.1客户端（client）</span></h3>
<p><span style="font-size:18px;">HBase Client使用HBase的RPC机制与HMaster和HRegionServer进行通信，对于管理类操作，Client与HMaster进行RPC；对于数据读写类操作，Client与HRegionServer进行RPC。</span></p>
<h3><span style="font-size:18px;">2.2 Zookeeper</span></h3>
<p><span style="font-size:18px;">ZookeeperQuorum中存储的信息包括：</span></p>
<ul type="disc"><li><span style="font-size:18px;">存储-ROOT-表的地址：/hbase/root-region-server</span> </li><li><span style="font-size:18px;">存储HMaster的地址：/hbase/master</span> </li><li><span style="font-size:18px;">存储所有HRegionServer的状态，HRegionServer会把自己以短暂的（Ephemeral）方式注册到 Zookeeper中：/hbase/rs</span></li></ul><h3><span style="font-size:18px;">2.3 HMaster</span></h3>
<p><span style="font-size:18px;">    HMaster没有单点问题，HBase中可以启动多个HMaster，通过Zookeeper的Master Election机制保证总有一个HMaster运行，HMaster在功能上主要负责table和region的管理工作：</span></p>
<ul type="disc"><li><span style="font-size:18px;">管理用户对table的增、删、改、查操作</span> </li><li><span style="font-size:18px;">管理HRegionServer的负载均衡，调整region分布</span> </li><li><span style="font-size:18px;">在region split后，负责新region的分配</span> </li><li><span style="font-size:18px;">在HRegionServer停机后，负责失效HRegionServer上的region迁移</span></li><li><span style="font-size:18px;">HDFS的垃圾文件回收</span> </li><li><span style="font-size:18px;">处理schema更新请求</span></li></ul><p><span style="font-size:18px;">注意：Client访问HBase上数据的过程并不需要HMaster参与（寻址访问Zookeeper和HRegionServer，数据读写访问HRegioneServer），HMaster仅仅维护者table和region的元数据信息，负载很低。</span></p>
<p><span style="font-size:18px;"> </span></p>
<h3><span style="font-size:18px;">2.4 HRegionServer</span></h3>
<p><span style="font-size:18px;">HRegionServer维护HMaster分配给它的region，并负责响应用户I/O请求，向HDFS文件系统中读写数据，是HBase中最核心的模块。</span></p>
<p><span style="font-size:18px;"><img src="https://img-blog.csdn.net/20140202121436906?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvR3JlYXRFbGl0ZQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br></span></p>
<p></p>
<p><span style="font-size:18px;">     HRegionServer内部管理了一系列HRegion对象，每个HRegion对应了table中的一个region，HRegion中由多 个HStore组成。每个HStore对应了Table中的一个column family的存储，可以看出每个columnfamily其实就是一个集中的存储单元，因此最好将具备共同IO特性的column放在一个column family中，这样最高效。</span></p>
<p><span style="font-size:18px;">HStore存储是HBase存储的核心，由两部分组成，一部分是MemStore，一部分是StoreFile。MemStore是 Sorted Memory Buffer，用户写入的数据首先会放入MemStore，当MemStore满了以后会Flush成一个StoreFile（底层实现是HFile）。</span></p>
<br clear="all">            </div>
                </div>