---
layout:     post
title:      通过JDBC来连接Hive
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/u012630060/article/details/69949043				</div>
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<p>       在大数据分析中，Hive作为历史数据挖掘分析工具，用到的很多，我们可以通过Hive的命令行来很方便地操作Hive中的数据,但是很多时候我们都需要将Hive的操作融入到编程环境中去，而Hive提供了JDBC接口，因而我们可以很方便地通过JDBC来操作Hive。下面就记录一下通过JDBC来连接Hive的过程：</p>
<p>        第一步：启动集群中的Mysql服务（在安装mysql的那个节点上）</p>
<p>                        service mysqld start</p>
<p>       第二步：启动Hived的Thrift服务（在安装Hive的那个节点上）</p>
<p>                       hive --service hiveserver2 &amp;</p>
<p>       第三步：通过JDBC来连接HIve(代码如下)</p>
<p><span style="color:#ff0000;">                       </span></p>
<p><span style="color:#ff0000;">                   </span></p>
<p style="color:rgb(255,0,0);"><span style="color:#ff0000;">//连接JDBC的主代码</span></p>
<p>package com.shuke.Hive;</p>
<p>import java.sql.Connection;<br>
import java.sql.PreparedStatement;<br>
import java.sql.ResultSet;<br>
import java.sql.SQLException;<br><br>
public class test {<br><span></span>public static void main(String[] args) throws SQLException {<br><span></span><br><span></span>Connection connection = null;<br><span></span>PreparedStatement pst = null;<br><span></span>ResultSet result = null;<br><span></span><br><span></span>//建立连接<br><span></span>connection = ConnectionHive.getConnection(ConnectionHive.url, "", "");<br><span></span><br><span></span>//执行SQL语句<br><span></span>String querysql = "select * from a66 where DEVIDSTR = ?";<br><span></span>try {<br><span></span>pst = connection.prepareStatement(querysql);<br><span></span>    pst.setString(1, "550001411993");<br><span></span>    Long stime = System.currentTimeMillis();<br><span></span>    result = pst.executeQuery();<br><span></span>    System.out.println("time---"+(System.currentTimeMillis()-stime)+"ms");<br><span></span>} catch (SQLException e) {<br><span></span>e.printStackTrace();<br><span></span>}<br><span></span><br><span></span>//处理查询结果<br><span></span>    while (result.next()) {<br><span></span>System.out.println(result.getString("DEVIDSTR"));<br><span></span>}<br><span></span><br><span></span>//释放资源<br><span></span>ConnectionHive.close(connection, pst, result);<br><span></span>}<br><span></span><br>
}</p>
<p style="color:rgb(255,0,0);"><span style="color:#ff0000;">封装的JDBC的Connection方法</span></p>
<p>package com.shuke.Hive;<br><br><br>
import java.sql.Connection;<br>
import java.sql.DriverManager;<br>
import java.sql.ResultSet;<br>
import java.sql.SQLException;<br>
import java.sql.Statement;<br><br><br>
public class ConnectionHive {<br><span></span><br><span></span>public static String url = "jdbc:hive2://192.168.8.119:10000/default";<br><span></span><br><span></span>//无参构造函数<br><span></span>private ConnectionHive(){<br><span></span><br><span></span>}<br><span></span><br><span></span>//将驱动注册写入静态代码块中，这样保证了驱动注册在程序中只运行一次<br><span></span>static{<br><span></span>try {<br><span></span>Class.forName("org.apache.hive.jdbc.HiveDriver");<br><span></span>} catch (ClassNotFoundException e) {<br><span></span>e.printStackTrace();<br><span></span>}<br><span></span>}<br><span></span><br><span></span>//数据库连接的静态方法<br><span></span>public static Connection getConnection(String url,String user,String password){<br><span></span>Connection conn = null;<br><span></span>try {<br><span></span>conn = DriverManager.getConnection(url, user, password);<br><span></span>} catch (SQLException e) {<br><span></span>System.out.println("连接到Hive失败!");<br><span></span>e.printStackTrace();<br><span></span>} finally{<br><span></span>return conn;<br><span></span>}<br><span></span>}<br><span></span><br><span></span>/* 释放资源的静态方法:<br><span></span> * 每释放一个资源都要try catch，在finally中写释放下一个资源的代码<br><span></span> * 这样保证了在任何一个资源释放出现异常时，其他资源还都能正常释放，<br><span></span> * 不至于因为异常而造成程序退出，从而其他资源没有成功释放<br><span></span> * */<br><span></span>public static void close(Connection conn,Statement stmt,ResultSet result){<br><span></span>try {<br><span></span>if (result != null) <br><span></span> result.close();<br><span></span>} catch (SQLException e) {<br><span></span>e.printStackTrace();<br><span></span>} finally{<br><span></span>try {<br><span></span>if (stmt!=null)<br><span></span>stmt.close();<br><span></span>} catch (SQLException e) {<br><span></span>// TODO Auto-generated catch block<br><span></span>e.printStackTrace();<br><span></span>} finally{<br><span></span>try {<br><span></span>if(conn!=null)<br><span></span>  conn.close();<br><span></span>} catch (SQLException e) {<br><span></span>e.printStackTrace();<br><span></span>}<br><span></span>}<br><span></span>}<br><span></span>}<br>
}</p>
<p></p>
            </div>
                </div>