---
layout:     post
title:      Flume学习笔记
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/u011489205/article/details/79173838				</div>
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<h5 id="目录" style="color:rgb(0,0,0);font-family:Helvetica, 'Hiragino Sans GB', '微软雅黑', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;">
目录</h5>
<p style="color:rgb(0,0,0);font-family:Helvetica, 'Hiragino Sans GB', '微软雅黑', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:15px;">
</p>
<div class="wiz_toc_layer" style="background:rgb(249,249,245);">
<a class="wiz_toc h4" href="#%E7%9B%AE%E5%BD%95" rel="nofollow" style="display:inline-block;line-height:27px;color:rgb(68,138,255);margin-left:60px;">目录</a><br><a class="wiz_toc h1" href="#1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AFFlume" rel="nofollow" style="display:inline-block;line-height:27px;color:rgb(68,138,255);margin-left:0px;">1、什么是Flume</a><br><a class="wiz_toc h1" href="#2%E3%80%81%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5" rel="nofollow" style="display:inline-block;line-height:27px;color:rgb(68,138,255);margin-left:0px;">2、核心概念</a><br><a class="wiz_toc h1" href="#3%E3%80%81FlowPipeline" rel="nofollow" style="display:inline-block;line-height:27px;color:rgb(68,138,255);margin-left:0px;">3、Flow Pipeline</a><br><a class="wiz_toc h1" href="#4%E3%80%81%E9%AB%98%E5%8F%AF%E9%9D%A0%E4%B8%8E%E5%AE%B9%E9%94%99%E5%A4%84%E7%90%86" rel="nofollow" style="display:inline-block;line-height:27px;color:rgb(68,138,255);margin-left:0px;">4、高可靠与容错处理</a><br><a class="wiz_toc h1" href="#5%E3%80%81%E6%8B%93%E6%89%91%E8%AE%BE%E8%AE%A1%E9%9C%80%E8%A6%81%E8%80%83%E8%99%91%E7%9A%84" rel="nofollow" style="display:inline-block;line-height:27px;color:rgb(68,138,255);margin-left:0px;">5、拓扑设计需要考虑的</a><br><a class="wiz_toc h3" href="#5.1%E3%80%81Flume%E6%98%AF%E5%90%A6%E9%80%82%E5%90%88%E4%BD%A0%E7%9A%84%E9%97%AE%E9%A2%98" rel="nofollow" style="display:inline-block;line-height:27px;color:rgb(68,138,255);margin-left:40px;">5.1、Flume是否适合你的问题</a><br><a class="wiz_toc h3" href="#5.2%E3%80%81Flume%E4%B8%ADFlow%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7" rel="nofollow" style="display:inline-block;line-height:27px;color:rgb(68,138,255);margin-left:40px;">5.2、Flume中Flow的可靠性</a><br><a class="wiz_toc h3" href="#5.3%E3%80%81Flume%E6%8B%93%E6%89%91%E8%AE%BE%E8%AE%A1" rel="nofollow" style="display:inline-block;line-height:27px;color:rgb(68,138,255);margin-left:40px;">5.3、Flume拓扑设计</a><br><a class="wiz_toc h3" href="#5.4%E3%80%81%E8%B0%83%E6%95%B4Flume%E9%83%A8%E7%BD%B2%E5%A4%A7%E5%B0%8F" rel="nofollow" style="display:inline-block;line-height:27px;color:rgb(68,138,255);margin-left:40px;">5.4、调整Flume部署大小</a><br><a class="wiz_toc h3" href="#5.5%E3%80%81%E5%A4%84%E7%90%86agent%E6%95%85%E9%9A%9C" rel="nofollow" style="display:inline-block;line-height:27px;color:rgb(68,138,255);margin-left:40px;">5.5、处理agent故障</a><br><a class="wiz_toc h1" href="#6%E3%80%81%E9%85%8D%E7%BD%AE" rel="nofollow" style="display:inline-block;line-height:27px;color:rgb(68,138,255);margin-left:0px;">6、配置</a><br><a class="wiz_toc h3" href="#6.1%E3%80%81%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6" rel="nofollow" style="display:inline-block;line-height:27px;color:rgb(68,138,255);margin-left:40px;">6.1、配置文件</a><br><a class="wiz_toc h3" href="#6.2%E3%80%81%E9%85%8D%E7%BD%AE%E5%8D%95%E4%B8%AA%E7%BB%84%E4%BB%B6" rel="nofollow" style="display:inline-block;line-height:27px;color:rgb(68,138,255);margin-left:40px;">6.2、配置单个组件</a><br><a class="wiz_toc h3" href="#6.3%E3%80%81%E6%8A%8A%E6%AF%8F%E4%B8%80%E9%83%A8%E5%88%86%E9%83%BD%E9%93%BE%E6%8E%A5%E8%B5%B7%E6%9D%A5" rel="nofollow" style="display:inline-block;line-height:27px;color:rgb(68,138,255);margin-left:40px;">6.3、把每一部分都链接起来</a></div>
<a href="#wizToc" rel="nofollow" style="color:rgb(68,138,255);"></a>
<p></p>
<h2 id="1、什么是Flume" style="color:rgb(0,0,0);font-family:Helvetica, 'Hiragino Sans GB', '微软雅黑', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;">
1、什么是Flume</h2>
<p style="color:rgb(0,0,0);font-family:Helvetica, 'Hiragino Sans GB', '微软雅黑', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:15px;">
Apache<span> </span>Flume<span> </span>是一个分布式，可靠的，可信赖的系统，用于从不同的sources高效的收集，聚合并且移动大量的日志数据到一个数据中心存储仓库中。<span> </span><br>
Flume用单跳消息传递来保证语义来为系统提供端到端的可靠性。为了实现这一点，某些新概念已被纳入其设计中，而某些其他现有概念已经被重新定义，重用或完全丢弃。</p>
<h2 id="2、核心概念" style="color:rgb(0,0,0);font-family:Helvetica, 'Hiragino Sans GB', '微软雅黑', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;">
2、核心概念</h2>
<p style="color:rgb(0,0,0);font-family:Helvetica, 'Hiragino Sans GB', '微软雅黑', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:15px;">
1）、Event：Flume从起始点到最后目的地的数据单元，它是以字节形式并且带有可选的字符串头部 来表示的。<span> </span><br>
2）、Flow：events从起始点到最终目的地的移动就被叫做data flow，或者simple flow。<span> </span><br>
3）、Client：操作起始点的events并且把他们分发到Flume<span> </span>Agent的一个接口实现。客户端通常在它们消费数据的应用程序的进程空间中操作。<span> </span><br>
4）、Agent：一个独立的进程，托管Flume组件，如源，通道和sink，可以接收，存储并且将事件转发到下一跳的目标。<span> </span><br>
5）、Source：通过特殊的机制可以消费发送给它的events的接口实现，例如，一个Avro source 就是一个source，它可以用来接收在flow中来自clients 或者其他agents 的Avro event。当source接收到event后，source就会将他交给一个或者多个channel。<span> </span><br>
Source有两种类型<span> </span><br>
a、PollableSourceRunner （KafkaSource）<span> </span><br>
b、EventDrivenSourceRunner （AvroSource,ExecSource,NetcatSource,SpoolDirectorySource ）<span> </span><br>
6）、Channel：events的临时存储，其中events通过在Agent内操作的source传递到通道，一个放在channel中的event会保留在channel中直到sink 从中移除进行下一步的传输。Channel在确保Flow的耐久性方面起重要作用。<span> </span><br>
Channel作用：<span> </span><br>
a、在3、Flow Pipeline所说的使用类似于生产者消费者数据交换模型来使source与sink的解耦。<span> </span><br>
b、一个source复制多个channel，冗余实现了容错的特性；<span> </span><br>
c、缓冲event。防止source突然增加event而导致sink不能及时消费；有一个agent失败以后可以缓冲发送过来的event防止数据的丢失。<span> </span><br>
d、put，take实现了事务，sink从channel中取event记为step1开启一个事务，source向channel中放数据记为step2，只有step2返回成功信号以后step1才能进行下一步，实现event传递的保证。<span> </span><br>
7）、Sink：可以将event从channel中移除并且在flow中传递到下一个的Agent或者event 的终点的接口实现。</p>
<h2 id="3、FlowPipeline" style="color:rgb(0,0,0);font-family:Helvetica, 'Hiragino Sans GB', '微软雅黑', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;">
3、Flow Pipeline</h2>
<p style="color:rgb(0,0,0);font-family:Helvetica, 'Hiragino Sans GB', '微软雅黑', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:15px;">
在Flume<span> </span>NG中一个Flow开始于Client，client将event传递到它的下一个目的地。这个目的地是一个agent。更准确的说，destination是agent内的一个source操作。source接收event后会将它分发给一个或者多个channel,,在同一个agent内的channel接收的event会被一个或者多个sink操作消耗。如果一个agent是一个普通的agent，它将会把event转发到下一跳的目的地也就是另一个agent。如果sink是一个终端sink，它将event转发到最终目的地。Channel允许使用类似于生产者消费者数据交换模型来使source与sink的解耦。这就使得source和sink有不同的性能和运行时特性，并且能够有效地使用系统可用的物理资源。</p>
<p style="color:rgb(0,0,0);font-family:Helvetica, 'Hiragino Sans GB', '微软雅黑', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:15px;">
图一 如下图所示在一个flow pipline中各个组件怎么交互<span> </span><br><img src="https://img-blog.csdn.net/20180126162024146?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ4OTIwNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br></p>
<div style="text-align:center;">图一 ：一个Flow中的逻辑组件示意图。 箭头表示event在系统上行进的方向。 这也说明了通过使一个source将event写入多个channel，flow如何扇出。<span> </span></div>
通过配置一个source分发event到多个channel，flows可以扇出到多个目的地。图一说明了这个问题，即agent中的source将事件写出到了两个channel--channel1 和channel2。
<p></p>
<p style="color:rgb(0,0,0);font-family:Helvetica, 'Hiragino Sans GB', '微软雅黑', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:15px;">
相反，可以通过使多个source在相同agent中操作来向相同channel写入来使flow汇聚。 汇聚flo的物理布局的示例在下面的图2中示出。<span> </span><br><img src="https://img-blog.csdn.net/20180126162036812?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ4OTIwNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br></p>
<p style="text-align:center;color:rgb(0,0,0);font-family:Helvetica, 'Hiragino Sans GB', '微软雅黑', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:15px;">
图二 一个简单的flow汇聚示意图</p>
<h2 id="4、高可靠与容错处理" style="color:rgb(0,0,0);font-family:Helvetica, 'Hiragino Sans GB', '微软雅黑', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;">
4、高可靠与容错处理</h2>
<p style="color:rgb(0,0,0);font-family:Helvetica, 'Hiragino Sans GB', '微软雅黑', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:15px;">
Flume<span> </span>NG 使用基于channel的事务来保证消息传递的可靠性。当消息从一个agent传递到另一个agent的时候，会开启两个事务，一个在agent上转发event，另一个在agent上会接收event。为了发送agent提交它的事务，它必须接收到从接收agent的成功信号。接收的agent只会返回一个成功的信号当它自己的事务首先正确的执行。这确保了在flow所做的跳之间的语义传递的保证（guaranteed delivery semantics ）。下面的图3示出了说明在两个交互agent内操作的事务的相对范围和持续时间的序列图。<span> </span><br><img src="https://img-blog.csdn.net/20180126162108309?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ4OTIwNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br></p>
<p style="text-align:center;color:rgb(0,0,0);font-family:Helvetica, 'Hiragino Sans GB', '微软雅黑', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:15px;">
图 3: agent之间的事务交换</p>
<p style="color:rgb(0,0,0);font-family:Helvetica, 'Hiragino Sans GB', '微软雅黑', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:15px;">
这个机制也形成了错误处理的基本原理。当通过许多不同代理的flow在flow的任何分支上遇到通信故障时，受影响的event开始在flow的最后未受影响的agent处被缓冲。如果错误未能及时解决，这可能会导致最后未受影响的agent的失败，接下来会强制它前面的agent开始缓冲event。最终，如果当客户端将事件发送到其第一跳目的地时发生故障，则故障将被报告回客户端，然后客户端可以允许生成事件的应用采取适当的动作。</p>
<p style="color:rgb(0,0,0);font-family:Helvetica, 'Hiragino Sans GB', '微软雅黑', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:15px;">
另一方面，如果故障在第一跳的agent失败之前解决，则下游各种agent中的缓冲事件将开始向其目的地排出，最终，flow将恢复到其原始特性吞吐量水平，下图图4说明了在客户端和中央存储器之间的两个中间agent的flow经历瞬时故障的情况。故障发生在agent 2 和 存储器之间，到最后event在agent2 上缓存，一但故障解决，缓冲的events就会向中心存储器排出并且flow就会恢复原始吞吐量水平。<span> </span><br><img src="https://img-blog.csdn.net/20180126162119581?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ4OTIwNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br></p>
<p style="color:rgb(0,0,0);font-family:Helvetica, 'Hiragino Sans GB', '微软雅黑', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:15px;">
</p>
<div style="text-align:center;">图4：flow的错误处理。<span> </span></div>
在(a)中flow是正常的，event卡伊从client流向中央存储器，在(b)中Agent2和最终存储器通讯失败导致event被缓存在Agent2中，在(c)中，引起错误的原因解决，flow修复在agent2中缓存的event流向存储器。
<p></p>
<h2 id="5、拓扑设计需要考虑的" style="color:rgb(0,0,0);font-family:Helvetica, 'Hiragino Sans GB', '微软雅黑', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;">
5、拓扑设计需要考虑的</h2>
<p style="color:rgb(0,0,0);font-family:Helvetica, 'Hiragino Sans GB', '微软雅黑', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:15px;">
Flume非常灵活，允许大范围的可能部署场景。 如果您计划在大型生产部署中使用Flume，那么谨慎的做法是花一些时间考虑如何根据Flume拓扑来表达您的问题。 本节包括几个注意事项。</p>
<h4 id="5.1、Flume是否适合你的问题" style="color:rgb(0,0,0);font-family:Helvetica, 'Hiragino Sans GB', '微软雅黑', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;">
5.1、Flume是否适合你的问题</h4>
<p style="color:rgb(0,0,0);font-family:Helvetica, 'Hiragino Sans GB', '微软雅黑', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:15px;">
如果你需要将文本日志数据录入Hadoop / HDFS，那么Flume是完全适合你的问题。 对于其他用例，请参阅以下指南：<span> </span><br>
Flume设计用于在相对稳定，可能复杂的拓扑中传输和摄取定期生成的事件数据。“event data”这个定义是非常广泛的。对于Flume，一个event只是一个通用的blob的字节。一个event的大小是有限制的，例如，不能大于一台机器的内存或者磁盘大小，但是实际上Flume的event可以是从文本图像文件的日志条目。事件的关键属性是它们以连续的流传输方式生成，如果你的Flume数据不是定期产生的，flume仍然会工作。但是可能会overkill你的情况。Flume喜欢相对稳定的拓扑结构。你的拓扑结构不必是不可变的因为Flume可以处理拓扑的变化而不丢失数据也可以容忍周期性的由于故障切换或者添加设备的重新配置。他可能不会正常工作如果每天改变拓扑结构，因为重新配置需要花费一些思考和开销。</p>
<h4 id="5.2、Flume中Flow的可靠性" style="color:rgb(0,0,0);font-family:Helvetica, 'Hiragino Sans GB', '微软雅黑', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;">
5.2、Flume中Flow的可靠性</h4>
<p style="color:rgb(0,0,0);font-family:Helvetica, 'Hiragino Sans GB', '微软雅黑', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:15px;">
Flume<span> </span>flow的可靠性由多个因素决定，通过调整这些因素，你可以您可以使Flume实现多种可靠性选项。<span> </span><br><strong>a)、使用哪种类型的channel</strong><span> </span><br>
Flume由可持久的channel（持久化到磁盘）和非持久化得channel，持久化channel使用基于磁盘的存储，并且存储在此类通道中的数据将在整个机器重新启动或非磁盘相关故障中保留。<span> </span><br><strong>b)、Channel是否为工作负载有效配置</strong><span> </span><br>
Channel在Flume中扮演着缓存的角色在不同跳之间。这些buffers有着固定容量，一旦容量满了就会在flow上的前一个点创建black pressure，如果pressure传递到flow的源，Flume就会变为不可访问并且可能丢失数据。<span> </span><br><strong>c)、是否使用冗余的拓扑结构</strong><span> </span><br>
Flume让你在冗余拓扑中的复制flow。 这可以提供非常容易的容错source，并且能够克服磁盘或机器故障。<span> </span><br>
在Flume拓扑中最好方式考虑可靠性的方法是考虑各种失败的常见以及他们的输出。磁盘故障了怎么办?机器故障了怎么办？最终的sink某刻时间挂了或者有back presssure怎么办？可能设计的空间是巨大的，但你需要问的基本问题只是一个少数。</p>
<h4 id="5.3、Flume拓扑设计" style="color:rgb(0,0,0);font-family:Helvetica, 'Hiragino Sans GB', '微软雅黑', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;">
5.3、Flume拓扑设计</h4>
<p style="color:rgb(0,0,0);font-family:Helvetica, 'Hiragino Sans GB', '微软雅黑', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:15px;">
设计Flume拓扑的第一步是枚举数据的所有源和目标（终端sink）。 这些将定义拓扑的边缘点。 下一个考虑是是否引入中间聚合层或事件路由。 如果要从大量源收集数据，则汇总数据可以有所帮助，以便简化在终端接收器处的摄取。 聚合层还可以通过充当缓冲器来平滑来自source的突发或在sink处的不可用性。 如果您在不同位置之间路由数据，您可能还希望在不同点分流：这创建子拓扑本身可以包括聚合点。</p>
<h4 id="5.4、调整Flume部署大小" style="color:rgb(0,0,0);font-family:Helvetica, 'Hiragino Sans GB', '微软雅黑', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;">
5.4、调整Flume部署大小</h4>
<p style="color:rgb(0,0,0);font-family:Helvetica, 'Hiragino Sans GB', '微软雅黑', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:15px;">
一旦你知道你的拓扑将是什么样子，下一个问题是需要多少硬件和网络容量。这首先是量化您生成的数据量。这不总是一个简单的任务！大多数数据流是突发的（例如，由于昼夜模式）并且可能不可预测。一个很好的出发点是要想想在拓扑中的每一层的最大吞吐量，无论是在events per second and bytes per second。一旦知道给定层的所需吞吐量，就可以计算该层所需的节点数量的下限。要确定可达到的吞吐量，最好使用合成或采样事件数据在您的硬件上尝试Flume。一般来说，基于磁盘的通道应该获得10的MB / s，基于内存的通道应该获得100的MB
 / s或更多。性能将有很大变化，但是根据硬件和操作环境。<span> </span><br>
调整聚合吞吐量可为您提供每个层所需的节点数的下限。有几个原因需要有额外的节点，例如增加的冗余和更好的吸收突发负载的能力。</p>
<h4 id="5.5、处理agent故障" style="color:rgb(0,0,0);font-family:Helvetica, 'Hiragino Sans GB', '微软雅黑', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;">
5.5、处理agent故障</h4>
<p style="color:rgb(0,0,0);font-family:Helvetica, 'Hiragino Sans GB', '微软雅黑', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:15px;">
如果Flume<span> </span>agent故障，则托管在该代理上的所有流都将中止。 一旦代理重新启动，则flow将恢复。 使用文件通道或其他稳定通道的flow将恢复处理其中断的事件。 如果无法在同一硬件上重新启动代理，则可以选择将数据库迁移到另一个硬件并设置一个新的Flume代理，该代理可以恢复处理保存在数据库中的事件。 数据库HA特性可以用来将Flume<span> </span>agent移动到另一个主机。</p>
<h2 id="6、配置" style="color:rgb(0,0,0);font-family:Helvetica, 'Hiragino Sans GB', '微软雅黑', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;">
6、配置</h2>
<h4 id="6.1、配置文件" style="color:rgb(0,0,0);font-family:Helvetica, 'Hiragino Sans GB', '微软雅黑', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;">
6.1、配置文件</h4>
<p style="color:rgb(0,0,0);font-family:Helvetica, 'Hiragino Sans GB', '微软雅黑', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:15px;">
Flume<span> </span>配置是存储在一个本地配置文件中，它是依照java属性文件格式的文本文件。一个或者多个agent的配置可以放到同一个配置文件中。配置文件包括一个agent的的每个source，sink。channel的属性并且说明他们怎么连接起来形成data flow；</p>
<h4 id="6.2、配置单个组件" style="color:rgb(0,0,0);font-family:Helvetica, 'Hiragino Sans GB', '微软雅黑', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;">
6.2、配置单个组件</h4>
<p style="color:rgb(0,0,0);font-family:Helvetica, 'Hiragino Sans GB', '微软雅黑', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:15px;">
flow中的每个组件都具有特定于类型和实例化的名称，类型和属性集。例如，AVro source 需要一个hostname 以及一个端口号来接收数据。Memory channel 必须有最大队列长度，HDFS sink需要知道文件系统的URL，路径来创建文件，文件生成的频率等。一个组件的所有这些属性都需要在承载Flume<span> </span>agent的属性文件中设置。</p>
<h4 id="6.3、把每一部分都链接起来" style="color:rgb(0,0,0);font-family:Helvetica, 'Hiragino Sans GB', '微软雅黑', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;">
6.3、把每一部分都链接起来</h4>
<p style="color:rgb(0,0,0);font-family:Helvetica, 'Hiragino Sans GB', '微软雅黑', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:15px;">
agent需要知道那个单独的组件加载了也要知道怎么连在一起构成flow。这是通过在agent中列出每个source，channel以及sink的名字来完成的。</p>
            </div>
                </div>