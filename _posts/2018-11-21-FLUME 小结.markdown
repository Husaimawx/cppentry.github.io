---
layout:     post
title:      FLUME 小结
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<div class="alert alert-success description" style="border:1px solid rgb(214,233,198);color:rgb(70,136,71);font-family:'Open Sans', 'Helvetica Neue', Helvetica, 'Microsoft YaHei', 'WenQuanYi Micro Hei', Arial, sans-serif;font-size:16.8px;line-height:25.2px;background-color:rgb(223,240,216);">
<p>Flume最早是Cloudera提供的日志收集系统，目前是Apache下的一个孵化项目，Flume支持在日志系统中定制各类数据发送方，用于收集数据。</p>
</div>
<div class="mypage" style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(204,204,204);color:rgb(51,51,51);font-family:'Open Sans', 'Helvetica Neue', Helvetica, 'Microsoft YaHei', 'WenQuanYi Micro Hei', Arial, sans-serif;font-size:16.8px;line-height:25.2px;">
<h2 id="What’s-Flume" style="line-height:1.1;color:#008000;font-size:30px;">
<a href="http://blog.jassassin.com/2015/09/22/flume/flume/#What%E2%80%99s-Flume" rel="nofollow" class="headerlink" title="What’s Flume?" style="color:rgb(24,99,161);text-decoration:none;"></a>What’s Flume?</h2>
<p>Flume是Cloudera提供的一个分布式、可靠、可用的系统，它能够将不同数据源的海量日志数据进行高效收集、聚合、移动，最后存储到一个中心化数据存储系统中。由原来的Flume OG到现在的Flume NG，进行了架构重构，并且现在NG版本完全不兼容原来的OG版本。经过架构重构后，Flume NG更像是一个轻量的小工具，非常简单，容易适应各种方式日志收集，并支持failover和负载均衡。</p>
<p>Flume 使用 java 编写，其需要运行在 Java1.6 或更高版本之上，本文基于<a href="http://flume.apache.org/releases/1.6.0.html" rel="nofollow" style="color:rgb(24,99,161);text-decoration:none;">Flume NG 1.6.0</a><br>
官方网站：<a href="http://flume.apache.org/" rel="nofollow" style="color:rgb(24,99,161);text-decoration:none;">http://flume.apache.org/</a><br>
用户文档：<a href="http://flume.apache.org/FlumeUserGuide.html" rel="nofollow" style="color:rgb(24,99,161);text-decoration:none;">http://flume.apache.org/FlumeUserGuide.html</a><br>
开发文档：<a href="http://flume.apache.org/FlumeDeveloperGuide.html" rel="nofollow" style="color:rgb(24,99,161);text-decoration:none;">http://flume.apache.org/FlumeDeveloperGuide.html</a><br>
Flume API: <a href="http://flume.apache.org/releases/content/1.6.0/apidocs/index.html" rel="nofollow" style="color:rgb(24,99,161);text-decoration:none;">http://flume.apache.org/releases/content/1.6.0/apidocs/index.html</a></p>
<a id="more" style="color:rgb(24,99,161);"></a>
<h2 id="Flume-Agent关键组件" style="line-height:1.1;color:#008000;font-size:30px;">
<a href="http://blog.jassassin.com/2015/09/22/flume/flume/#Flume-Agent%E5%85%B3%E9%94%AE%E7%BB%84%E4%BB%B6" rel="nofollow" class="headerlink" title="Flume Agent关键组件" style="color:rgb(24,99,161);text-decoration:none;"></a>Flume Agent关键组件</h2>
<p>每个flume agent主要包括<a href="http://flume.apache.org/FlumeDeveloperGuide.html#source" rel="nofollow" style="color:rgb(24,99,161);text-decoration:none;">source</a>,<a href="http://flume.apache.org/FlumeDeveloperGuide.html#channel" rel="nofollow" style="color:rgb(24,99,161);text-decoration:none;">channel</a>,<a href="http://flume.apache.org/FlumeDeveloperGuide.html#sink" rel="nofollow" style="color:rgb(24,99,161);text-decoration:none;">sink</a>三个核心组件.<br><a href="http://blog.jassassin.com/imgs/flume/agent.jpg" rel="nofollow" title="agent" class="fancybox" style="color:rgb(24,99,161);text-decoration:none;"><img src="http://blog.jassassin.com/imgs/flume/agent.jpg" alt="agent" style="border:0px;vertical-align:middle;display:block;"></a></p>
<p>Source: 完成对日志数据的收集，分成 transtion 和 event 打入到channel之中。<br>
Channel: 主要提供一个队列的功能，对source提供中的数据进行简单的缓存。<br>
Sink: 取出Channel中的数据，进行相应的存储文件系统，数据库，或者提交到远程服务器。</p>
<p>注: <a href="http://flume.apache.org/releases/content/1.6.0/apidocs/org/apache/flume/Event.html" rel="nofollow" style="color:rgb(24,99,161);text-decoration:none;">Event</a>是Flume的基本数据单位,它携带日志数据(字节数组形式)并且携带有头信息.</p>
<h2 id="Flume-ng启动命令参数" style="line-height:1.1;color:#008000;font-size:30px;">
<a href="http://blog.jassassin.com/2015/09/22/flume/flume/#Flume-ng%E5%90%AF%E5%8A%A8%E5%91%BD%E4%BB%A4%E5%8F%82%E6%95%B0" rel="nofollow" class="headerlink" title="Flume ng启动命令参数" style="color:rgb(24,99,161);text-decoration:none;"></a>Flume ng启动命令参数</h2>
<table style="border-spacing:0px;vertical-align:middle;background-color:transparent;"><tbody><tr><td class="gutter" style="vertical-align:middle;border:none;">
<pre style="font-family:Menlo, 'Bitstream Vera Sans Mono', 'DejaVu Sans Mono', Monaco, Consolas, monospace;font-size:14px;line-height:20px;color:rgb(102,102,102);border:none;overflow:auto;width:36px;background:rgb(51,51,51) !important;"></pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div>
</td>
<td class="code" style="vertical-align:middle;border:none;">
<pre style="font-family:Menlo, 'Bitstream Vera Sans Mono', 'DejaVu Sans Mono', Monaco, Consolas, monospace;font-size:14px;line-height:20px;color:rgb(204,204,204);border:none;overflow:auto;background:rgb(51,51,51) !important;"></pre><div class="line">[root@flume-1 ~]<span class="comment" style="color:rgb(153,153,153);"># flume-ng</span></div><div class="line">Error: Unknown or unspecified <span class="built_in" style="color:rgb(249,145,87);">command</span> <span class="string" style="color:rgb(153,204,153);">''</span></div><div class="line"></div><div class="line">Usage: /opt/apache-flume-1.6.0-bin/bin/flume-ng &lt;<span class="built_in" style="color:rgb(249,145,87);">command</span>&gt; [options]...</div><div class="line"></div><div class="line">commands:</div><div class="line">  <span class="built_in" style="color:rgb(249,145,87);">help</span>                      display this <span class="built_in" style="color:rgb(249,145,87);">help</span> text</div><div class="line">  agent                     run a Flume agent</div><div class="line">  avro-client               run an avro Flume client</div><div class="line">  version                   show Flume version info</div><div class="line"></div><div class="line">global options:</div><div class="line">  --conf,-c &lt;conf&gt;          use configs <span class="keyword" style="color:rgb(204,153,204);">in</span> &lt;conf&gt; directory</div><div class="line">  --classpath,-C &lt;cp&gt;       append to the classpath</div><div class="line">  --dryrun,<span class="_">-d</span>               <span class="keyword" style="color:rgb(204,153,204);">do</span> not actually start Flume, just <span class="built_in" style="color:rgb(249,145,87);">print</span> the <span class="built_in" style="color:rgb(249,145,87);">command</span></div><div class="line">  --plugins-path &lt;<span class="built_in" style="color:rgb(249,145,87);">dirs</span>&gt;     colon-separated list of plugins.d directories. See the</div><div class="line">                            plugins.d section <span class="keyword" style="color:rgb(204,153,204);">in</span> the user guide <span class="keyword" style="color:rgb(204,153,204);">for</span> more details.</div><div class="line">                            Default: <span class="variable" style="color:rgb(242,119,122);">$FLUME_HOME</span>/plugins.d</div><div class="line">  -Dproperty=value          sets a Java system property value</div><div class="line">  -Xproperty=value          sets a Java -X option</div><div class="line"></div><div class="line">agent options:</div><div class="line">  --name,-n &lt;name&gt;          the name of this agent (required)</div><div class="line">  --conf-file,<span class="_">-f</span> &lt;file&gt;     specify a config file (required <span class="keyword" style="color:rgb(204,153,204);">if</span> -z missing)</div><div class="line">  --zkConnString,-z &lt;str&gt;   specify the ZooKeeper connection to use (required <span class="keyword" style="color:rgb(204,153,204);">if</span> <span class="_">-f</span> missing)</div><div class="line">  --zkBasePath,-p &lt;path&gt;    specify the base path <span class="keyword" style="color:rgb(204,153,204);">in</span> ZooKeeper <span class="keyword" style="color:rgb(204,153,204);">for</span> agent configs</div><div class="line">  --no-reload-conf          <span class="keyword" style="color:rgb(204,153,204);">do</span> not reload config file <span class="keyword" style="color:rgb(204,153,204);">if</span> changed</div><div class="line">  --help,-h                 display <span class="built_in" style="color:rgb(249,145,87);">help</span> text</div><div class="line"></div><div class="line">avro-client options:</div><div class="line">  --rpcProps,-P &lt;file&gt;   RPC client properties file with server connection params</div><div class="line">  --host,-H &lt;host&gt;       hostname to <span class="built_in" style="color:rgb(249,145,87);">which</span> events will be sent</div><div class="line">  --port,-p &lt;port&gt;       port of the avro <span class="built_in" style="color:rgb(249,145,87);">source</span></div><div class="line">  --dirname &lt;dir&gt;        directory to stream to avro <span class="built_in" style="color:rgb(249,145,87);">source</span></div><div class="line">  --filename,-F &lt;file&gt;   text file to stream to avro <span class="built_in" style="color:rgb(249,145,87);">source</span> (default: std input)</div><div class="line">  --headerFile,-R &lt;file&gt; File containing event headers as key/value pairs on each new line</div><div class="line">  --help,-h              display <span class="built_in" style="color:rgb(249,145,87);">help</span> text</div><div class="line"></div><div class="line">  Either --rpcProps or both --host and --port must be specified.</div><div class="line"></div><div class="line">Note that <span class="keyword" style="color:rgb(204,153,204);">if</span> &lt;conf&gt; directory is specified, <span class="keyword" style="color:rgb(204,153,204);">then</span> it is always included first</div><div class="line"><span class="keyword" style="color:rgb(204,153,204);">in</span> the classpath.</div>
</td>
</tr></tbody></table><table style="border-spacing:0px;vertical-align:middle;background-color:transparent;"><tbody><tr><td class="gutter" style="vertical-align:middle;border:none;">
<pre style="font-family:Menlo, 'Bitstream Vera Sans Mono', 'DejaVu Sans Mono', Monaco, Consolas, monospace;font-size:14px;line-height:20px;color:rgb(102,102,102);border:none;overflow:auto;width:28px;background:rgb(51,51,51) !important;"></pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div>
</td>
<td class="code" style="vertical-align:middle;border:none;">
<pre style="font-family:Menlo, 'Bitstream Vera Sans Mono', 'DejaVu Sans Mono', Monaco, Consolas, monospace;font-size:14px;line-height:20px;color:rgb(204,204,204);border:none;overflow:auto;background:rgb(51,51,51) !important;"></pre><div class="line">demo:</div><div class="line"></div><div class="line">$ bin/flume-ng agent --conf conf --conf-file example.conf </div><div class="line">	--name a1 -Dflume.root.logger=INFO,console</div>
</td>
</tr></tbody></table><h3 id="监控" style="line-height:1.1;color:rgb(156,76,23);font-size:24px;">
<a href="http://blog.jassassin.com/2015/09/22/flume/flume/#%E7%9B%91%E6%8E%A7" rel="nofollow" class="headerlink" title="监控" style="color:rgb(24,99,161);text-decoration:none;"></a>监控</h3>
<p>flume提供了一个度量框架，可以通过http的方式进行展现，当启动agent的时候通过传递参数 -Dflume.monitoring.type=http参数给flume agent:<br></p>
<table style="border-spacing:0px;vertical-align:middle;background-color:transparent;"><tbody><tr><td class="gutter" style="vertical-align:middle;border:none;">
<pre style="font-family:Menlo, 'Bitstream Vera Sans Mono', 'DejaVu Sans Mono', Monaco, Consolas, monospace;font-size:14px;line-height:20px;color:rgb(102,102,102);border:none;overflow:auto;width:28px;background:rgb(51,51,51) !important;"></pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div>
</td>
<td class="code" style="vertical-align:middle;border:none;">
<pre style="font-family:Menlo, 'Bitstream Vera Sans Mono', 'DejaVu Sans Mono', Monaco, Consolas, monospace;font-size:14px;line-height:20px;color:rgb(204,204,204);border:none;overflow:auto;background:rgb(51,51,51) !important;"></pre><div class="line">$ bin/flume-ng agent --conf conf --conf-file example.conf --name a1 </div><div class="line">		-Dflume.monitoring.type=http </div><div class="line">		-Dflume.monitoring.port=5653 </div><div class="line">		-Dflume.root.logger=INFO,console</div>
</td>
</tr></tbody></table><p></p>
<p>这样flume会在5653端口上启动一个HTTP服务器，访问如下地址，将返回JSON格式的flume相关指标参数:<br></p>
<table style="border-spacing:0px;vertical-align:middle;background-color:transparent;"><tbody><tr><td class="gutter" style="vertical-align:middle;border:none;">
<pre style="font-family:Menlo, 'Bitstream Vera Sans Mono', 'DejaVu Sans Mono', Monaco, Consolas, monospace;font-size:14px;line-height:20px;color:rgb(102,102,102);border:none;overflow:auto;width:36px;background:rgb(51,51,51) !important;"></pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div>
</td>
<td class="code" style="vertical-align:middle;border:none;">
<pre style="font-family:Menlo, 'Bitstream Vera Sans Mono', 'DejaVu Sans Mono', Monaco, Consolas, monospace;font-size:14px;line-height:20px;color:rgb(204,204,204);border:none;overflow:auto;background:rgb(51,51,51) !important;"></pre><div class="line">demo:</div><div class="line"></div><div class="line">访问: http://flume-agent-host:5653/metrics</div><div class="line">结果: 其中src-1是子自定义的source名称</div><div class="line">	{</div><div class="line">	"SOURCE.src-1":{</div><div class="line">		"OpenConnectionCount":"0",		//目前与客户端或sink保持连接的总数量(目前只有avro source展现该度量)</div><div class="line">		"Type":"SOURCE",					</div><div class="line">		"AppendBatchAcceptedCount":"1355",	//成功提交到channel的批次的总数量</div><div class="line">		"AppendBatchReceivedCount":"1355",	//接收到事件批次的总数量</div><div class="line">		"EventAcceptedCount":"28286",	//成功写出到channel的事件总数量，且source返回success给创建事件的sink或RPC客户端系统</div><div class="line">		"AppendReceivedCount":"0",		//每批只有一个事件的事件总数量(与RPC调用中的一个append调用相等)</div><div class="line">		"StopTime":"0",			//source停止时自Epoch以来的毫秒值时间</div><div class="line">		"StartTime":"1442566410435",	//source启动时自Epoch以来的毫秒值时间</div><div class="line">		"EventReceivedCount":"28286",	//目前为止source已经接收到的事件总数量</div><div class="line">		"AppendAcceptedCount":"0"		//单独传入的事件到Channel且成功返回的事件总数量</div><div class="line">	},</div><div class="line">	"CHANNEL.ch-1":{</div><div class="line">		"EventPutSuccessCount":"28286",	//成功写入channel且提交的事件总数量</div><div class="line">		"ChannelFillPercentage":"0.0",	//channel满时的百分比</div><div class="line">		"Type":"CHANNEL",</div><div class="line">		"StopTime":"0",			//channel停止时自Epoch以来的毫秒值时间</div><div class="line">		"EventPutAttemptCount":"28286",	//Source尝试写入Channe的事件总数量</div><div class="line">		"ChannelSize":"0",			//目前channel中事件的总数量</div><div class="line">		"StartTime":"1442566410326",	//channel启动时自Epoch以来的毫秒值时间</div><div class="line">		"EventTakeSuccessCount":"28286",	//sink成功读取的事件的总数量</div><div class="line">		"ChannelCapacity":"1000000",       //channel的容量</div><div class="line">		"EventTakeAttemptCount":"313734329512" //sink尝试从channel拉取事件的总数量。这不意味着每次事件都被返回，因为sink拉取的时候channel可能没有任何数据</div><div class="line">	},</div><div class="line">	"SINK.sink-1":{</div><div class="line">		"Type":"SINK",</div><div class="line">		"ConnectionClosedCount":"0",	//下一阶段或存储系统关闭的连接数量(如在HDFS中关闭一个文件)</div><div class="line">		"EventDrainSuccessCount":"28286",	//sink成功写出到存储的事件总数量</div><div class="line">		"KafkaEventSendTimer":"482493",    </div><div class="line">		"BatchCompleteCount":"0",		//与最大批量尺寸相等的批量的数量</div><div class="line">		"ConnectionFailedCount":"0",	//下一阶段或存储系统由于错误关闭的连接数量（如HDFS上一个新创建的文件因为超时而关闭）</div><div class="line">		"EventDrainAttemptCount":"0",	//sink尝试写出到存储的事件总数量</div><div class="line">		"ConnectionCreatedCount":"0",	//下一个阶段或存储系统创建的连接数量（如HDFS创建一个新文件）</div><div class="line">		"BatchEmptyCount":"0",		//空的批量的数量，如果数量很大表示souce写数据比sink清理数据慢速度慢很多</div><div class="line">		"StopTime":"0",			</div><div class="line">		"RollbackCount":"9",			//</div><div class="line">		"StartTime":"1442566411897",</div><div class="line">		"BatchUnderflowCount":"0"		//比sink配置使用的最大批量尺寸更小的批量的数量，如果该值很高也表示sink比souce更快</div><div class="line">	}</div><div class="line">	}</div>
</td>
</tr></tbody></table><p></p>
<p>Flume也可发送度量信息给<a href="http://ganglia.info/" rel="nofollow" style="color:rgb(24,99,161);text-decoration:none;">Ganglia</a>，用来监控Flume。在任何时候只能启用一个Ganglia或HTTP监控。Flume默认一分钟一次周期性的向Ganglia报告度量:</p>
<table style="border-spacing:0px;vertical-align:middle;background-color:transparent;"><tbody><tr><td class="gutter" style="vertical-align:middle;border:none;">
<pre style="font-family:Menlo, 'Bitstream Vera Sans Mono', 'DejaVu Sans Mono', Monaco, Consolas, monospace;font-size:14px;line-height:20px;color:rgb(102,102,102);border:none;overflow:auto;width:28px;background:rgb(51,51,51) !important;"></pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div>
</td>
<td class="code" style="vertical-align:middle;border:none;">
<pre style="font-family:Menlo, 'Bitstream Vera Sans Mono', 'DejaVu Sans Mono', Monaco, Consolas, monospace;font-size:14px;line-height:20px;color:rgb(204,204,204);border:none;overflow:auto;background:rgb(51,51,51) !important;"></pre><div class="line">demo:</div><div class="line"></div><div class="line">$ bin/flume-ng agent --conf conf --conf-file example.conf --name a1 </div><div class="line">		-Dflume.monitoring.type=ganglia  # 默认情况下flume以Ganglia3.1格式报告指标</div><div class="line">		-Dflume.monitoring.pollFrequency=45 # 报告间隔时间(秒)</div><div class="line">		-Dflume.monitoring.isGanglia3=true # 启用ganglia3个格式报告 </div><div class="line">		-Dflume.root.logger=INFO,console</div>
</td>
</tr></tbody></table><h3 id="日志相关" style="line-height:1.1;color:rgb(156,76,23);font-size:24px;">
<a href="http://blog.jassassin.com/2015/09/22/flume/flume/#%E6%97%A5%E5%BF%97%E7%9B%B8%E5%85%B3" rel="nofollow" class="headerlink" title="日志相关" style="color:rgb(24,99,161);text-decoration:none;"></a>日志相关</h3>
<table style="border-spacing:0px;vertical-align:middle;background-color:transparent;"><tbody><tr><td class="gutter" style="vertical-align:middle;border:none;">
<pre style="font-family:Menlo, 'Bitstream Vera Sans Mono', 'DejaVu Sans Mono', Monaco, Consolas, monospace;font-size:14px;line-height:20px;color:rgb(102,102,102);border:none;overflow:auto;width:28px;background:rgb(51,51,51) !important;"></pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div>
</td>
<td class="code" style="vertical-align:middle;border:none;">
<pre style="font-family:Menlo, 'Bitstream Vera Sans Mono', 'DejaVu Sans Mono', Monaco, Consolas, monospace;font-size:14px;line-height:20px;color:rgb(204,204,204);border:none;overflow:auto;background:rgb(51,51,51) !important;"></pre><div class="line">$ bin/flume-ng agent --conf conf --conf-file example.conf  --name a1 -Dflume.root.logger=INFO,console</div><div class="line"></div><div class="line"><span class="comment" style="color:rgb(153,153,153);"># -Dflume.root.logger=INFO,console 该参数将会把flume的日志输出到console,为了将其输出到日志文件(默认</span></div><div class="line">在<span class="variable" style="color:rgb(242,119,122);">$FLUME_HOME</span>/logs),可以将console改为LOGFILE形式,具体的配置可以修改<span class="variable" style="color:rgb(242,119,122);">$FLUME_HOME</span>/conf/<span class="built_in" style="color:rgb(249,145,87);">log</span>4j.properties</div>
</td>
</tr></tbody></table><h2 id="自定义Flume组件" style="line-height:1.1;color:#008000;font-size:30px;">
<a href="http://blog.jassassin.com/2015/09/22/flume/flume/#%E8%87%AA%E5%AE%9A%E4%B9%89Flume%E7%BB%84%E4%BB%B6" rel="nofollow" class="headerlink" title="自定义Flume组件" style="color:rgb(24,99,161);text-decoration:none;"></a>自定义Flume组件</h2>
<p>Flume本身可插拔的架构设计，使得开发自定义插件变得很容易。Flume本身提供了非常丰富的source、channel、sink以及拦截器等插件可供选择，基本可以满足生产需要。具体可以参考<a href="http://flume.apache.org/FlumeUserGuide.html" rel="nofollow" style="color:rgb(24,99,161);text-decoration:none;">Flume用户文档</a>.</p>
<h3 id="plugins-d目录" style="line-height:1.1;color:rgb(156,76,23);font-size:24px;">
<a href="http://blog.jassassin.com/2015/09/22/flume/flume/#plugins-d%E7%9B%AE%E5%BD%95" rel="nofollow" class="headerlink" title="plugins.d目录" style="color:rgb(24,99,161);text-decoration:none;"></a>plugins.d目录</h3>
<p><code style="font-family:Menlo, 'Bitstream Vera Sans Mono', 'DejaVu Sans Mono', Monaco, Consolas, monospace;font-size:15.12px;color:rgb(199,37,78);border:1px solid rgb(214,214,214);background:rgb(238,238,238);">plugins.d</code>是flume事先约定的存放自定义组件的目录。flume在启动的时候会自动将该目录下的文件添加到classpath下，当然你也可以在flume-ng
 启动时通过指定<code style="font-family:Menlo, 'Bitstream Vera Sans Mono', 'DejaVu Sans Mono', Monaco, Consolas, monospace;font-size:15.12px;color:rgb(199,37,78);border:1px solid rgb(214,214,214);background:rgb(238,238,238);">--classpath,-C
 &lt;cp&gt;</code>参数将自己的文件手动添加到classpath下。<br>
相关目录说明:<br></p>
<table style="border-spacing:0px;vertical-align:middle;background-color:transparent;"><tbody><tr><td class="gutter" style="vertical-align:middle;border:none;">
<pre style="font-family:Menlo, 'Bitstream Vera Sans Mono', 'DejaVu Sans Mono', Monaco, Consolas, monospace;font-size:14px;line-height:20px;color:rgb(102,102,102);border:none;overflow:auto;width:28px;background:rgb(51,51,51) !important;"></pre><div class="line">1</div><div class="line">2</div><div class="line">3</div>
</td>
<td class="code" style="vertical-align:middle;border:none;">
<pre style="font-family:Menlo, 'Bitstream Vera Sans Mono', 'DejaVu Sans Mono', Monaco, Consolas, monospace;font-size:14px;line-height:20px;color:rgb(204,204,204);border:none;overflow:auto;background:rgb(51,51,51) !important;"></pre><div class="line">plugins.d/xxx/lib - 插件jar</div><div class="line">plugins.d/xxx/libext - 插件依赖jar</div><div class="line">plugins.d/xxx/native - 本地库文件如 .so文件</div>
</td>
</tr></tbody></table><p></p>
<h3 id="拦截器" style="line-height:1.1;color:rgb(156,76,23);font-size:24px;">
<a href="http://blog.jassassin.com/2015/09/22/flume/flume/#%E6%8B%A6%E6%88%AA%E5%99%A8" rel="nofollow" class="headerlink" title="拦截器" style="color:rgb(24,99,161);text-decoration:none;"></a>拦截器</h3>
<p>拦截器(Interceptor)是简单插件式组件，设置在Source和Source写入数据的Channel之间。Source接收到的事件在写入对应的Channel之前，拦截器都可以转换或删除这些事件。每个拦截器实例只处理同一个Source接收的事件。拦截器可以基于任意标准删除或转换事件，但是拦截器必须返回尽可能多(尽可能少)的事件，如同原始传递过来的事件.因为拦截器必须在事件写入Channel之前完成操作，只有当拦截器已成功转换事件后，RPC
 Source（和任何其他可能产生超时的Source）才会响应发送事件的客户端或Sink。因此尽量不要在拦截器中做大量耗时的处理操作。如果不得已这么处理了，那么需要相应的调整超时时间属性。Flume自身提供了多种类型的拦截器，比如:<a href="http://flume.apache.org/FlumeUserGuide.html#timestamp-interceptor" rel="nofollow" style="color:rgb(24,99,161);text-decoration:none;">时间戳拦截器</a>、<a href="http://flume.apache.org/FlumeUserGuide.html#host-interceptor" rel="nofollow" style="color:rgb(24,99,161);text-decoration:none;">主机拦截器</a>、<a href="http://flume.apache.org/FlumeUserGuide.html#regex-filtering-interceptor" rel="nofollow" style="color:rgb(24,99,161);text-decoration:none;">正则过滤拦截器</a>等等。更多内容可以参考<a href="http://flume.apache.org/FlumeUserGuide.html#flume-interceptors" rel="nofollow" style="color:rgb(24,99,161);text-decoration:none;">Flume
 Interceptors</a></p>
<p>拦截器一般用于分析事件以及在需要的时候丢弃事件。编写拦截器时，实现者只需要写以一个实现Interceptor接口的类，同时实现Interceptor$Builder接口的Builer类。所有的Builder类必须有一个公共无参的构造方法，Flume使用该方法来进行实例化。可以使用传递到Builder类的Context实例配置拦截器。所有需要的参数都要传递到Context实例。下面是<a href="http://flume.apache.org/FlumeUserGuide.html#timestamp-interceptor" rel="nofollow" style="color:rgb(24,99,161);text-decoration:none;">时间戳拦截器</a>的实现:<br></p>
<table style="border-spacing:0px;vertical-align:middle;background-color:transparent;"><tbody><tr><td class="gutter" style="vertical-align:middle;border:none;">
<pre style="font-family:Menlo, 'Bitstream Vera Sans Mono', 'DejaVu Sans Mono', Monaco, Consolas, monospace;font-size:14px;line-height:20px;color:rgb(102,102,102);border:none;overflow:auto;width:36px;background:rgb(51,51,51) !important;"></pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div>
</td>
<td class="code" style="vertical-align:middle;border:none;">
<pre style="font-family:Menlo, 'Bitstream Vera Sans Mono', 'DejaVu Sans Mono', Monaco, Consolas, monospace;font-size:14px;line-height:20px;color:rgb(204,204,204);border:none;overflow:auto;background:rgb(51,51,51) !important;"></pre><div class="line"><span class="keyword" style="color:rgb(204,153,204);">public</span> <span class="class" style="color:rgb(153,204,153);"><span class="keyword" style="color:rgb(204,153,204);">class</span> <span class="title" style="color:rgb(153,153,153);">TimestampInterceptor</span> <span class="keyword" style="color:rgb(204,153,204);">implements</span> <span class="title" style="color:rgb(153,153,153);">Interceptor</span> </span>{</div><div class="line"></div><div class="line">  <span class="keyword" style="color:rgb(204,153,204);">private</span> <span class="keyword" style="color:rgb(204,153,204);">final</span> <span class="keyword" style="color:rgb(204,153,204);">boolean</span> preserveExisting;</div><div class="line"></div><div class="line">  <span class="comment" style="color:rgb(153,153,153);">/**</span></div><div class="line">   * 该构造方法只能被Builder调用</div><div class="line">   */</div><div class="line">  <span class="function" style="color:rgb(102,153,204);"><span class="keyword" style="color:rgb(204,153,204);">private</span> <span class="title" style="color:rgb(153,153,153);">TimestampInterceptor</span><span class="params" style="color:rgb(249,145,87);">(<span class="keyword" style="color:rgb(204,153,204);">boolean</span> preserveExisting)</span> </span>{</div><div class="line">    <span class="keyword" style="color:rgb(204,153,204);">this</span>.preserveExisting = preserveExisting;</div><div class="line">  }</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function" style="color:rgb(102,153,204);"><span class="keyword" style="color:rgb(204,153,204);">public</span> <span class="keyword" style="color:rgb(204,153,204);">void</span> <span class="title" style="color:rgb(153,153,153);">initialize</span><span class="params" style="color:rgb(249,145,87);">()</span> </span>{</div><div class="line">    <span class="comment" style="color:rgb(153,153,153);">// no-op</span></div><div class="line">  }</div><div class="line"></div><div class="line">  <span class="comment" style="color:rgb(153,153,153);">/**</span></div><div class="line">   * Modifies events in-place.</div><div class="line">   */</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function" style="color:rgb(102,153,204);"><span class="keyword" style="color:rgb(204,153,204);">public</span> Event <span class="title" style="color:rgb(153,153,153);">intercept</span><span class="params" style="color:rgb(249,145,87);">(Event event)</span> </span>{</div><div class="line">    Map&lt;String, String&gt; headers = event.getHeaders();</div><div class="line">    <span class="keyword" style="color:rgb(204,153,204);">if</span> (preserveExisting &amp;&amp; headers.containsKey(TIMESTAMP)) {</div><div class="line">      <span class="comment" style="color:rgb(153,153,153);">// we must preserve the existing timestamp</span></div><div class="line">    } <span class="keyword" style="color:rgb(204,153,204);">else</span> {</div><div class="line">      <span class="keyword" style="color:rgb(204,153,204);">long</span> now = System.currentTimeMillis();</div><div class="line">      headers.put(TIMESTAMP, Long.toString(now));</div><div class="line">    }</div><div class="line">    <span class="keyword" style="color:rgb(204,153,204);">return</span> event;</div><div class="line">  }</div><div class="line"></div><div class="line">  <span class="comment" style="color:rgb(153,153,153);">/**</span></div><div class="line">   * Delegates to {<span class="doctag">@link</span> #intercept(Event)} in a loop.</div><div class="line">   * <span class="doctag">@param</span> events</div><div class="line">   * <span class="doctag">@return</span></div><div class="line">   */</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function" style="color:rgb(102,153,204);"><span class="keyword" style="color:rgb(204,153,204);">public</span> List&lt;Event&gt; <span class="title" style="color:rgb(153,153,153);">intercept</span><span class="params" style="color:rgb(249,145,87);">(List&lt;Event&gt; events)</span> </span>{</div><div class="line">    <span class="keyword" style="color:rgb(204,153,204);">for</span> (Event event : events) {</div><div class="line">      intercept(event);</div><div class="line">    }</div><div class="line">    <span class="keyword" style="color:rgb(204,153,204);">return</span> events;</div><div class="line">  }</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function" style="color:rgb(102,153,204);"><span class="keyword" style="color:rgb(204,153,204);">public</span> <span class="keyword" style="color:rgb(204,153,204);">void</span> <span class="title" style="color:rgb(153,153,153);">close</span><span class="params" style="color:rgb(249,145,87);">()</span> </span>{</div><div class="line">    <span class="comment" style="color:rgb(153,153,153);">// no-op</span></div><div class="line">  }</div><div class="line"></div><div class="line">  <span class="comment" style="color:rgb(153,153,153);">/**</span></div><div class="line">   * Builder which builds new instances of the TimestampInterceptor.</div><div class="line">   */</div><div class="line">  <span class="keyword" style="color:rgb(204,153,204);">public</span> <span class="keyword" style="color:rgb(204,153,204);">static</span> <span class="class" style="color:rgb(153,204,153);"><span class="keyword" style="color:rgb(204,153,204);">class</span> <span class="title" style="color:rgb(153,153,153);">Builder</span> <span class="keyword" style="color:rgb(204,153,204);">implements</span> <span class="title" style="color:rgb(153,153,153);">Interceptor</span>.<span class="title" style="color:rgb(153,153,153);">Builder</span> </span>{</div><div class="line"></div><div class="line">    <span class="keyword" style="color:rgb(204,153,204);">private</span> <span class="keyword" style="color:rgb(204,153,204);">boolean</span> preserveExisting = PRESERVE_DFLT;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function" style="color:rgb(102,153,204);"><span class="keyword" style="color:rgb(204,153,204);">public</span> Interceptor <span class="title" style="color:rgb(153,153,153);">build</span><span class="params" style="color:rgb(249,145,87);">()</span> </span>{</div><div class="line">      <span class="keyword" style="color:rgb(204,153,204);">return</span> <span class="keyword" style="color:rgb(204,153,204);">new</span> TimestampInterceptor(preserveExisting);</div><div class="line">    }</div><div class="line">    </div><div class="line">     <span class="comment" style="color:rgb(153,153,153);">//通过Context传递配置参数</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function" style="color:rgb(102,153,204);"><span class="keyword" style="color:rgb(204,153,204);">public</span> <span class="keyword" style="color:rgb(204,153,204);">void</span> <span class="title" style="color:rgb(153,153,153);">configure</span><span class="params" style="color:rgb(249,145,87);">(Context context)</span> </span>{</div><div class="line">      preserveExisting = context.getBoolean(PRESERVE, PRESERVE_DFLT);</div><div class="line">    }</div><div class="line"></div><div class="line">  }</div><div class="line"></div><div class="line">  <span class="keyword" style="color:rgb(204,153,204);">public</span> <span class="keyword" style="color:rgb(204,153,204);">static</span> <span class="class" style="color:rgb(153,204,153);"><span class="keyword" style="color:rgb(204,153,204);">class</span> <span class="title" style="color:rgb(153,153,153);">Constants</span> </span>{</div><div class="line">    <span class="keyword" style="color:rgb(204,153,204);">public</span> <span class="keyword" style="color:rgb(204,153,204);">static</span> String TIMESTAMP = <span class="string" style="color:rgb(153,204,153);">"timestamp"</span>;</div><div class="line">    <span class="keyword" style="color:rgb(204,153,204);">public</span> <span class="keyword" style="color:rgb(204,153,204);">static</span> String PRESERVE = <span class="string" style="color:rgb(153,204,153);">"preserveExisting"</span>;</div><div class="line">    <span class="keyword" style="color:rgb(204,153,204);">public</span> <span class="keyword" style="color:rgb(204,153,204);">static</span> <span class="keyword" style="color:rgb(204,153,204);">boolean</span> PRESERVE_DFLT = <span class="keyword" style="color:rgb(204,153,204);">false</span>;</div><div class="line">  }</div><div class="line"></div><div class="line">}</div>
</td>
</tr></tbody></table><p></p>
<p>注：</p>
<ol><li>intercept()的两个方法必须是线程安全的，因为如果source运行在多线程情况下，这些方法可能会被多个线程调用。</li><li>
<p>自定义拦截器的配置方式，interceptors type配置的是<code style="font-family:Menlo, 'Bitstream Vera Sans Mono', 'DejaVu Sans Mono', Monaco, Consolas, monospace;font-size:15.12px;color:rgb(199,37,78);border:1px solid rgb(214,214,214);background:rgb(238,238,238);">XXXInterceptor$Builder</code>:</p>
<table style="border-spacing:0px;vertical-align:middle;background-color:transparent;"><tbody><tr><td class="gutter" style="vertical-align:middle;border:none;">
<pre style="font-family:Menlo, 'Bitstream Vera Sans Mono', 'DejaVu Sans Mono', Monaco, Consolas, monospace;font-size:14px;line-height:20px;color:rgb(102,102,102);border:none;overflow:auto;width:28px;background:rgb(51,51,51) !important;"></pre><div class="line">1</div><div class="line">2</div><div class="line">3</div>
</td>
<td class="code" style="vertical-align:middle;border:none;">
<pre style="font-family:Menlo, 'Bitstream Vera Sans Mono', 'DejaVu Sans Mono', Monaco, Consolas, monospace;font-size:14px;line-height:20px;color:rgb(204,204,204);border:none;overflow:auto;background:rgb(51,51,51) !important;"></pre><div class="line">#自定义拦截器  --producer agent名称  --src-1 source名称   —-i1 拦截器名称  </div><div class="line">producer.sources.src-1.interceptors = i1</div><div class="line">producer.sources.src-1.interceptors.i1.type = com.networkbench.browser.flume.interceptor.MyBrowserInterceptor$Builder</div>
</td>
</tr></tbody></table></li><li>
<p>将自定义代码打包放置到前面的<code style="font-family:Menlo, 'Bitstream Vera Sans Mono', 'DejaVu Sans Mono', Monaco, Consolas, monospace;font-size:15.12px;color:rgb(199,37,78);border:1px solid rgb(214,214,214);background:rgb(238,238,238);">plugins.d/ext-interceptors(可以自己命名)/lib</code>目录下，启动flume时会自动加载该jar到classpath</p>
</li></ol><h3 id="解析器" style="line-height:1.1;color:rgb(156,76,23);font-size:24px;">
<a href="http://blog.jassassin.com/2015/09/22/flume/flume/#%E8%A7%A3%E6%9E%90%E5%99%A8" rel="nofollow" class="headerlink" title="解析器" style="color:rgb(24,99,161);text-decoration:none;"></a>解析器</h3>
<p>Source使用嵌入式的反序列化器读取监控目录下的文件(这里以Spooling Directory Source为例)，默认的反序列化器是<a href="http://flume.apache.org/releases/content/1.6.0/apidocs/org/apache/flume/serialization/LineDeserializer.html" rel="nofollow" style="color:rgb(24,99,161);text-decoration:none;">LineDeserializer</a>。该反序列化器会按行读取文件中的内容，封装成一个Event消息。默认一次读取的最大长度是2048个字符，你可以通过如下配置参数设置改值:<br></p>
<table style="border-spacing:0px;vertical-align:middle;background-color:transparent;"><tbody><tr><td class="gutter" style="vertical-align:middle;border:none;">
<pre style="font-family:Menlo, 'Bitstream Vera Sans Mono', 'DejaVu Sans Mono', Monaco, Consolas, monospace;font-size:14px;line-height:20px;color:rgb(102,102,102);border:none;overflow:auto;width:28px;background:rgb(51,51,51) !important;"></pre><div class="line">1</div><div class="line">2</div>
</td>
<td class="code" style="vertical-align:middle;border:none;">
<pre style="font-family:Menlo, 'Bitstream Vera Sans Mono', 'DejaVu Sans Mono', Monaco, Consolas, monospace;font-size:14px;line-height:20px;color:rgb(204,204,204);border:none;overflow:auto;background:rgb(51,51,51) !important;"></pre><div class="line"># --producer agent名称  --src-1 source名称 </div><div class="line">producer.sources.src-1.deserializer.maxLineLength = 20480</div>
</td>
</tr></tbody></table><p></p>
<p>因此在使用LineDeserializer时对源文件内容有个粗略的估计，否则，当某行的内容超出最大长度时。该行内容会被截取成两个部分，封装成两个Event发送到channel中。这样，在某些场景下该行消息相当于非法消息了。如，某个文件按行记录一个http请求的所有内容，而事先我们无法预知一行http请求的最大长度(当然理论上你可以将maxLineLength设置成一个较大的值，解决该问题)。但是这里要说的是另外一种解决方案，很简单,参考LineDeserializer实现一个不限制最大长度的解析器（flume之所以这么设计是出于什么角度考虑?）。反序列化器的定义和前面的拦截器基本相同:<br></p>
<table style="border-spacing:0px;vertical-align:middle;background-color:transparent;"><tbody><tr><td class="gutter" style="vertical-align:middle;border:none;">
<pre style="font-family:Menlo, 'Bitstream Vera Sans Mono', 'DejaVu Sans Mono', Monaco, Consolas, monospace;font-size:14px;line-height:20px;color:rgb(102,102,102);border:none;overflow:auto;width:36px;background:rgb(51,51,51) !important;"></pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div>
</td>
<td class="code" style="vertical-align:middle;border:none;">
<pre style="font-family:Menlo, 'Bitstream Vera Sans Mono', 'DejaVu Sans Mono', Monaco, Consolas, monospace;font-size:14px;line-height:20px;color:rgb(204,204,204);border:none;overflow:auto;background:rgb(51,51,51) !important;"></pre><div class="line"><span class="keyword" style="color:rgb(204,153,204);">public</span> <span class="class" style="color:rgb(153,204,153);"><span class="keyword" style="color:rgb(204,153,204);">class</span> <span class="title" style="color:rgb(153,153,153);">LineDeserializer</span> <span class="keyword" style="color:rgb(204,153,204);">implements</span> <span class="title" style="color:rgb(153,153,153);">EventDeserializer</span> </span>{</div><div class="line"></div><div class="line">  <span class="keyword" style="color:rgb(204,153,204);">private</span> <span class="keyword" style="color:rgb(204,153,204);">static</span> <span class="keyword" style="color:rgb(204,153,204);">final</span> Logger logger = LoggerFactory.getLogger(LineDeserializer.class);</div><div class="line"></div><div class="line">  <span class="keyword" style="color:rgb(204,153,204);">private</span> <span class="keyword" style="color:rgb(204,153,204);">final</span> ResettableInputStream in;</div><div class="line">  <span class="keyword" style="color:rgb(204,153,204);">private</span> <span class="keyword" style="color:rgb(204,153,204);">final</span> Charset outputCharset;</div><div class="line">  <span class="keyword" style="color:rgb(204,153,204);">private</span> <span class="keyword" style="color:rgb(204,153,204);">final</span> <span class="keyword" style="color:rgb(204,153,204);">int</span> maxLineLength;</div><div class="line">  <span class="keyword" style="color:rgb(204,153,204);">private</span> <span class="keyword" style="color:rgb(204,153,204);">volatile</span> <span class="keyword" style="color:rgb(204,153,204);">boolean</span> isOpen;</div><div class="line"></div><div class="line">  <span class="keyword" style="color:rgb(204,153,204);">public</span> <span class="keyword" style="color:rgb(204,153,204);">static</span> <span class="keyword" style="color:rgb(204,153,204);">final</span> String OUT_CHARSET_KEY = <span class="string" style="color:rgb(153,204,153);">"outputCharset"</span>;</div><div class="line">  <span class="keyword" style="color:rgb(204,153,204);">public</span> <span class="keyword" style="color:rgb(204,153,204);">static</span> <span class="keyword" style="color:rgb(204,153,204);">final</span> String CHARSET_DFLT = <span class="string" style="color:rgb(153,204,153);">"UTF-8"</span>;</div><div class="line"></div><div class="line">  <span class="keyword" style="color:rgb(204,153,204);">public</span> <span class="keyword" style="color:rgb(204,153,204);">static</span> <span class="keyword" style="color:rgb(204,153,204);">final</span> String MAXLINE_KEY = <span class="string" style="color:rgb(153,204,153);">"maxLineLength"</span>;</div><div class="line">  <span class="keyword" style="color:rgb(204,153,204);">public</span> <span class="keyword" style="color:rgb(204,153,204);">static</span> <span class="keyword" style="color:rgb(204,153,204);">final</span> <span class="keyword" style="color:rgb(204,153,204);">int</span> MAXLINE_DFLT = <span class="number" style="color:rgb(249,145,87);">2048</span>;</div><div class="line"></div><div class="line">  LineDeserializer(Context context, ResettableInputStream in) {</div><div class="line">    <span class="keyword" style="color:rgb(204,153,204);">this</span>.in = in;</div><div class="line">    <span class="keyword" style="color:rgb(204,153,204);">this</span>.outputCharset = Charset.forName(context.getString(OUT_CHARSET_KEY, CHARSET_DFLT));</div><div class="line">    <span class="keyword" style="color:rgb(204,153,204);">this</span>.maxLineLength = context.getInteger(MAXLINE_KEY, MAXLINE_DFLT);</div><div class="line">    <span class="keyword" style="color:rgb(204,153,204);">this</span>.isOpen = <span class="keyword" style="color:rgb(204,153,204);">true</span>;</div><div class="line">  }</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function" style="color:rgb(102,153,204);"><span class="keyword" style="color:rgb(204,153,204);">public</span> Event <span class="title" style="color:rgb(153,153,153);">readEvent</span><span class="params" style="color:rgb(249,145,87);">()</span> <span class="keyword" style="color:rgb(204,153,204);">throws</span> IOException </span>{</div><div class="line">    ensureOpen();</div><div class="line">    String line = readLine();</div><div class="line">    <span class="keyword" style="color:rgb(204,153,204);">if</span> (line == <span class="keyword" style="color:rgb(204,153,204);">null</span>) {</div><div class="line">      <span class="keyword" style="color:rgb(204,153,204);">return</span> <span class="keyword" style="color:rgb(204,153,204);">null</span>;</div><div class="line">    } <span class="keyword" style="color:rgb(204,153,204);">else</span> {</div><div class="line">      <span class="keyword" style="color:rgb(204,153,204);">return</span> EventBuilder.withBody(line, outputCharset);</div><div class="line">    }</div><div class="line">  }</div><div class="line"> </div><div class="line">  ...</div><div class="line"></div><div class="line">  <span class="comment" style="color:rgb(153,153,153);">// <span class="doctag">TODO:</span> consider not returning a final character that is a high surrogate</span></div><div class="line">  <span class="comment" style="color:rgb(153,153,153);">// when truncating</span></div><div class="line">  <span class="function" style="color:rgb(102,153,204);"><span class="keyword" style="color:rgb(204,153,204);">private</span> String <span class="title" style="color:rgb(153,153,153);">readLine</span><span class="params" style="color:rgb(249,145,87);">()</span> <span class="keyword" style="color:rgb(204,153,204);">throws</span> IOException </span>{</div><div class="line">    StringBuilder sb = <span class="keyword" style="color:rgb(204,153,204);">new</span> StringBuilder();</div><div class="line">    <span class="keyword" style="color:rgb(204,153,204);">int</span> c;</div><div class="line">    <span class="keyword" style="color:rgb(204,153,204);">int</span> readChars = <span class="number" style="color:rgb(249,145,87);">0</span>;</div><div class="line">    <span class="keyword" style="color:rgb(204,153,204);">while</span> ((c = in.readChar()) != -<span class="number" style="color:rgb(249,145,87);">1</span>) {</div><div class="line">      readChars++;</div><div class="line"></div><div class="line">      <span class="comment" style="color:rgb(153,153,153);">// <span class="doctag">FIXME:</span> support \r\n</span></div><div class="line">      <span class="keyword" style="color:rgb(204,153,204);">if</span> (c == <span class="string" style="color:rgb(153,204,153);">'\n'</span>) {</div><div class="line">        <span class="keyword" style="color:rgb(204,153,204);">break</span>;</div><div class="line">      }</div><div class="line"></div><div class="line">      sb.append((<span class="keyword" style="color:rgb(204,153,204);">char</span>)c);</div><div class="line">	</div><div class="line">       <span class="comment" style="color:rgb(153,153,153);">// 限制最大长度</span></div><div class="line">      <span class="keyword" style="color:rgb(204,153,204);">if</span> (readChars &gt;= maxLineLength) {</div><div class="line">        logger.warn(<span class="string" style="color:rgb(153,204,153);">"Line length exceeds max ({}), truncating line!"</span>, maxLineLength);</div><div class="line">        <span class="keyword" style="color:rgb(204,153,204);">break</span>;</div><div class="line">      }</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword" style="color:rgb(204,153,204);">if</span> (readChars &gt; <span class="number" style="color:rgb(249,145,87);">0</span>) {</div><div class="line">      <span class="keyword" style="color:rgb(204,153,204);">return</span> sb.toString();</div><div class="line">    } <span class="keyword" style="color:rgb(204,153,204);">else</span> {</div><div class="line">      <span class="keyword" style="color:rgb(204,153,204);">return</span> <span class="keyword" style="color:rgb(204,153,204);">null</span>;</div><div class="line">    }</div><div class="line">  }</div><div class="line">	</div><div class="line">  <span class="comment" style="color:rgb(153,153,153);">//这里和Interceptor$Builder很像</span></div><div class="line">  <span class="keyword" style="color:rgb(204,153,204);">public</span> <span class="keyword" style="color:rgb(204,153,204);">static</span> <span class="class" style="color:rgb(153,204,153);"><span class="keyword" style="color:rgb(204,153,204);">class</span> <span class="title" style="color:rgb(153,153,153);">Builder</span> <span class="keyword" style="color:rgb(204,153,204);">implements</span> <span class="title" style="color:rgb(153,153,153);">EventDeserializer</span>.<span class="title" style="color:rgb(153,153,153);">Builder</span> </span>{</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function" style="color:rgb(102,153,204);"><span class="keyword" style="color:rgb(204,153,204);">public</span> EventDeserializer <span class="title" style="color:rgb(153,153,153);">build</span><span class="params" style="color:rgb(249,145,87);">(Context context, ResettableInputStream in)</span> </span>{</div><div class="line">      <span class="keyword" style="color:rgb(204,153,204);">return</span> <span class="keyword" style="color:rgb(204,153,204);">new</span> LineDeserializer(context, in);</div><div class="line">    }</div><div class="line"></div><div class="line">  }</div><div class="line"></div><div class="line">}</div>
</td>
</tr></tbody></table><p></p>
<p>接下来的步骤和拦截器一致<br></p>
<table style="border-spacing:0px;vertical-align:middle;background-color:transparent;"><tbody><tr><td class="gutter" style="vertical-align:middle;border:none;">
<pre style="font-family:Menlo, 'Bitstream Vera Sans Mono', 'DejaVu Sans Mono', Monaco, Consolas, monospace;font-size:14px;line-height:20px;color:rgb(102,102,102);border:none;overflow:auto;width:28px;background:rgb(51,51,51) !important;"></pre><div class="line">1</div><div class="line">2</div><div class="line">3</div>
</td>
<td class="code" style="vertical-align:middle;border:none;">
<pre style="font-family:Menlo, 'Bitstream Vera Sans Mono', 'DejaVu Sans Mono', Monaco, Consolas, monospace;font-size:14px;line-height:20px;color:rgb(204,204,204);border:none;overflow:auto;background:rgb(51,51,51) !important;"></pre><div class="line">#自定义解析器</div><div class="line">producer.sources.src-1.deserializers = d1</div><div class="line">producer.sources.src-1.deserializer = com.networkbench.browser.flume.interceptor.MyLineDeserializer$Builder</div>
</td>
</tr></tbody></table><p></p>
<h3 id="source" style="line-height:1.1;color:rgb(156,76,23);font-size:24px;">
<a href="http://blog.jassassin.com/2015/09/22/flume/flume/#source" rel="nofollow" class="headerlink" title="source" style="color:rgb(24,99,161);text-decoration:none;"></a>source</h3>
<p>Flume提供了丰富的source类型,如<a href="http://flume.apache.org/FlumeUserGuide.html#avro-source" rel="nofollow" style="color:rgb(24,99,161);text-decoration:none;">Avro Source</a>、<a href="http://flume.apache.org/FlumeUserGuide.html#exec-source" rel="nofollow" style="color:rgb(24,99,161);text-decoration:none;">Exec
 Source</a>、<a href="http://flume.apache.org/FlumeUserGuide.html#spooling-directory-source" rel="nofollow" style="color:rgb(24,99,161);text-decoration:none;">Spooling Directory Source</a> <a href="http://flume.apache.org/FlumeUserGuide.html#flume-sources" rel="nofollow" style="color:rgb(24,99,161);text-decoration:none;">…</a>.<br>
这里要说的是实际使用过程中遇到的一个问题。还是前面记录http请求内容的场景，为了及时分析http请求的数据，我们将记录http请求的原始文件按照分钟进行切割，然后移动到spooling directory监控目录(如/tmp-logs)下。但是由于一些原因，会出现监控目录下文件重名的情况.<br></p>
<table style="border-spacing:0px;vertical-align:middle;background-color:transparent;"><tbody><tr><td class="gutter" style="vertical-align:middle;border:none;">
<pre style="font-family:Menlo, 'Bitstream Vera Sans Mono', 'DejaVu Sans Mono', Monaco, Consolas, monospace;font-size:14px;line-height:20px;color:rgb(102,102,102);border:none;overflow:auto;width:28px;background:rgb(51,51,51) !important;"></pre><div class="line">1</div><div class="line">2</div>
</td>
<td class="code" style="vertical-align:middle;border:none;">
<pre style="font-family:Menlo, 'Bitstream Vera Sans Mono', 'DejaVu Sans Mono', Monaco, Consolas, monospace;font-size:14px;line-height:20px;color:rgb(204,204,204);border:none;overflow:auto;background:rgb(51,51,51) !important;"></pre><div class="line">/tmp-logs/access_2015_10_01_16_30.log.COMPLETED   #flume处理完的文件会自动进行重命名.COMPLETED </div><div class="line">/tmp-logs/access_2015_10_01_16_30.log		 #刚进来的文件</div>
</td>
</tr></tbody></table><p></p>
<p>这种情况下后进来的access_2015_10_01_16_30.log，在flume读取完成后会对其进行重命名，但是该文件名已经被占用了，flume就会抛出如下的异常信息,停止处理该监控目录下的其他文件。<br></p>
<table style="border-spacing:0px;vertical-align:middle;background-color:transparent;"><tbody><tr><td class="gutter" style="vertical-align:middle;border:none;">
<pre style="font-family:Menlo, 'Bitstream Vera Sans Mono', 'DejaVu Sans Mono', Monaco, Consolas, monospace;font-size:14px;line-height:20px;color:rgb(102,102,102);border:none;overflow:auto;width:36px;background:rgb(51,51,51) !important;"></pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div>
</td>
<td class="code" style="vertical-align:middle;border:none;">
<pre style="font-family:Menlo, 'Bitstream Vera Sans Mono', 'DejaVu Sans Mono', Monaco, Consolas, monospace;font-size:14px;line-height:20px;color:rgb(204,204,204);border:none;overflow:auto;background:rgb(51,51,51) !important;"></pre><div class="line">25 九月 2015 16:48:59,228 INFO  [pool-22-thread-1] (org.apache.flume.client.avro.ReliableSpoolingFileEventReader.rollCurrentFile:348)  - Preparing to move file /opt/nginx/tmp_logs/access-2015-09-25-13-51.log to /opt/nginx/tmp_logs/access-2015-09-25-13-51.log.COMPLETED</div><div class="line">25 九月 2015 16:48:59,229 ERROR [pool-22-thread-1] (org.apache.flume.source.SpoolDirectorySource$SpoolDirectoryRunnable.run:256)  - FATAL: Spool Directory source src-1: { spoolDir: /opt/nginx/tmp_logs }: Uncaught exception in SpoolDirectorySource thread. Restart or reconfigure Flume to continue processing.</div><div class="line">java.lang.IllegalStateException: File name has been re-used with different files. Spooling assumptions violated for /opt/nginx/tmp_logs/access-2015-09-25-13-51.log.COMPLETED</div><div class="line">        at org.apache.flume.client.avro.ReliableSpoolingFileEventReader.rollCurrentFile(ReliableSpoolingFileEventReader.java:378)</div><div class="line">        at org.apache.flume.client.avro.ReliableSpoolingFileEventReader.retireCurrentFile(ReliableSpoolingFileEventReader.java:330)</div><div class="line">        at org.apache.flume.client.avro.ReliableSpoolingFileEventReader.readEvents(ReliableSpoolingFileEventReader.java:259)</div><div class="line">        at org.apache.flume.source.SpoolDirectorySource$SpoolDirectoryRunnable.run(SpoolDirectorySource.java:228)</div><div class="line">        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)</div><div class="line">        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:304)</div><div class="line">        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:178)</div><div class="line">        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)</div><div class="line">        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)</div><div class="line">        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)</div><div class="line">        at java.lang.Thread.run(Thread.java:744)</div>
</td>
</tr></tbody></table><p></p>
<p>跟踪抛出异常的源码，SpoolDirectorySource会启动一个线程轮询监控目录下的目标文件，当读取完该文件(readEvents)之后会对该文件进行重名(rollCurrentFile)，当重命名失败时会抛出IllegalStateException，被SpoolDirectoryRunnable catch重新抛出RuntimeException，导致当前线程退出，从源码看SpoolDirectoryRunnable是单线程执行的，因此线程结束后，监控目录下其他文件不再被处理:<br></p>
<table style="border-spacing:0px;vertical-align:middle;background-color:transparent;"><tbody><tr><td class="gutter" style="vertical-align:middle;border:none;">
<pre style="font-family:Menlo, 'Bitstream Vera Sans Mono', 'DejaVu Sans Mono', Monaco, Consolas, monospace;font-size:14px;line-height:20px;color:rgb(102,102,102);border:none;overflow:auto;width:44px;background:rgb(51,51,51) !important;"></pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div>
</td>
<td class="code" style="vertical-align:middle;border:none;">
<pre style="font-family:Menlo, 'Bitstream Vera Sans Mono', 'DejaVu Sans Mono', Monaco, Consolas, monospace;font-size:14px;line-height:20px;color:rgb(204,204,204);border:none;overflow:auto;background:rgb(51,51,51) !important;"></pre><div class="line"># SpoolDirectorySource 启动SpoolDirectoryRunnable</div><div class="line"></div><div class="line">executor = Executors.newSingleThreadScheduledExecutor();</div><div class="line"></div><div class="line">    File directory = new File(spoolDirectory);</div><div class="line">     ...</div><div class="line"></div><div class="line">    Runnable runner = new SpoolDirectoryRunnable(reader, sourceCounter);</div><div class="line">     //默认500毫秒</div><div class="line">    executor.scheduleWithFixedDelay(runner, 0, POLL_DELAY_MS, TimeUnit.MILLISECONDS);</div><div class="line">...</div><div class="line"></div><div class="line"></div><div class="line"># SpoolDirectorySource$SpoolDirectoryRunnable.run():</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() {</div><div class="line">      int backoffInterval = 250;</div><div class="line">      try {</div><div class="line">        while (!Thread.interrupted()) {</div><div class="line">	   //这里读取文件内容，当该文件没有可读内容时，会调用ReliableSpoolingFileEventReader.retireCurrentFile()-&gt;ReliableSpoolingFileEventReader.rollCurrentFile()</div><div class="line">          List&lt;Event&gt; events = reader.readEvents(batchSize);</div><div class="line">          if (events.isEmpty()) {</div><div class="line">            break;</div><div class="line">          }</div><div class="line">          sourceCounter.addToEventReceivedCount(events.size());</div><div class="line">          sourceCounter.incrementAppendBatchReceivedCount();</div><div class="line"></div><div class="line">          try {</div><div class="line">            getChannelProcessor().processEventBatch(events);</div><div class="line">            reader.commit();</div><div class="line">          } catch (ChannelException ex) {</div><div class="line">            logger.warn("The channel is full, and cannot write data now. The " +</div><div class="line">              "source will try again after " + String.valueOf(backoffInterval) +</div><div class="line">              " milliseconds");</div><div class="line">            hitChannelException = true;</div><div class="line">            if (backoff) {</div><div class="line">              TimeUnit.MILLISECONDS.sleep(backoffInterval);</div><div class="line">              backoffInterval = backoffInterval &lt;&lt; 1;</div><div class="line">              backoffInterval = backoffInterval &gt;= maxBackoff ? maxBackoff :</div><div class="line">                                backoffInterval;</div><div class="line">            }</div><div class="line">            continue;</div><div class="line">          }</div><div class="line">          backoffInterval = 250;</div><div class="line">          sourceCounter.addToEventAcceptedCount(events.size());</div><div class="line">          sourceCounter.incrementAppendBatchAcceptedCount();</div><div class="line">        }</div><div class="line">      } catch (Throwable t) {</div><div class="line">	 //异常输出部分</div><div class="line">        logger.error("FATAL: " + SpoolDirectorySource.this.toString() + ": " +</div><div class="line">            "Uncaught exception in SpoolDirectorySource thread. " +</div><div class="line">            "Restart or reconfigure Flume to continue processing.", t);</div><div class="line">        hasFatalError = true;</div><div class="line">	//这里将该异常重新封装成了RuntimeException，导致当前线程退出</div><div class="line">        Throwables.propagate(t);</div><div class="line">      }</div><div class="line">    }</div><div class="line"></div><div class="line"># ReliableSpoolingFileEventReader.rollCurrentFile():</div><div class="line"></div><div class="line"> private void rollCurrentFile(File fileToRoll) throws IOException {</div><div class="line"></div><div class="line">    File dest = new File(fileToRoll.getPath() + completedSuffix);</div><div class="line">    logger.info("Preparing to move file {} to {}", fileToRoll, dest);</div><div class="line"></div><div class="line">    // Before renaming, check whether destination file name exists</div><div class="line">    if (dest.exists() &amp;&amp; PlatformDetect.isWindows()) {</div><div class="line">      /*</div><div class="line">       * If we are here, it means the completed file already exists. In almost</div><div class="line">       * every case this means the user is violating an assumption of Flume</div><div class="line">       * (that log files are placed in the spooling directory with unique</div><div class="line">       * names). However, there is a corner case on Windows systems where the</div><div class="line">       * file was already rolled but the rename was not atomic. If that seems</div><div class="line">       * likely, we let it pass with only a warning.</div><div class="line">       */</div><div class="line">      if (Files.equal(currentFile.get().getFile(), dest)) {</div><div class="line">        logger.warn("Completed file " + dest +</div><div class="line">            " already exists, but files match, so continuing.");</div><div class="line">        boolean deleted = fileToRoll.delete();</div><div class="line">        if (!deleted) {</div><div class="line">          logger.error("Unable to delete file " + fileToRoll.getAbsolutePath() +</div><div class="line">              ". It will likely be ingested another time.");</div><div class="line">        }</div><div class="line">      } else {</div><div class="line">        String message = "File name has been re-used with different" +</div><div class="line">            " files. Spooling assumptions violated for " + dest;</div><div class="line">        throw new IllegalStateException(message);</div><div class="line">      }</div><div class="line"></div><div class="line">    // Dest file exists and not on windows</div><div class="line">    } else if (dest.exists()) {</div><div class="line">	//这里抛出目标文件已经存在的异常</div><div class="line">      String message = "File name has been re-used with different" +</div><div class="line">          " files. Spooling assumptions violated for " + dest;</div><div class="line">      throw new IllegalStateException(message);</div><div class="line"></div><div class="line">    // Destination file does not already exist. We are good to go!</div><div class="line">    } else {</div><div class="line">      boolean renamed = fileToRoll.renameTo(dest);</div><div class="line">      if (renamed) {</div><div class="line">        logger.debug("Successfully rolled file {} to {}", fileToRoll, dest);</div><div class="line"></div><div class="line">        // now we no longer need the meta file</div><div class="line">        deleteMetaFile();</div><div class="line">      } else {</div><div class="line">        /* If we are here then the file cannot be renamed for a reason other</div><div class="line">         * than that the destination file exists (actually, that remains</div><div class="line">         * possible w/ small probability due to TOC-TOU conditions).*/</div><div class="line">        String message = "Unable to move " + fileToRoll + " to " + dest +</div><div class="line">            ". This will likely cause duplicate events. Please verify that " +</div><div class="line">            "flume has sufficient permissions to perform these operations.";</div><div class="line">        throw new FlumeException(message);</div><div class="line">      }</div><div class="line">    }</div><div class="line">  }</div>
</td>
</tr></tbody></table><p></p>
<p>现在基本清楚了异常栈的调用逻辑，那么和前面自定义解析器一样，我们可以重写ReliableSpoolingFileEventReader以及SpoolDirectorySource的相关实现,也就是自定义一个spooling source，在rollCurrentFile()重命名失败时，做些处理措施，比如将该文件重新命名为access_2015_10_01_16_30.log(2).COMPLETED(此时文件内容已经读取完毕了)继续处理(注意要是.COMPLETED结尾，不然flume会再次读取该文件)。</p>
<p>改写完成之后，就和前面自定义解析器的处理步骤一样了，打包放在plugins.d目录下,配置:<br></p>
<table style="border-spacing:0px;vertical-align:middle;background-color:transparent;"><tbody><tr><td class="gutter" style="vertical-align:middle;border:none;">
<pre style="font-family:Menlo, 'Bitstream Vera Sans Mono', 'DejaVu Sans Mono', Monaco, Consolas, monospace;font-size:14px;line-height:20px;color:rgb(102,102,102);border:none;overflow:auto;width:28px;background:rgb(51,51,51) !important;"></pre><div class="line">1</div>
</td>
<td class="code" style="vertical-align:middle;border:none;">
<pre style="font-family:Menlo, 'Bitstream Vera Sans Mono', 'DejaVu Sans Mono', Monaco, Consolas, monospace;font-size:14px;line-height:20px;color:rgb(204,204,204);border:none;overflow:auto;background:rgb(51,51,51) !important;"></pre><div class="line">producer.sources.src-1.type = com.networkbench.flume.source.SpoolDirectoryExtSource</div>
</td>
</tr></tbody></table><p></p>
<h2 id="总结" style="line-height:1.1;color:#008000;font-size:30px;">
<a href="http://blog.jassassin.com/2015/09/22/flume/flume/#%E6%80%BB%E7%BB%93" rel="nofollow" class="headerlink" title="总结" style="color:rgb(24,99,161);text-decoration:none;"></a>总结</h2>
<p>基本上flume的各种组件都可以自定义开发，本人使用flume时间也没多久，截止到目前为止遇到问题还有以下几个:</p>
<h3 id="消息重发" style="line-height:1.1;color:rgb(156,76,23);font-size:24px;">
<a href="http://blog.jassassin.com/2015/09/22/flume/flume/#%E6%B6%88%E6%81%AF%E9%87%8D%E5%8F%91" rel="nofollow" class="headerlink" title="消息重发" style="color:rgb(24,99,161);text-decoration:none;"></a>消息重发</h3>
<p>这个坑其实是自己挖的，当时想当然的理解flume的配置参数#producer.sinks.sink-1.requiredAcks = 1(默认是1),我设置成了10,当时使用的kafka sink，由于某个kafka节点出现了问题(还没有仔细验证，是否kafka正常时也会出现该问题?)，导致flume一直重发某个时间点的数据，而最新的数据一直被阻塞(可能是被缓存在了channel中)。导致后台接收的一直是某个时间点的消息。后台想到自己改动的这个参数，改回1之后就正常了。下面是官方文档对该参数的说明:</p>
<blockquote style="border-left-width:5px;border-left-style:solid;border-left-color:rgb(204,204,204);font-size:1em;">
<p style="font-size:17.5px;line-height:1.25;font-family:'Open Sans', 'Helvetica Neue', Helvetica, 'Segoe UI', Ubuntu, 'Hiragino Sans GB', '楷体', STKaiti;">
requiredAcks 1 (默认值) How many replicas must acknowledge a message before its considered successfully written. Accepted values are 0 (Never wait for acknowledgement), 1 (wait for leader only), -1 (wait for all replicas) Set this to -1 to avoid data loss in some
 cases of leader failure.</p>
</blockquote>
<h3 id="channel溢出" style="line-height:1.1;color:rgb(156,76,23);font-size:24px;">
<a href="http://blog.jassassin.com/2015/09/22/flume/flume/#channel%E6%BA%A2%E5%87%BA" rel="nofollow" class="headerlink" title="channel溢出" style="color:rgb(24,99,161);text-decoration:none;"></a>channel溢出</h3>
<p>chanel溢出是因为前面的消息重发导致的,当时使用的channle是<a href="http://flume.apache.org/FlumeUserGuide.html#file-channel" rel="nofollow" style="color:rgb(24,99,161);text-decoration:none;">File Channel</a>,其中有几个配置项值得注意:</p>
<table style="border-spacing:0px;vertical-align:middle;background-color:transparent;"><thead><tr><th style="border-bottom-width:1px;border-bottom-style:dashed;border-bottom-color:rgb(64,136,184);">
配置项</th>
<th style="border-bottom-width:1px;border-bottom-style:dashed;border-bottom-color:rgb(64,136,184);">
默认值</th>
<th style="border-bottom-width:1px;border-bottom-style:dashed;border-bottom-color:rgb(64,136,184);">
说明</th>
</tr></thead><tbody><tr><td style="vertical-align:middle;">transactionCapacity</td>
<td style="vertical-align:middle;">10000</td>
<td style="vertical-align:middle;">单个事务中可以写入或读取的事务的最大数量</td>
</tr><tr><td style="vertical-align:middle;">maxFileSize</td>
<td style="vertical-align:middle;">2146435071</td>
<td style="vertical-align:middle;">每个数据文件的最大大小(字节),一旦文件达到这个大小(或一旦写入下个文件达到这个大小)，该文件保存关闭并在那个目录下创建一个新的数据文件。如果此值设置为高于默认值，仍以默认值为准</td>
</tr><tr><td style="vertical-align:middle;">minimumRequiredSpace</td>
<td style="vertical-align:middle;">524288000</td>
<td style="vertical-align:middle;">channel继续操作时每个卷所需的最少空间(字节)，如果任何一个挂载数据目录的卷只有这么多空间剩余，channel将停止操作来防止损坏和避免不完整的数据被写入</td>
</tr><tr><td style="vertical-align:middle;">capacity</td>
<td style="vertical-align:middle;">1000000</td>
<td style="vertical-align:middle;">channel可以保存的提交事件的最大数量</td>
</tr><tr><td style="vertical-align:middle;">keep-alive</td>
<td style="vertical-align:middle;">3</td>
<td style="vertical-align:middle;">每次写入或读取应该等待完成的最大的时间周期(秒)</td>
</tr></tbody></table><p>前面的channel溢出推测就是由capacity的达到了限制造成的。</p>
<h3 id="checkpoint相关" style="line-height:1.1;color:rgb(156,76,23);font-size:24px;">
<a href="http://blog.jassassin.com/2015/09/22/flume/flume/#checkpoint%E7%9B%B8%E5%85%B3" rel="nofollow" class="headerlink" title="checkpoint相关" style="color:rgb(24,99,161);text-decoration:none;"></a>checkpoint相关</h3>
</div>
            </div>
                </div>