---
layout:     post
title:      HDFS的Java操作
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<h1 id="hdfs的java操作"><center>HDFS的Java操作</center></h1>

<blockquote>
  <p>HDFS在生产应用中主要是客户端的开发，其核心步骤是从HDFS提供的API中构造一个HDFS的访问客户端对象，然后通过该客户端对象操作（增删改查）HDFS上的文件</p>
</blockquote>



<h2 id="搭建开发环境">搭建开发环境</h2>

<p>开发工具：IDEA <br>
管理工具：Maven <br>
JDK：1.8 <br>
Hadoop：2.7.4</p>

<p><strong>建议在Linux/Unix下进行hadoop应用的开发，不会存在兼容性问题。如在window上做客户端应用开发，需要设置以下环境：</strong></p>

<ul>
<li>在windows的某个目录下解压一个hadoop的安装包</li>
<li>到网上下载winutils支持和hadoop.dll等文件，丢到HADOOP_HOME\bin目录中去，将其中的hadoop.dll在c:/windows/System32下也丢一份；<a href="http://download.csdn.net/detail/wuxun1997/9841472" rel="nofollow">你可以直接到这里下载</a></li>
<li>在window系统中配置HADOOP_HOME指向你解压的安装包</li>
<li>在windows系统的path变量中加入hadoop的bin目录</li>
</ul>



<h2 id="开始创建项目">开始创建项目</h2>

<p>新建一个maven项目 <br>
<img src="//img-blog.csdn.net/20180319172925893?watermark/2/text/Ly9ibG9nLmNzZG4ubmV0L0dldGhpbl9I/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述" title=""> <br>
编辑pom.xml，引入hadoop客户端依赖</p>



<pre class="prettyprint"><code class="language-xml hljs "> <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>org.apache.hadoop<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>hadoop-client<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>2.7.4<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>
 <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span></code></pre>

<p>编写测试类，构造HDFS客户端实例</p>



<pre class="prettyprint"><code class="language-java hljs "><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HdfsClient</span> {</span>

    <span class="hljs-keyword">private</span> FileSystem fs;

    <span class="hljs-annotation">@Before</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span>() <span class="hljs-keyword">throws</span> Exception {

        <span class="hljs-comment">// 构造一个配置参数对象</span>
        <span class="hljs-comment">// 参数优先级说明：代码中设置的会覆盖classpath下的配置，classpath下的配置覆盖hadoop-client.jar中的默认配置</span>
        Configuration conf = <span class="hljs-keyword">new</span> Configuration();
        <span class="hljs-comment">// 这里暂不做任何配置，使用的是jar包的默认值</span>
        <span class="hljs-comment">/*
            参数一：NameNode所在节点
            参数二：配置参数对象
            参数三：用户身份
         */</span>
        fs = FileSystem.get(<span class="hljs-keyword">new</span> URI(<span class="hljs-string">"hdfs://hadoop.master:9000"</span>), conf, <span class="hljs-string">"hadoop"</span>);
    }
}</code></pre>

<p>上传文件</p>



<pre class="prettyprint"><code class="language-java hljs ">    <span class="hljs-javadoc">/**
     * 上传文件到HDFS
     */</span>
    <span class="hljs-annotation">@Test</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testPutFile</span>() <span class="hljs-keyword">throws</span> Exception {

        <span class="hljs-comment">// 本地文件路径</span>
        Path src = <span class="hljs-keyword">new</span> Path(<span class="hljs-string">"/Users/gethin/test.file"</span>);
        <span class="hljs-comment">// 上传到HDFS的目标路径</span>
        Path dst = <span class="hljs-keyword">new</span> Path(<span class="hljs-string">"/"</span>);
        fs.copyFromLocalFile(src,dst);
        fs.close();
    }</code></pre>

<p>下载文件</p>



<pre class="prettyprint"><code class="language-java hljs ">    <span class="hljs-javadoc">/**
     * 从HDFS下载文件到本地
     */</span>
    <span class="hljs-annotation">@Test</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDownloadFileToLocal</span>() <span class="hljs-keyword">throws</span> Exception {

        <span class="hljs-comment">// 要下载的文件路径(HDFS上)</span>
        Path src = <span class="hljs-keyword">new</span> Path(<span class="hljs-string">"/test.file"</span>);
        <span class="hljs-comment">// 本地保存路径</span>
        Path dst = <span class="hljs-keyword">new</span> Path(<span class="hljs-string">"/Users/gethin/"</span>);
        fs.copyToLocalFile(src, dst);
        fs.close();
    }</code></pre>

<p>目录创建、删除及重命名</p>



<pre class="prettyprint"><code class="language-java hljs ">    <span class="hljs-javadoc">/**
     * 目录创建、删除及重命名
     */</span>
    <span class="hljs-annotation">@Test</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testMkdirAndDeleteAndRename</span>() <span class="hljs-keyword">throws</span> Exception {
        <span class="hljs-comment">// 创建目录(支持递归创建)</span>
        fs.mkdirs(<span class="hljs-keyword">new</span> Path(<span class="hljs-string">"/a1/b1/c1"</span>));

        <span class="hljs-comment">// 删除文件夹 ，如果是非空文件夹，参数2必须给值true</span>
        fs.delete(<span class="hljs-keyword">new</span> Path(<span class="hljs-string">"/b1"</span>), <span class="hljs-keyword">true</span>);

        <span class="hljs-comment">// 重命名文件或文件夹,将a1修改成a2</span>
        fs.rename(<span class="hljs-keyword">new</span> Path(<span class="hljs-string">"/a1"</span>), <span class="hljs-keyword">new</span> Path(<span class="hljs-string">"/a2"</span>));
    }</code></pre>

<p>查看目录信息(不能理解的话直接跑下一，看下结果就明白了)</p>



<pre class="prettyprint"><code class="language-java hljs ">    <span class="hljs-javadoc">/**
     * 查看目录信息，只显示文件
     */</span>
    <span class="hljs-annotation">@Test</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testListFiles</span>() <span class="hljs-keyword">throws</span> Exception {

        <span class="hljs-comment">// 查看根目录</span>
        RemoteIterator&lt;LocatedFileStatus&gt; listFiles = fs.listFiles(<span class="hljs-keyword">new</span> Path(<span class="hljs-string">"/"</span>), <span class="hljs-keyword">true</span>);

        <span class="hljs-keyword">while</span> (listFiles.hasNext()) {
            LocatedFileStatus fileStatus = listFiles.next();
            System.out.println(fileStatus.getPath().getName()); <span class="hljs-comment">// 文件名</span>
            System.out.println(fileStatus.getBlockSize());      <span class="hljs-comment">// 块的大小</span>
            System.out.println(fileStatus.getPermission());     <span class="hljs-comment">// 块的副本</span>
            System.out.println(fileStatus.getLen());            <span class="hljs-comment">// 块的数据长度</span>

            <span class="hljs-comment">// 数据块在哪些节点上</span>
            BlockLocation[] blockLocations = fileStatus.getBlockLocations();
            <span class="hljs-keyword">for</span> (BlockLocation bl : blockLocations) {
                <span class="hljs-comment">// 数据块的偏移量</span>
                System.out.println(<span class="hljs-string">"block-length:"</span> + bl.getLength() + <span class="hljs-string">"--"</span> + <span class="hljs-string">"block-offset:"</span> + bl.getOffset());
                String[] hosts = bl.getHosts(); <span class="hljs-comment">// 块的副本都在哪些节点上</span>
                <span class="hljs-keyword">for</span> (String host : hosts) {
                    System.out.println(host);   <span class="hljs-comment">// 主机名</span>
                }
            }
            System.out.println(<span class="hljs-string">"--------------打印的分割线--------------"</span>);
        }
    }</code></pre>

<p>查看文件及文件夹信息</p>



<pre class="prettyprint"><code class="language-java hljs ">    <span class="hljs-javadoc">/**
     * 查看文件及文件夹信息
     */</span>
    <span class="hljs-annotation">@Test</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testListAll</span>() <span class="hljs-keyword">throws</span> Exception {

        FileStatus[] listStatus = fs.listStatus(<span class="hljs-keyword">new</span> Path(<span class="hljs-string">"/"</span>));

        <span class="hljs-keyword">for</span> (FileStatus fstatus : listStatus) {

            <span class="hljs-comment">// 是文件</span>
            <span class="hljs-keyword">if</span> (fstatus.isFile()){
                System.out.println(<span class="hljs-string">"f--         "</span> + fstatus.getPath().getName());
            }<span class="hljs-keyword">else</span> {
                <span class="hljs-comment">// 是目录</span>
                System.out.println(<span class="hljs-string">"d--         "</span> + fstatus.getPath().getName());
            }
        }
    }</code></pre>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>