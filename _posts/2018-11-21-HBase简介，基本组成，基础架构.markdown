---
layout:     post
title:      HBase简介，基本组成，基础架构
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<h1><a id="hbase_1"></a>hbase</h1>
<ul>
<li>
<p>hbase 是什么？ 由哪些模块构成</p>
</li>
<li>
<p>hbase的优缺点以及应用场景</p>
</li>
<li>
<p>hbase和关系型数据库的区别</p>
</li>
</ul>
<h3><a id="Hbase__11"></a>Hbase 简介</h3>
<p>Hbase是一个分布式的，面向列的开源数据库<br>
Hbase在Hadoop之上提供类似于BigTable的能力<br>
Hbase不同于一般的关系型数据库，它适合存储非结构化的数据</p>
<p>BigTable是什么？<br>
bigtable 是基于google 的GFS的面向列的可扩展的性能很好数据库</p>
<p>什么是面向列的数据库 （把每一列数据放一起存储）？</p>
<p>行数据库</p>

<table>
<thead>
<tr>
<th>ID</th>
<th>UserName</th>
<th>Password</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Tom</td>
<td>123456</td>
</tr>
<tr>
<td>2</td>
<td>Jerry</td>
<td>123456</td>
</tr>
</tbody>
</table><p>列数据库</p>

<table>
<thead>
<tr>
<th>RowKey</th>
<th>Column Family</th>
</tr>
</thead>
<tbody>
<tr>
<td>rk_id</td>
<td>cf:col1=1 cf:col2=2</td>
</tr>
<tr>
<td>rk_username</td>
<td>cf:name1=tom cf:name2=jerry</td>
</tr>
<tr>
<td>rk_password</td>
<td>cf:pwd1=123456 cd:pwd2=123456</td>
</tr>
</tbody>
</table><p>为什么Hbase适合非结构化数据存储？<br>
结构化数据：可以用二维表格存储<br>
非结构化数据：表格，图片，文档<br>
可以将二进制数据存储到Hbase中。</p>
<p>Hbase 和Hive 用什么区别？</p>
<p>hive 是基于hadoop的数据仓库工具，它适合于对一段时间内数据分析查询。<br>
hbase适合大数据的实时查询。</p>
<p>hbase和hdfs有什么不同？<br>
hbase建立在hdfs之上，利用了hadoop文件系统的容错能力；<br>
hbase提供对数据的随机实时读写/访问能力；<br>
hbase内部使用哈希表，并存储索引，可以对hdfs文件中的数据进行快速查询；</p>
<h3><a id="Hbase_50"></a>Hbase使用场景</h3>
<p>瞬间写入量很大，常用数据库不好支撑或需要很高支撑成本的场景<br>
数据需要长久保存，且会持久增长到较大的场景<br>
hbase不适用join，多级索引，表关系复杂的数据模型</p>
<h3><a id="HBase__58"></a>HBase 概念</h3>
<ul>
<li>NameSpace ： 可以把NameSpace理解为RDBMS的“数据库”</li>
<li>Table：表名必须是能用文件路径里的合法名字（Hbase表映射为HDFS上文件）</li>
<li>Row : 在表里面，每一行代表一个数据对象，每一行都是以一个行键来进行唯一标识的，行键没有特定的数据类型，以二进制字节来存储</li>
<li>Column ：Hbase的列由Column family 和Column qualifier 组成，由冒号（：）进行间隔，比如family ：qualifier</li>
<li>RowKey ： 可以唯一标识一行记录，不可被改变，改变的唯一方式，就是删除，然后再插入</li>
<li>Column Family：在定义HBase表的时候需要提前设置好列族，表中所有的列都需要组织在列祖里面，在文件系统中，一个Column Family中的Column是存储在一起的。列簇一旦确定好，就不允许更改了，因为更改会影响到真实的物理存储。</li>
<li>Column Qualifier：列族中的数据通过列标识来进行映射，Column Qualifer就是key，存储的值就是对应的value。</li>
<li>Cell：每一个行建，列簇，列标识共同组成的单元</li>
<li>TimeStamp：每一个值都有一个timestamp，作为该值特定版本的标识符。</li>
</ul>
<h3><a id="HBase_70"></a>HBase和传统关系型数据的区别</h3>

<table>
<thead>
<tr>
<th>…</th>
<th>HBase</th>
<th>RDBMS</th>
</tr>
</thead>
<tbody>
<tr>
<td>数据库大小</td>
<td>PB</td>
<td>GB,TB</td>
</tr>
<tr>
<td>数据类型</td>
<td>Bytes</td>
<td>丰富的数据类型</td>
</tr>
<tr>
<td>事务支持</td>
<td>ACID只支持单个ROW级别</td>
<td>全面的ACID支持，对Row和表的支持</td>
</tr>
<tr>
<td>索引</td>
<td>只支持RowKey</td>
<td>支持</td>
</tr>
<tr>
<td>吞吐量</td>
<td>百万/秒</td>
<td>数千/秒</td>
</tr>
</tbody>
</table><h3><a id="HBase_80"></a>HBase数据模型</h3>
<p>可以把HBase理解为一个大map ，rowkey，column family，column qualifer，timestamp ，value 层层深入。</p>
<pre><code class="prism language-json"><span class="token punctuation">{</span>
	<span class="token string">"0001"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>                        <span class="token comment">//rowkey</span>
		<span class="token string">"FileInfo"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>				<span class="token comment">//column family</span>
			<span class="token string">"name"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>                <span class="token comment">//column qualifer</span>
				<span class="token string">"timestamp1"</span><span class="token punctuation">:</span><span class="token string">"file1.txt"</span> <span class="token comment">// timestamp1 为 timestamp file1.txt 为value</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token string">"tepe"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>
				<span class="token string">"timestamp1"</span><span class="token punctuation">:</span><span class="token string">"txt"</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token string">"SaveInfo"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>
			<span class="token string">"create"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>
				<span class="token string">"timestamp1"</span><span class="token punctuation">:</span><span class="token string">"jack"</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token string">"path"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>
				<span class="token string">"timestamp1"</span><span class="token punctuation">:</span><span class="token string">"/home"</span><span class="token punctuation">,</span>
				<span class="token string">"timestamp2"</span><span class="token punctuation">:</span><span class="token string">"/homne/jack"</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre>
<h3><a id="Hbase_108"></a>Hbase基础架构</h3>
<p>2993 NameNode<br>
3410 ResourceManager<br>
4265 HRegionServer<br>
3098 DataNode<br>
3515 NodeManager<br>
4108 HMaster<br>
4908 Jps<br>
3903 QuorumPeerMain<br>
搭建伪分布式开发环境之后，启动hadoop相关服务进程，启动hbase以来的zk，启动hbase相关的服务进程之后的进程如上。会发现<br>
<img src="https://img-blog.csdnimg.cn/2018110122521642.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poYW5nc2hrXw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>可以看到hbase依赖于hdfs，除了hdfs之外，客户端通过java api 操作hbase ，中间则为hbase的基础架构，它分为，Hmaster，Region Server ，Zookeeper</p>
<h4><a id="HMaster_123"></a>HMaster</h4>
<ul>
<li>HMaster 是HBase主从集群架构中的中央节点</li>
<li>HMaster将Region分配给RegionServer，协调RegionServer的负载均衡并维护集群的状态</li>
<li>维护表和Region的元数据，不参与数据的输入和输出过程</li>
</ul>
<h4><a id="Region_Server_128"></a>Region Server</h4>
<ul>
<li>维护HMaster分配给他的region，处理对这些region的io请求</li>
<li>负责切分运行过程中变得过大的region</li>
</ul>
<h4><a id="zookeeper_132"></a>zookeeper</h4>
<ul>
<li>zookeeper是集群的协调器，HA解决方案</li>
<li>HMaster启动将系统表加载到zookeeper（如果使用hbase api会发现，当相连接hbase读写数据的时候，不需要知道hmaster地址，也不需要知道hregionserver地址，只需要知道zookeeper集群的地址就可以了，zookeeper中存储了meta信息，region信息等等）。</li>
<li>提供HBase Region Server状态信息</li>
</ul>
<p>——————————————————————————————-</p>
<h2><a id="_141"></a>总结</h2>
<p>一句话描述hbase<br>
apache顶级项目，来自google bigtable开源实现，高性能高可扩展的列式数据库，相比于传统的关系型的行式数据库，可以用更低廉的成本，达到更大数据量的存取，而且它本身基于hdfs，天生具有hbase高容错能力。<br>
支持数据的随机读取，达到每秒数百万的吞吐量。<br>
比如存储海量非结构化或者半结构化的数据，需要很高的吞吐量，而且常见查询也不涉及join，多级索引，那么hbase是非常适用的一款列式数据库。</p>

            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>