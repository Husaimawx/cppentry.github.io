---
layout:     post
title:      Hive知识点总结（四）
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载，转载请注明出处：http:					https://blog.csdn.net/qq_26803795/article/details/80780316				</div>
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                <p>Hive知识点总结（一）（基本概念、运行方式、创建库表、数据读取、文件格式）：<a href="https://blog.csdn.net/qq_26803795/article/details/80780237" rel="nofollow">点击查看</a></p><p>Hive知识点总结（二）（数据类型及修改表定义）：<a href="https://blog.csdn.net/qq_26803795/article/details/80780303" rel="nofollow">点击查看</a></p><p>Hive知识点总结（三）（Hive查询语法）：<a href="https://blog.csdn.net/qq_26803795/article/details/80780307" rel="nofollow">点击查看</a></p><p>6、hive函数</p><p>hive的所有函数手册：<a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+UDF#LanguageManualUDF-Built-inTable-GeneratingFunctions(UDTF)" rel="nofollow">点击查看</a></p><p>下面我们总结一些常用内置函数及如何自定义函数<br></p><p>6.1、常用内置函数</p><p>6.1.1、类型转换函数（cast）</p><pre><code class="language-sql">select cast("5" as int) from dual;
select cast("2017-08-03" as date) ;
select cast(current_timestamp as date);</code></pre><p>6.1.2、数学运算函数</p><pre><code class="language-sql">select round(5.4) from dual;   ## 5
select round(5.1345,3) from dual;  ##5.135
select ceil(5.4) from dual; // select ceiling(5.4) from dual;   ## 6
select floor(5.4) from dual;  ## 5
select abs(-5.4) from dual;  ## 5.4
select greatest(3,5,6) from dual;  ## 6 
select least(3,5,6) from dual;  ## 3
select max(age) from t_person;    聚合函数
select min(age) from t_person;    聚合函数</code></pre><p>举例：<br></p><p><img src="https://img-blog.csdn.net/20180623035155639?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2ODAzNzk1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""><br></p><pre><code class="language-sql">select greatest(cast(s1 as double),cast(s2 as double),cast(s3 as double)) from t_fun2;</code></pre>结果：<br><pre><code class="language-html">+---------+--+
|   _c0   |
+---------+--+
| 2000.0  |
| 9800.0  |
+---------+--+</code></pre><p>6.1.3、字符串函数</p><pre><code class="language-sql">substr(string, int start)   ## 截取子串
substring(string, int start)
示例：select substr("abcdefg",2) from dual;

substr(string, int start, int len) 
substring(string, int start, int len)
示例：select substr("abcdefg",2,3) from dual;

concat(string A, string B...)  ## 拼接字符串
concat_ws(string SEP, string A, string B...)
示例：select concat("ab","xy") from dual;
select concat_ws(".","192","168","33","44") from dual;

length(string A)
示例：select length("192.168.33.44") from dual;

split(string str, string pat)
示例：select split("192.168.33.44",".") from dual; 错误的，因为.号是正则语法中的特定字符
select split("192.168.33.44","\\.") from dual;

upper(string str) ##转大写</code></pre><p>6.1.4、时间函数</p><pre><code class="language-sql">select current_timestamp; 
select current_date;

## 取当前时间的毫秒数时间戳 
select unix_timestamp();

## unix时间戳转字符串
from_unixtime(bigint unixtime[, string format])
示例：select from_unixtime(unix_timestamp());
select from_unixtime(unix_timestamp(),"yyyy/MM/dd HH:mm:ss");

## 字符串转unix时间戳
unix_timestamp(string date, string pattern)
示例： select unix_timestamp("2017-08-10 17:50:30");
select unix_timestamp("2017/08/10 17:50:30","yyyy/MM/dd HH:mm:ss");
## 将字符串转成日期date
select to_date("2017-09-17 16:58:32");</code></pre><p>6.1.5、表生成函数</p><p>6.1.5.1、行转列函数：explode()</p><p></p><p><span style="font-family:'宋体';">假如有以下数据：</span></p><table width="820" style="height:77px;"><tbody><tr><td valign="top"><p>1,zhangsan,<span style="font-family:'宋体';">化学</span><span style="font-family:Calibri;">:</span><span style="font-family:'宋体';">物理</span><span style="font-family:Calibri;">:</span><span style="font-family:'宋体';">数学</span><span style="font-family:Calibri;">:</span><span style="font-family:'宋体';">语文</span></p><p>2,lisi,<span style="font-family:'宋体';">化学</span><span style="font-family:Calibri;">:</span><span style="font-family:'宋体';">数学</span><span style="font-family:Calibri;">:</span><span style="font-family:'宋体';">生物</span><span style="font-family:Calibri;">:</span><span style="font-family:'宋体';">生理</span><span style="font-family:Calibri;">:</span><span style="font-family:'宋体';">卫生</span></p><p>3,wangwu,<span style="font-family:'宋体';">化学</span><span style="font-family:Calibri;">:</span><span style="font-family:'宋体';">语文</span><span style="font-family:Calibri;">:</span><span style="font-family:'宋体';">英语</span><span style="font-family:Calibri;">:</span><span style="font-family:'宋体';">体育</span><span style="font-family:Calibri;">:</span><span style="font-family:'宋体';">生物</span></p></td></tr></tbody></table><br><pre><code class="language-sql">映射成一张表：

create table t_stu_subject(id int,name string,subjects array&lt;string&gt;)

row format delimited fields terminated by ','

collection items terminated by ':';</code></pre><p>使用explode()对数组字段“炸裂”<br><br></p><p><img src="https://img-blog.csdn.net/20180623040300319?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2ODAzNzk1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></p><p>然后，我们利用这个explode的结果，来求去重的课程：</p><pre><code class="language-sql">select distinct tmp.sub
from 
(select explode(subjects) as sub from t_stu_subject) tmp;</code></pre><p>6.1.5.2、表生成函数 ：lateral view</p><pre><code class="language-sql">select id,name,tmp.sub 
from t_stu_subject lateral view explode(subjects) tmp as sub;</code></pre><img src="https://img-blog.csdn.net/20180623040558313?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2ODAzNzk1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""><p><br>理解： lateral view 相当于两个表在join<br>左表：是原表<br>右表：是explode(某个集合字段)之后产生的表<br>而且：这个join只在同一行的数据间进行<br><br>那样，可以方便做更多的查询：<br>比如，查询选修了生物课的同学<br>select a.id,a.name,a.sub from <br>(select id,name,tmp.sub as sub from t_stu_subject lateral view explode(subjects) tmp as sub) a<br></p><p>where sub='生物';</p><p><br></p><p>6.1.6、集合函数</p><p>array_contains(Array&lt;T&gt;, value)  返回boolean值<br></p><pre><code class="language-sql">示例：
select moive_name,array_contains(actors,'吴刚') from t_movie;
select array_contains(array('a','b','c'),'c') from dual;</code></pre><p>sort_array(Array&lt;T&gt;) 返回排序后的数组</p><pre><code class="language-sql">示例：
select sort_array(array('c','b','a')) from dual;
select 'haha',sort_array(array('c','b','a')) as xx from (select 0) tmp;</code></pre><p>size(Array&lt;T&gt;)  返回一个int值</p><pre><code class="language-sql">示例：
select moive_name,size(actors) as actor_number from t_movie;</code></pre>size(Map&lt;K.V&gt;)  返回一个int值<br>map_keys(Map&lt;K.V&gt;)  返回一个数组<br><p>map_values(Map&lt;K.V&gt;) 返回一个数组</p><p><br></p><p>6.1.7、控制函数</p><p>6.1.7.1、case when</p><pre><code class="language-sql">语法：
CASE   [ expression ]
       WHEN condition1 THEN result1
       WHEN condition2 THEN result2
       ...
       WHEN conditionn THEN resultn
       ELSE result
END

示例：
select id,name,
case
when age&lt;28 then 'youngth'
when age&gt;27 and age&lt;40 then 'zhongnian'
else 'old'
end
from t_user;</code></pre><p>6.1.7.2、if</p><pre><code class="language-sql">select id,if(age&gt;25,'working','worked') from t_user;
select moive_name,if(array_contains(actors,'吴刚'),'好电影','rom t_movie;</code></pre><p><br></p><p>6.1.8、json解析函数</p><pre><code class="language-sql">get_json_object('{\"key1\":3333，\"key2\":4444}' , '$.key1')  --&gt;  3333

json_tuple('{\"key1\":3333，\"key2\":4444}','key1','key2') as(key1,key2)  --&gt; 3333, 4444</code></pre><br><p>json_tuple函数<br>示例：<br>select json_tuple(json,'movie','rate','timeStamp','uid') as(movie,rate,ts,uid) from t_rating_json;<br></p><p>产生结果：</p><p><img src="https://img-blog.csdn.net/20180623041559259?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2ODAzNzk1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></p><p>利用json_tuple从原始json数据表中，etl出一个详细信息表：</p><pre><code class="language-sql">create table t_rate 
as 
select 
uid,
movie,
rate,
year(from_unixtime(cast(ts as bigint))) as year,
month(from_unixtime(cast(ts as bigint))) as month,
day(from_unixtime(cast(ts as bigint))) as day,
hour(from_unixtime(cast(ts as bigint))) as hour,
minute(from_unixtime(cast(ts as bigint))) as minute,
from_unixtime(cast(ts as bigint)) as ts
from 
(select 
json_tuple(rateinfo,'movie','rate','timeStamp','uid') as(movie,rate,ts,uid)
from t_json) tmp;</code></pre><br><p>6.1.9、URL解析函数</p><p>网页URL数据解析函数：parse_url_tuple</p><pre><code class="language-sql">select parse_url_tuple("http://www.edu360.cn/baoming/youhui?cookieid=20937219375",'HOST','PATH','QUERY','QUERY:cookieid')
from dual;
+----------------+------------------+-----------------------+--------------+--+
|       c0       |        c1        |          c2           |      c3      |
+----------------+------------------+-----------------------+--------------+--+
| www.edu360.cn  | /baoming/youhui  | cookieid=20937219375  | 20937219375  |
+----------------+------------------+-----------------------+--------------+--+</code></pre><p><br></p><p>6.1.10、分析函数</p><p>（1）使用row_number() over()函数解决TOPN问题：</p><pre><code class="language-sql">-- 造数据：

1,18,a,male
2,19,b,male
3,22,c,female
4,16,d,female
5,30,e,male
6,26,f,female

create table t_rn(id int,age int,name string,sex string)
row format delimited fields terminated by ',';

load data local inpath '/root/hivetest/rn.dat' into table t_rn;

-- 分组标记序号

select * 
from 
(select id,age,name,sex,
row_number() over(partition by sex order by age desc) as rn 
from t_rn) tmp
where rn&lt;3
;</code></pre><p>（2）使用窗口分析函数 sum() over()：来实现窗口中的逐行累加</p><pre><code class="language-sql">0: jdbc:hive2://localhost:10000&gt; select * from  t_access_amount;
+----------------------+------------------------+-------------------------+--+
| t_access_amount.uid  | t_access_amount.month  | t_access_amount.amount  |
+----------------------+------------------------+-------------------------+--+
| A                    | 2015-01                | 33                      |
| A                    | 2015-02                | 10                      |
| A                    | 2015-03                | 20                      |
| B                    | 2015-01                | 30                      |
| B                    | 2015-02                | 15                      |
| B                    | 2015-03                | 45                      |
| C                    | 2015-01                | 30                      |
| C                    | 2015-02                | 40                      |
| C                    | 2015-03                | 30                      |
+----------------------+------------------------+-------------------------+--+

-- 需求：求出每个人截止到每个月的总额

select uid,month,amount,
sum(amount) over(partition by uid order by month rows between unbounded preceding and current row) as accumulate
from t_access_amount;</code></pre><p><br></p><p>6.2、自定义函数</p><p>在实际的开发过程中，很多时候需要我们处理复杂的数据逻辑，需要我们能够自定义函数来实现数据操作，下面举例说明：</p><p>/*<br></p><p>有如下json数据：rating.json</p><p><img src="https://img-blog.csdn.net/20180623045125723?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2ODAzNzk1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""><br></p><p></p><p>*/</p><pre><code class="language-sql">首先建表映射上述数据

create table t_ratingjson(json string);

导入数据

load data local inpath '/root/hivetest/rating.json' into table t_ratingjson;
</code></pre><p>我们的需求是想把上面的原始数据变成如下形式：<br>1193,5,978300760,1<br>661,3,978302109,1<br>914,3,978301968,1<br>3408,4,978300275,1<br><br></p><p>思路：如果能够自定义一个json解析函数，传入数，读出对应的值，就很方便了</p><pre><code class="language-sql">create table t_rate
as
select myjson(json,1) as movie,cast(myjson(json,2) as int) as rate,myjson(json,3) as ts,myjson(json,4) as uid 
from t_ratingjson;
</code></pre><p>解决：<br>hive中如何定义自己的函数：<br></p><p>1、先写一个java类（extends UDF,重载方法public C evaluate(A a,B b)），实现你所想要的函数的功能（传入一个json字符串和一个脚标，返回一个值）</p><pre><code class="language-java">public class ParseJson extends UDF{
	
	// 重载 ：返回值类型 和参数类型及个数，完全由用户自己决定
	// 本处需求是：给一个字符串，返回一个数组
	public String[] evaluate(String json) {	
		String[] split = json.split("\"");
		String[] res = new String[]{split[3],split[7],split[11],split[15]};
		return res;
	}
}</code></pre><p></p><p>2、将java程序打成jar包，上传到hive所在的机器<br>3、在hive命令行中将jar包添加到classpath ：    <br>        hive&gt;add jar /root/hivetest/myjson.jar;<br>4、在hive命令中用命令创建一个临时函数叫做myjson，关联你所写的这个java类<br></p><p>        hive&gt; create temporary function myjson as 'cn.rople.hive.udf.MyJsonParser';</p><p>5、开发hql语句，利用自定义函数，从原始表中抽取数据插入新表</p><pre><code class="language-sql">insert into table t_rate
select
split(jsonp(json),',')[0],
cast(split(jsonp(json),',')[1] as int),
cast(split(jsonp(json),',')[2] as bigint),
cast(split(jsonp(json),',')[3] as int)
from
t_rating_json;
</code></pre><p></p><p>注：临时函数只在一次hive会话中有效，重启会话后就无效<br><br>如果需要经常使用该自定义函数，可以考虑创建永久函数：<br>拷贝jar包到hive的类路径中：<br>cp wc.jar apps/hive-1.2.1/lib/<br>创建了：<br>create function pfuncx as 'com.doit.hive.udf.UserInfoParser';<br>删除函数：<br>DROP  TEMPORARY  FUNCTION  [IF  EXISTS] function_name  <br>DROP FUNCTION[IF EXISTS] function_name </p>            </div>
                </div>