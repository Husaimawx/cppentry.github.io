---
layout:     post
title:      Flume详述
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                <p>一、Flume<br>
1.概述<br>
    flume是分布式的，可靠的，用于从不同的来源有效收集 聚集 移动大量的日志数据用以集中式管理的系统。<br>
    是apache的一个顶级项目</p>

<p>    系统需求：<br>
        jdk6以上，推荐java7<br>
    <br>
2.下载安装flume<br>
    （1）下载<br>
        可以apache官网下载flume的安装包<br>
        下载时注意，flume具有两个版本，0.9.x和1.x,两个版本并不兼容，我们学习的是最新的1.x版本，也叫flume-ng版本。<br>
    （2）安装<br>
        解压到指定目录即可</p>

<p>3.概念、模型和特点<br>
    Flume Event - Flume 事件 - 被定义为一个具有有效荷载的字节数据流和可选的字符串属性集。<br>
    Flume Agent- Flume 代理 - 是一个进程承载从外部源事件流到下一个目的地的过程。包含source channel 和 sink<br>
    Source - 数据源 - 消耗外部传递给他的事件，外部源将数据按照Flume Source 能识别的格式将Flume事件发送给Flume Source<br>
    Channel - 数据通道 -  是一个被动的存储，用来保持事件，直到由一个Flume Sink消耗。<br>
    Sink - 数据汇聚点 - 代表外部数据存放位置。发送flume中的事件到指定的外部目标。</p>

<p>    复杂流动<br>
        Flume允许用户进行多级流动到最终目的地，也允许扇出流(一到多)、扇入流(多到一)的流动和故障转移、失败处理。<br>
    可靠性<br>
        事务型的数据传递，保证数据的可靠性。<br>
    可恢复<br>
        通道可以以内存或文件的方式实现，内存更快，但是不可恢复，文件比较慢但提供了可恢复性。</p>

<p>4.入门案例<br>
    首先需要通过一个配置文件来配置Agent。<br>
    通过flume提供的工具启动agent就可以工作了。</p>

<p>    (1)编写配置文件<br>
        #example.conf：单节点Flume配置<br>
        #命名Agent a1的组件<br>
        a1.sources  =  r1<br>
        a1.sinks  =  k1<br>
        a1.channels  =  c1</p>

<p>        #描述/配置Source<br>
        a1.sources.r1.type  =  netcat<br>
        a1.sources.r1.bind  =  0.0.0.0<br>
        a1.sources.r1.port  =  44444</p>

<p>        #描述Sink<br>
        a1.sinks.k1.type  =  logger</p>

<p>        #描述内存Channel<br>
        a1.channels.c1.type  =  memory<br>
        a1.channels.c1.capacity  =  1000 <br>
        a1.channels.c1.transactionCapacity  =  100</p>

<p>        #为Channle绑定Source和Sink<br>
        a1.sources.r1.channels  =  c1<br>
        a1.sinks.k1.channel  =  c1</p>

<p>        **一个配置文件中可以配置多个Agent，一个Agent中可以包含多个Source Sink Channel<br>
        **一个Source 可以绑定到多个通道，一个Sink只能绑定到一个通道</p>

<p>    (2)通过flume的工具启动agent<br>
        $ bin/flume-ng agent --conf conf --conf-file example.conf --name a1 -Dflume.root.logger=INFO,console<br>
    <br>
    (3)在windows中通过telnet命令连接flume所在机器的44444端口发送数据。<br>
        发现，flume确实收集到了该信息。</p>

<p>5.Source<br>
    !!!1.Avro Source<br>
        监听AVRO端口来接受来自外部AVRO客户端的事件流。<br>
        利用Avro Source可以实现多级流动、扇出流、扇入流等效果。<br>
        另外也可以接受通过flume提供的Avro客户端发送的日志信息。</p>

<p><br>
        支持的属性:<br>
            !channels    –     <br>
            !type    –    类型名称，"AVRO"<br>
            !bind    –    需要监听的主机名或IP<br>
            !port    –    要监听的端口<br>
            threads    –    工作线程最大线程数<br>
            selector.type          <br>
            selector.*          <br>
            interceptors    –    空格分隔的拦截器列表<br>
            interceptors.*          <br>
            compression-type    none    压缩类型，可以是“none”或“default”，这个值必须和AvroSource的压缩格式匹配<br>
            ssl    false    是否启用ssl加密，如果启用还需要配置一个“keystore”和一个“keystore-password”.<br>
            keystore    –    为SSL提供的 java密钥文件 所在路径<br>
            keystore-password    –    为SSL提供的 java密钥文件 密码<br>
            keystore-type    JKS    密钥库类型可以是 “JKS” 或 “PKCS12”.<br>
            exclude-protocols    SSLv3    空格分隔开的列表，用来指定在SSL / TLS协议中排除。SSLv3将总是被排除除了所指定的协议。<br>
            ipFilter    false    如果需要为netty开启ip过滤，将此项设置为true<br>
            ipFilterRules    –    陪netty的ip过滤设置表达式规则<br>
    <br>
        案例：<br>
            编写配置文件：<br>
                ＃命名Agent a1的组件<br>
                a1.sources  =  r1<br>
                a1.sinks  =  k1<br>
                a1.channels  =  c1</p>

<p>                ＃描述/配置Source<br>
                a1.sources.r1.type  =  avro<br>
                a1.sources.r1.bind  =  0.0.0.0<br>
                a1.sources.r1.port  =  33333</p>

<p>                ＃描述Sink<br>
                a1.sinks.k1.type  =  logger<br>
                ＃描述内存Channel<br>
                a1.channels.c1.type  =  memory<br>
                a1.channels.c1.capacity  =  1000<br>
                a1.channels.c1.transactionCapacity  =  100</p>

<p>                ＃为Channle绑定Source和Sink<br>
                a1.sources.r1.channels  =  c1<br>
                a1.sinks.k1.channel  =  c1<br>
            启动flume：<br>
                ./flume-ng agent --conf ../conf --conf-file ../conf/template2.conf --name a1 -Dflume.root.logger=INFO,console<br>
            通过flume提供的avro客户端向指定机器指定端口发送日志信息：<br>
                ./flume-ng avro-client --conf ../conf --host 0.0.0.0 --port 33333 --filename ../mydata/log1.txt<br>
            </p>

<p>    2.Exec Source<br>
        可以将命令产生的输出作为源</p>

<p>        属性说明：<br>
            !channels    –     <br>
            !type    –    类型名称，需要是"exec"<br>
            !command    –    要执行的命令<br>
            shell    –    A shell invocation used to run the command. e.g. /bin/sh -c. Required only for commands relying on shell features like wildcards, back ticks, pipes etc.<br>
            restartThrottle    10000    毫秒为单位的时间，用来声明等待多久后尝试重试命令<br>
            restart    false    如果cmd挂了，是否重启cmd<br>
            logStdErr    false    无论是否是标准错误都该被记录<br>
            batchSize    20    同时发送到通道中的最大行数<br>
            batchTimeout    3000    如果缓冲区没有满，经过多长时间发送数据<br>
            selector.type    复制还是多路复用<br>
            selector.*         Depends on the selector.type value<br>
            interceptors    –    空格分隔的拦截器列表<br>
            interceptors.*          <br>
        案例：<br>
            编写配置文件：<br>
                ＃命名Agent a1的组件<br>
                a1.sources  =  r1<br>
                a1.sinks  =  k1<br>
                a1.channels  =  c1</p>

<p>                ＃描述/配置Source<br>
                a1.sources.r1.type  =  exec<br>
                a1.sources.r1.command = ping ip地址</p>

<p>                ＃描述Sink<br>
                a1.sinks.k1.type  =  logger<br>
                ＃描述内存Channel<br>
                a1.channels.c1.type  =  memory<br>
                a1.channels.c1.capacity  =  1000<br>
                a1.channels.c1.transactionCapacity  =  100</p>

<p>                ＃为Channle绑定Source和Sink<br>
                a1.sources.r1.channels  =  c1<br>
                a1.sinks.k1.channel  =  c1</p>

<p>            启动flume：<br>
                ./flume-ng agent --conf ../conf --conf-file ../conf/template2.conf --name a1 -Dflume.root.logger=INFO,console</p>

<p>            **可以通过tail命令，收集日志文件中后续追加的日志tail -F xx.file &gt;&gt; x.file</p>

<p>    !!!3.Spooling Directory Source    <br>
        这个Source允许你将将要收集的数据放置到"自动搜集"目录中。这个Source将监视该目录，并将解析新文件的出现。事件处理逻辑是可插拔的，当一个文件被完全读入信道，它会被重命名或可选的直接删除。<br>
        要注意的是，放置到自动搜集目录下的文件不能修改，如果修改，则flume会报错。<br>
        另外，也不能产生重名的文件，如果有重名的文件被放置进来，则flume会报错。</p>

<p><br>
        属性说明：<br>
            !channels    –     <br>
            !type    –    类型，需要指定为"spooldir"<br>
            !spoolDir    –    读取文件的路径，即"搜集目录"<br>
            fileSuffix    .COMPLETED    对处理完成的文件追加的后缀<br>
            deletePolicy    never    处理完成后是否删除文件，需是"never"或"immediate"<br>
            fileHeader    false    Whether to add a header storing the absolute path filename.<br>
            fileHeaderKey    file    Header key to use when appending absolute path filename to event header.<br>
            basenameHeader    false    Whether to add a header storing the basename of the file.<br>
            basenameHeaderKey    basename    Header Key to use when appending basename of file to event header.<br>
            ignorePattern    ^$    正则表达式指定哪些文件需要忽略<br>
            trackerDir    .flumespool    Directory to store metadata related to processing of files. If this path is not an absolute path, then it is interpreted as relative to the spoolDir.<br>
            consumeOrder    处理文件的策略，oldest, youngest 或 random。<br>
            maxBackoff    4000    The maximum time (in millis) to wait between consecutive attempts to write to the channel(s) if the channel is full. The source will start at a low backoff and increase it exponentially each time the channel throws a ChannelException, upto the value specified by this parameter.<br>
            batchSize    100    Granularity at which to batch transfer to the channel<br>
            inputCharset    UTF-8    读取文件时使用的编码。<br>
            decodeErrorPolicy    FAIL    当在输入文件中发现无法处理的字符编码时如何处理。FAIL：抛出一个异常而无法 ​​解析该文件。REPLACE：用“替换字符”字符，通常是Unicode的U + FFFD更换不可解析角色。 忽略：掉落的不可解析的字符序列。<br>
            deserializer    LINE    声明用来将文件解析为事件的解析器。默认一行为一个事件。处理类必须实现EventDeserializer.Builder接口。<br>
            deserializer.*         Varies per event deserializer.<br>
            bufferMaxLines    –    (Obselete) This option is now ignored.<br>
            bufferMaxLineLength    5000    (Deprecated) Maximum length of a line in the commit buffer. Use deserializer.maxLineLength instead.<br>
            selector.type    replicating    replicating or multiplexing<br>
            selector.*         Depends on the selector.type value<br>
            interceptors    –    Space-separated list of interceptors<br>
            interceptors.*          </p>

<p>        案例：<br>
            编写配置文件：<br>
                ＃命名Agent a1的组件<br>
                a1.sources  =  r1<br>
                a1.sinks  =  k1<br>
                a1.channels  =  c1</p>

<p>                ＃描述/配置Source<br>
                a1.sources.r1.type  = spooldir<br>
                a1.sources.r1.spoolDir  = /home/park/work/apache-flume-1.6.0-bin/mydata</p>

<p>                ＃描述Sink<br>
                a1.sinks.k1.type  =  logger<br>
                ＃描述内存Channel<br>
                a1.channels.c1.type  =  memory<br>
                a1.channels.c1.capacity  =  1000<br>
                a1.channels.c1.transactionCapacity  =  100</p>

<p>                ＃为Channle绑定Source和Sink<br>
                a1.sources.r1.channels  =  c1<br>
                a1.sinks.k1.channel  =  c1</p>

<p><br>
            启动flume：<br>
                ./flume-ng agent --conf ../conf --conf-file ../conf/template4.conf --name a1 -Dflume.root.logger=INFO,console</p>

<p>            向指定目录中传输文件，发现flume收集到了该文件，将文件中的每一行都作为日志来处理。</p>

<p>    <br>
    !4.NetCat Source<br>
        一个NetCat Source用来监听一个指定端口，并将接收到的数据的每一行转换为一个事件。</p>

<p>        属性说明：<br>
            !channels    –     <br>
            !type    –    类型名称，需要被设置为"netcat"<br>
            !bind    –    指定要绑定到的ip或主机名。<br>
            !port    –    指定要绑定到的端口号<br>
            max-line-length    512    单行最大字节数<br>
            ack-every-event    true    对于收到的每一个Event是否响应"OK"<br>
            selector.type    <br>
            selector.*         <br>
            interceptors    –    <br>
            interceptors.*    </p>

<p>        案例:<br>
            参见快速入门案例</p>

<p>    5.Sequence Generator Source -- 序列发生器源<br>
        一个简单的序列发生器，不断的产生事件，值是从0开始每次递增1。<br>
        主要用来进行测试。</p>

<p>        参数说明：<br>
            !channels    –     <br>
            !type    –    类型名称，必须为"seq"<br>
            selector.type         <br>
            selector.*    <br>
            interceptors    –    <br>
            interceptors.*          <br>
            batchSize    1</p>

<p>        案例：<br>
            编写配置文件:<br>
                ＃命名Agent a1的组件<br>
                a1.sources  =  r1<br>
                a1.sinks  =  k1<br>
                a1.channels  =  c1</p>

<p>                ＃描述/配置Source<br>
                a1.sources.r1.type  = seq</p>

<p>                ＃描述Sink<br>
                a1.sinks.k1.type  =  logger<br>
                ＃描述内存Channel<br>
                a1.channels.c1.type  =  memory<br>
                a1.channels.c1.capacity  =  1000<br>
                a1.channels.c1.transactionCapacity  =  100</p>

<p>                ＃为Channle绑定Source和Sink<br>
                a1.sources.r1.channels  =  c1<br>
                a1.sinks.k1.channel  =  c1<br>
            启动flume:<br>
                ./flume-ng agent --conf ../conf --conf-file ../conf/template4.conf --name a1 -Dflume.root.logger=INFO,console<br>
                发现打印了日志</p>

<p>    !6.HTTP Source<br>
        此Source接受HTTP的GET和POST请求作为Flume的事件。<br>
        其中GET方式应该只用于试验。<br>
        需要提供一个可插拔的"处理器"来将请求转换为事件对象，这个处理器必须实现HTTPSourceHandler接口<br>
        这个处理器接受一个 HttpServletRequest对象，并返回一个Flume Envent对象集合。<br>
        从一个HTTP请求中得到的事件将在一个事务中提交到通道中。thus allowing for increased efficiency on channels like the file channel。<br>
        如果处理器抛出一个异常，Source将会返回一个400的HTTP状态码。<br>
        如果通道已满，无法再将Event加入Channel，则Source返回503的HTTP状态码，表示暂时不可用。</p>

<p>        参数说明:<br>
            !type         类型，必须为"HTTP"<br>
            !port    –    监听的端口<br>
            bind    0.0.0.0    监听的主机名或ip<br>
            handler    org.apache.flume.source.http.JSONHandler    处理器类，需要实现HTTPSourceHandler接口<br>
            handler.*    –    处理器的配置参数<br>
            selector.type    <br>
            selector.*         <br>
            interceptors    –    <br>
            interceptors.*          <br>
            enableSSL    false    是否开启SSL,如果需要设置为true。注意，HTTP不支持SSLv3。<br>
            excludeProtocols    SSLv3    空格分隔的要排除的SSL/TLS协议。SSLv3总是被排除的。<br>
            keystore         密钥库文件所在位置。<br>
            keystorePassword Keystore 密钥库密码</p>

<p>        案例:<br>
            编写配置文件:<br>
                ＃命名Agent a1的组件<br>
                a1.sources  =  r1<br>
                a1.sinks  =  k1<br>
                a1.channels  =  c1</p>

<p>                ＃描述/配置Source<br>
                a1.sources.r1.type  = http<br>
                a1.sources.r1.port  = 66666</p>

<p>                ＃描述Sink<br>
                a1.sinks.k1.type  =  logger<br>
                ＃描述内存Channel<br>
                a1.channels.c1.type  =  memory<br>
                a1.channels.c1.capacity  =  1000<br>
                a1.channels.c1.transactionCapacity  =  100</p>

<p>                ＃为Channle绑定Source和Sink<br>
                a1.sources.r1.channels  =  c1<br>
                a1.sinks.k1.channel  =  c1</p>

<p>            启动flume:<br>
                ./flume-ng agent --conf ../conf --conf-file ../conf/template6.conf --name a1 -Dflume.root.logger=INFO,console<br>
            通过命令发送HTTP请求到指定端口：<br>
                curl -X POST -d '[{ "headers" :{"a" : "a1","b" : "b1"},"body" : "hello~http~flume~"}]' http://0.0.0.0:6666<br>
            发现flume收集到了日志</p>

<p>        常见的Handler：<br>
            JSONHandler<br>
                可以处理JSON格式的数据，并支持UTF-8 UTF-16 UTF-32字符集<br>
                该handler接受Evnet数组，并根据请求头中指定的编码将其转换为Flume Event<br>
                如果没有指定编码，默认编码为UTF-8.<br>
                JSON格式如下：<br>
                --<br>
                [{<br>
                  "headers" : {<br>
                             "timestamp" : "434324343",<br>
                             "host" : "random_host.example.com"<br>
                             },<br>
                  "body" : "random_body"<br>
                  },<br>
                  {<br>
                  "headers" : {<br>
                             "namenode" : "namenode.example.com",<br>
                             "datanode" : "random_datanode.example.com"<br>
                             },<br>
                  "body" : "really_random_body"<br>
                  }]<br>
                --<br>
            To set the charset, the request must have content type specified as application/json;charset=UTF-8 (replace UTF-8 with UTF-16 or UTF-32 as required).<br>
            One way to create an event in the format expected by this handler is to use JSONEvent provided in the Flume SDK and use Google Gson to create the JSON string using the Gson#fromJson(Object, Type) method.<br>
            Typetype=newTypeToken&lt;List&lt;JSONEvent&gt;&gt;(){}.getType();</p>

<p>        BlobHandler<br>
            BlobHandler是一种将请求中上传文件信息转化为event的处理器。<br>
            参数说明，加！为必须属性：<br>
                ！handler    –    The FQCN of this class: org.apache.flume.sink.solr.morphline.BlobHandler<br>
                handler.maxBlobLength    100000000    The maximum number of bytes to read and buffer for a given request    </p>

<p>    7.Custom source -- 自定义源<br>
        自定义源是自己实现源接口得到的。<br>
        自定义源的类和其依赖包必须在开始时就放置到Flume的类加载目录下。</p>

<p>        参数说明，加！为必须属性：<br>
            !channels    –     <br>
            !type    –    类型，必须设置为自己的自定义处理类的全路径名<br>
            selector.type         <br>
            selector.*    <br>
            interceptors    –    <br>
            interceptors.*    <br>
    <br>
6.Sink - 汇聚点<br>
    !!!1.Logger Sink <br>
        记录指定级别的日志，通常用于调试。</p>

<p>        属性说明：<br>
            !channel    –     <br>
            !type    –    The component type name, needs to be logger<br>
            maxBytesToLog    16    Maximum number of bytes of the Event body to log</p>

<p>            要求必须在 --conf 参数指定的目录下有 log4j的配置文件<br>
            可以通过-Dflume.root.logger=INFO,console在命令启动时手动指定log4j参数</p>

<p>        案例：gb  <br>
            参见入门案例</p>

<p>    !!!2.File Roll Sink<br>
        在本地文件系统中存储事件。<br>
        每隔指定时长生成文件保存这段时间内收集到的日志信息。</p>

<p>        属性说明：<br>
            !channel    –     <br>
            !type    –    类型，必须是"file_roll"<br>
            !sink.directory    –    文件被存储的目录<br>
            sink.rollInterval    30    滚动文件每隔30秒（应该是每隔30秒钟单独切割数据到一个文件的意思）。如果设置为0，则禁止滚动，从而导致所有数据被写入到一个文件中。<br>
            sink.serializer    TEXT    Other possible options include avro_event or the FQCN of an implementation of EventSerializer.Builder interface.<br>
            batchSize    100     </p>

<p>        案例：<br>
            编写配置文件:<br>
                ＃命名Agent a1的组件<br>
                a1.sources  =  r1<br>
                a1.sinks  =  k1<br>
                a1.channels  =  c1</p>

<p>                ＃描述/配置Source<br>
                a1.sources.r1.type  = http<br>
                a1.sources.r1.port  = 6666</p>

<p>                ＃描述Sink<br>
                a1.sinks.k1.type  = file_roll<br>
                a1.sinks.k1.sink.directory = /home/park/work/apache-flume-1.6.0-bin/mysink<br>
                ＃描述内存Channel<br>
                a1.channels.c1.type  =  memory<br>
                a1.channels.c1.capacity  =  1000<br>
                a1.channels.c1.transactionCapacity  =  100</p>

<p>                ＃为Channle绑定Source和Sink<br>
                a1.sources.r1.channels  =  c1<br>
                a1.sinks.k1.channel  =  c1</p>

<p>            启动flume:<br>
                ./flume-ng agent --conf ../conf --conf-file ../conf/template7.conf --name a1 -Dflume.root.logger=INFO,console<br>
    !!!3.Avro Sink<br>
        是实现多级流动 和 扇出流(1到多) 扇入流(多到1) 的基础。    </p>

<p>        属性说明:<br>
            !channel    –     <br>
            !type    –    The component type name, needs to be avro.<br>
            !hostname    –    The hostname or IP address to bind to.<br>
            !port    –    The port # to listen on.<br>
            batch-size    100    number of event to batch together for send.<br>
            connect-timeout    20000    Amount of time (ms) to allow for the first (handshake) request.<br>
            request-timeout    20000    Amount of time (ms) to allow for requests after the first.<br>
            reset-connection-interval    none    Amount of time (s) before the connection to the next hop is reset. This will force the Avro Sink to reconnect to the next hop. This will allow the sink to connect to hosts behind a hardware load-balancer when news hosts are added without having to restart the agent.<br>
            compression-type    none    This can be “none” or “deflate”. The compression-type must match the compression-type of matching AvroSource<br>
            compression-level    6    The level of compression to compress event. 0 = no compression and 1-9 is compression. The higher the number the more compression<br>
            ssl    false    Set to true to enable SSL for this AvroSink. When configuring SSL, you can optionally set a “truststore”, “truststore-password”, “truststore-type”, and specify whether to “trust-all-certs”.<br>
            trust-all-certs    false    If this is set to true, SSL server certificates for remote servers (Avro Sources) will not be checked. This should NOT be used in production because it makes it easier for an attacker to execute a man-in-the-middle attack and “listen in” on the encrypted connection.<br>
            truststore    –    The path to a custom Java truststore file. Flume uses the certificate authority information in this file to determine whether the remote Avro Source’s SSL authentication credentials should be trusted. If not specified, the default Java JSSE certificate authority files (typically “jssecacerts” or “cacerts” in the Oracle JRE) will be used.<br>
            truststore-password    –    The password for the specified truststore.<br>
            truststore-type    JKS    The type of the Java truststore. This can be “JKS” or other supported Java truststore type.<br>
            exclude-protocols    SSLv3    Space-separated list of SSL/TLS protocols to exclude. SSLv3 will always be excluded in addition to the protocols specified.<br>
            maxIoWorkers    2 * the number of available processors in the machine    The maximum number of I/O w</p>

<p>        案例1 - 多级流动：<br>
    <br>
            h1:配置配置文件<br>
                    #命名Agent组件<br>
                    a1.sources=r1<br>
                    a1.sinks=k1<br>
                    a1.channels=c1</p>

<p>                    #描述/配置Source<br>
                    a1.sources.r1.type=http<br>
                    a1.sources.r1.port=8888<br>
                    #描述Sink<br>
                    a1.sinks.k1.type=avro<br>
                    a1.sinks.k1.hostname=192.168.242.138<br>
                    a1.sinks.k1.port=9988<br>
                    #描述内存Channel<br>
                    a1.channels.c1.type=memory<br>
                    a1.channels.c1.capacity=1000<br>
                    a1.channels.c1.transactionCapacity=1000<br>
                    #为Channel绑定Source和Sink<br>
                    a1.sources.r1.channels=c1<br>
                    a1.sinks.k1.channel=c1<br>
            h2:<br>
                配置配置文件:<br>
                    #命名Agent组件<br>
                    a1.sources=r1<br>
                    a1.sinks=k1<br>
                    a1.channels=c1</p>

<p>                    #描述/配置Source<br>
                    a1.sources.r1.type=avro<br>
                    a1.sources.r1.bind=0.0.0.0<br>
                    a1.sources.r1.port=9988<br>
                    #描述Sink<br>
                    a1.sinks.k1.type=logger<br>
                    #描述内存Channel<br>
                    a1.channels.c1.type=memory<br>
                    a1.channels.c1.capacity=1000<br>
                    a1.channels.c1.transactionCapacity=1000<br>
                    #为Channel绑定Source和Sink<br>
                    a1.sources.r1.channels=c1<br>
                    a1.sinks.k1.channel=c1<br>
                启动flume:<br>
                    ./flume-ng agent --conf ../conf --conf-file ../conf/template8.conf --name a1 -Dflume.root.logger=INFO,console</p>

<p>            <br>
            启动flume:<br>
                ./flume-ng agent --conf ../conf --conf-file ../conf/template8.conf --name a1 -Dflume.root.logger=INFO,console</p>

<p>            发送http请求到h1：<br>
                curl -X POST -d '[{ "headers" :{"a" : "a1","b" : "b1"},"body" : "hello~http~flume~"}]' http://192.168.242.133:8888<br>
            稍等几秒后，发现h2最终收到了这条消息</p>

<p>        案例2：扇出流 - 复制<br>
            h2 h3:<br>
                配置配置文件:<br>
                    #命名Agent组件<br>
                    a1.sources=r1<br>
                    a1.sinks=k1<br>
                    a1.channels=c1</p>

<p>                    #描述/配置Source<br>
                    a1.sources.r1.type=avro<br>
                    a1.sources.r1.bind=0.0.0.0<br>
                    a1.sources.r1.port=9988<br>
                    #描述Sink<br>
                    a1.sinks.k1.type=logger<br>
                    #描述内存Channel<br>
                    a1.channels.c1.type=memory<br>
                    a1.channels.c1.capacity=1000<br>
                    a1.channels.c1.transactionCapacity=1000<br>
                    #为Channel绑定Source和Sink<br>
                    a1.sources.r1.channels=c1<br>
                    a1.sinks.k1.channel=c1<br>
                启动flume:<br>
                    ./flume-ng agent --conf ../conf --conf-file ../conf/template8.conf --name a1 -Dflume.root.logger=INFO,console</p>

<p>            h1:<br>
                配置配置文件<br>
                    #命名Agent组件<br>
                    a1.sources=r1<br>
                    a1.sinks=k1 k2<br>
                    a1.channels=c1 c2</p>

<p>                    #描述/配置Source<br>
                    a1.sources.r1.type=http<br>
                    a1.sources.r1.port=8888<br>
                    #描述Sink<br>
                    a1.sinks.k1.type=avro<br>
                    a1.sinks.k1.hostname=192.168.242.138<br>
                    a1.sinks.k1.port=9988<br>
                    a1.sinks.k2.type=avro<br>
                    a1.sinks.k2.hostname=192.168.242.135<br>
                    a1.sinks.k2.port=9988<br>
                    #描述内存Channel<br>
                    a1.channels.c1.type=memory<br>
                    a1.channels.c1.capacity=1000<br>
                    a1.channels.c1.transactionCapacity=1000<br>
                    a1.channels.c2.type=memory<br>
                    a1.channels.c2.capacity=1000<br>
                    a1.channels.c2.transactionCapacity=1000<br>
                    #为Channel绑定Source和Sink<br>
                    a1.sources.r1.channels=c1 c2<br>
                    a1.sinks.k1.channel=c1    <br>
                    a1.sinks.k2.channel=c2    <br>
            启动flume:<br>
                    ./flume-ng agent --conf ../conf --conf-file ../conf/template8.conf --name a1 -Dflume.root.logger=INFO,console</p>

<p>        案例3：扇出流 - 多路复用（路由）<br>
                h2 h3:<br>
                配置配置文件:<br>
                    #命名Agent组件<br>
                    a1.sources=r1<br>
                    a1.sinks=k1<br>
                    a1.channels=c1</p>

<p>                    #描述/配置Source<br>
                    a1.sources.r1.type=avro<br>
                    a1.sources.r1.bind=0.0.0.0<br>
                    a1.sources.r1.port=9988<br>
                    #描述Sink<br>
                    a1.sinks.k1.type=logger<br>
                    #描述内存Channel<br>
                    a1.channels.c1.type=memory<br>
                    a1.channels.c1.capacity=1000<br>
                    a1.channels.c1.transactionCapacity=1000<br>
                    #为Channel绑定Source和Sink<br>
                    a1.sources.r1.channels=c1<br>
                    a1.sinks.k1.channel=c1<br>
                启动flume:<br>
                    ./flume-ng agent --conf ../conf --conf-file ../conf/template8.conf --name a1 -Dflume.root.logger=INFO,console</p>

<p>            h1:<br>
                配置配置文件<br>
                    #配置Agent组件<br>
                    a1.sources=r1<br>
                    a1.sinks=k1 k2<br>
                    a1.channels=c1 c2</p>

<p>                    #描述/配置Source<br>
                    a1.sources.r1.type=http<br>
                    a1.sources.r1.port=8888<br>
                    a1.sources.r1.selector.type=multiplexing<br>
                    a1.sources.r1.selector.header=flag<br>
                    a1.sources.r1.selector.mapping.aaa=c1<br>
                    a1.sources.r1.selector.mapping.bbb=c2<br>
                    a1.sources.r1.selector.default=c1<br>
                    #描述Sink<br>
                    a1.sinks.k1.type=avro<br>
                    a1.sinks.k1.hostname=192.168.242.138<br>
                    a1.sinks.k1.port=9988<br>
                    a1.sinks.k2.type=avro<br>
                    a1.sinks.k2.hostname=192.168.242.135<br>
                    a1.sinks.k2.port=9988<br>
                    #描述内存Channel<br>
                    a1.channels.c1.type=memory<br>
                    a1.channels.c1.capacity=1000<br>
                    a1.channels.c1.transactionCapacity=1000<br>
                    a1.channels.c2.type=memory<br>
                    a1.channels.c2.capacity=1000<br>
                    a1.channels.c2.transactionCapacity=1000<br>
                    #为Channel绑定Source和Sink<br>
                    a1.sources.r1.channels=c1 c2<br>
                    a1.sinks.k1.channel=c1<br>
                    a1.sinks.k2.channel=c2<br>
            启动flume:<br>
                ./flume-ng agent --conf ../conf --conf-file ../conf/template8.conf --name a1 -Dflume.root.logger=INFO,console<br>
            发送http请求进行测试。发现可以实现路由效果</p>

<p>        案例4：扇入流<br>
            m3:<br>
                编写配置文件:<br>
                    #命名Agent组件<br>
                    a1.sources=r1<br>
                    a1.sinks=k1<br>
                    a1.channels=c1<br>
                    #描述/配置Source<br>
                    a1.sources.r1.type=avro<br>
                    a1.sources.r1.bind=0.0.0.0<br>
                    a1.sources.r1.port=4141<br>
                    #描述Sink<br>
                    a1.sinks.k1.type=logger<br>
                    #描述内存Channel<br>
                    a1.channels.c1.type=memory<br>
                    a1.channels.c1.capacity=1000<br>
                    a1.channels.c1.transactionCapacity=1000<br>
                    #为Channel绑定Source和Sink<br>
                    a1.sources.r1.channels=c1<br>
                    a1.sinks.k1.channel=c1<br>
                启动flume:<br>
                    ./flume-ng agent --conf ../conf --conf-file ../conf/template.conf --name a1 -Dflume.root.logger=INFO,console<br>
            <br>
            m1、m2:<br>
                编写配置文件:<br>
                    #命名Agent组件<br>
                    a1.sources=r1<br>
                    a1.sinks=k1<br>
                    a1.channels=c1</p>

<p>                    #描述/配置Source<br>
                    a1.sources.r1.type=http<br>
                    a1.sources.r1.port=8888<br>
                    #描述Sink<br>
                    a1.sinks.k1.type=avro<br>
                    a1.sinks.k1.hostname=192.168.242.135<br>
                    a1.sinks.k1.port=4141<br>
                    #描述内存Channel<br>
                    a1.channels.c1.type=memory<br>
                    a1.channels.c1.capacity=1000<br>
                    a1.channels.c1.transactionCapacity=1000<br>
                    #为Channel绑定Source和Sink<br>
                    a1.sources.r1.channels=c1<br>
                    a1.sinks.k1.channel=c1<br>
                启动flume:<br>
                    ./flume-ng agent --conf ../conf --conf-file ../conf/template9.conf --name a1 -Dflume.root.logger=INFO,console<br>
                m1通过curl发送一条http请求，由于默认使用的是jsonHandler，数据格式必须是指定的json格式：<br>
                    [root@localhost conf]# curl -X POST -d '[{ "headers" :{"flag" : "c"},"body" : "idoall.org_body"}]' http://0.0.0.0:8888<br>
                 m2通过curl发送一条http请求，由于默认使用的是jsonHandler，数据格式必须是指定的json格式：<br>
                    [root@localhost conf]# curl -X POST -d '[{ "headers" :{"flag" : "c"},"body" : "idoall.org_body"}]' http://0.0.0.0:8888<br>
                发现m3均能正确收到消息</p>

<p><br>
    !!!!4.HDFS Sink<br>
        此Sink将事件写入到Hadoop分布式文件系统HDFS中。<br>
        目前它支持创建文本文件和序列化文件。<br>
        对这两种格式都支持压缩。<br>
        这些文件可以分卷，按照指定的时间或数据量或事件的数量为基础。<br>
        它还通过类似时间戳或机器属性对数据进行 buckets/partitions 操作    It also buckets/partitions data by attributes like timestamp or machine where the event originated.<br>
        HDFS的目录路径可以包含将要由HDFS替换格式的转移序列用以生成存储事件的目录/文件名。<br>
        使用这个Sink要求hadoop必须已经安装好，以便Flume可以通过hadoop提供的jar包与HDFS进行通信。<br>
        注意，此版本hadoop必须支持sync()调用。</p>

<p>        属性说明:<br>
            !channel    –     <br>
            !type    –    类型名称，必须是“HDFS”<br>
            !hdfs.path    –    HDFS 目录路径 (eg hdfs://namenode/flume/webdata/)<br>
            hdfs.filePrefix    FlumeData    Flume在目录下创建文件的名称前缀<br>
            hdfs.fileSuffix    –    追加到文件的名称后缀 (eg .avro - 注: 日期时间不会自动添加)<br>
            hdfs.inUsePrefix    –    Flume正在处理的文件所加的前缀<br>
            hdfs.inUseSuffix    .tmp    Flume正在处理的文件所加的后缀<br>
            hdfs.rollInterval    30    Number of seconds to wait before rolling current file (0 = never roll based on time interval)<br>
            hdfs.rollSize    1024    File size to trigger roll, in bytes (0: never roll based on file size)<br>
            hdfs.rollCount    10    Number of events written to file before it rolled (0 = never roll based on number of events)<br>
            hdfs.idleTimeout    0    Timeout after which inactive files get closed (0 = disable automatic closing of idle files)<br>
            hdfs.batchSize    100    number of events written to file before it is flushed to HDFS<br>
            hdfs.codeC    –    Compression codec. one of following : gzip, bzip2, lzo, lzop, snappy<br>
            hdfs.fileType    SequenceFile    File format: currently SequenceFile, DataStream or CompressedStream (1)DataStream will not compress output file and please don’t set codeC (2)CompressedStream requires set hdfs.codeC with an available codeC<br>
            hdfs.maxOpenFiles    5000    Allow only this number of open files. If this number is exceeded, the oldest file is closed.<br>
            hdfs.minBlockReplicas    –    Specify minimum number of replicas per HDFS block. If not specified, it comes from the default Hadoop config in the classpath.<br>
            hdfs.writeFormat    –    Format for sequence file records. One of “Text” or “Writable” (the default).<br>
            hdfs.callTimeout    10000    Number of milliseconds allowed for HDFS operations, such as open, write, flush, close. This number should be increased if many HDFS timeout operations are occurring.<br>
            hdfs.threadsPoolSize    10    Number of threads per HDFS sink for HDFS IO ops (open, write, etc.)<br>
            hdfs.rollTimerPoolSize    1    Number of threads per HDFS sink for scheduling timed file rolling<br>
            hdfs.kerberosPrincipal    –    Kerberos user principal for accessing secure HDFS<br>
            hdfs.kerberosKeytab    –    Kerberos keytab for accessing secure HDFS<br>
            hdfs.proxyUser          <br>
            hdfs.round    false    时间戳是否向下取整（如果是true，会影响所有基于时间的转移序列，除了%T）<br>
            hdfs.roundValue    1    舍值的边界值<br>
            hdfs.roundUnit    向下舍值的单位 -  second, minute , hour<br>
            hdfs.timeZone    Local Time    Name of the timezone that should be used for resolving the directory path, e.g. America/Los_Angeles.<br>
            hdfs.useLocalTimeStamp    false    Use the local time (instead of the timestamp from the event header) while replacing the escape sequences.<br>
            hdfs.closeTries    0    Number of times the sink must try renaming a file, after initiating a close attempt. If set to 1, this sink will not re-try a failed rename (due to, for example, NameNode or DataNode failure), and may leave the file in an open state with a .tmp extension. If set to 0, the sink will try to rename the file until the file is eventually renamed (there is no limit on the number of times it would try). The file may still remain open if the close call fails but the data will be intact and in this case, the file will be closed only after a Flume restart.<br>
            hdfs.retryInterval    180    Time in seconds between consecutive attempts to close a file. Each close call costs multiple RPC round-trips to the Namenode, so setting this too low can cause a lot of load on the name node. If set to 0 or less, the sink will not attempt to close the file if the first attempt fails, and may leave the file open or with a ”.tmp” extension.<br>
            serializer    TEXT    Other possible options include avro_event or the fully-qualified class name of an implementation of the EventSerializer.Builder interface.</p>

<p>        案例：<br>
            编写配置文件:<br>
                #命名Agent组件<br>
                a1.sources=r1<br>
                a1.sinks=k1<br>
                a1.channels=c1</p>

<p>                #描述/配置Source<br>
                a1.sources.r1.type=http<br>
                a1.sources.r1.port=8888<br>
                #描述Sink<br>
                a1.sinks.k1.type=hdfs<br>
                a1.sinks.k1.hdfs.path=hdfs://0.0.0.0:9000/ppp<br>
                #描述内存Channel<br>
                a1.channels.c1.type=memory<br>
                a1.channels.c1.capacity=1000<br>
                a1.channels.c1.transactionCapacity=1000<br>
                #为Channel绑定Source和Sink<br>
                a1.sources.r1.channels=c1<br>
                a1.sinks.k1.channel=c1<br>
            启动flume:<br>
                ./flume-ng agent --conf ../conf --conf-file ../conf/template9.conf --name a1 -Dflume.root.logger=INFO,console    </p>

<p>    5.Hive Sink<br>
        </p>

<p>    6.Custom Sink    <br>
        自定义接收器，是自己实现的接收器接口Sink来实现的。<br>
        自定义接收器的类及其依赖类须在Flume启动前放置到Flume类加载目录下。</p>

<p>        属性说明：<br>
            type    –    类型，需要指定为自己实现的Sink类的全路径名<br>
7.Selector<br>
    选择器用来控制在扇出时数据分发的方式<br>
    <br>
    选择器可以工作在 复制 多路复用(路由)模式 下    </p>

<p>    复制模式<br>
        属性说明：<br>
            selector.type replicating 类型名称，必须是 replicating <br>
            selector.optional    –    标志通道为可选<br>
        案例：<br>
            参看avro sink案例</p>

<p>    多路复用（路由）模式<br>
            属性说明：<br>
                selector.type    类型，必须是"multiplexing"<br>
                selector.header    指定要监测的头的名称     <br>
                selector.default    –     <br>
                selector.mapping.*    –<br>
            举例：<br>
                a1.sources = r1<br>
                a1.channels = c1 c2 c3 c4<br>
                a1.sources.r1.selector.type = multiplexing<br>
                a1.sources.r1.selector.header = state<br>
                a1.sources.r1.selector.mapping.CZ = c1<br>
                a1.sources.r1.selector.mapping.US = c2 c3<br>
                a1.sources.r1.selector.default = c4<br>
            案例：<br>
                参看 avro sink案例</p>

<p>8. <br>
    1.概述<br>
        处理器 - 实现负载均衡 或 失败恢复 的组件<br>
        需要将若干sink组成一个sink group组<br>
        为sink group 配置processor<br>
        processor可以基于切换 group中的 sink 来实现负载均衡 或 失败恢复。<br>
    <br>
        sinks    –    用空格分隔的Sink集合<br>
        processor.type    default    类型名称，必须是 default、failover 或 load_balance</p>

<p>    2.Default Sink Processor<br>
        Default Sink Processor 只接受一个 Sink。<br>
        不要求用户为单一Sink创建processor</p>

<p>    3.Failover Sink Processor<br>
        Failover Sink Processor 维护一个sinks的优先表。确保只要一个是可用的该事件就可以被处理。<br>
        失败处理原理是，为失效的sink指定一个冷却时间，在冷却时间到达后再重新使用。<br>
        sink们可以被配置一个优先级，数字越大优先级越高。<br>
        如果sink发送事件失败，则下一个最高优先级的sink将会尝试接着发送事件。<br>
        如果没有指定优先级，则优先级顺序取决于sink们的配置顺序，先配置的默认优先级高于后配置的。<br>
        在配置的过程中，设置一个group processor ，并且为每个sink都指定一个优先级。<br>
        优先级必须是唯一的。<br>
        另外可以设置maxpenalty属性指定限定失败时间。</p>

<p>        sinks    –    Space-separated list of sinks that are participating in the group<br>
        processor.type    default    The component type name, needs to be failover<br>
        processor.priority.&lt;sinkName&gt;    –    Priority value. &lt;sinkName&gt; must be one of the sink instances associated with the current sink group A higher priority value Sink gets activated earlier. A larger absolute value indicates higher priority<br>
        processor.maxpenalty    30000    The maximum backoff period for the failed Sink (in millis)</p>

<p>        Example for agent named a1:<br>
        ------<br>
        a1.sinkgroups = g1<br>
        a1.sinkgroups.g1.sinks = k1 k2<br>
        a1.sinkgroups.g1.processor.type = failover<br>
        a1.sinkgroups.g1.processor.priority.k1 = 5<br>
        a1.sinkgroups.g1.processor.priority.k2 = 10<br>
        a1.sinkgroups.g1.processor.maxpenalty = 10000<br>
        ------<br>
    <br>
    4.Load balancing Sink Processor<br>
        Load balancing Sink processor 提供了在多个sink之间实现负载均衡的能力。<br>
        它维护了一个活动sink的索引列表。<br>
        它支持轮询 或 随机方式的负载均衡，默认值是轮询方式，可以通过配置指定。<br>
        也可以通过实现AbstractSinkSelector接口实现自定义的选择机制。</p>

<p>        !processor.sinks    –    Space-separated list of sinks that are participating in the group<br>
        !processor.type    default    The component type name, needs to be load_balance<br>
        processor.backoff    false    Should failed sinks be backed off exponentially.<br>
        processor.selector    round_robin    Selection mechanism. Must be either round_robin, random or FQCN of custom class that inherits from AbstractSinkSelector<br>
        processor.selector.maxTimeOut    30000    Used by backoff selectors to limit exponential backoff (in milliseconds)</p>

<p>        ------<br>
        a1.sinkgroups = g1<br>
        a1.sinkgroups.g1.sinks = k1 k2<br>
        a1.sinkgroups.g1.processor.type = load_balance<br>
        a1.sinkgroups.g1.processor.backoff = true<br>
        a1.sinkgroups.g1.processor.selector = random<br>
        ------    </p>

<p>9.Interceptors - 拦截器<br>
    0.概述<br>
        Flume有能力在运行阶段修改/删除Event，这是通过拦截器（Interceptors）来实现的。<br>
        拦截器需要实现org.apache.flume.interceptor.Interceptor接口。<br>
        拦截器可以修改或删除事件基于开发者在选择器中选择的任何条件。<br>
        拦截器采用了责任链模式，多个拦截器可以按指定顺序拦截。<br>
        一个拦截器返回的事件列表被传递给链中的下一个拦截器。<br>
        如果一个拦截器需要删除事件，它只需要在返回的事件集中不包含要删除的事件即可。<br>
        如果要删除所有事件，只需返回一个空列表。<br>
        <br>
    1.Timestamp Interceptor<br>
        这个拦截器在事件头中插入以毫秒为单位的当前处理时间。<br>
        头的名字为timestamp，值为当前处理的时间戳。<br>
        如果在之前已经有这个时间戳，则不保留原有的时间戳。</p>

<p>        参数说明：<br>
            !type    –    类型名称，必须是timestamp或自定义类的全路径名<br>
            preserveExisting    false    如果时间戳已经存在是否保留</p>

<p>    2.Host Interceptor<br>
        这个拦截器插入当前处理Agent的主机名或ip<br>
        头的名字为host或配置的名称<br>
        值是主机名或ip地址，基于配置。</p>

<p>        参数说明：<br>
            !type    –    类型名称，必须是host<br>
            preserveExisting    false    如果主机名已经存在是否保留<br>
            useIP    true    如果配置为true则用IP，配置为false则用主机名<br>
            hostHeader    host    加入头时使用的名称</p>

<p>    3.Static Interceptor<br>
        此拦截器允许用户增加静态头信息使用静态的值到所有事件。<br>
        目前的实现中不允许一次指定多个头。<br>
        如果需要增加多个静态头可以指定多个Static interceptors<br>
        属性说明:<br>
            !type    –    类型，必须是static<br>
            preserveExisting    true    如果配置头已经存在是否应该保留<br>
            key    key    要增加的头名<br>
            value    value    要增加的头值</p>

<p>    4.UUID Interceptor<br>
        这个拦截器在所有事件头中增加一个全局一致性标志。<br>
        其实就是UUID。</p>

<p>        属性说明：<br>
            !type    –    类型名称，必须是org.apache.flume.sink.solr.morphline.UUIDInterceptor$Builder<br>
            headerName    id    头名称<br>
            preserveExisting    true    如果头已经存在，是否保留<br>
            prefix    “”    在UUID前拼接的字符串前缀<br>
        <br>
    5.Search and Replace Interceptor<br>
        这个拦截器提供了简单的基于字符串的正则搜索和替换功能。</p>

<p>        属性说明：<br>
            type    –    类型名称，必须是"search_replace"<br>
            searchPattern    –    要搜索和替换的正则表达式<br>
            replaceString    –    要替换为的字符串<br>
            charset    UTF-8    字符集编码，默认utf-8</p>

<p>    6.Regex Filtering Interceptor<br>
        此拦截器通过解析事件体去匹配给定正则表达式来筛选事件。<br>
        所提供的正则表达式即可以用来包含或刨除事件。</p>

<p>        属性说明：<br>
        !type    –    类型，必须设定为regex_filter<br>
        regex    ”.*” 所要匹配的正则表达式<br>
        excludeEvents    false    如果是true则刨除匹配的事件，false则包含匹配的事件。</p>

<p>    #7.Regex Extractor Interceptor<br>
        使用指定正则表达式匹配事件，并将匹配到的组作为头加入到事件中。<br>
        它也支持插件化的序列化器用来格式化匹配到的组在加入他们作为头之前。</p>

<p>        属性说明：<br>
            !type    –    类型，必须是regex_extractor<br>
            !regex    –    要匹配的正则表达式<br>
            !serializers    –    Space-separated list of serializers for mapping matches to header names and serializing their values. (See example below) Flume provides built-in support for the following serializers: org.apache.flume.interceptor.RegexExtractorInterceptorPassThroughSerializer org.apache.flume.interceptor.RegexExtractorInterceptorMillisSerializer<br>
            serializers.&lt;s1&gt;.type    default    Must be default (org.apache.flume.interceptor.RegexExtractorInterceptorPassThroughSerializer), org.apache.flume.interceptor.RegexExtractorInterceptorMillisSerializer, or the FQCN of a custom class that implements org.apache.flume.interceptor.RegexExtractorInterceptorSerializer<br>
            serializers.&lt;s1&gt;.name    –     <br>
            serializers.*    –    Serializer-specific properties</p>

<p>        ----<br>
        If the Flume event body contained 1:2:3.4foobar5 and the following configuration was used<br>
                                            <br>
        a1.sources.r1.interceptors.i1.regex = (\\d):(\\d):(\\d)<br>
        a1.sources.r1.interceptors.i1.serializers = s1 s2 s3<br>
        a1.sources.r1.interceptors.i1.serializers.s1.name = one<br>
        a1.sources.r1.interceptors.i1.serializers.s2.name = two<br>
        a1.sources.r1.interceptors.i1.serializers.s3.name = three</p>

<p>        The extracted event will contain the same body but the following headers will have been added one=&gt;1, two=&gt;2, three=&gt;3<br>
        ----<br>
        <br>
10.Channel<br>
    !!!1.Memory Channel 内存通道<br>
        事件将被存储在内存中的具有指定大小的队列中。<br>
        非常适合那些需要高吞吐量但是失败是会丢失数据的场景下。</p>

<p>        属性说明：<br>
            !type    –    类型，必须是“memory”<br>
            capacity    100    事件存储在信道中的最大数量<br>
            transactionCapacity    100    每个事务中的最大事件数<br>
            keep-alive    3    添加或删除操作的超时时间<br>
            byteCapacityBufferPercentage    20    Defines the percent of buffer between byteCapacity and the estimated total size of all events in the channel, to account for data in headers. See below.<br>
            byteCapacity    see description    Maximum total bytes of memory allowed as a sum of all events in this channel. The implementation only counts the Event body, which is the reason for providing the byteCapacityBufferPercentage configuration parameter as well. Defaults to a computed value equal to 80% of the maximum memory available to the JVM (i.e. 80% of the -Xmx value passed on the command line). Note that if you have multiple memory channels on a single JVM, and they happen to hold the same physical events (i.e. if you are using a replicating channel selector from a single source) then those event sizes may be double-counted for channel byteCapacity purposes. Setting this value to 0 will cause this value to fall back to a hard internal limit of about 200 GB.</p>

<p>        案例:参看入门案例<br>
    2.JDBC Channel<br>
        事件被持久存储在可靠的数据库中。目前支持嵌入式的Derby数据库。如果可恢复性非常的重要可以使用这种方式。<br>
        <br>
    !!!3.File Channel<br>
        性能会比较低下，但是即使程序出错数据不会丢失<br>
        属性说明:<br>
            !type    –    类型，必须是“file”<br>
            checkpointDir    ~/.flume/file-channel/checkpoint    检查点文件存放的位置<br>
            useDualCheckpoints    false    Backup the checkpoint. If this is set to true, backupCheckpointDir must be set<br>
            backupCheckpointDir    –    The directory where the checkpoint is backed up to. This directory must not be the same as the data directories or the checkpoint directory<br>
            dataDirs    ~/.flume/file-channel/data    逗号分隔的目录列表，用以存放日志文件。使用单独的磁盘上的多个目录可以提高文件通道效率。<br>
            transactionCapacity    10000    The maximum size of transaction supported by the channel<br>
            checkpointInterval    30000    Amount of time (in millis) between checkpoints<br>
            maxFileSize    2146435071    一个日志文件的最大尺寸<br>
            minimumRequiredSpace    524288000    Minimum Required free space (in bytes). To avoid data corruption, File Channel stops accepting take/put requests when free space drops below this value<br>
            capacity    1000000    Maximum capacity of the channel<br>
            keep-alive    3    Amount of time (in sec) to wait for a put operation<br>
            use-log-replay-v1    false    Expert: Use old replay logic<br>
            use-fast-replay    false    Expert: Replay without using queue<br>
            checkpointOnClose    true    Controls if a checkpoint is created when the channel is closed. Creating a checkpoint on close speeds up subsequent startup of the file channel by avoiding replay.<br>
            encryption.activeKey    –    Key name used to encrypt new data<br>
            encryption.cipherProvider    –    Cipher provider type, supported types: AESCTRNOPADDING<br>
            encryption.keyProvider    –    Key provider type, supported types: JCEKSFILE<br>
            encryption.keyProvider.keyStoreFile    –    Path to the keystore file<br>
            encrpytion.keyProvider.keyStorePasswordFile    –    Path to the keystore password file<br>
            encryption.keyProvider.keys    –    List of all keys (e.g. history of the activeKey setting)<br>
            encyption.keyProvider.keys.*.passwordFile    –    Path to the optional key password file<br>
    !!!4.Spillable Memory Channel -- 内存溢出通道<br>
        事件被存储在内存队列和磁盘中。<br>
        内存队列作为主存储，而磁盘作为溢出内容的存储。<br>
        内存存储通过embedded File channel来进行管理。<br>
        当内存队列已满时，后续的事件将被存储在文件通道中。 <br>
        这个通道适用于正常操作期间适用内存通道已期实现高效吞吐，而在高峰期间适用文件通道实现高耐受性。通过降低吞吐效率提高系统可耐受性。<br>
        如果Agent崩溃，则只有存储在文件系统中的事件可以被恢复。<br>
        此通道处于试验阶段，不建议在生产环境中使用。 </p>

<p>        属性说明：<br>
        !type    –    类型，必须是"SPILLABLEMEMORY"<br>
        memoryCapacity    10000    内存中存储事件的最大值，如果想要禁用内存缓冲区将此值设置为0。<br>
        overflowCapacity    100000000    可以存储在磁盘中的事件数量最大值。设置为0可以禁用磁盘存储。 <br>
        overflowTimeout    3    The number of seconds to wait before enabling disk overflow when memory fills up.<br>
        byteCapacityBufferPercentage    20    Defines the percent of buffer between byteCapacity and the estimated total size of all events in the channel, to account for data in headers. See below.<br>
        byteCapacity    see description    Maximum bytes of memory allowed as a sum of all events in the memory queue. The implementation only counts the Event body, which is the reason for providing the byteCapacityBufferPercentage configuration parameter as well. Defaults to a computed value equal to 80% of the maximum memory available to the JVM (i.e. 80% of the -Xmx value passed on the command line). Note that if you have multiple memory channels on a single JVM, and they happen to hold the same physical events (i.e. if you are using a replicating channel selector from a single source) then those event sizes may be double-counted for channel byteCapacity purposes. Setting this value to 0 will cause this value to fall back to a hard internal limit of about 200 GB.<br>
        avgEventSize    500    Estimated average size of events, in bytes, going into the channel<br>
        &lt;file channel properties&gt;    see file channel    Any file channel property with the exception of ‘keep-alive’ and ‘capacity’ can be used. The keep-alive of file channel is managed by Spillable Memory Channel. Use ‘overflowCapacity’ to set the File channel’s capacity.</p>

<p>    5.自定义通道<br>
        自定义渠道需要自己实现Channel接口。<br>
        自定义Channle类及其依赖类必须在Flume启动前放置到类加载的目录下。</p>

<p>        参数说明：<br>
            type - 自己实现的Channle类的全路径名称</p>            </div>
                </div>