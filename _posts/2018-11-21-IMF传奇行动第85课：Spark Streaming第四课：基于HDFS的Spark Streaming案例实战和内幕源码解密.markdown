---
layout:     post
title:      IMF传奇行动第85课：Spark Streaming第四课：基于HDFS的Spark Streaming案例实战和内幕源码解密
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<div>﻿﻿</div>
<span style="font-family:'Times New Roman';font-size:14px;"></span>
<p><span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn"><span style="font-size:14px;">本课分三部分讲解：</span></span></p>
<span style="font-family:'Times New Roman';font-size:14px;"></span>
<p style="background:#FFFFFF;line-height:19.5pt;text-indent:21pt;">
<span lang="zh-cn" style="font-family:'宋体';font-size:10.5pt;" xml:lang="zh-cn">第一部分准备</span><span style="font-family:Calibri, sans-serif;font-size:10.5pt;">HDFS</span><span lang="zh-cn" style="font-family:'宋体';font-size:10.5pt;" xml:lang="zh-cn">和</span><span style="font-family:Calibri, sans-serif;font-size:10.5pt;">Spark</span><span lang="zh-cn" style="font-family:'宋体';font-size:10.5pt;" xml:lang="zh-cn">集群环境；</span></p>
<span style="font-family:'Times New Roman';font-size:14px;"></span>
<p style="background:#FFFFFF;line-height:19.5pt;text-indent:21pt;">
<span lang="zh-cn" style="font-family:'宋体';font-size:10.5pt;" xml:lang="zh-cn">第二部分用</span><span style="font-family:Calibri, sans-serif;font-size:10.5pt;">Java代码</span><span lang="zh-cn" style="font-family:'宋体';font-size:10.5pt;" xml:lang="zh-cn">编写基于</span><span style="font-family:Calibri, sans-serif;font-size:10.5pt;">HDFS</span><span lang="zh-cn" style="font-family:'宋体';font-size:10.5pt;" xml:lang="zh-cn">的</span><span style="font-family:Calibri, sans-serif;font-size:10.5pt;">Spark
 Streaming</span><span lang="zh-cn" style="font-family:'宋体';font-size:10.5pt;" xml:lang="zh-cn">案例；</span></p>
<span style="font-family:'Times New Roman';font-size:14px;"></span>
<p style="background:#FFFFFF;line-height:19.5pt;text-indent:21pt;">
<span lang="zh-cn" style="font-family:'宋体';font-size:10.5pt;" xml:lang="zh-cn">第三部分</span><span style="font-family:Calibri, sans-serif;font-size:10.5pt;">Spark Streaming on HDFS</span><span lang="zh-cn" style="font-family:'宋体';font-size:10.5pt;" xml:lang="zh-cn">源码解密。</span></p>
<span style="font-family:'Times New Roman';font-size:14px;"></span>
<p><strong><span style="font-family:Calibri;font-size:14px;"> </span></strong></p>
<h1><span lang="zh-cn" style="font-family:'宋体';font-size:12pt;" xml:lang="zh-cn">一、准备</span><span style="font-size:12pt;">HDFS</span><span lang="zh-cn" style="font-family:'宋体';font-size:12pt;" xml:lang="zh-cn">和</span><span style="font-size:12pt;">Spark</span><span lang="zh-cn" style="font-family:'宋体';font-size:12pt;" xml:lang="zh-cn">集群环境</span></h1>
<h3>1.<span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn"> 启动</span>HDFS<span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">，如下图所示：</span></h3>
<p><span style="font-family:Calibri;font-size:14px;"># start-dfs.sh</span></p>
<p><span style="font-family:Calibri;font-size:14px;"><img src="https://img-blog.csdn.net/20160501175101530?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></span></p>
<h3><span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">2. 启动</span>Spark<span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">集群，如下图所示：</span></h3>
<p><span style="font-family:Calibri;font-size:14px;"># cd $SPARK_HOME/bin</span></p>
<span style="font-family:'Times New Roman';font-size:14px;"></span>
<p><span style="font-family:Calibri;font-size:14px;"># ./start-all.sh</span></p>
<p><span style="font-family:Calibri;font-size:14px;"><img src="https://img-blog.csdn.net/20160501175109420?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></span></p>
<h3><span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">3. 启动</span>Spark History Server<span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">，如下图所示：</span></h3>
<p align="left" style="text-align:left;"><span style="font-family:Calibri;font-size:14px;"># start-history-server.sh</span></p>
<h1><span style="font-family:Calibri, sans-serif;font-size:10.5pt;"><img src="https://img-blog.csdn.net/20160501175117319?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br clear="all"></span><span lang="zh-cn" style="font-family:'宋体';font-size:12pt;" xml:lang="zh-cn"></span></h1>
<h1><span lang="zh-cn" style="font-family:'宋体';font-size:12pt;" xml:lang="zh-cn"><br></span></h1>
<h1><span lang="zh-cn" style="font-family:'宋体';font-size:12pt;" xml:lang="zh-cn">二、案例代码实战</span></h1>
<h3>1. <span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">用</span>Java<span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">代码编写基于</span>HDFS<span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">的</span>SparkStreaming<span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">案例：</span></h3>
<p align="left" style="background:rgb(43,43,43);text-align:left;">
<span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">package </span>
<span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">com.dt.spark.SparkApps.sparkstreaming</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">;<br>
import </span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">org.apache.spark.SparkConf</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">;<br>
import </span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">org.apache.spark.SparkContext</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">;<br>
import </span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">org.apache.spark.api.java.function.FlatMapFunction</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">;<br>
import </span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">org.apache.spark.api.java.function.Function2</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">;<br>
import </span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">org.apache.spark.api.java.function.PairFunction</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">;<br>
import </span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">org.apache.spark.streaming.Durations</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">;<br>
import </span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">org.apache.spark.streaming.api.java.*</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">;<br>
import </span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">scala.Tuple2</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">;<br>
import </span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">java.util.Arrays</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">;<br></span><em><span style="color:rgb(98,151,85);font-family:'宋体';font-size:8pt;">/**<br><span> </span>* @author DT<span lang="zh-cn" xml:lang="zh-cn">大数据梦工厂</span></span></em></p>
<span style="font-family:'Times New Roman';font-size:14px;"></span>
<p align="left" style="background:rgb(43,43,43);text-align:left;">
<em><span style="color:rgb(98,151,85);font-family:'宋体';font-size:8pt;"><span> </span>*<span lang="zh-cn" xml:lang="zh-cn">新浪微博：</span>http://weibo.com/ilovepains/<br><span> </span>*/<br></span></em><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">public class
</span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">SparkStreamingOnHDFS {<br><span>    </span></span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">publicstatic void
</span><span style="color:rgb(255,198,109);font-family:'宋体';font-size:8pt;">main</span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">(String[]args){<br><span>        </span></span><em><span style="color:rgb(98,151,85);font-family:'宋体';font-size:8pt;">/**<br><span>         </span>* <span lang="zh-cn" xml:lang="zh-cn">第一步：配置</span>SparkConf<br><span>         </span>* 1. <span lang="zh-cn" xml:lang="zh-cn">至少两条线程：</span><br><span>         </span>* <span lang="zh-cn" xml:lang="zh-cn">因为</span>SparkStreaming<span lang="zh-cn" xml:lang="zh-cn">应用程序在运行的时候，至少有一条线程用于不断的循环接收数据，</span><br><span>         </span>* <span lang="zh-cn" xml:lang="zh-cn">并且至少有一条线程用于处理接收的数据（否则的话无法有线程用于处理数据，随着时间的推移，内存和磁盘都不堪重负）</span><br><span>         </span>* 2. <span lang="zh-cn" xml:lang="zh-cn">对于集群而言，每个</span>Executor<span lang="zh-cn" xml:lang="zh-cn">一般而言肯定不止一个线程，对于处理</span>Spark Streaming<span lang="zh-cn" xml:lang="zh-cn">的应用程序而言，每个</span>Executor<span lang="zh-cn" xml:lang="zh-cn">一般分配多少个</span>Core<span lang="zh-cn" xml:lang="zh-cn">合适呢？根据我们过去的经验，</span>5<span lang="zh-cn" xml:lang="zh-cn">个左右的</span>core<span lang="zh-cn" xml:lang="zh-cn">是最佳的（分配为奇数个</span>Core<span lang="zh-cn" xml:lang="zh-cn">为最佳）。</span><br><span>         </span>*/<br><span>        </span></span></em><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">final
</span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">SparkConf conf =</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">new
</span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">SparkConf().setMaster(</span><span style="color:rgb(106,135,89);font-family:'宋体';font-size:8pt;">"spark://Master:7077"</span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">).setAppName(</span><span style="color:rgb(106,135,89);font-family:'宋体';font-size:8pt;">"SparkOnStreamingOnHDFS"</span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">)</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">;<br><span>        </span></span><em><span style="color:rgb(98,151,85);font-family:'宋体';font-size:8pt;">/**<br><span>         </span>* <span lang="zh-cn" xml:lang="zh-cn">第二步：创建</span>SparkStreamingContext<span lang="zh-cn" xml:lang="zh-cn">，这个是</span>Spark Streaming<span lang="zh-cn" xml:lang="zh-cn">应用程序所有功能的起始点和程序调度的核心</span><br><span>         </span>* 1<span lang="zh-cn" xml:lang="zh-cn">，</span>SparkStreamingContext<span lang="zh-cn" xml:lang="zh-cn">的构建可以基于</span>SparkConf<span lang="zh-cn" xml:lang="zh-cn">参数，也可以基于持久化</span>SparkStreamingContext<span lang="zh-cn" xml:lang="zh-cn">的内容来恢复过来</span>(<span lang="zh-cn" xml:lang="zh-cn">典型的场景是</span>Driver<span lang="zh-cn" xml:lang="zh-cn">崩溃后重新启动，由于</span>Spark
 Streaming<span lang="zh-cn" xml:lang="zh-cn">具有连续</span>7*24<span lang="zh-cn" xml:lang="zh-cn">小时不间断运行的特征，所有需要在</span>Driver<span lang="zh-cn" xml:lang="zh-cn">重新启动后继续上一次的状态，此时状态的恢复需要基于曾经的</span>checkpoint)<br><span>         </span>* 2<span lang="zh-cn" xml:lang="zh-cn">，在一个</span>SparkStreaming<span lang="zh-cn" xml:lang="zh-cn">应用程序中可以创建若干个</span>SparkStreamingContext<span lang="zh-cn" xml:lang="zh-cn">对象，使用下一个</span>SparkStreamingContext<span lang="zh-cn" xml:lang="zh-cn">之前需要把前面正在运行的</span>SparkStreamingContext<span lang="zh-cn" xml:lang="zh-cn">对象关闭掉，由此，我们获得一个重大启发：</span>SparkStreamingContext<span lang="zh-cn" xml:lang="zh-cn">是</span>Sparkcore<span lang="zh-cn" xml:lang="zh-cn">上的一个应用程序而已，只不过</span>Spark
 Streaming<span lang="zh-cn" xml:lang="zh-cn">框架箱运行的话需要</span>Spark<span lang="zh-cn" xml:lang="zh-cn">工程师写业务逻辑</span><br><span>         </span>*/<br></span></em><span style="color:#808080;font-family:'宋体';font-size:8pt;">//<span>       </span>JavaStreamingContext jsc = new JavaStreamingContext(conf,Durations.seconds(5));//Durations.seconds(5)<span lang="zh-cn" xml:lang="zh-cn">设置每隔</span>5<span lang="zh-cn" xml:lang="zh-cn">秒</span><br><span>        </span></span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">final
</span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">String checkpointDirectory =
</span><span style="color:rgb(106,135,89);font-family:'宋体';font-size:8pt;">"hdfs://Master:9000/library/SparkStreaming/Checkpoint_Data"</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">;<br><span>        </span></span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">JavaStreamingContextFactory factory =
</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">new </span>
<span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">JavaStreamingContextFactory() {<br><span>            </span></span><span style="color:rgb(187,181,41);font-family:'宋体';font-size:8pt;">@Override<br><span>            </span></span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">public
</span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">JavaStreamingContext</span><span style="color:rgb(255,198,109);font-family:'宋体';font-size:8pt;">create</span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">() {<br><span>                </span></span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">return
</span><em><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">createContext</span></em><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">(</span><span style="color:rgb(179,137,197);font-family:'宋体';font-size:8pt;">checkpointDirectory</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">,</span><span style="color:rgb(179,137,197);font-family:'宋体';font-size:8pt;">conf</span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">)</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">;<br><span>            </span></span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">}<br><span>        </span>}</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">;<br><span>        </span></span><em><span style="color:rgb(98,151,85);font-family:'宋体';font-size:8pt;">/**<br><span>         </span>* <span lang="zh-cn" xml:lang="zh-cn">可以从失败中恢复</span>Driver<span lang="zh-cn" xml:lang="zh-cn">，不过还需要制定</span>Driver<span lang="zh-cn" xml:lang="zh-cn">这个进程运行在</span>Cluster<span lang="zh-cn" xml:lang="zh-cn">，并且提交应用程序的时候</span><br><span>         </span>* <span lang="zh-cn" xml:lang="zh-cn">指定</span>--supervise;<br><span>         </span>*/<br><span>        </span></span></em><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">JavaStreamingContext jsc = JavaStreamingContext.<em>getOrCreate</em>(checkpointDirectory</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">,
</span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">factory)</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">;<br><span>        </span></span><em><span style="color:rgb(98,151,85);font-family:'宋体';font-size:8pt;">/**<br><span>         </span>* <span lang="zh-cn" xml:lang="zh-cn">现在是监控一个文件系统的目录</span><br><span>         </span>* <span lang="zh-cn" xml:lang="zh-cn">此处没有</span>Receiver<span lang="zh-cn" xml:lang="zh-cn">，</span>Spark Streaming<span lang="zh-cn" xml:lang="zh-cn">应用程序只是按照时间间隔监控目录下每个</span>Batch<span lang="zh-cn" xml:lang="zh-cn">新增的内容</span>(<span lang="zh-cn" xml:lang="zh-cn">把新增的</span>)<span lang="zh-cn" xml:lang="zh-cn">作为</span>RDD<span lang="zh-cn" xml:lang="zh-cn">的数据来源生成原始的</span>RDD<br><span>         </span>*/<br><span>        </span></span></em><span style="color:#808080;font-family:'宋体';font-size:8pt;">//<span lang="zh-cn" xml:lang="zh-cn">指定从</span>HDFS<span lang="zh-cn" xml:lang="zh-cn">中监控的目录</span><br><span>        </span></span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">JavaDStream lines = jsc.textFileStream(</span><span style="color:rgb(106,135,89);font-family:'宋体';font-size:8pt;">"hdfs://Master:9000/library/SparkStreaming/Data"</span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">)</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">;<br><span>        </span></span><em><span style="color:rgb(98,151,85);font-family:'宋体';font-size:8pt;">/**<br><span>         </span>* <span lang="zh-cn" xml:lang="zh-cn">第四步：接下来就像对于</span>RDD<span lang="zh-cn" xml:lang="zh-cn">编程一样基于</span>DStreaming<span lang="zh-cn" xml:lang="zh-cn">进行编程！！！</span><br><span>         </span>* <span lang="zh-cn" xml:lang="zh-cn">原因是：</span><br><span>         </span>*<span>  </span>DStreaming<span lang="zh-cn" xml:lang="zh-cn">是</span>RDD<span lang="zh-cn" xml:lang="zh-cn">产生的模板（或者说类）。</span><br><span>         </span>*<span>  </span><span lang="zh-cn" xml:lang="zh-cn">在</span>Spark Streaming<span lang="zh-cn" xml:lang="zh-cn">具体发生计算前其实质是把每个</span>batch<span lang="zh-cn" xml:lang="zh-cn">的</span>DStream<span lang="zh-cn" xml:lang="zh-cn">的操作翻译成对</span>RDD<span lang="zh-cn" xml:lang="zh-cn">的操作！！</span><br><span>         </span>*<span>  </span><span lang="zh-cn" xml:lang="zh-cn">对初始的</span>DStream<span lang="zh-cn" xml:lang="zh-cn">进行</span>Transformation<span lang="zh-cn" xml:lang="zh-cn">级别的处理，例如</span>Map,filter<span lang="zh-cn" xml:lang="zh-cn">等高阶函数的编程，来进行具体的数据计算。</span><br><span>         </span>*<span>  </span><span lang="zh-cn" xml:lang="zh-cn">第</span>4.1<span lang="zh-cn" xml:lang="zh-cn">步：将每一行的字符串拆分成单个单词</span><br><span>         </span>*/<br><span>        </span></span></em><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">JavaDStream&lt;String&gt; words = lines.flatMap(</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">new
</span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">FlatMapFunction&lt;String</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">,</span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">String&gt;()
 {<br><span>            </span></span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">public
</span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">Iterable&lt;String&gt;</span><span style="color:rgb(255,198,109);font-family:'宋体';font-size:8pt;">call</span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">(Stringline)
</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">throws </span>
<span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">Exception {<br><span>                </span></span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">return
</span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">Arrays.<em>asList</em>(line.split(</span><span style="color:rgb(106,135,89);font-family:'宋体';font-size:8pt;">" "</span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">))</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">;<br><span>            </span></span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">}<br><span>        </span>})</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">;<br><span>        </span></span><em><span style="color:rgb(98,151,85);font-family:'宋体';font-size:8pt;">/**<br><span>         </span>* <span lang="zh-cn" xml:lang="zh-cn">第</span>4.2<span lang="zh-cn" xml:lang="zh-cn">步：对初始的</span>JavaRDD<span lang="zh-cn" xml:lang="zh-cn">进行</span>Transformation<span lang="zh-cn" xml:lang="zh-cn">级别的处理，例如</span>map<span lang="zh-cn" xml:lang="zh-cn">，</span>filter<span lang="zh-cn" xml:lang="zh-cn">等高阶函数等的编程，来进行具体的数据计算</span><br><span>         </span>* <span lang="zh-cn" xml:lang="zh-cn">在</span>4.1<span lang="zh-cn" xml:lang="zh-cn">的基础上，在单词拆分的基础上对每个单词实例计数为</span>1<span lang="zh-cn" xml:lang="zh-cn">，也就是</span>word =&gt;(word,1)<br><span>         </span>*/<br><span>        </span></span></em><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">JavaPairDStream&lt;String</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">,</span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">Integer&gt;
 pairs<span>  </span>= words.mapToPair(</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">new
</span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">PairFunction&lt;String</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">,
</span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">String</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">,
</span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">Integer&gt;() {<br><span>            </span></span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">public
</span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">Tuple2&lt;String</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">,
</span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">Integer&gt;
</span><span style="color:rgb(255,198,109);font-family:'宋体';font-size:8pt;">call</span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">(String word)
</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">throws </span>
<span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">Exception {<br><span>                </span></span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">return new
</span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">Tuple2&lt;String</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">,</span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">Integer&gt;(word</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">,</span><span style="color:rgb(104,151,187);font-family:'宋体';font-size:8pt;">1</span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">)</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">;<br><span>            </span></span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">}<br><span>        </span>})</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">;<br><span>        </span></span><em><span style="color:rgb(98,151,85);font-family:'宋体';font-size:8pt;">/**<br><span>         </span>* <span lang="zh-cn" xml:lang="zh-cn">第</span>4.3<span lang="zh-cn" xml:lang="zh-cn">步：在每个单词实例计数的基础上统计每个单词在文件中出现的总次数</span><br><span>         </span>*/<br><span>        </span></span></em><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">JavaPairDStream&lt;String</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">,</span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">Integer&gt;
 wordscount =pairs.reduceByKey(</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">new
</span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">Function2&lt;Integer</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">,
</span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">Integer</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">,
</span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">Integer&gt;() {<br><span>            </span></span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">public
</span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">Integer
</span><span style="color:rgb(255,198,109);font-family:'宋体';font-size:8pt;">call</span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">(Integer v1</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">,
</span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">Integer v2)
</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">throws </span>
<span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">Exception {<br><span>                </span></span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">return
</span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">v1 + v2</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">;<br><span>            </span></span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">}<br><span>        </span>})</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">;<br><span>        </span></span><em><span style="color:rgb(98,151,85);font-family:'宋体';font-size:8pt;">/**<br><span>         </span>* <span lang="zh-cn" xml:lang="zh-cn">此处的</span>print<span lang="zh-cn" xml:lang="zh-cn">并不会直接触发</span>Job<span lang="zh-cn" xml:lang="zh-cn">的执行，因为现在的一切都是在</span>SparkStreaming<span lang="zh-cn" xml:lang="zh-cn">框架控制下的，对于</span>Spark<span lang="zh-cn" xml:lang="zh-cn">而言具体是否</span><br><span>         </span>* <span lang="zh-cn" xml:lang="zh-cn">触发真正的</span>Job<span lang="zh-cn" xml:lang="zh-cn">运行是基于设置的</span>Duration<span lang="zh-cn" xml:lang="zh-cn">时间间隔的</span><br><span>         </span>* <span lang="zh-cn" xml:lang="zh-cn">一定要注意的是：</span>SparkStreaming<span lang="zh-cn" xml:lang="zh-cn">应用程序要想执行具体的</span>Job<span lang="zh-cn" xml:lang="zh-cn">，对</span>DStream<span lang="zh-cn" xml:lang="zh-cn">就必须有</span>output Stream<span lang="zh-cn" xml:lang="zh-cn">操作，</span><br><span>         </span>* output Stream<span lang="zh-cn" xml:lang="zh-cn">有很多类型的函数触发，例如：</span>print<span lang="zh-cn" xml:lang="zh-cn">，</span>saveAsTextFile,saveAsHadoopFiles<span lang="zh-cn" xml:lang="zh-cn">等，其实最为重要的一个方法是</span><br><span>         </span>* foraeachRDD<span lang="zh-cn" xml:lang="zh-cn">，因为</span>SparkStreaming<span lang="zh-cn" xml:lang="zh-cn">处理的结果一般都会放在</span>Redis<span lang="zh-cn" xml:lang="zh-cn">，</span>DB<span lang="zh-cn" xml:lang="zh-cn">，</span>DashBoard<span lang="zh-cn" xml:lang="zh-cn">等上面，</span>foreachRDD<span lang="zh-cn" xml:lang="zh-cn">主要就是用来完成这些</span><br><span>   </span><span>      </span>* <span lang="zh-cn" xml:lang="zh-cn">功能的，而且可以随意的自定义具体数据到底存放在哪里！！！</span><br><span>         </span>*/<br><span>        </span></span></em><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">wordscount.print()</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">;<br><span>        </span></span><em><span style="color:rgb(98,151,85);font-family:'宋体';font-size:8pt;">/**<br><span>         </span>* Spark Streaming<span lang="zh-cn" xml:lang="zh-cn">执行引擎也就是</span>Driver<span lang="zh-cn" xml:lang="zh-cn">开始运行，</span>Driver<span lang="zh-cn" xml:lang="zh-cn">启动的时候是位于一条新的线程中的。</span><br><span>         </span>* <span lang="zh-cn" xml:lang="zh-cn">当然其内部有消息循环体用于接收应用程序本身或者</span>Executor<span lang="zh-cn" xml:lang="zh-cn">的消息；</span><br><span>         </span>*/<br><span>        </span></span></em><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">jsc.start()</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">;<br><span>        </span></span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">jsc.awaitTermination()</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">;<br><span>        </span></span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">jsc.close()</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">;<br><span>    </span></span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">}<br><span>    </span></span><em><span style="color:rgb(98,151,85);font-family:'宋体';font-size:8pt;">/**<br><span>     </span>* <span lang="zh-cn" xml:lang="zh-cn">工厂化模式构建</span>JavaStreamingContext<br><span>     </span>*/<br><span>    </span></span></em><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">private static
</span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">JavaStreamingContext</span><span style="color:rgb(255,198,109);font-family:'宋体';font-size:8pt;">createContext</span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">(String
 checkpointDirectory</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">,</span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">SparkConf conf){<br><span>        </span>System.</span><em><span style="color:rgb(152,118,170);font-family:'宋体';font-size:8pt;">out</span></em><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">.println(</span><span style="color:rgb(106,135,89);font-family:'宋体';font-size:8pt;">"Creating
 new context"</span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">)</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">;<br><span>        </span></span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">JavaStreamingContext ssc =
</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">new </span>
<span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">JavaStreamingContext(conf</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">,</span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">Durations.<em>seconds</em>(</span><span style="color:rgb(104,151,187);font-family:'宋体';font-size:8pt;">5</span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">))</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">;<br><span>        </span></span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">ssc.checkpoint(checkpointDirectory)</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">;<br><span>        </span>return </span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">ssc</span><span style="color:rgb(204,120,50);font-family:'宋体';font-size:8pt;">;<br><span>    </span></span><span style="color:rgb(169,183,198);font-family:'宋体';font-size:8pt;">}<br>
}</span></p>
<span style="font-family:'Times New Roman';font-size:14px;"></span>
<p><span style="font-family:Calibri;font-size:14px;"> </span></p>
<h3><span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">2. 在之前准备的</span>Spark<span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">集群中运行上面的代码测试效果：</span></h3>
<p><span style="font-family:'Times New Roman';font-size:14px;">a. </span><span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">创建必要的目录</span><span style="font-family:'Times New Roman';font-size:14px;"></span></p>
<p><span style="font-family:Calibri;font-size:14px;"># hadoop dfs -mkdir /library/SparkStreaming</span></p>
<span style="font-family:'Times New Roman';font-size:14px;"></span>
<p><span style="font-family:Calibri;font-size:14px;"># hadoop dfs -mkdir /library/SparkStreaming/CheckPoint_Data</span></p>
<span style="font-family:'Times New Roman';font-size:14px;"></span>
<p><span style="font-family:Calibri;font-size:14px;"># hadoop dfs -mkdir /library/SparkStreaming/Data</span></p>
<span style="font-family:'Times New Roman';font-size:14px;"></span><span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">b. 新建一个脚本</span>SparkAppsStreaming.sh<span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">，内容如下</span><span style="font-family:'Times New Roman';font-size:14px;"></span>
<p align="left" style="text-align:left;"><span style="font-family:Calibri;font-size:14px;">/usr/local/spark/spark-1.6.0-bin-hadoop2.6/bin/spark-submit--class cn.spark.study.SparkStreamigOnHDFS --master spark://Master:7077 /root/Documents/SparkApps/spark-study-java-0.0.1-SNAPSHOT-jar-with-dependencies.jar</span></p>
<span style="font-family:'Times New Roman';font-size:14px;"></span><span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">c. 运行脚本</span><span style="font-family:'Times New Roman';font-size:14px;"></span>
<p><span style="font-family:Calibri;font-size:14px;"># ./SparkAppsStreaming.sh</span></p>
<span style="font-family:'Times New Roman';font-size:14px;"></span>
<p><span><span style="font-family:'Times New Roman';font-size:14px;"><img src="https://img-blog.csdn.net/20160501175122248?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></span></span></p>
<span style="font-family:'Times New Roman';font-size:14px;"></span>
<p><span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn"><span style="font-size:14px;">此时</span></span><span style="font-family:Calibri;font-size:14px;">SparkStreaming</span><span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn"><span style="font-size:14px;">会每隔</span></span><span style="font-family:Calibri;font-size:14px;">5</span><span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn"><span style="font-size:14px;">秒执行一次，不断的扫描监控目录下是否有新的文件。</span></span></p>
<span style="font-family:'Times New Roman';font-size:14px;"></span>
<p><span><span style="font-family:'Times New Roman';font-size:14px;"><img src="https://img-blog.csdn.net/20160501175126866?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></span></span></p>
<span style="font-family:'Times New Roman';font-size:14px;"></span><span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">d. 上传文件到</span>HDFS<span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">中的</span>Data<span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">目录下</span><span style="font-family:'Times New Roman';font-size:14px;"></span>
<p><span style="font-family:Calibri;font-size:14px;"># cd $HADOOP_HOME</span></p>
<span style="font-family:'Times New Roman';font-size:14px;"></span>
<p><span style="font-family:Calibri;font-size:14px;"># hadoop dfs -put ./CHANGES.txt /library/SparkStreaming/Data</span></p>
<span style="font-family:'Times New Roman';font-size:14px;"></span>
<p><span><span style="font-family:'Times New Roman';font-size:14px;"><img src="https://img-blog.csdn.net/20160501175132030?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></span></span></p>
<span style="font-family:'Times New Roman';font-size:14px;"></span><span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">e. 输出结果</span><span style="font-family:'Times New Roman';font-size:14px;"></span>
<p><strong><span style="font-family:Calibri, sans-serif;font-size:12pt;"><img src="https://img-blog.csdn.net/20160501175140429?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br clear="all"></span></strong><span style="font-family:'Times New Roman';font-size:14px;"></span></p>
<p align="left" style="text-align:left;"><strong><span style="font-size:12pt;"><span style="font-family:Calibri;"> </span></span></strong></p>
<h1><span style="font-size:12pt;">三、SparkStreaming on HDFS</span><span lang="zh-cn" style="font-family:'宋体';font-size:12pt;" xml:lang="zh-cn">源码解密</span></h1>
<h3>1. JavaStreamingContextFactory<span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">的</span>create<span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">方法可以创建</span>JavaStreamingContext。</h3>
<h3>2. <span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">而我们在具体实现的时候覆写了该方法，内部就是调用</span>createContext<span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">方法来具体实现。上述实战案例中我们实现了</span>createContext<span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">方法。</span></h3>
<span style="font-family:'Times New Roman';font-size:14px;"></span>
<pre style="background:rgb(43,43,43);margin-left:.25in;"><span style="font-family:'宋体';"><em><span style="color:rgb(98,151,85);font-size:10.5pt;">/**

<span> </span>* Factory interface for creating a new JavaStreamingContext

<span> </span>*/

</span></em><strong><span style="color:rgb(204,120,50);font-size:10.5pt;">trait </span></strong></span><span style="font-family:'宋体';"><span style="color:rgb(169,183,198);font-size:10.5pt;">JavaStreamingContextFactory {

<span>  </span></span><strong><span style="color:rgb(204,120,50);font-size:10.5pt;">def </span></strong><span style="color:rgb(255,198,109);font-size:10.5pt;">create</span></span><span style="color:rgb(169,183,198);font-size:10.5pt;"><span style="font-family:'宋体';">(): JavaStreamingContext

}</span></span></pre>
<h3>3. checkpoint: </h3>
<ul><li><span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">一方面：保持容错</span></li><li><span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn"></span><span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">另一方面：保持状态</span></li></ul><p><span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn"></span><span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">在开始和结束的时候，每个</span>batch<span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">都会进行</span>checkpoint<span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">。</span></p>
<span style="font-family:'Times New Roman';font-size:14px;"></span>
<pre style="background:rgb(43,43,43);margin-left:.25in;"><span style="font-family:'宋体';"><em><span style="color:rgb(98,151,85);font-size:10.5pt;">/**

<span> </span>* Sets the context to periodically checkpoint the DStream operations for master

<span> </span>* fault-tolerance. The graph will be checkpointed every batch interval.

<span> </span>* <strong>@param directory </strong>HDFS-compatible directory where the checkpoint data will be reliably stored

<span> </span>*/

</span></em><strong><span style="color:rgb(204,120,50);font-size:10.5pt;">def </span></strong><span style="color:rgb(255,198,109);font-size:10.5pt;">checkpoint</span><span style="color:rgb(169,183,198);font-size:10.5pt;">(directory: </span><span style="color:rgb(78,128,125);font-size:10.5pt;">String</span></span><span style="color:rgb(169,183,198);font-size:10.5pt;"><span style="font-family:'宋体';">) {

<span>  </span>ssc.checkpoint(directory)

}</span></span></pre>
<h3>4. remember:</h3>
<p><span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">流式处理中过一段时间数据就会被清理掉，但是可以通过</span>remember<span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">可以延长数据在程序中的生命周期，另外延长</span>RDD<span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">更长的时间。</span></p>
<p><span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn"></span><strong><span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">应用场景：</span></strong><span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">假设数据流进来，进行</span>ML<span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">或者</span>GraphX<span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">的时候有时需要很长时间，但是</span>bacth<span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">定时定条件的清除</span>RDD<span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">，所以就可以通过</span>remember<span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">使得数据可以延长更长时间。</span></p>
<span style="font-family:'Times New Roman';font-size:14px;"></span>
<pre style="background:rgb(43,43,43);margin-left:.25in;"><span style="font-family:'宋体';"><em><span style="color:rgb(98,151,85);font-size:10.5pt;">/**

<span> </span>* Sets each DStreams in this context to remember RDDs it generated in the last given duration.

<span> </span>* DStreams remember RDDs only for a limited duration of duration and releases them for garbage

<span> </span>* collection. This method allows the developer to specify how long to remember the RDDs (

<span> </span>* if the developer wishes to query old data outside the DStream computation).

<span> </span>* <strong>@param duration </strong>Minimum duration that each DStream should remember its RDDs

<span> </span>*/

</span></em><strong><span style="color:rgb(204,120,50);font-size:10.5pt;">def </span></strong><span style="color:rgb(255,198,109);font-size:10.5pt;">remember</span></span><span style="color:rgb(169,183,198);font-size:10.5pt;"><span style="font-family:'宋体';">(duration: Duration) {

<span>  </span>ssc.remember(duration)

}</span></span></pre>
<h3><span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">5. 在</span>JavaStreamingContext<span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">中，</span>getOrCreate<span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">方法源码如下：</span></h3>
<p><span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn"></span><span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">如果设置了</span>checkpoint<span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">，重启程序的时候，</span>getOrCreate()<span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">会重新从</span>checkpoint<span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">目录中初始化出</span>StreamingContext<span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">。</span><span style="font-family:'Times New Roman';font-size:14px;"></span></p>
<pre style="background:rgb(43,43,43);margin-left:.25in;"><span style="font-family:'宋体';"><em><span style="color:rgb(98,151,85);font-size:10.5pt;">/**

<span> </span>* Either recreate a StreamingContext from checkpoint data or create a new StreamingContext.

<span> </span>* If checkpoint data exists in the provided </span></em><span style="color:rgb(119,183,103);font-size:10.5pt;">`</span><em><span style="color:rgb(98,151,85);font-size:10.5pt;">checkpointPath</span></em><span style="color:rgb(119,183,103);font-size:10.5pt;">`</span></span><span style="font-family:'宋体';"><em><span style="color:rgb(98,151,85);font-size:10.5pt;">, then StreamingContext will be

<span> </span>* recreated from the checkpoint data. If the data does not exist, then the provided factory

<span> </span>* will be used to create a JavaStreamingContext.

<span> </span>*

<span> </span>* <strong>@param checkpointPath </strong>Checkpoint directory used in an earlier JavaStreamingContext program

<span> </span>* <strong>@param factory<span>        </span></strong>JavaStreamingContextFactory object to create a new JavaStreamingContext

<span> </span>* <strong>@deprecated </strong>As of 1.4.0, replaced by </span></em><span style="color:rgb(119,183,103);font-size:10.5pt;">`</span><em><span style="color:rgb(98,151,85);font-size:10.5pt;">getOrCreate</span></em><span style="color:rgb(119,183,103);font-size:10.5pt;">` </span></span><span style="font-family:'宋体';"><em><span style="color:rgb(98,151,85);font-size:10.5pt;">without JavaStreamingContextFactor.

<span> </span>*/

</span></em><span style="color:rgb(187,181,41);font-size:10.5pt;">@deprecated</span><span style="color:rgb(169,183,198);font-size:10.5pt;">(</span><span style="color:rgb(106,135,89);font-size:10.5pt;">"use getOrCreate without JavaStreamingContextFactor"</span><span style="color:rgb(204,120,50);font-size:10.5pt;">, </span><span style="color:rgb(106,135,89);font-size:10.5pt;">"1.4.0"</span></span><span style="font-family:'宋体';"><span style="color:rgb(169,183,198);font-size:10.5pt;">)

</span><strong><span style="color:rgb(204,120,50);font-size:10.5pt;">def </span></strong><span style="color:rgb(255,198,109);font-size:10.5pt;">getOrCreate</span></span><span style="font-family:'宋体';"><span style="color:rgb(169,183,198);font-size:10.5pt;">(

<span>    </span>checkpointPath: </span><span style="color:rgb(78,128,125);font-size:10.5pt;">String</span></span><span style="color:rgb(204,120,50);font-size:10.5pt;"><span style="font-family:'宋体';">,

<span>    </span></span></span><span style="font-family:'宋体';"><span style="color:rgb(169,183,198);font-size:10.5pt;">factory: JavaStreamingContextFactory

<span>  </span>): JavaStreamingContext = {

<span>  </span></span><strong><span style="color:rgb(204,120,50);font-size:10.5pt;">val </span></strong><span style="color:rgb(169,183,198);font-size:10.5pt;">ssc = StreamingContext.<em>getOrCreate</em>(checkpointPath</span><span style="color:rgb(204,120,50);font-size:10.5pt;">, </span></span><span style="font-family:'宋体';"><span style="color:rgb(169,183,198);font-size:10.5pt;">() =&gt; {

<span>    </span>factory.create.ssc

<span>  </span>})

<span>  </span></span><strong><span style="color:rgb(204,120,50);font-size:10.5pt;">new </span></strong></span><span style="color:rgb(169,183,198);font-size:10.5pt;"><span style="font-family:'宋体';">JavaStreamingContext(ssc)

}</span></span></pre>
<span style="font-family:'Times New Roman';font-size:14px;"></span>
<p style="text-indent:0in;"><span style="font-family:Calibri;font-size:14px;"> </span></p>
<p><span style="font-family:'Times New Roman';font-size:14px;"></span><span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn"><span style="font-size:14px;">思考为什么会报下面的错误？</span></span><span style="font-family:'Times New Roman';font-size:14px;"></span></p>
<p><span style="font-family:'Times New Roman';font-size:14px;"><img src="https://img-blog.csdn.net/20160501175146858?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></span></p>
<p><span style="font-family:'Times New Roman';font-size:14px;">原因：</span></p>
<ul><li>Streaming<span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">会定期的进行</span>checkpoint</li><li><span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">重新启动程序的时候，它会进入曾经</span>checkpoint<span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">的目录中。如果没有做额外配置的时候，所有的信息都会放在</span>checkpoint<span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">的目录中（包括曾经的应用程序信息），因此下次再次启动的时候就会报错，导致无法初始化</span>ShuffledDStream<span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn">。</span></li></ul><span lang="zh-cn" style="font-family:'宋体';" xml:lang="zh-cn"></span>
<p style="background:#FFFFFF;line-height:19.5pt;"><span lang="zh-cn" style="font-family:'宋体';font-size:10.5pt;" xml:lang="zh-cn"><br></span></p>
<p style="background:#FFFFFF;line-height:19.5pt;"><span lang="zh-cn" style="font-family:'宋体';font-size:10.5pt;" xml:lang="zh-cn">课程笔记来源</span><span style="font-family:Arial, sans-serif;font-size:10.5pt;">: </span></p>
<p style="background:#FFFFFF;line-height:19.5pt;"><span style="font-family:Arial, sans-serif;font-size:10.5pt;"></span><span style="color:#000000;font-family:Calibri, sans-serif;font-size:10.5pt;">DT</span><span lang="zh-cn" style="color:#000000;font-family:'宋体';font-size:10.5pt;" xml:lang="zh-cn">大数据梦工厂</span><span style="color:#000000;font-family:Calibri, sans-serif;font-size:10.5pt;">IMF</span><span lang="zh-cn" style="color:#000000;font-family:'宋体';font-size:10.5pt;" xml:lang="zh-cn">传奇行动课程学员整理。</span><span style="color:#000000;font-family:Calibri, sans-serif;font-size:10.5pt;">YY</span><span lang="zh-cn" style="color:#000000;font-family:'宋体';font-size:10.5pt;" xml:lang="zh-cn">直播永久课堂频道</span><span style="color:#000000;font-family:Calibri, sans-serif;font-size:10.5pt;">68917580</span><span lang="zh-cn" style="color:#000000;font-family:'宋体';font-size:10.5pt;" xml:lang="zh-cn">每晚</span><span style="color:#000000;font-family:Calibri, sans-serif;font-size:10.5pt;">8</span><span lang="zh-cn" style="color:#000000;font-family:'宋体';font-size:10.5pt;" xml:lang="zh-cn">点准时开课。</span></p>
<p style="background:#FFFFFF;line-height:19.5pt;"><strong><span style="color:#000000;font-family:'宋体';font-size:10.5pt;">Life is short, you need spark!</span></strong></p>
<p style="color:rgb(0,0,0);font-family:Calibri, sans-serif;font-size:10.5pt;font-style:normal;font-weight:normal;">
<img src="https://img-blog.csdn.net/20160501175156836?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<span style="font-family:'Times New Roman';font-size:14px;"></span>
            </div>
                </div>