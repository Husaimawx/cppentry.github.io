---
layout:     post
title:      大数据_hive_命令行
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/kanbuqinghuanyizhang/article/details/79132870				</div>
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<h2 id="hive执行参数">hive执行参数</h2>

<p><code>hive -H</code> <br>
帮助文档</p>

<pre class="prettyprint"><code class=" hljs haml">usage: hive
 -<span class="ruby">d,--define &lt;key=value&gt;          <span class="hljs-constant">Variable</span> subsitution to apply to hive
</span>                                  commands. e.g. -d A=B or --define A=B
    -<span class="ruby">-database &lt;databasename&gt;     <span class="hljs-constant">Specify</span> the database to use
</span> -<span class="ruby">e &lt;quoted-query-string&gt;         <span class="hljs-constant">SQL</span> from command line
</span> -<span class="ruby">f &lt;filename&gt;                    <span class="hljs-constant">SQL</span> from files
</span> -<span class="ruby"><span class="hljs-constant">H</span>,--help                        <span class="hljs-constant">Print</span> help information
</span> -<span class="ruby">h &lt;hostname&gt;                    connecting to <span class="hljs-constant">Hive</span> <span class="hljs-constant">Server</span> on remote host
</span>    -<span class="ruby">-hiveconf &lt;property=value&gt;   <span class="hljs-constant">Use</span> value <span class="hljs-keyword">for</span> given property
</span>    -<span class="ruby">-hivevar &lt;key=value&gt;         <span class="hljs-constant">Variable</span> subsitution to apply to hive
</span>                                  commands. e.g. --hivevar A=B
 -<span class="ruby">i &lt;filename&gt;                    <span class="hljs-constant">Initialization</span> <span class="hljs-constant">SQL</span> file
</span> -<span class="ruby">p &lt;port&gt;                        connecting to <span class="hljs-constant">Hive</span> <span class="hljs-constant">Server</span> on port number
</span> -<span class="ruby"><span class="hljs-constant">S</span>,--silent                      <span class="hljs-constant">Silent</span> mode <span class="hljs-keyword">in</span> interactive shell
</span> -<span class="ruby">v,--verbose                     <span class="hljs-constant">Verbose</span> mode (echo executed <span class="hljs-constant">SQL</span> to the
</span>                                  console)</code></pre>

<p><code>hive -e</code> <br>
 执行一个查询,之后过程中，会在终端上显示mapreduce的进度，执行完毕后，最后把查询结果输出到终端上，接着hive进程退出，不会进入交互模式</p>

<pre class="prettyprint"><code class=" hljs bash"><span class="hljs-variable">$HIVE_HOME</span>/bin/hive <span class="hljs-operator">-e</span> <span class="hljs-string">'select a.col from tab1 a'</span></code></pre>

<p>可以在bash中定义hive环境配置，如</p>

<pre class="prettyprint"><code class=" hljs bash"><span class="hljs-variable">$HIVE_HOME</span>/bin/hive <span class="hljs-operator">-e</span> <span class="hljs-string">'select a.col from tab1 a'</span> --hiveconf hive.exec.scratchdir=/home/my/hive_scratch  --hiveconf mapred.reduce.tasks=<span class="hljs-number">32</span></code></pre>

<p><code>hive  -S</code></p>

<p>使用静音模式执行一个查询,加入-S，终端上的输出不会有mapreduce的进度，执行完毕，只会把查询结果输出到终端上。这个静音模式很实用，,通过第三方程序调用，第三方程序通过hive的标准输出获取结果集。示例使用静音模式执行一个查询，把结果集导出。</p>

<pre class="prettyprint"><code class=" hljs lasso"><span class="hljs-variable">$HIVE_HOME</span>/bin/hive <span class="hljs-attribute">-S</span> <span class="hljs-attribute">-e</span> <span class="hljs-string">'select a.col from tab1 a'</span> <span class="hljs-subst">&gt;</span> tab1<span class="hljs-built_in">.</span>csv</code></pre>

<p><code>hive -f</code></p>

<p>不进入交互模式，执行一个hive script</p>

<pre class="prettyprint"><code class=" hljs lasso"><span class="hljs-variable">$HIVE_HOME</span>/bin/hive <span class="hljs-attribute">-f</span> /home/my/hive<span class="hljs-attribute">-script</span><span class="hljs-built_in">.</span>sql
hive<span class="hljs-attribute">-script</span><span class="hljs-built_in">.</span>sql</code></pre>

<p>从0.14开始可以执行hdfs上的文件</p>

<pre class="prettyprint"><code class=" hljs lasso"><span class="hljs-variable">$HIVE_HOME</span>/bin/hive <span class="hljs-attribute">-f</span> hdfs:<span class="hljs-comment">//&lt;namenode&gt;:&lt;port&gt;/hive-script.sql</span></code></pre>

<p><code>hive -i</code></p>

<p>指定包含对hive环境配置的变量,默认加载<span>$</span>HIVE_HOME/bin/.hiverc and <span>$</span>HOME/.hiverc，文件内容可参考一下配置。</p>

<pre class="prettyprint"><code class=" hljs avrasm"><span class="hljs-preprocessor">#在命令行中显示当前数据库名  </span>
<span class="hljs-keyword">set</span> hive<span class="hljs-preprocessor">.cli</span><span class="hljs-preprocessor">.print</span><span class="hljs-preprocessor">.current</span><span class="hljs-preprocessor">.db</span>=true<span class="hljs-comment">;   </span>
<span class="hljs-preprocessor">#查询出来的结果显示列的名称  </span>
<span class="hljs-keyword">set</span> hive<span class="hljs-preprocessor">.cli</span><span class="hljs-preprocessor">.print</span><span class="hljs-preprocessor">.header</span>=true<span class="hljs-comment">;  </span>
<span class="hljs-preprocessor">#启用桶表  </span>
<span class="hljs-keyword">set</span> hive<span class="hljs-preprocessor">.enforce</span><span class="hljs-preprocessor">.bucketing</span>=true<span class="hljs-comment">;  </span>
<span class="hljs-preprocessor">#压缩hive的中间结果  </span>
<span class="hljs-keyword">set</span> hive<span class="hljs-preprocessor">.exec</span><span class="hljs-preprocessor">.compress</span><span class="hljs-preprocessor">.intermediate</span>=true<span class="hljs-comment">;  </span>
<span class="hljs-preprocessor">#对map端输出的内容使用BZip2编码/解码器  </span>
<span class="hljs-keyword">set</span> mapred<span class="hljs-preprocessor">.map</span><span class="hljs-preprocessor">.output</span><span class="hljs-preprocessor">.compression</span><span class="hljs-preprocessor">.codec</span>=org<span class="hljs-preprocessor">.apache</span><span class="hljs-preprocessor">.hadoop</span><span class="hljs-preprocessor">.io</span><span class="hljs-preprocessor">.compress</span><span class="hljs-preprocessor">.BZip</span>2Codec<span class="hljs-comment">;  </span>
<span class="hljs-preprocessor">#压缩hive的输出  </span>
<span class="hljs-keyword">set</span> hive<span class="hljs-preprocessor">.exec</span><span class="hljs-preprocessor">.compress</span><span class="hljs-preprocessor">.output</span>=true<span class="hljs-comment">;  </span>
<span class="hljs-preprocessor">#对hive中的MR输出内容使用BZip2编码/解码器  </span>
<span class="hljs-keyword">set</span> mapred<span class="hljs-preprocessor">.output</span><span class="hljs-preprocessor">.compression</span><span class="hljs-preprocessor">.codec</span>=org<span class="hljs-preprocessor">.apache</span><span class="hljs-preprocessor">.hadoop</span><span class="hljs-preprocessor">.io</span><span class="hljs-preprocessor">.compress</span><span class="hljs-preprocessor">.BZip</span>2Codec<span class="hljs-comment">;  </span>
<span class="hljs-preprocessor">#让hive尽量尝试local模式查询而不是mapred方式  </span>
<span class="hljs-keyword">set</span> hive<span class="hljs-preprocessor">.exec</span><span class="hljs-preprocessor">.mode</span><span class="hljs-preprocessor">.local</span><span class="hljs-preprocessor">.auto</span>=true<span class="hljs-comment">;  </span></code></pre>



<h2 id="变量">变量</h2>

<p>更多参考<a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+VariableSubstitution" rel="nofollow">LanguageManual+VariableSubstitution</a></p>

<p>禁用变量：</p>

<pre class="prettyprint"><code class=" hljs sql"><span class="hljs-operator"><span class="hljs-keyword">set</span> hive.variable.substitute=<span class="hljs-keyword">false</span>;</span></code></pre>

<p><code>-d(--define)、hive --database</code></p>

<p>定义一个变量值，这个变量可以在Hive交互Shell中引用，比如：-d A=B。以下是个示例:定义了一个变量k1,值为v1,执行了数据库为lxw1234,进入Hive交互Shell之后，可以使用${k1}来引用该变量.</p>

<p>–database指定数据库</p>

<pre class="prettyprint"><code class=" hljs bash"><span class="hljs-variable">$HIVE_HOME</span>/bin/hive <span class="hljs-operator">-d</span> k1=v1 –database default</code></pre>

<p>这里将k1的值v1打印出来。</p>

<pre class="prettyprint"><code class=" hljs cs">hive&gt; <span class="hljs-keyword">select</span> ‘${k1}’ <span class="hljs-keyword">from</span> t_lxw1234 limit <span class="hljs-number">1</span>;
OK
v1</code></pre>

<p><code>–hiveconf &lt;property=value&gt;;</code></p>

<p>可以使用该选项设定Hive的运行参数配置，相当于在Hive交互Shell中使用set命令进行设置，比如执行一下指令，进入交互Shell之后，运行的所有查询都会设置20个reduce task。除非又用set mapred.reduce.tasks=N;进行另外设定。</p>

<pre class="prettyprint"><code class=" hljs avrasm">$HIVE_HOME/bin/hive –hiveconf mapred<span class="hljs-preprocessor">.reduce</span><span class="hljs-preprocessor">.tasks</span>=<span class="hljs-number">20</span></code></pre>

<p><code>–hivevar &lt;key=value&gt;</code></p>

<p>用法同-d和–define</p>

<h2 id="交互式shell">交互式shell</h2>

<p><code>quit、exit</code></p>

<p>退出交互Shell</p>

<p><code>reset</code></p>

<p>重置所有的Hive运行时配置参数，比如，之前使用set命令设置了reduce数量，使用reset之后，重置成hive-site.xml中的配置。</p>

<p><code>set &lt;key&gt;=&lt;value&gt;</code></p>

<p>设置Hive运行时配置参数，优先级最高，相同key，后面的设置会覆盖前面的设置。</p>

<p><code>set –v</code></p>

<p>打印出所有Hive的配置参数和Hadoop的配置参数。</p>

<p><code>add</code></p>



<pre class="prettyprint"><code class=" hljs xml">包括 add FILE[S] <span class="hljs-tag">&lt;<span class="hljs-title">filepath</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">filepath</span>&gt;</span>* 、 add JAR[S] <span class="hljs-tag">&lt;<span class="hljs-title">filepath</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">filepath</span>&gt;</span>* 、add ARCHIVE[S] <span class="hljs-tag">&lt;<span class="hljs-title">filepath</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">filepath</span>&gt;</span>*
向DistributeCache中添加一个或过个文件、jar包、或者归档，添加之后，可以在Map和Reduce task中使用。
比如，自定义一个udf函数，打成jar包，在创建函数之前，必须使用add jar命令，将该jar包添加，否则会报错找不到类。</code></pre>

<p><code>list</code></p>

<p>包括 list FILE[S] 、list JAR[S]  、list ARCHIVE[S] <br>
列出当前DistributeCache中的文件、jar包或者归档。</p>

<p><code>delete</code></p>

<p>包括 delete FILE[S] * 、delete JAR[S] *  、 delete ARCHIVE[S] * <br>
从DistributeCache中删除文件</p>

<p><code>! &lt;command&gt;</code></p>

<p>在交互Shell中执行Linux操作系统命令并打印出结果，不常用 <br>
比如：</p>



<pre class="prettyprint"><code class=" hljs bash">hive&gt; !<span class="hljs-built_in">pwd</span>;
/home/lxw1234</code></pre>

<p><code>dfs &lt;dfs command&gt;</code></p>

<p>在交互Shell中执行hadoop fs 命令，不常用 <br>
比如，统计hdfs文件系统中/tmp/目录的总大小：</p>

<pre class="prettyprint"><code class=" hljs lasso">hive<span class="hljs-subst">&gt;</span> dfs <span class="hljs-attribute">-du</span> <span class="hljs-attribute">-s</span> /tmp<span class="hljs-subst">/</span>;
<span class="hljs-number">54656194751</span> /tmp</code></pre>

<p><code>&lt;query string&gt;</code></p>

<p>最常用的，执行HQL语句，以分号结尾； <br>
<code>source FILE &lt;filepath&gt;</code> <br>
在交互Shell中执行一个脚本，不常用。</p>

<h2 id="参考">参考</h2>

<p><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Cli" rel="nofollow">LanguageManual+Cli</a> <br>
<a href="http://lxw1234.com/archives/2015/06/292.htm" rel="nofollow">[一起学Hive]之八-使用Hive命令行</a></p>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>