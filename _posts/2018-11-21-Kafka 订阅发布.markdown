---
layout:     post
title:      Kafka 订阅发布
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/singgel/article/details/79986199				</div>
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                <pre class="has">
<code>安装：
brew install kafka

启动：
cd /usr/local/Cellar/kafka/2.0.0/
./bin/zookeeper-server-start /usr/local/etc/kafka/zookeeper.properties
./bin/kafka-server-start /usr/local/etc/kafka/server.properties

创建topic：
./bin/kafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test

发送消息：
./bin/kafka-console-producer --broker-list localhost:9092 --topic test

消费消息：
./bin/kafka-console-consumer --bootstrap-server localhost:9092 --topic test --from-beginning

</code></pre>

<p>安装完毕之后，直接去我的github上下载代码，上手理解吧：<a href="https://github.com/singgel/MQ-SkillTree" rel="nofollow">https://github.com/singgel/MQ-SkillTree</a> </p>

<p>下面是Linux安装：</p>

<pre class="has">
<code>kafka：https://mirrors.cnnic.cn/apache/kafka/
1.前提需要java环境和zookeeper的支持
2.创建持久化目录（根目录）
mkdir /kafkaLogs 
3.修改kafka的配置文件（config）目录
vim server.properties
1.修改broker.id
2.修改kafka监听地址
3.修改持久化目录
4.修改zk地址
5.添加启用删除topic配置
6.关闭自动创建topic

############################# Server Basics ############################## The id of the broker. This must be set to a unique integer for each broker.broker.id=0advertised.host.name=192.168.1.123############################# Socket Server Settings ############################## The address the socket server listens on. It will get the value returned from # java.net.InetAddress.getCanonicalHostName() if not configured.#   FORMAT:#     listeners = listener_name://host_name:port#   EXAMPLE:#     listeners = PLAINTEXT://your.host.name:9092#listeners=PLAINTEXT://:9092# Hostname and port the broker will advertise to producers and consumers. If not set, # it uses the value for "listeners" if configured.  Otherwise, it will use the value# returned from java.net.InetAddress.getCanonicalHostName().#advertised.listeners=PLAINTEXT://your.host.name:9092# Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details#listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL# The number of threads that the server uses for receiving requests from the network and sending responses to the networknum.network.threads=3# The number of threads that the server uses for processing requests, which may include disk I/Onum.io.threads=8# The send buffer (SO_SNDBUF) used by the socket serversocket.send.buffer.bytes=102400# The receive buffer (SO_RCVBUF) used by the socket serversocket.receive.buffer.bytes=102400# The maximum size of a request that the socket server will accept (protection against OOM)socket.request.max.bytes=104857600############################# Log Basics ############################## A comma separated list of directories under which to store log fileslog.dirs=/kafkaLogs# The default number of log partitions per topic. More partitions allow greater# parallelism for consumption, but this will also result in more files across# the brokers.num.partitions=1# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.# This value is recommended to be increased for installations with data dirs located in RAID array.num.recovery.threads.per.data.dir=1############################# Internal Topic Settings  ############################## The replication factor for the group metadata internal topics "__consumer_offsets" and "__transaction_state"# For anything other than development testing, a value greater than 1 is recommended for to ensure availability such as 3.offsets.topic.replication.factor=1transaction.state.log.replication.factor=1transaction.state.log.min.isr=1############################# Log Flush Policy ############################## Messages are immediately written to the filesystem but by default we only fsync() to sync# the OS cache lazily. The following configurations control the flush of data to disk.# There are a few important trade-offs here:#    1. Durability: Unflushed data may be lost if you are not using replication.#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to excessive seeks.# The settings below allow one to configure the flush policy to flush data after a period of time or# every N messages (or both). This can be done globally and overridden on a per-topic basis.# The number of messages to accept before forcing a flush of data to disk#log.flush.interval.messages=10000# The maximum amount of time a message can sit in a log before we force a flush#log.flush.interval.ms=1000############################# Log Retention Policy ############################## The following configurations control the disposal of log segments. The policy can# be set to delete segments after a period of time, or after a given size has accumulated.# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens# from the end of the log.# The minimum age of a log file to be eligible for deletion due to agelog.retention.hours=168# A size-based retention policy for logs. Segments are pruned from the log unless the remaining# segments drop below log.retention.bytes. Functions independently of log.retention.hours.#log.retention.bytes=1073741824# The maximum size of a log segment file. When this size is reached a new log segment will be created.log.segment.bytes=1073741824# The interval at which log segments are checked to see if they can be deleted according# to the retention policieslog.retention.check.interval.ms=300000############################# Zookeeper ############################## Zookeeper connection string (see zookeeper docs for details).# This is a comma separated host:port pairs, each corresponding to a zk# server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".# You can also append an optional chroot string to the urls to specify the# root directory for all kafka znodes.zookeeper.connect=192.168.1.123:2181,192.168.1.131:2181,192.168.1.148:2181# Timeout in ms for connecting to zookeeperzookeeper.connection.timeout.ms=6000############################# Group Coordinator Settings ############################## The following configuration specifies the time, in milliseconds, that the GroupCoordinator will delay the initial consumer rebalance.# The rebalance will be further delayed by the value of group.initial.rebalance.delay.ms as new members join the group, up to a maximum of max.poll.interval.ms.# The default value for this is 3 seconds.# We override this to 0 here as it makes for a better out-of-the-box experience for development and testing.# However, in production environments the default value of 3 seconds is more suitable as this will help to avoid unnecessary, and potentially expensive, rebalances during application startup.group.initial.rebalance.delay.ms=0###########删除topic#############################delete.topic.enable=true#########关闭自动创建topic###################auto.create.topics.enable=false
4.复制该配置到集群中的其他机器
 scp -rp kafka_2.11-0.9.0.1 root@***:/usr/local/
5.修改集群中其他机器的broker.id
vim server.properties
broker.id=0
6.启动kafka的相关命令：
主机启动kafka：
JMX_PORT=9997 bin/kafka-server-start.sh -daemon config/server.properties &amp;
停止kafka：
/usr/local/kafka_2.11-0.9.0.1/bin/kafka-server-stop.sh
7.设置脚本，定期清理logs下的日志（kafka的根目录）
cd /usr/local/kafka_2.11-0.9.0.1/
vim clean_kafkalog.sh
#!/bin/bash###Description:This script is used to clear kafka logs, not message file.###Written by: jkzhao - jkzhao@wisedu.com  ###History: 2016-04-18 First release.# log file dir.logDir=/usr/local/kafka_2.11-0.9.0.1/logs# Reserved 7 files.COUNT=7ls -t $logDir/server.log* | tail -n +$[$COUNT+1] | xargs rm -fls -t $logDir/controller.log* | tail -n +$[$COUNT+1] | xargs rm -fls -t $logDir/state-change.log* | tail -n +$[$COUNT+1] | xargs rm -fls -t $logDir/log-cleaner.log* | tail -n +$[$COUNT+1] | xargs rm –f
chmod +x clean_kafkalog.sh
周期性任务策略：每周日的0点0分去执行这个脚本：
crontab -e 0 0 * * 0 /usr/local/kafka_2.11-0.9.0.1/clean_kafkalog.sh
</code></pre>

<p>Kafka<br>
订阅发布<br><br>
创建一个topic<br>
customer来获取<br>
producer来发布（生产者）<br>
broker是Kafka的server（消费者和生产者的工作对象）<br><br>
producer的传送根据业务类型选择接口（指定hashMap接口key相同、或者顺序roundRob）<br><br>
produce.type （sync：asyc） </p>

<p><img alt="" class="has" src="https://img-blog.csdn.net/20180418111204536"></p>            </div>
                </div>