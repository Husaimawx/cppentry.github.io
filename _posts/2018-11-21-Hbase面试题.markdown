---
layout:     post
title:      Hbase面试题
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                <ul><li>
	<ul><li><a href="https://blog.csdn.net/HaixWang/article/details/79514886#%E4%BB%96%E4%BA%BA%E7%9C%9F%E5%AE%9E%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98" rel="nofollow">他人真实面试问题</a>
		<ul><li><a href="https://blog.csdn.net/HaixWang/article/details/79514886#1hbase%E7%9A%84%E6%9E%B6%E6%9E%84%E5%92%8C%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86" rel="nofollow">HBase的架构和基本原理</a></li>
			<li><a href="https://blog.csdn.net/HaixWang/article/details/79514886#2hbase%E4%B8%8E%E4%BC%A0%E7%BB%9F%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A6%82mysql%E7%9A%84%E5%8C%BA%E5%88%AB" rel="nofollow">HBase与传统关系型数据库如MySQL的区别</a></li>
			<li><a href="https://blog.csdn.net/HaixWang/article/details/79514886#3%E8%AF%BB%E5%86%99%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94%E8%AF%BB%E5%BF%AB%E8%BF%98%E6%98%AF%E5%86%99%E5%BF%AB" rel="nofollow">读写性能对比读快还是写快</a></li>
			<li><a href="https://blog.csdn.net/HaixWang/article/details/79514886#4hbase%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%9C%89%E4%BB%80%E4%B9%88%E5%BF%83%E5%BE%97" rel="nofollow">Hbase的设计有什么心得</a></li>
			<li><a href="https://blog.csdn.net/HaixWang/article/details/79514886#5hbase%E7%9A%84%E6%93%8D%E4%BD%9C%E6%98%AF%E7%94%A8%E7%9A%84%E4%BB%80%E4%B9%88api%E8%BF%98%E6%98%AF%E4%BB%80%E4%B9%88%E5%B7%A5%E5%85%B7" rel="nofollow">Hbase的操作是用的什么API还是什么工具</a></li>
			<li><a href="https://blog.csdn.net/HaixWang/article/details/79514886#6%E4%BD%A0%E4%BB%AChbase%E9%87%8C%E9%9D%A2%E6%98%AF%E5%AD%98%E4%B8%80%E4%BA%9B%E4%BB%80%E4%B9%88%E6%95%B0%E6%8D%AE" rel="nofollow">你们hbase里面是存一些什么数据</a></li>
			<li><a href="https://blog.csdn.net/HaixWang/article/details/79514886#7%E7%9F%A5%E9%81%93spark%E6%80%8E%E4%B9%88%E8%AF%BBhbase%E5%90%97" rel="nofollow">知道spark怎么读hbase吗</a></li>
			<li><a href="https://blog.csdn.net/HaixWang/article/details/79514886#8%E5%81%9A%E8%BF%87hbase%E7%9A%84%E4%BA%8C%E7%BA%A7%E7%B4%A2%E5%BC%95%E5%90%97" rel="nofollow">做过hbase的二级索引吗</a></li>
			<li><a href="https://blog.csdn.net/HaixWang/article/details/79514886#9hbase%E7%9A%84put%E7%9A%84%E4%B8%80%E4%B8%AA%E8%BF%87%E7%A8%8B" rel="nofollow">Hbase的PUT的一个过程</a></li>
		</ul></li>
		<li><a href="https://blog.csdn.net/HaixWang/article/details/79514886#%E4%BB%A5%E4%B8%8B%E6%98%AF%E6%88%91%E8%87%AA%E5%B7%B1%E6%83%B3%E7%9A%84%E9%97%AE%E9%A2%98" rel="nofollow">以下是我自己想的问题</a>
		<ul><li><a href="https://blog.csdn.net/HaixWang/article/details/79514886#1%E6%8F%8F%E8%BF%B0%E4%B8%80%E4%B8%8Bregion%E5%88%87%E5%88%86%E7%9A%84%E8%BF%87%E7%A8%8B" rel="nofollow">描述一下Region切分的过程</a></li>
			<li><a href="https://blog.csdn.net/HaixWang/article/details/79514886#2hbase%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE%E7%9A%84%E6%B5%81%E7%A8%8B" rel="nofollow">Hbase读取数据的流程</a></li>
			<li><a href="https://blog.csdn.net/HaixWang/article/details/79514886#3hbase%E7%9A%84%E7%BC%BA%E7%82%B9%E4%BC%98%E7%82%B9%E5%B7%B2%E7%BB%8F%E5%9C%A84%E4%B8%AD%E4%BD%93%E7%8E%B0" rel="nofollow">HBase的缺点优点已经在4中体现</a></li>
			<li><a href="https://blog.csdn.net/HaixWang/article/details/79514886#4%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E9%80%82%E5%90%88%E4%BD%BF%E7%94%A8hbase%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF" rel="nofollow">什么时候适合使用HBase应用场景</a></li>
			<li><a href="https://blog.csdn.net/HaixWang/article/details/79514886#5client%E4%BC%9A%E7%BC%93%E5%AD%98meta%E7%9A%84%E6%95%B0%E6%8D%AE%E8%AF%A5%E6%95%B0%E6%8D%AE%E6%9B%B4%E6%96%B0%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E" rel="nofollow">Client会缓存META的数据该数据更新了怎么办</a></li>
		</ul></li>
		<li><a href="https://blog.csdn.net/HaixWang/article/details/79514886#%E6%B3%A8" rel="nofollow">注</a></li>
		<li><a href="https://blog.csdn.net/HaixWang/article/details/79514886#%E5%8F%82%E8%80%83" rel="nofollow">参考</a></li>
	</ul></li>
</ul><p> </p>

<h2 id="他人真实面试问题"><a name="t0"></a>他人真实面试问题</h2>

<p>版权声明：本文为博主原创文章，转载请注明出处，欢迎交流。QQ911283415</p>

<h3 id="1hbase的架构和基本原理"><a name="t1"></a>1.HBase的架构和基本原理</h3>

<p>Hbase以表的方式组织数据， <br>
表由行（Row）以及列（Column）组成，行由row key和一个或多个列及其值组成（存储是按照row key的字典顺序排序，<strong>row key的设计非常重要！！</strong>）， <br>
列必须属于某一列族（Column family），一个列族可以有一各或多个列（<strong>一列由列簇和列修饰符组成</strong>，他们通常由冒号（：） 分隔），其<strong>在存储架构中就是一个Hfile</strong>。 <br>
Hbase中的列可以达到百万级，列中的数据可以是稀疏的，空值并不占用存储空间。 <br>
数据按主键排序，同时表按主键划分为多个Region。底层是LSM树（Long-Structed Merge Tree）。</p>

<p><strong>对于以上叙述，表的简略结构：(逻辑模型)</strong></p>

<blockquote>
<p><img alt="这里写图片描述" class="has" src="https://img-blog.csdn.net/20180311093934996?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSGFpeFdhbmc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"><br>
注1：建议把Hbase理解为一个多维Map</p>
</blockquote>

<p><strong>Hbase简略架构图如下：</strong></p>

<blockquote>
<p><img alt="这里写图片描述" class="has" src="https://img-blog.csdn.net/20180311091536112?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSGFpeFdhbmc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p>
</blockquote>

<p>接下来对Zookeeper、HMaster、HRegionServer、HRegion、Store、MemStore、StoreFile、HFile、HLog等做个简单叙述：</p>

<p><strong>Zookeeper</strong></p>

<blockquote>
<ul><li>保证任何时候，集群中只有一个master（负责多HMaster的选举）</li>
	<li>存贮所有Region的寻址入口</li>
	<li>实时监控RegionServer的状态、将RegionServer的上线和下线信息实时通知给Master（服务器之间状态同步）</li>
	<li>存储Hbase的schema（元数据信息）。包括有哪些table、每个table有哪些column family等</li>
</ul></blockquote>

<p><strong>HMaster</strong> <br>
(主要负责table和region的管理工作)</p>

<blockquote>
<ul><li>Region分裂后，为RegionServer分配新的Region</li>
	<li>负责RegionServer的负载均衡，调整region的分配</li>
	<li>发现失效的region server并重新分配其上的region <br>
	(Region自动切分是HBase能够拥有良好扩张性的最重要因素之一，见转载文章：<a href="http://developer.51cto.com/art/201708/549419.htm" rel="nofollow">http://developer.51cto.com/art/201708/549419.htm</a>）</li>
	<li>管理用户对table的增、删、改、查操作</li>
	<li>监听zk,基于zookeeper感应rs的上下线</li>
	<li>监听zk,基于zookeeper来保证HA</li>
	<li>处理schema更新请求 （管理用户对表的增删修改）</li>
	<li>不参与对表的读写访问</li>
	<li>负载很低</li>
	<li>无SPOF(单点故障)</li>
	<li>在一个RegionServer死机后，负责失效节点的Region的迁移</li>
</ul></blockquote>

<p><strong>HRegionServer</strong> <br>
(主要负责响应用户对其上region的I/O请求，向HDFS读写数据，HbasHBase核心模块)</p>

<blockquote>
<ul><li>HRegionSserver维护Master分配给它的region</li>
	<li>维护region的cache</li>
	<li>处理region的flush、compact、split</li>
	<li>内部管理一系列的HRegion对象</li>
	<li>一个HRegionServer会有多个HRegion和一个HLog。</li>
</ul></blockquote>

<p><strong>Region</strong> <br>
（图中为Hregion，也就是指一个Table的分区）</p>

<blockquote>
<ul><li>每一个HRegion又由很多的Store组成，每一个Store存储的实际上是一个列簇（ColumnFamily）下所有的数据。此外，在每一个Store（又名HStore）中有包含一块MemStore。MemStore驻留在内存中，数据到来时首先更新到MemStore中，当到达阈值之后再flush（默认64M）到对应的StoreFile（又名HFile）中，所以每一个Store包含多个StoreFile，StoreFile负责的是实际数据存储，为HBase中最小的存储单元。</li>
	<li>达到某个阈值时，分裂（默认256M）。所以一个HRegionServer管理多个表，一个表下有多个Region，一个HRegion有多少个列族就有多少个Store,Store下有多个StoreFile文件，是HBase中最小的存储单元</li>
	<li>以Region为单位管理, region(startKey,endKey)；【默认情况下，刚创建一个表时，并不知道startkey和endkey】</li>
	<li>每个Column Family单独存储：storeFile；（ storefile的数量一多（到达阀值），就合并（同时合并版本以及删除之前要删除的数据）；合并后大小到达阀值就split）</li>
	<li>当某个Column Family累积的大小（具体的数据量） &gt; 某阈值时，自动分裂成两个Region；<strong>合并之后，旧数据也不是立即删除，而是复制一份并同内存中的数据一起写到磁盘，在之后，LSM-Tree会提供一些机制来回收这些空间。</strong>[4]</li>
	<li>如何找到某行属于哪个region呢？两张特殊的表： <br>
	-NAMESPACE- 和.META.</li>
</ul></blockquote>

<p><strong>StoreFile</strong> <br>
（底层存储格式是HFile，HBase中最小的存储单元）</p>

<blockquote>
<p>memStore内存中的数据写到文件后就是StoreFile，StoreFile底层是以HFile的格式保存。</p>
</blockquote>

<p><strong>HFile</strong>[1] <br>
（HFile基于Hadoop的TFile类实现，模仿Google的BIgTable论文中的SSTable格式。）</p>

<blockquote>
<ul><li>HBase中KeyValue数据的存储格式，是hadoop的二进制格式文件。</li>
	<li>HFile文件是不定长的，长度固定的只有其中的两块：Trailer和FileInfo。</li>
	<li>Trailer中有指针指向其他数据块的起始点，FileInfo记录了文件的一些meta信息。 - Data Block是hbase io的基本单元，为了提高效率，HRegionServer中有基于LRU的block cache机制。</li>
	<li>每个Data块的大小可以在创建一个Table的时候通过参数指定（默认块大小64KB），大号的Block有利于顺序Scan，小号的Block利于随机查询。</li>
	<li>每个Data块除了开头的Magic以外就是一个个KeyValue对拼接而成</li>
	<li>Magic内容就是一些随机数字，目的是防止数据损坏 <br><img alt="这里写图片描述" class="has" src="https://img-blog.csdn.net/20180311105332721?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSGFpeFdhbmc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></li>
</ul></blockquote>

<p><strong>HLog(WAL log)</strong> <br>
（HLog是WAL的核心实现类）</p>

<blockquote>
<ul><li>WAL意为write ahead log，HBase中的预写日志，用来做灾难恢复使用，底层实现是HLog，HLog记录数据的所有变更。使用WAL的原因：<strong>因为MemStore存储的数据是驻留在内存中的，是不稳定的（比如宕机时），所以采用了WAL预写日志来解决这个问题。（运行MApReduce作业时，可以通过关闭WAL功能来获得性能的提升——setWriteToWAL(boolean)）</strong></li>
	<li>其实HLog文件就是一个普通的Hadoop Sequence File， Sequence File的value是key时HLogKey对象，其中记录了写入数据的归属信息，除了table和region名字外，还同时包括sequence number和timestamp，timestamp是写入时间，sequence number的起始值为0，或者是最近一次存入文件系统中的sequence number。 Sequence File的value是HBase的KeyValue对象，即对应HFile中的KeyValue。[1]</li>
</ul></blockquote>

<h3 id="2hbase与传统关系型数据库如mysql的区别"><a name="t2"></a>2.HBase与传统关系型数据库(如MySQL)的区别</h3>

<blockquote>
<ul><li>数据类型：没有数据类型，都是字节数组（有一个工具类Bytes，将java对象序列化为字节数组）。</li>
	<li>数据操作：HBase只有很简单的插入、查询、删除、清空等操作，表和表之间是分离的，没有复杂的表和表之间的关系，而传统数据库通常有各式各样的函数和连接操作。</li>
	<li>存储模式：Hbase适合于非结构化数据存储，基于列存储而不是行。</li>
	<li>数据维护：HBase的更新操作不应该叫更新，它实际上是插入了新的数据，而传统数据库是替换修改</li>
	<li>时间版本：Hbase数据写入cell时，还会附带时间戳，默认为数据写入时RegionServer的时间，但是也可以指定一个不同的时间。数据可以有多个版本。</li>
	<li>可伸缩性，Hbase这类分布式数据库就是为了这个目的而开发出来的，所以它能够轻松增加或减少硬件的数量，并且对错误的兼容性比较高。而传统数据库通常需要增加中间层才能实现类似的功能</li>
	<li>[3]</li>
</ul></blockquote>

<h3 id="3读写性能对比读快还是写快"><a name="t3"></a>3.读写性能对比（读快还是写快）</h3>

<h3 id="4hbase的设计有什么心得"><a name="t4"></a>4.Hbase的设计有什么心得？</h3>

<h3 id="5hbase的操作是用的什么api还是什么工具"><a name="t5"></a>5.Hbase的操作是用的什么API还是什么工具？</h3>

<h3 id="6你们hbase里面是存一些什么数据"><a name="t6"></a>6.你们hbase里面是存一些什么数据</h3>

<h3 id="7知道spark怎么读hbase吗"><a name="t7"></a>7.知道spark怎么读hbase吗？</h3>

<h3 id="8做过hbase的二级索引吗"><a name="t8"></a>8.做过hbase的二级索引吗？</h3>

<h3 id="9hbase的put的一个过程"><a name="t9"></a>9.Hbase的PUT的一个过程</h3>

<hr><hr><h2 id="以下是我自己想的问题"><a name="t10"></a>以下是我自己想的问题</h2>

<h3 id="1描述一下region切分的过程"><a name="t11"></a>1.描述一下Region切分的过程？</h3>

<p><a href="http://blog.csdn.net/HaixWang/article/details/79514983" rel="nofollow">HBase原理–所有Region切分的细节都在这里了</a></p>

<h3 id="2hbase读取数据的流程"><a name="t12"></a>2.Hbase读取数据的流程？</h3>

<p><a href="http://blog.csdn.net/HaixWang/article/details/79520141" rel="nofollow">HBase读写流程</a></p>

<h3 id="3hbase的缺点优点已经在4中体现"><a name="t13"></a>3.HBase的缺点？（优点已经在4中体现）</h3>

<blockquote>
<ul><li>单一RowKey固有的局限性决定了它不可能有效地支持多条件查询[2]</li>
	<li>不适合于大范围扫描查询</li>
	<li>不直接支持 SQL 的语句查询</li>
</ul></blockquote>

<h3 id="4什么时候适合使用hbase应用场景"><a name="t14"></a>4.什么时候适合使用HBase（应用场景）</h3>

<blockquote>
<ul><li>半结构化或非结构化数据: <br>
	对于数据结构字段不够确定或杂乱无章非常难按一个概念去进行抽取的数据适合用HBase，因为HBase支持动态添加列。</li>
	<li>记录很稀疏： <br>
	RDBMS的行有多少列是固定的。为null的列浪费了存储空间。而如上文提到的，HBase为null的Column不会被存储，这样既节省了空间又提高了读性能。</li>
	<li>多版本号数据： <br>
	依据Row key和Column key定位到的Value能够有随意数量的版本号值，因此对于须要存储变动历史记录的数据，用HBase是很方便的。比方某个用户的Address变更，用户的Address变更记录也许也是具有研究意义的。</li>
	<li>仅要求最终一致性： <br>
	对于数据存储事务的要求不像金融行业和财务系统这么高，只要保证最终一致性就行。（比如HBase+elasticsearch时，可能出现数据不一致）</li>
	<li>高可用和海量数据以及很大的瞬间写入量： <br>
	WAL解决高可用，支持PB级数据，put性能高</li>
	<li>索引插入比查询操作更频繁的情况。比如，对于历史记录表和日志文件。（HBase的写操作更加高效）</li>
	<li>业务场景简单： <br>
	不需要太多的关系型数据库特性，列入交叉列，交叉表，事务，连接等。</li>
</ul></blockquote>

<hr><p><strong>2018/3/12增</strong></p>

<h3 id="5client会缓存meta的数据该数据更新了怎么办"><a name="t15"></a>5.Client会缓存.META.的数据,该数据更新了怎么办？</h3>

<p>（参考自[5]）</p>

<blockquote>
<p>其实，Client的元数据缓存不更新，当.META.的数据发生更新。比如因为region重新均衡，某个Region的位置发生了变化，<strong>Client再次根据缓存去访问的时候，会出现错误，当出现异常达到最大重试次数后，client就会重新去.META.所在的RegionServer获取最新的Region信息，如果.META.所在的RegionServer也变了，Client就会重新去ZK上获取.META.所在的RegionServer的最新地址</strong>。</p>
</blockquote>

<h2 id="注"><a name="t16"></a>注</h2>

<p>注1：对应上文的表结构的多维度Map映射表形式理解</p>

<pre class="has">
<code>{
"com.cnn.www": {
    contents: {
      t6: contents:html: "&lt;html&gt;..."
      t5: contents:html: "&lt;html&gt;..."
      t3: contents:html: "&lt;html&gt;..."
} 
    anchor: {
      t9: anchor:cnnsi.com = "CNN"
      t8: anchor:my.look.ca = "CNN.com"
} 
    people: {}
} 
"com.example.www": {
    contents: {
      t5: contents:html: "&lt;html&gt;..."
} 
    anchor: {}
    people: {
      t5: people:author: "John Doe"
        }
    }
}</code></pre>

<h2 id="参考"><a name="t17"></a>参考</h2>

<p>[1]对于HFile和Hlog更为细致的讲解见：<a href="https://www.cnblogs.com/qiaoyihang/p/6246424.html" rel="nofollow">深入学习HBase架构原理</a> <br>
[2]文章可能会有点旧：<a href="https://www.cnblogs.com/gavanwanggw/p/7103105.html" rel="nofollow">HBase高性能复杂条件查询引擎</a> <br>
[3]<a href="https://www.cnblogs.com/lizhonghua34/p/7700082.html" rel="nofollow">Hbase与传统关系型数据库对比</a> <br>
[4]《Hbase企业应用开发实战》第270页 <br>
[5]简书-飞鸿无痕：<a href="https://www.jianshu.com/p/569106a3008f" rel="nofollow">Hbase技术详细学习笔记</a></p>

<p>版权声明：本文为博主原创文章，转载请注明出处，欢迎交流，qq911283415。 https://blog.csdn.net/HaixWang/article/details/79514886</p>            </div>
                </div>