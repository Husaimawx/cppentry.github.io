---
layout:     post
title:      kafka总结
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                <p><img alt="" class="has" height="411" src="https://img-blog.csdn.net/2018101911142175?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NDg0NzM0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="609"></p>

<p>kafka充当消息队列</p>

<p><img alt="" class="has" height="437" src="https://img-blog.csdn.net/20181019111421185?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NDg0NzM0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="575"></p>

<p><img alt="" class="has" height="406" src="https://img-blog.csdn.net/20181019111421234?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NDg0NzM0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="822"></p>

<p> </p>

<p> </p>

<p>scala 2.11.X</p>

<p>*kafka的架构</p>

<p>zookeeper：集群协调管理配置工具。kafka的集群的形成和集群的基本配置信息，以及kafka的元数据信息，都保存在zookeeper中。kafka的broker连接信息也保存在zookeeper中。</p>

<p>Broker：kafka的每一个服务节点都被称作broker，kafka集群就是由若干个broker构成的一个服务整体。</p>

<p>        broker节点是一个逻辑上的概念（一个broker就是指一台机器上的一个进程），不是物理上的节点。</p>

<p>Topic：数据的划分类别，如果把kafka认为是一个数据的话，topic就是表的概念</p>

<p>       它可以做数据隔离，类似redis上称作的channel频道</p>

<p> </p>

<p>Partition:kafka的分布式方式，一个topic可以划分成多个partition，不同的partition负责不同的数据读写请求。</p>

<p> </p>

<p>Replication:kafak的容错手段，每一个partition有若干个replication，多个replication分别由不同的broker来进行负责。一个parttion的多个replicition中在某个时间点只有一个是对外提供读写服务的，这个replication被称作leader，其余的replication被称作follower，follower主动同步leader的数据。</p>

<p> </p>

<p>Producer：生产者（客户端），主要负责把数据发送至kafka，producer可以随意的和任意的broker来对接。</p>

<p> </p>

<p>Consumer:消费者（客户端），主要是负责取出kafka中的数据进行消费处理。consumer也可以连接任意的broker。</p>

<p> </p>

<p>Consumer Group：消费组，它是被存储在kafka服务端的一个名称，每个comsumer必须属于某个消费组，不同组的消费者之间消费的数据是可以重复的，同一个消费组下的多个消费者之间，他们消费的数据是完全不会重复的，这点是kafka保证。</p>

<p> </p>

<p>*kafka的集群配置：</p>

<p>1.broker.id=0     #每个broker都有一个唯一的标识，broker之间这个标识不能冲突</p>

<p>2.listeners=PLAINTEXT://:9092 #kafka服务运行时所需要占用的物理节点的端口号，同物理节点上的多个broker这个端口号不能冲突</p>

<p>3.log.dirs=/tmp/kafka-logs     #kafka保存消息信息的文件夹目录配置，同物理节点上的多个broker这个目录不能冲突</p>

<p>4.zookeeper.connect=localhost:2181  #kafka服务启动需要依赖zookeeper服务，这个参数是zookeeper服务的访问url</p>

<p> </p>

<p>kafka服务的启动</p>

<p> </p>

<p> </p>

<p>kafka-server-start.sh /usr/hadoop/kafka_2.11-0.10.1.0/config/server.properties &amp;</p>

<p>kafka-server-start.sh /usr/hadoop/kafka_2.11-0.10.1.0/config/server1.properties &amp;</p>

<p> </p>

<p>kafka-server-start.sh /usr/hadoop/kafka_2.11-0.10.1.0/config/server2.properties &amp;</p>

<p>kafka-server-start.sh /usr/hadoop/kafka_2.11-0.10.1.0/config/server3.properties &amp;</p>

<p> </p>

<p>kafka-server-start.sh /usr/hadoop/kafka_2.11-0.10.1.0/config/server4.properties &amp;</p>

<p>kafka-server-start.sh /usr/hadoop/kafka_2.11-0.10.1.0/config/server5.properties &amp;</p>

<p> </p>

<p>*创建一个topic</p>

<p>kafka-topics.sh 提供我们对kafka的topic进行增删改查操作</p>

<p>kafka-topics.sh --help</p>

<p> </p>

<p> </p>

<p>--list   打印出kafka里面有多少个topic</p>

<p>--describe 描述一个topic的基本信息的</p>

<p>--create 创建topic</p>

<p>--alter  修改一个topic</p>

<p>--delete 删除一个topic</p>

<p> </p>

<p>创建topic的时候需要指定两个参数：</p>

<p>--partitions   设置topic的partition的数量</p>

<p>--replication-factor  设置一个partition的replication的数量</p>

<p>--topic     备操作的topic的名称</p>

<p> </p>

<p>--zookeeper 指定kafka集群的zookeeper的连接url地址</p>

<p> </p>

<p> </p>

<p>*创建topic</p>

<p>kafka-topics.sh --create --zookeeper centos1:2181 --partitions 2 --replication-factor 2 --topic bd20test1</p>

<p> </p>

<p>*查看kafka有多少个topic</p>

<p>kafka-topics.sh --list --zookeeper centos1:2181</p>

<p>*查看某个topic的详细信息</p>

<p>kafka-topics.sh --describe --zookeeper centos1:2181 --topic bd20test1</p>

<p> </p>

<p>topic默认delete不掉，需要在server.properties下面添加：</p>

<p>delete.topic.enable=true</p>

<p>配置才能保证topic直接被删掉</p>

<p> </p>

<p>清除数据的规则</p>

<p>log.retention.hours=168</p>

<p>log.segment.bytes=1073741824</p>

<p>检查数据清除条件的时间间隔</p>

<p>log.retention.check.interval.ms=300000</p>

<p> </p>

<p>*kafka自带客户端</p>

<p>生产者：kafka-console-producer.sh</p>

<p>消费者：kafka-console-consumer.sh</p>

<p>一般用于测试和调试</p>

<p> </p>

<p> </p>

<p>指令kafka-console-producer.sh的参数：</p>

<p>--broker-list  broker的服务列表：centos1:9092,centos2:9092,centos3:9092</p>

<p>--topic 指定topic的名称</p>

<p>指令kafka-console-consumer.sh的参数：</p>

<p>--bootstrap-server  broker的服务列表：centos1:9092,centos2:9092,centos3:9092</p>

<p>--zookeeper         zookeeper连接入口url：centos1:2181,centos2:2181,centos3:2181</p>

<p>--topic             指定被消费的topic名称</p>

<p> </p>

<p> </p>

<p>--partition         指定消费topic的某个partition的数据</p>

<p>--offset            指定消费topic的某个partition的时候，指定其消费开始的偏移量</p>

<p>                    可以填一个数字也可以填：latest，earliest</p>

<p>--from-beginning    从开头开始消费</p>

<p> </p>

<p>生产：</p>

<p>kafka-console-producer.sh --broker-list centos1:9092,centos2:9092,centos3:9092 --topic bd20test1</p>

<p>消费：</p>

<p>kafka-console-consumer.sh --bootstrap-server centos1:9092,centos2:9092,centos3:9092 --topic bd20test1 --from-beginning</p>

<p> </p>

<p> </p>

<p> </p>

<p> </p>

<p>kafka的保证：</p>

<p>1.当消息被发送到某一个特定的partition上时，kafka能保证消息是严格按照顺序存储的</p>

<p>2.一个消费者从一个log文件上去消费数据的时候会严格按照这个文件上的消息顺序来进行消费</p>

<p>3.一个topic如果有N个副本，能保证N-1副本丢失都不会影响topic的读写使用</p>

<p> </p>

<p> </p>

<p>*kafka的client要求sl4j的依赖：</p>

<p>&lt;dependency&gt;</p>

<p>  &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</p>

<p>  &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;</p>

<p>  &lt;version&gt;1.7.22&lt;/version&gt;</p>

<p>&lt;/dependency&gt;</p>

<p>然后resources目录下拷贝一个log4j.properties文件进来</p>

<p> </p>

<p> </p>

<p>--作业</p>

<p>1.通过查看ProducerRecord的api文档，实现producer指定partition发送消息：</p>

<p>  指定只把消息发送到bd20test1的partition 1里面</p>

<p>2.使用kafka-console-consumer.sh只消费partition 0 查看上程序执行的效果</p>

<p>  然后使用kafka-console-consumer.sh只消费partition 1 查看上程序执行的效果</p>

<p> </p>

<p>查看Consumer怎么写</p>

<p> </p>

<p><img alt="" class="has" height="397" src="https://img-blog.csdn.net/20181019111421220?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NDg0NzM0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="917"></p>

<p> </p>

<p> </p>

<p> </p>

<p><img alt="" class="has" height="578" src="https://img-blog.csdn.net/20181019111421256?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NDg0NzM0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="947"></p>

<p> </p>

<p>*kafka在消费时产生数据丢失和数据重复的问题以及解决方案</p>

<p>原因：offset的值是保存在kafka里面的，而被消费的数据的消费过程是在kafka外面的</p>

<p> </p>

<p> </p>

<p>kafka对数据的消费可以保证：</p>

<p>at least once：至少一次，可能重复    消费成功但是offset没更新成功，把offset更新放在消费成功之后</p>

<p>at most once:最多一次，可以丢失      消费没成功但是offset更新层拱了，把offset的更新放在消费之前</p>

<p> </p>

<p>exactly once:精确一次，不会丢失也不会失败  保证消费成功和offset更新这两个动作是一个事务（是一个原子操作）</p>

<p>                                           把offset和消费的结果以事务的形式保存在kafka的外部</p>

<p>                                           在启动消费的时候，从外部存储总找出offset，然后指定offset的位置开始消费</p>

<p> </p>

<p>代码控制kafka的offset更新</p>

<p> </p>

<p>首先，配置参数，consumer上：</p>

<p><a href="http://enable.auto.commit/" rel="nofollow">enable.auto.commit</a> 设置成 false</p>

<p>auto.offset.reset  设置成 none</p>

<p>其次，代码commit</p>

<p>commitAsync()  --异步更新offset，不阻塞当前线程</p>

<p>commitSync()   --同步更新offset，阻塞当前线程，直到更新成功或更新失败</p>

<p> </p>

<p>把最后一次poll的数据中offset+1最大的值更新过去</p>

<p> </p>

<p>commitAsync(Map&lt;TopicPartition,OffsetAndMetadata&gt; offsets, OffsetCommitCallback callback)</p>

<p>commitSync(Map&lt;TopicPartition,OffsetAndMetadata&gt; offsets)</p>

<p> </p>

<p>异步更新offset是需要rebalance触发</p>

<p>rebalance：负载均衡</p>

<p> </p>

<p> </p>

<p> </p>            </div>
                </div>