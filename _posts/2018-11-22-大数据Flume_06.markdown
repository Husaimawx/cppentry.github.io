---
layout:     post
title:      大数据Flume_06
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<p align="center"><strong>Flume</strong></p>
<h1><strong><span style="font-size:14px;">一、数据模型</span></strong></h1>
<p><strong><span style="font-size:12px;">Flume的概念 </span></strong></p>
<p> <img src="https://img-blog.csdn.net/20170921230000632" alt=""></p>
<p><span style="color:rgb(63,63,63);"><span style="font-size:12px;">flume是分布式的日志收集系统，它将各个服务器中的数据收集起来并送到指定的地方去，比如说送到图中的HDFS，简单来说flume就是收集日志的。</span></span></p>
<p><span style="font-size:12px;"><span style="color:rgb(63,63,63);">N</span><span style="color:rgb(63,63,63);">ote：收集到的数据不一定直接到HDFS，还可以暂时存储到Kafka中，然后在存储到HDFS中。</span></span></p>
<p><span style="font-size:12px;"><strong>Event的概念 </strong><span style="color:rgb(63,63,63);"><br></span><span style="color:rgb(63,63,63);">event的相关概念：</span></span></p>
<p><span style="font-size:12px;"><span style="color:rgb(63,63,63);">flume的核心是把数据从数据源(source)收集过来，在将收集到的数据送到指定的目的地(sink)。为了保证输送的过程一定成功，在送到目的地(sink)之前，会先缓存数据(channel),待数据真正到达目的地(sink)后，flume在删除自己缓存的数据。 </span><span style="color:rgb(63,63,63);"><br></span><span style="color:rgb(63,63,63);">    </span><span style="color:rgb(63,63,63);"><span style="font-family:'宋体';">在整个数据的传输的过程中，流动的是</span>event，即事务保证是在event级别进行的。那么什么是event呢？—–event将传输的数据进行封装，是flume传输数据的基本单位，如果是文本文件，通常是一行记录，event也是事务的基本单位。event从source，流向channel，再到sink，本身为一个字节数组，并可携带headers(头信息)信息。event代表着一个数据的最小完整单元，从外部数据源来，向外部的目的地去。 </span><span style="color:rgb(63,63,63);"><br></span><span style="color:rgb(63,63,63);"><span style="font-family:'宋体';">为了方便大家理解，给出一张</span>event的数据流向图： </span></span></p>
<p> <img src="https://img-blog.csdn.net/20170921230047667" alt=""></p>
<p><span style="font-size:12px;"><span style="color:rgb(63,63,63);"><span style="font-family:'宋体';">一个完整的</span>event包括：event headers、event body、event信息(即文本文件中的单行记录)，如下所以：</span><span style="color:rgb(63,63,63);"> </span><span style="color:rgb(63,63,63);"><br></span><span style="color:rgb(63,63,63);"><br></span><span style="color:rgb(63,63,63);"><span style="font-family:'宋体';">其中</span>event信息就是flume收集到的日记记录。 </span></span></p>
<h1><span style="font-size:14px;">二、<strong>简单的配置</strong></span></h1>
<p> <img src="https://img-blog.csdn.net/20170921230120964" alt=""></p>
<h1><span style="color:rgb(63,63,63);"><span style="font-size:14px;"> 三、启动Flume</span></span></h1>
<div><span style="color:rgb(63,63,63);"><span style="font-size:14px;"></span></span>
<pre style="background-color:rgb(238,255,204);color:rgb(51,51,51);line-height:15.6px;border-top:1px solid rgb(170,204,153);border-bottom:1px solid rgb(170,204,153);border-left:none;border-right:none;">$ bin/flume-ng agent --conf conf --conf-file example.conf --name a1 -Dflume.root.logger=INFO,console</pre>
</div>
<div><span style="color:rgb(63,63,63);"><span style="font-size:12px;">example.conf 指定上面的配置文件。</span></span></div>
<div><span style="color:rgb(63,63,63);"><span style="font-size:12px;">a1 为agent的别名。</span></span></div>
<div><span style="color:rgb(63,63,63);"><span style="font-size:12px;">INFO 指定日志的级别。</span></span></div>
<div><span style="color:rgb(63,63,63);"><span style="font-size:12px;">condole 为日志输出位置。</span></span></div>
<h1><span style="font-size:14px;"><span style="color:rgb(63,63,63);">四、</span><span style="color:rgb(63,63,63);font-family:'microsoft yahei';">flume架构介绍 </span></span></h1>
<div><span style="font-size:12px;"><span style="font-family:'microsoft yahei';">flume之所以这么神奇，是源于它自身的一个设计，这个设计就是agent，agent本身是一个java进程，运行在日志收集节点—所谓日志收集节点就是服务器节点。 </span><br style="font-family:'microsoft yahei';"><span style="font-family:'microsoft yahei';">agent里面包含3个核心的组件：source—-&gt;channel—–&gt;sink,类似生产者、仓库、消费者的架构。 </span><br style="font-family:'microsoft yahei';"><span style="font-family:'microsoft yahei';">source：source组件是专门用来收集数据的，可以处理各种类型、各种格式的日志数据,包括avro、thrift、exec、jms、spooling directory、netcat、sequence generator、syslog、http、legacy、自定义。 </span><br style="font-family:'microsoft yahei';"><span style="font-family:'microsoft yahei';">channel：source组件把数据收集来以后，临时存放在channel中，即channel组件在agent中是专门用来存放临时数据的——对采集到的数据进行简单的缓存，可以存放在memory、jdbc、file等等。 </span><br style="font-family:'microsoft yahei';"><span style="font-family:'microsoft yahei';">sink：sink组件是用于把数据发送到目的地的组件，目的地包括hdfs、logger、avro、thrift、ipc、file、null、hbase、solr、自定义。 </span></span><br></div>
<div>
<h1><span style="font-family:'microsoft yahei';"><span style="color:rgb(63,63,63);font-family:'microsoft yahei';"><span style="font-size:14px;">五、flume的运行机制 </span></span></span></h1>
<span style="font-size:12px;"><span style="font-family:'microsoft yahei';"><span style="color:rgb(63,63,63);font-family:'microsoft yahei';">flume的核心就是一个agent，这个agent对外有两个进行交互的地方，一个是接受数据的输入——source，一个是数据的输出sink，sink负责将数据发送到外部指定的目的地。source接收到数据之后，将数据发送给channel，chanel作为一个数据缓冲区会临时存放这些数据，随后sink会将channel中的数据发送到指定的地方—-例如HDFS等，注意：只有在sink将channel中的数据成功发送出去之后，channel才会将临时数据进行删除，这种机制保证了数据传输的可靠性与安全性。 </span><br style="color:rgb(63,63,63);font-family:'microsoft yahei';font-size:15px;"></span></span>
<h1><span style="font-family:'microsoft yahei';"><span style="color:rgb(63,63,63);font-family:'microsoft yahei';"><span style="font-size:14px;">六、flume的广义用法 </span></span></span></h1>
<span style="font-family:'microsoft yahei';"><span style="color:rgb(63,63,63);font-family:'microsoft yahei';"><span style="font-size:12px;">flume之所以这么神奇—-其原因也在于flume可以支持多级flume的agent，即flume可以前后相继，例如sink可以将数据写到下一个agent的source中，这样的话就可以连成串了，可以整体处理了。flume还支持扇入(fan-in)、扇出(fan-out)。所谓扇入就是source可以接受多个输入，所谓扇出就是sink可以将数据输出多个目的地destination中。 </span></span><br></span></div>
<div><span style="font-family:'microsoft yahei';"><span style="color:rgb(63,63,63);font-family:'microsoft yahei';"><span style="font-size:12px;"><img src="https://img-blog.csdn.net/20170922092532252" alt=""><br></span></span></span></div>
<h1><span style="font-family:'microsoft yahei';"><span style="color:rgb(63,63,63);font-family:'microsoft yahei';"><span style="font-size:14px;">七、<span style="color:rgb(63,63,63);font-family:'microsoft yahei';">flume应用—日志采集 </span></span></span></span></h1>
<div><span style="font-family:'microsoft yahei';"><span style="color:rgb(63,63,63);font-family:'microsoft yahei';"><span style="font-size:12px;"></span></span></span>
<p style="color:rgb(63,63,63);font-family:'microsoft yahei';">
对于flume的原理其实很容易理解，我们更应该掌握flume的具体使用方法，flume提供了大量内置的Source、Channel和Sink类型。而且不同类型的Source、Channel和Sink可以自由组合—–组合方式基于用户设置的配置文件，非常灵活。比如：Channel可以把事件暂存在内存里，也可以持久化到本地硬盘上。Sink可以把日志写入HDFS, HBase，甚至是另外一个Source等等。下面我将用具体的案例详述flume的具体用法。 <br>
其实flume的用法很简单—-书写一个配置文件，在配置文件当中描述source、channel与sink的具体实现，而后运行一个agent实例，在运行agent实例的过程中会读取配置文件的内容，这样flume就会采集到数据。 <br>
配置文件的编写原则： <br>
1&gt;从整体上描述代理agent中sources、sinks、channels所涉及到的组件</p>
<pre class="prettyprint" style="font-family:'Source Code Pro', monospace;font-size:14px;line-height:1.45;color:rgb(51,51,51);"><code class="hljs avrasm has-numbering" style="font-family:'Source Code Pro', monospace;color:inherit;background:transparent;display:block;">    <span class="hljs-preprocessor" style="color:rgb(68,68,68);"># Name the components on this agent</span>
    a1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.sources</span> = <span class="hljs-built_in" style="color:rgb(102,0,102);">r1</span>
    a1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.sinks</span> = k1
    a1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.channels</span> = c1</code></pre><ul class="pre-numbering" style="list-style:none;width:50px;background-color:rgb(238,238,238);border-right:1px solid rgb(221,221,221);text-align:right;"><li style="list-style:none;color:rgb(153,153,153);">1</li><li style="list-style:none;color:rgb(153,153,153);">2</li><li style="list-style:none;color:rgb(153,153,153);">3</li><li style="list-style:none;color:rgb(153,153,153);">4</li></ul><p style="color:rgb(63,63,63);font-family:'microsoft yahei';">
2&gt;详细描述agent中每一个source、sink与channel的具体实现：即在描述source的时候，需要 <br>
指定source到底是什么类型的，即这个source是接受文件的、还是接受http的、还是接受thrift <br>
的；对于sink也是同理，需要指定结果是输出到HDFS中，还是Hbase中啊等等；对于channel <br>
需要指定是内存啊，还是数据库啊，还是文件啊等等。</p>
<pre class="prettyprint" style="font-family:'Source Code Pro', monospace;font-size:14px;line-height:1.45;color:rgb(51,51,51);"><code class="hljs avrasm has-numbering" style="font-family:'Source Code Pro', monospace;color:inherit;background:transparent;display:block;">    <span class="hljs-preprocessor" style="color:rgb(68,68,68);"># Describe/configure the source</span>
    a1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.sources</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.r</span>1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.type</span> = netcat
    a1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.sources</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.r</span>1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.bind</span> = localhost
    a1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.sources</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.r</span>1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.port</span> = <span class="hljs-number" style="color:rgb(0,102,102);">44444</span>

    <span class="hljs-preprocessor" style="color:rgb(68,68,68);"># Describe the sink</span>
    a1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.sinks</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.k</span>1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.type</span> = logger

    <span class="hljs-preprocessor" style="color:rgb(68,68,68);"># Use a channel which buffers events in memory</span>
    a1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.channels</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.c</span>1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.type</span> = memory
    a1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.channels</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.c</span>1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.capacity</span> = <span class="hljs-number" style="color:rgb(0,102,102);">1000</span>
    a1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.channels</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.c</span>1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.transactionCapacity</span> = <span class="hljs-number" style="color:rgb(0,102,102);">100</span></code></pre><ul class="pre-numbering" style="list-style:none;width:50px;background-color:rgb(238,238,238);border-right:1px solid rgb(221,221,221);text-align:right;"><li style="list-style:none;color:rgb(153,153,153);">1</li><li style="list-style:none;color:rgb(153,153,153);">2</li><li style="list-style:none;color:rgb(153,153,153);">3</li><li style="list-style:none;color:rgb(153,153,153);">4</li><li style="list-style:none;color:rgb(153,153,153);">5</li><li style="list-style:none;color:rgb(153,153,153);">6</li><li style="list-style:none;color:rgb(153,153,153);">7</li><li style="list-style:none;color:rgb(153,153,153);">8</li><li style="list-style:none;color:rgb(153,153,153);">9</li><li style="list-style:none;color:rgb(153,153,153);">10</li><li style="list-style:none;color:rgb(153,153,153);">11</li><li style="list-style:none;color:rgb(153,153,153);">12</li></ul><p style="color:rgb(63,63,63);font-family:'microsoft yahei';">
3&gt;通过channel将source与sink连接起来</p>
<pre class="prettyprint" style="font-family:'Source Code Pro', monospace;line-height:1.45;color:rgb(51,51,51);"><code class="hljs avrasm has-numbering" style="font-family:'Source Code Pro', monospace;color:inherit;background:transparent;display:block;">    <span class="hljs-preprocessor" style="color:rgb(68,68,68);"># Bind the source and sink to the channel</span>
    a1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.sources</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.r</span>1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.channels</span> = c1
    a1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.sinks</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.k</span>1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.channel</span> = c1</code></pre><ul class="pre-numbering" style="font-size:14px;list-style:none;width:50px;background-color:rgb(238,238,238);border-right:1px solid rgb(221,221,221);text-align:right;"><li style="list-style:none;color:rgb(153,153,153);">1</li><li style="list-style:none;color:rgb(153,153,153);">2</li><li style="list-style:none;color:rgb(153,153,153);">3</li></ul><p style="color:rgb(63,63,63);font-family:'microsoft yahei';">
启动agent的shell操作：</p>
<pre class="prettyprint" style="font-family:'Source Code Pro', monospace;line-height:1.45;color:rgb(51,51,51);"><code class="hljs lasso has-numbering" style="font-family:'Source Code Pro', monospace;color:inherit;background:transparent;display:block;">    flume<span class="hljs-attribute">-ng</span>  agent <span class="hljs-attribute">-n</span> a1  <span class="hljs-attribute">-c</span>  <span class="hljs-built_in" style="color:rgb(102,0,102);">..</span>/conf   <span class="hljs-attribute">-f</span>  <span class="hljs-built_in" style="color:rgb(102,0,102);">..</span>/conf/example<span class="hljs-built_in" style="color:rgb(102,0,102);">.</span>file  
    <span class="hljs-attribute">-Dflume</span><span class="hljs-built_in" style="color:rgb(102,0,102);">.</span>root<span class="hljs-built_in" style="color:rgb(102,0,102);">.</span>logger<span class="hljs-subst" style="color:rgb(0,0,0);">=</span>DEBUG,console  </code></pre><ul class="pre-numbering" style="font-size:14px;list-style:none;width:50px;background-color:rgb(238,238,238);border-right:1px solid rgb(221,221,221);text-align:right;"><li style="list-style:none;color:rgb(153,153,153);">1</li><li style="list-style:none;color:rgb(153,153,153);">2</li></ul><p style="color:rgb(63,63,63);font-family:'microsoft yahei';">
参数说明： -n 指定agent名称(与配置文件中代理的名字相同) <br>
-c 指定flume中配置文件的目录 <br>
-f 指定配置文件 <br>
-Dflume.root.logger=DEBUG,console 设置日志等级</p>
<p style="color:rgb(63,63,63);font-family:'microsoft yahei';">
</p>
<p style="color:rgb(63,63,63);font-family:'microsoft yahei';">
</p>
<h1><span style="font-size:14px;">八、具体案例： </span></h1>
<h2><span style="font-size:14px;">案例1： </span></h2>
</div>
<div><span style="font-size:12px;">NetCat Source：监听一个指定的网络端口，即只要应用程序向这个端口里面写数据，这个source组件就可以获取到信息。 其中 Sink：logger Channel：memory <br>
flume官网中NetCat Source描述：</span>
<p></p>
<pre class="prettyprint" style="font-family:'Source Code Pro', monospace;font-size:14px;line-height:1.45;color:rgb(51,51,51);"><code class="hljs vhdl has-numbering" style="font-family:'Source Code Pro', monospace;color:inherit;background:transparent;display:block;"><span class="hljs-keyword" style="color:rgb(0,0,136);">Property</span> Name <span class="hljs-keyword" style="color:rgb(0,0,136);">Default</span>     Description
channels       –     
<span class="hljs-keyword" style="color:rgb(0,0,136);">type</span>           –     The <span class="hljs-keyword" style="color:rgb(0,0,136);">component</span> <span class="hljs-keyword" style="color:rgb(0,0,136);">type</span> name, needs <span class="hljs-keyword" style="color:rgb(0,0,136);">to</span> be netcat
bind           –  日志需要发送到的主机名或者Ip地址，该主机运行着netcat类型的source在监听          
<span class="hljs-keyword" style="color:rgb(0,0,136);">port</span>           –  日志需要发送到的端口号，该端口号要有netcat类型的source在监听      </code></pre><ul class="pre-numbering" style="list-style:none;width:50px;background-color:rgb(238,238,238);border-right:1px solid rgb(221,221,221);text-align:right;"><li style="list-style:none;color:rgb(153,153,153);">1</li><li style="list-style:none;color:rgb(153,153,153);">2</li><li style="list-style:none;color:rgb(153,153,153);">3</li><li style="list-style:none;color:rgb(153,153,153);">4</li><li style="list-style:none;color:rgb(153,153,153);">5</li></ul><p style="color:rgb(63,63,63);font-family:'microsoft yahei';">
<span style="font-size:12px;">a) 编写配置文件：</span></p>
<pre class="prettyprint" style="font-family:'Source Code Pro', monospace;font-size:14px;line-height:1.45;color:rgb(51,51,51);"><code class="hljs avrasm has-numbering" style="font-family:'Source Code Pro', monospace;color:inherit;background:transparent;display:block;"><span class="hljs-preprocessor" style="color:rgb(68,68,68);"># Name the components on this agent</span>
a1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.sources</span> = <span class="hljs-built_in" style="color:rgb(102,0,102);">r1</span>
a1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.sinks</span> = k1
a1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.channels</span> = c1

<span class="hljs-preprocessor" style="color:rgb(68,68,68);"># Describe/configure the source</span>
a1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.sources</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.r</span>1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.type</span> = netcat
a1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.sources</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.r</span>1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.bind</span> = <span class="hljs-number" style="color:rgb(0,102,102);">192.168</span><span class="hljs-number" style="color:rgb(0,102,102);">.222</span><span class="hljs-number" style="color:rgb(0,102,102);">.26</span>
a1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.sources</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.r</span>1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.port</span> = <span class="hljs-number" style="color:rgb(0,102,102);">44444</span>

<span class="hljs-preprocessor" style="color:rgb(68,68,68);"># Describe the sink</span>
a1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.sinks</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.k</span>1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.type</span> = logger

<span class="hljs-preprocessor" style="color:rgb(68,68,68);"># Use a channel which buffers events in memory</span>
a1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.channels</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.c</span>1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.type</span> = memory
a1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.channels</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.c</span>1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.capacity</span> = <span class="hljs-number" style="color:rgb(0,102,102);">1000</span>
a1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.channels</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.c</span>1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.transactionCapacity</span> = <span class="hljs-number" style="color:rgb(0,102,102);">100</span>

<span class="hljs-preprocessor" style="color:rgb(68,68,68);"># Bind the source and sink to the channel</span>
a1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.sources</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.r</span>1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.channels</span> = c1
a1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.sinks</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.k</span>1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.channel</span> = c1</code></pre><ul class="pre-numbering" style="list-style:none;width:50px;background-color:rgb(238,238,238);border-right:1px solid rgb(221,221,221);text-align:right;"><li style="list-style:none;color:rgb(153,153,153);">1</li><li style="list-style:none;color:rgb(153,153,153);">2</li><li style="list-style:none;color:rgb(153,153,153);">3</li><li style="list-style:none;color:rgb(153,153,153);">4</li><li style="list-style:none;color:rgb(153,153,153);">5</li><li style="list-style:none;color:rgb(153,153,153);">6</li><li style="list-style:none;color:rgb(153,153,153);">7</li><li style="list-style:none;color:rgb(153,153,153);">8</li><li style="list-style:none;color:rgb(153,153,153);">9</li><li style="list-style:none;color:rgb(153,153,153);">10</li><li style="list-style:none;color:rgb(153,153,153);">11</li><li style="list-style:none;color:rgb(153,153,153);">12</li><li style="list-style:none;color:rgb(153,153,153);">13</li><li style="list-style:none;color:rgb(153,153,153);">14</li><li style="list-style:none;color:rgb(153,153,153);">15</li><li style="list-style:none;color:rgb(153,153,153);">16</li><li style="list-style:none;color:rgb(153,153,153);">17</li><li style="list-style:none;color:rgb(153,153,153);">18</li><li style="list-style:none;color:rgb(153,153,153);">19</li><li style="list-style:none;color:rgb(153,153,153);">20</li><li style="list-style:none;color:rgb(153,153,153);">21</li></ul><p style="color:rgb(63,63,63);font-family:'microsoft yahei';">
<span style="font-size:12px;">b) 启动flume agent a1 服务端</span></p>
<pre class="prettyprint" style="font-family:'Source Code Pro', monospace;font-size:14px;line-height:1.45;"><code class="hljs lasso has-numbering" style="font-family:'Source Code Pro', monospace;background:transparent;display:block;"><span>flume</span><span class="hljs-attribute" style="color:inherit;">-ng</span><span>  agent </span><span class="hljs-attribute" style="color:inherit;">-n</span><span> a1  </span><span class="hljs-attribute" style="color:inherit;">-c</span><span> </span><strong><span style="color:#ff0000;">/home/flumeconfig</span></strong><span>  </span><span class="hljs-attribute" style="color:inherit;">-f</span><span> </span><span style="font-weight:bold;"><span>/home/<span style="font-family:'Source Code Pro', monospace;font-size:14px;background-color:rgb(240,240,240);"><span style="color:#ff0000;">flumeconfig/</span></span>netcat</span><span class="hljs-built_in" style="color:rgb(102,0,102);">.</span></span><span><strong>conf</strong>   </span><span class="hljs-attribute" style="color:inherit;">-Dflume</span><span class="hljs-built_in" style="color:rgb(102,0,102);">.</span><span>root</span><span class="hljs-built_in" style="color:rgb(102,0,102);">.</span><span>logger</span><span class="hljs-subst" style="color:rgb(0,0,0);">=</span><span>DEBUG,console</span></code></pre><ul class="pre-numbering" style="color:rgb(51,51,51);list-style:none;width:50px;background-color:rgb(238,238,238);border-right:1px solid rgb(221,221,221);text-align:right;"><li style="list-style:none;color:rgb(153,153,153);">1</li></ul><p style="color:rgb(63,63,63);font-family:'microsoft yahei';">
<span style="font-size:12px;">c) 使用telnet发送数据</span></p>
<pre class="prettyprint" style="font-family:'Source Code Pro', monospace;font-size:14px;line-height:1.45;color:rgb(51,51,51);"><code class="hljs haskell has-numbering" style="font-family:'Source Code Pro', monospace;color:inherit;background:transparent;display:block;"><span class="hljs-title">telnet</span>  <span class="hljs-number" style="color:rgb(0,102,102);">192.168</span><span class="hljs-number" style="color:rgb(0,102,102);">.222</span><span class="hljs-number" style="color:rgb(0,102,102);">.26</span>  <span class="hljs-number" style="color:rgb(0,102,102);">44444</span>  big <span class="hljs-typedef"><span class="hljs-keyword" style="color:rgb(0,0,136);">data</span> world！（windows中运行的）</span></code></pre><ul class="pre-numbering" style="list-style:none;width:50px;background-color:rgb(238,238,238);border-right:1px solid rgb(221,221,221);text-align:right;"><li style="list-style:none;color:rgb(153,153,153);">1</li></ul><p style="color:rgb(63,63,63);font-family:'microsoft yahei';">
<span style="font-size:12px;">d) 在控制台上查看flume收集到的日志数据：</span><span style="font-size:15px;"> <br><img src="https://img-blog.csdn.net/20160530211114709" alt="这里写图片描述" title="" style="border:0px;vertical-align:middle;"></span></p>
<h2><span style="color:rgb(63,63,63);font-family:'microsoft yahei';"><span style="font-size:14px;">案例2：</span></span></h2>
</div>
<div><span style="font-size:12px;"><span style="color:rgb(63,63,63);font-family:'microsoft yahei';">NetCat Source：监听一个指定的网络端口，即只要应用程序向这个端口里面写数据，这个source组件就可以获取到信息。 其中 Sink：hdfs Channel：file (相比于案例1的两个变化) </span><br style="color:rgb(63,63,63);font-family:'microsoft yahei';"><span style="color:rgb(63,63,63);font-family:'microsoft yahei';">flume官网中HDFS Sink的描述： </span></span><br><p style="color:rgb(63,63,63);font-family:'microsoft yahei';">
<img src="https://img-blog.csdn.net/20170922132025950" alt=""><br></p>
<p style="color:rgb(63,63,63);font-family:'microsoft yahei';">
<span style="color:rgb(63,63,63);font-family:'microsoft yahei';"><span style="font-size:12px;">a) 编写配置文件：</span></span><br></p>
<p style="color:rgb(63,63,63);font-family:'microsoft yahei';">
<span style="color:rgb(63,63,63);font-family:'microsoft yahei';"></span></p>
<pre class="prettyprint" style="font-size:14px;font-family:'Source Code Pro', monospace;line-height:1.45;"><code class="hljs avrasm has-numbering" style="font-family:'Source Code Pro', monospace;background:transparent;display:block;"><span class="hljs-preprocessor" style="color:rgb(68,68,68);"># Name the components on this agent</span><span>
a1</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.sources</span><span> = </span><span class="hljs-built_in" style="color:rgb(102,0,102);">r1</span><span>
a1</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.sinks</span><span> = k1
a1</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.channels</span><span> = c1

</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);"># Describe/configure the source</span><span>
a1</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.sources</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.r</span><span>1</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.type</span><span> = netcat
a1</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.sources</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.r</span><span>1</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.bind</span><span> = </span><span class="hljs-number" style="color:rgb(0,102,102);">192.168</span><span class="hljs-number" style="color:rgb(0,102,102);">.222</span><span class="hljs-number" style="color:rgb(0,102,102);">.108</span><span>
a1</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.sources</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.r</span><span>1</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.port</span><span> = </span><span class="hljs-number" style="color:rgb(0,102,102);">44444</span><span>

</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);"># Describe the sink</span><span>
a1</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.sinks</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.k</span><span>1</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.type</span><span> = </span><strong><span style="color:#ff0000;">hdfs</span></strong><span>
a1</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.sinks</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.k</span><span>1</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.hdfs</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.path</span><span> = </span><span style="color:#ff0000;"><strong>hdfs://weekend11:<span class="hljs-number">9000</span>/dataoutput</strong></span><span>
a1</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.sinks</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.k</span><span>1</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.hdfs</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.writeFormat</span><span> = <strong>Text</strong>
a1</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.sinks</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.k</span><span>1</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.hdfs</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.fileType</span><span> = <strong>DataStream</strong>
a1</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.sinks</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.k</span><span>1</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.hdfs</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.rollInterval</span><span> = </span><span class="hljs-number" style="color:rgb(0,102,102);">10</span><span>
a1</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.sinks</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.k</span><span>1</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.hdfs</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.rollSize</span><span> = </span><span class="hljs-number" style="color:rgb(0,102,102);">0</span><span>
a1</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.sinks</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.k</span><span>1</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.hdfs</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.rollCount</span><span> = </span><span class="hljs-number" style="color:rgb(0,102,102);">0</span><span>
a1</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.sinks</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.k</span><span>1</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.hdfs</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.filePrefix</span><span> = <strong>%</strong></span><span class="hljs-built_in" style="color:rgb(102,0,102);"><strong>Y</strong></span><span><strong>-%m-%d-%H-%M-%S</strong>
a1</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.sinks</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.k</span><span>1</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.hdfs</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.useLocalTimeStamp</span><span> = true

</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);"># Use a channel which buffers events in file</span><span>
a1</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.channels</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.c</span><span>1</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.type</span><span> = file
a1</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.channels</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.c</span><span>1</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.checkpointDir</span><span> = /usr/flume/checkpoint
a1</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.channels</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.c</span><span>1</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.dataDirs</span><span> = /usr/flume/data

</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);"># Bind the source and sink to the channel</span><span>
a1</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.sources</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.r</span><span>1</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.channels</span><span> = c1
a1</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.sinks</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.k</span><span>1</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.channel</span><span> = c1</span></code></pre><ul class="pre-numbering" style="color:rgb(51,51,51);list-style:none;width:50px;background-color:rgb(238,238,238);border-right:1px solid rgb(221,221,221);text-align:right;"><li style="list-style:none;color:rgb(153,153,153);">1</li><li style="list-style:none;color:rgb(153,153,153);">2</li><li style="list-style:none;color:rgb(153,153,153);">3</li><li style="list-style:none;color:rgb(153,153,153);">4</li><li style="list-style:none;color:rgb(153,153,153);">5</li><li style="list-style:none;color:rgb(153,153,153);">6</li><li style="list-style:none;color:rgb(153,153,153);">7</li><li style="list-style:none;color:rgb(153,153,153);">8</li><li style="list-style:none;color:rgb(153,153,153);">9</li><li style="list-style:none;color:rgb(153,153,153);">10</li><li style="list-style:none;color:rgb(153,153,153);">11</li><li style="list-style:none;color:rgb(153,153,153);">12</li><li style="list-style:none;color:rgb(153,153,153);">13</li><li style="list-style:none;color:rgb(153,153,153);">14</li><li style="list-style:none;color:rgb(153,153,153);">15</li><li style="list-style:none;color:rgb(153,153,153);">16</li><li style="list-style:none;color:rgb(153,153,153);">17</li><li style="list-style:none;color:rgb(153,153,153);">18</li><li style="list-style:none;color:rgb(153,153,153);">19</li><li style="list-style:none;color:rgb(153,153,153);">20</li><li style="list-style:none;color:rgb(153,153,153);">21</li><li style="list-style:none;color:rgb(153,153,153);">22</li><li style="list-style:none;color:rgb(153,153,153);">23</li><li style="list-style:none;color:rgb(153,153,153);">24</li><li style="list-style:none;color:rgb(153,153,153);">25</li><li style="list-style:none;color:rgb(153,153,153);">26</li><li style="list-style:none;color:rgb(153,153,153);">27</li><li style="list-style:none;color:rgb(153,153,153);">28</li><li style="list-style:none;color:rgb(153,153,153);">29</li></ul><div class="save_code tracking-ad" style="color:rgb(255,255,255);z-index:2;"><a style="background:transparent;color:rgb(202,12,22);"><img src="http://static.blog.csdn.net/images/save_snippets.png" alt="" style="border:0px;vertical-align:middle;"></a></div>
<p></p>
<p style="color:rgb(63,63,63);font-family:'microsoft yahei';">
<span style="font-size:12px;">b) 启动flume agent a1 服务端</span></p>
<pre class="prettyprint" style="font-family:'Source Code Pro', monospace;line-height:1.45;color:rgb(51,51,51);"><code class="hljs lasso has-numbering" style="font-family:'Source Code Pro', monospace;color:inherit;background:transparent;display:block;">flume<span class="hljs-attribute">-ng</span>  agent <span class="hljs-attribute">-n</span> a1  <span class="hljs-attribute">-c</span> <span style="font-family:'Source Code Pro', monospace;font-size:14px;background-color:rgb(240,240,240);"><span style="color:#ff0000;">/home/flumeconfig</span></span>  <span class="hljs-attribute">-f</span> <span class="hljs-built_in" style="color:rgb(102,0,102);"></span><span style="font-family:'Source Code Pro', monospace;font-size:14px;background-color:rgb(240,240,240);"><span style="color:#ff0000;">/home/flumeconfig</span></span>/netcat2<span class="hljs-built_in" style="color:rgb(102,0,102);">.</span>conf   <span class="hljs-attribute">-Dflume</span><span class="hljs-built_in" style="color:rgb(102,0,102);">.</span>root<span class="hljs-built_in" style="color:rgb(102,0,102);">.</span>logger<span class="hljs-subst" style="color:rgb(0,0,0);">=</span>DEBUG,console</code></pre><ul class="pre-numbering" style="font-size:14px;list-style:none;width:50px;background-color:rgb(238,238,238);border-right:1px solid rgb(221,221,221);text-align:right;"><li style="list-style:none;color:rgb(153,153,153);">1</li></ul><p style="color:rgb(63,63,63);font-family:'microsoft yahei';">
<span style="font-size:12px;">c) 使用telnet发送数据</span></p>
<pre class="prettyprint" style="font-family:'Source Code Pro', monospace;line-height:1.45;color:rgb(51,51,51);"><code class="hljs haskell has-numbering" style="font-family:'Source Code Pro', monospace;color:inherit;background:transparent;display:block;"><span class="hljs-title">telnet</span>  <span class="hljs-number" style="color:rgb(0,102,102);">192.168</span><span class="hljs-number" style="color:rgb(0,102,102);">.222</span><span class="hljs-number" style="color:rgb(0,102,102);">.108</span>  <span class="hljs-number" style="color:rgb(0,102,102);">44444</span>  big <span class="hljs-typedef"><span class="hljs-keyword" style="color:rgb(0,0,136);">data</span> world！（windows中运行的）</span></code></pre><ul class="pre-numbering" style="font-size:14px;list-style:none;width:50px;background-color:rgb(238,238,238);border-right:1px solid rgb(221,221,221);text-align:right;"><li style="list-style:none;color:rgb(153,153,153);">1</li></ul><p style="color:rgb(63,63,63);font-family:'microsoft yahei';">
<span style="font-size:12px;">d) 在HDFS中查看flume收集到的日志数据： </span></p>
<p style="color:rgb(63,63,63);font-family:'microsoft yahei';">
<span style="font-size:12px;"><br></span></p>
<p style="color:rgb(63,63,63);font-family:'microsoft yahei';">
<span style="font-size:12px;"><img src="https://img-blog.csdn.net/20170922132252292" alt=""><br></span></p>
<h1 style="color:rgb(63,63,63);font-family:'microsoft yahei';">
<img src="https://img-blog.csdn.net/20170923221133997" alt="" style="font-size:12px;"></h1>
<p style="color:rgb(63,63,63);font-family:'microsoft yahei';">
</p>
<h2><span style="font-size:14px;">案例3、两个flume做集群</span></h2>
<span style="font-size:12px;"><span></span>node01服务器中，配置文件<br><span></span>############################################################<br><span></span># Name the components on this agent<br><span></span>a1.sources = r1<br><span></span>a1.sinks = k1<br><span></span>a1.channels = c1</span>
<p></p>
<p style="color:rgb(63,63,63);font-family:'microsoft yahei';">
<span style="font-size:12px;"><span></span># Describe/configure the source<br><span></span>a1.sources.r1.type = netcat<br><span></span>a1.sources.r1.bind = node1<br><span></span>a1.sources.r1.port = 44444</span></p>
<p style="color:rgb(63,63,63);font-family:'microsoft yahei';">
<span style="font-size:12px;"><span></span># Describe the sink<br><span></span># a1.sinks.k1.type = logger<br><span></span>a1.sinks.k1.type = avro<br><span></span>a1.sinks.k1.hostname = node2<br><span></span>a1.sinks.k1.port = 60000</span></p>
<p style="color:rgb(63,63,63);font-family:'microsoft yahei';">
<span style="font-size:12px;"><span></span># Use a channel which buffers events in memory<br><span></span>a1.channels.c1.type = memory<br><span></span>a1.channels.c1.capacity = 1000<br><span></span>a1.channels.c1.transactionCapacity = 100<br><span></span># Bind the source and sink to the channel<br><span></span>a1.sources.r1.channels = c1<br><span></span>a1.sinks.k1.channel = c1<br><span></span>############################################################<br><span></span>node02服务器中，安装Flume（步骤略）<br><span></span>配置文件<br><span></span>############################################################<br><span></span># Name the components on this agent<br><span></span>a1.sources = r1<br><span></span>a1.sinks = k1<br><span></span>a1.channels = c1<br><span></span># Describe/configure the source<br><span></span>a1.sources.r1.type = avro<br><span></span>a1.sources.r1.bind = node2<br><span></span>a1.sources.r1.port = 60000<br><span></span># Describe the sink<br><span></span>a1.sinks.k1.type = logger<br><span></span># Use a channel which buffers events in memory<br><span></span>a1.channels.c1.type = memory<br><span></span>a1.channels.c1.capacity = 1000<br><span></span>a1.channels.c1.transactionCapacity = 100<br><span></span># Bind the source and sink to the channel<br><span></span>a1.sources.r1.channels = c1<br><span></span>a1.sinks.k1.channel = c1<br><span></span>############################################################</span><br></p>
<span style="font-size:12px;">先启动node02的Flume<br><span></span>flume-ng agent  -n a1 -c conf -f avro.conf -Dflume.root.logger=INFO,console<br><span></span><br><span></span>再启动node01的Flume<br><span></span>flume-ng agent  -n a1 -c conf -f simple.conf2 -Dflume.root.logger=INFO,console<br><span></span><br><span></span>打开telnet 测试  node02控制台输出结果</span></div>
<h2><span style="font-size:14px;">案例4、Exec Source</span></h2>
<div><span style="font-size:12px;"><span></span>http://flume.apache.org/FlumeUserGuide.html#exec-source<br><span></span><br><span></span>配置文件<br><span></span>############################################################<br><span></span>a1.sources = r1<br><span></span>a1.sinks = k1<br><span></span>a1.channels = c1<br><br><span></span># Describe/configure the source<br><span style="color:#ff0000;"><span></span><strong>a1.sources.r1.type = exec<br><span></span>a1.sources.r1.command = tail -F /home/flume.exec.log</strong></span><br><br><span></span># Describe the sink<br><span></span>a1.sinks.k1.type = logger<br><span></span><br><span></span># Use a channel which buffers events in memory<br><span></span>a1.channels.c1.type = memory<br><span></span>a1.channels.c1.capacity = 1000<br><span></span>a1.channels.c1.transactionCapacity = 100<br><br><span></span># Bind the source and sink to the channel<br><span></span>a1.sources.r1.channels = c1<br><span></span>a1.sinks.k1.channel = c1<br><span></span>############################################################<br><span></span>启动Flume<br><span></span>flume-ng agent -n a1 -c conf -f exec.conf -Dflume.root.logger=INFO,console<br><span></span>创建空文件演示 touch flume.exec.log<br><span></span>循环添加数据<br><span></span>for i in {1..50}; do echo "$i hi flume" &gt;&gt; flume.exec.log ; sleep 0.1; done</span></div>
<div>
<h2><span style="font-size:14px;">案例5、Spooling Directory Source</span></h2>
<span style="font-size:12px;"><span></span>http://flume.apache.org/FlumeUserGuide.html#spooling-directory-source</span></div>
<div><span style="font-size:12px;"><strong><span style="color:#ff0000;">       目录中有新的文件产生机会将数据输出到控制台。<br></span></strong><span></span>配置文件<br><span></span>############################################################<br><span></span>a1.sources = r1<br><span></span>a1.sinks = k1<br><span></span>a1.channels = c1<br><span></span># Describe/configure the source</span></div>
<div><span style="font-size:12px;"><br><span></span>a1.sources.r1.type = spooldir<br><span></span>a1.sources.r1.spoolDir = /home/logs<br><span></span>a1.sources.r1.fileHeader = true</span></div>
<div><span style="font-size:12px;"><br><span></span># Describe the sink<br><span></span>a1.sinks.k1.type = logger</span></div>
<div><span style="font-size:12px;"><br><span></span># Use a channel which buffers events in memory<br><span></span>a1.channels.c1.type = memory<br><span></span>a1.channels.c1.capacity = 1000<br><span></span>a1.channels.c1.transactionCapacity = 100<br><br><span></span># Bind the source and sink to the channel<br><span></span>a1.sources.r1.channels = c1<br><span></span>a1.sinks.k1.channel = c1<br><span></span>############################################################<br><span></span>启动Flume<br><span></span>flume-ng agent -n a1 -c conf -f spool.conf -Dflume.root.logger=INFO,console<br><span></span>拷贝文件演示<br><span></span>mkdir logs<br><span></span>cp flume.exec.log logs/</span></div>
<h2><span style="font-size:14px;">案例6、hdfs sink</span></h2>
<div><span></span>http://flume.apache.org/FlumeUserGuide.html#hdfs-sink<br><span></span><br><span></span>配置文件<br><span></span>############################################################<br><span></span>a1.sources = r1<br><span></span>a1.sinks = k1<br><span></span>a1.channels = c1<br><br><span></span># Describe/configure the source<br><span></span>a1.sources.r1.type = <strong><span style="color:#ff0000;">spooldir</span></strong><br><span></span>a1.sources.r1.spoolDir = <span style="color:#ff0000;">
<strong>/home/logs</strong></span><br><span></span>a1.sources.r1.fileHeader = <strong><span style="color:#ff0000;">true</span></strong><br><br><span></span># Describe the sink<br><span></span>***只修改上一个spool sink的配置代码块 a1.sinks.k1.type = logger<br><span></span>a1.sinks.k1.type=hdfs</div>
<div>        #n1为hdfs集群的nameservice<br><span></span>a1.sinks.k1.hdfs.path=<strong><span style="color:#ff0000;">hdfs://n1/flume/%Y-%m-%d/%H%M</span></strong><br><span></span><br><span></span>##每隔60s或者文件大小超过10M的时候产生新文件<br><span></span># hdfs有多少条消息时新建文件，0不基于消息个数<br><span></span>a1.sinks.k1.hdfs.rollCount=0<br><span></span># hdfs创建多长时间新建文件，0不基于时间<br><span></span>a1.sinks.k1.hdfs.rollInterval=60<br><span></span># hdfs多大时新建文件，0不基于文件大小<br><span></span>a1.sinks.k1.hdfs.rollSize=10240<br><span></span># 当目前被打开的临时文件在该参数指定的时间（秒）内，没有任何数据写入，则将该临时文件关闭并重命名成目标文件<br><span></span>a1.sinks.k1.hdfs.idleTimeout=3<br><span></span><br><span></span>a1.sinks.k1.hdfs.fileType=DataStream</div>
<div>       #配置文件中使用了日期格式，设置为true<br><span></span>a1.sinks.k1.hdfs.useLocalTimeStamp=true  <br><span></span><br><span></span>## 每五分钟生成一个目录:<br><span></span># 是否启用时间上的”舍弃”，这里的”舍弃”，类似于”四舍五入”，后面再介绍。如果启用，则会影响除了%t的其他所有时间表达式<br><span></span>a1.sinks.k1.hdfs.round=true<br><span></span># 时间上进行“舍弃”的值；<br><span></span>a1.sinks.k1.hdfs.roundValue=5<br><span></span># 时间上进行”舍弃”的单位，包含：second,minute,hour<br><span></span>a1.sinks.k1.hdfs.roundUnit=minute<br><br><span></span># Use a channel which buffers events in memory<br><span></span>a1.channels.c1.type = memory<br><span></span>a1.channels.c1.capacity = 1000<br><span></span>a1.channels.c1.transactionCapacity = 100<br><br><br><span></span># Bind the source and sink to the channel<br><span></span>a1.sources.r1.channels = c1<br><span></span>a1.sinks.k1.channel = c1<br><span></span>############################################################<br><span></span><span></span><br><span></span>启动Flume<br><span></span>flume-ng agent -n a1  -f <strong><span style="color:#ff0000;">hdfs.conf</span></strong> -Dflume.root.logger=INFO,console<br>
       往/home/logs 目录下书写文件。<br><span></span>查看hdfs文件<br><span></span>hadoop fs -ls /flume/...<br><span></span>hadoop fs -get /flume/...<br></div>
<div><br></div>
            </div>
                </div>