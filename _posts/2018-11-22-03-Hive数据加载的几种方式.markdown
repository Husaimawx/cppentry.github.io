---
layout:     post
title:      03-Hive数据加载的几种方式
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/qq_29622761/article/details/51568596				</div>
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<p>声明：前面两篇文章已经知道了如何创建表 <br>
现在我们来学习Hive数据加载</p>

<ol>
<li>不得不说一个知识点：hive -help、hive –help 、 hive –service -help</li>
</ol>



<pre class="prettyprint"><code class=" hljs haml">[root@hadoop1 host]# hive -help
usage: hive
 -<span class="ruby">d,--define &lt;key=value&gt;          <span class="hljs-constant">Variable</span> subsitution to apply to hive
</span>                                  commands. e.g. -d A=B or --define A=B
 -<span class="ruby">e &lt;quoted-query-string&gt;         <span class="hljs-constant">SQL</span> from command line
</span> -<span class="ruby">f &lt;filename&gt;                    <span class="hljs-constant">SQL</span> from files
</span> -<span class="ruby"><span class="hljs-constant">H</span>,--help                        <span class="hljs-constant">Print</span> help information
</span> -<span class="ruby">h &lt;hostname&gt;                    connecting to <span class="hljs-constant">Hive</span> <span class="hljs-constant">Server</span> on remote host
</span>    -<span class="ruby">-hiveconf &lt;property=value&gt;   <span class="hljs-constant">Use</span> value <span class="hljs-keyword">for</span> given property
</span>    -<span class="ruby">-hivevar &lt;key=value&gt;         <span class="hljs-constant">Variable</span> subsitution to apply to hive
</span>                                  commands. e.g. --hivevar A=B
 -<span class="ruby">i &lt;filename&gt;                    <span class="hljs-constant">Initialization</span> <span class="hljs-constant">SQL</span> file
</span> -<span class="ruby">p &lt;port&gt;                        connecting to <span class="hljs-constant">Hive</span> <span class="hljs-constant">Server</span> on port number
</span> -<span class="ruby"><span class="hljs-constant">S</span>,--silent                      <span class="hljs-constant">Silent</span> mode <span class="hljs-keyword">in</span> interactive shell
</span> -<span class="ruby">v,--verbose                     <span class="hljs-constant">Verbose</span> mode (echo executed <span class="hljs-constant">SQL</span> to the
</span>                                  console)
[root@hadoop1 host]#hive --help
Usage ./hive &lt;parameters&gt; --service serviceName &lt;service parameters&gt;
Service List: cli help hiveserver hwi jar lineage metastore rcfilecat 
Parameters parsed:
  -<span class="ruby">-auxpath <span class="hljs-symbol">:</span> <span class="hljs-constant">Auxillary</span> jars 
</span>  -<span class="ruby">-config <span class="hljs-symbol">:</span> <span class="hljs-constant">Hive</span> configuration directory
</span>  -<span class="ruby">-service <span class="hljs-symbol">:</span> <span class="hljs-constant">Starts</span> specific service/component. cli is default
</span>Parameters used:
  HADOOP_HOME : Hadoop install directory
  HIVE_OPT : Hive options
For help on a particular service:
  ./hive --service serviceName --help
Debug help:  ./hive --debug --help
</code></pre>

<ol>
<li>根据这里的参数，我们可以做以下实验：</li>
</ol>



<pre class="prettyprint"><code class=" hljs sql">[root@hadoop1 host]# hive -e "<span class="hljs-operator"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> testtext<span class="hljs-string">"
警告信息省略
OK
wer 46
wer 89
weree   78
rr  89
Time taken: 5.632 seconds
[root@hadoop1 host]# hive -S -e "</span><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> testtext<span class="hljs-string">"
wer 46
wer 89
weree   78
rr  89</span></span></code></pre>

<p>这样子就可以不用进入hive的命令行模式了。加-S还更简洁。 <br>
3. 还可以玩重定向哦，输出到/usr/host/result</p>



<pre class="prettyprint"><code class=" hljs ruby">[root<span class="hljs-variable">@hadoop1</span> host]<span class="hljs-comment"># hive -e "select * from testtext" &gt; /usr/host/result</span>
<span class="hljs-constant">OK</span>
<span class="hljs-constant">Time</span> <span class="hljs-symbol">taken:</span> <span class="hljs-number">4.144</span> seconds
[root<span class="hljs-variable">@hadoop1</span> host]<span class="hljs-comment"># cat result </span>
wer <span class="hljs-number">46</span>
wer <span class="hljs-number">89</span>
weree   <span class="hljs-number">78</span>
rr  <span class="hljs-number">89</span>
[root<span class="hljs-variable">@hadoop1</span> host]<span class="hljs-comment"># hive -S -e "select * from testtext" &gt;&gt; /usr/host/result</span>
[root<span class="hljs-variable">@hadoop1</span> host]<span class="hljs-comment"># cat result </span>
wer <span class="hljs-number">46</span>
wer <span class="hljs-number">89</span>
weree   <span class="hljs-number">78</span>
rr  <span class="hljs-number">89</span>
wer <span class="hljs-number">46</span>
wer <span class="hljs-number">89</span>
weree   <span class="hljs-number">78</span>
rr  <span class="hljs-number">89</span>
[root<span class="hljs-variable">@hadoop1</span> host]<span class="hljs-comment"># hive -v -e "select * from testtext" &gt; /usr/host/result</span></code></pre>

<p>“&gt;”是覆盖，“&gt;&gt;”是追加 <br>
4.  从文件里面读取sql语句</p>



<pre class="prettyprint"><code class=" hljs ruby">[root<span class="hljs-variable">@hadoop1</span> host]<span class="hljs-comment"># hive -f "/usr/host/select_hql"</span>
<span class="hljs-constant">OK</span>
wer <span class="hljs-number">46</span>
wer <span class="hljs-number">89</span>
weree   <span class="hljs-number">78</span>
rr  <span class="hljs-number">89</span>
<span class="hljs-constant">Time</span> <span class="hljs-symbol">taken:</span> <span class="hljs-number">4.339</span> seconds
[root<span class="hljs-variable">@hadoop1</span> host]<span class="hljs-comment"># </span></code></pre>

<p>注意：select_hql里面的内容是 <br>
<code>[root@hadoop1 host]# cat select_hql  <br>
select * from testtext</code> <br>
select * from testtext 不走mapreduce程序的。当查询某一个字段的时候，走的就是mapreduce程序了</p>



<pre class="prettyprint"><code class=" hljs ruby">[root<span class="hljs-variable">@hadoop1</span> host]<span class="hljs-comment"># hive -v -e "select name from testtext" &gt; /usr/host/result</span></code></pre>

<ol>
<li>还可以写shell脚本来执行，会写shell脚本会达到事半功倍。这里简单实验一下。</li>
</ol>



<pre class="prettyprint"><code class=" hljs bash">[root@hadoop1 host]<span class="hljs-comment"># vi test.sh</span>
<span class="hljs-shebang">#!/bin/bash</span>
hive <span class="hljs-operator">-e</span> <span class="hljs-string">"select * from testtext"</span>
保存退出
[root@hadoop1 host]<span class="hljs-comment"># sh test.sh</span>
OK
wer <span class="hljs-number">46</span>
wer <span class="hljs-number">89</span>
weree   <span class="hljs-number">78</span>
rr  <span class="hljs-number">89</span>
Time taken: <span class="hljs-number">4.61</span> seconds</code></pre>

<ol>
<li>hive操作-变量</li>
</ol>



<pre class="prettyprint"><code class=" hljs applescript">hive&gt; <span class="hljs-keyword">set</span> val=wer;
hive&gt; <span class="hljs-keyword">set</span> val;
val=wer
hive&gt; select * <span class="hljs-keyword">from</span> testtext <span class="hljs-keyword">where</span> <span class="hljs-property">name</span>='${hiveconf:val}';
Total MapReduce jobs = <span class="hljs-number">1</span>
Launching Job <span class="hljs-number">1</span> <span class="hljs-keyword">out of</span> <span class="hljs-number">1</span>
Number <span class="hljs-keyword">of</span> reduce tasks <span class="hljs-keyword">is</span> <span class="hljs-keyword">set</span> <span class="hljs-keyword">to</span> <span class="hljs-number">0</span> <span class="hljs-keyword">since</span> there's no reduce operator
Job <span class="hljs-property">running</span> <span class="hljs-keyword">in</span>-process (<span class="hljs-keyword">local</span> Hadoop)
Hadoop job information <span class="hljs-keyword">for</span> null: <span class="hljs-type">number</span> <span class="hljs-keyword">of</span> mappers: <span class="hljs-number">1</span>; <span class="hljs-type">number</span> <span class="hljs-keyword">of</span> reducers: <span class="hljs-number">0</span>
<span class="hljs-number">2016</span>-<span class="hljs-number">06</span>-<span class="hljs-number">01</span> <span class="hljs-number">22</span>:<span class="hljs-number">53</span>:<span class="hljs-number">19</span>,<span class="hljs-number">449</span> null map = <span class="hljs-number">0</span>%,  reduce = <span class="hljs-number">0</span>%
<span class="hljs-number">2016</span>-<span class="hljs-number">06</span>-<span class="hljs-number">01</span> <span class="hljs-number">22</span>:<span class="hljs-number">53</span>:<span class="hljs-number">30</span>,<span class="hljs-number">510</span> null map = <span class="hljs-number">100</span>%,  reduce = <span class="hljs-number">0</span>%, Cumulative CPU <span class="hljs-number">0.79</span> sec
<span class="hljs-number">2016</span>-<span class="hljs-number">06</span>-<span class="hljs-number">01</span> <span class="hljs-number">22</span>:<span class="hljs-number">53</span>:<span class="hljs-number">31</span>,<span class="hljs-number">650</span> null map = <span class="hljs-number">100</span>%,  reduce = <span class="hljs-number">0</span>%, Cumulative CPU <span class="hljs-number">0.79</span> sec
MapReduce Total cumulative CPU <span class="hljs-property">time</span>: <span class="hljs-number">790</span> msec
Ended Job = job_1464828076391_0009
Execution completed successfully
Mapred Local Task Succeeded . Convert <span class="hljs-keyword">the</span> Join <span class="hljs-keyword">into</span> MapJoin
OK
wer <span class="hljs-number">46</span>
wer <span class="hljs-number">89</span>
Time taken: <span class="hljs-number">32.377</span> seconds
hive&gt; select '${env:HOME}' <span class="hljs-keyword">from</span> testtext;
Total MapReduce jobs = <span class="hljs-number">1</span>
Launching Job <span class="hljs-number">1</span> <span class="hljs-keyword">out of</span> <span class="hljs-number">1</span>
Number <span class="hljs-keyword">of</span> reduce tasks <span class="hljs-keyword">is</span> <span class="hljs-keyword">set</span> <span class="hljs-keyword">to</span> <span class="hljs-number">0</span> <span class="hljs-keyword">since</span> there's no reduce operator
Job <span class="hljs-property">running</span> <span class="hljs-keyword">in</span>-process (<span class="hljs-keyword">local</span> Hadoop)
Hadoop job information <span class="hljs-keyword">for</span> null: <span class="hljs-type">number</span> <span class="hljs-keyword">of</span> mappers: <span class="hljs-number">1</span>; <span class="hljs-type">number</span> <span class="hljs-keyword">of</span> reducers: <span class="hljs-number">0</span>
<span class="hljs-number">2016</span>-<span class="hljs-number">06</span>-<span class="hljs-number">01</span> <span class="hljs-number">22</span>:<span class="hljs-number">54</span>:<span class="hljs-number">02</span>,<span class="hljs-number">115</span> null map = <span class="hljs-number">0</span>%,  reduce = <span class="hljs-number">0</span>%
<span class="hljs-number">2016</span>-<span class="hljs-number">06</span>-<span class="hljs-number">01</span> <span class="hljs-number">22</span>:<span class="hljs-number">54</span>:<span class="hljs-number">12</span>,<span class="hljs-number">483</span> null map = <span class="hljs-number">100</span>%,  reduce = <span class="hljs-number">0</span>%, Cumulative CPU <span class="hljs-number">0.94</span> sec
<span class="hljs-number">2016</span>-<span class="hljs-number">06</span>-<span class="hljs-number">01</span> <span class="hljs-number">22</span>:<span class="hljs-number">54</span>:<span class="hljs-number">13</span>,<span class="hljs-number">610</span> null map = <span class="hljs-number">100</span>%,  reduce = <span class="hljs-number">0</span>%, Cumulative CPU <span class="hljs-number">0.94</span> sec
MapReduce Total cumulative CPU <span class="hljs-property">time</span>: <span class="hljs-number">940</span> msec
Ended Job = job_1464828076391_0010
Execution completed successfully
Mapred Local Task Succeeded . Convert <span class="hljs-keyword">the</span> Join <span class="hljs-keyword">into</span> MapJoin
OK
/root
/root
/root
/root
Time taken: <span class="hljs-number">32.083</span> seconds
hive&gt; </code></pre>

<ol>
<li>接下里，终于到数据加载了哦 <br>
创建表的时候加载 <br>
格式：<code>create table newtable as select col1,col2 from oldtable</code> <br>
创建表时指定数据位置<code>create table tablename() location ''</code> <br>
本地加载数据<code>load data local inpath 'localpath' [overwrite] into table tablename</code> <br>
加载hdfs数据<code>load data inpath 'hdfspath'[overwrite] into table tablename</code></li>
</ol>

<p>我们来实战一下哈 <br>
创建表时加载：</p>



<pre class="prettyprint"><code class=" hljs vhdl">hive&gt; create table testselect as <span class="hljs-keyword">select</span> name,addr from testtext;
Total MapReduce jobs = <span class="hljs-number">1</span>
Launching Job <span class="hljs-number">1</span> <span class="hljs-keyword">out</span> <span class="hljs-keyword">of</span> <span class="hljs-number">1</span>
Number <span class="hljs-keyword">of</span> reduce tasks <span class="hljs-keyword">is</span> set <span class="hljs-keyword">to</span> <span class="hljs-number">0</span> since there<span class="hljs-attribute">'s</span> no reduce operator
Job running <span class="hljs-keyword">in</span>-<span class="hljs-keyword">process</span> (local Hadoop)
Hadoop job information <span class="hljs-keyword">for</span> <span class="hljs-keyword">null</span>: number <span class="hljs-keyword">of</span> mappers: <span class="hljs-number">1</span>; number <span class="hljs-keyword">of</span> reducers: <span class="hljs-number">0</span>
<span class="hljs-number">2016</span>-<span class="hljs-number">06</span>-<span class="hljs-number">01</span> <span class="hljs-number">23</span>:<span class="hljs-number">10</span>:<span class="hljs-number">43</span>,<span class="hljs-number">147</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">map</span> = <span class="hljs-number">0</span>%,  reduce = <span class="hljs-number">0</span>%
<span class="hljs-number">2016</span>-<span class="hljs-number">06</span>-<span class="hljs-number">01</span> <span class="hljs-number">23</span>:<span class="hljs-number">10</span>:<span class="hljs-number">54</span>,<span class="hljs-number">583</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">map</span> = <span class="hljs-number">100</span>%,  reduce = <span class="hljs-number">0</span>%, Cumulative CPU <span class="hljs-number">1.55</span> sec
<span class="hljs-number">2016</span>-<span class="hljs-number">06</span>-<span class="hljs-number">01</span> <span class="hljs-number">23</span>:<span class="hljs-number">10</span>:<span class="hljs-number">55</span>,<span class="hljs-number">654</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">map</span> = <span class="hljs-number">100</span>%,  reduce = <span class="hljs-number">0</span>%, Cumulative CPU <span class="hljs-number">1.55</span> sec
MapReduce Total cumulative CPU <span class="hljs-typename">time</span>: <span class="hljs-number">1</span> seconds <span class="hljs-number">550</span> msec
Ended Job = job_1464828076391_0011
Execution completed successfully
Mapred Local Task Succeeded . Convert the Join into MapJoin
Moving data <span class="hljs-keyword">to</span>: hdfs://hadoop1:<span class="hljs-number">9000</span>/user/hive/warehouse/testselect
Table <span class="hljs-keyword">default</span>.testselect stats: [num_partitions: <span class="hljs-number">0</span>, num_files: <span class="hljs-number">1</span>, num_rows: <span class="hljs-number">0</span>, total_size: <span class="hljs-number">29</span>, raw_data_size: <span class="hljs-number">0</span>]
OK
<span class="hljs-typename">Time</span> taken: <span class="hljs-number">35.219</span> seconds
hive&gt; <span class="hljs-keyword">select</span> * from testselect;            
OK
wer <span class="hljs-number">46</span>
wer <span class="hljs-number">89</span>
weree   <span class="hljs-number">78</span>
rr  <span class="hljs-number">89</span>
<span class="hljs-typename">Time</span> taken: <span class="hljs-number">0.589</span> seconds
hive&gt; </code></pre>

<p>还可以创建表时指定数据位置：</p>



<pre class="prettyprint"><code class=" hljs vbnet">[root@hadoop1 host]<span class="hljs-preprocessor"># cat data</span>
test    table
test    table1
[root@hadoop1 host]<span class="hljs-preprocessor"># hadoop fs -put data /data</span>
hive&gt; create table test_m(
    &gt; name <span class="hljs-built_in">string</span>,
    &gt; val <span class="hljs-built_in">string</span>
    &gt; )
    &gt; row format delimited fields terminated <span class="hljs-keyword">by</span> <span class="hljs-comment">'\t' </span>
    &gt; lines terminated <span class="hljs-keyword">by</span> <span class="hljs-comment">'\n'</span>
    &gt; stored <span class="hljs-keyword">as</span> textfile
    &gt; location <span class="hljs-comment">'/data/data';</span>
OK
Time taken: <span class="hljs-number">0.052</span> seconds
hive&gt; 
    &gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> test_m;
OK
Time taken: <span class="hljs-number">0.312</span> seconds
hive&gt; </code></pre>

<p>发现数据为空对不对？砸门只是指定了位置呀，还需要加载。</p>



<pre class="prettyprint"><code class=" hljs haskell"><span class="hljs-title">hive</span>&gt; load <span class="hljs-typedef"><span class="hljs-keyword">data</span> local inpath '/usr/host/<span class="hljs-keyword">data</span>' into table test_m;</span>
<span class="hljs-type">Copying</span> <span class="hljs-typedef"><span class="hljs-keyword">data</span> from file:/usr/host/<span class="hljs-keyword">data</span></span>
<span class="hljs-type">Copying</span> file: file:/usr/host/<span class="hljs-typedef"><span class="hljs-keyword">data</span></span>
<span class="hljs-type">Loading</span> <span class="hljs-typedef"><span class="hljs-keyword">data</span> to table default.test_m</span>
<span class="hljs-type">OK</span>
<span class="hljs-type">Time</span> taken: <span class="hljs-number">0.566</span> seconds
<span class="hljs-title">hive</span>&gt; select * from test_m;
<span class="hljs-type">OK</span>
<span class="hljs-title">test</span>    table
<span class="hljs-title">test</span>    table1
<span class="hljs-type">Time</span> taken: <span class="hljs-number">0.347</span> seconds
<span class="hljs-title">hive</span>&gt; </code></pre>

<p>当然咯，除了加载本地数据，我可以加载hdfs上的数据！加，大胆滴加载！</p>



<pre class="prettyprint"><code class=" hljs lua">hive&gt; <span class="hljs-built_in">load</span> data inpath <span class="hljs-string">'/data/data'</span> into <span class="hljs-built_in">table</span> test_m; 
Loading data to <span class="hljs-built_in">table</span> default.test_m
这种方式其实是移动数据。
hive&gt; <span class="hljs-built_in">select</span> * from test_m;
OK
test    <span class="hljs-built_in">table</span>
test    table1
Time taken: <span class="hljs-number">0.168</span> seconds
hive&gt; </code></pre>

<p><img src="https://img-blog.csdn.net/20160602142523530" alt="这里写图片描述" title=""> <br>
看，data变成了data_copy_1 <br>
8. 使用hadoop命令拷贝数据到指定位置（hive的shell中执行和linux的shell执行）</p>



<pre class="prettyprint"><code class=" hljs asciidoc">[root@hadoop1 logs]# hadoop fs -copyFromLocal /usr/host/data /data/
copyFromLocal: <span class="hljs-smartquote">`/data/data'</span>: File exists</code></pre>

<p>这样的你应该知道吧？嘿嘿，砸门来玩点大的：</p>



<pre class="prettyprint"><code class=" hljs lasso">hive<span class="hljs-subst">&gt;</span> dfs <span class="hljs-attribute">-copyFromLocal</span> /usr/host/stu /<span class="hljs-built_in">data</span>;  
hive<span class="hljs-subst">&gt;</span> dfs <span class="hljs-attribute">-ls</span> /<span class="hljs-built_in">data</span>;
Found <span class="hljs-number">3</span> items
drwxr<span class="hljs-attribute">-xr</span><span class="hljs-attribute">-x</span>   <span class="hljs-subst">-</span> root supergroup          <span class="hljs-number">0</span> <span class="hljs-number">2016</span><span class="hljs-subst">-</span><span class="hljs-number">06</span><span class="hljs-subst">-</span><span class="hljs-number">01</span> <span class="hljs-number">23</span>:<span class="hljs-number">21</span> /<span class="hljs-built_in">data</span>/<span class="hljs-built_in">data</span>
<span class="hljs-attribute">-rw</span><span class="hljs-attribute">-r</span><span class="hljs-subst">--</span>r<span class="hljs-subst">--</span>   <span class="hljs-number">1</span> root supergroup         <span class="hljs-number">44</span> <span class="hljs-number">2016</span><span class="hljs-subst">-</span><span class="hljs-number">06</span><span class="hljs-subst">-</span><span class="hljs-number">02</span> <span class="hljs-number">01</span>:<span class="hljs-number">28</span> /<span class="hljs-built_in">data</span>/stu
<span class="hljs-attribute">-rw</span><span class="hljs-attribute">-r</span><span class="hljs-subst">--</span>r<span class="hljs-subst">--</span>   <span class="hljs-number">1</span> root supergroup        <span class="hljs-number">132</span> <span class="hljs-number">2016</span><span class="hljs-subst">-</span><span class="hljs-number">06</span><span class="hljs-subst">-</span><span class="hljs-number">01</span> <span class="hljs-number">23</span>:<span class="hljs-number">15</span> /<span class="hljs-built_in">data</span>/xielaoshi
hive<span class="hljs-subst">&gt;</span> </code></pre>

<p>这样子也是可以的。也就是可以在hive命令下执行hadoop的操作。哈哈，6不6？666。 <br>
也可以在hive下执行linux的命令（必须要加感叹号！）</p>



<pre class="prettyprint"><code class=" hljs avrasm">hive&gt; ! ls /usr/host/hive<span class="hljs-comment">;</span>
bin
conf
docs
examples
iotmp
lib
LICENSE
NOTICE
README<span class="hljs-preprocessor">.txt</span>
RELEASE_NOTES<span class="hljs-preprocessor">.txt</span>
scripts
src
hive&gt; </code></pre>

<p>9 由查询语句加载数据</p>



<pre class="prettyprint"><code class=" hljs cs">hive&gt; insert overwrite table test_m 
    &gt; <span class="hljs-keyword">select</span> name,addr
    &gt; <span class="hljs-keyword">from</span> testtext
    &gt; <span class="hljs-keyword">where</span> name=<span class="hljs-string">'wer'</span>;
hive&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> test_m;
OK
wer <span class="hljs-number">46</span>
wer <span class="hljs-number">89</span>
Time taken: <span class="hljs-number">0.792</span> seconds</code></pre>

<p>以下的也是可以的：</p>



<pre class="prettyprint"><code class=" hljs cs">hive&gt; <span class="hljs-keyword">from</span> testtext
    &gt; insert overwrite table test_m 
    &gt; <span class="hljs-keyword">select</span> name,addr
    &gt; <span class="hljs-keyword">where</span> name=<span class="hljs-string">'wer'</span>;</code></pre>

<p>以下的也是可以的：</p>



<pre class="prettyprint"><code class=" hljs applescript">hive&gt; select <span class="hljs-property">name</span>,addr
    &gt; <span class="hljs-keyword">from</span> testtext
    &gt; <span class="hljs-keyword">where</span> <span class="hljs-property">name</span>='wer'
    &gt; insert overwrite table test_m; 
hive&gt; desc test_m;
OK
<span class="hljs-property">name</span>    <span class="hljs-type">string</span>  
val <span class="hljs-type">string</span>  
Time taken: <span class="hljs-number">0.613</span> seconds
hive&gt; </code></pre>

<p>hive在加载数据的时候不在意这些，不做检查 <br>
10. 外表数据加载 <br>
创建表时指定数据位置。格式代码<code>create external table tablename() location ''</code> <br>
 查询插入，同内表一样。</p>



<pre class="prettyprint"><code class=" hljs vbnet">hive&gt; create external table test_e(
    &gt; name <span class="hljs-built_in">string</span>,
    &gt; val <span class="hljs-built_in">string</span>
    &gt; )
    &gt; row format delimited fields terminated <span class="hljs-keyword">by</span> <span class="hljs-comment">'\t' </span>
    &gt; lines terminated <span class="hljs-keyword">by</span> <span class="hljs-comment">'\n'</span>
    &gt; stored <span class="hljs-keyword">as</span> textfile
    &gt; location <span class="hljs-comment">'/data/data';</span>
OK
Time taken: <span class="hljs-number">0.321</span> seconds
hive&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> test_e;
OK
wer <span class="hljs-number">46</span>
wer <span class="hljs-number">89</span>
Time taken: <span class="hljs-number">0.24</span> seconds
hive&gt; </code></pre>

<p>11 hive分区表数据加载 <br>
分区表数据加载 <br>
内部分区表和外部分区表数据加载 <br>
内部分区表数据加载类似于内表 <br>
外部分区表加载类似于外表 <br>
注意：数据存放的路径要和表的分区一致； <br>
如果分区表没有新增分区，即使目标路径下已经有数据了，但依然查不到数据 <br>
不同之处：加载数据指定目标表的同时，需要指定分区</p>

<p>本地加载数据</p>



<pre class="prettyprint"><code class=" hljs vbnet">hive&gt; create table test_p(
    &gt; name <span class="hljs-built_in">string</span>,
    &gt; val <span class="hljs-built_in">string</span>
    &gt; )
    &gt; partitioned <span class="hljs-keyword">by</span> (dt <span class="hljs-built_in">string</span>)
    &gt; row format delimited fields terminated <span class="hljs-keyword">by</span> <span class="hljs-comment">'\t' </span>
    &gt; lines terminated <span class="hljs-keyword">by</span> <span class="hljs-comment">'\n'</span>
    &gt; stored <span class="hljs-keyword">as</span> textfile;
OK
Time taken: <span class="hljs-number">0.118</span> seconds
hive&gt; </code></pre>

<p>加载数据：</p>



<pre class="prettyprint"><code class=" hljs haskell"><span class="hljs-title">hive</span>&gt; load <span class="hljs-typedef"><span class="hljs-keyword">data</span> local inpath '/usr/host/<span class="hljs-keyword">data</span>' into table test_p partition<span class="hljs-container">(<span class="hljs-title">dt</span>='20160518')</span>;</span>
<span class="hljs-type">Copying</span> <span class="hljs-typedef"><span class="hljs-keyword">data</span> from file:/usr/host/<span class="hljs-keyword">data</span></span>
<span class="hljs-type">Copying</span> file: file:/usr/host/<span class="hljs-typedef"><span class="hljs-keyword">data</span></span>
<span class="hljs-type">Loading</span> <span class="hljs-typedef"><span class="hljs-keyword">data</span> to table default.test_p partition <span class="hljs-container">(<span class="hljs-title">dt</span>=20160518)</span></span>
<span class="hljs-type">OK</span>
<span class="hljs-type">Time</span> taken: <span class="hljs-number">1.351</span> seconds
<span class="hljs-title">hive</span>&gt; show partitions test_p;
<span class="hljs-type">OK</span>
<span class="hljs-title">dt</span>=<span class="hljs-number">20160518</span>
<span class="hljs-type">Time</span> taken: <span class="hljs-number">0.668</span> seconds
<span class="hljs-title">hive</span>&gt; </code></pre>

<ol>
<li>创建外部分区表 <br>
先把数据传到hdfs上的external目录下</li>
</ol>



<pre class="prettyprint"><code class=" hljs ruby">[root<span class="hljs-variable">@hadoop1</span> host]<span class="hljs-comment"># hadoop fs -put data /external</span></code></pre>

<p>创建表test_ep</p>



<pre class="prettyprint"><code class=" hljs vbnet">hive&gt; create external table test_ep(
    &gt; name <span class="hljs-built_in">string</span>,
    &gt; val <span class="hljs-built_in">string</span>
    &gt; )
    &gt; partitioned <span class="hljs-keyword">by</span>(dt <span class="hljs-built_in">string</span>)
    &gt; row format delimited fields terminated <span class="hljs-keyword">by</span> <span class="hljs-comment">'\t' </span>
    &gt; lines terminated <span class="hljs-keyword">by</span> <span class="hljs-comment">'\n'</span>
    &gt; stored <span class="hljs-keyword">as</span> textfile
    &gt; location <span class="hljs-comment">'/external';     </span>
OK
Time taken: <span class="hljs-number">0.198</span> seconds
hive&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> test_ep;
OK
Time taken: <span class="hljs-number">0.069</span> seconds
hive&gt; </code></pre>

<p>木有数据是不是？当然咯，只是指定位置，还没加载数据呢！</p>



<pre class="prettyprint"><code class=" hljs mel">[root<span class="hljs-variable">@hadoop1</span> host]# hdfs dfs -put /usr/host/data /external/dt=<span class="hljs-number">20160518</span>
[root<span class="hljs-variable">@hadoop1</span> host]# alter table test_ep add <span class="hljs-keyword">partition</span>(dt=<span class="hljs-string">'20160518'</span> );

hive&gt; alter table test_ep add <span class="hljs-keyword">partition</span>(dt=<span class="hljs-string">'20160518'</span> );
OK
Time taken: <span class="hljs-number">0.411</span> seconds
hive&gt; show partitions test_ep;
OK
dt=<span class="hljs-number">20160518</span>
Time taken: <span class="hljs-number">0.177</span> seconds
hive&gt; </code></pre>

<p>总结一下，这样操作的逻辑是啥？其实就是先指定位置，然后把数据传到hdfs上，在指定分区。</p>

<p>13由查询语句加载数据 <br>
hive数据加载注意问题 <br>
分隔符问题，且分隔符默认只有单个字符（两个分隔符的话就会出错） <br>
数据类型对应问题 <br>
    load数据，字段类型不能互相转化时，查询返回NULL <br>
    select查询字段插入，字段类型不能互相转化时，插入数据为NULL <br>
select查询插入数据，字段值顺序要与表中字段顺序一致，名称可不一致 <br>
hive在数据加载时不做检查，查询时检查 <br>
外部分区表需要添加分区才能看到数据</p>

<p>在hive中\n 与null是一样的 <br>
控制台上是null，底层是\n</p>

<p>查询语句加载数据上面已经操作过了。 <br>
有点累了，休息一下。如果你看到此文，想进一步学习或者和我沟通，加我微信公众号：名字：五十年后 </p>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>