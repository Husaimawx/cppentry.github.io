---
layout:     post
title:      Kafka 0.10.0.+zookeeper3.4.8集群搭建、配置，新Client API介绍
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<p><span><a href="http://www.confluent.io/blog/introducing-kafka-streams-stream-processing-made-simple" rel="nofollow">Kafka 0.10.0版本对加入了 </a></span>
<span><a href="http://www.confluent.io/blog/introducing-kafka-streams-stream-processing-made-simple" rel="nofollow">Kafka Streams<span style="color:#15202b;"> 流处理系统，<span>本文主要总结了Kafka 0.10在集群搭建、高可用性、新API方面的相关过程和细节</span></span></a></span></p>
<p><span><a href="http://www.confluent.io/blog/introducing-kafka-streams-stream-processing-made-simple" rel="nofollow"><span style="color:#15202b;"><span><span>Kafka 0.10集群安装配置</span><br></span></span></a></span></p>
<p><span><a href="http://www.confluent.io/blog/introducing-kafka-streams-stream-processing-made-simple" rel="nofollow"><span style="color:#15202b;"><span>1，安装java环境</span></span></a></span></p>
<p><span><a href="http://www.confluent.io/blog/introducing-kafka-streams-stream-processing-made-simple" rel="nofollow"><span style="color:#15202b;"><span></span></span></a></span></p>
<p>Zookeeper和Kafka的运行都需要Java环境，所以先安装JRE，Kafka默认使用G1垃圾回收器，如果不更改垃圾回收器，官方推荐使用 7u51以上版本的JRE。如果你使用老版本的JRE，需要更改Kafka的启动脚本，指定G1以外的垃圾回收器。</p>
<p>    Java环境的安装过程在此不赘述了。</p>
<p><br></p>
<p>2，<strong><span> </span>Zookeeper集群搭建</strong></p>
<p></p>
<p>Kafka依赖Zookeeper管理自身集群（Broker、Offset、Producer、Consumer等），所以先要安装 Zookeeper。自然，为了达到高可用的目的，Zookeeper自身也不能是单点，接下来就介绍如何搭建一个最小的Zookeeper集群（3个 zk节点）</p>
<p>    此处选用Zookeeper的版本是3.4.8</p>
<p></p>
<div>zk集群部署网上很多资料，和以前版本没有区别；<br><br>
3，<strong><span> </span>Kafka集群搭建</strong><br><p>此例中，我们会安装配置一个有两个Broker组成的Kafka集群，并在其上创建一个两个分区的Topic</p>
<p>    本例中使用Kafka最新版本0.10.0.0</p>
<p><br></p>
<p></p>
<p>首先解压</p>
<div class="dp-highlighter">
<div class="bar">
<div class="tools" style="text-align:left;color:#000000;font-weight:bold;">
Shell代码<span> </span> <a title="收藏这段代码" style="color:rgb(16,138,198);text-decoration:underline;"><img class="star" src="http://kelgon.iteye.com/images/icon_star.png" alt="收藏代码" style="border:0px;"></a></div>
</div>
<ol start="1" class="dp-default" style="font-size:1em;line-height:1.4em;border:1px solid rgb(209,215,220);list-style:decimal;color:rgb(43,145,175);background-color:rgb(255,255,255);"><li style="font-size:1em;border-left-width:1px;border-left-style:solid;border-left-color:rgb(209,215,220);line-height:18px;background-color:rgb(250,250,250);">
<span style="color:#000000;"><span style="color:#000000;">tar -xzvf </span>kafka_2.11-0.10.0.0.tgz<span style="color:#000000;"> </span></span></li></ol></div>
<p>    编辑config/server.properties文件，下面列出关键的参数（<span style="font-size:18px;"><strong>其他参数默认即可</strong></span>）</p>
<p>#kafka集群中id为0的broker<br></p>
<p>broker.id=0</p>
<p>#这里和0.9版本有区别，很不幸踩了个坑，每个broker的host_name一定要加上；<br></p>
<p>listeners=PLAINTEXT://192.168.80.100:9092</p>
<p>#kafka的topic以及数据文件存放位置<br></p>
<p>log.dirs=/home/mqtest/kafka_2.11-0.10.0.0/kafka-logs</p>
<p>#kafka连接的zk集群地址，这里我们创建一个path用以区分不同的版本<br></p>
<p>zookeeper.connect=192.168.80.100:2181,192.168.80.101:2181,192.168.80.102:2181/kafka_0.10</p>
<p><br></p>
<p><span>配置项的详细说明请见官方文档：http://kafka.apache.org/documentation.html#brokerconfigs</span></p>
<p><br></p>
<p></p>
<p><span> </span>接下来，我们在另一台主机也完成Kafka的安装和配置，然后在两台主机上分别启动Kafka：</p>
<div class="dp-highlighter">
<div class="bar">
<div class="tools" style="text-align:left;color:#000000;font-weight:bold;">
Shell代码<span> </span> <a title="收藏这段代码" style="color:rgb(16,138,198);text-decoration:underline;"><img class="star" src="http://kelgon.iteye.com/images/icon_star.png" alt="收藏代码" style="border:0px;"></a></div>
</div>
<ol start="1" class="dp-default" style="font-size:1em;line-height:1.4em;border:1px solid rgb(209,215,220);list-style:decimal;color:rgb(43,145,175);background-color:rgb(255,255,255);"><li style="font-size:1em;border-left-width:1px;border-left-style:solid;border-left-color:rgb(209,215,220);line-height:18px;background-color:rgb(250,250,250);">
<span style="color:#000000;"><span style="color:#000000;">bin/kafka-server-start.sh -daemon config/server.properties &amp;</span></span></li></ol></div>
</div>
<p></p>
<p><br></p>
<p></p>
<pre></pre><p style="background-color:inherit;">创建一个名为test，拥有两个分区，两个副本的Topic：</p><p style="background-color:inherit;"></p><div class="dp-highlighter"><div class="bar"><div class="tools" style="text-align:left;color:#000000;font-weight:bold;">Shell代码<span> </span> <a title="收藏这段代码" style="color:rgb(16,138,198);text-decoration:underline;"><img class="star" src="http://kelgon.iteye.com/images/icon_star.png" alt="收藏代码" style="border:0px;"></a></div></div><ol start="1" class="dp-default" style="font-size:1em;line-height:1.4em;border:1px solid rgb(209,215,220);list-style:decimal;color:rgb(43,145,175);background-color:rgb(255,255,255);"><li style="font-size:1em;border-left-width:1px;border-left-style:solid;border-left-color:rgb(209,215,220);line-height:18px;background-color:rgb(250,250,250);"><span style="color:#000000;"><span style="color:#000000;"></span></span><pre><span style="color:#000000;"><span style="color:#000000;"></span></span></pre><pre></pre><pre style="font-family:Monaco, Consolas, Courier, 'Lucida Console', monospace;font-style:normal;background-color:inherit;"><span style="font-size:12px;">bin/kafka-topics.sh --create --zookeeper <span style="background-color:inherit;line-height:1.5;">192.168.80.100:2181,192.168.80.101:2181,192.168.80.102:2181/kafka_0.10</span><span style="background-color:inherit;line-height:1.5;"> 
--replication-factor 2 --partitions 2 --topic CRM</span></span></pre><span style="color:#000000;"></span></li></ol></div><p></p><p> </p><br><p>    创建完成后，使用如下命令查看Topic状态：</p><div class="dp-highlighter"><div class="bar"><div class="tools" style="text-align:left;color:#000000;font-weight:bold;">Java代码<span> </span> <a title="收藏这段代码" style="color:rgb(16,138,198);text-decoration:underline;"><img class="star" src="http://kelgon.iteye.com/images/icon_star.png" alt="收藏代码" style="border:0px;"></a></div></div><ol start="1" class="dp-j" style="font-size:1em;line-height:1.4em;border:1px solid rgb(209,215,220);list-style:decimal;color:rgb(43,145,175);background-color:rgb(255,255,255);"><li style="font-size:1em;border-left-width:1px;border-left-style:solid;border-left-color:rgb(209,215,220);line-height:18px;background-color:rgb(250,250,250);"><span style="color:#000000;"><span style="color:#000000;">bin/kafka-topics.sh --describe --zookeeper </span><span class="number"></span></span><span style="color:#000000;"></span><pre></pre><pre></pre><pre style="font-family:Monaco, Consolas, Courier, 'Lucida Console', monospace;font-style:normal;background-color:inherit;"><span style="font-size:12px;"><span style="background-color:inherit;line-height:1.5;">192.168.80.100:2181,192.168.80.101:2181,192.168.80.102:2181/kafka_0.10</span></span></pre><span style="color:#000000;"><span style="color:#000000;">  --topic CRM<br></span></span></li></ol></div><p> 输出：</p><p>Topic:CRM    PartitionCount:2    ReplicationFactor:2    Configs:<br>    Topic: CRM    Partition: 0    Leader: 1    Replicas: 1,0    Isr: 0,1<br>    Topic: CRM    Partition: 1    Leader: 0    Replicas: 0,1    Isr: 0,1</p><p><br></p><p><span>    解读：CRM这个topic，当前有2个分区，分别为0和1，分区0的Leader是1（这个1是broker.id），分区0有两个 Replica（副本），分别是1和0，这两个副本中，Isr（In-sync）的是0和1。分区2的Leader是0，也有两个Replica，同样也 是两个replica都是in-sync状态</span></p><p><br></p><p><span><span>至此，Kafka 0.10集群的搭建工作就完成了，下面我们将介绍新的Java API的使用，以及集群高可用性的验证测试。</span></span></p><p><span><span>（未完待续，下班了。。）</span></span><br></p>
<p></p>
<pre style="font-family:Monaco, Consolas, Courier, 'Lucida Console', monospace;font-style:normal;background-color:inherit;"><span style="background-color:inherit;line-height:1.5;">


</span></pre>
<br><p><br></p>
<p><br></p>
<br><p><br></p>
<p><br></p>
<p><br></p>
<p><br></p>
<br><br><br><br>            </div>
                </div>