---
layout:     post
title:      HBase相关API操练
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/weixin_37855495/article/details/73087203				</div>
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<div class="c_title_box" style="font-family:'微软雅黑', 'Microsoft YaHei';color:rgb(51,51,51);font-size:14px;background-color:rgb(241,241,241);">
<h3 class="page_title" style="font-weight:normal;line-height:1.1;color:inherit;font-size:24px;">
<span id="title">HBase相关API操练</span></h3>
<span class="clear_fix" style="clear:both;"></span>
<hr style="border-right:0px rgb(229,229,231);border-bottom:0px rgb(229,229,231);border-left:0px rgb(229,229,231);border-top-color:rgb(229,229,231);border-top-style:solid;"></div>
<div id="plus_content" style="font-family:'微软雅黑', 'Microsoft YaHei';color:rgb(51,51,51);font-size:14px;background-color:rgb(241,241,241);">
</div>
<div class="course_content editor" id="course_content" style="font-family:'微软雅黑', 'Microsoft YaHei';color:rgb(51,51,51);font-size:14px;background-color:rgb(241,241,241);">
<div class="item" id="item1">
<div class="row">
<h3 class="jquery-notebook editor" style="font-weight:normal;line-height:1.1;color:inherit;font-size:24px;min-height:0px;">
HBase 的 Shell 操作</h3>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        HBase 为用户提供了一个非常方便的使用方式, 我们称之为“HBase Shell”。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        HBase Shell 提供了大多数的 HBase 命令, 通过 HBase Shell 用户可以方便地创建、删除及修改表, 还可以向表中添加数据、列出表中的相关信息等。</p>
<div class="alert alert-success" style="border:1px solid rgb(214,233,198);color:rgb(60,118,61);background-color:rgb(223,240,216);">
        <span style="font-weight:700;">备注:</span>写错 HBase Shell 命令时用键盘上的“Delete”进行删除,“Backspace”不起作用。</div>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        在启动 HBase 之后,用户可以通过下面的命令进入 HBase Shell 之中,命令如下所示:</p>
<img alt="" src="http://hadoop2.dajiangtai.com/content/313/10-1.png" style="border:0px;vertical-align:middle;"><p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        输入 help 可以看到命令分组。</p>
<table class="table table-wuxia" style="border-spacing:0px;border-collapse:collapse;background-color:transparent;"><thead><tr><th style="text-align:left;font-family:'微软雅黑', 'Microsoft YaHei';font-size:18px;line-height:1.42857;vertical-align:bottom;border-top:0px;border-bottom:2px solid rgb(221,221,221);">
Group Name</th>
<th style="text-align:left;font-family:'微软雅黑', 'Microsoft YaHei';font-size:18px;line-height:1.42857;vertical-align:bottom;border-top:0px;border-bottom:2px solid rgb(221,221,221);">
Commands</th>
</tr></thead><tbody><tr><td style="font-family:'微软雅黑', 'Microsoft YaHei';font-size:18px;line-height:1.42857;vertical-align:top;border-top:1px solid rgb(221,221,221);">
general</td>
<td style="font-family:'微软雅黑', 'Microsoft YaHei';font-size:18px;line-height:1.42857;vertical-align:top;border-top:1px solid rgb(221,221,221);">
status,version</td>
</tr><tr><td style="font-family:'微软雅黑', 'Microsoft YaHei';font-size:18px;line-height:1.42857;vertical-align:top;border-top:1px solid rgb(221,221,221);">
ddl</td>
<td style="font-family:'微软雅黑', 'Microsoft YaHei';font-size:18px;line-height:1.42857;vertical-align:top;border-top:1px solid rgb(221,221,221);">
alter,create,describe,disable,drop,enable,exists,is_disable,is_enable,list</td>
</tr><tr><td style="font-family:'微软雅黑', 'Microsoft YaHei';font-size:18px;line-height:1.42857;vertical-align:top;border-top:1px solid rgb(221,221,221);">
dml</td>
<td style="font-family:'微软雅黑', 'Microsoft YaHei';font-size:18px;line-height:1.42857;vertical-align:top;border-top:1px solid rgb(221,221,221);">
count,delete,deleteall,get,get_counter,incr,put,scan,truncate</td>
</tr><tr><td style="font-family:'微软雅黑', 'Microsoft YaHei';font-size:18px;line-height:1.42857;vertical-align:top;border-top:1px solid rgb(221,221,221);">
tools</td>
<td style="font-family:'微软雅黑', 'Microsoft YaHei';font-size:18px;line-height:1.42857;vertical-align:top;border-top:1px solid rgb(221,221,221);">
assign,balance_switch,balancer,close_region,compact,flush,major_compact,move,split,unassign,zk_dump</td>
</tr><tr><td style="font-family:'微软雅黑', 'Microsoft YaHei';font-size:18px;line-height:1.42857;vertical-align:top;border-top:1px solid rgb(221,221,221);">
replication</td>
<td style="font-family:'微软雅黑', 'Microsoft YaHei';font-size:18px;line-height:1.42857;vertical-align:top;border-top:1px solid rgb(221,221,221);">
add_peer,disable_peer,enable_peer,remove_peer,start_replication,stop_replication</td>
</tr></tbody></table><p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        部分命令清单。</p>
<table class="table table-wuxia" style="border-spacing:0px;border-collapse:collapse;background-color:transparent;"><thead><tr><th style="text-align:left;font-family:'微软雅黑', 'Microsoft YaHei';font-size:18px;line-height:1.42857;vertical-align:bottom;border-top:0px;border-bottom:2px solid rgb(221,221,221);">
名称</th>
<th style="text-align:left;font-family:'微软雅黑', 'Microsoft YaHei';font-size:18px;line-height:1.42857;vertical-align:bottom;border-top:0px;border-bottom:2px solid rgb(221,221,221);">
命令表达式</th>
</tr></thead><tbody><tr><td style="font-family:'微软雅黑', 'Microsoft YaHei';font-size:18px;line-height:1.42857;vertical-align:top;border-top:1px solid rgb(221,221,221);">
创建表</td>
<td style="font-family:'微软雅黑', 'Microsoft YaHei';font-size:18px;line-height:1.42857;vertical-align:top;border-top:1px solid rgb(221,221,221);">
create '表名称','列名称1','列名称2','列名称N'</td>
</tr><tr><td style="font-family:'微软雅黑', 'Microsoft YaHei';font-size:18px;line-height:1.42857;vertical-align:top;border-top:1px solid rgb(221,221,221);">
添加记录</td>
<td style="font-family:'微软雅黑', 'Microsoft YaHei';font-size:18px;line-height:1.42857;vertical-align:top;border-top:1px solid rgb(221,221,221);">
put '表名','行名','列名','值'</td>
</tr><tr><td style="font-family:'微软雅黑', 'Microsoft YaHei';font-size:18px;line-height:1.42857;vertical-align:top;border-top:1px solid rgb(221,221,221);">
查看记录</td>
<td style="font-family:'微软雅黑', 'Microsoft YaHei';font-size:18px;line-height:1.42857;vertical-align:top;border-top:1px solid rgb(221,221,221);">
get '表名','行名'</td>
</tr><tr><td style="font-family:'微软雅黑', 'Microsoft YaHei';font-size:18px;line-height:1.42857;vertical-align:top;border-top:1px solid rgb(221,221,221);">
查看表中的记录总数</td>
<td style="font-family:'微软雅黑', 'Microsoft YaHei';font-size:18px;line-height:1.42857;vertical-align:top;border-top:1px solid rgb(221,221,221);">
count '表名'</td>
</tr><tr><td style="font-family:'微软雅黑', 'Microsoft YaHei';font-size:18px;line-height:1.42857;vertical-align:top;border-top:1px solid rgb(221,221,221);">
删除记录</td>
<td style="font-family:'微软雅黑', 'Microsoft YaHei';font-size:18px;line-height:1.42857;vertical-align:top;border-top:1px solid rgb(221,221,221);">
delete '表名','行名称','列名称'</td>
</tr><tr><td style="font-family:'微软雅黑', 'Microsoft YaHei';font-size:18px;line-height:1.42857;vertical-align:top;border-top:1px solid rgb(221,221,221);">
删除一张表</td>
<td style="font-family:'微软雅黑', 'Microsoft YaHei';font-size:18px;line-height:1.42857;vertical-align:top;border-top:1px solid rgb(221,221,221);">
第一步 disable'表名称'(先要屏蔽该表，才能对该表进行删除) <br>
第二步 drop '表名称'</td>
</tr><tr><td style="font-family:'微软雅黑', 'Microsoft YaHei';font-size:18px;line-height:1.42857;vertical-align:top;border-top:1px solid rgb(221,221,221);">
查看所有记录</td>
<td style="font-family:'微软雅黑', 'Microsoft YaHei';font-size:18px;line-height:1.42857;vertical-align:top;border-top:1px solid rgb(221,221,221);">
scan '表名称'</td>
</tr><tr><td style="font-family:'微软雅黑', 'Microsoft YaHei';font-size:18px;line-height:1.42857;vertical-align:top;border-top:1px solid rgb(221,221,221);">
查看某个表某个列中的所有数据</td>
<td style="font-family:'微软雅黑', 'Microsoft YaHei';font-size:18px;line-height:1.42857;vertical-align:top;border-top:1px solid rgb(221,221,221);">
scan '表名称',['列名称:']</td>
</tr><tr><td style="font-family:'微软雅黑', 'Microsoft YaHei';font-size:18px;line-height:1.42857;vertical-align:top;border-top:1px solid rgb(221,221,221);">
更新记录</td>
<td style="font-family:'微软雅黑', 'Microsoft YaHei';font-size:18px;line-height:1.42857;vertical-align:top;border-top:1px solid rgb(221,221,221);">
就是重写一遍进行覆盖</td>
</tr></tbody></table><p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        下边分组举例 Shell 的各种操作。</p>
<h4 style="font-weight:normal;line-height:1.1;color:inherit;font-size:18px;">
        general操作</h4>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        查询 HBase 服务器状态 status。</p>
<img alt="" src="http://hadoop2.dajiangtai.com/content/313/12.png" style="border:0px;vertical-align:middle;"><p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        查询hbase版本 version</p>
<img alt="" src="http://hadoop2.dajiangtai.com/content/313/13.png" style="border:0px;vertical-align:middle;"><h4 style="font-weight:normal;line-height:1.1;color:inherit;font-size:18px;">
ddl操作</h4>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        1、 创建一个表</p>
<pre><code class="language-html">create 'table1', 'tab1_id', 'tab1_add', 'tab1_info'</code></pre>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        2、 列出所有的表</p>
<img alt="" src="http://hadoop2.dajiangtai.com/content/313/14.png" style="border:0px;vertical-align:middle;"><p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        3、 获得表的描述</p>
<pre><code class="language-html">describe "table1"</code></pre>
<img alt="" src="http://hadoop2.dajiangtai.com/content/313/15.png" style="border:0px;vertical-align:middle;"><p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        4、 删除一个列族 disable alter enable</p>
<pre><code class="language-html">disable 'table1'
alter 'table1', {NAME=&gt;'tab1_add', METHOD=&gt;'delete'}
enable 'table1'</code></pre>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        5、 查看表是否存在</p>
<pre><code class="language-html">exists 'table2'</code></pre>
<img alt="" src="http://hadoop2.dajiangtai.com/content/313/16.png" style="border:0px;vertical-align:middle;"><p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        6、 判断表是否为‘enable’</p>
<pre><code class="language-html">is_enabled 'table1'</code></pre>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        7、 删除一个表</p>
<pre><code class="language-html">disable 'table1'
drop 'table1'</code></pre>
<h4 style="font-weight:normal;line-height:1.1;color:inherit;font-size:18px;">
dml操作</h4>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        1、 插入几条记录</p>
<pre><code class="language-html">put 'member', 'scutshuxue', 'info:age', '24'
put 'member', 'scutshuxue', 'info:birthday', '1987-06-17'
put 'member', 'scutshuxue', 'info:company', 'alibaba'
put 'member', 'scutshuxue', 'address:contry', 'china'
put 'member', 'scutshuxue', 'address:province', 'zhejiang'
put 'member', 'scutshuxue', 'address:city', 'hangzhou'</code></pre>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        put命令比较简单，只有这一种用法：</p>
<pre><code class="language-html">hbase&gt; put ‘t1′, ‘r1′, ‘c1′, ‘value', ts1 </code></pre>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
t1指表名，r1指行键名，c1指列名，value指单元格值。ts1指时间戳，一般都省略掉了。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        2、 全表扫描 scan</p>
<img alt="" src="http://hadoop2.dajiangtai.com/content/313/17.png" style="border:0px;vertical-align:middle;"><p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        3、 获得数据 get</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        1) 获得一行的所有数据</p>
<img alt="" src="http://hadoop2.dajiangtai.com/content/313/18.png" style="border:0px;vertical-align:middle;"><p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        2) 获得某行，某列族的所有数据</p>
<img alt="" src="http://hadoop2.dajiangtai.com/content/313/19.png" style="border:0px;vertical-align:middle;"><p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        3) 获得某行，某列族，某列的所有数据</p>
<img alt="" src="http://hadoop2.dajiangtai.com/content/313/20.png" style="border:0px;vertical-align:middle;"><p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        4、 更新一条记录 put（把scutshuxue年龄改为99）</p>
<pre><code class="language-html">put 'member', 'scutshuxue', 'info:age', 99</code></pre>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        5、 删除 delete、 deleteall</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        1) 删除行'scutshuxue', 列族为‘info' 中age的值</p>
<pre><code class="language-html">delete 'member', 'scutshuxue', 'info:age'</code></pre>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        2) 删除整行</p>
<pre><code class="language-html">deleteall 'member', 'scutshuxue'</code></pre>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        6、 查询表中有多少行</p>
<pre><code class="language-html">count 'member'</code></pre>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        7、 给‘xiaoming’这个id增加'info:age'字段，并使用counter实现递增</p>
<pre><code class="language-html">incr 'member',  'xiaoming', 'info:age' </code></pre>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        8、 将整个表清空</p>
<pre><code class="language-html">truncate 'member'</code></pre>
<img alt="" src="http://hadoop2.dajiangtai.com/content/313/21.png" style="border:0px;vertical-align:middle;"><p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        可以看出，HBase 是通过先对表执行 disable，然后再执行 drop 操作后重建表来实现 truncate 的功能的。</p>
</div>
</div>
<div class="item" id="item2">
<div class="row">
<h3 class="jquery-notebook editor" style="font-weight:normal;line-height:1.1;color:inherit;font-size:24px;min-height:0px;">
HBase 客户端</h3>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        与 HBase 集群进行交互，有很多种不同的方式可以选择，如 Java API、REST、Thrift 等。下面我们以Java API为例介绍它们的用法。</p>
<h4 style="font-weight:normal;line-height:1.1;color:inherit;font-size:18px;">
Java API 交互</h4>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        HBase 与 Hadoop 一样，都是用 java 编写的，所以 HBase 对 java 支持是必需的，下面看看怎么使用java 语言对 HBase 进行操作。Java API 核心类介绍如下。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        1、 HBaseConfiguration 类</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        HBaseConfiguration 是每一个 HBase Client 都会使用到的对象，它代表 HBase 配置信息。有两种构造方式。</p>
<pre><code class="language-html">public HBaseConfiguration()
public HBaseConfiguration(final Configuration c)</code></pre>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        默认构造方式会尝试从 hbase-default.xml 和 HBase-site.xml 文件中读取配置。如果CLASSPATH 没有这两个文件，就需要自己配置。</p>
<pre><code class="language-html">Configuration HBASE_CONFIG = new Configuration();
HBASE_CONFIG.set("hbase.ZooKeeper.quorum","zkServer");	//hbase 服务地址
HBASE_CONFIG.set("hbase.ZooKeeper.property.clientPort","2181");	//端口号
HBaseConfiguration cfg = new HBaseConfiguration(HBASE_CONFIG);	//读取配置文件</code></pre>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        2、 创建表</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        创建表通过 HBaseAdmin 对象操作。HBaseAdmin 负责META 表信息的处理。HBaseAdmin 提供了 createTable 方法。</p>
<pre><code class="language-html">public void createTable(HTableDescriptor desc)</code></pre>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        HTableDescriptor 表示表的 Schema，提供常用方法有以下两个。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        1)setMaxFileSize：指定最大 Region 的大小。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        2)setMemStoreFlushSize：指定 MemStore Flush 到 HDFS 上的文件大小。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        3、 增加 Family</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        使用 addFamily 方法实现 Family 的添加。</p>
<pre><code class="language-html">public void addFamily(final HColumnDescriptor family)</code></pre>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        HColumnDescriptor 代表 Column 的 Schema，提供的常用方法有以下几个。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        1、setTimeToLive：指定最大的 TTL（单位是 ms），过期数据会被自动删除。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        2、setInMemory：指定是否放在内存中，对小表有用，可用于提高效率。默认关闭。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        3、setBloomFilter：指定是否使用 BloomFilter，可提高随机查询效率。默认关闭。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        4、setCompressionType：设定数据压缩类型。默认无压缩。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        5、setMaxVersions：指定数据最大保存的版本个数。默认为3。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        举个简单的例子，创建 4 个 Family 表，命令如下。</p>
<pre><code class="language-html">HBaseAdmin hAdmin = new HBaseAdmin(hbaseConfig);
HTableDescriptor table = new HTableDescriptor(tableName);
table.addFamily(new HColumnDescriptor("f1"));
table.addFamily(new HColumnDescriptor("f2"));
table.addFamily(new HColumnDescriptor("f3"));
table.addFamily(new HColumnDescriptor("f4"));
hAdmin.createTable(table);</code></pre>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        4、 删除表</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        删除表也是通过 HBaseAdmin 来操作，删除表之前首先要 disable 表。这是一个非常耗时的操作，所以不建议频繁删除表。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        disableTable 和 deleteTable 分别用来执行 disable 和 delete 操作。使用方法如下。</p>
<pre><code class="language-html">HBaseAdmin hAdmin = new HBaseAdmin(hbaseConfig);
if(hAdmin.tableExists(tableName)){
	hAdmin.disableTable(tableName);
	hAdmin.deleteTable(tableName);
}</code></pre>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        5、查询数据</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        查询分为单条随机查询和批量查询。单条查询通过 Row Key 在Table 中查询某一行的数据，HTable 提供了get 方法完成单条查询。批量查询通过制定一段 Row Key 的范围来查询，HTable 提供了 getScanner 方法完成批量查询。</p>
<pre><code class="language-html">public Result get(final Get get)
public ResultScanner getScanner(final Scan scan)</code></pre>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        Get 对象包含一个 Get 查询需要的信息，它的构造方法有两种。</p>
<pre><code class="language-html">public Get(byte [] row)
public Get(byte [] row，RowLock rowLock)</code></pre>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        Row Lock 为了保证读写的原子性，可以传递一个已经存在 Row Lock，否则 HBase 会自动生成一个新的 Row Lock。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        Scan 对象提供了默认构造函数，一般使用默认构造函数。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        1) Get 和 Scan 的常用方法有以下几个。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        addFamily/addColumn：指定需要的 Family 或者 Column，如果没有调用任何 Family 或者 Column，会返回所有的 Column。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        setMaxVersions：指定最大的版本个数。如果不带任何参数调用 setMaxVersions，表示取所有的版本。如果不调用 setMaxVersions，只会取到最新的版本。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        setTimeRange：指定最大的时间戳和最小的时间戳，只有在此范围内的 Cell 才能被获取。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        setTimeStamp：指定时间戳。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        setFilter：指定 Filter 过滤不需要的信息。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        2) Scan 特有的方法如下。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        setStartRow：指定开始的行。如果不调用，从表头开始。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        setStopRow：指定结束的行（不含此行）。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        setBatch：指定最多返回的 Cell 数目。防止一行中有过多的数据，导致 OOM 错误。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        3) Result 代表是一行的数据。常用方法有以下几个。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        getRow：返回 Row Key。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        raw：返回所有的 KeyValue 数组。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        getValue：按照 Column 来获取 Cell 的值。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        ResultScanner 是 Result 的一个容器，每次调用ResultScanner 的next 方法会返回Result。</p>
<pre><code class="language-html">public Result next() throws IOException;
public Result [] next(int nbRows) throws IOException;</code></pre>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        示例代码如下。</p>
<pre><code class="language-html">Scan scan = new Scan();
scan.setMaxVersions();
ResultScanner ss = table.getScanner(scan);
for(Result r:ss){
	System.out.println(new String(r.getRow()));
	for(KeyValue kv:r.raw){
		System.out.println(new String(kv.getColumn()));
	}
}</code></pre>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        6、 插入数据</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        HTable 通过 put 方法插入数据，可以传递单个 put 对象 或 List put 对象分别实现单条插入和批量插入。</p>
<pre><code class="language-html">public void put(final Put put) throws IOException
public void put(final List<span class="hljs-tag" style="font-family:'微软雅黑', 'Microsoft YaHei';"><span class="hljs-tag"><span class="hljs-tag">&lt; </span></span><span class="hljs-attribute" style="color:rgb(181,137,0);"><span class="hljs-tag"><span class="hljs-attribute"><span class="hljs-tag"><span class="hljs-attribute">Put</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">&gt;</span></span></span> puts) throws IOException</code></pre>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        Put 提供3 种构造方式。</p>
<pre><code class="language-html">public Put(byte [] row)
public Put(byte [] row)
public Put(byte [] row,RowLock rowLock)
public Put(Put putToCopy)</code></pre>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        Put 常用的方法有以下几个。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        1)add：增加一个 Cell。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        2)setTimeStamp：指定所有 Cell 默认的 timestamp，如果一个 Cell 没有指定 timestamp，就会用到这个值。如果没有调用，HBase 会将当前时间作为未指定 timestamp 的Cell 的 timestamp。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        3)setWriteToWAL：WAL 是 Write Ahead Log 的缩写，指的是 HBase 在插入操作前是否写 Log。默认是打开，关掉会提高性能，但是如果系统出现故障（负责插入的Region Server 挂掉），数据可能会丢失。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        另外 HTable 也有两个方法会影响插入的性能。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        1)setAutoFlash：AutoFlush 指的是在每次调用 HBase 的 Put 操作，是否提交到 HBase Server。默认是 true，每次会提交。如果此时是单条插入，就会有更多的I/O，从而降低其性能。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        2)setWriteBufferSize：Write Buffer Size 在 AutoFlush 为false 的时候起作用，默认是 2MB，也就是插入数据超过 2MB，就会自动提交到 Server。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        示例代码如下。</p>
<pre><code class="language-html">HTable table = new HTable(hbaseConfig, tableName);
table.setAutoFlush(autoFlush);
List<span class="hljs-tag" style="font-family:'微软雅黑', 'Microsoft YaHei';"><span class="hljs-tag"><span class="hljs-tag">&lt; </span></span><span class="hljs-attribute" style="color:rgb(181,137,0);"><span class="hljs-tag"><span class="hljs-attribute"><span class="hljs-tag"><span class="hljs-attribute">Put</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">&gt;</span></span></span> lp = new ArrayList<span class="hljs-tag" style="font-family:'微软雅黑', 'Microsoft YaHei';"><span class="hljs-tag"><span class="hljs-tag">&lt; </span></span><span class="hljs-attribute" style="color:rgb(181,137,0);"><span class="hljs-tag"><span class="hljs-attribute"><span class="hljs-tag"><span class="hljs-attribute">Put</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">&gt;</span></span></span>();
int count = 10000;
byte[] buffer = new byte[1024];
Random r = new Random();
for(int i = 1;i <span class="hljs-tag" style="font-family:'微软雅黑', 'Microsoft YaHei';"><span class="hljs-tag"><span class="hljs-tag">&lt;</span></span><span class="hljs-title" style="color:rgb(38,139,210);"><span class="hljs-tag"><span class="hljs-title"><span class="hljs-tag"><span class="hljs-title">=</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag"> </span></span><span class="hljs-attribute" style="color:rgb(181,137,0);"><span class="hljs-tag"><span class="hljs-attribute"><span class="hljs-tag"><span class="hljs-attribute">count</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">;++</span></span><span class="hljs-attribute" style="color:rgb(181,137,0);"><span class="hljs-tag"><span class="hljs-attribute"><span class="hljs-tag"><span class="hljs-attribute">i</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">){
	</span></span><span class="hljs-attribute" style="color:rgb(181,137,0);"><span class="hljs-tag"><span class="hljs-attribute"><span class="hljs-tag"><span class="hljs-attribute">Put</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag"> </span></span><span class="hljs-attribute" style="color:rgb(181,137,0);"><span class="hljs-tag"><span class="hljs-attribute"><span class="hljs-tag"><span class="hljs-attribute">p</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag"> = </span></span><span class="hljs-attribute" style="color:rgb(181,137,0);"><span class="hljs-tag"><span class="hljs-attribute"><span class="hljs-tag"><span class="hljs-attribute">new</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag"> </span></span><span class="hljs-attribute" style="color:rgb(181,137,0);"><span class="hljs-tag"><span class="hljs-attribute"><span class="hljs-tag"><span class="hljs-attribute">Put</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">(</span></span><span class="hljs-attribute" style="color:rgb(181,137,0);"><span class="hljs-tag"><span class="hljs-attribute"><span class="hljs-tag"><span class="hljs-attribute">String.format</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">("</span></span><span class="hljs-attribute" style="color:rgb(181,137,0);"><span class="hljs-tag"><span class="hljs-attribute"><span class="hljs-tag"><span class="hljs-attribute">row</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">%</span></span><span class="hljs-attribute" style="color:rgb(181,137,0);"><span class="hljs-tag"><span class="hljs-attribute"><span class="hljs-tag"><span class="hljs-attribute">09d</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">",</span></span><span class="hljs-attribute" style="color:rgb(181,137,0);"><span class="hljs-tag"><span class="hljs-attribute"><span class="hljs-tag"><span class="hljs-attribute">i</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">)</span></span><span class="hljs-attribute" style="color:rgb(181,137,0);"><span class="hljs-tag"><span class="hljs-attribute"><span class="hljs-tag"><span class="hljs-attribute">.getBytes</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">());
	</span></span><span class="hljs-attribute" style="color:rgb(181,137,0);"><span class="hljs-tag"><span class="hljs-attribute"><span class="hljs-tag"><span class="hljs-attribute">r.nextBytes</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">(</span></span><span class="hljs-attribute" style="color:rgb(181,137,0);"><span class="hljs-tag"><span class="hljs-attribute"><span class="hljs-tag"><span class="hljs-attribute">buffer</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">);
	</span></span><span class="hljs-attribute" style="color:rgb(181,137,0);"><span class="hljs-tag"><span class="hljs-attribute"><span class="hljs-tag"><span class="hljs-attribute">p.add</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">("</span></span><span class="hljs-attribute" style="color:rgb(181,137,0);"><span class="hljs-tag"><span class="hljs-attribute"><span class="hljs-tag"><span class="hljs-attribute">f1</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">"</span></span><span class="hljs-attribute" style="color:rgb(181,137,0);"><span class="hljs-tag"><span class="hljs-attribute"><span class="hljs-tag"><span class="hljs-attribute">.getBytes</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">(), </span></span><span class="hljs-attribute" style="color:rgb(181,137,0);"><span class="hljs-tag"><span class="hljs-attribute"><span class="hljs-tag"><span class="hljs-attribute">null</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">, </span></span><span class="hljs-attribute" style="color:rgb(181,137,0);"><span class="hljs-tag"><span class="hljs-attribute"><span class="hljs-tag"><span class="hljs-attribute">buffer</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">);
	</span></span><span class="hljs-attribute" style="color:rgb(181,137,0);"><span class="hljs-tag"><span class="hljs-attribute"><span class="hljs-tag"><span class="hljs-attribute">p.add</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">("</span></span><span class="hljs-attribute" style="color:rgb(181,137,0);"><span class="hljs-tag"><span class="hljs-attribute"><span class="hljs-tag"><span class="hljs-attribute">f2</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">"</span></span><span class="hljs-attribute" style="color:rgb(181,137,0);"><span class="hljs-tag"><span class="hljs-attribute"><span class="hljs-tag"><span class="hljs-attribute">.getBytes</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">(), </span></span><span class="hljs-attribute" style="color:rgb(181,137,0);"><span class="hljs-tag"><span class="hljs-attribute"><span class="hljs-tag"><span class="hljs-attribute">null</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">, </span></span><span class="hljs-attribute" style="color:rgb(181,137,0);"><span class="hljs-tag"><span class="hljs-attribute"><span class="hljs-tag"><span class="hljs-attribute">buffer</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">);
	</span></span><span class="hljs-attribute" style="color:rgb(181,137,0);"><span class="hljs-tag"><span class="hljs-attribute"><span class="hljs-tag"><span class="hljs-attribute">p.add</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">("</span></span><span class="hljs-attribute" style="color:rgb(181,137,0);"><span class="hljs-tag"><span class="hljs-attribute"><span class="hljs-tag"><span class="hljs-attribute">f3</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">"</span></span><span class="hljs-attribute" style="color:rgb(181,137,0);"><span class="hljs-tag"><span class="hljs-attribute"><span class="hljs-tag"><span class="hljs-attribute">.getBytes</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">(), </span></span><span class="hljs-attribute" style="color:rgb(181,137,0);"><span class="hljs-tag"><span class="hljs-attribute"><span class="hljs-tag"><span class="hljs-attribute">null</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">, </span></span><span class="hljs-attribute" style="color:rgb(181,137,0);"><span class="hljs-tag"><span class="hljs-attribute"><span class="hljs-tag"><span class="hljs-attribute">buffer</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">);
	</span></span><span class="hljs-attribute" style="color:rgb(181,137,0);"><span class="hljs-tag"><span class="hljs-attribute"><span class="hljs-tag"><span class="hljs-attribute">p.add</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">("</span></span><span class="hljs-attribute" style="color:rgb(181,137,0);"><span class="hljs-tag"><span class="hljs-attribute"><span class="hljs-tag"><span class="hljs-attribute">f4</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">"</span></span><span class="hljs-attribute" style="color:rgb(181,137,0);"><span class="hljs-tag"><span class="hljs-attribute"><span class="hljs-tag"><span class="hljs-attribute">.getBytes</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">(), </span></span><span class="hljs-attribute" style="color:rgb(181,137,0);"><span class="hljs-tag"><span class="hljs-attribute"><span class="hljs-tag"><span class="hljs-attribute">null</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">, </span></span><span class="hljs-attribute" style="color:rgb(181,137,0);"><span class="hljs-tag"><span class="hljs-attribute"><span class="hljs-tag"><span class="hljs-attribute">buffer</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">);
	</span></span><span class="hljs-attribute" style="color:rgb(181,137,0);"><span class="hljs-tag"><span class="hljs-attribute"><span class="hljs-tag"><span class="hljs-attribute">p.setWriteToWAL</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">(</span></span><span class="hljs-attribute" style="color:rgb(181,137,0);"><span class="hljs-tag"><span class="hljs-attribute"><span class="hljs-tag"><span class="hljs-attribute">wal</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">);
	</span></span><span class="hljs-attribute" style="color:rgb(181,137,0);"><span class="hljs-tag"><span class="hljs-attribute"><span class="hljs-tag"><span class="hljs-attribute">lp.add</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">(</span></span><span class="hljs-attribute" style="color:rgb(181,137,0);"><span class="hljs-tag"><span class="hljs-attribute"><span class="hljs-tag"><span class="hljs-attribute">p</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">);
	</span></span><span class="hljs-attribute" style="color:rgb(181,137,0);"><span class="hljs-tag"><span class="hljs-attribute"><span class="hljs-tag"><span class="hljs-attribute">if</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">(</span></span><span class="hljs-attribute" style="color:rgb(181,137,0);"><span class="hljs-tag"><span class="hljs-attribute"><span class="hljs-tag"><span class="hljs-attribute">i</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">%</span></span><span class="hljs-attribute" style="color:rgb(181,137,0);"><span class="hljs-tag"><span class="hljs-attribute"><span class="hljs-tag"><span class="hljs-attribute">1000</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">=</span></span><span class="hljs-value" style="color:rgb(42,161,152);"><span class="hljs-tag"><span class="hljs-value"><span class="hljs-tag"><span class="hljs-value">=0){</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">
		</span></span><span class="hljs-attribute" style="color:rgb(181,137,0);"><span class="hljs-tag"><span class="hljs-attribute"><span class="hljs-tag"><span class="hljs-attribute">table.put</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">(</span></span><span class="hljs-attribute" style="color:rgb(181,137,0);"><span class="hljs-tag"><span class="hljs-attribute"><span class="hljs-tag"><span class="hljs-attribute">lp</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">);
		</span></span><span class="hljs-attribute" style="color:rgb(181,137,0);"><span class="hljs-tag"><span class="hljs-attribute"><span class="hljs-tag"><span class="hljs-attribute">lp.clear</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">();
	}
}</span></span></span></code></pre>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        7、 删除数据</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        HTable 通过 delete 方法删除数据。</p>
<pre><code class="language-html">public void delete(final Delete delete)</code></pre>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        Delete 构造方法如下。</p>
<pre><code class="language-html">public Delete(byte [] row)
public Delete(byte [] row, long timestamp, RowLock rowLock)
public Delete(final Delete d)</code></pre>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        Delete 常用方法有 deleteFamily/deleteColumn，用来指定要删除的 Family 或者 Column 的数据。 如果不调用任何这样的方法，将会删除整行。</p>
<div class="alert alert-success" style="border:1px solid rgb(214,233,198);color:rgb(60,118,61);background-color:rgb(223,240,216);">
        注意： 如果某个 Cell 的 timestamp 高于当前时间，这个 Cell 将不会被删除，仍然可以查出来。</div>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        示例代码如下。</p>
<pre><code class="language-html">HTable table = new HTable(hbaseConfig,"mytest");
Delete d = new Delete("row1".getBytes());
table.delete(d)</code></pre>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        8、 切分表</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
HBaseAdmin 提供 split 方法将 table 进行切分。</p>
<pre><code class="language-html">public void split(final String tableNameOrRegionName)</code></pre>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        如果提供的是 tableName，会将 table 所有 Region 进行切分；如果提供的是 RegionName，只会切分这个Region。Split 是一个异步操作，因此它并不能确切控制 Region 的个数。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        示例代码如下。</p>
<pre><code class="language-html">public void split(String tableName,int number,int timeout) throws Exception{
	Configuration HBASE_CONFIG = new Configuration();
	HBASE_CONFIG.set("hbase.ZooKeeper.quorum",GlobalConf.ZOOKEEPER_QUORUM);
	HBaseConfiguration cfg = new HBaseConfiguration(HBASE_CONFIG);
	HBaseAdmin hAdmin = new HBaseAdmin(cfg);
	HTable hTable = new HTable(cfg,tableName);
	int oldsize = 0;
	long time = System.currentTimeMillis();
	while(true){
		int size = hTable.getRegionsInfo().size();
		logger.info("the region number="+size);
		if(size&gt;=number) break;
		if(size !=oldsize){
			hAdmin.split(hTable.getTableName());
			oldsize = size;
		}else if(System.currentTimeMillis()-time&gt;timeout){
			break;
		}
		Thread.sleep(1000*10);
	}
}</code></pre>
</div>
</div>
<div class="item" id="item3">
<div class="row">
<h3 class="jquery-notebook editor" style="font-weight:normal;line-height:1.1;color:inherit;font-size:24px;min-height:0px;">
MapReduce 操作 HBase</h3>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        在 HBase 系统上运行批处理运算，最方便和实用的模型依然是 MapReduce，如下图所示。</p>
<img alt="MapReduce 操作 HBase" src="http://hadoop2.dajiangtai.com/content/313/22.png" style="border:0px;vertical-align:middle;"><p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        HBase Table 和 Region 的关系类似 HDFS File 和 Block 的关系，HBase提供配套的 TableInputFormat 和 TableOutputFormat API，可以方便地将 HBase Table 作为 Hadoop MapReduce 的Source 和 Sink。对于 MapReduce Job 应用开发人员来说，基本不需要关注 HBase 系统本身的细节。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        org.apache.hadoop.hbase.mapreduce 包中的类和工具用来将 HBase 作为 MapReduce 作业的输出</p>
<h4 style="font-weight:normal;line-height:1.1;color:inherit;font-size:18px;">
1、 HBaseConfiguration 类</h4>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        org.apache.hadoop.hbase.HbaseConfiguration 继承了 org.apache.hadoop.conf.Configuration 类， 创建一个 HBaseConfiguration 对象实例，会返回读入 CLASSPATH 下 hbase-site.xml 文件和hbase-default.xml 文件中 HBase 配置信息的一个 Configuration，该Configuration 接下来会用于 创建 HBaseAdmin 和 HTable 实例。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        HBaseAdmin 和 HTable 两个类在 org.apache.hadoop.hbase.client 包中，HBaseAdmin 用于管理 HBase 集群、添加和删除表，HTable 用于访问指定的表，Configuration 实例指向了执行这些代码的集群上的这些类。</p>
<h4 style="font-weight:normal;line-height:1.1;color:inherit;font-size:18px;">
2、 HtableDescriptor 类和 HColumnDescriptor 类</h4>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        HBase 中表结构由 HTableDescriptor 描述（包括 HColumnDescriptor），对表的新增、修改、删除操作在接口 HMasterInterface 中定义，而该接口由 HMaster 实现。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        HTabledescriptor包含：</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        1)表名、byte[] 和 String 格式。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        2)表的元信息，以Key-Value形式存储。存储信息包括文件最大的大小（默认256MB）、是否只读、Flush 时内存占用大小（默认64MB）、是否 root 或 Meta Region、DEFERRED_LOG_FLUSH。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        3)表的各 Family 描述 HColumnDescriptor。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        HColumnDescriptor 描述 Column Family 的信息，包括：</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        1)压缩格式（不压缩或仅压缩 Value、压缩 Block 中的一系列记录）。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        2)数据的版本数量。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        3)Block 的大小。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        4)是否在内存中。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        5)是否 Cache Block。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        6)是否使用 bloomfilter。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        7)Cell 内容的存活时间。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        8)是否复制。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        当一个 Column Family 创建后，其参数不能修改，除非删除该 Column Family 后新建一个， 但删除 Column Family 也会删除该 Column Family 下的数据。另外，HTableDescriptor 中包含 ROOT_TABLEDESC 和 META_TABLEDESC 两个实例以描述-ROOT- 和 .META 表。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        1)ROOT_TABLEDESC 包含一个 info 的 Column Family。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        2)META_TABLEDESC 包含一个 info 和 historian，两个 Column Family。</p>
<h4 style="font-weight:normal;line-height:1.1;color:inherit;font-size:18px;">
3、 CreateTable 方法</h4>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        如果指定 Split Key 为该 Table 按指定键初始创建多个 Region，否则仅创建一个 Region，过程如下。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        1) 为 Table 创建 HRegionInfo</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        2) 判断是不是所有的 Meta Region 都 online（由 RegionManager 的 MetaScanner 扫描线程分配 Meta Region）。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        3) 判断 ServerManager 是否有足够 Region Server 来创建 table。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        从 RegionManager 的 online MetaRegion 查找该 HRegionInfo 应放入哪一个 MetaRegion 中，在 onlineMetaRegion 中查找仅比RegionName 小的 MetaRegion，而RegionName 由 tableName、起始 Key 和 regionId（root 为0，meta 为1，user 当前时间）组成，同时 Master 的 ServerConnection 获取 HRegionInterface 代理连接到该 MetaRegion，并查找对应该
 Table 为 Key 的记录是否存在，若存在则报错该表已经存在，由 RegionManager 根据 HRegionInfo 创建新的 user。Region 在 rootDir 目录下 新建以 tableName 为名的目录，在 tableName 目录下新建一个 Region 的目录（经编码后的 RegionName），并新建一个 HRegion 对象。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        disable、enable 和 delete 等操作封装在继承自 TableOperation 的类中，该类先获得要操作表的所有 MetaRegion，扫描这些 MetaRegion 中 所有该表的 user Region 信息并做相应处理，最后处理 MetaRegion。</p>
<h4 style="font-weight:normal;line-height:1.1;color:inherit;font-size:18px;">
4、 TableInputFormat 类</h4>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        通过设置 conf.set(TableInputFormat.INPUT_TABLE,"tableName") 设定 HBase 的输入表，tableName 为表名。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        设置 conf.set(TableInputFormat.SCAN,TableMRUtil.convertScanToString(scan))，设定对 HBase 输入表的 scan 方式。</p>
<pre><code class="language-html">setTable(new HTable(new Configuration(conf),tableName));</code></pre>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        通过 TableInputFormat.setConf(Configuration conf) 方法初始化 scan 对象；scan 对象是从 Job 中设置的对象，以字符串的形式传给 TableInputFormat，在 TableInputFormat 内部将 scan 字符串转换为 scan 对象，操作如下。</p>
<pre><code class="language-html">scan = TableMapReduceUtil.convertStringtoScan(conf.get(SCAN))</code></pre>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        TableInputFormat 继承 TableInputFormatBase 实现了 InputFormat 抽象类的两个抽象方法 getSplits() 和 createRecordReader()。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        getSplits() 判定输入对象的切分原则，原则是对于 TableInputFormatBase，会遍历HBase 相应表的所有 HRegion，每一个 HRegion 都会被切分成一个 Split，所以切分的块数与表中 HRegion 的数目是相同的，代码如下。</p>
<pre><code class="language-html">InputSplit split = new TableSplit(table.getTableName(),splitStart,splitStop,regionLocation);</code></pre>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        在 Split 中只会记载 HRegion 的起始 Row Key 和 结束Row Key，具体去读取这片区域的数据是 createRecordReader() 实现的。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        对于一个 Map 任务，JobTracker 会考虑 TaskTracker 的网络位置，并选取一个距离其输入分片文件的最近的 TaskTracker。在理想情况下，任务是数据本地化的（data-local）， 也就是任务运行在输入分片所在的节点上。同样，任务也可能是机器本地化的；任务和输入分片在同一个机架，但不在同一个节点上。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        对于Reduce 任务，JobTracker 简单地从待运行的 Reduce 任务列表中选取下一个来运行，用不着考虑数据段本地化。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        createRecordReader() 按照必然格式读取响应数据，接受 Split 块，返回读取记录的结果，操作代码如下。</p>
<pre><code class="language-html">public RecordReader<span class="hljs-tag" style="font-family:'微软雅黑', 'Microsoft YaHei';"><span class="hljs-tag">&lt; </span><span class="hljs-attribute" style="color:rgb(181,137,0);"><span class="hljs-tag"><span class="hljs-attribute">ImmutableBytesWritable</span></span></span><span class="hljs-tag">,</span><span class="hljs-attribute" style="color:rgb(181,137,0);"><span class="hljs-tag"><span class="hljs-attribute">Result</span></span></span><span class="hljs-tag">&gt;</span></span> createRecordReader(InputSplit split,TaskAttemptContext context){
Scan scan = new Scan(this.scan);
scan.setStartRow(tableSplit.getStartRow());
scan.setStopRow(tableSplit.getEndRow());
tableRecorderReader.setScan(scan);
tableRecorderReader.setHTable(table);
tableRecorderReader.init();
return tableRecorderReader;
		  }
		  </code></pre>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        tableRecorderReader.init() 返回的是这个分块的起始 Row Key 的记录；RecordReader 将一个 Split 解析成 &lt; Key, Value&gt; 的形式 提供给 map 函数，Key 就是Row Key，Value 就是对应的一行数据。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        RecorderReader 用于在划分中读取 &lt; Key，Value&gt; 对。RecorderReader 有5 个虚方法，下面分别进行介绍。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        1、initialize：初始化，输入参数包括该 Reader 工作的数据划分 InputSplit 和 Job 的上下文 context。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        2、nextKey：得到输入的下一个　Key，如果数据划分已经没有新的记录，返回空。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        3、nextValue：得到 Key 对应的 Value，必须在调用 nextKey 后调用。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        4、 getProgress：得到现在的进度。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        5、close：来自 java.io 的Closeable 接口，用于清理 RecorderReader。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        在 MapReduce 驱动中调用 TableInputFormat 的类：</p>
<pre><code class="language-html">job.setInputFormatClass(TableInputFormat.class);</code></pre>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        使用以下方法就不需要再单独定义。</p>
<pre><code class="language-html">tableMapReduceUtil.initTableReducerJob("daily_result", DailyReduce.class, job);</code></pre>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
initTableReducerJob() 方法完成一系列操作。</p>
<pre><code class="language-html">1) job.setOutputFormatClass(TableOutputFormat.class);设置输出格式。
2)conf.set(TableOutputFormat.OUTPUT_TABLE,table);设置输出表。
3) 初始化 partition。</code></pre>
</div>
</div>
<div class="item" id="item4">
<div class="row">
<h3 class="jquery-notebook editor" style="font-weight:normal;line-height:1.1;color:inherit;font-size:24px;min-height:0px;">
向 HBase 中写入数据</h3>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        本节介绍利用 MapReduce 操作 HBase，首先介绍如何上传数据，借助最熟悉的 WordCount 案例，将 WordCount 的结果存储到 HBase 而不是 HDFS。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        输入文件 test.txt 的内容为：</p>
<pre><code class="language-html">hello hadoop
hadoop is easy</code></pre>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        1) 编写 Mapper 函数。</p>
<pre><code class="language-html">public static class WordCountMapperHbase extends
			Mapper<span class="hljs-tag" style="font-family:'微软雅黑', 'Microsoft YaHei';">&lt; <span class="hljs-attribute" style="color:rgb(181,137,0);">Object</span>, <span class="hljs-attribute" style="color:rgb(181,137,0);">Text</span>, <span class="hljs-attribute" style="color:rgb(181,137,0);">ImmutableBytesWritable</span>, <span class="hljs-attribute" style="color:rgb(181,137,0);">IntWritable</span>&gt;</span> {
		private final static IntWritable one = new IntWritable(1);
		private Text word = new Text();

		public void map(Object key, Text value, Context context)
				throws IOException, InterruptedException {
			StringTokenizer itr = new StringTokenizer(value.toString());
			while (itr.hasMoreTokens()) {
				word.set(itr.nextToken());
				//输出到hbase的key类型为ImmutableBytesWritable
				context.write(new ImmutableBytesWritable(Bytes.toBytes(word.toString())), one);
			}
		}
	}</code></pre>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        2) 编写 Reducer 类。</p>
<pre><code class="language-html">public class WordCountReducerHbase extends TableReducer<span class="hljs-tag" style="font-family:'微软雅黑', 'Microsoft YaHei';">&lt; <span class="hljs-attribute" style="color:rgb(181,137,0);">ImmutableBytesWritable</span>, <span class="hljs-attribute" style="color:rgb(181,137,0);">IntWritable</span>, <span class="hljs-attribute" style="color:rgb(181,137,0);">ImmutableBytesWritable</span>&gt;</span> {  
		private IntWritable result = new IntWritable();
        public void reduce(ImmutableBytesWritable key, Iterable<span class="hljs-tag" style="font-family:'微软雅黑', 'Microsoft YaHei';">&lt; <span class="hljs-attribute" style="color:rgb(181,137,0);">IntWritable</span>&gt;</span> values, Context context)  
                throws IOException, InterruptedException {  
        	int sum = 0;
			for (IntWritable val : values) {
				sum += val.get();
			}
			Put put = new Put(key.get());//put 实例化  key代表主键，每个单词存一行
			//三个参数分别为  列簇为content，列修饰符为count，列值为词频
			put.add(Bytes.toBytes("content"), Bytes.toBytes("count"), Bytes.toBytes(String.valueOf(sum)));
			context.write(key , put);
        }  
    }</code></pre>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        3) 编写驱动类。</p>
<pre><code class="language-html">import java.io.IOException;
import java.util.StringTokenizer;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.HBaseConfiguration;
import org.apache.hadoop.hbase.HColumnDescriptor;
import org.apache.hadoop.hbase.HTableDescriptor;
import org.apache.hadoop.hbase.client.HBaseAdmin;
import org.apache.hadoop.hbase.client.Put;
import org.apache.hadoop.hbase.io.ImmutableBytesWritable;
import org.apache.hadoop.hbase.mapreduce.TableMapReduceUtil;
import org.apache.hadoop.hbase.mapreduce.TableReducer;
import org.apache.hadoop.hbase.util.Bytes;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
/**
 * 
 *  将hdfs中的数据导入hbase
 *
 */
public class MapReduceWriteHbaseDriver {
public static void main(String[] args)throws Exception {  
		String tableName = "wordcount";//hbase 数据库表名
        Configuration conf=HBaseConfiguration.create(); //实例化Configuration 
        conf.set("hbase.zookeeper.quorum", "dajiangtai"); 
   	    conf.set("hbase.zookeeper.property.clientPort", "2181");//端口号
   	    
   	    //如果表已经存在就先删除
   	    HBaseAdmin admin = new HBaseAdmin(conf);
   	    if(admin.tableExists(tableName)){
   	    	admin.disableTable(tableName);
   	    	admin.deleteTable(tableName);
   	    }
   	    
   	    HTableDescriptor htd = new HTableDescriptor(tableName);
   	    HColumnDescriptor hcd = new HColumnDescriptor("content");
   	    htd.addFamily(hcd);//创建列簇
   	    admin.createTable(htd);//创建表
   	    
        Job job=new Job(conf,"import from hdfs to hbase");  
        job.setJarByClass(MapReduceWriteHbaseDriver.class);  
        
        job.setMapperClass(WordCountMapperHbase.class);  

        //设置插入hbase时的相关操作
        TableMapReduceUtil.initTableReducerJob(tableName, WordCountReducerHbase.class, job, null, null, null, null, false);

        job.setMapOutputKeyClass(ImmutableBytesWritable.class);  
        job.setMapOutputValueClass(IntWritable.class);  
        
        job.setOutputKeyClass(ImmutableBytesWritable.class);  
        job.setOutputValueClass(Put.class);
        
        FileInputFormat.addInputPaths(job, "hdfs://dajiangtai:9000/dajiangtai/test.txt");  
        System.exit(job.waitForCompletion(true) ? 0 : 1);  
  
    }
}</code></pre>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
数据插入hbase数据库后，查询结果如下所示。</p>
<pre><code class="language-html">hbase(main):003:0&gt; scan 'wordcount'
ROW                                              COLUMN+CELL                                                                                                                                   
 easy                                            column=content:count, timestamp=1439181396202, value=1                                                                                        
 hadoop                                          column=content:count, timestamp=1439181396202, value=2                                                                                        
 hello                                           column=content:count, timestamp=1439181396202, value=1                                                                                        
 is                                              column=content:count, timestamp=1439181396202, value=1                                                                                        
4 row(s) in 0.3890 seconds
		</code></pre>
<h3 class="jquery-notebook editor" style="font-weight:normal;line-height:1.1;color:inherit;font-size:24px;min-height:0px;">
读取 HBase 中的数据</h3>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        下面介绍如何读取 HBase 中的数据。读取数据比较简单，编写 Mapper 函数，读取 &lt; Key，Value&gt; 值，通过 Reducer 函数直接输出得到的结果就行了。</p>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        1) 编写 Mapper 函数。</p>
<pre><code class="language-html">public  class WordCountHBaseMapper extends TableMapper<span class="hljs-tag" style="font-family:'微软雅黑', 'Microsoft YaHei';">&lt; <span class="hljs-attribute" style="color:rgb(181,137,0);">Text</span>, <span class="hljs-attribute" style="color:rgb(181,137,0);">Text</span>&gt;</span> {

		@Override
		protected void map(ImmutableBytesWritable key, Result values,
				Context context) throws IOException, InterruptedException {
			StringBuffer sb = new StringBuffer("");
			//获取列族content下面所有的值
			for (java.util.Map.Entry<span class="hljs-tag" style="font-family:'微软雅黑', 'Microsoft YaHei';">&lt; <span class="hljs-attribute" style="color:rgb(181,137,0);">byte</span>[], <span class="hljs-attribute" style="color:rgb(181,137,0);">byte</span>[]&gt;</span> value : values
					.getFamilyMap("content".getBytes()).entrySet()) {
				String str = new String(value.getValue());
				if (str != null) {
					sb.append(str);
				}
				context.write(new Text(key.get()), new Text(new String(sb)));
			}
		}

	}</code></pre>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        2) 实现 Reducer 类。</p>
<pre><code class="language-html">public  class WordCountHBaseReducer extends
			Reducer<span class="hljs-tag" style="font-family:'微软雅黑', 'Microsoft YaHei';">&lt; <span class="hljs-attribute" style="color:rgb(181,137,0);">Text</span>, <span class="hljs-attribute" style="color:rgb(181,137,0);">Text</span>, <span class="hljs-attribute" style="color:rgb(181,137,0);">Text</span>, <span class="hljs-attribute" style="color:rgb(181,137,0);">Text</span>&gt;</span> {
		private Text result = new Text();

		public void reduce(Text key, Iterable<span class="hljs-tag" style="font-family:'微软雅黑', 'Microsoft YaHei';">&lt; <span class="hljs-attribute" style="color:rgb(181,137,0);">Text</span>&gt;</span> values,
				Context context) throws IOException, InterruptedException {
			for (Text val : values) {
				result.set(val);
				context.write(key, result);
			}
			
		}
	}</code></pre>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
        3) 编写驱动类。</p>
<pre><code class="language-html">import java.io.IOException;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.hbase.HBaseConfiguration;
import org.apache.hadoop.hbase.client.Result;
import org.apache.hadoop.hbase.client.Scan;
import org.apache.hadoop.hbase.io.ImmutableBytesWritable;
import org.apache.hadoop.hbase.mapreduce.TableMapReduceUtil;
import org.apache.hadoop.hbase.mapreduce.TableMapper;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
/*
 * 读取hbase中的数据
 */
public class MapReduceReaderHbaseDriver {
public static void main(String[] args)throws Exception {  
		String tableName = "wordcount";//hbase表名称
        Configuration conf=HBaseConfiguration.create(); //实例化 Configuration 
        conf.set("hbase.zookeeper.quorum", "dajiangtai"); //hbase服务地址
   	    conf.set("hbase.zookeeper.property.clientPort", "2181");//端口号
   	    
   	    
        Job job=new Job(conf,"import from hbase to hdfs");  
        job.setJarByClass(MapReduceReaderHbaseDriver.class);  
        
        job.setReducerClass(WordCountHBaseReducer.class); 
        //设置读取hbase时的相关操作
        TableMapReduceUtil.initTableMapperJob(tableName, new Scan(), WordCountHBaseMapper.class,  Text.class, Text.class, job, false);
        
        FileOutputFormat.setOutputPath(job, new Path("hdfs://dajiangtai:9000/dajiangtai/out"));  
        System.exit(job.waitForCompletion(true) ? 0 : 1);  
  
    }
}</code></pre>
<p class="jquery-notebook editor" style="line-height:38px;font-size:18px;min-height:0px;">
从hbase读取数据，输出到hdfs的数据如下所示。</p>
<pre><code class="language-html">easy	1
hadoop	2
hello	1
is	1</code></pre>
</div>
</div>
</div>
            </div>
                </div>