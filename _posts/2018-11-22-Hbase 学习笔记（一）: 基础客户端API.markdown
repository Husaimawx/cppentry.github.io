---
layout:     post
title:      Hbase 学习笔记（一）: 基础客户端API
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<p>转自：<a href="http://ygydaiaq-gmail-com.iteye.com/blog/1709398" rel="nofollow">http://ygydaiaq-gmail-com.iteye.com/blog/1709398</a></p>
<p><br></p>
<p></p>
<div class="blog_title" style="font-family:Helvetica, Tahoma, Arial, sans-serif;line-height:18px;">
<h3 style="font-size:16px;line-height:1.5em;">
<a href="http://ygydaiaq-gmail-com.iteye.com/blog/1709398" rel="nofollow" style="color:rgb(16,138,198);">Hbase 学习笔记（一）: 基础客户端API</a><span class="actions" style="font-style:italic;"></span></h3>
<strong>博客分类：</strong> 

<a href="http://ygydaiaq-gmail-com.iteye.com/category/253868" rel="nofollow" style="color:rgb(16,138,198);">Hbase</a><div class="news_tag" style="clear:both;line-height:20px;"><a href="http://www.iteye.com/blogs/tag/Hbase" rel="nofollow" style="color:rgb(255,255,255);text-decoration:none;display:inline-block;background-color:rgb(170,181,195);">Hbase</a><a href="http://www.iteye.com/blogs/tag/%E7%AC%94%E8%AE%B0" rel="nofollow" style="color:rgb(255,255,255);text-decoration:none;display:inline-block;background-color:rgb(170,181,195);">笔记</a></div>
</div>
<div id="blog_content" class="blog_content" style="font-size:14px;line-height:1.8em;font-family:Helvetica, Tahoma, Arial, sans-serif;">
<p>
一、环境</p>
<p>
  在Hadoop上快速搭建Hbase环境非常简单，下载软件包解压以后写好配置文件就可以直接运行了，不多作叙述。</p>
<p>
 </p>
<p>
二、基础客户端API</p>
<p>
1、Bytes类</p>
<p>
    Hbase中所有的值都是以字节数组的形式存在的，所以在使用客户端API和Hbase交互的过程中难免会经常的要操作字节数组，这里Hbase提供了一个工具类，Bytes类。其中有很多的静态方法可以方便的将各种类型的值转换成字节数组，同时也可以将字节数组转换成对应的类型。</p>
<p>
 </p>
<p>
2、KeyValue类</p>
<p>
    KeyValue提供了一个Hbase中键值对的抽象，我们都知道Hbase是面向列的数据库，其中的数据是以键值对K-V的形式存在，KeyValue就是一个完全的抽象。KeyValue封装了一个单元数据的完整坐标（Key）：主键（row key）、簇（Family）、列（Qualifier），版本（Timestamp）和值（Value）</p>
<p>
 </p>
<p>
3、Put方法</p>
<p>
    Hbase提供一个Put类，用于封装插入的逻辑。插入时必须制定主键（Row Key）的值，所以构造方法中必须提供主键值。</p>
<p>
 </p>
<div class="dp-highlighter" style="font-family:Monaco, 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', Consolas, 'Courier New', monospace;font-size:12px;width:679px;overflow:auto;margin-left:9px;background-color:transparent;">
<div class="bar">
<div class="tools" style="font-weight:bold;">Java代码  <a title="收藏这段代码" style="color:rgb(16,138,198);text-decoration:underline;"><img class="star" src="http://ygydaiaq-gmail-com.iteye.com/images/icon_star.png" alt="收藏代码" style="border:0px;"></a></div>
</div>
<ol start="1" class="dp-j" style="font-size:1em;line-height:1.4em;border:1px solid rgb(209,215,220);color:rgb(43,145,175);"><li style="font-size:1em;border-left-width:1px;border-left-style:solid;border-left-color:rgb(209,215,220);line-height:18px;background-color:rgb(250,250,250);">
<span style="color:#000000;">Put(<span class="keyword" style="color:rgb(127,0,85);font-weight:bold;">byte</span>[] row)  </span></li><li style="font-size:1em;border-left-width:1px;border-left-style:solid;border-left-color:rgb(209,215,220);line-height:18px;background-color:rgb(250,250,250);">
<span style="color:#000000;">Put(<span class="keyword" style="color:rgb(127,0,85);font-weight:bold;">byte</span>[] row, RowLock)  </span></li><li style="font-size:1em;border-left-width:1px;border-left-style:solid;border-left-color:rgb(209,215,220);line-height:18px;background-color:rgb(250,250,250);">
<span style="color:#000000;">...  </span></li></ol></div>
<p>
 </p>
<p>
 有了Put对象以后，就可以在对象中添加插入的信息</p>
<p>
 </p>
<div class="dp-highlighter" style="font-family:Monaco, 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', Consolas, 'Courier New', monospace;font-size:12px;width:679px;overflow:auto;margin-left:9px;background-color:transparent;">
<div class="bar">
<div class="tools" style="font-weight:bold;">Java代码  <a title="收藏这段代码" style="color:rgb(16,138,198);text-decoration:underline;"><img class="star" src="http://ygydaiaq-gmail-com.iteye.com/images/icon_star.png" alt="收藏代码" style="border:0px;"></a></div>
</div>
<ol start="1" class="dp-j" style="font-size:1em;line-height:1.4em;border:1px solid rgb(209,215,220);color:rgb(43,145,175);"><li style="font-size:1em;border-left-width:1px;border-left-style:solid;border-left-color:rgb(209,215,220);line-height:18px;background-color:rgb(250,250,250);">
<span style="color:#000000;">Put add(<span class="keyword" style="color:rgb(127,0,85);font-weight:bold;">byte</span>[] family, <span class="keyword" style="color:rgb(127,0,85);font-weight:bold;">byte</span>[] qualifier, <span class="keyword" style="color:rgb(127,0,85);font-weight:bold;">byte</span>[] value);  </span></li><li style="font-size:1em;border-left-width:1px;border-left-style:solid;border-left-color:rgb(209,215,220);line-height:18px;background-color:rgb(250,250,250);">
<span style="color:#000000;">Put add(<span class="keyword" style="color:rgb(127,0,85);font-weight:bold;">byte</span>[] family, <span class="keyword" style="color:rgb(127,0,85);font-weight:bold;">byte</span>[] qualifier, <span class="keyword" style="color:rgb(127,0,85);font-weight:bold;">long</span> ts, <span class="keyword" style="color:rgb(127,0,85);font-weight:bold;">byte</span>[] value); 为了提高执行效率，插入的操作可以设定一个缓冲区，缓存要插入的信息，超过阀值后才提交，减少和Server交互的次数。  </span></li></ol></div>
<p>
 </p>
<p>
缓冲区：缓冲区默认是关闭的，要调用table.setAutoFlush(true)显示的开启。并可以通过table.setWriteBufferSize(size)设定缓冲区的大小。除了这种方式以外，配置文件中提供静态的配置项可以配置缓冲区的大小。</p>
<p>
    开启缓冲区以后需要刷新才能让请求提交到Server。</p>
<p>
 </p>
<p>
    显式的提交（Explicit Flush）：调用table.flushCommits()方法可以显式的将缓冲区里的请求提交到Server</p>
<p>
    隐式的提交 (Implicit Flush) ：每一次调用table.put()或者table.setWriteBufferSize()方法都会触发一个检查当前的缓冲区是否超过阀值，如果超过了就会执行一次隐式的提交。另外，调用table.close()方法会强制将缓冲区内的请求提交。</p>
<p>
 </p>
<p>
批量提交（List of Puts）：Table提供批量提交的功能，可以一次提交多个插入请求</p>
<p>
 </p>
<div class="dp-highlighter" style="font-family:Monaco, 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', Consolas, 'Courier New', monospace;font-size:12px;width:679px;overflow:auto;margin-left:9px;background-color:transparent;">
<div class="bar">
<div class="tools" style="font-weight:bold;">Java代码  <a title="收藏这段代码" style="color:rgb(16,138,198);text-decoration:underline;"><img class="star" src="http://ygydaiaq-gmail-com.iteye.com/images/icon_star.png" alt="收藏代码" style="border:0px;"></a></div>
</div>
<ol start="1" class="dp-j" style="font-size:1em;line-height:1.4em;border:1px solid rgb(209,215,220);color:rgb(43,145,175);"><li style="font-size:1em;border-left-width:1px;border-left-style:solid;border-left-color:rgb(209,215,220);line-height:18px;background-color:rgb(250,250,250);">
<span style="color:#000000;"><span class="keyword" style="color:rgb(127,0,85);font-weight:bold;">void</span> put(List&lt;Put&gt; puts)  </span></li></ol></div>
<p>
     值得注意的是，这里实际提交的顺序是一定的，但是在服务器被执行的<span style="color:rgb(255,0,0);">顺序却是不可预知的</span>，因为服务器会根据负载等情况对请求的执行作优化，所以如果提交的请求对顺序有其他的要求应该作更加精细的提交。</p>
<p>
 </p>
<p>
    如果在批量提交的过程中有某些请求出现了错误（提交的数据不符合表定义、服务器故障），不会影响其他正常的请求，它们将被正常的提交并写入数据库。那些出现了错误的请求将导致客户端抛出异常，且没有成功执行的请求会被重新放进客户端的缓冲区（Write Buffer）里，等待客户端作进一步的处理。</p>
<p>
 </p>
<p>
CAS（Compare And Set）插入（这是一种无锁的安全性保证）：</p>
<p>
    CAS插入也是被支持的，客户端可以在插入前作比较确认目标记录没有被其他的请求修改再执行插入。这样的执行方式可以保证当你作read-bussiness-write的时候不会因为read之后有其他并行线程修改数据而导致你的业务出现错误。这是一种强大的执行方式，在并行、分布式的业务中。</p>
<p>
 </p>
<p>
4、Get方法</p>
<p>
    Hbase提供一个get方法来获取到指定主键的值。</p>
<p>
 </p>
<div class="dp-highlighter" style="font-family:Monaco, 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', Consolas, 'Courier New', monospace;font-size:12px;width:679px;overflow:auto;margin-left:9px;background-color:transparent;">
<div class="bar">
<div class="tools" style="font-weight:bold;">Java代码  <a title="收藏这段代码" style="color:rgb(16,138,198);text-decoration:underline;"><img class="star" src="http://ygydaiaq-gmail-com.iteye.com/images/icon_star.png" alt="收藏代码" style="border:0px;"></a></div>
</div>
<ol start="1" class="dp-j" style="font-size:1em;line-height:1.4em;border:1px solid rgb(209,215,220);color:rgb(43,145,175);"><li style="font-size:1em;border-left-width:1px;border-left-style:solid;border-left-color:rgb(209,215,220);line-height:18px;background-color:rgb(250,250,250);">
<span style="color:#000000;">Get(<span class="keyword" style="color:rgb(127,0,85);font-weight:bold;">byte</span>[] row)  </span></li><li style="font-size:1em;border-left-width:1px;border-left-style:solid;border-left-color:rgb(209,215,220);line-height:18px;background-color:rgb(250,250,250);">
<span style="color:#000000;">Get(<span class="keyword" style="color:rgb(127,0,85);font-weight:bold;">byte</span>[] row, RowLock rowLock)  </span></li></ol></div>
<p>
 </p>
<p>
   由于方法功能定义的限制，所以构造方法里都要求指定一个主键。查找的过程中，还可以附加其他的一些条件如簇名（Family），列名，版本等。</p>
<p>
 </p>
<div class="dp-highlighter" style="font-family:Monaco, 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', Consolas, 'Courier New', monospace;font-size:12px;width:679px;overflow:auto;margin-left:9px;background-color:transparent;">
<div class="bar">
<div class="tools" style="font-weight:bold;">Java代码  <a title="收藏这段代码" style="color:rgb(16,138,198);text-decoration:underline;"><img class="star" src="http://ygydaiaq-gmail-com.iteye.com/images/icon_star.png" alt="收藏代码" style="border:0px;"></a></div>
</div>
<ol start="1" class="dp-j" style="font-size:1em;line-height:1.4em;border:1px solid rgb(209,215,220);color:rgb(43,145,175);"><li style="font-size:1em;border-left-width:1px;border-left-style:solid;border-left-color:rgb(209,215,220);line-height:18px;background-color:rgb(250,250,250);">
<span style="color:#000000;">Result get(Get get)  </span></li></ol></div>
<p>
 </p>
<p>
    HTable的get方法会返回一个Result类，封装了获取的值的全部信息。Result提供了三种方法来遍历数据</p>
<p>
 </p>
<div class="dp-highlighter" style="font-family:Monaco, 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', Consolas, 'Courier New', monospace;font-size:12px;width:679px;overflow:auto;margin-left:9px;background-color:transparent;">
<div class="bar">
<div class="tools" style="font-weight:bold;">Java代码  <a title="收藏这段代码" style="color:rgb(16,138,198);text-decoration:underline;"><img class="star" src="http://ygydaiaq-gmail-com.iteye.com/images/icon_star.png" alt="收藏代码" style="border:0px;"></a></div>
</div>
<ol start="1" class="dp-j" style="font-size:1em;line-height:1.4em;border:1px solid rgb(209,215,220);color:rgb(43,145,175);"><li style="font-size:1em;border-left-width:1px;border-left-style:solid;border-left-color:rgb(209,215,220);line-height:18px;background-color:rgb(250,250,250);">
<span style="color:#000000;"><span class="keyword" style="color:rgb(127,0,85);font-weight:bold;">byte</span>[] getValue(<span class="keyword" style="color:rgb(127,0,85);font-weight:bold;">byte</span>[] family, <span class="keyword" style="color:rgb(127,0,85);font-weight:bold;">byte</span>[] qualifier)  </span></li><li style="font-size:1em;border-left-width:1px;border-left-style:solid;border-left-color:rgb(209,215,220);line-height:18px;background-color:rgb(250,250,250);">
<span style="color:#000000;">KeyValue[] raw()  </span></li><li style="font-size:1em;border-left-width:1px;border-left-style:solid;border-left-color:rgb(209,215,220);line-height:18px;background-color:rgb(250,250,250);">
<span style="color:#000000;">List&lt;KeyValue&gt; list()  </span></li></ol></div>
<p>
    即，可以通过指定簇名和列名来得到指定的值，或者把整个返回结果转换成为数组或List来遍历。不管是哪一种方法，都可以获取到全部的数据，可以根据需求灵活运用。</p>
<p>
 </p>
<p>
 </p>
<p>
批量提交（List of Gets）：同put一样，get也有批量提交的方法</p>
<p>
 </p>
<div class="dp-highlighter" style="font-family:Monaco, 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', Consolas, 'Courier New', monospace;font-size:12px;width:679px;overflow:auto;margin-left:9px;background-color:transparent;">
<div class="bar">
<div class="tools" style="font-weight:bold;">Java代码  <a title="收藏这段代码" style="color:rgb(16,138,198);text-decoration:underline;"><img class="star" src="http://ygydaiaq-gmail-com.iteye.com/images/icon_star.png" alt="收藏代码" style="border:0px;"></a></div>
</div>
<ol start="1" class="dp-j" style="font-size:1em;line-height:1.4em;border:1px solid rgb(209,215,220);color:rgb(43,145,175);"><li style="font-size:1em;border-left-width:1px;border-left-style:solid;border-left-color:rgb(209,215,220);line-height:18px;background-color:rgb(250,250,250);">
<span style="color:#000000;">Result[] get&lt;List&lt;Get&gt; gets&gt;  </span></li></ol></div>
<p>
 </p>
<p>
 不同于put的是，一旦集合中有一个无效的get请求将返回一个exception，而所有的get请求都将失效而不会返回任何数据。</p>
<p>
 </p>
<p>
Delete方法</p>
<p>
   Hbase提供delete方法来删除指定的数据</p>
<p>
    类似于get方法，delete方法需要主键，而其他的条件是任选的，但是不同的条件将带来不同的执行结果。</p>
<p>
 </p>
<div class="dp-highlighter" style="font-family:Monaco, 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', Consolas, 'Courier New', monospace;font-size:12px;width:679px;overflow:auto;margin-left:9px;background-color:transparent;">
<div class="bar">
<div class="tools" style="font-weight:bold;">Java代码  <a title="收藏这段代码" style="color:rgb(16,138,198);text-decoration:underline;"><img class="star" src="http://ygydaiaq-gmail-com.iteye.com/images/icon_star.png" alt="收藏代码" style="border:0px;"></a></div>
</div>
<ol start="1" class="dp-j" style="font-size:1em;line-height:1.4em;border:1px solid rgb(209,215,220);color:rgb(43,145,175);"><li style="font-size:1em;border-left-width:1px;border-left-style:solid;border-left-color:rgb(209,215,220);line-height:18px;background-color:rgb(250,250,250);">
<span style="color:#000000;">Delete deleteFamily(<span class="keyword" style="color:rgb(127,0,85);font-weight:bold;">byte</span>[] family)  </span></li><li style="font-size:1em;border-left-width:1px;border-left-style:solid;border-left-color:rgb(209,215,220);line-height:18px;background-color:rgb(250,250,250);">
<span style="color:#000000;">Delete deleteColumns(<span class="keyword" style="color:rgb(127,0,85);font-weight:bold;">byte</span>[] family, <span class="keyword" style="color:rgb(127,0,85);font-weight:bold;">byte</span>[] qualifier)  </span></li><li style="font-size:1em;border-left-width:1px;border-left-style:solid;border-left-color:rgb(209,215,220);line-height:18px;background-color:rgb(250,250,250);">
<span style="color:#000000;">Delete deleteColumn(<span class="keyword" style="color:rgb(127,0,85);font-weight:bold;">byte</span>[] family, <span class="keyword" style="color:rgb(127,0,85);font-weight:bold;">byte</span>[] qualifier)  </span></li></ol></div>
<p>
 </p>
<p>
    没有任意任选条件被调用时，将删除所有具有row key的数据</p>
<p>
    当指定的是单一的column时，对应column的最近一个版本的数据将被删除</p>
<p>
    当指定的是columns时，对应的column的所有值将被删除</p>
<p>
    当指定的是family时，对应的整个family的所有值将被删除</p>
<p>
 </p>
<p>
    Delete也有类似的批量操作的方法，同样的，执行顺序是不可预知的。</p>
<p>
    Delete还有类似的CAS的操作，值得注意的是，<span style="color:rgb(255,0,0);">compare和delete的必须是同一行数据</span>。</p>
<p>
 </p>
<p>
BatchOperations（批量操作）</p>
<p>
    这里的批量操作和上文介绍的批量操作很类似，但是这里是最泛化的批量操作</p>
<p>
 </p>
<div class="dp-highlighter" style="font-family:Monaco, 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', Consolas, 'Courier New', monospace;font-size:12px;width:679px;overflow:auto;margin-left:9px;background-color:transparent;">
<div class="bar">
<div class="tools" style="font-weight:bold;">Java代码  <a title="收藏这段代码" style="color:rgb(16,138,198);text-decoration:underline;"><img class="star" src="http://ygydaiaq-gmail-com.iteye.com/images/icon_star.png" alt="收藏代码" style="border:0px;"></a></div>
</div>
<ol start="1" class="dp-j" style="font-size:1em;line-height:1.4em;border:1px solid rgb(209,215,220);color:rgb(43,145,175);"><li style="font-size:1em;border-left-width:1px;border-left-style:solid;border-left-color:rgb(209,215,220);line-height:18px;background-color:rgb(250,250,250);">
<span style="color:#000000;"><span class="keyword" style="color:rgb(127,0,85);font-weight:bold;">void</span> batch(List&lt;Row&gt; actions)  </span></li></ol></div>
<p>
 </p>
<p>
    可以看出，不论是Put，还是Get都是Row的子类。</p>
<p>
    值得注意的是，在批量操作中，<span style="color:rgb(255,0,0);">客户端缓冲区将是不会被使用的</span>。</p>
 
<p>
行锁（Row Lock）</p>
<p>
    在上文的API中，都有可选的rowLock参数，这是显式的行锁，当业务需要强一致性的时候可以考虑使用，显式的行锁可以保证一个插入请求成为一个互斥的独占的请求。当一行数据被锁住的时候，其他的请求都将被阻塞，直到行锁被释放或者阻塞超(这个超时时间可以再配置文件中配置)。Hbase其实也提供有一个隐式的行锁，如果请求没有提供显式的行锁，Hbase将启用隐式的行锁，保证插入操作的原子性。</p>
<p>
    另外，读取数据是不需要锁的，所以写时的锁不会影响读的性能。</p>
<p>
 </p>
<p>
Scan方法</p>
<p>
    除了Get方法外，Hbase提供查找功能更加强大的Scan方法。Get是根据指定的row key来查找对应的数据，而Scan方法则是根据一系列的条件来查找。</p>
<p>
    Scan()</p>
<div class="dp-highlighter" style="font-family:Monaco, 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', Consolas, 'Courier New', monospace;font-size:12px;width:679px;overflow:auto;margin-left:9px;background-color:transparent;">
<div class="bar">
<div class="tools" style="font-weight:bold;">Java代码  <a title="收藏这段代码" style="color:rgb(16,138,198);text-decoration:underline;"><img class="star" src="http://ygydaiaq-gmail-com.iteye.com/images/icon_star.png" alt="收藏代码" style="border:0px;"></a></div>
</div>
<ol start="1" class="dp-j" style="font-size:1em;line-height:1.4em;border:1px solid rgb(209,215,220);color:rgb(43,145,175);"><li style="font-size:1em;border-left-width:1px;border-left-style:solid;border-left-color:rgb(209,215,220);line-height:18px;background-color:rgb(250,250,250);">
<span style="color:#000000;">Scan(<span class="keyword" style="color:rgb(127,0,85);font-weight:bold;">byte</span>[] startKey, Filter filter)  </span></li><li style="font-size:1em;border-left-width:1px;border-left-style:solid;border-left-color:rgb(209,215,220);line-height:18px;background-color:rgb(250,250,250);">
<span style="color:#000000;">Scan(<span class="keyword" style="color:rgb(127,0,85);font-weight:bold;">byte</span>[] startKey, <span class="keyword" style="color:rgb(127,0,85);font-weight:bold;">byte</span>[] endKey)  </span></li><li style="font-size:1em;border-left-width:1px;border-left-style:solid;border-left-color:rgb(209,215,220);line-height:18px;background-color:rgb(250,250,250);">
<span style="color:#000000;">Scan(<span class="keyword" style="color:rgb(127,0,85);font-weight:bold;">byte</span>[] startKey)  </span></li></ol></div>
<p>
    查找的范围仍然是根据主键来确定， 不带参数的Scan表示将查找整个表，而指定了start和end的Scan则只扫描开始和结束范围内的数据。 Filter参数则可以定义更加复杂的查询条件，满足查询需求，这部分以后再讨论。</p>
<p>
    Scan中也提供像Get一样的简单的通过指定簇名和列名等条件来查找，但是更多的用法是定义自己的Filter来查找。所以这里不对Scan的简单操作作过多纠缠。</p>
<p>
    Scan的返回结果为ResultScaner，客户端可以把ResultScaner简单的看作一个Result的集合，但是实际上，ResultScaner比Result要复杂很多。由于Scan是大规模的查找，所以其返回的结果可以也是一个很大的数据集，所以如果让这样大的一个数据集一次性返回给客户端，将给内存和网络造成很大的负担，所以ResultScaner作为一个返回结果，实际上持有一个RPC连接，使客户端在处理结果集的时候可以一批一批的处理，而不是一次性将所有返回结果接受。</p>
<p>
</p>
<div class="dp-highlighter" style="font-family:Monaco, 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', Consolas, 'Courier New', monospace;font-size:12px;width:679px;overflow:auto;margin-left:9px;background-color:transparent;">
<div class="bar">
<div class="tools" style="font-weight:bold;">Java代码  <a title="收藏这段代码" style="color:rgb(16,138,198);text-decoration:underline;"><img class="star" src="http://ygydaiaq-gmail-com.iteye.com/images/icon_star.png" alt="收藏代码" style="border:0px;"></a></div>
</div>
<ol start="1" class="dp-j" style="font-size:1em;line-height:1.4em;border:1px solid rgb(209,215,220);color:rgb(43,145,175);"><li style="font-size:1em;border-left-width:1px;border-left-style:solid;border-left-color:rgb(209,215,220);line-height:18px;background-color:rgb(250,250,250);">
<span style="color:#000000;">Result next()  </span></li><li style="font-size:1em;border-left-width:1px;border-left-style:solid;border-left-color:rgb(209,215,220);line-height:18px;background-color:rgb(250,250,250);">
<span style="color:#000000;">Result[] next(<span class="keyword" style="color:rgb(127,0,85);font-weight:bold;">int</span> nbRows)  </span></li><li style="font-size:1em;border-left-width:1px;border-left-style:solid;border-left-color:rgb(209,215,220);line-height:18px;background-color:rgb(250,250,250);">
<span style="color:#000000;"><span class="keyword" style="color:rgb(127,0,85);font-weight:bold;">void</span> clos()  </span></li></ol></div>
    用于要分批次的处理数据，ResultScaner实际上要持有Server的资源，所以用完以后要关闭以释放资源。
<p>
    Hbase提供了两个机制来条件ResultScaner的性能。首先是Scaner Caching缓存（可以在配置文件中配置），这里的缓存定义了一次RPC返回客户端的行数。定义一个更大的缓存数无疑可以提高客户端遍历的性能，但是也有坏处：这将加大客户端内存的压力，并且每一次RPC调用花的时间会更长，因为要使用网络来传输更多的数据。Scaner有一个超时机制，一次RPC用的时间超过了这个阀值的时候，客户端就会抛出一个异常。所以应该根据实际情况来定义超时阀值和缓存数。另外一个机制叫Scaner Batch批次，
 缓存是从行的角度来定义一次RPC返回的数据，但是如果返回的结果中包含有具有很多列的行，同样会对内存和网络造成压力，Batch就从列的角度来定义，Batch定义的是一次性最多传输的列的数量。</p>
<p>
    根据情况合理的设定缓冲和Batch可以使处理查找结果变得高效。</p>
</div>
<br><p></p>
            </div>
                </div>