---
layout:     post
title:      Flume 架构及部署
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/HG_Harvey/article/details/78357298				</div>
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<h3 id="1flume概述">1.Flume概述</h3>

<p>Flume是由 Cloudera 提供的一个分布式、高可靠、高可用的服务，用于分布式的海量日志的高效收集、聚合、移动系统。简单来说，Flume 就是一个针对日志数据进行采集和汇总的一个工具（把日志从A地方移动到B地方）</p>

<p>Flume 官网：<a href="http://flume.apache.org/" rel="nofollow" target="_blank">http://flume.apache.org/</a> <br>
Flume 官方文档：<a href="http://flume.apache.org/FlumeUserGuide.html" rel="nofollow" target="_blank">http://flume.apache.org/FlumeUserGuide.html</a></p>

<p><strong>Flume 特点：</strong></p>

<p><strong>(1).可靠性</strong>：当节点出现故障时，日志能够被传送到其他节点上而不会丢失。Flume提供了三种级别的可靠性保障，从强到弱依次分别为：</p>

<p>①.end-to-end（收到数据agent首先将event写到磁盘上，当数据传送成功后，再删除；如果数据发送失败，可以重新发送）； <br>
②.Store on failure（这也是scribe采用的策略，当数据接收方crash时，将数据写到本地，待恢复后，继续发送）； <br>
③.Best effort（数据发送到接收方后，不会进行确认）。</p>

<p><strong>(2).可扩展性</strong>：Flume采用了三层架构，分别为agent，collector和storage，每一层均可以水平扩展所有agent和collector由master统一管理，这使得系统容易监控和维护，且master允许有多个（使用ZooKeeper进行管理和负载均衡），这就避免了单点故障问题。</p>

<p><strong>(3).可管理性</strong> <br>
①.所有agent和colletor由master统一管理，这使得系统便于维护。 <br>
②.多master情况，Flume利用ZooKeeper和gossip，保证动态配置数据的一致性。 <br>
③.用户可以在master上查看各个数据源或者数据流执行情况，且可以对各个数据源配置和动态加载。 <br>
④.Flume提供了web 和shell script command两种形式对数据流进行管理。①</p>

<p><strong>(4).功能可扩展性</strong> <br>
①.用户可以根据需要添加自己的agent，collector或者storage。 <br>
②.此外，Flume自带了很多组件，包括各种agent（file， syslog等），collector和storage（file，HDFS等）。</p>

<p><strong>(5).文档丰富，社区活跃</strong> <br>
Flume 是Apache下的一个顶级项目，已经成为 Hadoop 生态系统的标配，它的文档比较丰富，社区比较活跃，方便我们学习。</p>

<h3 id="2flume-架构">2.Flume 架构</h3>

<p><img src="https://img-blog.csdn.net/20171026182656232?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSEdfSGFydmV5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title=""></p>

<p><strong>Flume 架构介绍</strong></p>

<p>      Flume 最简单的部署单元叫做Flume Agent，Agent 是一个Java 应用程序，接收或者生成数据并缓冲数据，直到最终写入到Agent或者存储或索引系统。</p>

<p>      一个Flume Agent可以连接一个或多个其它的Agent，一个Agent也可以从一个或多个Agent接收数据，通过相互连接的多个Flume Agent，一个流作业被建立，这个Flume Agent链条可以用于将数据从一个位置移动到另一个位置——特别是，从生产数据的应用程序到HDFS、HBase等。</p>

<p><strong>每个Flume Agent有三个组件：Source、Channel、Sink</strong></p>

<p>      Source 专门用来收集数据，可以处理各种类型、各种格式的日志数据，比如avro、exec、HTTP、Kafka、Spooling Directory等</p>

<p>      Channel 是一个存储Source已经接收到的数据的缓冲区，简单来说就是对Source采集到数据进行缓存，可以缓存在memory、file、jdbc、Kafka等。</p>

<p>      Sink 用于把数据发送到目的地，目的地可以是：HDFS、Hive、HBase、ES、Kafka、Logger等</p>

<p><strong>Flume 运行机制</strong></p>

<p>      flume的核心就是一个agent，这个agent对外有两个进行交互的地方，一个是接受数据的输入——source，一个是数据的输出sink，sink负责将数据发送到外部指定的目的地。source接收到数据之后，将数据发送给channel，chanel作为一个数据缓冲区会临时存放这些数据，随后sink会将channel中的数据发送到指定的地方—-例如HDFS等，注意：只有在sink将channel中的数据成功发送出去之后，channel才会将临时数据进行删除，这种机制保证了数据传输的可靠性与安全性</p>

<h3 id="3flume-部署">3.Flume 部署</h3>

<p>目前Flume 的最新版本为1.8，笔者安装的是1.6，是Flume的一个经典版本，通常在生产环境中使用的就是这个版本，在安装Flume前，看先它的前置条件 <br>
(1).JDK1.7 <br>
(2).足够的内存 <br>
(3).足够的磁盘空间 <br>
(4).目录及文件要有读写权限</p>

<p>官网下载地址：<a href="http://archive.apache.org/dist/flume/" rel="nofollow" target="_blank">http://archive.apache.org/dist/flume/</a> <br>
从官网下载，或者在linux中使用下面的命令下载，然后解压</p>



<pre class="prettyprint"><code class=" hljs avrasm">$ wget http://archive<span class="hljs-preprocessor">.apache</span><span class="hljs-preprocessor">.org</span>/dist/flume/<span class="hljs-number">1.6</span><span class="hljs-number">.0</span>/apache-flume-<span class="hljs-number">1.6</span><span class="hljs-number">.0</span>-bin<span class="hljs-preprocessor">.tar</span><span class="hljs-preprocessor">.gz</span>
$ sudo tar -zxvf apache-flume-<span class="hljs-number">1.6</span><span class="hljs-number">.0</span>-bin<span class="hljs-preprocessor">.tar</span><span class="hljs-preprocessor">.gz</span>
$ sudo mv apache-flume-<span class="hljs-number">1.6</span><span class="hljs-number">.0</span>-bin /opt/flume</code></pre>

<p>flume 目录结构</p>

<p><img src="https://img-blog.csdn.net/20171026182956042?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSEdfSGFydmV5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title=""></p>

<p><strong>配置flume</strong></p>

<p>进入flume的conf目录下，拷贝flume-env.sh.template然后重命名为flume-env.sh</p>



<pre class="prettyprint"><code class=" hljs avrasm">$ sudo <span class="hljs-keyword">cp</span> flume-env<span class="hljs-preprocessor">.sh</span><span class="hljs-preprocessor">.template</span> flume-env<span class="hljs-preprocessor">.sh</span></code></pre>

<p>在flume-env.sh中配置jdk</p>



<pre class="prettyprint"><code class=" hljs bash"><span class="hljs-keyword">export</span> JAVA_HOME=/usr/java/jdk1.<span class="hljs-number">7.0</span></code></pre>

<p>配置环境变量</p>



<pre class="prettyprint"><code class=" hljs bash"><span class="hljs-comment"># Flume Environment Variable</span>
<span class="hljs-keyword">export</span> FLUME_HOME=/opt/flume
<span class="hljs-keyword">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$FLUME_HOME</span>/bin</code></pre>

<p>查看Flume 的命令帮助</p>



<pre class="prettyprint"><code class=" hljs haml">[hadoop@Master ~]$ flume-ng help
Usage: /opt/flume/bin/flume-ng &lt;command&gt; [options]...

commands:
  help                      display this help text
  agent                     run a Flume agent
  avro-client               run an avro Flume client
  version                   show Flume version info

global options:
  -<span class="ruby">-conf,-c &lt;conf&gt;          use configs <span class="hljs-keyword">in</span> &lt;conf&gt; directory
</span>  -<span class="ruby">-classpath,-<span class="hljs-constant">C</span> &lt;cp&gt;       append to the classpath
</span>  -<span class="ruby">-dryrun,-d               <span class="hljs-keyword">do</span> <span class="hljs-keyword">not</span> actually start <span class="hljs-constant">Flume</span>, just print the command
</span>  -<span class="ruby">-plugins-path &lt;dirs&gt;     colon-separated list of plugins.d directories. <span class="hljs-constant">See</span> the
</span>                            plugins.d section in the user guide for more details.
                            Default: $FLUME_HOME/plugins.d
  -<span class="ruby"><span class="hljs-constant">Dproperty</span>=value          sets a <span class="hljs-constant">Java</span> system property value
</span>  -<span class="ruby"><span class="hljs-constant">Xproperty</span>=value          sets a <span class="hljs-constant">Java</span> -<span class="hljs-constant">X</span> option
</span>
agent options:
  -<span class="ruby">-name,-n &lt;name&gt;          the name of this agent (required)
</span>  -<span class="ruby">-conf-file,-f &lt;file&gt;     specify a config file (required <span class="hljs-keyword">if</span> -z missing)
</span>  -<span class="ruby">-zkConnString,-z &lt;str&gt;   specify the <span class="hljs-constant">ZooKeeper</span> connection to use (required <span class="hljs-keyword">if</span> -f missing)
</span>  -<span class="ruby">-zkBasePath,-p &lt;path&gt;    specify the base path <span class="hljs-keyword">in</span> <span class="hljs-constant">ZooKeeper</span> <span class="hljs-keyword">for</span> agent configs
</span>  -<span class="ruby">-no-reload-conf          <span class="hljs-keyword">do</span> <span class="hljs-keyword">not</span> reload config file <span class="hljs-keyword">if</span> changed
</span>  -<span class="ruby">-help,-h                 display help text
</span>
avro-client options:
  -<span class="ruby">-rpcProps,-<span class="hljs-constant">P</span> &lt;file&gt;   <span class="hljs-constant">RPC</span> client properties file with server connection params
</span>  -<span class="ruby">-host,-<span class="hljs-constant">H</span> &lt;host&gt;       hostname to which events will be sent
</span>  -<span class="ruby">-port,-p &lt;port&gt;       port of the avro source
</span>  -<span class="ruby">-dirname &lt;dir&gt;        directory to stream to avro source
</span>  -<span class="ruby">-filename,-<span class="hljs-constant">F</span> &lt;file&gt;   text file to stream to avro source (<span class="hljs-function">default: </span>std input)
</span>  -<span class="ruby">-headerFile,-<span class="hljs-constant">R</span> &lt;file&gt; <span class="hljs-constant">File</span> containing event headers as key/value pairs on each new line
</span>  -<span class="ruby">-help,-h              display help text
</span>
  Either --rpcProps or both --host and --port must be specified.

Note that if &lt;conf&gt; directory is specified, then it is always included first
in the classpath.</code></pre>

<p>查看Flume 版本信息</p>



<pre class="prettyprint"><code class=" hljs oxygene">[hadoop@Master ~]$ flume-ng version
Flume <span class="hljs-number">1.6</span>.<span class="hljs-number">0</span>
Source code repository: https:<span class="hljs-comment">//git-wip-us.apache.org/repos/asf/flume.git</span>
Revision: <span class="hljs-number">2561</span>a23240a71ba20bf288c7c2cda88f443c2080
Compiled <span class="hljs-keyword">by</span> hshreedharan <span class="hljs-keyword">on</span> Mon May <span class="hljs-number">11</span> <span class="hljs-number">11</span>:<span class="hljs-number">15</span>:<span class="hljs-number">44</span> PDT <span class="hljs-number">2015</span>
<span class="hljs-keyword">From</span> source <span class="hljs-keyword">with</span> checksum b29e416802ce9ece3269d34233baf43f</code></pre>

<h3 id="4flume-简单使用">4.Flume 简单使用</h3>

<p>需求：从网络端口接受数据，输出到控制台</p>

<p>Agent选型：netcat+source + memory channel + logger sink</p>

<p>Flume中最重要的就是Agent配置文件的编写，如何编写，官网都有说明，下面是官网提供的一个Agent配置文件模板</p>



<pre class="prettyprint"><code class=" hljs avrasm"><span class="hljs-preprocessor"># example.conf: A single-node Flume configuration</span>

<span class="hljs-preprocessor"># Name the components on this agent</span>
a1<span class="hljs-preprocessor">.sources</span> = <span class="hljs-built_in">r1</span>
a1<span class="hljs-preprocessor">.sinks</span> = k1
a1<span class="hljs-preprocessor">.channels</span> = c1

<span class="hljs-preprocessor"># Describe/configure the source</span>
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.r</span>1<span class="hljs-preprocessor">.type</span> = netcat
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.r</span>1<span class="hljs-preprocessor">.bind</span> = localhost
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.r</span>1<span class="hljs-preprocessor">.port</span> = <span class="hljs-number">44444</span>

<span class="hljs-preprocessor"># Describe the sink</span>
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.k</span>1<span class="hljs-preprocessor">.type</span> = logger

<span class="hljs-preprocessor"># Use a channel which buffers events in memory</span>
a1<span class="hljs-preprocessor">.channels</span><span class="hljs-preprocessor">.c</span>1<span class="hljs-preprocessor">.type</span> = memory
a1<span class="hljs-preprocessor">.channels</span><span class="hljs-preprocessor">.c</span>1<span class="hljs-preprocessor">.capacity</span> = <span class="hljs-number">1000</span>
a1<span class="hljs-preprocessor">.channels</span><span class="hljs-preprocessor">.c</span>1<span class="hljs-preprocessor">.transactionCapacity</span> = <span class="hljs-number">100</span>

<span class="hljs-preprocessor"># Bind the source and sink to the channel</span>
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.r</span>1<span class="hljs-preprocessor">.channels</span> = c1
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.k</span>1<span class="hljs-preprocessor">.channel</span> = c1</code></pre>

<p>参照上述官网的配置，新建simple-example.conf文件，配置如下</p>



<pre class="prettyprint"><code class=" hljs avrasm"><span class="hljs-preprocessor"># Name the components on this agent</span>
simple-agent<span class="hljs-preprocessor">.sources</span> = netcat-source
simple-agent<span class="hljs-preprocessor">.sinks</span> = logger-sink
simple-agent<span class="hljs-preprocessor">.channels</span> = memory-channel

<span class="hljs-preprocessor"># Describe/configure the source</span>
simple-agent<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.netcat</span>-source<span class="hljs-preprocessor">.type</span> = netcat
simple-agent<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.netcat</span>-source<span class="hljs-preprocessor">.bind</span> = Master
simple-agent<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.netcat</span>-source<span class="hljs-preprocessor">.port</span> = <span class="hljs-number">44444</span>

<span class="hljs-preprocessor"># Describe the sink</span>
simple-agent<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.logger</span>-sink<span class="hljs-preprocessor">.type</span> = logger

<span class="hljs-preprocessor"># Use a channel which buffers events in memory</span>
simple-agent<span class="hljs-preprocessor">.channels</span><span class="hljs-preprocessor">.memory</span>-channel<span class="hljs-preprocessor">.type</span> = memory

<span class="hljs-preprocessor"># Bind the source and sink to the channel</span>
simple-agent<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.netcat</span>-source<span class="hljs-preprocessor">.channels</span> = memory-channel
simple-agent<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.logger</span>-sink<span class="hljs-preprocessor">.channel</span> = memory-channel</code></pre>

<p>配置完成后，输入如下命令来启动flume</p>



<pre class="prettyprint"><code class=" hljs haml">flume-ng agent \
-<span class="ruby">-conf <span class="hljs-variable">$FLUME_HOME</span>/conf \
</span>-<span class="ruby">-name simple-agent \
</span>-<span class="ruby">-conf-file <span class="hljs-variable">$FLUME_HOME</span>/config/simple-example.conf \
</span>-<span class="ruby"><span class="hljs-constant">Dflume</span>.root.logger=<span class="hljs-constant">INFO</span>,console</span></code></pre>

<p>参数说明： <br>
–conf：指定flume的配置文件所在目录 <br>
–name：指定Agent的名称 <br>
–conf-file：指定编写的flume配置文件 <br>
-Dflume.root.logger：指定日志级别</p>

<p>flume启动后，打印的日志中可以看到如下信息（部分日志）</p>



<pre class="prettyprint"><code class=" hljs haskell"><span class="hljs-type">Creating</span> <span class="hljs-keyword">instance</span> <span class="hljs-keyword">of</span> source netcat-source, <span class="hljs-typedef"><span class="hljs-keyword">type</span> netcat</span>
<span class="hljs-type">Creating</span> <span class="hljs-keyword">instance</span> <span class="hljs-keyword">of</span> sink: logger-sink, <span class="hljs-typedef"><span class="hljs-keyword">type</span>: logger</span>
<span class="hljs-type">Creating</span> <span class="hljs-keyword">instance</span> <span class="hljs-keyword">of</span> channel memory-channel <span class="hljs-typedef"><span class="hljs-keyword">type</span> memory</span>
<span class="hljs-type">Created</span> serverSocket:sun.nio.ch.<span class="hljs-type">ServerSocketChannelImpl</span>[/<span class="hljs-number">192.168</span><span class="hljs-number">.242</span><span class="hljs-number">.150</span>:<span class="hljs-number">44444</span>]</code></pre>

<p>输入jps命令可以查看到一个Application的进程，如果有这个进程，说明我们的flume启动成功了</p>



<pre class="prettyprint"><code class=" hljs ruby">[hadoop<span class="hljs-variable">@Master</span> ~]<span class="hljs-variable">$ </span>jps
<span class="hljs-number">3091</span> <span class="hljs-constant">Jps</span>
<span class="hljs-number">2806</span> <span class="hljs-constant">Application</span>
[hadoop<span class="hljs-variable">@Master</span> ~]<span class="hljs-variable">$ </span>jps -m
<span class="hljs-number">2806</span> <span class="hljs-constant">Application</span> --name simple-agent --conf-file /opt/flume/config/simple-example.conf
<span class="hljs-number">3101</span> <span class="hljs-constant">Jps</span> -m</code></pre>

<p>测试（启动一个telnet进程，telnet 数据输入）</p>



<pre class="prettyprint"><code class=" hljs ruby"><span class="hljs-variable">$ </span>telnet <span class="hljs-constant">Master</span> <span class="hljs-number">44444</span></code></pre>

<p><img src="https://img-blog.csdn.net/20171026183523690?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSEdfSGFydmV5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title=""></p>

<p>查看Flume控制台的输出（Event是Flume数据传输的基本单元，由可选的header和一个byte array的数据构成）</p>



<pre class="prettyprint"><code class=" hljs css"><span class="hljs-tag">Event</span>: <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">headers</span>:<span class="hljs-value">{</span></span></span>} <span class="hljs-tag">body</span>: 68 65 6<span class="hljs-tag">C</span> 6<span class="hljs-tag">C</span> 6<span class="hljs-tag">F</span> 0<span class="hljs-tag">D</span>            <span class="hljs-tag">hello</span>. }
<span class="hljs-tag">Event</span>: <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">headers</span>:<span class="hljs-value">{</span></span></span>} <span class="hljs-tag">body</span>: 66 6<span class="hljs-tag">C</span> 75 6<span class="hljs-tag">D</span> 65 0<span class="hljs-tag">D</span>            <span class="hljs-tag">flume</span>. }</code></pre>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>