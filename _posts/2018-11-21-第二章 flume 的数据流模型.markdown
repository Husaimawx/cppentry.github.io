---
layout:     post
title:      第二章 flume 的数据流模型
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<h3><span style="font-family:Times;font-size:14px;">1. flume 的基本概念</span></h3>
<p><span style="font-weight:normal;"><span style="font-family:Times;font-size:14px;">本文中所有与 </span><span style="font-family:Times;font-size:14px;"><em>flume </em></span><span style="font-family:Times;font-size:14px;">相关术语都采用斜体英文表示，这些术语的含义如下所示。</span></span></p>
<p><span style="font-size:14px;"><span style="font-family:Times;"><em>flume</em>             一个可靠的，分布式的，用于采集，聚合，传输海量日志数据的工具。</span></span></p>
<p><span style="font-size:14px;"><span style="font-family:Times;"><em>Web Server</em>   一个产生 <em>Events/数据 </em>的客户端。</span></span></p>
<p><span style="font-size:14px;"><span style="font-family:Times;"><em>Agent            flume </em>系统中的一个节点，它主要包含三个部件：<em>Source</em>, <em>Channel</em>, <em>Sink</em>。</span></span></p>
<p><span style="font-size:14px;"><span style="font-family:Times;"><em>Event</em>            事件，在 <em>flume-agent </em>内部传输的数据结构。一个 <em>Event </em>由 <em>Map&lt;String, String&gt;Headers</em> 和 <em>byte[] body</em> 组成，其中 <em>Headers</em> 保存了 <em>Event </em>的属性，<em>body</em> 保存了 <em>Event </em>的内容。</span></span></p>
<p><span style="font-size:14px;"><span style="font-family:Times;"><em>Source         Agent Source </em>用来接收 <em>WebServer </em>产生的 <em>Events</em>，以及其他 <em>flume-agent </em>中的 <em>Sink </em>产生的 <em>Events。</em></span></span></p>
<p><span style="font-size:14px;"><span style="font-family:Times;"><em>Channel       Source </em>将 <em>Events </em>放在 <em>Channel </em>中保存，<em>Channel </em>主要有两种，是 <em>MemoryChannel </em>和 <em>FileChannel，</em>分别将 <em>Events </em>存放在内存中和文件中。</span></span></p>
<p><span style="font-size:14px;"><span style="font-family:Times;"><em>Sink              Sink </em>用来消费 <em>Channel </em>内保存的 <em>Events，</em>然后将 <em>Events </em>发送出去。</span></span></p>
<p><span style="font-size:14px;"><span style="font-family:Times;"><em>Sinkgroups</em>   将多个 <em>Sink </em>组合在一起，形成 <em>Sinkgroups。</em></span></span></p>
<p><span style="font-size:14px;"><span style="font-family:Times;"><em>HDFS</em>           Hadoop分布式文件系统，它用来存储日志数据，也就是 <em>Sinks </em>发送出来的 <em>Events</em>。</span></span></p>
<h3><span style="font-size:14px;"><span style="font-family:Times;">2. flume 的数据流模型</span></span></h3>
<h4><span style="font-family:Times;font-size:14px;">(1) 单 Agent 单数据流模型</span></h4>
<div><span style="font-family:Times;font-size:14px;">在单个 Agent 内由单个 Source, Channel, Sink 建立一个单一的数据流模型，如下图1 所示，整个数据流为 Web Server --&gt; Source --&gt; Channel --&gt; Sink --&gt; HDFS。</span></div>
<p><span style="font-size:14px;"><img src="https://img-blog.csdn.net/20150423232339691" alt=""><br></span></p>
<p><span style="font-size:14px;"><span></span>图1 单 Agent 单数据流模型</span></p>
<h4><span style="font-family:Times;font-size:14px;">(2) 多 Agent 串行传输数据流模型</span></h4>
<p><span style="font-family:Times;"><span style="font-size:14px;">如下图 2 所示，多个 Agent 可以串在一起，将数据从 Agent foo 传输到 Agent bar，再传输到目的地。</span></span></p>
<p><span style="font-family:Times;font-size:14px;"><img src="https://img-blog.csdn.net/20150424215052247" alt=""><br></span></p>
<p><span style="font-family:Times;font-size:14px;"><span></span>图2 多 Agent 串行传输数据流模型</span></p>
<h4><span style="font-family:Times;"><span style="font-size:14px;">(3) 多 Agent 汇聚数据流模型</span></span></h4>
<p><span style="font-family:Times;"><span style="font-size:14px;">如下图 3 所示，我们将来自于位于不同服务器的 Agent1, Agent2, Agent3 收集到的数据 汇聚到一个中心节点 Agent4 上，再由 Agent4 统计将数据写入到 HDFS上。</span></span><span style="font-size:14px;font-family:Times;">通常这种情况下，我们称 Agent1, Agent2, Agent3
 为 flume_agent，称 Agent4 为 flume_collector，即汇聚节点的含义。</span></p>
<p><span style="font-family:Times;"><span style="font-size:14px;"><img src="https://img-blog.csdn.net/20150424215459888" alt=""><br></span></span></p>
<p><span style="font-family:Times;"><span style="font-size:14px;"><span></span>图3 多 Agent 汇聚数据流模型</span></span></p>
<h4><span style="font-family:Times;"><span style="font-size:14px;">(4) 单 Agent 多路数据流模型</span></span></h4>
<p></p>
<p><span style="font-size:14px;"><span style="font-family:Times;"><span style="font-family:Times;">一个 <em>Agent</em> 中可以由一个 <em>Source</em> ，多个 <em>Channels</em> ，多个 <em>Sinks</em> 组成多路数据流，其多路数据流模型如下图4所示。<br></span></span><span style="font-family:Times;"><span style="font-family:Times;">一个 <em>Source</em> 接收外部 <em>Events</em>，并将 <em>Events </em>发送到三路 <em>Channel </em>中去，然后不同的 <em>Sink </em>消费不同的 <em>Channel </em>内的 <em>Events </em>，再将 <em>Events </em>进行不同的处理。<br></span></span><span style="font-family:Times;"><span style="font-family:Times;"><em>Source </em>如何将 <em>Events</em> 发送到不同的 <em>Channel </em>中？这里 <em>flume</em> 采用了两种不同的策略，是 <em>replicating</em> 和 <em>multiplexing</em> 。<br></span></span><span style="font-family:Times;"><span style="font-family:Times;">其中 <em>replicating</em> 是 <em>Source</em> 将每个 <em>Event</em> 都发送到 <em>Channel</em> 中，这样就将 <em>Events</em> 复制成 3 份发到不同的地方去。<br></span></span><span style="font-family:Times;"><span style="font-family:Times;">其中 <em>multiplexing</em> 是 <em>Source</em> 根据一些映射关系，将不同种类的 <em>Event</em> 发送到不同的 <em>Channel</em> 中去，即将所有 <em>Events</em> 分成3份，分别发送到三个 <em>Channels</em>。</span></span></span></p>
<p><span style="font-size:14px;"><span style="font-family:Times;"><span style="font-family:Times;"><img src="https://img-blog.csdn.net/20150424215657194" alt=""><br></span></span></span></p>
<p><span style="font-size:14px;"><span style="font-family:Times;"><span style="font-family:Times;"><span></span>图4 单 Agent 多路数据流模型</span></span></span></p>
<h4><span style="font-family:Times;font-size:14px;">(5) Sinkgroups 数据流模型</span></h4>
<p><span style="font-family:Times;font-size:14px;">上面 4 种数据流模型，都会有同一个问题：一条数据流经过的所有节点，如果中间的某个节点 Down 之后，都会影响整个数据流断流。flume 内部提供了 sinkgroups 数据流模型，能够将下游多个节点组合成一个集群，其中集群中的某个节点 Down 之后，不影响数据流。</span></p>
<p><span style="font-family:Times;font-size:14px;">sinkgroups 将 sinks 组合在一起，通过两种策略从中选择一个 sink 来消费 channel。sinkgroups 提供的两种策略有 ：failover 和 loadbalance。</span></p>
<p><span style="font-family:Times;font-size:14px;"><span style="font-family:Times;">其中 <em>failover </em>机制，会将所有 <em>Sinks</em> 标识一个优先级，一个以优先级为序的 Map 保存着 活着的 <em>Sink</em>，一个队列保存着 失败的 <em>Sink</em>。</span><span style="font-family:Times;">每次都会选择优先级最高的活着的 <em>Sink</em> 来消费 <em>Channel</em> 的 <em>Events</em>。每过一段时间就对失败队列中的 <em>Sinks</em> 进行检测，如果变活之后，就将其插进
 活着的 <em>Sink</em> Map。</span></span></p>
<p><span style="font-family:Times;font-size:14px;"><span style="font-family:Times;">另一种 <em>load_balance</em>机制，在这种机制下，还有两种不同的策略，分别是 <em>round_robin</em> 和 <em>random</em>。则 <em>round_robin</em> 就是不断地轮询 <em>Sinkgroups</em> 内的 <em>Sinks</em>，已保证均衡。</span><span style="font-family:Times;"><em>random</em> 则是从 <em>Sinkgroups</em> 中的 <em>Sinks</em> 随机选择一个。</span></span></p>
<p><span style="font-family:Times;font-size:14px;"><img src="https://img-blog.csdn.net/20150424221424789" alt=""><br></span></p>
<p><span style="font-family:Times;font-size:14px;"><span></span>图5 sinkgroups 数据流模型。</span></p>
<span style="font-family:Times;"><span style="font-size:14px;"><br></span></span>
<h4><span style="font-family:Times;"><span style="font-size:14px;">(6) 扩展数据流模型。</span></span></h4>
<p><span style="font-family:Times;"><span style="font-size:14px;"><span style="font-family:Times;font-size:14px;">上述 5 种数据流模型是官方文档中提到的，我只是知识的搬运工。</span></span></span></p>
<p><span style="font-family:Times;"><span style="font-size:14px;"><span style="font-family:Times;font-size:14px;">由于 flume 提供了三种组件 Source, Channel, Sink。在 flume 允许范围内可以任意组织这三种组件建立出各种各样的数据流模型来满足需求。现在就充分发挥我们的想象力，组合各种样的数据流模型来满足各种各样的需求。</span></span></span></p>
<p><span style="font-family:Times;font-size:14px;">在单个 Agent 可以有多个 Source, Channel, Sink 组成多条数据流，它们彼此独立，互不关联。如下图6 所示，两个并行的数据流模型为 web server1 --&gt; source1 --&gt; channel1 --&gt; sink1 --&gt; HDFS1，web server2 --&gt; source2 --&gt; channel2 --&gt; sink2 --&gt; HDFS2。</span></p>
<p><span style="font-family:Times;font-size:14px;"><br></span></p>
<p><span style="font-family:Times;font-size:14px;"><img src="https://img-blog.csdn.net/20150423235628062" alt=""><br></span></p>
<p><span style="font-family:Times;font-size:14px;"><span></span><span></span>图6 单 Agent 多条数据流模型</span></p>
<p><br></p>
<p>Agent 提供多种输入源，即多个 Source，一个 Channel，一个 Sink 组合的数据流模型，如下图7所示。</p>
<p><img src="https://img-blog.csdn.net/20150424222922134" alt=""><br></p>
<p><span></span>图7 多种输入源数据流模型</p>
<p><br></p>
<h3><span style="font-family:Times;font-size:14px;">3. 总结</span></h3>
<div><span style="font-family:Times;"><span style="font-size:14px;">在 flume 提供的数据流模型中，几个原则很重要。</span></span></div>
<div><span style="font-family:Times;"><span style="font-size:14px;"><strong>Source--&gt; Channel</strong></span></span></div>
<div><span style="font-family:Times;"><span style="font-size:14px;">（1）单个 Source 组件可以和 多个Channel 组合建立数据流，既可以<span style="font-family:Times;font-size:14px;"><em>replicating</em></span><span style="font-family:Times;font-size:14px;"> 和 </span><span style="font-family:Times;font-size:14px;"><em>multiplexing。</em></span></span></span></div>
<div><span style="font-family:Times;"><span style="font-size:14px;"><span style="font-family:Times;font-size:14px;">（2）多个 Sources 可以写入单个 Channel 。</span><br></span></span></div>
<div><span style="font-family:Times;"><span style="font-size:14px;"><span style="font-family:Times;font-size:14px;"><strong><br></strong></span></span></span></div>
<div><span style="font-family:Times;"><span style="font-size:14px;"><span style="font-family:Times;font-size:14px;"><strong>Channel--&gt;Sink</strong></span></span></span></div>
<div><span style="font-family:Times;"><span style="font-size:14px;">（3）多个 Sinks 又可以组合成 Sinkgroups 从 Channel 中获取数据，既可以 loadbalancing 和 failover 机制。</span></span></div>
<div><span style="font-family:Times;"><span style="font-size:14px;">（4）多个 Sinks 也可以从单个 Channel 中取数据。</span></span></div>
<div><br></div>
<div><span style="font-family:Times;"><span style="font-size:14px;">根据上述 4 个原则，你可以设计出满足你需求的数据流模型。</span></span></div>
            </div>
                </div>