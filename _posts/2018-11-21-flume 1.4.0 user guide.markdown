---
layout:     post
title:      flume 1.4.0 user guide
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<div class="related">
<h3>Navigation</h3>
<ul>
<li class="right" style="margin-right:10px"><a target="_blank" accesskey="I" title="General Index" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/genindex.html" rel="nofollow">index</a></li><li><a target="_blank" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/index.html" rel="nofollow">Apache Flume documentation</a> »</li></ul>
</div>
<div class="document">
<div class="documentwrapper">
<div class="bodywrapper">
<div class="body">
<div id="flume-1-4-0-user-guide" class="section">
<h1>Flume 1.4.0 User Guide<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#flume-1-4-0-user-guide" rel="nofollow">¶</a></h1>
<div id="introduction" class="section">
<h2>Introduction<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#introduction" rel="nofollow">¶</a></h2>
<div id="overview" class="section">
<h3>Overview<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#overview" rel="nofollow">¶</a></h3>
<p>Apache Flume is a distributed, reliable, and available system for efficiently collecting, aggregating and moving large amounts of log data from many different sources to a centralized data store.</p>
<p>The use of Apache Flume is not only restricted to log data aggregation. Since data sources are customizable, Flume can be used to transport massive quantities of event data including but not limited to network traffic data, social-media-generated data, email
 messages and pretty much any data source possible.</p>
<p>Apache Flume is a top level project at the Apache Software Foundation.</p>
<p>There are currently two release code lines available, versions 0.9.x and 1.x.</p>
<p>Documentation for the 0.9.x track is available at <a target="_blank" class="reference external" href="http://archive.cloudera.com/cdh/3/flume/UserGuide/" rel="nofollow">
the Flume 0.9.x User Guide</a>.</p>
<p>This documentation applies to the 1.4.x track.</p>
<p>New and existing users are encouraged to use the 1.x releases so as to leverage the performance improvements and configuration flexibilities available in the latest architecture.</p>
</div>
<div id="system-requirements" class="section">
<h3>System Requirements<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#system-requirements" rel="nofollow">¶</a></h3>
<ol class="arabic simple">
<li>Java Runtime Environment - Java 1.6 or later (Java 1.7 Recommended)</li><li>Memory - Sufficient memory for configurations used by sources, channels or sinks</li><li>Disk Space - Sufficient disk space for configurations used by channels or sinks</li><li>Directory Permissions - Read/Write permissions for directories used by agent</li></ol>
</div>
<div id="architecture" class="section">
<h3>Architecture<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#architecture" rel="nofollow">¶</a></h3>
<div id="data-flow-model" class="section">
<h4>Data flow model<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#data-flow-model" rel="nofollow">¶</a></h4>
<p>A Flume event is defined as a unit of data flow having a byte payload and an optional set of string attributes. A Flume agent is a (JVM) process that hosts the components through which events flow from an external source to the next destination (hop).</p>
<div class="figure align-center"><img alt="Agent component diagram" src="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/_images/UserGuide_image00.png">
</div>
<p>A Flume source consumes events delivered to it by an external source like a web server. The external source sends events to Flume in a format that is recognized by the target Flume source. For example, an Avro Flume source can be used to receive Avro events
 from Avro clients or other Flume agents in the flow that send events from an Avro sink. A similar flow can be defined using a Thrift Flume Source to receive events from a Thrift Sink or a Flume Thrift Rpc Client or Thrift clients written in any language generated
 from the Flume thrift protocol.When a Flume source receives an event, it stores it into one or more channels. The channel is a passive store that keeps the event until it’s consumed by a Flume sink. The file channel is one example – it is backed by the local
 filesystem. The sink removes the event from the channel and puts it into an external repository like HDFS (via Flume HDFS sink) or forwards it to the Flume source of the next Flume agent (next hop) in the flow. The source and sink within the given agent run
 asynchronously with the events staged in the channel.</p>
</div>
<div id="complex-flows" class="section">
<h4>Complex flows<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#complex-flows" rel="nofollow">¶</a></h4>
<p>Flume allows a user to build multi-hop flows where events travel through multiple agents before reaching the final destination. It also allows fan-in and fan-out flows, contextual routing and backup routes (fail-over) for failed hops.</p>
</div>
<div id="reliability" class="section">
<h4>Reliability<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#reliability" rel="nofollow">¶</a></h4>
<p>The events are staged in a channel on each agent. The events are then delivered to the next agent or terminal repository (like HDFS) in the flow. The events are removed from a channel only after they are stored in the channel of next agent or in the terminal
 repository. This is a how the single-hop message delivery semantics in Flume provide end-to-end reliability of the flow.</p>
<p>Flume uses a transactional approach to guarantee the reliable delivery of the events. The sources and sinks encapsulate in a transaction the storage/retrieval, respectively, of the events placed in or provided by a transaction provided by the channel. This
 ensures that the set of events are reliably passed from point to point in the flow. In the case of a multi-hop flow, the sink from the previous hop and the source from the next hop both have their transactions running to ensure that the data is safely stored
 in the channel of the next hop.</p>
</div>
<div id="recoverability" class="section">
<h4>Recoverability<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#recoverability" rel="nofollow">¶</a></h4>
<p>The events are staged in the channel, which manages recovery from failure. Flume supports a durable file channel which is backed by the local file system. There’s also a memory channel which simply stores the events in an in-memory queue, which is faster
 but any events still left in the memory channel when an agent process dies can’t be recovered.</p>
</div>
</div>
</div>
<div id="setup" class="section">
<h2>Setup<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#setup" rel="nofollow">¶</a></h2>
<div id="setting-up-an-agent" class="section">
<h3>Setting up an agent<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#setting-up-an-agent" rel="nofollow">¶</a></h3>
<p>Flume agent configuration is stored in a local configuration file. This is a text file that follows the Java properties file format. Configurations for one or more agents can be specified in the same configuration file. The configuration file includes properties
 of each source, sink and channel in an agent and how they are wired together to form data flows.</p>
<div id="configuring-individual-components" class="section">
<h4>Configuring individual components<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#configuring-individual-components" rel="nofollow">¶</a></h4>
<p>Each component (source, sink or channel) in the flow has a name, type, and set of properties that are specific to the type and instantiation. For example, an Avro source needs a hostname (or IP address) and a port number to receive data from. A memory channel
 can have max queue size (“capacity”), and an HDFS sink needs to know the file system URI, path to create files, frequency of file rotation (“hdfs.rollInterval”) etc. All such attributes of a component needs to be set in the properties file of the hosting Flume
 agent.</p>
</div>
<div id="wiring-the-pieces-together" class="section">
<h4>Wiring the pieces together<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#wiring-the-pieces-together" rel="nofollow">¶</a></h4>
<p>The agent needs to know what individual components to load and how they are connected in order to constitute the flow. This is done by listing the names of each of the sources, sinks and channels in the agent, and then specifying the connecting channel for
 each sink and source. For example, an agent flows events from an Avro source called avroWeb to HDFS sink hdfs-cluster1 via a file channel called file-channel. The configuration file will contain names of these components and file-channel as a shared channel
 for both avroWeb source and hdfs-cluster1 sink.</p>
</div>
<div id="starting-an-agent" class="section">
<h4>Starting an agent<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#starting-an-agent" rel="nofollow">¶</a></h4>
<p>An agent is started using a shell script called flume-ng which is located in the bin directory of the Flume distribution. You need to specify the agent name, the config directory, and the config file on the command line:</p>
<div class="highlight-none">
<div class="highlight">
<pre>$ bin/flume-ng agent -n $agent_name -c conf -f conf/flume-conf.properties.template
</pre>
</div>
</div>
<p>Now the agent will start running source and sinks configured in the given properties file.</p>
</div>
<div id="a-simple-example" class="section">
<h4>A simple example<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#a-simple-example" rel="nofollow">¶</a></h4>
<p>Here, we give an example configuration file, describing a single-node Flume deployment. This configuration lets a user generate events and subsequently logs them to the console.</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="c"># example.conf: A single-node Flume configuration</span>

<span class="c"># Name the components on this agent</span>
<span class="na">a1.sources</span> <span class="o">=</span> <span class="s">r1</span>
<span class="na">a1.sinks</span> <span class="o">=</span> <span class="s">k1</span>
<span class="na">a1.channels</span> <span class="o">=</span> <span class="s">c1</span>

<span class="c"># Describe/configure the source</span>
<span class="na">a1.sources.r1.type</span> <span class="o">=</span> <span class="s">netcat</span>
<span class="na">a1.sources.r1.bind</span> <span class="o">=</span> <span class="s">localhost</span>
<span class="na">a1.sources.r1.port</span> <span class="o">=</span> <span class="s">44444</span>

<span class="c"># Describe the sink</span>
<span class="na">a1.sinks.k1.type</span> <span class="o">=</span> <span class="s">logger</span>

<span class="c"># Use a channel which buffers events in memory</span>
<span class="na">a1.channels.c1.type</span> <span class="o">=</span> <span class="s">memory</span>
<span class="na">a1.channels.c1.capacity</span> <span class="o">=</span> <span class="s">1000</span>
<span class="na">a1.channels.c1.transactionCapacity</span> <span class="o">=</span> <span class="s">100</span>

<span class="c"># Bind the source and sink to the channel</span>
<span class="na">a1.sources.r1.channels</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.sinks.k1.channel</span> <span class="o">=</span> <span class="s">c1</span>
</pre>
</div>
</div>
<p>This configuration defines a single agent named a1. a1 has a source that listens for data on port 44444, a channel that buffers event data in memory, and a sink that logs event data to the console. The configuration file names the various components, then
 describes their types and configuration parameters. A given configuration file might define several named agents; when a given Flume process is launched a flag is passed telling it which named agent to manifest.</p>
<p>Given this configuration file, we can start Flume as follows:</p>
<div class="highlight-none">
<div class="highlight">
<pre>$ bin/flume-ng agent --conf conf --conf-file example.conf --name a1 -Dflume.root.logger=INFO,console
</pre>
</div>
</div>
<p>Note that in a full deployment we would typically include one more option: <tt class="docutils literal">
--conf=&lt;conf-dir&gt;</tt>. The <tt class="docutils literal">&lt;conf-dir&gt;</tt> directory would include a shell script
<em>flume-env.sh</em> and potentially a log4j properties file. In this example, we pass a Java option to force Flume to log to the console and we go without a custom environment script.</p>
<p>From a separate terminal, we can then telnet port 44444 and send Flume an event:</p>
<div class="highlight-properties">
<pre>$ telnet localhost 44444
Trying 127.0.0.1...
Connected to localhost.localdomain (127.0.0.1).
Escape character is '^]'.
Hello world! &lt;ENTER&gt;
OK</pre>
</div>
<p>The original Flume terminal will output the event in a log message.</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">12/06/19 15</span><span class="o">:</span><span class="s">32:19 INFO source.NetcatSource: Source starting</span>
<span class="na">12/06/19 15</span><span class="o">:</span><span class="s">32:19 INFO source.NetcatSource: Created serverSocket:sun.nio.ch.ServerSocketChannelImpl[/127.0.0.1:44444]</span>
<span class="na">12/06/19 15</span><span class="o">:</span><span class="s">32:34 INFO sink.LoggerSink: Event: { headers:{} body: 48 65 6C 6C 6F 20 77 6F 72 6C 64 21 0D          Hello world!. }</span>
</pre>
</div>
</div>
<p>Congratulations - you’ve successfully configured and deployed a Flume agent! Subsequent sections cover agent configuration in much more detail.</p>
</div>
<div id="installing-third-party-plugins" class="section">
<h4>Installing third-party plugins<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#installing-third-party-plugins" rel="nofollow">¶</a></h4>
<p>Flume has a fully plugin-based architecture. While Flume ships with many out-of-the-box sources, channels, sinks, serializers, and the like, many implementations exist which ship separately from Flume.</p>
<p>While it has always been possible to include custom Flume components by adding their jars to the FLUME_CLASSPATH variable in the flume-env.sh file, Flume now supports a special directory called
<tt class="docutils literal">plugins.d</tt> which automatically picks up plugins that are packaged in a specific format. This allows for easier management of plugin packaging issues as well as simpler debugging and troubleshooting of several classes of issues,
 especially library dependency conflicts.</p>
<div id="the-plugins-d-directory" class="section">
<h5>The plugins.d directory<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#the-plugins-d-directory" rel="nofollow">¶</a></h5>
<p>The <tt class="docutils literal">plugins.d</tt> directory is located at <tt class="docutils literal">
$FLUME_HOME/plugins.d</tt>. At startup time, the <tt class="docutils literal">flume-ng</tt> start script looks in the
<tt class="docutils literal">plugins.d</tt> directory for plugins that conform to the below format and includes them in proper paths when starting up
<tt class="docutils literal">java</tt>.</p>
</div>
<div id="directory-layout-for-plugins" class="section">
<h5>Directory layout for plugins<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#directory-layout-for-plugins" rel="nofollow">¶</a></h5>
<p>Each plugin (subdirectory) within <tt class="docutils literal">plugins.d</tt> can have up to three sub-directories:</p>
<ol class="arabic simple">
<li>lib - the plugin’s jar(s)</li><li>libext - the plugin’s dependency jar(s)</li><li>native - any required native libraries, such as <tt class="docutils literal">
.so</tt> files</li></ol>
<p>Example of two plugins within the plugins.d directory:</p>
<div class="highlight-none">
<div class="highlight">
<pre>plugins.d/
plugins.d/custom-source-1/
plugins.d/custom-source-1/lib/my-source.jar
plugins.d/custom-source-1/libext/spring-core-2.5.6.jar
plugins.d/custom-source-2/
plugins.d/custom-source-2/lib/custom.jar
plugins.d/custom-source-2/native/gettext.so
</pre>
</div>
</div>
</div>
</div>
</div>
<div id="data-ingestion" class="section">
<h3>Data ingestion<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#data-ingestion" rel="nofollow">¶</a></h3>
<p>Flume supports a number of mechanisms to ingest data from external sources.</p>
<div id="rpc" class="section">
<h4>RPC<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#rpc" rel="nofollow">¶</a></h4>
<p>An Avro client included in the Flume distribution can send a given file to Flume Avro source using avro RPC mechanism:</p>
<div class="highlight-none">
<div class="highlight">
<pre>$ bin/flume-ng avro-client -H localhost -p 41414 -F /usr/logs/log.10
</pre>
</div>
</div>
<p>The above command will send the contents of /usr/logs/log.10 to to the Flume source listening on that ports.</p>
</div>
<div id="executing-commands" class="section">
<h4>Executing commands<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#executing-commands" rel="nofollow">¶</a></h4>
<p>There’s an exec source that executes a given command and consumes the output. A single ‘line’ of output ie. text followed by carriage return (‘\r’) or line feed (‘\n’) or both together.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">Flume does not support tail as a source. One can wrap the tail command in an exec source to stream the file.</p>
</div>
</div>
<div id="network-streams" class="section">
<h4>Network streams<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#network-streams" rel="nofollow">¶</a></h4>
<p>Flume supports the following mechanisms to read data from popular log stream types, such as:</p>
<ol class="arabic simple">
<li>Avro</li><li>Thrift</li><li>Syslog</li><li>Netcat</li></ol>
</div>
</div>
<div id="setting-multi-agent-flow" class="section">
<h3>Setting multi-agent flow<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#setting-multi-agent-flow" rel="nofollow">¶</a></h3>
<div class="figure align-center"><img alt="Two agents communicating over Avro RPC" src="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/_images/UserGuide_image03.png">
</div>
<p>In order to flow the data across multiple agents or hops, the sink of the previous agent and source of the current hop need to be avro type with the sink pointing to the hostname (or IP address) and port of the source.</p>
</div>
<div id="consolidation" class="section">
<h3>Consolidation<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#consolidation" rel="nofollow">¶</a></h3>
<p>A very common scenario in log collection is a large number of log producing clients sending data to a few consumer agents that are attached to the storage subsystem. For example, logs collected from hundreds of web servers sent to a dozen of agents that
 write to HDFS cluster.</p>
<div class="figure align-center"><img alt="A fan-in flow using Avro RPC to consolidate events in one place" src="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/_images/UserGuide_image02.png">
</div>
<p>This can be achieved in Flume by configuring a number of first tier agents with an avro sink, all pointing to an avro source of single agent (Again you could use the thrift sources/sinks/clients in such a scenario). This source on the second tier agent consolidates
 the received events into a single channel which is consumed by a sink to its final destination.</p>
</div>
<div id="multiplexing-the-flow" class="section">
<h3>Multiplexing the flow<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#multiplexing-the-flow" rel="nofollow">¶</a></h3>
<p>Flume supports multiplexing the event flow to one or more destinations. This is achieved by defining a flow multiplexer that can replicate or selectively route an event to one or more channels.</p>
<div class="figure align-center"><img alt="A fan-out flow using a (multiplexing) channel selector" src="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/_images/UserGuide_image01.png">
</div>
<p>The above example shows a source from agent “foo” fanning out the flow to three different channels. This fan out can be replicating or multiplexing. In case of replicating flow, each event is sent to all three channels. For the multiplexing case, an event
 is delivered to a subset of available channels when an event’s attribute matches a preconfigured value. For example, if an event attribute called “txnType” is set to “customer”, then it should go to channel1 and channel3, if it’s “vendor” then it should go
 to channel2, otherwise channel3. The mapping can be set in the agent’s configuration file.</p>
</div>
</div>
<div id="configuration" class="section">
<h2>Configuration<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#configuration" rel="nofollow">¶</a></h2>
<p>As mentioned in the earlier section, Flume agent configuration is read from a file that resembles a Java property file format with hierarchical property settings.</p>
<div id="defining-the-flow" class="section">
<h3>Defining the flow<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#defining-the-flow" rel="nofollow">¶</a></h3>
<p>To define the flow within a single agent, you need to link the sources and sinks via a channel. You need to list the sources, sinks and channels for the given agent, and then point the source and sink to a channel. A source instance can specify multiple
 channels, but a sink instance can only specify one channel. The format is as follows:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="c"># list the sources, sinks and channels for the agent</span>
<span class="na">&lt;Agent&gt;.sources</span> <span class="o">=</span> <span class="s">&lt;Source&gt;</span>
<span class="na">&lt;Agent&gt;.sinks</span> <span class="o">=</span> <span class="s">&lt;Sink&gt;</span>
<span class="na">&lt;Agent&gt;.channels</span> <span class="o">=</span> <span class="s">&lt;Channel1&gt; &lt;Channel2&gt;</span>

<span class="c"># set channel for source</span>
<span class="na">&lt;Agent&gt;.sources.&lt;Source&gt;.channels</span> <span class="o">=</span> <span class="s">&lt;Channel1&gt; &lt;Channel2&gt; ...</span>

<span class="c"># set channel for sink</span>
<span class="na">&lt;Agent&gt;.sinks.&lt;Sink&gt;.channel</span> <span class="o">=</span> <span class="s">&lt;Channel1&gt;</span>
</pre>
</div>
</div>
<p>For example, an agent named agent_foo is reading data from an external avro client and sending it to HDFS via a memory channel. The config file weblog.config could look like:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="c"># list the sources, sinks and channels for the agent</span>
<span class="na">agent_foo.sources</span> <span class="o">=</span> <span class="s">avro-appserver-src-1</span>
<span class="na">agent_foo.sinks</span> <span class="o">=</span> <span class="s">hdfs-sink-1</span>
<span class="na">agent_foo.channels</span> <span class="o">=</span> <span class="s">mem-channel-1</span>

<span class="c"># set channel for source</span>
<span class="na">agent_foo.sources.avro-appserver-src-1.channels</span> <span class="o">=</span> <span class="s">mem-channel-1</span>

<span class="c"># set channel for sink</span>
<span class="na">agent_foo.sinks.hdfs-sink-1.channel</span> <span class="o">=</span> <span class="s">mem-channel-1</span>
</pre>
</div>
</div>
<p>This will make the events flow from avro-AppSrv-source to hdfs-Cluster1-sink through the memory channel mem-channel-1. When the agent is started with the weblog.config as its config file, it will instantiate that flow.</p>
</div>
<div id="id1" class="section">
<h3>Configuring individual components<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#id1" rel="nofollow">¶</a></h3>
<p>After defining the flow, you need to set properties of each source, sink and channel. This is done in the same hierarchical namespace fashion where you set the component type and other values for the properties specific to each component:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="c"># properties for sources</span>
<span class="na">&lt;Agent&gt;.sources.&lt;Source&gt;.&lt;someProperty&gt;</span> <span class="o">=</span> <span class="s">&lt;someValue&gt;</span>

<span class="c"># properties for channels</span>
<span class="na">&lt;Agent&gt;.channel.&lt;Channel&gt;.&lt;someProperty&gt;</span> <span class="o">=</span> <span class="s">&lt;someValue&gt;</span>

<span class="c"># properties for sinks</span>
<span class="na">&lt;Agent&gt;.sources.&lt;Sink&gt;.&lt;someProperty&gt;</span> <span class="o">=</span> <span class="s">&lt;someValue&gt;</span>
</pre>
</div>
</div>
<p>The property “type” needs to be set for each component for Flume to understand what kind of object it needs to be. Each source, sink and channel type has its own set of properties required for it to function as intended. All those need to be set as needed.
 In the previous example, we have a flow from avro-AppSrv-source to hdfs-Cluster1-sink through the memory channel mem-channel-1. Here’s an example that shows configuration of each of those components:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">agent_foo.sources</span> <span class="o">=</span> <span class="s">avro-AppSrv-source</span>
<span class="na">agent_foo.sinks</span> <span class="o">=</span> <span class="s">hdfs-Cluster1-sink</span>
<span class="na">agent_foo.channels</span> <span class="o">=</span> <span class="s">mem-channel-1</span>

<span class="c"># set channel for sources, sinks</span>

<span class="c"># properties of avro-AppSrv-source</span>
<span class="na">agent_foo.sources.avro-AppSrv-source.type</span> <span class="o">=</span> <span class="s">avro</span>
<span class="na">agent_foo.sources.avro-AppSrv-source.bind</span> <span class="o">=</span> <span class="s">localhost</span>
<span class="na">agent_foo.sources.avro-AppSrv-source.port</span> <span class="o">=</span> <span class="s">10000</span>

<span class="c"># properties of mem-channel-1</span>
<span class="na">agent_foo.channels.mem-channel-1.type</span> <span class="o">=</span> <span class="s">memory</span>
<span class="na">agent_foo.channels.mem-channel-1.capacity</span> <span class="o">=</span> <span class="s">1000</span>
<span class="na">agent_foo.channels.mem-channel-1.transactionCapacity</span> <span class="o">=</span> <span class="s">100</span>

<span class="c"># properties of hdfs-Cluster1-sink</span>
<span class="na">agent_foo.sinks.hdfs-Cluster1-sink.type</span> <span class="o">=</span> <span class="s">hdfs</span>
<span class="na">agent_foo.sinks.hdfs-Cluster1-sink.hdfs.path</span> <span class="o">=</span> <span class="s">hdfs://namenode/flume/webdata</span>

<span class="c">#...</span>
</pre>
</div>
</div>
</div>
<div id="adding-multiple-flows-in-an-agent" class="section">
<h3>Adding multiple flows in an agent<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#adding-multiple-flows-in-an-agent" rel="nofollow">¶</a></h3>
<p>A single Flume agent can contain several independent flows. You can list multiple sources, sinks and channels in a config. These components can be linked to form multiple flows:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="c"># list the sources, sinks and channels for the agent</span>
<span class="na">&lt;Agent&gt;.sources</span> <span class="o">=</span> <span class="s">&lt;Source1&gt; &lt;Source2&gt;</span>
<span class="na">&lt;Agent&gt;.sinks</span> <span class="o">=</span> <span class="s">&lt;Sink1&gt; &lt;Sink2&gt;</span>
<span class="na">&lt;Agent&gt;.channels</span> <span class="o">=</span> <span class="s">&lt;Channel1&gt; &lt;Channel2&gt;</span>
</pre>
</div>
</div>
<p>Then you can link the sources and sinks to their corresponding channels (for sources) of channel (for sinks) to setup two different flows. For example, if you need to setup two flows in an agent, one going from an external avro client to external HDFS and
 another from output of a tail to avro sink, then here’s a config to do that:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="c"># list the sources, sinks and channels in the agent</span>
<span class="na">agent_foo.sources</span> <span class="o">=</span> <span class="s">avro-AppSrv-source1 exec-tail-source2</span>
<span class="na">agent_foo.sinks</span> <span class="o">=</span> <span class="s">hdfs-Cluster1-sink1 avro-forward-sink2</span>
<span class="na">agent_foo.channels</span> <span class="o">=</span> <span class="s">mem-channel-1 file-channel-2</span>

<span class="c"># flow #1 configuration</span>
<span class="na">agent_foo.sources.avro-AppSrv-source1.channels</span> <span class="o">=</span> <span class="s">mem-channel-1</span>
<span class="na">agent_foo.sinks.hdfs-Cluster1-sink1.channel</span> <span class="o">=</span> <span class="s">mem-channel-1</span>

<span class="c"># flow #2 configuration</span>
<span class="na">agent_foo.sources.exec-tail-source2.channels</span> <span class="o">=</span> <span class="s">file-channel-2</span>
<span class="na">agent_foo.sinks.avro-forward-sink2.channel</span> <span class="o">=</span> <span class="s">file-channel-2</span>
</pre>
</div>
</div>
</div>
<div id="configuring-a-multi-agent-flow" class="section">
<h3>Configuring a multi agent flow<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#configuring-a-multi-agent-flow" rel="nofollow">¶</a></h3>
<p>To setup a multi-tier flow, you need to have an avro/thrift sink of first hop pointing to avro/thrift source of the next hop. This will result in the first Flume agent forwarding events to the next Flume agent. For example, if you are periodically sending
 files (1 file per event) using avro client to a local Flume agent, then this local agent can forward it to another agent that has the mounted for storage.</p>
<p>Weblog agent config:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="c"># list sources, sinks and channels in the agent</span>
<span class="na">agent_foo.sources</span> <span class="o">=</span> <span class="s">avro-AppSrv-source</span>
<span class="na">agent_foo.sinks</span> <span class="o">=</span> <span class="s">avro-forward-sink</span>
<span class="na">agent_foo.channels</span> <span class="o">=</span> <span class="s">file-channel</span>

<span class="c"># define the flow</span>
<span class="na">agent_foo.sources.avro-AppSrv-source.channels</span> <span class="o">=</span> <span class="s">file-channel</span>
<span class="na">agent_foo.sinks.avro-forward-sink.channel</span> <span class="o">=</span> <span class="s">file-channel</span>

<span class="c"># avro sink properties</span>
<span class="na">agent_foo.sources.avro-forward-sink.type</span> <span class="o">=</span> <span class="s">avro</span>
<span class="na">agent_foo.sources.avro-forward-sink.hostname</span> <span class="o">=</span> <span class="s">10.1.1.100</span>
<span class="na">agent_foo.sources.avro-forward-sink.port</span> <span class="o">=</span> <span class="s">10000</span>

<span class="c"># configure other pieces</span>
<span class="c">#...</span>
</pre>
</div>
</div>
<p>HDFS agent config:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="c"># list sources, sinks and channels in the agent</span>
<span class="na">agent_foo.sources</span> <span class="o">=</span> <span class="s">avro-collection-source</span>
<span class="na">agent_foo.sinks</span> <span class="o">=</span> <span class="s">hdfs-sink</span>
<span class="na">agent_foo.channels</span> <span class="o">=</span> <span class="s">mem-channel</span>

<span class="c"># define the flow</span>
<span class="na">agent_foo.sources.avro-collection-source.channels</span> <span class="o">=</span> <span class="s">mem-channel</span>
<span class="na">agent_foo.sinks.hdfs-sink.channel</span> <span class="o">=</span> <span class="s">mem-channel</span>

<span class="c"># avro sink properties</span>
<span class="na">agent_foo.sources.avro-collection-source.type</span> <span class="o">=</span> <span class="s">avro</span>
<span class="na">agent_foo.sources.avro-collection-source.bind</span> <span class="o">=</span> <span class="s">10.1.1.100</span>
<span class="na">agent_foo.sources.avro-collection-source.port</span> <span class="o">=</span> <span class="s">10000</span>

<span class="c"># configure other pieces</span>
<span class="c">#...</span>
</pre>
</div>
</div>
<p>Here we link the avro-forward-sink from the weblog agent to the avro-collection-source of the hdfs agent. This will result in the events coming from the external appserver source eventually getting stored in HDFS.</p>
</div>
<div id="fan-out-flow" class="section">
<h3>Fan out flow<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#fan-out-flow" rel="nofollow">¶</a></h3>
<p>As discussed in previous section, Flume supports fanning out the flow from one source to multiple channels. There are two modes of fan out, replicating and multiplexing. In the replicating flow, the event is sent to all the configured channels. In case of
 multiplexing, the event is sent to only a subset of qualifying channels. To fan out the flow, one needs to specify a list of channels for a source and the policy for the fanning it out. This is done by adding a channel “selector” that can be replicating or
 multiplexing. Then further specify the selection rules if it’s a multiplexer. If you don’t specify a selector, then by default it’s replicating:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="c"># List the sources, sinks and channels for the agent</span>
<span class="na">&lt;Agent&gt;.sources</span> <span class="o">=</span> <span class="s">&lt;Source1&gt;</span>
<span class="na">&lt;Agent&gt;.sinks</span> <span class="o">=</span> <span class="s">&lt;Sink1&gt; &lt;Sink2&gt;</span>
<span class="na">&lt;Agent&gt;.channels</span> <span class="o">=</span> <span class="s">&lt;Channel1&gt; &lt;Channel2&gt;</span>

<span class="c"># set list of channels for source (separated by space)</span>
<span class="na">&lt;Agent&gt;.sources.&lt;Source1&gt;.channels</span> <span class="o">=</span> <span class="s">&lt;Channel1&gt; &lt;Channel2&gt;</span>

<span class="c"># set channel for sinks</span>
<span class="na">&lt;Agent&gt;.sinks.&lt;Sink1&gt;.channel</span> <span class="o">=</span> <span class="s">&lt;Channel1&gt;</span>
<span class="na">&lt;Agent&gt;.sinks.&lt;Sink2&gt;.channel</span> <span class="o">=</span> <span class="s">&lt;Channel2&gt;</span>

<span class="na">&lt;Agent&gt;.sources.&lt;Source1&gt;.selector.type</span> <span class="o">=</span> <span class="s">replicating</span>
</pre>
</div>
</div>
<p>The multiplexing select has a further set of properties to bifurcate the flow. This requires specifying a mapping of an event attribute to a set for channel. The selector checks for each configured attribute in the event header. If it matches the specified
 value, then that event is sent to all the channels mapped to that value. If there’s no match, then the event is sent to set of channels configured as default:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="c"># Mapping for multiplexing selector</span>
<span class="na">&lt;Agent&gt;.sources.&lt;Source1&gt;.selector.type</span> <span class="o">=</span> <span class="s">multiplexing</span>
<span class="na">&lt;Agent&gt;.sources.&lt;Source1&gt;.selector.header</span> <span class="o">=</span> <span class="s">&lt;someHeader&gt;</span>
<span class="na">&lt;Agent&gt;.sources.&lt;Source1&gt;.selector.mapping.&lt;Value1&gt;</span> <span class="o">=</span> <span class="s">&lt;Channel1&gt;</span>
<span class="na">&lt;Agent&gt;.sources.&lt;Source1&gt;.selector.mapping.&lt;Value2&gt;</span> <span class="o">=</span> <span class="s">&lt;Channel1&gt; &lt;Channel2&gt;</span>
<span class="na">&lt;Agent&gt;.sources.&lt;Source1&gt;.selector.mapping.&lt;Value3&gt;</span> <span class="o">=</span> <span class="s">&lt;Channel2&gt;</span>
<span class="c">#...</span>

<span class="na">&lt;Agent&gt;.sources.&lt;Source1&gt;.selector.default</span> <span class="o">=</span> <span class="s">&lt;Channel2&gt;</span>
</pre>
</div>
</div>
<p>The mapping allows overlapping the channels for each value.</p>
<p>The following example has a single flow that multiplexed to two paths. The agent named agent_foo has a single avro source and two channels linked to two sinks:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="c"># list the sources, sinks and channels in the agent</span>
<span class="na">agent_foo.sources</span> <span class="o">=</span> <span class="s">avro-AppSrv-source1</span>
<span class="na">agent_foo.sinks</span> <span class="o">=</span> <span class="s">hdfs-Cluster1-sink1 avro-forward-sink2</span>
<span class="na">agent_foo.channels</span> <span class="o">=</span> <span class="s">mem-channel-1 file-channel-2</span>

<span class="c"># set channels for source</span>
<span class="na">agent_foo.sources.avro-AppSrv-source1.channels</span> <span class="o">=</span> <span class="s">mem-channel-1 file-channel-2</span>

<span class="c"># set channel for sinks</span>
<span class="na">agent_foo.sinks.hdfs-Cluster1-sink1.channel</span> <span class="o">=</span> <span class="s">mem-channel-1</span>
<span class="na">agent_foo.sinks.avro-forward-sink2.channel</span> <span class="o">=</span> <span class="s">file-channel-2</span>

<span class="c"># channel selector configuration</span>
<span class="na">agent_foo.sources.avro-AppSrv-source1.selector.type</span> <span class="o">=</span> <span class="s">multiplexing</span>
<span class="na">agent_foo.sources.avro-AppSrv-source1.selector.header</span> <span class="o">=</span> <span class="s">State</span>
<span class="na">agent_foo.sources.avro-AppSrv-source1.selector.mapping.CA</span> <span class="o">=</span> <span class="s">mem-channel-1</span>
<span class="na">agent_foo.sources.avro-AppSrv-source1.selector.mapping.AZ</span> <span class="o">=</span> <span class="s">file-channel-2</span>
<span class="na">agent_foo.sources.avro-AppSrv-source1.selector.mapping.NY</span> <span class="o">=</span> <span class="s">mem-channel-1 file-channel-2</span>
<span class="na">agent_foo.sources.avro-AppSrv-source1.selector.default</span> <span class="o">=</span> <span class="s">mem-channel-1</span>
</pre>
</div>
</div>
<p>The selector checks for a header called “State”. If the value is “CA” then its sent to mem-channel-1, if its “AZ” then it goes to file-channel-2 or if its “NY” then both. If the “State” header is not set or doesn’t match any of the three, then it goes to
 mem-channel-1 which is designated as ‘default’.</p>
<p>The selector also supports optional channels. To specify optional channels for a header, the config parameter ‘optional’ is used in the following way:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="c"># channel selector configuration</span>
<span class="na">agent_foo.sources.avro-AppSrv-source1.selector.type</span> <span class="o">=</span> <span class="s">multiplexing</span>
<span class="na">agent_foo.sources.avro-AppSrv-source1.selector.header</span> <span class="o">=</span> <span class="s">State</span>
<span class="na">agent_foo.sources.avro-AppSrv-source1.selector.mapping.CA</span> <span class="o">=</span> <span class="s">mem-channel-1</span>
<span class="na">agent_foo.sources.avro-AppSrv-source1.selector.mapping.AZ</span> <span class="o">=</span> <span class="s">file-channel-2</span>
<span class="na">agent_foo.sources.avro-AppSrv-source1.selector.mapping.NY</span> <span class="o">=</span> <span class="s">mem-channel-1 file-channel-2</span>
<span class="na">agent_foo.sources.avro-AppSrv-source1.selector.optional.CA</span> <span class="o">=</span> <span class="s">mem-channel-1 file-channel-2</span>
<span class="na">agent_foo.sources.avro-AppSrv-source1.selector.mapping.AZ</span> <span class="o">=</span> <span class="s">file-channel-2</span>
<span class="na">agent_foo.sources.avro-AppSrv-source1.selector.default</span> <span class="o">=</span> <span class="s">mem-channel-1</span>
</pre>
</div>
</div>
<p>The selector will attempt to write to the required channels first and will fail the transaction if even one of these channels fails to consume the events. The transaction is reattempted on
<strong>all</strong> of the channels. Once all required channels have consumed the events, then the selector will attempt to write to the optional channels. A failure by any of the optional channels to consume the event is simply ignored and not retried.</p>
<p>If there is an overlap between the optional channels and required channels for a specific header, the channel is considered to be required, and a failure in the channel will cause the entire set of required channels to be retried. For instance, in the above
 example, for the header “CA” mem-channel-1 is considered to be a required channel even though it is marked both as required and optional, and a failure to write to this channel will cause that event to be retried on
<strong>all</strong> channels configured for the selector.</p>
<p>Note that if a header does not have any required channels, then the event will be written to the default channels and will be attempted to be written to the optional channels for that header. Specifying optional channels will still cause the event to be
 written to the default channels, if no required channels are specified. If no channels are designated as default and there are no required, the selector will attempt to write the events to the optional channels. Any failures are simply ignored in that case.</p>
</div>
<div id="flume-sources" class="section">
<h3>Flume Sources<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#flume-sources" rel="nofollow">¶</a></h3>
<div id="avro-source" class="section">
<h4>Avro Source<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#avro-source" rel="nofollow">¶</a></h4>
<p>Listens on Avro port and receives events from external Avro client streams. When paired with the built-in Avro Sink on another (previous hop) Flume agent, it can create tiered collection topologies. Required properties are in
<strong>bold</strong>.</p>
<table class="docutils" border="1">
<colgroup><col width="13%"><col width="8%"><col width="79%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>channels</strong></td>
<td>–</td>
<td> </td>
</tr>
<tr class="row-odd">
<td><strong>type</strong></td>
<td>–</td>
<td>The component type name, needs to be <tt class="docutils literal">avro</tt></td>
</tr>
<tr class="row-even">
<td><strong>bind</strong></td>
<td>–</td>
<td>hostname or IP address to listen on</td>
</tr>
<tr class="row-odd">
<td><strong>port</strong></td>
<td>–</td>
<td>Port # to bind to</td>
</tr>
<tr class="row-even">
<td>threads</td>
<td>–</td>
<td>Maximum number of worker threads to spawn</td>
</tr>
<tr class="row-odd">
<td>selector.type</td>
<td> </td>
<td> </td>
</tr>
<tr class="row-even">
<td>selector.*</td>
<td> </td>
<td> </td>
</tr>
<tr class="row-odd">
<td>interceptors</td>
<td>–</td>
<td>Space-separated list of interceptors</td>
</tr>
<tr class="row-even">
<td>interceptors.*</td>
<td> </td>
<td> </td>
</tr>
<tr class="row-odd">
<td>compression-type</td>
<td>none</td>
<td>This can be “none” or “deflate”. The compression-type must match the compression-type of matching AvroSource</td>
</tr>
<tr class="row-even">
<td>ssl</td>
<td>false</td>
<td>Set this to true to enable SSL encryption. You must also specify a “keystore” and a “keystore-password”.</td>
</tr>
<tr class="row-odd">
<td>keystore</td>
<td>–</td>
<td>This is the path to a Java keystore file. Required for SSL.</td>
</tr>
<tr class="row-even">
<td>keystore-password</td>
<td>–</td>
<td>The password for the Java keystore. Required for SSL.</td>
</tr>
<tr class="row-odd">
<td>keystore-type</td>
<td>JKS</td>
<td>The type of the Java keystore. This can be “JKS” or “PKCS12”.</td>
</tr>
</tbody>
</table>
<p>Example for agent named a1:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">a1.sources</span> <span class="o">=</span> <span class="s">r1</span>
<span class="na">a1.channels</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.sources.r1.type</span> <span class="o">=</span> <span class="s">avro</span>
<span class="na">a1.sources.r1.channels</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.sources.r1.bind</span> <span class="o">=</span> <span class="s">0.0.0.0</span>
<span class="na">a1.sources.r1.port</span> <span class="o">=</span> <span class="s">4141</span>
</pre>
</div>
</div>
</div>
<div id="thrift-source" class="section">
<h4>Thrift Source<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#thrift-source" rel="nofollow">¶</a></h4>
<p>Listens on Thrift port and receives events from external Thrift client streams. When paired with the built-in ThriftSink on another (previous hop) Flume agent, it can create tiered collection topologies. Required properties are in
<strong>bold</strong>.</p>
<table class="docutils" border="1">
<colgroup><col width="23%"><col width="14%"><col width="64%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>channels</strong></td>
<td>–</td>
<td> </td>
</tr>
<tr class="row-odd">
<td><strong>type</strong></td>
<td>–</td>
<td>The component type name, needs to be <tt class="docutils literal">thrift</tt></td>
</tr>
<tr class="row-even">
<td><strong>bind</strong></td>
<td>–</td>
<td>hostname or IP address to listen on</td>
</tr>
<tr class="row-odd">
<td><strong>port</strong></td>
<td>–</td>
<td>Port # to bind to</td>
</tr>
<tr class="row-even">
<td>threads</td>
<td>–</td>
<td>Maximum number of worker threads to spawn</td>
</tr>
<tr class="row-odd">
<td>selector.type</td>
<td> </td>
<td> </td>
</tr>
<tr class="row-even">
<td>selector.*</td>
<td> </td>
<td> </td>
</tr>
<tr class="row-odd">
<td>interceptors</td>
<td>–</td>
<td>Space separated list of interceptors</td>
</tr>
<tr class="row-even">
<td>interceptors.*</td>
<td> </td>
<td> </td>
</tr>
</tbody>
</table>
<p>Example for agent named a1:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">a1.sources</span> <span class="o">=</span> <span class="s">r1</span>
<span class="na">a1.channels</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.sources.r1.type</span> <span class="o">=</span> <span class="s">thrift</span>
<span class="na">a1.sources.r1.channels</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.sources.r1.bind</span> <span class="o">=</span> <span class="s">0.0.0.0</span>
<span class="na">a1.sources.r1.port</span> <span class="o">=</span> <span class="s">4141</span>
</pre>
</div>
</div>
</div>
<div id="exec-source" class="section">
<h4>Exec Source<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#exec-source" rel="nofollow">¶</a></h4>
<p>Exec source runs a given Unix command on start-up and expects that process to continuously produce data on standard out (stderr is simply discarded, unless property logStdErr is set to true). If the process exits for any reason, the source also exits and
 will produce no further data. This means configurations such as <tt class="docutils literal">
<span class="pre">cat</span> <span class="pre">[named</span> <span class="pre">pipe]</span></tt> or
<tt class="docutils literal"><span class="pre">tail</span> <span class="pre">-F</span>
<span class="pre">[file]</span></tt> are going to produce the desired results where as
<tt class="docutils literal">date</tt> will probably not - the former two commands produce streams of data where as the latter produces a single event and exits.</p>
<p>Required properties are in <strong>bold</strong>.</p>
<table class="docutils" border="1">
<colgroup><col width="8%"><col width="6%"><col width="85%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>channels</strong></td>
<td>–</td>
<td> </td>
</tr>
<tr class="row-odd">
<td><strong>type</strong></td>
<td>–</td>
<td>The component type name, needs to be <tt class="docutils literal">exec</tt></td>
</tr>
<tr class="row-even">
<td><strong>command</strong></td>
<td>–</td>
<td>The command to execute</td>
</tr>
<tr class="row-odd">
<td>shell</td>
<td>–</td>
<td>A shell invocation used to run the command. e.g. /bin/sh -c. Required only for commands relying on shell features like wildcards, back ticks, pipes etc.</td>
</tr>
<tr class="row-even">
<td>restartThrottle</td>
<td>10000</td>
<td>Amount of time (in millis) to wait before attempting a restart</td>
</tr>
<tr class="row-odd">
<td>restart</td>
<td>false</td>
<td>Whether the executed cmd should be restarted if it dies</td>
</tr>
<tr class="row-even">
<td>logStdErr</td>
<td>false</td>
<td>Whether the command’s stderr should be logged</td>
</tr>
<tr class="row-odd">
<td>batchSize</td>
<td>20</td>
<td>The max number of lines to read and send to the channel at a time</td>
</tr>
<tr class="row-even">
<td>selector.type</td>
<td>replicating</td>
<td>replicating or multiplexing</td>
</tr>
<tr class="row-odd">
<td>selector.*</td>
<td> </td>
<td>Depends on the selector.type value</td>
</tr>
<tr class="row-even">
<td>interceptors</td>
<td>–</td>
<td>Space-separated list of interceptors</td>
</tr>
<tr class="row-odd">
<td>interceptors.*</td>
<td> </td>
<td> </td>
</tr>
</tbody>
</table>
<div class="admonition warning">
<p class="first admonition-title">Warning</p>
<p class="last">The problem with ExecSource and other asynchronous sources is that the source can not guarantee that if there is a failure to put the event into the Channel the client knows about it. In such cases, the data will be lost. As a for instance,
 one of the most commonly requested features is the <tt class="docutils literal">
<span class="pre">tail</span> <span class="pre">-F</span> <span class="pre">[file]</span></tt>-like use case where an application writes to a log file on disk and Flume tails the file, sending each line as an event. While this is possible, there’s an obvious
 problem; what happens if the channel fills up and Flume can’t send an event? Flume has no way of indicating to the application writing the log file that it needs to retain the log or that the event hasn’t been sent, for some reason. If this doesn’t make sense,
 you need only know this: Your application can never guarantee data has been received when using a unidirectional asynchronous interface such as ExecSource! As an extension of this warning - and to be completely clear - there is absolutely zero guarantee of
 event delivery when using this source. For stronger reliability guarantees, consider the Spooling Directory Source or direct integration with Flume via the SDK.</p>
</div>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">You can use ExecSource to emulate TailSource from Flume 0.9x (flume og). Just use unix command
<tt class="docutils literal"><span class="pre">tail</span> <span class="pre">-F</span>
<span class="pre">/full/path/to/your/file</span></tt>. Parameter -F is better in this case than -f as it will also follow file rotation.</p>
</div>
<p>Example for agent named a1:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">a1.sources</span> <span class="o">=</span> <span class="s">r1</span>
<span class="na">a1.channels</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.sources.r1.type</span> <span class="o">=</span> <span class="s">exec</span>
<span class="na">a1.sources.r1.command</span> <span class="o">=</span> <span class="s">tail -F /var/log/secure</span>
<span class="na">a1.sources.r1.channels</span> <span class="o">=</span> <span class="s">c1</span>
</pre>
</div>
</div>
<p>The ‘shell’ config is used to invoke the ‘command’ through a command shell (such as Bash or Powershell). The ‘command’ is passed as an argument to ‘shell’ for execution. This allows the ‘command’ to use features from the shell such as wildcards, back ticks,
 pipes, loops, conditionals etc. In the absence of the ‘shell’ config, the ‘command’ will be invoked directly. Common values for ‘shell’ : ‘/bin/sh -c’, ‘/bin/ksh -c’, ‘cmd /c’, ‘powershell -Command’, etc.</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">agent_foo.sources.tailsource-1.type</span> <span class="o">=</span> <span class="s">exec</span>
<span class="na">agent_foo.sources.tailsource-1.shell</span> <span class="o">=</span> <span class="s">/bin/bash -c</span>
<span class="na">agent_foo.sources.tailsource-1.command</span> <span class="o">=</span> <span class="s">for i in /path/*.txt; do cat $i; done</span>
</pre>
</div>
</div>
</div>
<div id="jms-source" class="section">
<h4>JMS Source<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#jms-source" rel="nofollow">¶</a></h4>
<p>JMS Source reads messages from a JMS destination such as a queue or topic. Being a JMS application it should work with any JMS provider but has only been tested with ActiveMQ. The JMS source provides configurable batch size, message selector, user/pass,
 and message to flume event converter. Note that the vendor provided JMS jars should be included in the Flume classpath using plugins.d directory (preferred), –classpath on command line, or via FLUME_CLASSPATH variable in flume-env.sh.</p>
<p>Required properties are in <strong>bold</strong>.</p>
<table class="docutils" border="1">
<colgroup><col width="20%"><col width="9%"><col width="71%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>channels</strong></td>
<td>–</td>
<td> </td>
</tr>
<tr class="row-odd">
<td><strong>type</strong></td>
<td>–</td>
<td>The component type name, needs to be <tt class="docutils literal">jms</tt></td>
</tr>
<tr class="row-even">
<td><strong>initialContextFactory</strong></td>
<td>–</td>
<td>Inital Context Factory, e.g: org.apache.activemq.jndi.ActiveMQInitialContextFactory</td>
</tr>
<tr class="row-odd">
<td><strong>connectionFactory</strong></td>
<td>–</td>
<td>The JNDI name the connection factory shoulld appear as</td>
</tr>
<tr class="row-even">
<td><strong>providerURL</strong></td>
<td>–</td>
<td>The JMS provider URL</td>
</tr>
<tr class="row-odd">
<td><strong>destinationName</strong></td>
<td>–</td>
<td>Destination name</td>
</tr>
<tr class="row-even">
<td><strong>destinationType</strong></td>
<td>–</td>
<td>Destination type (queue or topic)</td>
</tr>
<tr class="row-odd">
<td>messageSelector</td>
<td>–</td>
<td>Message selector to use when creating the consumer</td>
</tr>
<tr class="row-even">
<td>userName</td>
<td>–</td>
<td>Username for the destination/provider</td>
</tr>
<tr class="row-odd">
<td>passwordFile</td>
<td>–</td>
<td>File containing the password for the destination/provider</td>
</tr>
<tr class="row-even">
<td>batchSize</td>
<td>100</td>
<td>Number of messages to consume in one batch</td>
</tr>
<tr class="row-odd">
<td>converter.type</td>
<td>DEFAULT</td>
<td>Class to use to convert messages to flume events. See below.</td>
</tr>
<tr class="row-even">
<td>converter.*</td>
<td>–</td>
<td>Converter properties.</td>
</tr>
<tr class="row-odd">
<td>converter.charset</td>
<td>UTF-8</td>
<td>Default converter only. Charset to use when converting JMS TextMessages to byte arrays.</td>
</tr>
</tbody>
</table>
<div id="converter" class="section">
<h5>Converter<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#converter" rel="nofollow">¶</a></h5>
<p>The JMS source allows pluggable converters, though it’s likely the default converter will work for most purposes. The default converter is able to convert Bytes, Text, and Object messages to FlumeEvents. In all cases, the properties in the message are added
 as headers to the FlumeEvent.</p>
<dl class="docutils"><dt>BytesMessage:</dt><dd>Bytes of message are copied to body of the FlumeEvent. Cannot convert more than 2GB of data per message.</dd><dt>TextMessage:</dt><dd>Text of message is converted to a byte array and copied to the body of the FlumeEvent. The default converter uses UTF-8 by default but this is configurable.</dd><dt>ObjectMessage:</dt><dd>Object is written out to a ByteArrayOutputStream wrapped in an ObjectOutputStream and the resulting array is copied to the body of the FlumeEvent.</dd></dl>
<p>Example for agent named a1:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">a1.sources</span> <span class="o">=</span> <span class="s">r1</span>
<span class="na">a1.channels</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.sources.r1.type</span> <span class="o">=</span> <span class="s">jms</span>
<span class="na">a1.sources.r1.channels</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.sources.r1.initialContextFactory</span> <span class="o">=</span> <span class="s">org.apache.activemq.jndi.ActiveMQInitialContextFactory</span>
<span class="na">a1.sources.r1.connectionFactory</span> <span class="o">=</span> <span class="s">GenericConnectionFactory</span>
<span class="na">a1.sources.r1.providerURL</span> <span class="o">=</span> <span class="s">tcp://mqserver:61616</span>
<span class="na">a1.sources.r1.destinationName</span> <span class="o">=</span> <span class="s">BUSINESS_DATA</span>
<span class="na">a1.sources.r1.destinationType</span> <span class="o">=</span> <span class="s">QUEUE</span>
</pre>
</div>
</div>
</div>
</div>
<div id="spooling-directory-source" class="section">
<h4>Spooling Directory Source<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#spooling-directory-source" rel="nofollow">¶</a></h4>
<p>This source lets you ingest data by placing files to be ingested into a “spooling” directory on disk. This source will watch the specified directory for new files, and will parse events out of new files as they appear. The event parsing logic is pluggable.
 After a given file has been fully read into the channel, it is renamed to indicate completion (or optionally deleted).</p>
<p>Unlike the Exec source, this source is reliable and will not miss data, even if Flume is restarted or killed. In exchange for this reliability, only immutable, uniquely-named files must be dropped into the spooling directory. Flume tries to detect these
 problem conditions and will fail loudly if they are violated:</p>
<ol class="arabic simple">
<li>If a file is written to after being placed into the spooling directory, Flume will print an error to its log file and stop processing.</li><li>If a file name is reused at a later time, Flume will print an error to its log file and stop processing.</li></ol>
<p>To avoid the above issues, it may be useful to add a unique identifier (such as a timestamp) to log file names when they are moved into the spooling directory.</p>
<p>Despite the reliability guarantees of this source, there are still cases in which events may be duplicated if certain downstream failures occur. This is consistent with the guarantees offered by other Flume components.</p>
<table class="docutils" border="1">
<colgroup><col width="6%"><col width="4%"><col width="89%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>channels</strong></td>
<td>–</td>
<td> </td>
</tr>
<tr class="row-odd">
<td><strong>type</strong></td>
<td>–</td>
<td>The component type name, needs to be <tt class="docutils literal">spooldir</tt>.</td>
</tr>
<tr class="row-even">
<td><strong>spoolDir</strong></td>
<td>–</td>
<td>The directory from which to read files from.</td>
</tr>
<tr class="row-odd">
<td>fileSuffix</td>
<td>.COMPLETED</td>
<td>Suffix to append to completely ingested files</td>
</tr>
<tr class="row-even">
<td>deletePolicy</td>
<td>never</td>
<td>When to delete completed files: <tt class="docutils literal">never</tt> or <tt class="docutils literal">
immediate</tt></td>
</tr>
<tr class="row-odd">
<td>fileHeader</td>
<td>false</td>
<td>Whether to add a header storing the absolute path filename.</td>
</tr>
<tr class="row-even">
<td>fileHeaderKey</td>
<td>file</td>
<td>Header key to use when appending absolute path filename to event header.</td>
</tr>
<tr class="row-odd">
<td>basenameHeader</td>
<td>false</td>
<td>Whether to add a header storing the basename of the file.</td>
</tr>
<tr class="row-even">
<td>basenameHeaderKey</td>
<td>basename</td>
<td>Header Key to use when appending basename of file to event header.</td>
</tr>
<tr class="row-odd">
<td>ignorePattern</td>
<td>^$</td>
<td>Regular expression specifying which files to ignore (skip)</td>
</tr>
<tr class="row-even">
<td>trackerDir</td>
<td>.flumespool</td>
<td>Directory to store metadata related to processing of files. If this path is not an absolute path, then it is interpreted as relative to the spoolDir.</td>
</tr>
<tr class="row-odd">
<td>maxBackoff</td>
<td>4000</td>
<td>The maximum time (in millis) to wait between consecutive attempts to write to the channel(s) if the channel is full. The source will start at a low backoff and increase it exponentially each time the channel throws a ChannelException, upto the value specified
 by this parameter.</td>
</tr>
<tr class="row-even">
<td>batchSize</td>
<td>100</td>
<td>Granularity at which to batch transfer to the channel</td>
</tr>
<tr class="row-odd">
<td>inputCharset</td>
<td>UTF-8</td>
<td>Character set used by deserializers that treat the input file as text.</td>
</tr>
<tr class="row-even">
<td>decodeErrorPolicy</td>
<td><tt class="docutils literal">FAIL</tt></td>
<td>What to do when we see a non-decodable character in the input file. <tt class="docutils literal">
FAIL</tt>: Throw an exception and fail to parse the file. <tt class="docutils literal">
REPLACE</tt>: Replace the unparseable character with the “replacement character” char, typically Unicode U+FFFD.
<tt class="docutils literal">IGNORE</tt>: Drop the unparseable character sequence.</td>
</tr>
<tr class="row-odd">
<td>deserializer</td>
<td><tt class="docutils literal">LINE</tt></td>
<td>Specify the deserializer used to parse the file into events. Defaults to parsing each line as an event. The class specified must implement
<tt class="docutils literal">EventDeserializer.Builder</tt>.</td>
</tr>
<tr class="row-even">
<td>deserializer.*</td>
<td> </td>
<td>Varies per event deserializer.</td>
</tr>
<tr class="row-odd">
<td>bufferMaxLines</td>
<td>–</td>
<td>(Obselete) This option is now ignored.</td>
</tr>
<tr class="row-even">
<td>bufferMaxLineLength</td>
<td>5000</td>
<td>(Deprecated) Maximum length of a line in the commit buffer. Use deserializer.maxLineLength instead.</td>
</tr>
<tr class="row-odd">
<td>selector.type</td>
<td>replicating</td>
<td>replicating or multiplexing</td>
</tr>
<tr class="row-even">
<td>selector.*</td>
<td> </td>
<td>Depends on the selector.type value</td>
</tr>
<tr class="row-odd">
<td>interceptors</td>
<td>–</td>
<td>Space-separated list of interceptors</td>
</tr>
<tr class="row-even">
<td>interceptors.*</td>
<td> </td>
<td> </td>
</tr>
</tbody>
</table>
<p>Example for an agent named agent-1:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">agent-1.channels</span> <span class="o">=</span> <span class="s">ch-1</span>
<span class="na">agent-1.sources</span> <span class="o">=</span> <span class="s">src-1</span>

<span class="na">agent-1.sources.src-1.type</span> <span class="o">=</span> <span class="s">spooldir</span>
<span class="na">agent-1.sources.src-1.channels</span> <span class="o">=</span> <span class="s">ch-1</span>
<span class="na">agent-1.sources.src-1.spoolDir</span> <span class="o">=</span> <span class="s">/var/log/apache/flumeSpool</span>
<span class="na">agent-1.sources.src-1.fileHeader</span> <span class="o">=</span> <span class="s">true</span>
</pre>
</div>
</div>
</div>
<div id="twitter-1-firehose-source-experimental" class="section">
<h4>Twitter 1% firehose Source (experimental)<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#twitter-1-firehose-source-experimental" rel="nofollow">¶</a></h4>
<div class="admonition warning">
<p class="first admonition-title">Warning</p>
<p class="last">This source is hightly experimental and may change between minor versions of Flume. Use at your own risk.</p>
</div>
<p>Experimental source that connects via Streaming API to the 1% sample twitter firehose, continously downloads tweets, converts them to Avro format and sends Avro events to a downstream Flume sink. Requires the consumer and access tokens and secrets of a Twitter
 developer account. Required properties are in <strong>bold</strong>.</p>
<table class="docutils" border="1">
<colgroup><col width="18%"><col width="9%"><col width="72%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>channels</strong></td>
<td>–</td>
<td> </td>
</tr>
<tr class="row-odd">
<td><strong>type</strong></td>
<td>–</td>
<td>The component type name, needs to be <tt class="docutils literal">org.apache.flume.source.twitter.TwitterSource</tt></td>
</tr>
<tr class="row-even">
<td><strong>consumerKey</strong></td>
<td>–</td>
<td>OAuth consumer key</td>
</tr>
<tr class="row-odd">
<td><strong>consumerSecret</strong></td>
<td>–</td>
<td>OAuth consumer secret</td>
</tr>
<tr class="row-even">
<td><strong>accessToken</strong></td>
<td>–</td>
<td>OAuth access token</td>
</tr>
<tr class="row-odd">
<td><strong>accessTokenSecret</strong></td>
<td>–</td>
<td>OAuth toekn secret</td>
</tr>
<tr class="row-even">
<td>maxBatchSize</td>
<td>1000</td>
<td>Maximum number of twitter messages to put in a single batch</td>
</tr>
<tr class="row-odd">
<td>maxBatchDurationMillis</td>
<td>1000</td>
<td>Maximum number of milliseconds to wait before closing a batch</td>
</tr>
</tbody>
</table>
<p>Example for agent named a1:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">a1.sources</span> <span class="o">=</span> <span class="s">r1</span>
<span class="na">a1.channels</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.sources.r1.type</span> <span class="o">=</span> <span class="s">org.apache.flume.source.twitter.TwitterSource</span>
<span class="na">a1.sources.r1.channels</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.sources.r1.consumerKey</span> <span class="o">=</span> <span class="s">YOUR_TWITTER_CONSUMER_KEY</span>
<span class="na">a1.sources.r1.consumerSecret</span> <span class="o">=</span> <span class="s">YOUR_TWITTER_CONSUMER_SECRET</span>
<span class="na">a1.sources.r1.accessToken</span> <span class="o">=</span> <span class="s">YOUR_TWITTER_ACCESS_TOKEN</span>
<span class="na">a1.sources.r1.accessTokenSecret</span> <span class="o">=</span> <span class="s">YOUR_TWITTER_ACCESS_TOKEN_SECRET</span>
<span class="na">a1.sources.r1.maxBatchSize</span> <span class="o">=</span> <span class="s">10</span>
<span class="na">a1.sources.r1.maxBatchDurationMillis</span> <span class="o">=</span> <span class="s">200</span>
</pre>
</div>
</div>
<div id="event-deserializers" class="section">
<h5>Event Deserializers<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#event-deserializers" rel="nofollow">¶</a></h5>
<p>The following event deserializers ship with Flume.</p>
<div id="line" class="section">
<h6>LINE<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#line" rel="nofollow">¶</a></h6>
<p>This deserializer generates one event per line of text input.</p>
<table class="docutils" border="1">
<colgroup><col width="29%"><col width="14%"><col width="57%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td>deserializer.maxLineLength</td>
<td>2048</td>
<td>Maximum number of characters to include in a single event. If a line exceeds this length, it is truncated, and the remaining characters on the line will appear in a subsequent event.</td>
</tr>
<tr class="row-odd">
<td>deserializer.outputCharset</td>
<td>UTF-8</td>
<td>Charset to use for encoding events put into the channel.</td>
</tr>
</tbody>
</table>
</div>
<div id="avro" class="section">
<h6>AVRO<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#avro" rel="nofollow">¶</a></h6>
<p>This deserializer is able to read an Avro container file, and it generates one event per Avro record in the file. Each event is annotated with a header that indicates the schema used. The body of the event is the binary Avro record data, not including the
 schema or the rest of the container file elements.</p>
<p>Note that if the spool directory source must retry putting one of these events onto a channel (for example, because the channel is full), then it will reset and retry from the most recent Avro container file sync point. To reduce potential event duplication
 in such a failure scenario, write sync markers more frequently in your Avro input files.</p>
<table class="docutils" border="1">
<colgroup><col width="26%"><col width="12%"><col width="62%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td>deserializer.schemaType</td>
<td>HASH</td>
<td>How the schema is represented. By default, or when the value <tt class="docutils literal">
HASH</tt> is specified, the Avro schema is hashed and the hash is stored in every event in the event header “flume.avro.schema.hash”. If
<tt class="docutils literal">LITERAL</tt> is specified, the JSON-encoded schema itself is stored in every event in the event header “flume.avro.schema.literal”. Using
<tt class="docutils literal">LITERAL</tt> mode is relatively inefficient compared to
<tt class="docutils literal">HASH</tt> mode.</td>
</tr>
</tbody>
</table>
</div>
<div id="blobdeserializer" class="section">
<h6>BlobDeserializer<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#blobdeserializer" rel="nofollow">¶</a></h6>
<p>This deserializer reads a Binary Large Object (BLOB) per event, typically one BLOB per file. For example a PDF or JPG file. Note that this approach is not suitable for very large objects because the entire BLOB is buffered in RAM.</p>
<table class="docutils" border="1">
<colgroup><col width="20%"><col width="14%"><col width="67%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>deserializer</strong></td>
<td>–</td>
<td>The FQCN of this class: <tt class="docutils literal">org.apache.flume.sink.solr.morphline.BlobDeserializer$Builder</tt></td>
</tr>
<tr class="row-odd">
<td>deserializer.maxBlobLength</td>
<td>100000000</td>
<td>The maximum number of bytes to read and buffer for a given request</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div id="netcat-source" class="section">
<h4>NetCat Source<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#netcat-source" rel="nofollow">¶</a></h4>
<p>A netcat-like source that listens on a given port and turns each line of text into an event. Acts like
<tt class="docutils literal"><span class="pre">nc</span> <span class="pre">-k</span>
<span class="pre">-l</span> <span class="pre">[host]</span> <span class="pre">[port]</span></tt>. In other words, it opens a specified port and listens for data. The expectation is that the supplied data is newline separated text. Each line of text is turned
 into a Flume event and sent via the connected channel.</p>
<p>Required properties are in <strong>bold</strong>.</p>
<table class="docutils" border="1">
<colgroup><col width="21%"><col width="15%"><col width="64%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>channels</strong></td>
<td>–</td>
<td> </td>
</tr>
<tr class="row-odd">
<td><strong>type</strong></td>
<td>–</td>
<td>The component type name, needs to be <tt class="docutils literal">netcat</tt></td>
</tr>
<tr class="row-even">
<td><strong>bind</strong></td>
<td>–</td>
<td>Host name or IP address to bind to</td>
</tr>
<tr class="row-odd">
<td><strong>port</strong></td>
<td>–</td>
<td>Port # to bind to</td>
</tr>
<tr class="row-even">
<td>max-line-length</td>
<td>512</td>
<td>Max line length per event body (in bytes)</td>
</tr>
<tr class="row-odd">
<td>ack-every-event</td>
<td>true</td>
<td>Respond with an “OK” for every event received</td>
</tr>
<tr class="row-even">
<td>selector.type</td>
<td>replicating</td>
<td>replicating or multiplexing</td>
</tr>
<tr class="row-odd">
<td>selector.*</td>
<td> </td>
<td>Depends on the selector.type value</td>
</tr>
<tr class="row-even">
<td>interceptors</td>
<td>–</td>
<td>Space-separated list of interceptors</td>
</tr>
<tr class="row-odd">
<td>interceptors.*</td>
<td> </td>
<td> </td>
</tr>
</tbody>
</table>
<p>Example for agent named a1:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">a1.sources</span> <span class="o">=</span> <span class="s">r1</span>
<span class="na">a1.channels</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.sources.r1.type</span> <span class="o">=</span> <span class="s">netcat</span>
<span class="na">a1.sources.r1.bind</span> <span class="o">=</span> <span class="s">0.0.0.0</span>
<span class="na">a1.sources.r1.bind</span> <span class="o">=</span> <span class="s">6666</span>
<span class="na">a1.sources.r1.channels</span> <span class="o">=</span> <span class="s">c1</span>
</pre>
</div>
</div>
</div>
<div id="sequence-generator-source" class="section">
<h4>Sequence Generator Source<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#sequence-generator-source" rel="nofollow">¶</a></h4>
<p>A simple sequence generator that continuously generates events with a counter that starts from 0 and increments by 1. Useful mainly for testing. Required properties are in
<strong>bold</strong>.</p>
<table class="docutils" border="1">
<colgroup><col width="20%"><col width="16%"><col width="64%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>channels</strong></td>
<td>–</td>
<td> </td>
</tr>
<tr class="row-odd">
<td><strong>type</strong></td>
<td>–</td>
<td>The component type name, needs to be <tt class="docutils literal">seq</tt></td>
</tr>
<tr class="row-even">
<td>selector.type</td>
<td> </td>
<td>replicating or multiplexing</td>
</tr>
<tr class="row-odd">
<td>selector.*</td>
<td>replicating</td>
<td>Depends on the selector.type value</td>
</tr>
<tr class="row-even">
<td>interceptors</td>
<td>–</td>
<td>Space-separated list of interceptors</td>
</tr>
<tr class="row-odd">
<td>interceptors.*</td>
<td> </td>
<td> </td>
</tr>
<tr class="row-even">
<td>batchSize</td>
<td>1</td>
<td> </td>
</tr>
</tbody>
</table>
<p>Example for agent named a1:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">a1.sources</span> <span class="o">=</span> <span class="s">r1</span>
<span class="na">a1.channels</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.sources.r1.type</span> <span class="o">=</span> <span class="s">seq</span>
<span class="na">a1.sources.r1.channels</span> <span class="o">=</span> <span class="s">c1</span>
</pre>
</div>
</div>
</div>
<div id="syslog-sources" class="section">
<h4>Syslog Sources<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#syslog-sources" rel="nofollow">¶</a></h4>
<p>Reads syslog data and generate Flume events. The UDP source treats an entire message as a single event. The TCP sources create a new event for each string of characters separated by a newline (‘n’).</p>
<p>Required properties are in <strong>bold</strong>.</p>
<div id="syslog-tcp-source" class="section">
<h5>Syslog TCP Source<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#syslog-tcp-source" rel="nofollow">¶</a></h5>
<p>The original, tried-and-true syslog TCP source.</p>
<table class="docutils" border="1">
<colgroup><col width="19%"><col width="15%"><col width="67%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>channels</strong></td>
<td>–</td>
<td> </td>
</tr>
<tr class="row-odd">
<td><strong>type</strong></td>
<td>–</td>
<td>The component type name, needs to be <tt class="docutils literal">syslogtcp</tt></td>
</tr>
<tr class="row-even">
<td><strong>host</strong></td>
<td>–</td>
<td>Host name or IP address to bind to</td>
</tr>
<tr class="row-odd">
<td><strong>port</strong></td>
<td>–</td>
<td>Port # to bind to</td>
</tr>
<tr class="row-even">
<td>eventSize</td>
<td>2500</td>
<td>Maximum size of a single event line, in bytes</td>
</tr>
<tr class="row-odd">
<td>keepFields</td>
<td>false</td>
<td>Setting this to true will preserve the Priority, Timestamp and Hostname in the body of the event.</td>
</tr>
<tr class="row-even">
<td>selector.type</td>
<td> </td>
<td>replicating or multiplexing</td>
</tr>
<tr class="row-odd">
<td>selector.*</td>
<td>replicating</td>
<td>Depends on the selector.type value</td>
</tr>
<tr class="row-even">
<td>interceptors</td>
<td>–</td>
<td>Space-separated list of interceptors</td>
</tr>
<tr class="row-odd">
<td>interceptors.*</td>
<td> </td>
<td> </td>
</tr>
</tbody>
</table>
<p>For example, a syslog TCP source for agent named a1:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">a1.sources</span> <span class="o">=</span> <span class="s">r1</span>
<span class="na">a1.channels</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.sources.r1.type</span> <span class="o">=</span> <span class="s">syslogtcp</span>
<span class="na">a1.sources.r1.port</span> <span class="o">=</span> <span class="s">5140</span>
<span class="na">a1.sources.r1.host</span> <span class="o">=</span> <span class="s">localhost</span>
<span class="na">a1.sources.r1.channels</span> <span class="o">=</span> <span class="s">c1</span>
</pre>
</div>
</div>
</div>
<div id="multiport-syslog-tcp-source" class="section">
<h5>Multiport Syslog TCP Source<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#multiport-syslog-tcp-source" rel="nofollow">¶</a></h5>
<p>This is a newer, faster, multi-port capable version of the Syslog TCP source. Note that the
<tt class="docutils literal">ports</tt> configuration setting has replaced <tt class="docutils literal">
port</tt>. Multi-port capability means that it can listen on many ports at once in an efficient manner. This source uses the Apache Mina library to do that. Provides support for RFC-3164 and many common RFC-5424 formatted messages. Also provides the capability
 to configure the character set used on a per-port basis.</p>
<table class="docutils" border="1">
<colgroup><col width="7%"><col width="6%"><col width="87%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>channels</strong></td>
<td>–</td>
<td> </td>
</tr>
<tr class="row-odd">
<td><strong>type</strong></td>
<td>–</td>
<td>The component type name, needs to be <tt class="docutils literal">multiport_syslogtcp</tt></td>
</tr>
<tr class="row-even">
<td><strong>host</strong></td>
<td>–</td>
<td>Host name or IP address to bind to.</td>
</tr>
<tr class="row-odd">
<td><strong>ports</strong></td>
<td>–</td>
<td>Space-separated list (one or more) of ports to bind to.</td>
</tr>
<tr class="row-even">
<td>eventSize</td>
<td>2500</td>
<td>Maximum size of a single event line, in bytes.</td>
</tr>
<tr class="row-odd">
<td>keepFields</td>
<td>false</td>
<td>Setting this to true will preserve the Priority, Timestamp and Hostname in the body of the event.</td>
</tr>
<tr class="row-even">
<td>portHeader</td>
<td>–</td>
<td>If specified, the port number will be stored in the header of each event using the header name specified here. This allows for interceptors and channel selectors to customize routing logic based on the incoming port.</td>
</tr>
<tr class="row-odd">
<td>charset.default</td>
<td>UTF-8</td>
<td>Default character set used while parsing syslog events into strings.</td>
</tr>
<tr class="row-even">
<td>charset.port.&lt;port&gt;</td>
<td>–</td>
<td>Character set is configurable on a per-port basis.</td>
</tr>
<tr class="row-odd">
<td>batchSize</td>
<td>100</td>
<td>Maximum number of events to attempt to process per request loop. Using the default is usually fine.</td>
</tr>
<tr class="row-even">
<td>readBufferSize</td>
<td>1024</td>
<td>Size of the internal Mina read buffer. Provided for performance tuning. Using the default is usually fine.</td>
</tr>
<tr class="row-odd">
<td>numProcessors</td>
<td>(auto-detected)</td>
<td>Number of processors available on the system for use while processing messages. Default is to auto-detect # of CPUs using the Java Runtime API. Mina will spawn 2 request-processing threads per detected CPU, which is often reasonable.</td>
</tr>
<tr class="row-even">
<td>selector.type</td>
<td>replicating</td>
<td>replicating, multiplexing, or custom</td>
</tr>
<tr class="row-odd">
<td>selector.*</td>
<td>–</td>
<td>Depends on the <tt class="docutils literal">selector.type</tt> value</td>
</tr>
<tr class="row-even">
<td>interceptors</td>
<td>–</td>
<td>Space-separated list of interceptors.</td>
</tr>
<tr class="row-odd">
<td>interceptors.*</td>
<td> </td>
<td> </td>
</tr>
</tbody>
</table>
<p>For example, a multiport syslog TCP source for agent named a1:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">a1.sources</span> <span class="o">=</span> <span class="s">r1</span>
<span class="na">a1.channels</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.sources.r1.type</span> <span class="o">=</span> <span class="s">multiport_syslogtcp</span>
<span class="na">a1.sources.r1.channels</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.sources.r1.host</span> <span class="o">=</span> <span class="s">0.0.0.0</span>
<span class="na">a1.sources.r1.ports</span> <span class="o">=</span> <span class="s">10001 10002 10003</span>
<span class="na">a1.sources.r1.portHeader</span> <span class="o">=</span> <span class="s">port</span>
</pre>
</div>
</div>
</div>
<div id="syslog-udp-source" class="section">
<h5>Syslog UDP Source<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#syslog-udp-source" rel="nofollow">¶</a></h5>
<table class="docutils" border="1">
<colgroup><col width="19%"><col width="15%"><col width="67%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>channels</strong></td>
<td>–</td>
<td> </td>
</tr>
<tr class="row-odd">
<td><strong>type</strong></td>
<td>–</td>
<td>The component type name, needs to be <tt class="docutils literal">syslogudp</tt></td>
</tr>
<tr class="row-even">
<td><strong>host</strong></td>
<td>–</td>
<td>Host name or IP address to bind to</td>
</tr>
<tr class="row-odd">
<td><strong>port</strong></td>
<td>–</td>
<td>Port # to bind to</td>
</tr>
<tr class="row-even">
<td>keepFields</td>
<td>false</td>
<td>Setting this to true will preserve the Priority, Timestamp and Hostname in the body of the event.</td>
</tr>
<tr class="row-odd">
<td>selector.type</td>
<td> </td>
<td>replicating or multiplexing</td>
</tr>
<tr class="row-even">
<td>selector.*</td>
<td>replicating</td>
<td>Depends on the selector.type value</td>
</tr>
<tr class="row-odd">
<td>interceptors</td>
<td>–</td>
<td>Space-separated list of interceptors</td>
</tr>
<tr class="row-even">
<td>interceptors.*</td>
<td> </td>
<td> </td>
</tr>
</tbody>
</table>
<p>For example, a syslog UDP source for agent named a1:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">a1.sources</span> <span class="o">=</span> <span class="s">r1</span>
<span class="na">a1.channels</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.sources.r1.type</span> <span class="o">=</span> <span class="s">syslogudp</span>
<span class="na">a1.sources.r1.port</span> <span class="o">=</span> <span class="s">5140</span>
<span class="na">a1.sources.r1.host</span> <span class="o">=</span> <span class="s">localhost</span>
<span class="na">a1.sources.r1.channels</span> <span class="o">=</span> <span class="s">c1</span>
</pre>
</div>
</div>
</div>
</div>
<div id="http-source" class="section">
<h4>HTTP Source<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#http-source" rel="nofollow">¶</a></h4>
<p>A source which accepts Flume Events by HTTP POST and GET. GET should be used for experimentation only. HTTP requests are converted into flume events by a pluggable “handler” which must implement the HTTPSourceHandler interface. This handler takes a HttpServletRequest
 and returns a list of flume events. All events handled from one Http request are committed to the channel in one transaction, thus allowing for increased efficiency on channels like the file channel. If the handler throws an exception, this source will return
 a HTTP status of 400. If the channel is full, or the source is unable to append events to the channel, the source will return a HTTP 503 - Temporarily unavailable status.</p>
<p>All events sent in one post request are considered to be one batch and inserted into the channel in one transaction.</p>
<table class="docutils" border="1">
<colgroup><col width="11%"><col width="35%"><col width="54%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>type</strong></td>
<td> </td>
<td>The component type name, needs to be <tt class="docutils literal">http</tt></td>
</tr>
<tr class="row-odd">
<td><strong>port</strong></td>
<td>–</td>
<td>The port the source should bind to.</td>
</tr>
<tr class="row-even">
<td>bind</td>
<td>0.0.0.0</td>
<td>The hostname or IP address to listen on</td>
</tr>
<tr class="row-odd">
<td>handler</td>
<td><tt class="docutils literal">org.apache.flume.source.http.JSONHandler</tt></td>
<td>The FQCN of the handler class.</td>
</tr>
<tr class="row-even">
<td>handler.*</td>
<td>–</td>
<td>Config parameters for the handler</td>
</tr>
<tr class="row-odd">
<td>selector.type</td>
<td>replicating</td>
<td>replicating or multiplexing</td>
</tr>
<tr class="row-even">
<td>selector.*</td>
<td> </td>
<td>Depends on the selector.type value</td>
</tr>
<tr class="row-odd">
<td>interceptors</td>
<td>–</td>
<td>Space-separated list of interceptors</td>
</tr>
<tr class="row-even">
<td>interceptors.*</td>
<td> </td>
<td> </td>
</tr>
<tr class="row-odd">
<td>enableSSL</td>
<td>false</td>
<td>Set the property true, to enable SSL</td>
</tr>
<tr class="row-even">
<td>keystore</td>
<td> </td>
<td>Location of the keystore includng keystore file name</td>
</tr>
<tr class="row-odd">
<td colspan="3">keystorePassword Keystore password</td>
</tr>
</tbody>
</table>
<p>For example, a http source for agent named a1:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">a1.sources</span> <span class="o">=</span> <span class="s">r1</span>
<span class="na">a1.channels</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.sources.r1.type</span> <span class="o">=</span> <span class="s">http</span>
<span class="na">a1.sources.r1.port</span> <span class="o">=</span> <span class="s">5140</span>
<span class="na">a1.sources.r1.channels</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.sources.r1.handler</span> <span class="o">=</span> <span class="s">org.example.rest.RestHandler</span>
<span class="na">a1.sources.r1.handler.nickname</span> <span class="o">=</span> <span class="s">random props</span>
</pre>
</div>
</div>
<div id="jsonhandler" class="section">
<h5>JSONHandler<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#jsonhandler" rel="nofollow">¶</a></h5>
<p>A handler is provided out of the box which can handle events represented in JSON format, and supports UTF-8, UTF-16 and UTF-32 character sets. The handler accepts an array of events (even if there is only one event, the event has to be sent in an array)
 and converts them to a Flume event based on the encoding specified in the request. If no encoding is specified, UTF-8 is assumed. The JSON handler supports UTF-8, UTF-16 and UTF-32. Events are represented as follows.</p>
<div class="highlight-javascript">
<div class="highlight">
<pre><span class="p">[{</span>
  <span class="s2">"headers"</span> <span class="o">:</span> <span class="p">{</span>
             <span class="s2">"timestamp"</span> <span class="o">:</span> <span class="s2">"434324343"</span><span class="p">,</span>
             <span class="s2">"host"</span> <span class="o">:</span> <span class="s2">"random_host.example.com"</span>
             <span class="p">},</span>
  <span class="s2">"body"</span> <span class="o">:</span> <span class="s2">"random_body"</span>
  <span class="p">},</span>
  <span class="p">{</span>
  <span class="s2">"headers"</span> <span class="o">:</span> <span class="p">{</span>
             <span class="s2">"namenode"</span> <span class="o">:</span> <span class="s2">"namenode.example.com"</span><span class="p">,</span>
             <span class="s2">"datanode"</span> <span class="o">:</span> <span class="s2">"random_datanode.example.com"</span>
             <span class="p">},</span>
  <span class="s2">"body"</span> <span class="o">:</span> <span class="s2">"really_random_body"</span>
  <span class="p">}]</span>
</pre>
</div>
</div>
<p>To set the charset, the request must have content type specified as <tt class="docutils literal">
<span class="pre">application/json;</span> <span class="pre">charset=UTF-8</span></tt> (replace UTF-8 with UTF-16 or UTF-32 as required).</p>
<p>One way to create an event in the format expected by this handler is to use JSONEvent provided in the Flume SDK and use Google Gson to create the JSON string using the Gson#fromJson(Object, Type) method. The type token to pass as the 2nd argument of this
 method for list of events can be created by:</p>
<div class="highlight-java">
<div class="highlight">
<pre><span class="n">Type</span> <span class="n">type</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TypeToken</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">JSONEvent</span><span class="o">&gt;&gt;()</span> <span class="o">{}.</span><span class="na">getType</span><span class="o">();</span>
</pre>
</div>
</div>
</div>
<div id="blobhandler" class="section">
<h5>BlobHandler<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#blobhandler" rel="nofollow">¶</a></h5>
<p>By default HTTPSource splits JSON input into Flume events. As an alternative, BlobHandler is a handler for HTTPSource that returns an event that contains the request parameters as well as the Binary Large Object (BLOB) uploaded with this request. For example
 a PDF or JPG file. Note that this approach is not suitable for very large objects because it buffers up the entire BLOB in RAM.</p>
<table class="docutils" border="1">
<colgroup><col width="18%"><col width="16%"><col width="66%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>handler</strong></td>
<td>–</td>
<td>The FQCN of this class: <tt class="docutils literal">org.apache.flume.sink.solr.morphline.BlobHandler</tt></td>
</tr>
<tr class="row-odd">
<td>handler.maxBlobLength</td>
<td>100000000</td>
<td>The maximum number of bytes to read and buffer for a given request</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="legacy-sources" class="section">
<h4>Legacy Sources<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#legacy-sources" rel="nofollow">¶</a></h4>
<p>The legacy sources allow a Flume 1.x agent to receive events from Flume 0.9.4 agents. It accepts events in the Flume 0.9.4 format, converts them to the Flume 1.0 format, and stores them in the connected channel. The 0.9.4 event properties like timestamp,
 pri, host, nanos, etc get converted to 1.x event header attributes. The legacy source supports both Avro and Thrift RPC connections. To use this bridge between two Flume versions, you need to start a Flume 1.x agent with the avroLegacy or thriftLegacy source.
 The 0.9.4 agent should have the agent Sink pointing to the host/port of the 1.x agent.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">The reliability semantics of Flume 1.x are different from that of Flume 0.9.x. The E2E or DFO mode of a Flume 0.9.x agent will not be supported by the legacy source. The only supported 0.9.x mode is the best effort, though the reliability setting
 of the 1.x flow will be applicable to the events once they are saved into the Flume 1.x channel by the legacy source.</p>
</div>
<p>Required properties are in <strong>bold</strong>.</p>
<div id="avro-legacy-source" class="section">
<h5>Avro Legacy Source<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#avro-legacy-source" rel="nofollow">¶</a></h5>
<table class="docutils" border="1">
<colgroup><col width="12%"><col width="9%"><col width="79%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>channels</strong></td>
<td>–</td>
<td> </td>
</tr>
<tr class="row-odd">
<td><strong>type</strong></td>
<td>–</td>
<td>The component type name, needs to be <tt class="docutils literal">org.apache.flume.source.avroLegacy.AvroLegacySource</tt></td>
</tr>
<tr class="row-even">
<td><strong>host</strong></td>
<td>–</td>
<td>The hostname or IP address to bind to</td>
</tr>
<tr class="row-odd">
<td><strong>port</strong></td>
<td>–</td>
<td>The port # to listen on</td>
</tr>
<tr class="row-even">
<td>selector.type</td>
<td> </td>
<td>replicating or multiplexing</td>
</tr>
<tr class="row-odd">
<td>selector.*</td>
<td>replicating</td>
<td>Depends on the selector.type value</td>
</tr>
<tr class="row-even">
<td>interceptors</td>
<td>–</td>
<td>Space-separated list of interceptors</td>
</tr>
<tr class="row-odd">
<td>interceptors.*</td>
<td> </td>
<td> </td>
</tr>
</tbody>
</table>
<p>Example for agent named a1:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">a1.sources</span> <span class="o">=</span> <span class="s">r1</span>
<span class="na">a1.channels</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.sources.r1.type</span> <span class="o">=</span> <span class="s">org.apache.flume.source.avroLegacy.AvroLegacySource</span>
<span class="na">a1.sources.r1.host</span> <span class="o">=</span> <span class="s">0.0.0.0</span>
<span class="na">a1.sources.r1.bind</span> <span class="o">=</span> <span class="s">6666</span>
<span class="na">a1.sources.r1.channels</span> <span class="o">=</span> <span class="s">c1</span>
</pre>
</div>
</div>
</div>
<div id="thrift-legacy-source" class="section">
<h5>Thrift Legacy Source<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#thrift-legacy-source" rel="nofollow">¶</a></h5>
<table class="docutils" border="1">
<colgroup><col width="12%"><col width="9%"><col width="79%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>channels</strong></td>
<td>–</td>
<td> </td>
</tr>
<tr class="row-odd">
<td><strong>type</strong></td>
<td>–</td>
<td>The component type name, needs to be <tt class="docutils literal">org.apache.flume.source.thriftLegacy.ThriftLegacySource</tt></td>
</tr>
<tr class="row-even">
<td><strong>host</strong></td>
<td>–</td>
<td>The hostname or IP address to bind to</td>
</tr>
<tr class="row-odd">
<td><strong>port</strong></td>
<td>–</td>
<td>The port # to listen on</td>
</tr>
<tr class="row-even">
<td>selector.type</td>
<td> </td>
<td>replicating or multiplexing</td>
</tr>
<tr class="row-odd">
<td>selector.*</td>
<td>replicating</td>
<td>Depends on the selector.type value</td>
</tr>
<tr class="row-even">
<td>interceptors</td>
<td>–</td>
<td>Space-separated list of interceptors</td>
</tr>
<tr class="row-odd">
<td>interceptors.*</td>
<td> </td>
<td> </td>
</tr>
</tbody>
</table>
<p>Example for agent named a1:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">a1.sources</span> <span class="o">=</span> <span class="s">r1</span>
<span class="na">a1.channels</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.sources.r1.type</span> <span class="o">=</span> <span class="s">org.apache.flume.source.thriftLegacy.ThriftLegacySource</span>
<span class="na">a1.sources.r1.host</span> <span class="o">=</span> <span class="s">0.0.0.0</span>
<span class="na">a1.sources.r1.bind</span> <span class="o">=</span> <span class="s">6666</span>
<span class="na">a1.sources.r1.channels</span> <span class="o">=</span> <span class="s">c1</span>
</pre>
</div>
</div>
</div>
</div>
<div id="custom-source" class="section">
<h4>Custom Source<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#custom-source" rel="nofollow">¶</a></h4>
<p>A custom source is your own implementation of the Source interface. A custom source’s class and its dependencies must be included in the agent’s classpath when starting the Flume agent. The type of the custom source is its FQCN.</p>
<table class="docutils" border="1">
<colgroup><col width="20%"><col width="15%"><col width="65%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>channels</strong></td>
<td>–</td>
<td> </td>
</tr>
<tr class="row-odd">
<td><strong>type</strong></td>
<td>–</td>
<td>The component type name, needs to be your FQCN</td>
</tr>
<tr class="row-even">
<td>selector.type</td>
<td> </td>
<td><tt class="docutils literal">replicating</tt> or <tt class="docutils literal">
multiplexing</tt></td>
</tr>
<tr class="row-odd">
<td>selector.*</td>
<td>replicating</td>
<td>Depends on the selector.type value</td>
</tr>
<tr class="row-even">
<td>interceptors</td>
<td>–</td>
<td>Space-separated list of interceptors</td>
</tr>
<tr class="row-odd">
<td>interceptors.*</td>
<td> </td>
<td> </td>
</tr>
</tbody>
</table>
<p>Example for agent named a1:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">a1.sources</span> <span class="o">=</span> <span class="s">r1</span>
<span class="na">a1.channels</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.sources.r1.type</span> <span class="o">=</span> <span class="s">org.example.MySource</span>
<span class="na">a1.sources.r1.channels</span> <span class="o">=</span> <span class="s">c1</span>
</pre>
</div>
</div>
</div>
<div id="scribe-source" class="section">
<h4>Scribe Source<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#scribe-source" rel="nofollow">¶</a></h4>
<p>Scribe is another type of ingest system. To adopt existing Scribe ingest system, Flume should use ScribeSource based on Thrift with compatible transfering protocol. For deployment of Scribe please follow the guide from Facebook. Required properties are in
<strong>bold</strong>.</p>
<table class="docutils" border="1">
<colgroup><col width="13%"><col width="10%"><col width="77%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>type</strong></td>
<td>–</td>
<td>The component type name, needs to be <tt class="docutils literal">org.apache.flume.source.scribe.ScribeSource</tt></td>
</tr>
<tr class="row-odd">
<td>port</td>
<td>1499</td>
<td>Port that Scribe should be connected</td>
</tr>
<tr class="row-even">
<td>workerThreads</td>
<td>5</td>
<td>Handing threads number in Thrift</td>
</tr>
<tr class="row-odd">
<td>selector.type</td>
<td> </td>
<td> </td>
</tr>
<tr class="row-even">
<td>selector.*</td>
<td> </td>
<td> </td>
</tr>
</tbody>
</table>
<p>Example for agent named a1:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">a1.sources</span> <span class="o">=</span> <span class="s">r1</span>
<span class="na">a1.channels</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.sources.r1.type</span> <span class="o">=</span> <span class="s">org.apache.flume.source.scribe.ScribeSource</span>
<span class="na">a1.sources.r1.port</span> <span class="o">=</span> <span class="s">1463</span>
<span class="na">a1.sources.r1.workerThreads</span> <span class="o">=</span> <span class="s">5</span>
<span class="na">a1.sources.r1.channels</span> <span class="o">=</span> <span class="s">c1</span>
</pre>
</div>
</div>
</div>
</div>
<div id="flume-sinks" class="section">
<h3>Flume Sinks<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#flume-sinks" rel="nofollow">¶</a></h3>
<div id="hdfs-sink" class="section">
<h4>HDFS Sink<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#hdfs-sink" rel="nofollow">¶</a></h4>
<p>This sink writes events into the Hadoop Distributed File System (HDFS). It currently supports creating text and sequence files. It supports compression in both file types. The files can be rolled (close current file and create a new one) periodically based
 on the elapsed time or size of data or number of events. It also buckets/partitions data by attributes like timestamp or machine where the event originated. The HDFS directory path may contain formatting escape sequences that will replaced by the HDFS sink
 to generate a directory/file name to store the events. Using this sink requires hadoop to be installed so that Flume can use the Hadoop jars to communicate with the HDFS cluster. Note that a version of Hadoop that supports the sync() call is required.</p>
<p>The following are the escape sequences supported:</p>
<table class="docutils" border="1">
<colgroup><col width="10%"><col width="90%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Alias</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td>%{host}</td>
<td>Substitute value of event header named “host”. Arbitrary header names are supported.</td>
</tr>
<tr class="row-odd">
<td>%t</td>
<td>Unix time in milliseconds</td>
</tr>
<tr class="row-even">
<td>%a</td>
<td>locale’s short weekday name (Mon, Tue, ...)</td>
</tr>
<tr class="row-odd">
<td>%A</td>
<td>locale’s full weekday name (Monday, Tuesday, ...)</td>
</tr>
<tr class="row-even">
<td>%b</td>
<td>locale’s short month name (Jan, Feb, ...)</td>
</tr>
<tr class="row-odd">
<td>%B</td>
<td>locale’s long month name (January, February, ...)</td>
</tr>
<tr class="row-even">
<td>%c</td>
<td>locale’s date and time (Thu Mar 3 23:05:25 2005)</td>
</tr>
<tr class="row-odd">
<td>%d</td>
<td>day of month (01)</td>
</tr>
<tr class="row-even">
<td>%D</td>
<td>date; same as %m/%d/%y</td>
</tr>
<tr class="row-odd">
<td>%H</td>
<td>hour (00..23)</td>
</tr>
<tr class="row-even">
<td>%I</td>
<td>hour (01..12)</td>
</tr>
<tr class="row-odd">
<td>%j</td>
<td>day of year (001..366)</td>
</tr>
<tr class="row-even">
<td>%k</td>
<td>hour ( 0..23)</td>
</tr>
<tr class="row-odd">
<td>%m</td>
<td>month (01..12)</td>
</tr>
<tr class="row-even">
<td>%M</td>
<td>minute (00..59)</td>
</tr>
<tr class="row-odd">
<td>%p</td>
<td>locale’s equivalent of am or pm</td>
</tr>
<tr class="row-even">
<td>%s</td>
<td>seconds since 1970-01-01 00:00:00 UTC</td>
</tr>
<tr class="row-odd">
<td>%S</td>
<td>second (00..59)</td>
</tr>
<tr class="row-even">
<td>%y</td>
<td>last two digits of year (00..99)</td>
</tr>
<tr class="row-odd">
<td>%Y</td>
<td>year (2010)</td>
</tr>
<tr class="row-even">
<td>%z</td>
<td>+hhmm numeric timezone (for example, -0400)</td>
</tr>
</tbody>
</table>
<p>The file in use will have the name mangled to include ”.tmp” at the end. Once the file is closed, this extension is removed. This allows excluding partially complete files in the directory. Required properties are in
<strong>bold</strong>.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">For all of the time related escape sequences, a header with the key “timestamp” must exist among the headers of the event (unless
<tt class="docutils literal">hdfs.useLocalTimeStamp</tt> is set to <tt class="docutils literal">
true</tt>). One way to add this automatically is to use the TimestampInterceptor.</p>
</div>
<table class="docutils" border="1">
<colgroup><col width="14%"><col width="8%"><col width="79%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>channel</strong></td>
<td>–</td>
<td> </td>
</tr>
<tr class="row-odd">
<td><strong>type</strong></td>
<td>–</td>
<td>The component type name, needs to be <tt class="docutils literal">hdfs</tt></td>
</tr>
<tr class="row-even">
<td><strong>hdfs.path</strong></td>
<td>–</td>
<td>HDFS directory path (eg hdfs://namenode/flume/webdata/)</td>
</tr>
<tr class="row-odd">
<td>hdfs.filePrefix</td>
<td>FlumeData</td>
<td>Name prefixed to files created by Flume in hdfs directory</td>
</tr>
<tr class="row-even">
<td>hdfs.fileSuffix</td>
<td>–</td>
<td>Suffix to append to file (eg <tt class="docutils literal">.avro</tt> - <em>NOTE: period is not automatically added</em>)</td>
</tr>
<tr class="row-odd">
<td>hdfs.inUsePrefix</td>
<td>–</td>
<td>Prefix that is used for temporal files that flume actively writes into</td>
</tr>
<tr class="row-even">
<td>hdfs.inUseSuffix</td>
<td><tt class="docutils literal">.tmp</tt></td>
<td>Suffix that is used for temporal files that flume actively writes into</td>
</tr>
<tr class="row-odd">
<td>hdfs.rollInterval</td>
<td>30</td>
<td>Number of seconds to wait before rolling current file (0 = never roll based on time interval)</td>
</tr>
<tr class="row-even">
<td>hdfs.rollSize</td>
<td>1024</td>
<td>File size to trigger roll, in bytes (0: never roll based on file size)</td>
</tr>
<tr class="row-odd">
<td>hdfs.rollCount</td>
<td>10</td>
<td>Number of events written to file before it rolled (0 = never roll based on number of events)</td>
</tr>
<tr class="row-even">
<td>hdfs.idleTimeout</td>
<td>0</td>
<td>Timeout after which inactive files get closed (0 = disable automatic closing of idle files)</td>
</tr>
<tr class="row-odd">
<td>hdfs.batchSize</td>
<td>100</td>
<td>number of events written to file before it is flushed to HDFS</td>
</tr>
<tr class="row-even">
<td>hdfs.codeC</td>
<td>–</td>
<td>Compression codec. one of following : gzip, bzip2, lzo, lzop, snappy</td>
</tr>
<tr class="row-odd">
<td>hdfs.fileType</td>
<td>SequenceFile</td>
<td>File format: currently <tt class="docutils literal">SequenceFile</tt>, <tt class="docutils literal">
DataStream</tt> or <tt class="docutils literal">CompressedStream</tt> (1)DataStream will not compress output file and please don’t set codeC (2)CompressedStream requires set hdfs.codeC with an available codeC</td>
</tr>
<tr class="row-even">
<td>hdfs.maxOpenFiles</td>
<td>5000</td>
<td>Allow only this number of open files. If this number is exceeded, the oldest file is closed.</td>
</tr>
<tr class="row-odd">
<td>hdfs.minBlockReplicas</td>
<td>–</td>
<td>Specify minimum number of replicas per HDFS block. If not specified, it comes from the default Hadoop config in the classpath.</td>
</tr>
<tr class="row-even">
<td>hdfs.writeFormat</td>
<td>–</td>
<td>Format for sequence file records. One of “Text” or “Writable” (the default).</td>
</tr>
<tr class="row-odd">
<td>hdfs.callTimeout</td>
<td>10000</td>
<td>Number of milliseconds allowed for HDFS operations, such as open, write, flush, close. This number should be increased if many HDFS timeout operations are occurring.</td>
</tr>
<tr class="row-even">
<td>hdfs.threadsPoolSize</td>
<td>10</td>
<td>Number of threads per HDFS sink for HDFS IO ops (open, write, etc.)</td>
</tr>
<tr class="row-odd">
<td>hdfs.rollTimerPoolSize</td>
<td>1</td>
<td>Number of threads per HDFS sink for scheduling timed file rolling</td>
</tr>
<tr class="row-even">
<td>hdfs.kerberosPrincipal</td>
<td>–</td>
<td>Kerberos user principal for accessing secure HDFS</td>
</tr>
<tr class="row-odd">
<td>hdfs.kerberosKeytab</td>
<td>–</td>
<td>Kerberos keytab for accessing secure HDFS</td>
</tr>
<tr class="row-even">
<td>hdfs.proxyUser</td>
<td> </td>
<td> </td>
</tr>
<tr class="row-odd">
<td>hdfs.round</td>
<td>false</td>
<td>Should the timestamp be rounded down (if true, affects all time based escape sequences except %t)</td>
</tr>
<tr class="row-even">
<td>hdfs.roundValue</td>
<td>1</td>
<td>Rounded down to the highest multiple of this (in the unit configured using <tt class="docutils literal">
hdfs.roundUnit</tt>), less than current time.</td>
</tr>
<tr class="row-odd">
<td>hdfs.roundUnit</td>
<td>second</td>
<td>The unit of the round down value - <tt class="docutils literal">second</tt>, <tt class="docutils literal">
minute</tt> or <tt class="docutils literal">hour</tt>.</td>
</tr>
<tr class="row-even">
<td>hdfs.timeZone</td>
<td>Local Time</td>
<td>Name of the timezone that should be used for resolving the directory path, e.g. America/Los_Angeles.</td>
</tr>
<tr class="row-odd">
<td>hdfs.useLocalTimeStamp</td>
<td>false</td>
<td>Use the local time (instead of the timestamp from the event header) while replacing the escape sequences.</td>
</tr>
<tr class="row-even">
<td>serializer</td>
<td><tt class="docutils literal">TEXT</tt></td>
<td>Other possible options include <tt class="docutils literal">avro_event</tt> or the fully-qualified class name of an implementation of the
<tt class="docutils literal">EventSerializer.Builder</tt> interface.</td>
</tr>
<tr class="row-odd">
<td>serializer.*</td>
<td> </td>
<td> </td>
</tr>
</tbody>
</table>
<p>Example for agent named a1:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">a1.channels</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.sinks</span> <span class="o">=</span> <span class="s">k1</span>
<span class="na">a1.sinks.k1.type</span> <span class="o">=</span> <span class="s">hdfs</span>
<span class="na">a1.sinks.k1.channel</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.sinks.k1.hdfs.path</span> <span class="o">=</span> <span class="s">/flume/events/%y-%m-%d/%H%M/%S</span>
<span class="na">a1.sinks.k1.hdfs.filePrefix</span> <span class="o">=</span> <span class="s">events-</span>
<span class="na">a1.sinks.k1.hdfs.round</span> <span class="o">=</span> <span class="s">true</span>
<span class="na">a1.sinks.k1.hdfs.roundValue</span> <span class="o">=</span> <span class="s">10</span>
<span class="na">a1.sinks.k1.hdfs.roundUnit</span> <span class="o">=</span> <span class="s">minute</span>
</pre>
</div>
</div>
<p>The above configuration will round down the timestamp to the last 10th minute. For example, an event with timestamp 11:54:34 AM, June 12, 2012 will cause the hdfs path to become
<tt class="docutils literal">/flume/events/2012-06-12/1150/00</tt>.</p>
</div>
<div id="logger-sink" class="section">
<h4>Logger Sink<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#logger-sink" rel="nofollow">¶</a></h4>
<p>Logs event at INFO level. Typically useful for testing/debugging purpose. Required properties are in
<strong>bold</strong>.</p>
<table class="docutils" border="1">
<colgroup><col width="21%"><col width="10%"><col width="69%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>channel</strong></td>
<td>–</td>
<td> </td>
</tr>
<tr class="row-odd">
<td><strong>type</strong></td>
<td>–</td>
<td>The component type name, needs to be <tt class="docutils literal">logger</tt></td>
</tr>
</tbody>
</table>
<p>Example for agent named a1:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">a1.channels</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.sinks</span> <span class="o">=</span> <span class="s">k1</span>
<span class="na">a1.sinks.k1.type</span> <span class="o">=</span> <span class="s">logger</span>
<span class="na">a1.sinks.k1.channel</span> <span class="o">=</span> <span class="s">c1</span>
</pre>
</div>
</div>
</div>
<div id="avro-sink" class="section">
<h4>Avro Sink<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#avro-sink" rel="nofollow">¶</a></h4>
<p>This sink forms one half of Flume’s tiered collection support. Flume events sent to this sink are turned into Avro events and sent to the configured hostname / port pair. The events are taken from the configured Channel in batches of the configured batch
 size. Required properties are in <strong>bold</strong>.</p>
<table class="docutils" border="1">
<colgroup><col width="6%"><col width="13%"><col width="81%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default Description</th>
<th class="head"> </th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>channel</strong></td>
<td>–</td>
<td> </td>
</tr>
<tr class="row-odd">
<td><strong>type</strong></td>
<td>–</td>
<td>The component type name, needs to be <tt class="docutils literal">avro</tt>.</td>
</tr>
<tr class="row-even">
<td><strong>hostname</strong></td>
<td>–</td>
<td>The hostname or IP address to bind to.</td>
</tr>
<tr class="row-odd">
<td><strong>port</strong></td>
<td>–</td>
<td>The port # to listen on.</td>
</tr>
<tr class="row-even">
<td>batch-size</td>
<td>100</td>
<td>number of event to batch together for send.</td>
</tr>
<tr class="row-odd">
<td>connect-timeout</td>
<td>20000</td>
<td>Amount of time (ms) to allow for the first (handshake) request.</td>
</tr>
<tr class="row-even">
<td>request-timeout</td>
<td>20000</td>
<td>Amount of time (ms) to allow for requests after the first.</td>
</tr>
<tr class="row-odd">
<td>reset-connection-interval</td>
<td>none</td>
<td>Amount of time (s) before the connection to the next hop is reset. This will force the Avro Sink to reconnect to the next hop. This will allow the sink to connect to hosts behind a hardware load-balancer when news hosts are added without having to restart
 the agent.</td>
</tr>
<tr class="row-even">
<td>compression-type</td>
<td>none</td>
<td>This can be “none” or “deflate”. The compression-type must match the compression-type of matching AvroSource</td>
</tr>
<tr class="row-odd">
<td>compression-level</td>
<td>6</td>
<td>The level of compression to compress event. 0 = no compression and 1-9 is compression. The higher the number the more compression</td>
</tr>
<tr class="row-even">
<td>ssl</td>
<td>false</td>
<td>Set to true to enable SSL for this AvroSink. When configuring SSL, you can optionally set a “truststore”, “truststore-password”, “truststore-type”, and specify whether to “trust-all-certs”.</td>
</tr>
<tr class="row-odd">
<td>trust-all-certs</td>
<td>false</td>
<td>If this is set to true, SSL server certificates for remote servers (Avro Sources) will not be checked. This should NOT be used in production because it makes it easier for an attacker to execute a man-in-the-middle attack and “listen in” on the encrypted
 connection.</td>
</tr>
<tr class="row-even">
<td>truststore</td>
<td>–</td>
<td>The path to a custom Java truststore file. Flume uses the certificate authority information in this file to determine whether the remote Avro Source’s SSL authentication credentials should be trusted. If not specified, the default Java JSSE certificate
 authority files (typically “jssecacerts” or “cacerts” in the Oracle JRE) will be used.</td>
</tr>
<tr class="row-odd">
<td>truststore-password</td>
<td>–</td>
<td>The password for the specified truststore.</td>
</tr>
<tr class="row-even">
<td>truststore-type</td>
<td>JKS</td>
<td>The type of the Java truststore. This can be “JKS” or other supported Java truststore type.</td>
</tr>
<tr class="row-odd">
<td>maxIoWorkers</td>
<td>2 * the number of available processors in the machine</td>
<td>The maximum number of I/O worker threads. This is configured on the NettyAvroRpcClient NioClientSocketChannelFactory.</td>
</tr>
</tbody>
</table>
<p>Example for agent named a1:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">a1.channels</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.sinks</span> <span class="o">=</span> <span class="s">k1</span>
<span class="na">a1.sinks.k1.type</span> <span class="o">=</span> <span class="s">avro</span>
<span class="na">a1.sinks.k1.channel</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.sinks.k1.hostname</span> <span class="o">=</span> <span class="s">10.10.10.10</span>
<span class="na">a1.sinks.k1.port</span> <span class="o">=</span> <span class="s">4545</span>
</pre>
</div>
</div>
</div>
<div id="thrift-sink" class="section">
<h4>Thrift Sink<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#thrift-sink" rel="nofollow">¶</a></h4>
<p>This sink forms one half of Flume’s tiered collection support. Flume events sent to this sink are turned into Thrift events and sent to the configured hostname / port pair. The events are taken from the configured Channel in batches of the configured batch
 size. Required properties are in <strong>bold</strong>.</p>
<table class="docutils" border="1">
<colgroup><col width="9%"><col width="2%"><col width="89%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>channel</strong></td>
<td>–</td>
<td> </td>
</tr>
<tr class="row-odd">
<td><strong>type</strong></td>
<td>–</td>
<td>The component type name, needs to be <tt class="docutils literal">thrift</tt>.</td>
</tr>
<tr class="row-even">
<td><strong>hostname</strong></td>
<td>–</td>
<td>The hostname or IP address to bind to.</td>
</tr>
<tr class="row-odd">
<td><strong>port</strong></td>
<td>–</td>
<td>The port # to listen on.</td>
</tr>
<tr class="row-even">
<td>batch-size</td>
<td>100</td>
<td>number of event to batch together for send.</td>
</tr>
<tr class="row-odd">
<td>connect-timeout</td>
<td>20000</td>
<td>Amount of time (ms) to allow for the first (handshake) request.</td>
</tr>
<tr class="row-even">
<td>request-timeout</td>
<td>20000</td>
<td>Amount of time (ms) to allow for requests after the first.</td>
</tr>
<tr class="row-odd">
<td>connection-reset-interval</td>
<td>none</td>
<td>Amount of time (s) before the connection to the next hop is reset. This will force the Thrift Sink to reconnect to the next hop. This will allow the sink to connect to hosts behind a hardware load-balancer when news hosts are added without having to restart
 the agent.</td>
</tr>
</tbody>
</table>
<p>Example for agent named a1:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">a1.channels</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.sinks</span> <span class="o">=</span> <span class="s">k1</span>
<span class="na">a1.sinks.k1.type</span> <span class="o">=</span> <span class="s">thrift</span>
<span class="na">a1.sinks.k1.channel</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.sinks.k1.hostname</span> <span class="o">=</span> <span class="s">10.10.10.10</span>
<span class="na">a1.sinks.k1.port</span> <span class="o">=</span> <span class="s">4545</span>
</pre>
</div>
</div>
</div>
<div id="irc-sink" class="section">
<h4>IRC Sink<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#irc-sink" rel="nofollow">¶</a></h4>
<p>The IRC sink takes messages from attached channel and relays those to configured IRC destinations. Required properties are in
<strong>bold</strong>.</p>
<table class="docutils" border="1">
<colgroup><col width="19%"><col width="9%"><col width="72%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>channel</strong></td>
<td>–</td>
<td> </td>
</tr>
<tr class="row-odd">
<td><strong>type</strong></td>
<td>–</td>
<td>The component type name, needs to be <tt class="docutils literal">irc</tt></td>
</tr>
<tr class="row-even">
<td><strong>hostname</strong></td>
<td>–</td>
<td>The hostname or IP address to connect to</td>
</tr>
<tr class="row-odd">
<td>port</td>
<td>6667</td>
<td>The port number of remote host to connect</td>
</tr>
<tr class="row-even">
<td><strong>nick</strong></td>
<td>–</td>
<td>Nick name</td>
</tr>
<tr class="row-odd">
<td>user</td>
<td>–</td>
<td>User name</td>
</tr>
<tr class="row-even">
<td>password</td>
<td>–</td>
<td>User password</td>
</tr>
<tr class="row-odd">
<td><strong>chan</strong></td>
<td>–</td>
<td>channel</td>
</tr>
<tr class="row-even">
<td>name</td>
<td> </td>
<td> </td>
</tr>
<tr class="row-odd">
<td>splitlines</td>
<td>–</td>
<td>(boolean)</td>
</tr>
<tr class="row-even">
<td>splitchars</td>
<td>n</td>
<td>line separator (if you were to enter the default value into the config file, then you would need to escape the backslash, like this: “\n”)</td>
</tr>
</tbody>
</table>
<p>Example for agent named a1:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">a1.channels</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.sinks</span> <span class="o">=</span> <span class="s">k1</span>
<span class="na">a1.sinks.k1.type</span> <span class="o">=</span> <span class="s">irc</span>
<span class="na">a1.sinks.k1.channel</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.sinks.k1.hostname</span> <span class="o">=</span> <span class="s">irc.yourdomain.com</span>
<span class="na">a1.sinks.k1.nick</span> <span class="o">=</span> <span class="s">flume</span>
<span class="na">a1.sinks.k1.chan</span> <span class="o">=</span> <span class="s">#flume</span>
</pre>
</div>
</div>
</div>
<div id="file-roll-sink" class="section">
<h4>File Roll Sink<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#file-roll-sink" rel="nofollow">¶</a></h4>
<p>Stores events on the local filesystem. Required properties are in <strong>bold</strong>.</p>
<table class="docutils" border="1">
<colgroup><col width="13%"><col width="5%"><col width="82%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>channel</strong></td>
<td>–</td>
<td> </td>
</tr>
<tr class="row-odd">
<td><strong>type</strong></td>
<td>–</td>
<td>The component type name, needs to be <tt class="docutils literal">file_roll</tt>.</td>
</tr>
<tr class="row-even">
<td><strong>sink.directory</strong></td>
<td>–</td>
<td>The directory where files will be stored</td>
</tr>
<tr class="row-odd">
<td>sink.rollInterval</td>
<td>30</td>
<td>Roll the file every 30 seconds. Specifying 0 will disable rolling and cause all events to be written to a single file.</td>
</tr>
<tr class="row-even">
<td>sink.serializer</td>
<td>TEXT</td>
<td>Other possible options include <tt class="docutils literal">avro_event</tt> or the FQCN of an implementation of EventSerializer.Builder interface.</td>
</tr>
<tr class="row-odd">
<td>batchSize</td>
<td>100</td>
<td> </td>
</tr>
</tbody>
</table>
<p>Example for agent named a1:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">a1.channels</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.sinks</span> <span class="o">=</span> <span class="s">k1</span>
<span class="na">a1.sinks.k1.type</span> <span class="o">=</span> <span class="s">file_roll</span>
<span class="na">a1.sinks.k1.channel</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.sinks.k1.sink.directory</span> <span class="o">=</span> <span class="s">/var/log/flume</span>
</pre>
</div>
</div>
</div>
<div id="null-sink" class="section">
<h4>Null Sink<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#null-sink" rel="nofollow">¶</a></h4>
<p>Discards all events it receives from the channel. Required properties are in <strong>
bold</strong>.</p>
<table class="docutils" border="1">
<colgroup><col width="20%"><col width="11%"><col width="70%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>channel</strong></td>
<td>–</td>
<td> </td>
</tr>
<tr class="row-odd">
<td><strong>type</strong></td>
<td>–</td>
<td>The component type name, needs to be <tt class="docutils literal">null</tt>.</td>
</tr>
<tr class="row-even">
<td>batchSize</td>
<td>100</td>
<td> </td>
</tr>
</tbody>
</table>
<p>Example for agent named a1:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">a1.channels</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.sinks</span> <span class="o">=</span> <span class="s">k1</span>
<span class="na">a1.sinks.k1.type</span> <span class="o">=</span> <span class="s">null</span>
<span class="na">a1.sinks.k1.channel</span> <span class="o">=</span> <span class="s">c1</span>
</pre>
</div>
</div>
</div>
<div id="hbasesinks" class="section">
<h4>HBaseSinks<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#hbasesinks" rel="nofollow">¶</a></h4>
<div id="hbasesink" class="section">
<h5>HBaseSink<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#hbasesink" rel="nofollow">¶</a></h5>
<p>This sink writes data to HBase. The Hbase configuration is picked up from the first hbase-site.xml encountered in the classpath. A class implementing HbaseEventSerializer which is specified by the configuration is used to convert the events into HBase puts
 and/or increments. These puts and increments are then written to HBase. This sink provides the same consistency guarantees as HBase, which is currently row-wise atomicity. In the event of Hbase failing to write certain events, the sink will replay all events
 in that transaction.</p>
<p>The HBaseSink supports writing data to secure HBase. To write to secure HBase, the user the agent is running as must have write permissions to the table the sink is configured to write to. The principal and keytab to use to authenticate against the KDC can
 be specified in the configuration. The hbase-site.xml in the Flume agent’s classpath must have authentication set to
<tt class="docutils literal">kerberos</tt> (For details on how to do this, please refer to HBase documentation).</p>
<p>For convenience, two serializers are provided with Flume. The SimpleHbaseEventSerializer (org.apache.flume.sink.hbase.SimpleHbaseEventSerializer) writes the event body as-is to HBase, and optionally increments a column in Hbase. This is primarily an example
 implementation. The RegexHbaseEventSerializer (org.apache.flume.sink.hbase.RegexHbaseEventSerializer) breaks the event body based on the given regex and writes each part into different columns.</p>
<p>The type is the FQCN: org.apache.flume.sink.hbase.HBaseSink.</p>
<p>Required properties are in <strong>bold</strong>.</p>
<table class="docutils" border="1">
<colgroup><col width="10%"><col width="31%"><col width="59%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>channel</strong></td>
<td>–</td>
<td> </td>
</tr>
<tr class="row-odd">
<td><strong>type</strong></td>
<td>–</td>
<td>The component type name, needs to be <tt class="docutils literal">hbase</tt></td>
</tr>
<tr class="row-even">
<td><strong>table</strong></td>
<td>–</td>
<td>The name of the table in Hbase to write to.</td>
</tr>
<tr class="row-odd">
<td><strong>columnFamily</strong></td>
<td>–</td>
<td>The column family in Hbase to write to.</td>
</tr>
<tr class="row-even">
<td>zookeeperQuorum</td>
<td>–</td>
<td>The quorum spec. This is the value for the property <tt class="docutils literal">
hbase.zookeeper.quorum</tt> in hbase-site.xml</td>
</tr>
<tr class="row-odd">
<td>znodeParent</td>
<td>/hbase</td>
<td>The base path for the znode for the -ROOT- region. Value of <tt class="docutils literal">
zookeeper.znode.parent</tt> in hbase-site.xml</td>
</tr>
<tr class="row-even">
<td>batchSize</td>
<td>100</td>
<td>Number of events to be written per txn.</td>
</tr>
<tr class="row-odd">
<td>coalesceIncrements</td>
<td>false</td>
<td>Should the sink coalesce multiple increments to a cell per batch. This might give better performance if there are multiple increments to a limited number of cells.</td>
</tr>
<tr class="row-even">
<td>serializer</td>
<td>org.apache.flume.sink.hbase.SimpleHbaseEventSerializer</td>
<td>Default increment column = “iCol”, payload column = “pCol”.</td>
</tr>
<tr class="row-odd">
<td>serializer.*</td>
<td>–</td>
<td>Properties to be passed to the serializer.</td>
</tr>
<tr class="row-even">
<td>kerberosPrincipal</td>
<td>–</td>
<td>Kerberos user principal for accessing secure HBase</td>
</tr>
<tr class="row-odd">
<td>kerberosKeytab</td>
<td>–</td>
<td>Kerberos keytab for accessing secure HBase</td>
</tr>
</tbody>
</table>
<p>Example for agent named a1:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">a1.channels</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.sinks</span> <span class="o">=</span> <span class="s">k1</span>
<span class="na">a1.sinks.k1.type</span> <span class="o">=</span> <span class="s">hbase</span>
<span class="na">a1.sinks.k1.table</span> <span class="o">=</span> <span class="s">foo_table</span>
<span class="na">a1.sinks.k1.columnFamily</span> <span class="o">=</span> <span class="s">bar_cf</span>
<span class="na">a1.sinks.k1.serializer</span> <span class="o">=</span> <span class="s">org.apache.flume.sink.hbase.RegexHbaseEventSerializer</span>
<span class="na">a1.sinks.k1.channel</span> <span class="o">=</span> <span class="s">c1</span>
</pre>
</div>
</div>
</div>
<div id="asynchbasesink" class="section">
<h5>AsyncHBaseSink<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#asynchbasesink" rel="nofollow">¶</a></h5>
<p>This sink writes data to HBase using an asynchronous model. A class implementing AsyncHbaseEventSerializer which is specified by the configuration is used to convert the events into HBase puts and/or increments. These puts and increments are then written
 to HBase. This sink uses the <a target="_blank" class="reference external" href="https://github.com/OpenTSDB/asynchbase" rel="nofollow">
Asynchbase API</a> to write to HBase. This sink provides the same consistency guarantees as HBase, which is currently row-wise atomicity. In the event of Hbase failing to write certain events, the sink will replay all events in that transaction. The type is
 the FQCN: org.apache.flume.sink.hbase.AsyncHBaseSink. Required properties are in
<strong>bold</strong>.</p>
<table class="docutils" border="1">
<colgroup><col width="10%"><col width="33%"><col width="57%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>channel</strong></td>
<td>–</td>
<td> </td>
</tr>
<tr class="row-odd">
<td><strong>type</strong></td>
<td>–</td>
<td>The component type name, needs to be <tt class="docutils literal">asynchbase</tt></td>
</tr>
<tr class="row-even">
<td><strong>table</strong></td>
<td>–</td>
<td>The name of the table in Hbase to write to.</td>
</tr>
<tr class="row-odd">
<td>zookeeperQuorum</td>
<td>–</td>
<td>The quorum spec. This is the value for the property <tt class="docutils literal">
hbase.zookeeper.quorum</tt> in hbase-site.xml</td>
</tr>
<tr class="row-even">
<td>znodeParent</td>
<td>/hbase</td>
<td>The base path for the znode for the -ROOT- region. Value of <tt class="docutils literal">
zookeeper.znode.parent</tt> in hbase-site.xml</td>
</tr>
<tr class="row-odd">
<td><strong>columnFamily</strong></td>
<td>–</td>
<td>The column family in Hbase to write to.</td>
</tr>
<tr class="row-even">
<td>batchSize</td>
<td>100</td>
<td>Number of events to be written per txn.</td>
</tr>
<tr class="row-odd">
<td>coalesceIncrements</td>
<td>false</td>
<td>Should the sink coalesce multiple increments to a cell per batch. This might give better performance if there are multiple increments to a limited number of cells.</td>
</tr>
<tr class="row-even">
<td>timeout</td>
<td>60000</td>
<td>The length of time (in milliseconds) the sink waits for acks from hbase for all events in a transaction.</td>
</tr>
<tr class="row-odd">
<td>serializer</td>
<td>org.apache.flume.sink.hbase.SimpleAsyncHbaseEventSerializer</td>
<td> </td>
</tr>
<tr class="row-even">
<td>serializer.*</td>
<td>–</td>
<td>Properties to be passed to the serializer.</td>
</tr>
</tbody>
</table>
<p>Note that this sink takes the Zookeeper Quorum and parent znode information in the configuration. Zookeeper Quorum and parent node configuration may be specified in the flume configuration file. Alternatively, these configuration values are taken from the
 first hbase-site.xml file in the classpath.</p>
<p>If these are not provided in the configuration, then the sink will read this information from the first hbase-site.xml file in the classpath.</p>
<p>Example for agent named a1:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">a1.channels</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.sinks</span> <span class="o">=</span> <span class="s">k1</span>
<span class="na">a1.sinks.k1.type</span> <span class="o">=</span> <span class="s">asynchbase</span>
<span class="na">a1.sinks.k1.table</span> <span class="o">=</span> <span class="s">foo_table</span>
<span class="na">a1.sinks.k1.columnFamily</span> <span class="o">=</span> <span class="s">bar_cf</span>
<span class="na">a1.sinks.k1.serializer</span> <span class="o">=</span> <span class="s">org.apache.flume.sink.hbase.SimpleAsyncHbaseEventSerializer</span>
<span class="na">a1.sinks.k1.channel</span> <span class="o">=</span> <span class="s">c1</span>
</pre>
</div>
</div>
</div>
</div>
<div id="morphlinesolrsink" class="section">
<h4>MorphlineSolrSink<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#morphlinesolrsink" rel="nofollow">¶</a></h4>
<p>This sink extracts data from Flume events, transforms it, and loads it in near-real-time into Apache Solr servers, which in turn serve queries to end users or search applications.</p>
<p>This sink is well suited for use cases that stream raw data into HDFS (via the HdfsSink) and simultaneously extract, transform and load the same data into Solr (via MorphlineSolrSink). In particular, this sink can process arbitrary heterogeneous raw data
 from disparate data sources and turn it into a data model that is useful to Search applications.</p>
<p>The ETL functionality is customizable using a <a target="_blank" class="reference external" href="http://cloudera.github.io/cdk/docs/current/cdk-morphlines/index.html" rel="nofollow">
morphline configuration file</a> that defines a chain of transformation commands that pipe event records from one command to another.</p>
<p>Morphlines can be seen as an evolution of Unix pipelines where the data model is generalized to work with streams of generic records, including arbitrary binary payloads. A morphline command is a bit like a Flume Interceptor. Morphlines can be embedded into
 Hadoop components such as Flume.</p>
<p>Commands to parse and transform a set of standard data formats such as log files, Avro, CSV, Text, HTML, XML, PDF, Word, Excel, etc. are provided out of the box, and additional custom commands and parsers for additional data formats can be added as morphline
 plugins. Any kind of data format can be indexed and any Solr documents for any kind of Solr schema can be generated, and any custom ETL logic can be registered and executed.</p>
<p>Morphlines manipulate continuous streams of records. The data model can be described as follows: A record is a set of named fields where each field has an ordered list of one or more values. A value can be any Java Object. That is, a record is essentially
 a hash table where each hash table entry contains a String key and a list of Java Objects as values. (The implementation uses Guava’s
<tt class="docutils literal">ArrayListMultimap</tt>, which is a <tt class="docutils literal">
ListMultimap</tt>). Note that a field can have multiple values and any two records need not use common field names.</p>
<p>This sink fills the body of the Flume event into the <tt class="docutils literal">
_attachment_body</tt> field of the morphline record, as well as copies the headers of the Flume event into record fields of the same name. The commands can then act on this data.</p>
<p>Routing to a SolrCloud cluster is supported to improve scalability. Indexing load can be spread across a large number of MorphlineSolrSinks for improved scalability. Indexing load can be replicated across multiple MorphlineSolrSinks for high availability,
 for example using Flume features such as Load balancing Sink Processor. MorphlineInterceptor can also help to implement dynamic routing to multiple Solr collections (e.g. for multi-tenancy).</p>
<p>The morphline and solr jars required for your environment must be placed in the lib directory of the Apache Flume installation.</p>
<p>The type is the FQCN: org.apache.flume.sink.solr.morphline.MorphlineSolrSink</p>
<p>Required properties are in <strong>bold</strong>.</p>
<table class="docutils" border="1">
<colgroup><col width="8%"><col width="30%"><col width="62%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>channel</strong></td>
<td>–</td>
<td> </td>
</tr>
<tr class="row-odd">
<td><strong>type</strong></td>
<td>–</td>
<td>The component type name, needs to be <tt class="docutils literal">org.apache.flume.sink.solr.morphline.MorphlineSolrSink</tt></td>
</tr>
<tr class="row-even">
<td><strong>morphlineFile</strong></td>
<td>–</td>
<td>The relative or absolute path on the local file system to the morphline configuration file. Example:
<tt class="docutils literal">/etc/flume-ng/conf/morphline.conf</tt></td>
</tr>
<tr class="row-odd">
<td>morphlineId</td>
<td>null</td>
<td>Optional name used to identify a morphline if there are multiple morphlines in a morphline config file</td>
</tr>
<tr class="row-even">
<td>batchSize</td>
<td>1000</td>
<td>The maximum number of events to take per flume transaction.</td>
</tr>
<tr class="row-odd">
<td>batchDurationMillis</td>
<td>1000</td>
<td>The maximum duration per flume transaction (ms). The transaction commits after this duration or when batchSize is exceeded, whichever comes first.</td>
</tr>
<tr class="row-even">
<td>handlerClass</td>
<td>org.apache.flume.sink.solr.morphline.MorphlineHandlerImpl</td>
<td>The FQCN of a class implementing org.apache.flume.sink.solr.morphline.MorphlineHandler</td>
</tr>
</tbody>
</table>
<p>Example for agent named a1:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">a1.channels</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.sinks</span> <span class="o">=</span> <span class="s">k1</span>
<span class="na">a1.sinks.k1.type</span> <span class="o">=</span> <span class="s">org.apache.flume.sink.solr.morphline.MorphlineSolrSink</span>
<span class="na">a1.sinks.k1.channel</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.sinks.k1.morphlineFile</span> <span class="o">=</span> <span class="s">/etc/flume-ng/conf/morphline.conf</span>
<span class="c"># a1.sinks.k1.morphlineId = morphline1</span>
<span class="c"># a1.sinks.k1.batchSize = 1000</span>
<span class="c"># a1.sinks.k1.batchDurationMillis = 1000</span>
</pre>
</div>
</div>
</div>
<div id="elasticsearchsink" class="section">
<h4>ElasticSearchSink<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#elasticsearchsink" rel="nofollow">¶</a></h4>
<p>This sink writes data to an elasticsearch cluster. By default, events will be written so that the
<a target="_blank" class="reference external" href="http://kibana.org/" rel="nofollow">Kibana</a> graphical interface can display them - just as if
<a target="_blank" class="reference external" href="https://logstash.net/" rel="nofollow">logstash</a> wrote them.</p>
<p>The elasticsearch and lucene-core jars required for your environment must be placed in the lib directory of the Apache Flume installation. Elasticsearch requires that the major version of the client JAR match that of the server and that both are running
 the same minor version of the JVM. SerializationExceptions will appear if this is incorrect. To select the required version first determine the version of elasticsearch and the JVM version the target cluster is running. Then select an elasticsearch client
 library which matches the major version. A 0.19.x client can talk to a 0.19.x cluster; 0.20.x can talk to 0.20.x and 0.90.x can talk to 0.90.x. Once the elasticsearch version has been determined then read the pom.xml file to determine the correct lucene-core
 JAR version to use. The Flume agent which is running the ElasticSearchSink should also match the JVM the target cluster is running down to the minor version.</p>
<p>Events will be written to a new index every day. The name will be &lt;indexName&gt;-yyyy-MM-dd where &lt;indexName&gt; is the indexName parameter. The sink will start writing to a new index at midnight UTC.</p>
<p>Events are serialized for elasticsearch by the ElasticSearchLogStashEventSerializer by default. This behaviour can be overridden with the serializer parameter. This parameter accepts implementations of org.apache.flume.sink.elasticsearch.ElasticSearchEventSerializer
 or org.apache.flume.sink.elasticsearch.ElasticSearchIndexRequestBuilderFactory. Implementing ElasticSearchEventSerializer is deprecated in favour of the more powerful ElasticSearchIndexRequestBuilderFactory.</p>
<p>The type is the FQCN: org.apache.flume.sink.elasticsearch.ElasticSearchSink</p>
<p>Required properties are in <strong>bold</strong>.</p>
<table class="docutils" border="1">
<colgroup><col width="8%"><col width="37%"><col width="54%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>channel</strong></td>
<td>–</td>
<td> </td>
</tr>
<tr class="row-odd">
<td><strong>type</strong></td>
<td>–</td>
<td>The component type name, needs to be <tt class="docutils literal">org.apache.flume.sink.elasticsearch.ElasticSearchSink</tt></td>
</tr>
<tr class="row-even">
<td><strong>hostNames</strong></td>
<td>–</td>
<td>Comma separated list of hostname:port, if the port is not present the default port ‘9300’ will be used</td>
</tr>
<tr class="row-odd">
<td>indexName</td>
<td>flume</td>
<td>The name of the index which the date will be appended to. Example ‘flume’ -&gt; ‘flume-yyyy-MM-dd’</td>
</tr>
<tr class="row-even">
<td>indexType</td>
<td>logs</td>
<td>The type to index the document to, defaults to ‘log’</td>
</tr>
<tr class="row-odd">
<td>clusterName</td>
<td>elasticsearch</td>
<td>Name of the ElasticSearch cluster to connect to</td>
</tr>
<tr class="row-even">
<td>batchSize</td>
<td>100</td>
<td>Number of events to be written per txn.</td>
</tr>
<tr class="row-odd">
<td>ttl</td>
<td>–</td>
<td>TTL in days, when set will cause the expired documents to be deleted automatically, if not set documents will never be automatically deleted. TTL is accepted both in the earlier form of integer only e.g. a1.sinks.k1.ttl = 5 and also with a qualifier ms
 (millisecond), s (second), m (minute), h (hour), d (day) and w (week). Example a1.sinks.k1.ttl = 5d will set TTL to 5 days. Follow
<a target="_blank" class="reference external" href="http://www.elasticsearch.org/guide/reference/mapping/ttl-field/" rel="nofollow">
http://www.elasticsearch.org/guide/reference/mapping/ttl-field/</a> for more information.</td>
</tr>
<tr class="row-even">
<td>serializer</td>
<td>org.apache.flume.sink.elasticsearch.ElasticSearchLogStashEventSerializer</td>
<td>The ElasticSearchIndexRequestBuilderFactory or ElasticSearchEventSerializer to use. Implementations of either class are accepted but ElasticSearchIndexRequestBuilderFactory is preferred.</td>
</tr>
<tr class="row-odd">
<td>serializer.*</td>
<td>–</td>
<td>Properties to be passed to the serializer.</td>
</tr>
</tbody>
</table>
<p>Example for agent named a1:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">a1.channels</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.sinks</span> <span class="o">=</span> <span class="s">k1</span>
<span class="na">a1.sinks.k1.type</span> <span class="o">=</span> <span class="s">elasticsearch</span>
<span class="na">a1.sinks.k1.hostNames</span> <span class="o">=</span> <span class="s">127.0.0.1:9200,127.0.0.2:9300</span>
<span class="na">a1.sinks.k1.indexName</span> <span class="o">=</span> <span class="s">foo_index</span>
<span class="na">a1.sinks.k1.indexType</span> <span class="o">=</span> <span class="s">bar_type</span>
<span class="na">a1.sinks.k1.clusterName</span> <span class="o">=</span> <span class="s">foobar_cluster</span>
<span class="na">a1.sinks.k1.batchSize</span> <span class="o">=</span> <span class="s">500</span>
<span class="na">a1.sinks.k1.ttl</span> <span class="o">=</span> <span class="s">5d</span>
<span class="na">a1.sinks.k1.serializer</span> <span class="o">=</span> <span class="s">org.apache.flume.sink.elasticsearch.ElasticSearchDynamicSerializer</span>
<span class="na">a1.sinks.k1.channel</span> <span class="o">=</span> <span class="s">c1</span>
</pre>
</div>
</div>
</div>
<div id="kite-dataset-sink-experimental" class="section">
<h4>Kite Dataset Sink (experimental)<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#kite-dataset-sink-experimental" rel="nofollow">¶</a></h4>
<div class="admonition warning">
<p class="first admonition-title">Warning</p>
<p class="last">This source is experimental and may change between minor versions of Flume. Use at your own risk.</p>
</div>
<p>Experimental sink that writes events to a <a target="_blank" class="reference external" href="http://kitesdk.org/docs/current/kite-data/guide.html" rel="nofollow">
Kite Dataset</a>. This sink will deserialize the body of each incoming event and store the resulting record in a Kite Dataset. It determines target Dataset by opening a repository URI,
<tt class="docutils literal">kite.repo.uri</tt>, and loading a Dataset by name, <tt class="docutils literal">
kite.dataset.name</tt>.</p>
<p>The only supported serialization is avro, and the record schema must be passed in the event headers, using either
<tt class="docutils literal">flume.avro.schema.literal</tt> with the JSON schema representation or
<tt class="docutils literal">flume.avro.schema.url</tt> with a URL where the schema may be found (<tt class="docutils literal">hdfs:/...</tt> URIs are supported). This is compatible with the Log4jAppender flume client and the spooling directory source’s Avro
 deserializer using <tt class="docutils literal"><span class="pre">deserializer.schemaType</span>
<span class="pre">=</span> <span class="pre">LITERAL</span></tt>.</p>
<p>Note 1: The <tt class="docutils literal">flume.avro.schema.hash</tt> header is
<strong>not supported</strong>. Note 2: In some cases, file rolling may occur slightly after the roll interval has been exceeded. However, this delay will not exceed 5 seconds. In most cases, the delay is neglegible.</p>
<table class="docutils" border="1">
<colgroup><col width="24%"><col width="8%"><col width="68%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>channel</strong></td>
<td>–</td>
<td> </td>
</tr>
<tr class="row-odd">
<td><strong>type</strong></td>
<td>–</td>
<td>Must be org.apache.flume.sink.kite.DatasetSink</td>
</tr>
<tr class="row-even">
<td><strong>kite.repo.uri</strong></td>
<td>–</td>
<td>URI of the repository to open</td>
</tr>
<tr class="row-odd">
<td><strong>kite.dataset.name</strong></td>
<td>–</td>
<td>Name of the Dataset where records will be written</td>
</tr>
<tr class="row-even">
<td>kite.batchSize</td>
<td>100</td>
<td>Number of records to process in each batch</td>
</tr>
<tr class="row-odd">
<td>kite.rollInterval</td>
<td>30</td>
<td>Maximum wait time (seconds) before data files are released</td>
</tr>
</tbody>
</table>
</div>
<div id="custom-sink" class="section">
<h4>Custom Sink<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#custom-sink" rel="nofollow">¶</a></h4>
<p>A custom sink is your own implementation of the Sink interface. A custom sink’s class and its dependencies must be included in the agent’s classpath when starting the Flume agent. The type of the custom sink is its FQCN. Required properties are in
<strong>bold</strong>.</p>
<table class="docutils" border="1">
<colgroup><col width="20%"><col width="11%"><col width="70%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>channel</strong></td>
<td>–</td>
<td> </td>
</tr>
<tr class="row-odd">
<td><strong>type</strong></td>
<td>–</td>
<td>The component type name, needs to be your FQCN</td>
</tr>
</tbody>
</table>
<p>Example for agent named a1:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">a1.channels</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.sinks</span> <span class="o">=</span> <span class="s">k1</span>
<span class="na">a1.sinks.k1.type</span> <span class="o">=</span> <span class="s">org.example.MySink</span>
<span class="na">a1.sinks.k1.channel</span> <span class="o">=</span> <span class="s">c1</span>
</pre>
</div>
</div>
</div>
</div>
<div id="flume-channels" class="section">
<h3>Flume Channels<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#flume-channels" rel="nofollow">¶</a></h3>
<p>Channels are the repositories where the events are staged on a agent. Source adds the events and Sink removes it.</p>
<div id="memory-channel" class="section">
<h4>Memory Channel<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#memory-channel" rel="nofollow">¶</a></h4>
<p>The events are stored in an in-memory queue with configurable max size. It’s ideal for flows that need higher throughput and are prepared to lose the staged data in the event of a agent failures. Required properties are in
<strong>bold</strong>.</p>
<table class="docutils" border="1">
<colgroup><col width="22%"><col width="13%"><col width="65%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>type</strong></td>
<td>–</td>
<td>The component type name, needs to be <tt class="docutils literal">memory</tt></td>
</tr>
<tr class="row-odd">
<td>capacity</td>
<td>100</td>
<td>The maximum number of events stored in the channel</td>
</tr>
<tr class="row-even">
<td>transactionCapacity</td>
<td>100</td>
<td>The maximum number of events the channel will take from a source or give to a sink per transaction</td>
</tr>
<tr class="row-odd">
<td>keep-alive</td>
<td>3</td>
<td>Timeout in seconds for adding or removing an event</td>
</tr>
<tr class="row-even">
<td>byteCapacityBufferPercentage</td>
<td>20</td>
<td>Defines the percent of buffer between byteCapacity and the estimated total size of all events in the channel, to account for data in headers. See below.</td>
</tr>
<tr class="row-odd">
<td>byteCapacity</td>
<td>see description</td>
<td>Maximum total <strong>bytes</strong> of memory allowed as a sum of all events in this channel. The implementation only counts the Event
<tt class="docutils literal">body</tt>, which is the reason for providing the <tt class="docutils literal">
byteCapacityBufferPercentage</tt> configuration parameter as well. Defaults to a computed value equal to 80% of the maximum memory available to the JVM (i.e. 80% of the -Xmx value passed on the command line). Note that if you have multiple memory channels on
 a single JVM, and they happen to hold the same physical events (i.e. if you are using a replicating channel selector from a single source) then those event sizes may be double-counted for channel byteCapacity purposes. Setting this value to
<tt class="docutils literal">0</tt> will cause this value to fall back to a hard internal limit of about 200 GB.</td>
</tr>
</tbody>
</table>
<p>Example for agent named a1:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">a1.channels</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.channels.c1.type</span> <span class="o">=</span> <span class="s">memory</span>
<span class="na">a1.channels.c1.capacity</span> <span class="o">=</span> <span class="s">10000</span>
<span class="na">a1.channels.c1.transactionCapacity</span> <span class="o">=</span> <span class="s">10000</span>
<span class="na">a1.channels.c1.byteCapacityBufferPercentage</span> <span class="o">=</span> <span class="s">20</span>
<span class="na">a1.channels.c1.byteCapacity</span> <span class="o">=</span> <span class="s">800000</span>
</pre>
</div>
</div>
</div>
<div id="jdbc-channel" class="section">
<h4>JDBC Channel<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#jdbc-channel" rel="nofollow">¶</a></h4>
<p>The events are stored in a persistent storage that’s backed by a database. The JDBC channel currently supports embedded Derby. This is a durable channel that’s ideal for flows where recoverability is important. Required properties are in
<strong>bold</strong>.</p>
<table class="docutils" border="1">
<colgroup><col width="23%"><col width="32%"><col width="44%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>type</strong></td>
<td>–</td>
<td>The component type name, needs to be <tt class="docutils literal">jdbc</tt></td>
</tr>
<tr class="row-odd">
<td>db.type</td>
<td>DERBY</td>
<td>Database vendor, needs to be DERBY.</td>
</tr>
<tr class="row-even">
<td>driver.class</td>
<td>org.apache.derby.jdbc.EmbeddedDriver</td>
<td>Class for vendor’s JDBC driver</td>
</tr>
<tr class="row-odd">
<td>driver.url</td>
<td>(constructed from other properties)</td>
<td>JDBC connection URL</td>
</tr>
<tr class="row-even">
<td>db.username</td>
<td>“sa”</td>
<td>User id for db connection</td>
</tr>
<tr class="row-odd">
<td>db.password</td>
<td>–</td>
<td>password for db connection</td>
</tr>
<tr class="row-even">
<td>connection.properties.file</td>
<td>–</td>
<td>JDBC Connection property file path</td>
</tr>
<tr class="row-odd">
<td>create.schema</td>
<td>true</td>
<td>If true, then creates db schema if not there</td>
</tr>
<tr class="row-even">
<td>create.index</td>
<td>true</td>
<td>Create indexes to speed up lookups</td>
</tr>
<tr class="row-odd">
<td>create.foreignkey</td>
<td>true</td>
<td> </td>
</tr>
<tr class="row-even">
<td>transaction.isolation</td>
<td>“READ_COMMITTED”</td>
<td>Isolation level for db session READ_UNCOMMITTED, READ_COMMITTED, SERIALIZABLE, REPEATABLE_READ</td>
</tr>
<tr class="row-odd">
<td>maximum.connections</td>
<td>10</td>
<td>Max connections allowed to db</td>
</tr>
<tr class="row-even">
<td>maximum.capacity</td>
<td>0 (unlimited)</td>
<td>Max number of events in the channel</td>
</tr>
<tr class="row-odd">
<td>sysprop.*</td>
<td> </td>
<td>DB Vendor specific properties</td>
</tr>
<tr class="row-even">
<td>sysprop.user.home</td>
<td> </td>
<td>Home path to store embedded Derby database</td>
</tr>
</tbody>
</table>
<p>Example for agent named a1:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">a1.channels</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.channels.c1.type</span> <span class="o">=</span> <span class="s">jdbc</span>
</pre>
</div>
</div>
</div>
<div id="file-channel" class="section">
<h4>File Channel<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#file-channel" rel="nofollow">¶</a></h4>
<p>Required properties are in <strong>bold</strong>.</p>
<table class="docutils" border="1">
<colgroup><col width="21%"><col width="14%"><col width="65%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name Default</th>
<th class="head">Description</th>
<th class="head"> </th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>type</strong></td>
<td>–</td>
<td>The component type name, needs to be <tt class="docutils literal">file</tt>.</td>
</tr>
<tr class="row-odd">
<td>checkpointDir</td>
<td>~/.flume/file-channel/checkpoint</td>
<td>The directory where checkpoint file will be stored</td>
</tr>
<tr class="row-even">
<td>useDualCheckpoints</td>
<td>false</td>
<td>Backup the checkpoint. If this is set to <tt class="docutils literal">true</tt>,
<tt class="docutils literal">backupCheckpointDir</tt> <strong>must</strong> be set</td>
</tr>
<tr class="row-odd">
<td>backupCheckpointDir</td>
<td>–</td>
<td>The directory where the checkpoint is backed up to. This directory <strong>must not</strong> be the same as the data directories or the checkpoint directory</td>
</tr>
<tr class="row-even">
<td>dataDirs</td>
<td>~/.flume/file-channel/data</td>
<td>Comma separated list of directories for storing log files. Using multiple directories on separate disks can improve file channel peformance</td>
</tr>
<tr class="row-odd">
<td>transactionCapacity</td>
<td>10000</td>
<td>The maximum size of transaction supported by the channel</td>
</tr>
<tr class="row-even">
<td>checkpointInterval</td>
<td>30000</td>
<td>Amount of time (in millis) between checkpoints</td>
</tr>
<tr class="row-odd">
<td>maxFileSize</td>
<td>2146435071</td>
<td>Max size (in bytes) of a single log file</td>
</tr>
<tr class="row-even">
<td>minimumRequiredSpace</td>
<td>524288000</td>
<td>Minimum Required free space (in bytes). To avoid data corruption, File Channel stops accepting take/put requests when free space drops below this value</td>
</tr>
<tr class="row-odd">
<td>capacity</td>
<td>1000000</td>
<td>Maximum capacity of the channel</td>
</tr>
<tr class="row-even">
<td>keep-alive</td>
<td>3</td>
<td>Amount of time (in sec) to wait for a put operation</td>
</tr>
<tr class="row-odd">
<td>use-log-replay-v1</td>
<td>false</td>
<td>Expert: Use old replay logic</td>
</tr>
<tr class="row-even">
<td>use-fast-replay</td>
<td>false</td>
<td>Expert: Replay without using queue</td>
</tr>
<tr class="row-odd">
<td>encryption.activeKey</td>
<td>–</td>
<td>Key name used to encrypt new data</td>
</tr>
<tr class="row-even">
<td>encryption.cipherProvider</td>
<td>–</td>
<td>Cipher provider type, supported types: AESCTRNOPADDING</td>
</tr>
<tr class="row-odd">
<td>encryption.keyProvider</td>
<td>–</td>
<td>Key provider type, supported types: JCEKSFILE</td>
</tr>
<tr class="row-even">
<td>encryption.keyProvider.keyStoreFile</td>
<td>–</td>
<td>Path to the keystore file</td>
</tr>
<tr class="row-odd">
<td>encrpytion.keyProvider.keyStorePasswordFile</td>
<td>–</td>
<td>Path to the keystore password file</td>
</tr>
<tr class="row-even">
<td>encryption.keyProvider.keys</td>
<td>–</td>
<td>List of all keys (e.g. history of the activeKey setting)</td>
</tr>
<tr class="row-odd">
<td>encyption.keyProvider.keys.*.passwordFile</td>
<td>–</td>
<td>Path to the optional key password file</td>
</tr>
</tbody>
</table>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">By default the File Channel uses paths for checkpoint and data directories that are within the user home as specified above. As a result if you have more than one File Channel instances active within the agent, only one will be able to lock
 the directories and cause the other channel initialization to fail. It is therefore necessary that you provide explicit paths to all the configured channels, preferably on different disks. Furthermore, as file channel will sync to disk after every commit,
 coupling it with a sink/source that batches events together may be necessary to provide good performance where multiple disks are not available for checkpoint and data directories.</p>
</div>
<p>Example for agent named a1:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">a1.channels</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.channels.c1.type</span> <span class="o">=</span> <span class="s">file</span>
<span class="na">a1.channels.c1.checkpointDir</span> <span class="o">=</span> <span class="s">/mnt/flume/checkpoint</span>
<span class="na">a1.channels.c1.dataDirs</span> <span class="o">=</span> <span class="s">/mnt/flume/data</span>
</pre>
</div>
</div>
<p><strong>Encryption</strong></p>
<p>Below is a few sample configurations:</p>
<p>Generating a key with a password seperate from the key store password:</p>
<div class="highlight-bash">
<div class="highlight">
<pre>keytool -genseckey -alias key-0 -keypass keyPassword -keyalg AES <span class="se">\</span>
  -keysize 128 -validity 9000 -keystore test.keystore <span class="se">\</span>
  -storetype jceks -storepass keyStorePassword
</pre>
</div>
</div>
<p>Generating a key with the password the same as the key store password:</p>
<div class="highlight-bash">
<div class="highlight">
<pre>keytool -genseckey -alias key-1 -keyalg AES -keysize 128 -validity 9000 <span class="se">\</span>
  -keystore src/test/resources/test.keystore -storetype jceks <span class="se">\</span>
  -storepass keyStorePassword
</pre>
</div>
</div>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">a1.channels.c1.encryption.activeKey</span> <span class="o">=</span> <span class="s">key-0</span>
<span class="na">a1.channels.c1.encryption.cipherProvider</span> <span class="o">=</span> <span class="s">AESCTRNOPADDING</span>
<span class="na">a1.channels.c1.encryption.keyProvider</span> <span class="o">=</span> <span class="s">key-provider-0</span>
<span class="na">a1.channels.c1.encryption.keyProvider</span> <span class="o">=</span> <span class="s">JCEKSFILE</span>
<span class="na">a1.channels.c1.encryption.keyProvider.keyStoreFile</span> <span class="o">=</span> <span class="s">/path/to/my.keystore</span>
<span class="na">a1.channels.c1.encryption.keyProvider.keyStorePasswordFile</span> <span class="o">=</span> <span class="s">/path/to/my.keystore.password</span>
<span class="na">a1.channels.c1.encryption.keyProvider.keys</span> <span class="o">=</span> <span class="s">key-0</span>
</pre>
</div>
</div>
<p>Let’s say you have aged key-0 out and new files should be encrypted with key-1:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">a1.channels.c1.encryption.activeKey</span> <span class="o">=</span> <span class="s">key-1</span>
<span class="na">a1.channels.c1.encryption.cipherProvider</span> <span class="o">=</span> <span class="s">AESCTRNOPADDING</span>
<span class="na">a1.channels.c1.encryption.keyProvider</span> <span class="o">=</span> <span class="s">JCEKSFILE</span>
<span class="na">a1.channels.c1.encryption.keyProvider.keyStoreFile</span> <span class="o">=</span> <span class="s">/path/to/my.keystore</span>
<span class="na">a1.channels.c1.encryption.keyProvider.keyStorePasswordFile</span> <span class="o">=</span> <span class="s">/path/to/my.keystore.password</span>
<span class="na">a1.channels.c1.encryption.keyProvider.keys</span> <span class="o">=</span> <span class="s">key-0 key-1</span>
</pre>
</div>
</div>
<p>The same scenerio as above, however key-0 has its own password:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">a1.channels.c1.encryption.activeKey</span> <span class="o">=</span> <span class="s">key-1</span>
<span class="na">a1.channels.c1.encryption.cipherProvider</span> <span class="o">=</span> <span class="s">AESCTRNOPADDING</span>
<span class="na">a1.channels.c1.encryption.keyProvider</span> <span class="o">=</span> <span class="s">JCEKSFILE</span>
<span class="na">a1.channels.c1.encryption.keyProvider.keyStoreFile</span> <span class="o">=</span> <span class="s">/path/to/my.keystore</span>
<span class="na">a1.channels.c1.encryption.keyProvider.keyStorePasswordFile</span> <span class="o">=</span> <span class="s">/path/to/my.keystore.password</span>
<span class="na">a1.channels.c1.encryption.keyProvider.keys</span> <span class="o">=</span> <span class="s">key-0 key-1</span>
<span class="na">a1.channels.c1.encryption.keyProvider.keys.key-0.passwordFile</span> <span class="o">=</span> <span class="s">/path/to/key-0.password</span>
</pre>
</div>
</div>
</div>
<div id="pseudo-transaction-channel" class="section">
<h4>Pseudo Transaction Channel<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#pseudo-transaction-channel" rel="nofollow">¶</a></h4>
<div class="admonition warning">
<p class="first admonition-title">Warning</p>
<p class="last">The Pseudo Transaction Channel is only for unit testing purposes and is NOT meant for production use.</p>
</div>
<p>Required properties are in <strong>bold</strong>.</p>
<table class="docutils" border="1">
<colgroup><col width="12%"><col width="6%"><col width="81%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>type</strong></td>
<td>–</td>
<td>The component type name, needs to be <tt class="docutils literal">org.apache.flume.channel.PseudoTxnMemoryChannel</tt></td>
</tr>
<tr class="row-odd">
<td>capacity</td>
<td>50</td>
<td>The max number of events stored in the channel</td>
</tr>
<tr class="row-even">
<td>keep-alive</td>
<td>3</td>
<td>Timeout in seconds for adding or removing an event</td>
</tr>
</tbody>
</table>
</div>
<div id="custom-channel" class="section">
<h4>Custom Channel<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#custom-channel" rel="nofollow">¶</a></h4>
<p>A custom channel is your own implementation of the Channel interface. A custom channel’s class and its dependencies must be included in the agent’s classpath when starting the Flume agent. The type of the custom channel is its FQCN. Required properties are
 in <strong>bold</strong>.</p>
<table class="docutils" border="1">
<colgroup><col width="15%"><col width="8%"><col width="76%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>type</strong></td>
<td>–</td>
<td>The component type name, needs to be a FQCN</td>
</tr>
</tbody>
</table>
<p>Example for agent named a1:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">a1.channels</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.channels.c1.type</span> <span class="o">=</span> <span class="s">org.example.MyChannel</span>
</pre>
</div>
</div>
</div>
</div>
<div id="flume-channel-selectors" class="section">
<h3>Flume Channel Selectors<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#flume-channel-selectors" rel="nofollow">¶</a></h3>
<p>If the type is not specified, then defaults to “replicating”.</p>
<div id="replicating-channel-selector-default" class="section">
<h4>Replicating Channel Selector (default)<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#replicating-channel-selector-default" rel="nofollow">¶</a></h4>
<p>Required properties are in <strong>bold</strong>.</p>
<table class="docutils" border="1">
<colgroup><col width="22%"><col width="14%"><col width="64%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td>selector.type</td>
<td>replicating</td>
<td>The component type name, needs to be <tt class="docutils literal">replicating</tt></td>
</tr>
<tr class="row-odd">
<td>selector.optional</td>
<td>–</td>
<td>Set of channels to be marked as <tt class="docutils literal">optional</tt></td>
</tr>
</tbody>
</table>
<p>Example for agent named a1 and it’s source called r1:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">a1.sources</span> <span class="o">=</span> <span class="s">r1</span>
<span class="na">a1.channels</span> <span class="o">=</span> <span class="s">c1 c2 c3</span>
<span class="na">a1.source.r1.selector.type</span> <span class="o">=</span> <span class="s">replicating</span>
<span class="na">a1.source.r1.channels</span> <span class="o">=</span> <span class="s">c1 c2 c3</span>
<span class="na">a1.source.r1.selector.optional</span> <span class="o">=</span> <span class="s">c3</span>
</pre>
</div>
</div>
<p>In the above configuration, c3 is an optional channel. Failure to write to c3 is simply ignored. Since c1 and c2 are not marked optional, failure to write to those channels will cause the transaction to fail.</p>
</div>
<div id="multiplexing-channel-selector" class="section">
<h4>Multiplexing Channel Selector<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#multiplexing-channel-selector" rel="nofollow">¶</a></h4>
<p>Required properties are in <strong>bold</strong>.</p>
<table class="docutils" border="1">
<colgroup><col width="20%"><col width="23%"><col width="58%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td>selector.type</td>
<td>replicating</td>
<td>The component type name, needs to be <tt class="docutils literal">multiplexing</tt></td>
</tr>
<tr class="row-odd">
<td>selector.header</td>
<td>flume.selector.header</td>
<td> </td>
</tr>
<tr class="row-even">
<td>selector.default</td>
<td>–</td>
<td> </td>
</tr>
<tr class="row-odd">
<td>selector.mapping.*</td>
<td>–</td>
<td> </td>
</tr>
</tbody>
</table>
<p>Example for agent named a1 and it’s source called r1:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">a1.sources</span> <span class="o">=</span> <span class="s">r1</span>
<span class="na">a1.channels</span> <span class="o">=</span> <span class="s">c1 c2 c3 c4</span>
<span class="na">a1.sources.r1.selector.type</span> <span class="o">=</span> <span class="s">multiplexing</span>
<span class="na">a1.sources.r1.selector.header</span> <span class="o">=</span> <span class="s">state</span>
<span class="na">a1.sources.r1.selector.mapping.CZ</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.sources.r1.selector.mapping.US</span> <span class="o">=</span> <span class="s">c2 c3</span>
<span class="na">a1.sources.r1.selector.default</span> <span class="o">=</span> <span class="s">c4</span>
</pre>
</div>
</div>
</div>
<div id="custom-channel-selector" class="section">
<h4>Custom Channel Selector<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#custom-channel-selector" rel="nofollow">¶</a></h4>
<p>A custom channel selector is your own implementation of the ChannelSelector interface. A custom channel selector’s class and its dependencies must be included in the agent’s classpath when starting the Flume agent. The type of the custom channel selector
 is its FQCN.</p>
<table class="docutils" border="1">
<colgroup><col width="20%"><col width="11%"><col width="70%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td>selector.type</td>
<td>–</td>
<td>The component type name, needs to be your FQCN</td>
</tr>
</tbody>
</table>
<p>Example for agent named a1 and its source called r1:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">a1.sources</span> <span class="o">=</span> <span class="s">r1</span>
<span class="na">a1.channels</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.sources.r1.selector.type</span> <span class="o">=</span> <span class="s">org.example.MyChannelSelector</span>
</pre>
</div>
</div>
</div>
</div>
<div id="flume-sink-processors" class="section">
<h3>Flume Sink Processors<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#flume-sink-processors" rel="nofollow">¶</a></h3>
<p>Sink groups allow users to group multiple sinks into one entity. Sink processors can be used to provide load balancing capabilities over all sinks inside the group or to achieve fail over from one sink to another in case of temporal failure.</p>
<p>Required properties are in <strong>bold</strong>.</p>
<table class="docutils" border="1">
<colgroup><col width="17%"><col width="10%"><col width="73%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>sinks</strong></td>
<td>–</td>
<td>Space-separated list of sinks that are participating in the group</td>
</tr>
<tr class="row-odd">
<td><strong>processor.type</strong></td>
<td><tt class="docutils literal">default</tt></td>
<td>The component type name, needs to be <tt class="docutils literal">default</tt>,
<tt class="docutils literal">failover</tt> or <tt class="docutils literal">load_balance</tt></td>
</tr>
</tbody>
</table>
<p>Example for agent named a1:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">a1.sinkgroups</span> <span class="o">=</span> <span class="s">g1</span>
<span class="na">a1.sinkgroups.g1.sinks</span> <span class="o">=</span> <span class="s">k1 k2</span>
<span class="na">a1.sinkgroups.g1.processor.type</span> <span class="o">=</span> <span class="s">load_balance</span>
</pre>
</div>
</div>
<div id="default-sink-processor" class="section">
<h4>Default Sink Processor<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#default-sink-processor" rel="nofollow">¶</a></h4>
<p>Default sink processor accepts only a single sink. User is not forced to create processor (sink group) for single sinks. Instead user can follow the source - channel - sink pattern that was explained above in this user guide.</p>
</div>
<div id="failover-sink-processor" class="section">
<h4>Failover Sink Processor<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#failover-sink-processor" rel="nofollow">¶</a></h4>
<p>Failover Sink Processor maintains a prioritized list of sinks, guaranteeing that so long as one is available events will be processed (delivered).</p>
<p>The failover mechanism works by relegating failed sinks to a pool where they are assigned a cool down period, increasing with sequential failures before they are retried. Once a sink successfully sends an event, it is restored to the live pool.</p>
<p>To configure, set a sink groups processor to <tt class="docutils literal">failover</tt> and set priorities for all individual sinks. All specified priorities must be unique. Furthermore, upper limit to failover time can be set (in milliseconds) using
<tt class="docutils literal">maxpenalty</tt> property.</p>
<p>Required properties are in <strong>bold</strong>.</p>
<table class="docutils" border="1">
<colgroup><col width="26%"><col width="9%"><col width="66%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>sinks</strong></td>
<td>–</td>
<td>Space-separated list of sinks that are participating in the group</td>
</tr>
<tr class="row-odd">
<td><strong>processor.type</strong></td>
<td><tt class="docutils literal">default</tt></td>
<td>The component type name, needs to be <tt class="docutils literal">failover</tt></td>
</tr>
<tr class="row-even">
<td><strong>processor.priority.&lt;sinkName&gt;</strong></td>
<td>–</td>
<td>&lt;sinkName&gt; must be one of the sink instances associated with the current sink group</td>
</tr>
<tr class="row-odd">
<td>processor.maxpenalty</td>
<td>30000</td>
<td>(in millis)</td>
</tr>
</tbody>
</table>
<p>Example for agent named a1:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">a1.sinkgroups</span> <span class="o">=</span> <span class="s">g1</span>
<span class="na">a1.sinkgroups.g1.sinks</span> <span class="o">=</span> <span class="s">k1 k2</span>
<span class="na">a1.sinkgroups.g1.processor.type</span> <span class="o">=</span> <span class="s">failover</span>
<span class="na">a1.sinkgroups.g1.processor.priority.k1</span> <span class="o">=</span> <span class="s">5</span>
<span class="na">a1.sinkgroups.g1.processor.priority.k2</span> <span class="o">=</span> <span class="s">10</span>
<span class="na">a1.sinkgroups.g1.processor.maxpenalty</span> <span class="o">=</span> <span class="s">10000</span>
</pre>
</div>
</div>
</div>
<div id="load-balancing-sink-processor" class="section">
<h4>Load balancing Sink Processor<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#load-balancing-sink-processor" rel="nofollow">¶</a></h4>
<p>Load balancing sink processor provides the ability to load-balance flow over multiple sinks. It maintains an indexed list of active sinks on which the load must be distributed. Implementation supports distributing load using either via
<tt class="docutils literal">round_robin</tt> or <tt class="docutils literal">random</tt> selection mechanisms. The choice of selection mechanism defaults to
<tt class="docutils literal">round_robin</tt> type, but can be overridden via configuration. Custom selection mechanisms are supported via custom classes that inherits from
<tt class="docutils literal">AbstractSinkSelector</tt>.</p>
<p>When invoked, this selector picks the next sink using its configured selection mechanism and invokes it. For
<tt class="docutils literal">round_robin</tt> and <tt class="docutils literal">random</tt> In case the selected sink fails to deliver the event, the processor picks the next available sink via its configured selection mechanism. This implementation does not
 blacklist the failing sink and instead continues to optimistically attempt every available sink. If all sinks invocations result in failure, the selector propagates the failure to the sink runner.</p>
<p>If <tt class="docutils literal">backoff</tt> is enabled, the sink processor will blacklist sinks that fail, removing them for selection for a given timeout. When the timeout ends, if the sink is still unresponsive timeout is increased exponentially to avoid
 potentially getting stuck in long waits on unresponsive sinks. With this disabled, in round-robin all the failed sinks load will be passed to the next sink in line and thus not evenly balanced</p>
<p>Required properties are in <strong>bold</strong>.</p>
<table class="docutils" border="1">
<colgroup><col width="25%"><col width="13%"><col width="63%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>processor.sinks</strong></td>
<td>–</td>
<td>Space-separated list of sinks that are participating in the group</td>
</tr>
<tr class="row-odd">
<td><strong>processor.type</strong></td>
<td><tt class="docutils literal">default</tt></td>
<td>The component type name, needs to be <tt class="docutils literal">load_balance</tt></td>
</tr>
<tr class="row-even">
<td>processor.backoff</td>
<td>false</td>
<td>Should failed sinks be backed off exponentially.</td>
</tr>
<tr class="row-odd">
<td>processor.selector</td>
<td><tt class="docutils literal">round_robin</tt></td>
<td>Selection mechanism. Must be either <tt class="docutils literal">round_robin</tt>,
<tt class="docutils literal">random</tt> or FQCN of custom class that inherits from
<tt class="docutils literal">AbstractSinkSelector</tt></td>
</tr>
<tr class="row-even">
<td>processor.selector.maxTimeOut</td>
<td>30000</td>
<td>Used by backoff selectors to limit exponential backoff (in milliseconds)</td>
</tr>
</tbody>
</table>
<p>Example for agent named a1:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">a1.sinkgroups</span> <span class="o">=</span> <span class="s">g1</span>
<span class="na">a1.sinkgroups.g1.sinks</span> <span class="o">=</span> <span class="s">k1 k2</span>
<span class="na">a1.sinkgroups.g1.processor.type</span> <span class="o">=</span> <span class="s">load_balance</span>
<span class="na">a1.sinkgroups.g1.processor.backoff</span> <span class="o">=</span> <span class="s">true</span>
<span class="na">a1.sinkgroups.g1.processor.selector</span> <span class="o">=</span> <span class="s">random</span>
</pre>
</div>
</div>
</div>
<div id="custom-sink-processor" class="section">
<h4>Custom Sink Processor<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#custom-sink-processor" rel="nofollow">¶</a></h4>
<p>Custom sink processors are not supported at the moment.</p>
</div>
</div>
<div id="event-serializers" class="section">
<h3>Event Serializers<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#event-serializers" rel="nofollow">¶</a></h3>
<p>The <tt class="docutils literal">file_roll</tt> sink and the <tt class="docutils literal">
hdfs</tt> sink both support the <tt class="docutils literal">EventSerializer</tt> interface. Details of the EventSerializers that ship with Flume are provided below.</p>
<div id="body-text-serializer" class="section">
<h4>Body Text Serializer<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#body-text-serializer" rel="nofollow">¶</a></h4>
<p>Alias: <tt class="docutils literal">text</tt>. This interceptor writes the body of the event to an output stream without any transformation or modification. The event headers are ignored. Configuration options are as follows:</p>
<table class="docutils" border="1">
<colgroup><col width="22%"><col width="14%"><col width="65%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td>appendNewline</td>
<td>true</td>
<td>Whether a newline will be appended to each event at write time. The default of true assumes that events do not contain newlines, for legacy reasons.</td>
</tr>
</tbody>
</table>
<p>Example for agent named a1:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">a1.sinks</span> <span class="o">=</span> <span class="s">k1</span>
<span class="na">a1.sinks.k1.type</span> <span class="o">=</span> <span class="s">file_roll</span>
<span class="na">a1.sinks.k1.channel</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.sinks.k1.sink.directory</span> <span class="o">=</span> <span class="s">/var/log/flume</span>
<span class="na">a1.sinks.k1.sink.serializer</span> <span class="o">=</span> <span class="s">text</span>
<span class="na">a1.sinks.k1.sink.serializer.appendNewline</span> <span class="o">=</span> <span class="s">false</span>
</pre>
</div>
</div>
</div>
<div id="avro-event-serializer" class="section">
<h4>Avro Event Serializer<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#avro-event-serializer" rel="nofollow">¶</a></h4>
<p>Alias: <tt class="docutils literal">avro_event</tt>. This interceptor serializes Flume events into an Avro container file. The schema used is the same schema used for Flume events in the Avro RPC mechanism. This serializers inherits from the
<tt class="docutils literal">AbstractAvroEventSerializer</tt> class. Configuration options are as follows:</p>
<table class="docutils" border="1">
<colgroup><col width="22%"><col width="14%"><col width="64%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td>syncIntervalBytes</td>
<td>2048000</td>
<td>Avro sync interval, in approximate bytes.</td>
</tr>
<tr class="row-odd">
<td>compressionCodec</td>
<td>null</td>
<td>Avro compression codec. For supported codecs, see Avro’s CodecFactory docs.</td>
</tr>
</tbody>
</table>
<p>Example for agent named a1:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">a1.sinks.k1.type</span> <span class="o">=</span> <span class="s">hdfs</span>
<span class="na">a1.sinks.k1.channel</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.sinks.k1.hdfs.path</span> <span class="o">=</span> <span class="s">/flume/events/%y-%m-%d/%H%M/%S</span>
<span class="na">a1.sinks.k1.serializer</span> <span class="o">=</span> <span class="s">avro_event</span>
<span class="na">a1.sinks.k1.serializer.compressionCodec</span> <span class="o">=</span> <span class="s">snappy</span>
</pre>
</div>
</div>
</div>
</div>
<div id="flume-interceptors" class="section">
<h3>Flume Interceptors<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#flume-interceptors" rel="nofollow">¶</a></h3>
<p>Flume has the capability to modify/drop events in-flight. This is done with the help of interceptors. Interceptors are classes that implement
<tt class="docutils literal">org.apache.flume.interceptor.Interceptor</tt> interface. An interceptor can modify or even drop events based on any criteria chosen by the developer of the interceptor. Flume supports chaining of interceptors. This is made possible
 through by specifying the list of interceptor builder class names in the configuration. Interceptors are specified as a whitespace separated list in the source configuration. The order in which the interceptors are specified is the order in which they are
 invoked. The list of events returned by one interceptor is passed to the next interceptor in the chain. Interceptors can modify or drop events. If an interceptor needs to drop events, it just does not return that event in the list that it returns. If it is
 to drop all events, then it simply returns an empty list. Interceptors are named components, here is an example of how they are created through configuration:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">a1.sources</span> <span class="o">=</span> <span class="s">r1</span>
<span class="na">a1.sinks</span> <span class="o">=</span> <span class="s">k1</span>
<span class="na">a1.channels</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.sources.r1.interceptors</span> <span class="o">=</span> <span class="s">i1 i2</span>
<span class="na">a1.sources.r1.interceptors.i1.type</span> <span class="o">=</span> <span class="s">org.apache.flume.interceptor.HostInterceptor$Builder</span>
<span class="na">a1.sources.r1.interceptors.i1.preserveExisting</span> <span class="o">=</span> <span class="s">false</span>
<span class="na">a1.sources.r1.interceptors.i1.hostHeader</span> <span class="o">=</span> <span class="s">hostname</span>
<span class="na">a1.sources.r1.interceptors.i2.type</span> <span class="o">=</span> <span class="s">org.apache.flume.interceptor.TimestampInterceptor$Builder</span>
<span class="na">a1.sinks.k1.filePrefix</span> <span class="o">=</span> <span class="s">FlumeData.%{CollectorHost}.%Y-%m-%d</span>
<span class="na">a1.sinks.k1.channel</span> <span class="o">=</span> <span class="s">c1</span>
</pre>
</div>
</div>
<p>Note that the interceptor builders are passed to the type config parameter. The interceptors are themselves configurable and can be passed configuration values just like they are passed to any other configurable component. In the above example, events are
 passed to the HostInterceptor first and the events returned by the HostInterceptor are then passed along to the TimestampInterceptor. You can specify either the fully qualified class name (FQCN) or the alias
<tt class="docutils literal">timestamp</tt>. If you have multiple collectors writing to the same HDFS path, then you could also use the HostInterceptor.</p>
<div id="timestamp-interceptor" class="section">
<h4>Timestamp Interceptor<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#timestamp-interceptor" rel="nofollow">¶</a></h4>
<p>This interceptor inserts into the event headers, the time in millis at which it processes the event. This interceptor inserts a header with key
<tt class="docutils literal">timestamp</tt> whose value is the relevant timestamp. This interceptor can preserve an existing timestamp if it is already present in the configuration.</p>
<table class="docutils" border="1">
<colgroup><col width="17%"><col width="7%"><col width="76%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>type</strong></td>
<td>–</td>
<td>The component type name, has to be <tt class="docutils literal">timestamp</tt> or the FQCN</td>
</tr>
<tr class="row-odd">
<td>preserveExisting</td>
<td>false</td>
<td>If the timestamp already exists, should it be preserved - true or false</td>
</tr>
</tbody>
</table>
<p>Example for agent named a1:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">a1.sources</span> <span class="o">=</span> <span class="s">r1</span>
<span class="na">a1.channels</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.sources.r1.channels</span> <span class="o">=</span>  <span class="s">c1</span>
<span class="na">a1.sources.r1.type</span> <span class="o">=</span> <span class="s">seq</span>
<span class="na">a1.sources.r1.interceptors</span> <span class="o">=</span> <span class="s">i1</span>
<span class="na">a1.sources.r1.interceptors.i1.type</span> <span class="o">=</span> <span class="s">timestamp</span>
</pre>
</div>
</div>
</div>
<div id="host-interceptor" class="section">
<h4>Host Interceptor<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#host-interceptor" rel="nofollow">¶</a></h4>
<p>This interceptor inserts the hostname or IP address of the host that this agent is running on. It inserts a header with key
<tt class="docutils literal">host</tt> or a configured key whose value is the hostname or IP address of the host, based on configuration.</p>
<table class="docutils" border="1">
<colgroup><col width="17%"><col width="7%"><col width="76%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>type</strong></td>
<td>–</td>
<td>The component type name, has to be <tt class="docutils literal">host</tt></td>
</tr>
<tr class="row-odd">
<td>preserveExisting</td>
<td>false</td>
<td>If the host header already exists, should it be preserved - true or false</td>
</tr>
<tr class="row-even">
<td>useIP</td>
<td>true</td>
<td>Use the IP Address if true, else use hostname.</td>
</tr>
<tr class="row-odd">
<td>hostHeader</td>
<td>host</td>
<td>The header key to be used.</td>
</tr>
</tbody>
</table>
<p>Example for agent named a1:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">a1.sources</span> <span class="o">=</span> <span class="s">r1</span>
<span class="na">a1.channels</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.sources.r1.interceptors</span> <span class="o">=</span> <span class="s">i1</span>
<span class="na">a1.sources.r1.interceptors.i1.type</span> <span class="o">=</span> <span class="s">host</span>
<span class="na">a1.sources.r1.interceptors.i1.hostHeader</span> <span class="o">=</span> <span class="s">hostname</span>
</pre>
</div>
</div>
</div>
<div id="static-interceptor" class="section">
<h4>Static Interceptor<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#static-interceptor" rel="nofollow">¶</a></h4>
<p>Static interceptor allows user to append a static header with static value to all events.</p>
<p>The current implementation does not allow specifying multiple headers at one time. Instead user might chain multiple static interceptors each defining one static header.</p>
<table class="docutils" border="1">
<colgroup><col width="16%"><col width="7%"><col width="77%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>type</strong></td>
<td>–</td>
<td>The component type name, has to be <tt class="docutils literal">static</tt></td>
</tr>
<tr class="row-odd">
<td>preserveExisting</td>
<td>true</td>
<td>If configured header already exists, should it be preserved - true or false</td>
</tr>
<tr class="row-even">
<td>key</td>
<td>key</td>
<td>Name of header that should be created</td>
</tr>
<tr class="row-odd">
<td>value</td>
<td>value</td>
<td>Static value that should be created</td>
</tr>
</tbody>
</table>
<p>Example for agent named a1:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">a1.sources</span> <span class="o">=</span> <span class="s">r1</span>
<span class="na">a1.channels</span> <span class="o">=</span> <span class="s">c1</span>
<span class="na">a1.sources.r1.channels</span> <span class="o">=</span>  <span class="s">c1</span>
<span class="na">a1.sources.r1.type</span> <span class="o">=</span> <span class="s">seq</span>
<span class="na">a1.sources.r1.interceptors</span> <span class="o">=</span> <span class="s">i1</span>
<span class="na">a1.sources.r1.interceptors.i1.type</span> <span class="o">=</span> <span class="s">static</span>
<span class="na">a1.sources.r1.interceptors.i1.key</span> <span class="o">=</span> <span class="s">datacenter</span>
<span class="na">a1.sources.r1.interceptors.i1.value</span> <span class="o">=</span> <span class="s">NEW_YORK</span>
</pre>
</div>
</div>
</div>
<div id="uuid-interceptor" class="section">
<h4>UUID Interceptor<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#uuid-interceptor" rel="nofollow">¶</a></h4>
<p>This interceptor sets a universally unique identifier on all events that are intercepted. An example UUID is
<tt class="docutils literal">b5755073-77a9-43c1-8fad-b7a586fc1b97</tt>, which represents a 128-bit value.</p>
<p>Consider using UUIDInterceptor to automatically assign a UUID to an event if no application level unique key for the event is available. It can be important to assign UUIDs to events as soon as they enter the Flume network; that is, in the first Flume Source
 of the flow. This enables subsequent deduplication of events in the face of replication and redelivery in a Flume network that is designed for high availability and high performance. If an application level key is available, this is preferable over an auto-generated
 UUID because it enables subsequent updates and deletes of event in data stores using said well known application level key.</p>
<table class="docutils" border="1">
<colgroup><col width="13%"><col width="6%"><col width="81%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>type</strong></td>
<td>–</td>
<td>The component type name has to be <tt class="docutils literal">org.apache.flume.sink.solr.morphline.UUIDInterceptor$Builder</tt></td>
</tr>
<tr class="row-odd">
<td>headerName</td>
<td>id</td>
<td>The name of the Flume header to modify</td>
</tr>
<tr class="row-even">
<td>preserveExisting</td>
<td>true</td>
<td>If the UUID header already exists, should it be preserved - true or false</td>
</tr>
<tr class="row-odd">
<td>prefix</td>
<td>“”</td>
<td>The prefix string constant to prepend to each generated UUID</td>
</tr>
</tbody>
</table>
</div>
<div id="morphline-interceptor" class="section">
<h4>Morphline Interceptor<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#morphline-interceptor" rel="nofollow">¶</a></h4>
<p>This interceptor filters the events through a <a target="_blank" class="reference external" href="http://cloudera.github.io/cdk/docs/current/cdk-morphlines/index.html" rel="nofollow">
morphline configuration file</a> that defines a chain of transformation commands that pipe records from one command to another. For example the morphline can ignore certain events or alter or insert certain event headers via regular expression based pattern
 matching, or it can auto-detect and set a MIME type via Apache Tika on events that are intercepted. For example, this kind of packet sniffing can be used for content based dynamic routing in a Flume topology. MorphlineInterceptor can also help to implement
 dynamic routing to multiple Apache Solr collections (e.g. for multi-tenancy).</p>
<p>Currently, there is a restriction in that the morphline of an interceptor must not generate more than one output record for each input event. This interceptor is not intended for heavy duty ETL processing - if you need this consider moving ETL processing
 from the Flume Source to a Flume Sink, e.g. to a MorphlineSolrSink.</p>
<p>Required properties are in <strong>bold</strong>.</p>
<table class="docutils" border="1">
<colgroup><col width="10%"><col width="4%"><col width="85%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>type</strong></td>
<td>–</td>
<td>The component type name has to be <tt class="docutils literal">org.apache.flume.sink.solr.morphline.MorphlineInterceptor$Builder</tt></td>
</tr>
<tr class="row-odd">
<td><strong>morphlineFile</strong></td>
<td>–</td>
<td>The relative or absolute path on the local file system to the morphline configuration file. Example:
<tt class="docutils literal">/etc/flume-ng/conf/morphline.conf</tt></td>
</tr>
<tr class="row-even">
<td>morphlineId</td>
<td>null</td>
<td>Optional name used to identify a morphline if there are multiple morphlines in a morphline config file</td>
</tr>
</tbody>
</table>
<p>Sample flume.conf file:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">a1.sources.avroSrc.interceptors</span> <span class="o">=</span> <span class="s">morphlineinterceptor</span>
<span class="na">a1.sources.avroSrc.interceptors.morphlineinterceptor.type</span> <span class="o">=</span> <span class="s">org.apache.flume.sink.solr.morphline.MorphlineInterceptor$Builder</span>
<span class="na">a1.sources.avroSrc.interceptors.morphlineinterceptor.morphlineFile</span> <span class="o">=</span> <span class="s">/etc/flume-ng/conf/morphline.conf</span>
<span class="na">a1.sources.avroSrc.interceptors.morphlineinterceptor.morphlineId</span> <span class="o">=</span> <span class="s">morphline1</span>
</pre>
</div>
</div>
</div>
<div id="regex-filtering-interceptor" class="section">
<h4>Regex Filtering Interceptor<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#regex-filtering-interceptor" rel="nofollow">¶</a></h4>
<p>This interceptor filters events selectively by interpreting the event body as text and matching the text against a configured regular expression. The supplied regular expression can be used to include events or exclude events.</p>
<table class="docutils" border="1">
<colgroup><col width="17%"><col width="7%"><col width="76%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>type</strong></td>
<td>–</td>
<td>The component type name has to be <tt class="docutils literal">regex_filter</tt></td>
</tr>
<tr class="row-odd">
<td>regex</td>
<td>”.*”</td>
<td>Regular expression for matching against events</td>
</tr>
<tr class="row-even">
<td>excludeEvents</td>
<td>false</td>
<td>If true, regex determines events to exclude, otherwise regex determines events to include.</td>
</tr>
</tbody>
</table>
</div>
<div id="regex-extractor-interceptor" class="section">
<h4>Regex Extractor Interceptor<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#regex-extractor-interceptor" rel="nofollow">¶</a></h4>
<p>This interceptor extracts regex match groups using a specified regular expression and appends the match groups as headers on the event. It also supports pluggable serializers for formatting the match groups before adding them as event headers.</p>
<table class="docutils" border="1">
<colgroup><col width="21%"><col width="6%"><col width="73%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>type</strong></td>
<td>–</td>
<td>The component type name has to be <tt class="docutils literal">regex_extractor</tt></td>
</tr>
<tr class="row-odd">
<td><strong>regex</strong></td>
<td>–</td>
<td>Regular expression for matching against events</td>
</tr>
<tr class="row-even">
<td><strong>serializers</strong></td>
<td>–</td>
<td>Space-separated list of serializers for mapping matches to header names and serializing their values. (See example below) Flume provides built-in support for the following serializers:
<tt class="docutils literal">org.apache.flume.interceptor.RegexExtractorInterceptorPassThroughSerializer</tt>
<tt class="docutils literal">org.apache.flume.interceptor.RegexExtractorInterceptorMillisSerializer</tt></td>
</tr>
<tr class="row-odd">
<td>serializers.&lt;s1&gt;.type</td>
<td>default</td>
<td>Must be <tt class="docutils literal">default</tt> (org.apache.flume.interceptor.RegexExtractorInterceptorPassThroughSerializer),
<tt class="docutils literal">org.apache.flume.interceptor.RegexExtractorInterceptorMillisSerializer</tt>, or the FQCN of a custom class that implements
<tt class="docutils literal">org.apache.flume.interceptor.RegexExtractorInterceptorSerializer</tt></td>
</tr>
<tr class="row-even">
<td>serializers.&lt;s1&gt;.<strong>name</strong></td>
<td>–</td>
<td> </td>
</tr>
<tr class="row-odd">
<td>serializers.*</td>
<td>–</td>
<td>Serializer-specific properties</td>
</tr>
</tbody>
</table>
<p>The serializers are used to map the matches to a header name and a formatted header value; by default, you only need to specify the header name and the default
<tt class="docutils literal">org.apache.flume.interceptor.RegexExtractorInterceptorPassThroughSerializer</tt> will be used. This serializer simply maps the matches to the specified header name and passes the value through as it was extracted by the regex. You
 can plug custom serializer implementations into the extractor using the fully qualified class name (FQCN) to format the matches in anyway you like.</p>
</div>
<div id="example-1" class="section">
<h4>Example 1:<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#example-1" rel="nofollow">¶</a></h4>
<p>If the Flume event body contained <tt class="docutils literal">1:2:3.4foobar5</tt> and the following configuration was used</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">a1.sources.r1.interceptors.i1.regex</span> <span class="o">=</span> <span class="s">(\\d):(\\d):(\\d)</span>
<span class="na">a1.sources.r1.interceptors.i1.serializers</span> <span class="o">=</span> <span class="s">s1 s2 s3</span>
<span class="na">a1.sources.r1.interceptors.i1.serializers.s1.name</span> <span class="o">=</span> <span class="s">one</span>
<span class="na">a1.sources.r1.interceptors.i1.serializers.s2.name</span> <span class="o">=</span> <span class="s">two</span>
<span class="na">a1.sources.r1.interceptors.i1.serializers.s3.name</span> <span class="o">=</span> <span class="s">three</span>
</pre>
</div>
</div>
<p>The extracted event will contain the same body but the following headers will have been added
<tt class="docutils literal"><span class="pre">one=&gt;1,</span> <span class="pre">two=&gt;2,</span>
<span class="pre">three=&gt;3</span></tt></p>
</div>
<div id="example-2" class="section">
<h4>Example 2:<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#example-2" rel="nofollow">¶</a></h4>
<p>If the Flume event body contained <tt class="docutils literal"><span class="pre">2012-10-18</span>
<span class="pre">18:47:57,614</span> <span class="pre">some</span> <span class="pre">
log</span> <span class="pre">line</span></tt> and the following configuration was used</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="na">a1.sources.r1.interceptors.i1.regex</span> <span class="o">=</span> <span class="s">^(?:\\n)?(\\d\\d\\d\\d-\\d\\d-\\d\\d\\s\\d\\d:\\d\\d)</span>
<span class="na">a1.sources.r1.interceptors.i1.serializers</span> <span class="o">=</span> <span class="s">s1</span>
<span class="na">a1.sources.r1.interceptors.i1.serializers.s1.type</span> <span class="o">=</span> <span class="s">org.apache.flume.interceptor.RegexExtractorInterceptorMillisSerializer</span>
<span class="na">a1.sources.r1.interceptors.i1.serializers.s1.name</span> <span class="o">=</span> <span class="s">timestamp</span>
<span class="na">a1.sources.r1.interceptors.i1.serializers.s1.pattern</span> <span class="o">=</span> <span class="s">yyyy-MM-dd HH:mm</span>
</pre>
</div>
</div>
<p>the extracted event will contain the same body but the following headers will have been added
<tt class="docutils literal">timestamp=&gt;1350611220000</tt></p>
</div>
</div>
<div id="flume-properties" class="section">
<h3>Flume Properties<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#flume-properties" rel="nofollow">¶</a></h3>
<table class="docutils" border="1">
<colgroup><col width="25%"><col width="7%"><col width="68%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td>flume.called.from.service</td>
<td>–</td>
<td>If this property is specified then the Flume agent will continue polling for the config file even if the config file is not found at the expected location. Otherwise, the Flume agent will terminate if the config doesn’t exist at the expected location. No
 property value is needed when setting this property (eg, just specifying -Dflume.called.from.service is enough)</td>
</tr>
</tbody>
</table>
<div id="property-flume-called-from-service" class="section">
<h4>Property: flume.called.from.service<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#property-flume-called-from-service" rel="nofollow">¶</a></h4>
<p>Flume periodically polls, every 30 seconds, for changes to the specified config file. A Flume agent loads a new configuration from the config file if either an existing file is polled for the first time, or if an existing file’s modification date has changed
 since the last time it was polled. Renaming or moving a file does not change its modification time. When a Flume agent polls a non-existent file then one of two things happens: 1. When the agent polls a non-existent config file for the first time, then the
 agent behaves according to the flume.called.from.service property. If the property is set, then the agent will continue polling (always at the same period – every 30 seconds). If the property is not set, then the agent immediately terminates. ...OR... 2. When
 the agent polls a non-existent config file and this is not the first time the file is polled, then the agent makes no config changes for this polling period. The agent continues polling rather than terminating.</p>
</div>
</div>
</div>
<div id="log4j-appender" class="section">
<h2>Log4J Appender<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#log4j-appender" rel="nofollow">¶</a></h2>
<p>Appends Log4j events to a flume agent’s avro source. A client using this appender must have the flume-ng-sdk in the classpath (eg, flume-ng-sdk-1.4.0.jar). Required properties are in
<strong>bold</strong>.</p>
<table class="docutils" border="1">
<colgroup><col width="19%"><col width="6%"><col width="75%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>Hostname</strong></td>
<td>–</td>
<td>The hostname on which a remote Flume agent is running with an avro source.</td>
</tr>
<tr class="row-odd">
<td><strong>Port</strong></td>
<td>–</td>
<td>The port at which the remote Flume agent’s avro source is listening.</td>
</tr>
<tr class="row-even">
<td>UnsafeMode</td>
<td>false</td>
<td>If true, the appender will not throw exceptions on failure to send the events.</td>
</tr>
<tr class="row-odd">
<td>AvroReflectionEnabled</td>
<td>false</td>
<td>Use Avro Reflection to serialize Log4j events. (Do not use when users log strings)</td>
</tr>
<tr class="row-even">
<td>AvroSchemaUrl</td>
<td>–</td>
<td>A URL from which the Avro schema can be retrieved.</td>
</tr>
</tbody>
</table>
<p>Sample log4j.properties file:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="c">#...</span>
<span class="na">log4j.appender.flume</span> <span class="o">=</span> <span class="s">org.apache.flume.clients.log4jappender.Log4jAppender</span>
<span class="na">log4j.appender.flume.Hostname</span> <span class="o">=</span> <span class="s">example.com</span>
<span class="na">log4j.appender.flume.Port</span> <span class="o">=</span> <span class="s">41414</span>
<span class="na">log4j.appender.flume.UnsafeMode</span> <span class="o">=</span> <span class="s">true</span>

<span class="c"># configure a class's logger to output to the flume appender</span>
<span class="na">log4j.logger.org.example.MyClass</span> <span class="o">=</span> <span class="s">DEBUG,flume</span>
<span class="c">#...</span>
</pre>
</div>
</div>
<p>By default each event is converted to a string by calling <tt class="docutils literal">
toString()</tt>, or by using the Log4j layout, if specified.</p>
<p>If the event is an instance of <tt class="docutils literal">org.apache.avro.generic.GenericRecord</tt>,
<tt class="docutils literal">org.apache.avro.specific.SpecificRecord</tt>, or if the property
<tt class="docutils literal">AvroReflectionEnabled</tt> is set to <tt class="docutils literal">
true</tt> then the event will be serialized using Avro serialization.</p>
<p>Serializing every event with its Avro schema is inefficient, so it is good practice to provide a schema URL from which the schema can be retrieved by the downstream sink, typically the HDFS sink. If
<tt class="docutils literal">AvroSchemaUrl</tt> is not specified, then the schema will be included as a Flume header.</p>
<p>Sample log4j.properties file configured to use Avro serialization:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="c">#...</span>
<span class="na">log4j.appender.flume</span> <span class="o">=</span> <span class="s">org.apache.flume.clients.log4jappender.Log4jAppender</span>
<span class="na">log4j.appender.flume.Hostname</span> <span class="o">=</span> <span class="s">example.com</span>
<span class="na">log4j.appender.flume.Port</span> <span class="o">=</span> <span class="s">41414</span>
<span class="na">log4j.appender.flume.AvroReflectionEnabled</span> <span class="o">=</span> <span class="s">true</span>
<span class="na">log4j.appender.flume.AvroSchemaUrl</span> <span class="o">=</span> <span class="s">hdfs://namenode/path/to/schema.avsc</span>

<span class="c"># configure a class's logger to output to the flume appender</span>
<span class="na">log4j.logger.org.example.MyClass</span> <span class="o">=</span> <span class="s">DEBUG,flume</span>
<span class="c">#...</span>
</pre>
</div>
</div>
</div>
<div id="load-balancing-log4j-appender" class="section">
<h2>Load Balancing Log4J Appender<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#load-balancing-log4j-appender" rel="nofollow">¶</a></h2>
<p>Appends Log4j events to a list of flume agent’s avro source. A client using this appender must have the flume-ng-sdk in the classpath (eg, flume-ng-sdk-1.4.0.jar). This appender supports a round-robin and random scheme for performing the load balancing.
 It also supports a configurable backoff timeout so that down agents are removed temporarily from the set of hosts Required properties are in
<strong>bold</strong>.</p>
<table class="docutils" border="1">
<colgroup><col width="22%"><col width="11%"><col width="67%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>Hosts</strong></td>
<td>–</td>
<td>A space-separated list of host:port at which Flume (through an AvroSource) is listening for events</td>
</tr>
<tr class="row-odd">
<td>Selector</td>
<td>ROUND_ROBIN</td>
<td>Selection mechanism. Must be either ROUND_ROBIN, RANDOM or custom FQDN to class that inherits from LoadBalancingSelector.</td>
</tr>
<tr class="row-even">
<td>MaxBackoff</td>
<td>–</td>
<td>A long value representing the maximum amount of time in milliseconds the Load balancing client will backoff from a node that has failed to consume an event. Defaults to no backoff</td>
</tr>
<tr class="row-odd">
<td>UnsafeMode</td>
<td>false</td>
<td>If true, the appender will not throw exceptions on failure to send the events.</td>
</tr>
<tr class="row-even">
<td>AvroReflectionEnabled</td>
<td>false</td>
<td>Use Avro Reflection to serialize Log4j events.</td>
</tr>
<tr class="row-odd">
<td>AvroSchemaUrl</td>
<td>–</td>
<td>A URL from which the Avro schema can be retrieved.</td>
</tr>
</tbody>
</table>
<p>Sample log4j.properties file configured using defaults:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="c">#...</span>
<span class="na">log4j.appender.out2</span> <span class="o">=</span> <span class="s">org.apache.flume.clients.log4jappender.LoadBalancingLog4jAppender</span>
<span class="na">log4j.appender.out2.Hosts</span> <span class="o">=</span> <span class="s">localhost:25430 localhost:25431</span>

<span class="c"># configure a class's logger to output to the flume appender</span>
<span class="na">log4j.logger.org.example.MyClass</span> <span class="o">=</span> <span class="s">DEBUG,flume</span>
<span class="c">#...</span>
</pre>
</div>
</div>
<p>Sample log4j.properties file configured using RANDOM load balancing:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="c">#...</span>
<span class="na">log4j.appender.out2</span> <span class="o">=</span> <span class="s">org.apache.flume.clients.log4jappender.LoadBalancingLog4jAppender</span>
<span class="na">log4j.appender.out2.Hosts</span> <span class="o">=</span> <span class="s">localhost:25430 localhost:25431</span>
<span class="na">log4j.appender.out2.Selector</span> <span class="o">=</span> <span class="s">RANDOM</span>

<span class="c"># configure a class's logger to output to the flume appender</span>
<span class="na">log4j.logger.org.example.MyClass</span> <span class="o">=</span> <span class="s">DEBUG,flume</span>
<span class="c">#...</span>
</pre>
</div>
</div>
<p>Sample log4j.properties file configured using backoff:</p>
<div class="highlight-properties">
<div class="highlight">
<pre><span class="c">#...</span>
<span class="na">log4j.appender.out2</span> <span class="o">=</span> <span class="s">org.apache.flume.clients.log4jappender.LoadBalancingLog4jAppender</span>
<span class="na">log4j.appender.out2.Hosts</span> <span class="o">=</span> <span class="s">localhost:25430 localhost:25431 localhost:25432</span>
<span class="na">log4j.appender.out2.Selector</span> <span class="o">=</span> <span class="s">ROUND_ROBIN</span>
<span class="na">log4j.appender.out2.MaxBackoff</span> <span class="o">=</span> <span class="s">30000</span>

<span class="c"># configure a class's logger to output to the flume appender</span>
<span class="na">log4j.logger.org.example.MyClass</span> <span class="o">=</span> <span class="s">DEBUG,flume</span>
<span class="c">#...</span>
</pre>
</div>
</div>
</div>
<div id="security" class="section">
<h2>Security<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#security" rel="nofollow">¶</a></h2>
<p>The HDFS sink supports Kerberos authentication if the underlying HDFS is running in secure mode. Please refer to the HDFS Sink section for configuring the HDFS sink Kerberos-related options.</p>
</div>
<div id="monitoring" class="section">
<h2>Monitoring<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#monitoring" rel="nofollow">¶</a></h2>
<p>Monitoring in Flume is still a work in progress. Changes can happen very often. Several Flume components report metrics to the JMX platform MBean server. These metrics can be queried using Jconsole.</p>
<div id="ganglia-reporting" class="section">
<h3>Ganglia Reporting<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#ganglia-reporting" rel="nofollow">¶</a></h3>
<p>Flume can also report these metrics to Ganglia 3 or Ganglia 3.1 metanodes. To report metrics to Ganglia, a flume agent must be started with this support. The Flume agent has to be started by passing in the following parameters as system properties prefixed
 by <tt class="docutils literal">flume.monitoring.</tt>, and can be specified in the flume-env.sh:</p>
<table class="docutils" border="1">
<colgroup><col width="20%"><col width="6%"><col width="74%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>type</strong></td>
<td>–</td>
<td>The component type name, has to be <tt class="docutils literal">ganglia</tt></td>
</tr>
<tr class="row-odd">
<td><strong>hosts</strong></td>
<td>–</td>
<td>Comma-separated list of <tt class="docutils literal">hostname:port</tt> of Ganglia servers</td>
</tr>
<tr class="row-even">
<td>pollFrequency</td>
<td>60</td>
<td>Time, in seconds, between consecutive reporting to Ganglia server</td>
</tr>
<tr class="row-odd">
<td>isGanglia3</td>
<td>false</td>
<td>Ganglia server version is 3. By default, Flume sends in Ganglia 3.1 format</td>
</tr>
</tbody>
</table>
<p>We can start Flume with Ganglia support as follows:</p>
<div class="highlight-none">
<div class="highlight">
<pre>$ bin/flume-ng agent --conf-file example.conf --name a1 -Dflume.monitoring.type=ganglia -Dflume.monitoring.hosts=com.example:1234,com.example2:5455
</pre>
</div>
</div>
</div>
<div id="json-reporting" class="section">
<h3>JSON Reporting<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#json-reporting" rel="nofollow">¶</a></h3>
<p>Flume can also report metrics in a JSON format. To enable reporting in JSON format, Flume hosts a Web server on a configurable port. Flume reports metrics in the following JSON format:</p>
<div class="highlight-java">
<div class="highlight">
<pre><span class="o">{</span>
<span class="s">"typeName1.componentName1"</span> <span class="o">:</span> <span class="o">{</span><span class="s">"metric1"</span> <span class="o">:</span> <span class="s">"metricValue1"</span><span class="o">,</span> <span class="s">"metric2"</span> <span class="o">:</span> <span class="s">"metricValue2"</span><span class="o">},</span>
<span class="s">"typeName2.componentName2"</span> <span class="o">:</span> <span class="o">{</span><span class="s">"metric3"</span> <span class="o">:</span> <span class="s">"metricValue3"</span><span class="o">,</span> <span class="s">"metric4"</span> <span class="o">:</span> <span class="s">"metricValue4"</span><span class="o">}</span>
<span class="o">}</span>
</pre>
</div>
</div>
<p>Here is an example:</p>
<div class="highlight-java">
<div class="highlight">
<pre><span class="o">{</span>
<span class="s">"CHANNEL.fileChannel"</span><span class="o">:{</span><span class="s">"EventPutSuccessCount"</span><span class="o">:</span><span class="s">"468085"</span><span class="o">,</span>
                      <span class="s">"Type"</span><span class="o">:</span><span class="s">"CHANNEL"</span><span class="o">,</span>
                      <span class="s">"StopTime"</span><span class="o">:</span><span class="s">"0"</span><span class="o">,</span>
                      <span class="s">"EventPutAttemptCount"</span><span class="o">:</span><span class="s">"468086"</span><span class="o">,</span>
                      <span class="s">"ChannelSize"</span><span class="o">:</span><span class="s">"233428"</span><span class="o">,</span>
                      <span class="s">"StartTime"</span><span class="o">:</span><span class="s">"1344882233070"</span><span class="o">,</span>
                      <span class="s">"EventTakeSuccessCount"</span><span class="o">:</span><span class="s">"458200"</span><span class="o">,</span>
                      <span class="s">"ChannelCapacity"</span><span class="o">:</span><span class="s">"600000"</span><span class="o">,</span>
                      <span class="s">"EventTakeAttemptCount"</span><span class="o">:</span><span class="s">"458288"</span><span class="o">},</span>
<span class="s">"CHANNEL.memChannel"</span><span class="o">:{</span><span class="s">"EventPutSuccessCount"</span><span class="o">:</span><span class="s">"22948908"</span><span class="o">,</span>
                   <span class="s">"Type"</span><span class="o">:</span><span class="s">"CHANNEL"</span><span class="o">,</span>
                   <span class="s">"StopTime"</span><span class="o">:</span><span class="s">"0"</span><span class="o">,</span>
                   <span class="s">"EventPutAttemptCount"</span><span class="o">:</span><span class="s">"22948908"</span><span class="o">,</span>
                   <span class="s">"ChannelSize"</span><span class="o">:</span><span class="s">"5"</span><span class="o">,</span>
                   <span class="s">"StartTime"</span><span class="o">:</span><span class="s">"1344882209413"</span><span class="o">,</span>
                   <span class="s">"EventTakeSuccessCount"</span><span class="o">:</span><span class="s">"22948900"</span><span class="o">,</span>
                   <span class="s">"ChannelCapacity"</span><span class="o">:</span><span class="s">"100"</span><span class="o">,</span>
                   <span class="s">"EventTakeAttemptCount"</span><span class="o">:</span><span class="s">"22948908"</span><span class="o">}</span>
<span class="o">}</span>
</pre>
</div>
</div>
<table class="docutils" border="1">
<colgroup><col width="20%"><col width="6%"><col width="74%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>type</strong></td>
<td>–</td>
<td>The component type name, has to be <tt class="docutils literal">http</tt></td>
</tr>
<tr class="row-odd">
<td>port</td>
<td>41414</td>
<td>The port to start the server on.</td>
</tr>
</tbody>
</table>
<p>We can start Flume with JSON Reporting support as follows:</p>
<div class="highlight-none">
<div class="highlight">
<pre>$ bin/flume-ng agent --conf-file example.conf --name a1 -Dflume.monitoring.type=http -Dflume.monitoring.port=34545
</pre>
</div>
</div>
<p>Metrics will then be available at <strong>http://&lt;hostname&gt;:&lt;port&gt;/metrics</strong> webpage. Custom components can report metrics as mentioned in the Ganglia section above.</p>
</div>
<div id="custom-reporting" class="section">
<h3>Custom Reporting<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#custom-reporting" rel="nofollow">¶</a></h3>
<p>It is possible to report metrics to other systems by writing servers that do the reporting. Any reporting class has to implement the interface,
<tt class="docutils literal">org.apache.flume.instrumentation.MonitorService</tt>. Such a class can be used the same way the GangliaServer is used for reporting. They can poll the platform mbean server to poll the mbeans for metrics. For example, if an HTTP
 monitoring service called <tt class="docutils literal">HTTPReporting</tt> can be used as follows:</p>
<div class="highlight-none">
<div class="highlight">
<pre>$ bin/flume-ng agent --conf-file example.conf --name a1 -Dflume.monitoring.type=com.example.reporting.HTTPReporting -Dflume.monitoring.node=com.example:332
</pre>
</div>
</div>
<table class="docutils" border="1">
<colgroup><col width="33%"><col width="10%"><col width="57%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Property Name</th>
<th class="head">Default</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td><strong>type</strong></td>
<td>–</td>
<td>The component type name, has to be FQCN</td>
</tr>
</tbody>
</table>
</div>
<div id="reporting-metrics-from-custom-components" class="section">
<h3>Reporting metrics from custom components<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#reporting-metrics-from-custom-components" rel="nofollow">¶</a></h3>
<p>Any custom flume components should inherit from the <tt class="docutils literal">
org.apache.flume.instrumentation.MonitoredCounterGroup</tt> class. The class should then provide getter methods for each of the metrics it exposes. See the code below. The MonitoredCounterGroup expects a list of attributes whose metrics are exposed by this
 class. As of now, this class only supports exposing metrics as long values.</p>
<div class="highlight-java">
<div class="highlight">
<pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SinkCounter</span> <span class="kd">extends</span> <span class="n">MonitoredCounterGroup</span> <span class="kd">implements</span>
    <span class="n">SinkCounterMBean</span> <span class="o">{</span>

  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">COUNTER_CONNECTION_CREATED</span> <span class="o">=</span>
    <span class="s">"sink.connection.creation.count"</span><span class="o">;</span>

  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">COUNTER_CONNECTION_CLOSED</span> <span class="o">=</span>
    <span class="s">"sink.connection.closed.count"</span><span class="o">;</span>

  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">COUNTER_CONNECTION_FAILED</span> <span class="o">=</span>
    <span class="s">"sink.connection.failed.count"</span><span class="o">;</span>

  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">COUNTER_BATCH_EMPTY</span> <span class="o">=</span>
    <span class="s">"sink.batch.empty"</span><span class="o">;</span>

  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">COUNTER_BATCH_UNDERFLOW</span> <span class="o">=</span>
      <span class="s">"sink.batch.underflow"</span><span class="o">;</span>

  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">COUNTER_BATCH_COMPLETE</span> <span class="o">=</span>
    <span class="s">"sink.batch.complete"</span><span class="o">;</span>

  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">COUNTER_EVENT_DRAIN_ATTEMPT</span> <span class="o">=</span>
    <span class="s">"sink.event.drain.attempt"</span><span class="o">;</span>

  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">COUNTER_EVENT_DRAIN_SUCCESS</span> <span class="o">=</span>
    <span class="s">"sink.event.drain.sucess"</span><span class="o">;</span>

  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span><span class="o">[]</span> <span class="n">ATTRIBUTES</span> <span class="o">=</span> <span class="o">{</span>
    <span class="n">COUNTER_CONNECTION_CREATED</span><span class="o">,</span> <span class="n">COUNTER_CONNECTION_CLOSED</span><span class="o">,</span>
    <span class="n">COUNTER_CONNECTION_FAILED</span><span class="o">,</span> <span class="n">COUNTER_BATCH_EMPTY</span><span class="o">,</span>
    <span class="n">COUNTER_BATCH_UNDERFLOW</span><span class="o">,</span> <span class="n">COUNTER_BATCH_COMPLETE</span><span class="o">,</span>
    <span class="n">COUNTER_EVENT_DRAIN_ATTEMPT</span><span class="o">,</span> <span class="n">COUNTER_EVENT_DRAIN_SUCCESS</span>
  <span class="o">};</span>


  <span class="kd">public</span> <span class="nf">SinkCounter</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
    <span class="kd">super</span><span class="o">(</span><span class="n">MonitoredCounterGroup</span><span class="o">.</span><span class="na">Type</span><span class="o">.</span><span class="na">SINK</span><span class="o">,</span> <span class="n">name</span><span class="o">,</span> <span class="n">ATTRIBUTES</span><span class="o">);</span>
  <span class="o">}</span>

  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getConnectionCreatedCount</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">get</span><span class="o">(</span><span class="n">COUNTER_CONNECTION_CREATED</span><span class="o">);</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kt">long</span> <span class="nf">incrementConnectionCreatedCount</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">increment</span><span class="o">(</span><span class="n">COUNTER_CONNECTION_CREATED</span><span class="o">);</span>
  <span class="o">}</span>

<span class="o">}</span>
</pre>
</div>
</div>
</div>
</div>
<div id="topology-design-considerations" class="section">
<h2>Topology Design Considerations<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#topology-design-considerations" rel="nofollow">¶</a></h2>
<p>Flume is very flexible and allows a large range of possible deployment scenarios. If you plan to use Flume in a large, production deployment, it is prudent to spend some time thinking about how to express your problem in terms of a Flume topology. This section
 covers a few considerations.</p>
<div id="is-flume-a-good-fit-for-your-problem" class="section">
<h3>Is Flume a good fit for your problem?<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#is-flume-a-good-fit-for-your-problem" rel="nofollow">¶</a></h3>
<p>If you need to ingest textual log data into Hadoop/HDFS then Flume is the right fit for your problem, full stop. For other use cases, here are some guidelines:</p>
<p>Flume is designed to transport and ingest regularly-generated event data over relatively stable, potentially complex topologies. The notion of “event data” is very broadly defined. To Flume, an event is just a generic blob of bytes. There are some limitations
 on how large an event can be - for instance, it cannot be larger than what you can store in memory or on disk on a single machine - but in practice, flume events can be everything from textual log entries to image files. The key property of an event is that
 they are generated in a continuous, streaming fashion. If your data is not regularly generated (i.e. you are trying to do a single bulk load of data into a Hadoop cluster) then Flume will still work, but it is probably overkill for your situation. Flume likes
 relatively stable topologies. Your topologies do not need to be immutable, because Flume can deal with changes in topology without losing data and can also tolerate periodic reconfiguration due to fail-over or provisioning. It probably won’t work well if you
 plant to change topologies every day, because reconfiguration takes some thought and overhead.</p>
</div>
<div id="flow-reliability-in-flume" class="section">
<h3>Flow reliability in Flume<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#flow-reliability-in-flume" rel="nofollow">¶</a></h3>
<p>The reliability of a Flume flow depends on several factors. By adjusting these factors, you can achieve a wide array of reliability options with Flume.</p>
<p><strong>What type of channel you use.</strong> Flume has both durable channels (those which will persist data to disk) and non durable channels (those which will lose data if a machine fails). Durable channels use disk-based storage, and data stored in such
 channels will persist across machine restarts or non disk-related failures.</p>
<p><strong>Whether your channels are sufficiently provisioned for the workload.</strong> Channels in Flume act as buffers at various hops. These buffers have a fixed capacity, and once that capacity is full you will create back pressure on earlier points in
 the flow. If this pressure propagates to the source of the flow, Flume will become unavailable and may lose data.</p>
<p><strong>Whether you use redundant topologies.</strong> Flume let’s you replicate flows across redundant topologies. This can provide a very easy source of fault tolerance and one which is overcomes both disk or machine failures. </p>
<p><em>The best way to think about reliability in a Flume topology is to consider various failure scenarios and their outcomes.</em> What happens if a disk fails? What happens if a machine fails? What happens if your terminal sink (e.g. HDFS) goes down for
 some time and you have back pressure? The space of possible designs is huge, but the underlying questions you need to ask are just a handful.</p>
</div>
<div id="flume-topology-design" class="section">
<h3>Flume topology design<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#flume-topology-design" rel="nofollow">¶</a></h3>
<p>The first step in designing a Flume topology is to enumerate all sources and destinations (terminal sinks) for your data. These will define the edge points of your topology. The next consideration is whether to introduce intermediate aggregation tiers or
 event routing. If you are collecting data form a large number of sources, it can be helpful to aggregate the data in order to simplify ingestion at the terminal sink. An aggregation tier can also smooth out burstiness from sources or unavailability at sinks,
 by acting as a buffer. If you are routing data between different locations, you may also want to split flows at various points: this creates sub-topologies which may themselves include aggregation points.</p>
</div>
<div id="sizing-a-flume-deployment" class="section">
<h3>Sizing a Flume deployment<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#sizing-a-flume-deployment" rel="nofollow">¶</a></h3>
<p>Once you have an idea of what your topology will look like, the next question is how much hardware and networking capacity is needed. This starts by quantifying how much data you generate. That is not always a simple task! Most data streams are bursty (for
 instance, due to diurnal patterns) and potentially unpredictable. A good starting point is to think about the maximum throughput you’ll have in each tier of the topology, both in terms of <em>events per second</em> and <em>bytes per second</em>. Once you know
 the required throughput of a given tier, you can calulate a lower bound on how many nodes you require for that tier. To determine attainable throughput, it’s best to experiment with Flume on your hardware, using synthetic or sampled event data. In general,
 disk-based channels should get 10’s of MB/s and memory based channels should get 100’s of MB/s or more. Performance will vary widely, however depending on hardware and operating environment.</p>
<p>Sizing aggregate throughput gives you a lower bound on the number of nodes you will need to each tier. There are several reasons to have additional nodes, such as increased redundancy and better ability to absorb bursts in load.</p>
</div>
</div>
<div id="troubleshooting" class="section">
<h2>Troubleshooting<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#troubleshooting" rel="nofollow">¶</a></h2>
<div id="handling-agent-failures" class="section">
<h3>Handling agent failures<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#handling-agent-failures" rel="nofollow">¶</a></h3>
<p>If the Flume agent goes down, then the all the flows hosted on that agent are aborted. Once the agent is restarted, then flow will resume. The flow using file channel or other stable channel will resume processing events where it left off. If the agent can’t
 be restarted on the same hardware, then there is an option to migrate the database to another hardware and setup a new Flume agent that can resume processing the events saved in the db. The database HA futures can be leveraged to move the Flume agent to another
 host.</p>
</div>
<div id="compatibility" class="section">
<h3>Compatibility<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#compatibility" rel="nofollow">¶</a></h3>
<div id="hdfs" class="section">
<h4>HDFS<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#hdfs" rel="nofollow">¶</a></h4>
<p>Currently Flume supports HDFS 0.20.2 and 0.23.</p>
</div>
<div id="id3" class="section">
<h4>AVRO<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#id3" rel="nofollow">¶</a></h4>
<p>TBD</p>
</div>
<div id="additional-version-requirements" class="section">
<h4>Additional version requirements<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#additional-version-requirements" rel="nofollow">¶</a></h4>
<p>TBD</p>
</div>
</div>
<div id="tracing" class="section">
<h3>Tracing<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#tracing" rel="nofollow">¶</a></h3>
<p>TBD</p>
</div>
<div id="more-sample-configs" class="section">
<h3>More Sample Configs<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#more-sample-configs" rel="nofollow">¶</a></h3>
<p>TBD</p>
</div>
</div>
<div id="component-summary" class="section">
<h2>Component Summary<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#component-summary" rel="nofollow">¶</a></h2>
<table class="docutils" border="1">
<colgroup><col width="40%"><col width="15%"><col width="45%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Component Interface</th>
<th class="head">Type Alias</th>
<th class="head">Implementation Class</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td>org.apache.flume.Channel</td>
<td>memory</td>
<td>org.apache.flume.channel.MemoryChannel</td>
</tr>
<tr class="row-odd">
<td>org.apache.flume.Channel</td>
<td>jdbc</td>
<td>org.apache.flume.channel.jdbc.JdbcChannel</td>
</tr>
<tr class="row-even">
<td>org.apache.flume.Channel</td>
<td>file</td>
<td>org.apache.flume.channel.file.FileChannel</td>
</tr>
<tr class="row-odd">
<td>org.apache.flume.Channel</td>
<td>–</td>
<td>org.apache.flume.channel.PseudoTxnMemoryChannel</td>
</tr>
<tr class="row-even">
<td>org.apache.flume.Channel</td>
<td>–</td>
<td>org.example.MyChannel</td>
</tr>
<tr class="row-odd">
<td>org.apache.flume.Source</td>
<td>avro</td>
<td>org.apache.flume.source.AvroSource</td>
</tr>
<tr class="row-even">
<td>org.apache.flume.Source</td>
<td>netcat</td>
<td>org.apache.flume.source.NetcatSource</td>
</tr>
<tr class="row-odd">
<td>org.apache.flume.Source</td>
<td>seq</td>
<td>org.apache.flume.source.SequenceGeneratorSource</td>
</tr>
<tr class="row-even">
<td>org.apache.flume.Source</td>
<td>exec</td>
<td>org.apache.flume.source.ExecSource</td>
</tr>
<tr class="row-odd">
<td>org.apache.flume.Source</td>
<td>syslogtcp</td>
<td>org.apache.flume.source.SyslogTcpSource</td>
</tr>
<tr class="row-even">
<td>org.apache.flume.Source</td>
<td>multiport_syslogtcp</td>
<td>org.apache.flume.source.MultiportSyslogTCPSource</td>
</tr>
<tr class="row-odd">
<td>org.apache.flume.Source</td>
<td>syslogudp</td>
<td>org.apache.flume.source.SyslogUDPSource</td>
</tr>
<tr class="row-even">
<td>org.apache.flume.Source</td>
<td>spooldir</td>
<td>org.apache.flume.source.SpoolDirectorySource</td>
</tr>
<tr class="row-odd">
<td>org.apache.flume.Source</td>
<td>http</td>
<td>org.apache.flume.source.http.HTTPSource</td>
</tr>
<tr class="row-even">
<td>org.apache.flume.Source</td>
<td>thrift</td>
<td>org.apache.flume.source.ThriftSource</td>
</tr>
<tr class="row-odd">
<td>org.apache.flume.Source</td>
<td>jms</td>
<td>org.apache.flume.source.jms.JMSSource</td>
</tr>
<tr class="row-even">
<td>org.apache.flume.Source</td>
<td>–</td>
<td>org.apache.flume.source.avroLegacy.AvroLegacySource</td>
</tr>
<tr class="row-odd">
<td>org.apache.flume.Source</td>
<td>–</td>
<td>org.apache.flume.source.thriftLegacy.ThriftLegacySource</td>
</tr>
<tr class="row-even">
<td>org.apache.flume.Source</td>
<td>–</td>
<td>org.example.MySource</td>
</tr>
<tr class="row-odd">
<td>org.apache.flume.Sink</td>
<td>null</td>
<td>org.apache.flume.sink.NullSink</td>
</tr>
<tr class="row-even">
<td>org.apache.flume.Sink</td>
<td>logger</td>
<td>org.apache.flume.sink.LoggerSink</td>
</tr>
<tr class="row-odd">
<td>org.apache.flume.Sink</td>
<td>avro</td>
<td>org.apache.flume.sink.AvroSink</td>
</tr>
<tr class="row-even">
<td>org.apache.flume.Sink</td>
<td>hdfs</td>
<td>org.apache.flume.sink.hdfs.HDFSEventSink</td>
</tr>
<tr class="row-odd">
<td>org.apache.flume.Sink</td>
<td>hbase</td>
<td>org.apache.flume.sink.hbase.HBaseSink</td>
</tr>
<tr class="row-even">
<td>org.apache.flume.Sink</td>
<td>asynchbase</td>
<td>org.apache.flume.sink.hbase.AsyncHBaseSink</td>
</tr>
<tr class="row-odd">
<td>org.apache.flume.Sink</td>
<td>elasticsearch</td>
<td>org.apache.flume.sink.elasticsearch.ElasticSearchSink</td>
</tr>
<tr class="row-even">
<td>org.apache.flume.Sink</td>
<td>file_roll</td>
<td>org.apache.flume.sink.RollingFileSink</td>
</tr>
<tr class="row-odd">
<td>org.apache.flume.Sink</td>
<td>irc</td>
<td>org.apache.flume.sink.irc.IRCSink</td>
</tr>
<tr class="row-even">
<td>org.apache.flume.Sink</td>
<td>thrift</td>
<td>org.apache.flume.sink.ThriftSink</td>
</tr>
<tr class="row-odd">
<td>org.apache.flume.Sink</td>
<td>–</td>
<td>org.example.MySink</td>
</tr>
<tr class="row-even">
<td>org.apache.flume.ChannelSelector</td>
<td>replicating</td>
<td>org.apache.flume.channel.ReplicatingChannelSelector</td>
</tr>
<tr class="row-odd">
<td>org.apache.flume.ChannelSelector</td>
<td>multiplexing</td>
<td>org.apache.flume.channel.MultiplexingChannelSelector</td>
</tr>
<tr class="row-even">
<td>org.apache.flume.ChannelSelector</td>
<td>–</td>
<td>org.example.MyChannelSelector</td>
</tr>
<tr class="row-odd">
<td>org.apache.flume.SinkProcessor</td>
<td>default</td>
<td>org.apache.flume.sink.DefaultSinkProcessor</td>
</tr>
<tr class="row-even">
<td>org.apache.flume.SinkProcessor</td>
<td>failover</td>
<td>org.apache.flume.sink.FailoverSinkProcessor</td>
</tr>
<tr class="row-odd">
<td>org.apache.flume.SinkProcessor</td>
<td>load_balance</td>
<td>org.apache.flume.sink.LoadBalancingSinkProcessor</td>
</tr>
<tr class="row-even">
<td>org.apache.flume.SinkProcessor</td>
<td>–</td>
<td> </td>
</tr>
<tr class="row-odd">
<td>org.apache.flume.interceptor.Interceptor</td>
<td>timestamp</td>
<td>org.apache.flume.interceptor.TimestampInterceptor$Builder</td>
</tr>
<tr class="row-even">
<td>org.apache.flume.interceptor.Interceptor</td>
<td>host</td>
<td>org.apache.flume.interceptor.HostInterceptor$Builder</td>
</tr>
<tr class="row-odd">
<td>org.apache.flume.interceptor.Interceptor</td>
<td>static</td>
<td>org.apache.flume.interceptor.StaticInterceptor$Builder</td>
</tr>
<tr class="row-even">
<td>org.apache.flume.interceptor.Interceptor</td>
<td>regex_filter</td>
<td>org.apache.flume.interceptor.RegexFilteringInterceptor$Builder</td>
</tr>
<tr class="row-odd">
<td>org.apache.flume.interceptor.Interceptor</td>
<td>regex_extractor</td>
<td>org.apache.flume.interceptor.RegexFilteringInterceptor$Builder</td>
</tr>
<tr class="row-even">
<td>org.apache.flume.channel.file.encryption.KeyProvider$Builder</td>
<td>jceksfile</td>
<td>org.apache.flume.channel.file.encryption.JCEFileKeyProvider</td>
</tr>
<tr class="row-odd">
<td>org.apache.flume.channel.file.encryption.KeyProvider$Builder</td>
<td>–</td>
<td>org.example.MyKeyProvider</td>
</tr>
<tr class="row-even">
<td>org.apache.flume.channel.file.encryption.CipherProvider</td>
<td>aesctrnopadding</td>
<td>org.apache.flume.channel.file.encryption.AESCTRNoPaddingProvider</td>
</tr>
<tr class="row-odd">
<td>org.apache.flume.channel.file.encryption.CipherProvider</td>
<td>–</td>
<td>org.example.MyCipherProvider</td>
</tr>
<tr class="row-even">
<td>org.apache.flume.serialization.EventSerializer$Builder</td>
<td>text</td>
<td>org.apache.flume.serialization.BodyTextEventSerializer$Builder</td>
</tr>
<tr class="row-odd">
<td>org.apache.flume.serialization.EventSerializer$Builder</td>
<td>avro_event</td>
<td>org.apache.flume.serialization.FlumeEventAvroEventSerializer$Builder</td>
</tr>
<tr class="row-even">
<td>org.apache.flume.serialization.EventSerializer$Builder</td>
<td>–</td>
<td>org.example.MyEventSerializer$Builder</td>
</tr>
</tbody>
</table>
</div>
<div id="alias-conventions" class="section">
<h2>Alias Conventions<a target="_blank" class="headerlink" title="Permalink to this headline" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#alias-conventions" rel="nofollow">¶</a></h2>
<p>These conventions for alias names are used in the component-specific examples above, to keep the names short and consistent across all examples.</p>
<table class="docutils" border="1">
<colgroup><col width="37%"><col width="63%"></colgroup>
<thead valign="bottom">
<tr class="row-odd">
<th class="head">Alias Name</th>
<th class="head">Alias Type</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even">
<td>a</td>
<td><strong>a</strong>gent</td>
</tr>
<tr class="row-odd">
<td>c</td>
<td><strong>c</strong>hannel</td>
</tr>
<tr class="row-even">
<td>r</td>
<td>sou<strong>r</strong>ce</td>
</tr>
<tr class="row-odd">
<td>k</td>
<td>sin<strong>k</strong></td>
</tr>
<tr class="row-even">
<td>g</td>
<td>sink <strong>g</strong>roup</td>
</tr>
<tr class="row-odd">
<td>i</td>
<td><strong>i</strong>nterceptor</td>
</tr>
<tr class="row-even">
<td>y</td>
<td>ke<strong>y</strong></td>
</tr>
<tr class="row-odd">
<td>h</td>
<td><strong>h</strong>ost</td>
</tr>
<tr class="row-even">
<td>s</td>
<td><strong>s</strong>erializer</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</div>
<div class="sphinxsidebar">
<div class="sphinxsidebarwrapper">
<p class="logo"><a target="_blank" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/index.html" rel="nofollow"><img class="logo" alt="Logo" src="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/_static/flume-logo.png">
</a></p>
<h3><a target="_blank" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/index.html" rel="nofollow">Table Of Contents</a></h3>
<ul>
<li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#" rel="nofollow">Flume 1.4.0 User Guide</a>
<ul>
<li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#introduction" rel="nofollow">Introduction</a>
<ul>
<li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#overview" rel="nofollow">Overview</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#system-requirements" rel="nofollow">System Requirements</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#architecture" rel="nofollow">Architecture</a>
<ul>
<li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#data-flow-model" rel="nofollow">Data flow model</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#complex-flows" rel="nofollow">Complex flows</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#reliability" rel="nofollow">Reliability</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#recoverability" rel="nofollow">Recoverability</a></li></ul>
</li></ul>
</li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#setup" rel="nofollow">Setup</a>
<ul>
<li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#setting-up-an-agent" rel="nofollow">Setting up an agent</a>
<ul>
<li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#configuring-individual-components" rel="nofollow">Configuring individual components</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#wiring-the-pieces-together" rel="nofollow">Wiring the pieces together</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#starting-an-agent" rel="nofollow">Starting an agent</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#a-simple-example" rel="nofollow">A simple example</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#installing-third-party-plugins" rel="nofollow">Installing third-party plugins</a>
<ul>
<li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#the-plugins-d-directory" rel="nofollow">The plugins.d directory</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#directory-layout-for-plugins" rel="nofollow">Directory layout for plugins</a></li></ul>
</li></ul>
</li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#data-ingestion" rel="nofollow">Data ingestion</a>
<ul>
<li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#rpc" rel="nofollow">RPC</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#executing-commands" rel="nofollow">Executing commands</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#network-streams" rel="nofollow">Network streams</a></li></ul>
</li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#setting-multi-agent-flow" rel="nofollow">Setting multi-agent flow</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#consolidation" rel="nofollow">Consolidation</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#multiplexing-the-flow" rel="nofollow">Multiplexing the flow</a></li></ul>
</li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#configuration" rel="nofollow">Configuration</a>
<ul>
<li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#defining-the-flow" rel="nofollow">Defining the flow</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#id1" rel="nofollow">Configuring individual components</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#adding-multiple-flows-in-an-agent" rel="nofollow">Adding multiple flows in an agent</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#configuring-a-multi-agent-flow" rel="nofollow">Configuring a multi agent flow</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#fan-out-flow" rel="nofollow">Fan out flow</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#flume-sources" rel="nofollow">Flume Sources</a>
<ul>
<li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#avro-source" rel="nofollow">Avro Source</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#thrift-source" rel="nofollow">Thrift Source</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#exec-source" rel="nofollow">Exec Source</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#jms-source" rel="nofollow">JMS Source</a>
<ul>
<li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#converter" rel="nofollow">Converter</a></li></ul>
</li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#spooling-directory-source" rel="nofollow">Spooling Directory Source</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#twitter-1-firehose-source-experimental" rel="nofollow">Twitter 1% firehose Source (experimental)</a>
<ul>
<li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#event-deserializers" rel="nofollow">Event Deserializers</a>
<ul>
<li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#line" rel="nofollow">LINE</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#avro" rel="nofollow">AVRO</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#blobdeserializer" rel="nofollow">BlobDeserializer</a></li></ul>
</li></ul>
</li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#netcat-source" rel="nofollow">NetCat Source</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#sequence-generator-source" rel="nofollow">Sequence Generator Source</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#syslog-sources" rel="nofollow">Syslog Sources</a>
<ul>
<li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#syslog-tcp-source" rel="nofollow">Syslog TCP Source</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#multiport-syslog-tcp-source" rel="nofollow">Multiport Syslog TCP Source</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#syslog-udp-source" rel="nofollow">Syslog UDP Source</a></li></ul>
</li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#http-source" rel="nofollow">HTTP Source</a>
<ul>
<li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#jsonhandler" rel="nofollow">JSONHandler</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#blobhandler" rel="nofollow">BlobHandler</a></li></ul>
</li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#legacy-sources" rel="nofollow">Legacy Sources</a>
<ul>
<li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#avro-legacy-source" rel="nofollow">Avro Legacy Source</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#thrift-legacy-source" rel="nofollow">Thrift Legacy Source</a></li></ul>
</li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#custom-source" rel="nofollow">Custom Source</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#scribe-source" rel="nofollow">Scribe Source</a></li></ul>
</li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#flume-sinks" rel="nofollow">Flume Sinks</a>
<ul>
<li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#hdfs-sink" rel="nofollow">HDFS Sink</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#logger-sink" rel="nofollow">Logger Sink</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#avro-sink" rel="nofollow">Avro Sink</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#thrift-sink" rel="nofollow">Thrift Sink</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#irc-sink" rel="nofollow">IRC Sink</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#file-roll-sink" rel="nofollow">File Roll Sink</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#null-sink" rel="nofollow">Null Sink</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#hbasesinks" rel="nofollow">HBaseSinks</a>
<ul>
<li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#hbasesink" rel="nofollow">HBaseSink</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#asynchbasesink" rel="nofollow">AsyncHBaseSink</a></li></ul>
</li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#morphlinesolrsink" rel="nofollow">MorphlineSolrSink</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#elasticsearchsink" rel="nofollow">ElasticSearchSink</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#kite-dataset-sink-experimental" rel="nofollow">Kite Dataset Sink (experimental)</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#custom-sink" rel="nofollow">Custom Sink</a></li></ul>
</li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#flume-channels" rel="nofollow">Flume Channels</a>
<ul>
<li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#memory-channel" rel="nofollow">Memory Channel</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#jdbc-channel" rel="nofollow">JDBC Channel</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#file-channel" rel="nofollow">File Channel</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#pseudo-transaction-channel" rel="nofollow">Pseudo Transaction Channel</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#custom-channel" rel="nofollow">Custom Channel</a></li></ul>
</li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#flume-channel-selectors" rel="nofollow">Flume Channel Selectors</a>
<ul>
<li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#replicating-channel-selector-default" rel="nofollow">Replicating Channel Selector (default)</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#multiplexing-channel-selector" rel="nofollow">Multiplexing Channel Selector</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#custom-channel-selector" rel="nofollow">Custom Channel Selector</a></li></ul>
</li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#flume-sink-processors" rel="nofollow">Flume Sink Processors</a>
<ul>
<li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#default-sink-processor" rel="nofollow">Default Sink Processor</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#failover-sink-processor" rel="nofollow">Failover Sink Processor</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#load-balancing-sink-processor" rel="nofollow">Load balancing Sink Processor</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#custom-sink-processor" rel="nofollow">Custom Sink Processor</a></li></ul>
</li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#event-serializers" rel="nofollow">Event Serializers</a>
<ul>
<li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#body-text-serializer" rel="nofollow">Body Text Serializer</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#avro-event-serializer" rel="nofollow">Avro Event Serializer</a></li></ul>
</li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#flume-interceptors" rel="nofollow">Flume Interceptors</a>
<ul>
<li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#timestamp-interceptor" rel="nofollow">Timestamp Interceptor</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#host-interceptor" rel="nofollow">Host Interceptor</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#static-interceptor" rel="nofollow">Static Interceptor</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#uuid-interceptor" rel="nofollow">UUID Interceptor</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#morphline-interceptor" rel="nofollow">Morphline Interceptor</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#regex-filtering-interceptor" rel="nofollow">Regex Filtering Interceptor</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#regex-extractor-interceptor" rel="nofollow">Regex Extractor Interceptor</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#example-1" rel="nofollow">Example 1:</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#example-2" rel="nofollow">Example 2:</a></li></ul>
</li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#flume-properties" rel="nofollow">Flume Properties</a>
<ul>
<li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#property-flume-called-from-service" rel="nofollow">Property: flume.called.from.service</a></li></ul>
</li></ul>
</li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#log4j-appender" rel="nofollow">Log4J Appender</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#load-balancing-log4j-appender" rel="nofollow">Load Balancing Log4J Appender</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#security" rel="nofollow">Security</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#monitoring" rel="nofollow">Monitoring</a>
<ul>
<li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#ganglia-reporting" rel="nofollow">Ganglia Reporting</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#json-reporting" rel="nofollow">JSON Reporting</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#custom-reporting" rel="nofollow">Custom Reporting</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#reporting-metrics-from-custom-components" rel="nofollow">Reporting metrics from custom components</a></li></ul>
</li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#topology-design-considerations" rel="nofollow">Topology Design Considerations</a>
<ul>
<li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#is-flume-a-good-fit-for-your-problem" rel="nofollow">Is Flume a good fit for your problem?</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#flow-reliability-in-flume" rel="nofollow">Flow reliability in Flume</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#flume-topology-design" rel="nofollow">Flume topology design</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#sizing-a-flume-deployment" rel="nofollow">Sizing a Flume deployment</a></li></ul>
</li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#troubleshooting" rel="nofollow">Troubleshooting</a>
<ul>
<li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#handling-agent-failures" rel="nofollow">Handling agent failures</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#compatibility" rel="nofollow">Compatibility</a>
<ul>
<li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#hdfs" rel="nofollow">HDFS</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#id3" rel="nofollow">AVRO</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#additional-version-requirements" rel="nofollow">Additional version requirements</a></li></ul>
</li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#tracing" rel="nofollow">Tracing</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#more-sample-configs" rel="nofollow">More Sample Configs</a></li></ul>
</li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#component-summary" rel="nofollow">Component Summary</a></li><li><a target="_blank" class="reference internal" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/FlumeUserGuide.html#alias-conventions" rel="nofollow">Alias Conventions</a></li></ul>
</li></ul>
<h3>This Page</h3>
<ul class="this-page-menu">
<li><a target="_blank" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/_sources/FlumeUserGuide.txt" rel="nofollow">Show Source</a></li></ul>
</div>
</div>
<div class="clearer"></div>
</div>
<div class="related">
<h3>Navigation</h3>
<ul>
<li class="right" style="margin-right:10px"><a target="_blank" title="General Index" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/genindex.html" rel="nofollow">index</a></li><li><a target="_blank" href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.4.0-cdh5.0.0/index.html" rel="nofollow">Apache Flume documentation</a> »</li></ul>
</div>
<div class="footer">© Copyright 2009-2012 The Apache Software Foundation. </div>
﻿  
            </div>
                </div>