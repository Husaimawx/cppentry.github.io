---
layout:     post
title:      大数据时代的技术hive：hive的数据类型和数据模型
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<p>　　在上篇文章里，我列举了一个简单的hive操作实例，创建了一张表test，并且向这张表加载了数据，这些操作和关系数据库操作类似，我们常把hive和关系数据库进行比较，也正是因为hive很多知识点和关系数据库类似。</p>
<p>　　关系数据库里有表（table），分区，hive里也有这些东西，这些东西在hive技术里称为hive的数据模型。今天本文介绍hive的数据类型，数据模型以及文件存储格式。这些知识大家可以类比关系数据库的相关知识。</p>
<p>　　首先我要讲讲hive的数据类型。</p>
<p>　　Hive支持两种数据类型，一类叫原子数据类型，一类叫复杂数据类型。</p>
<p>　　原子数据类型包括数值型、布尔型和字符串类型，具体如下表所示：</p>
<table cellspacing="0" cellpadding="0" border="1"><tbody><tr><td colspan="3" valign="top" width="568">
<p align="center"><strong>基本数据类型</strong></p>
</td>
</tr><tr><td valign="top" width="102">
<p align="center"><strong>类型</strong></p>
</td>
<td valign="top" width="359">
<p align="center"><strong>描述</strong></p>
</td>
<td valign="top" width="107">
<p align="center"><strong>示例</strong></p>
</td>
</tr><tr><td valign="top" width="102">
<p align="center">TINYINT</p>
</td>
<td valign="top" width="359">
<p align="center">1个字节（8位）有符号整数</p>
</td>
<td valign="top" width="107">
<p align="center">1</p>
</td>
</tr><tr><td valign="top" width="102">
<p align="center">SMALLINT</p>
</td>
<td valign="top" width="359">
<p align="center">2字节（16位）有符号整数</p>
</td>
<td valign="top" width="107">
<p align="center">1</p>
</td>
</tr><tr><td valign="top" width="102">
<p align="center">INT</p>
</td>
<td valign="top" width="359">
<p align="center">4字节（32位）有符号整数</p>
</td>
<td valign="top" width="107">
<p align="center">1</p>
</td>
</tr><tr><td valign="top" width="102">
<p align="center">BIGINT</p>
</td>
<td valign="top" width="359">
<p align="center">8字节（64位）有符号整数</p>
</td>
<td valign="top" width="107">
<p align="center">1</p>
</td>
</tr><tr><td valign="top" width="102">
<p align="center">FLOAT</p>
</td>
<td valign="top" width="359">
<p align="center">4字节（32位）单精度浮点数</p>
</td>
<td valign="top" width="107">
<p align="center">1.0</p>
</td>
</tr><tr><td valign="top" width="102">
<p align="center">DOUBLE</p>
</td>
<td valign="top" width="359">
<p align="center">8字节（64位）双精度浮点数</p>
</td>
<td valign="top" width="107">
<p align="center">1.0</p>
</td>
</tr><tr><td valign="top" width="102">
<p align="center">BOOLEAN</p>
</td>
<td valign="top" width="359">
<p align="center">true/false</p>
</td>
<td valign="top" width="107">
<p align="center">true</p>
</td>
</tr><tr><td valign="top" width="102">
<p align="center">STRING</p>
</td>
<td valign="top" width="359">
<p align="center">字符串</p>
</td>
<td valign="top" width="107">
<p align="center">‘xia’,”xia”</p>
</td>
</tr></tbody></table><p> </p>
<p>　　由上表我们看到hive不支持日期类型，在hive里日期都是用字符串来表示的，而常用的日期格式转化操作则是通过自定义函数进行操作。</p>
<p>　　hive是用java开发的，hive里的基本数据类型和java的基本数据类型也是一一对应的，除了string类型。有符号的整数类型：TINYINT、SMALLINT、INT和BIGINT分别等价于java的byte、short、int和long原子类型，它们分别为1字节、2字节、4字节和8字节有符号整数。Hive的浮点数据类型FLOAT和DOUBLE,对应于java的基本类型float和double类型。而hive的BOOLEAN类型相当于java的基本数据类型boolean。</p>
<p>　　对于hive的String类型相当于数据库的varchar类型，该类型是一个可变的字符串，不过它不能声明其中最多能存储多少个字符，理论上它可以存储2GB的字符数。</p>
<p>　　Hive支持基本类型的转换，低字节的基本类型可以转化为高字节的类型，例如TINYINT、SMALLINT、INT可以转化为FLOAT，而所有的整数类型、FLOAT以及STRING类型可以转化为DOUBLE类型，这些转化可以从java语言的类型转化考虑，因为hive就是用java编写的。当然也支持高字节类型转化为低字节类型，这就需要使用hive的自定义函数CAST了。</p>
<p>　　复杂数据类型包括数组（ARRAY）、映射（MAP）和结构体（STRUCT），具体如下表所示：</p>
<table cellspacing="0" cellpadding="0" border="1"><tbody><tr><td colspan="3" valign="top" width="568">
<p align="center"><strong>复杂数据类型</strong></p>
</td>
</tr><tr><td valign="top" width="102">
<p align="center"><strong>类型</strong></p>
</td>
<td valign="top" width="321">
<p align="center"><strong>描述</strong></p>
</td>
<td valign="top" width="145">
<p align="center"><strong>示例</strong></p>
</td>
</tr><tr><td valign="top" width="102">
<p align="center">ARRAY</p>
</td>
<td valign="top" width="321">
<p align="center">一组有序字段。字段的类型必须相同</p>
</td>
<td valign="top" width="145">
<p align="center">Array(1,2)</p>
</td>
</tr><tr><td valign="top" width="102">
<p align="center">MAP</p>
</td>
<td valign="top" width="321">
<p align="center">一组无序的键/值对。键的类型必须是原子的，值可以是任何类型，同一个映射的键的类型必须相同，值得类型也必须相同</p>
</td>
<td valign="top" width="145">
<p align="center">Map(‘a’,1,’b’,2)</p>
</td>
</tr><tr><td valign="top" width="102">
<p align="center">STRUCT</p>
</td>
<td valign="top" width="321">
<p align="center">一组命名的字段。字段类型可以不同</p>
</td>
<td valign="top" width="145">
<p align="center">Struct(‘a’,1,1,0)</p>
</td>
</tr></tbody></table><p> </p>
<p>下面我们看看hive使用复杂数据类型的实例，建表：</p>
<div class="cnblogs_Highlighter">
<div>
<div id="highlighter_386129" class="syntaxhighlighter nogutter sql">
<div class="toolbar"><span><a href="#" rel="nofollow" class="toolbar_item command_help help">?</a></span></div>
<table cellspacing="0" cellpadding="0" border="0"><tbody><tr><td class="code">
<div>
<div class="line number1 index0 alt2"><code class="sql keyword">Create</code> <code class="sql keyword">
table</code> <code class="sql plain">complex(col1 ARRAY&lt;</code><code class="sql keyword">INT</code><code class="sql plain">&gt;,</code></div>
<div class="line number2 index1 alt1"><code class="sql plain">Col2 MAP&lt;STRING,</code><code class="sql keyword">INT</code><code class="sql plain">&gt;,</code></div>
<div class="line number3 index2 alt2"><code class="sql plain">Col3 STRUCT&lt;a:STRING,b :</code><code class="sql keyword">INT</code><code class="sql plain">,c:</code><code class="sql keyword">DOUBLE</code><code class="sql plain">&gt;);</code></div>
</div>
</td>
</tr></tbody></table></div>
</div>
</div>
<p>　　</p>
<p>查询语句：</p>
<div class="cnblogs_Highlighter">
<div>
<div id="highlighter_48586" class="syntaxhighlighter nogutter sql">
<div class="toolbar"><span><a href="#" rel="nofollow" class="toolbar_item command_help help">?</a></span></div>
<table cellspacing="0" cellpadding="0" border="0"><tbody><tr><td class="code">
<div>
<div class="line number1 index0 alt2"><code class="sql keyword">Select</code> <code class="sql plain">
col1[0],col2[‘b’],col3.c </code><code class="sql keyword">from</code> <code class="sql plain">
complex;</code></div>
</div>
</td>
</tr></tbody></table></div>
</div>
</div>
<p>　　</p>
<p>　　接下来我们来看看hive的数据模型，hive的数据模型包括：database、table、partition和bucket。下面我将一一论述这四种数据模型。</p>
<p>1.<strong>Database</strong>：相当于关系数据库里的命名空间（namespace），它的作用是将用户和数据库的应用隔离到不同的数据库或模式中，该模型在hive 0.6.0之后的版本支持，hive提供了create database dbname、use dbname以及drop database dbname这样的语句。</p>
<p>2.<strong>表（table）：</strong>hive的表逻辑上由存储的数据和描述表格中的数据形式的相关元数据组成。表存储的数据存放在分布式文件系统里，例如HDFS，元数据存储在关系数据库里，当我们创建一张hive的表，还没有为表加载数据的时候，该表在分布式文件系统，例如hdfs上就是一个文件夹（文件目录）。Hive里的表友两种类型一种叫托管表，这种表的数据文件存储在hive的数据仓库里，一种叫外部表，这种表的数据文件可以存放在hive数据仓库外部的分布式文件系统上，也可以放到hive数据仓库里（注意：hive的数据仓库也就是hdfs上的一个目录，这个目录是hive数据文件存储的默认路径，它可以在hive的配置文件里进行配置，最终也会存放到元数据库里）。</p>
<p>下面是创建托管表的实例语句：</p>
<p> </p>
<div class="cnblogs_Highlighter">
<div>
<div id="highlighter_224647" class="syntaxhighlighter nogutter sql">
<div class="toolbar"><span><a href="#" rel="nofollow" class="toolbar_item command_help help">?</a></span></div>
<table cellspacing="0" cellpadding="0" border="0"><tbody><tr><td class="code">
<div>
<div class="line number1 index0 alt2"><code class="sql keyword">Create</code> <code class="sql keyword">
table</code> <code class="sql plain">tuoguan_tbl (flied string);</code></div>
<div class="line number2 index1 alt1"><code class="sql keyword">Load</code> <code class="sql plain">
data </code><code class="sql keyword">local</code> <code class="sql plain">inpath ‘home/hadoop/test.txt’
</code><code class="sql keyword">into</code> <code class="sql keyword">table</code>
<code class="sql plain">tuoguan_tbl;</code></div>
</div>
</td>
</tr></tbody></table></div>
</div>
</div>
<p>　　</p>
<p>外部表创建的实例：</p>
<div class="cnblogs_Highlighter">
<div>
<div id="highlighter_228315" class="syntaxhighlighter nogutter sql">
<div class="toolbar"><span><a href="#" rel="nofollow" class="toolbar_item command_help help">?</a></span></div>
<table cellspacing="0" cellpadding="0" border="0"><tbody><tr><td class="code">
<div>
<div class="line number1 index0 alt2"><code class="sql keyword">Create</code> <code class="sql plain">
external </code><code class="sql keyword">table</code> <code class="sql plain">external_tbl (flied string)</code></div>
<div class="line number2 index1 alt1"><code class="sql spaces">    </code><code class="sql plain">Location  ‘/home/hadoop/external_table’;</code></div>
<div class="line number3 index2 alt2"><code class="sql keyword">Load</code> <code class="sql plain">
data </code><code class="sql keyword">local</code> <code class="sql plain">inpath ‘home/hadoop/test.txt’
</code><code class="sql keyword">into</code> <code class="sql keyword">table</code>
<code class="sql plain">external_tbl;</code></div>
</div>
</td>
</tr></tbody></table></div>
</div>
</div>
<p>　　</p>
<p>　　大家看到了创建外部表时候table之前要加关键字external，同时还要用location命令指定文件存储的路径，如果不使用locaction数据文件也会放置到hive的数据仓库里。</p>
<p>　　这两种表在使用的区别主drop命令上，drop是hive删除表的命令，托管表执行drop命令的时候，会删除元数据和存储的数据，而外部表执行drop命令时候只删除元数据库里的数据，而不会删除存储的数据。另外我还要谈谈表的load命令，hive加载数据时候不会对元数据进行任何检查，只是简单的移动文件的位置，如果源文件格式不正确，也只有在做查询操作时候才能发现，那个时候错误格式的字段会以NULL来显示。</p>
<p> 3.<strong>分区（partition）</strong>：hive里分区的概念是根据“分区列”的值对表的数据进行粗略划分的机制，在hive存储上就体现在表的主目录（hive的表实际显示就是一个文件夹）下的一个子目录，这个文件夹的名字就是我们定义的分区列的名字，没有实际操作经验的人可能会认为分区列是表的某个字段，其实不是这样，分区列不是表里的某个字段，而是独立的列，我们根据这个列存储表的里的数据文件。使用分区是为了加快数据分区的查询速度而设计的，我们在查询某个具体分区列里的数据时候没必要进行全表扫描。下面我就举一个分区使用的实例：</p>
<p>创建分区：</p>
<div class="cnblogs_Highlighter">
<div>
<div id="highlighter_317774" class="syntaxhighlighter nogutter sql">
<div class="toolbar"><span><a href="#" rel="nofollow" class="toolbar_item command_help help">?</a></span></div>
<table cellspacing="0" cellpadding="0" border="0"><tbody><tr><td class="code">
<div>
<div class="line number1 index0 alt2"><code class="sql keyword">Create</code> <code class="sql keyword">
table</code> <code class="sql plain">logs(ts </code><code class="sql keyword">bigint</code><code class="sql plain">,line string)</code></div>
<div class="line number2 index1 alt1"><code class="sql plain">Partitioned </code>
<code class="sql keyword">by</code> <code class="sql plain">(dt string,country string);</code></div>
</div>
</td>
</tr></tbody></table></div>
</div>
</div>
<p>　　</p>
<p> </p>
<p>加载数据：</p>
<div class="cnblogs_Highlighter">
<div>
<div id="highlighter_725678" class="syntaxhighlighter nogutter sql">
<div class="toolbar"><span><a href="#" rel="nofollow" class="toolbar_item command_help help">?</a></span></div>
<table cellspacing="0" cellpadding="0" border="0"><tbody><tr><td class="code">
<div>
<div class="line number1 index0 alt2"><code class="sql keyword">Local</code> <code class="sql plain">
data </code><code class="sql keyword">local</code> <code class="sql plain">inpath ‘/home/hadoop/par/file01.txt’
</code><code class="sql keyword">into</code> <code class="sql keyword">table</code>
<code class="sql plain">logs partition (dt=’2012-06-02’,country=’cn’);</code></div>
</div>
</td>
</tr></tbody></table></div>
</div>
</div>
<p>　　</p>
<p> </p>
<p>在hive数据仓库里实际存储的路径如下所示：</p>
<div class="cnblogs_Highlighter">
<div>
<div id="highlighter_500959" class="syntaxhighlighter nogutter sql">
<div class="toolbar"><span><a href="#" rel="nofollow" class="toolbar_item command_help help">?</a></span></div>
<table cellspacing="0" cellpadding="0" border="0"><tbody><tr><td class="code">
<div>
<div class="line number1 index0 alt2"><code class="sql plain">/</code><code class="sql color2">user</code><code class="sql plain">/hive/warehouse/logs/dt=2013-06-02/country=cn/file1.txt</code></div>
<div class="line number2 index1 alt1"><code class="sql plain">/</code><code class="sql color2">user</code><code class="sql plain">/hive/warehouse/logs/dt=2013-06-02/country=cn/file2.txt</code></div>
<div class="line number3 index2 alt2"><code class="sql plain">/</code><code class="sql color2">user</code><code class="sql plain">/hive/warehouse/logs/dt=2013-06-02/country=us/file3.txt</code></div>
<div class="line number4 index3 alt1"><code class="sql plain">/</code><code class="sql color2">user</code><code class="sql plain">/hive/warehouse/logs/dt=2013-06-02/country=us/file4.txt</code></div>
</div>
</td>
</tr></tbody></table></div>
</div>
</div>
<p>　　</p>
<p> </p>
<p>我们看到在表logs的目录下有了两层子目录dt=2013-06-02和country=cn</p>
<p>查询操作：</p>
<div class="cnblogs_Highlighter">
<div>
<div id="highlighter_643009" class="syntaxhighlighter nogutter sql">
<div class="toolbar"><span><a href="#" rel="nofollow" class="toolbar_item command_help help">?</a></span></div>
<table cellspacing="0" cellpadding="0" border="0"><tbody><tr><td class="code">
<div>
<div class="line number1 index0 alt2"><code class="sql keyword">Select</code> <code class="sql plain">
ts,dt,line  </code><code class="sql keyword">from</code> <code class="sql plain">
logs </code><code class="sql keyword">where</code> <code class="sql plain">country=’cn’,</code></div>
</div>
</td>
</tr></tbody></table></div>
</div>
</div>
<p>　　</p>
<p>这个时候我们的查询操作只会扫描file1.txt和file2.txt文件。</p>
<p>4.<strong>桶（bucket）：</strong>上面的table和partition都是目录级别的拆分数据，bucket则是对数据源数据文件本身来拆分数据。使用桶的表会将源数据文件按一定规律拆分成多个文件，要使用bucket，我们首先要打开hive对桶的控制，命令如下：</p>
<div class="cnblogs_Highlighter">
<div>
<div id="highlighter_401586" class="syntaxhighlighter nogutter sql">
<div class="toolbar"><span><a href="#" rel="nofollow" class="toolbar_item command_help help">?</a></span></div>
<table cellspacing="0" cellpadding="0" border="0"><tbody><tr><td class="code">
<div>
<div class="line number1 index0 alt2"><code class="sql keyword">set</code> <code class="sql plain">
hive.enforce.bucketing = </code><code class="sql keyword">true</code></div>
</div>
</td>
</tr></tbody></table></div>
</div>
</div>
<p>　　</p>
<p>下面这段文字是我引用博客园里风生水起的博文：</p>
<div class="cnblogs_Highlighter">
<div>
<div id="highlighter_661289" class="syntaxhighlighter nogutter sql">
<div class="toolbar"><span><a href="#" rel="nofollow" class="toolbar_item command_help help">?</a></span></div>
<table cellspacing="0" cellpadding="0" border="0"><tbody><tr><td class="code">
<div>
<div class="line number1 index0 alt2"><code class="sql plain">示例：</code></div>
<div class="line number2 index1 alt1"><code class="sql plain">建临时表student_tmp，并导入数据：</code></div>
<div class="line number3 index2 alt2"><code class="sql plain">hive&gt; </code><code class="sql keyword">desc</code>
<code class="sql plain">student_tmp;         </code></div>
<div class="line number4 index3 alt1"><code class="sql plain">OK</code></div>
<div class="line number5 index4 alt2"><code class="sql plain">id      </code><code class="sql keyword">int</code></div>
<div class="line number6 index5 alt1"><code class="sql plain">age     </code><code class="sql keyword">int</code></div>
<div class="line number7 index6 alt2"><code class="sql keyword">name</code>    <code class="sql plain">
string</code></div>
<div class="line number8 index7 alt1"><code class="sql plain">stat_date       string</code></div>
<div class="line number9 index8 alt2"><code class="sql keyword">Time</code> <code class="sql plain">
taken: 0.106 seconds</code></div>
<div class="line number10 index9 alt1"><code class="sql plain">hive&gt; </code><code class="sql keyword">select</code>
<code class="sql plain">* </code><code class="sql keyword">from</code> <code class="sql plain">
student_tmp;</code></div>
<div class="line number11 index10 alt2"><code class="sql plain">OK</code></div>
<div class="line number12 index11 alt1"><code class="sql plain">1       20      zxm     20120801</code></div>
<div class="line number13 index12 alt2"><code class="sql plain">2       21      ljz     20120801</code></div>
<div class="line number14 index13 alt1"><code class="sql plain">3       19      cds     20120801</code></div>
<div class="line number15 index14 alt2"><code class="sql plain">4       18      mac     20120801</code></div>
<div class="line number16 index15 alt1"><code class="sql plain">5       22      android 20120801</code></div>
<div class="line number17 index16 alt2"><code class="sql plain">6       23      symbian 20120801</code></div>
<div class="line number18 index17 alt1"><code class="sql plain">7       25      wp      20120801</code></div>
<div class="line number19 index18 alt2"><code class="sql keyword">Time</code> <code class="sql plain">
taken: 0.123 seconds</code></div>
<div class="line number20 index19 alt1"> </div>
<div class="line number21 index20 alt2"><code class="sql plain">建student表：</code></div>
<div class="line number22 index21 alt1"><code class="sql plain">hive&gt;</code><code class="sql keyword">create</code>
<code class="sql keyword">table</code> <code class="sql plain">student(id </code>
<code class="sql keyword">INT</code><code class="sql plain">, age </code><code class="sql keyword">INT</code><code class="sql plain">,
</code><code class="sql keyword">name</code> <code class="sql plain">STRING)</code></div>
<div class="line number23 index22 alt2"><code class="sql spaces">       </code><code class="sql plain">&gt;partitioned
</code><code class="sql keyword">by</code><code class="sql plain">(stat_date STRING)
</code></div>
<div class="line number24 index23 alt1"><code class="sql spaces">       </code><code class="sql plain">&gt;clustered
</code><code class="sql keyword">by</code><code class="sql plain">(id) sorted </code>
<code class="sql keyword">by</code><code class="sql plain">(age) </code><code class="sql keyword">into</code>
<code class="sql plain">2 bucket</code></div>
<div class="line number25 index24 alt2"><code class="sql spaces">       </code><code class="sql plain">&gt;row format delimited fields terminated
</code><code class="sql keyword">by</code> <code class="sql string">','</code><code class="sql plain">;</code></div>
<div class="line number26 index25 alt1"> </div>
<div class="line number27 index26 alt2"><code class="sql plain">设置环境变量：</code></div>
<div class="line number28 index27 alt1"><code class="sql spaces">       </code><code class="sql plain">&gt;</code><code class="sql keyword">set</code>
<code class="sql plain">hive.enforce.bucketing = </code><code class="sql keyword">true</code><code class="sql plain">;
</code></div>
<div class="line number29 index28 alt2"> </div>
<div class="line number30 index29 alt1"><code class="sql plain">插入数据：</code></div>
<div class="line number31 index30 alt2"> </div>
<div class="line number32 index31 alt1"><code class="sql spaces">       </code><code class="sql plain">&gt;</code><code class="sql keyword">from</code>
<code class="sql plain">student_tmp </code></div>
<div class="line number33 index32 alt2"><code class="sql spaces">       </code><code class="sql plain">&gt;</code><code class="sql keyword">insert</code>
<code class="sql plain">overwrite </code><code class="sql keyword">table</code> <code class="sql plain">
student partition(stat_date=</code><code class="sql string">"20120802"</code><code class="sql plain">)
</code></div>
<div class="line number34 index33 alt1"><code class="sql spaces">       </code><code class="sql plain">&gt;</code><code class="sql keyword">select</code>
<code class="sql plain">id,age,</code><code class="sql keyword">name</code> <code class="sql keyword">
where</code> <code class="sql plain">stat_date=</code><code class="sql string">"20120801"</code>
<code class="sql plain">sort </code><code class="sql keyword">by</code> <code class="sql plain">
age;</code></div>
<div class="line number35 index34 alt2"> </div>
<div class="line number36 index35 alt1"><code class="sql plain">查看文件目录：</code></div>
<div class="line number37 index36 alt2"><code class="sql plain">$ hadoop fs -ls /</code><code class="sql color2">user</code><code class="sql plain">/hive/warehouse/studentstat_date=20120802/</code></div>
<div class="line number38 index37 alt1"><code class="sql plain">Found 2 items</code></div>
<div class="line number39 index38 alt2"><code class="sql plain">-rw-r</code><code class="sql comments">--r--   1 work supergroup         31 2012-07-31 19:52 /user/hive/warehouse/student/stat_date=20120802/000000_0</code></div>
<div class="line number40 index39 alt1"><code class="sql plain">-rw-r</code><code class="sql comments">--r--   1 work supergroup         39 2012-07-31 19:52 /user/hive/warehouse/student/stat_date=20120802/000001_0</code></div>
</div>
</td>
</tr></tbody></table></div>
</div>
</div>
<p>　　</p>
<p>　　物理上，每个桶就是表（或分区）目录里的一个文件，桶文件是按指定字段值进行hash，然后除以桶的个数例如上面例子2，最后去结果余数，因为整数的hash值就是整数本身，上面例子里，字段hash后的值还是字段本身，所以2的余数只有两个0和1，所以我们看到产生文件的后缀是*0_0和*1_0,文件里存储对应计算出来的元数据。</p>
<p>　　Hive的桶，我个人认为没有特别的场景或者是特别的查询，我们可以没有必要使用，也就是不用开启hive的桶的配置。因为桶运用的场景有限，一个是做map连接的运算，我在后面的文章里会讲到，一个就是取样操作了，下面还是引用风生水起博文里的例子：</p>
<div class="cnblogs_Highlighter">
<div>
<div id="highlighter_886210" class="syntaxhighlighter nogutter sql">
<div class="toolbar"><span><a href="#" rel="nofollow" class="toolbar_item command_help help">?</a></span></div>
<table cellspacing="0" cellpadding="0" border="0"><tbody><tr><td class="code">
<div>
<div class="line number1 index0 alt2"><code class="sql plain">查看sampling数据：</code></div>
<div class="line number2 index1 alt1"><code class="sql plain">hive&gt; </code><code class="sql keyword">select</code>
<code class="sql plain">* </code><code class="sql keyword">from</code> <code class="sql plain">
student tablesample(bucket 1 </code><code class="sql keyword">out</code> <code class="sql keyword">
of</code> <code class="sql plain">2 </code><code class="sql keyword">on</code> <code class="sql plain">
id);                                                                              
</code></div>
<div class="line number3 index2 alt2"><code class="sql plain">Total MapReduce jobs = 1</code></div>
<div class="line number4 index3 alt1"><code class="sql plain">Launching Job 1 </code>
<code class="sql keyword">out</code> <code class="sql keyword">of</code> <code class="sql plain">
1</code></div>
<div class="line number5 index4 alt2"><code class="sql plain">.......</code></div>
<div class="line number6 index5 alt1"><code class="sql plain">OK</code></div>
<div class="line number7 index6 alt2"><code class="sql plain">4       18      mac     20120802</code></div>
<div class="line number8 index7 alt1"><code class="sql plain">2       21      ljz     20120802</code></div>
<div class="line number9 index8 alt2"><code class="sql plain">6       23      symbian 20120802</code></div>
<div class="line number10 index9 alt1"><code class="sql keyword">Time</code> <code class="sql plain">
taken: 20.608 seconds</code></div>
<div class="line number11 index10 alt2"> </div>
<div class="line number12 index11 alt1"><code class="sql plain">tablesample是抽样语句，语法：TABLESAMPLE(BUCKET x
</code><code class="sql keyword">OUT</code> <code class="sql keyword">OF</code> <code class="sql plain">
y)</code></div>
<div class="line number13 index12 alt2"><code class="sql plain">y必须是</code><code class="sql keyword">table</code><code class="sql plain">总bucket数的倍数或者因子。hive根据y的大小，决定抽样的比例。例如，</code><code class="sql keyword">table</code><code class="sql plain">总共分了64份，当y=32时，抽取
 (64/32=)2个bucket的数据，当y=128时，抽取(64/128=)1/2个bucket的数据。x表示从哪个bucket开始抽取。例 如，</code><code class="sql keyword">table</code><code class="sql plain">总bucket数为32，tablesample(bucket 3
</code><code class="sql keyword">out</code> <code class="sql keyword">of</code> <code class="sql plain">
16)，表示总共抽取（32/16=）2个bucket的数据，分别为第3个bucket和第（3+16=）19个bucket的数据。</code></div>
</div>
</td>
</tr></tbody></table></div>
</div>
</div>
<p>　　</p>
<p>　　好了，今天就写到这里了，明天要上班不能在加班写文章了。这篇博文的内容并没有写完（hive存储格式没有写），因为这个章节的知识非常重要是理解hive的关键，所以要讲的细点，明天我争取写完hive存储格式的文章，后天也就是本周二，我将为我们技术部门介绍hive的相关技术，写博文算是我的预演了。</p>
<p>　　最后我要讲一下自己对大数据技术的看法，我觉得大数据技术是一个跨时代的技术，是互联网技术的未来，也是云计算的未来，它的深入发展不仅仅是数据处理上，也会改变整个互联网技术的生态链，包括我们使用的技术和开发语言，很庆幸亲身经历着整个伟大时代的变革，我也要展开双臂迎接这个大时代的到来。</p>
            </div>
                </div>