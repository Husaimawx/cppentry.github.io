---
layout:     post
title:      Flume安装及简单使用
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/zhangfengBX/article/details/78880143				</div>
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<h3 id="flume的安装">FLume的安装</h3>

<p>下载地址 <a href="http://flume.apache.org/" rel="nofollow" target="_blank">http://flume.apache.org/</a></p>

<p>安装 <br>
1、上传 <br>
2、解压 <br>
3、修改conf/flume-env.sh  文件中的JDK目录（设置为自己的jdk安装目录） <br>
 注意：JAVA_OPTS 配置  如果我们传输文件过大 报内存溢出时 需要修改这个配置项 <br>
4、验证安装是否成功  ./flume-ng version <br>
5、配置环境变量（我安装在opt下面，并且重命名为flume-1.6.0） <br>
    export FLUME_HOME=/opt/flume-1.6.0/bin <br>
export PATH=<span class="MathJax_Preview"></span><span class="MathJax" id="MathJax-Element-27-Frame" role="textbox" aria-readonly="true"><nobr><span class="math" id="MathJax-Span-153" style="width: 4.501em; display: inline-block;"><span style="display: inline-block; position: relative; width: 3.634em; height: 0px; font-size: 123%;"><span style="position: absolute; clip: rect(1.412em 1000em 2.442em -0.431em); top: -2.274em; left: 0.003em;"><span class="mrow" id="MathJax-Span-154"><span class="mi" id="MathJax-Span-155" style="font-family: MathJax_Math-italic;">P<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.111em;"></span></span><span class="mi" id="MathJax-Span-156" style="font-family: MathJax_Math-italic;">A</span><span class="mi" id="MathJax-Span-157" style="font-family: MathJax_Math-italic;">T<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.111em;"></span></span><span class="mi" id="MathJax-Span-158" style="font-family: MathJax_Math-italic;">H<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.057em;"></span></span><span class="mo" id="MathJax-Span-159" style="font-family: MathJax_Main; padding-left: 0.274em;">:</span></span><span style="display: inline-block; width: 0px; height: 2.279em;"></span></span></span><span style="border-left: 0.003em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.003em; vertical-align: -0.063em;"></span></span></nobr></span><script type="math/tex" id="MathJax-Element-27">PATH:</script>FLUME_HOME//bin <br>
6、source .bash_profile</p>

<hr>



<h3 id="flume的概念">Flume的概念</h3>

<p><img src="https://img-blog.csdn.net/20171223151758465?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemhhbmdmZW5nQlg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title=""> <br>
flume是分布式的日志收集系统，它将各个服务器中的数据收集起来并送到指定的地方去，比如说送到图中的HDFS，简单来说flume就是收集日志的。 </p>

<h3 id="event的概念">Event的概念</h3>

<p>在这里有必要先介绍一下flume中event的相关概念：flume的核心是把数据从数据源(source)收集过来，在将收集到的数据送到指定的目的地(sink)。为了保证输送的过程一定成功，在送到目的地(sink)之前，会先缓存数据(channel),待数据真正到达目的地(sink)后，flume在删除自己缓存的数据。  <br>
在整个数据的传输的过程中，流动的是event，即事务保证是在event级别进行的。那么什么是event呢？—–event将传输的数据进行封装，是flume传输数据的基本单位，如果是文本文件，通常是一行记录，event也是事务的基本单位。event从source，流向channel，再到sink，本身为一个字节数组，并可携带headers(头信息)信息。event代表着一个数据的最小完整单元，从外部数据源来，向外部的目的地去。  <br>
为了方便大家理解，给出一张event的数据流向图：  <br>
<img src="https://img-blog.csdn.net/20171223151932370?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemhhbmdmZW5nQlg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title=""></p>

<p>一个完整的event包括：event headers、event body、event信息(即文本文件中的单行记录)，如下所以： </p>

<p><img src="https://img-blog.csdn.net/20171223152013624?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemhhbmdmZW5nQlg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title=""> <br>
其中event信息就是flume收集到的日记记录。 </p>

<h4 id="sourcechannelsink有哪些类型"><strong>Source、Channel、Sink有哪些类型</strong></h4>

<pre><code>Flume Source
Source类型                  | 说明
Avro Source                 | 支持Avro协议（实际上是Avro RPC），内置支持
Thrift Source             | 支持Thrift协议，内置支持
Exec Source                 | 基于Unix的command在标准输出上生产数据
JMS Source                | 从JMS系统（消息、主题）中读取数据
Spooling Directory Source | 监控指定目录内数据变更
Twitter 1% firehose Source| 通过API持续下载Twitter数据，试验性质
Netcat Source             | 监控某个端口，将流经端口的每一个文本行数据作为Event输入
Sequence Generator Source | 序列生成器数据源，生产序列数据
Syslog Sources            | 读取syslog数据，产生Event，支持UDP和TCP两种协议
HTTP Source                 | 基于HTTP POST或GET方式的数据源，支持JSON、BLOB表示形式
Legacy Sources            | 兼容老的Flume OG中Source（0.9.x版本）

Flume Channel
Channel类型     说明
Memory Channel             | Event数据存储在内存中
JDBC Channel               | Event数据存储在持久化存储中，当前Flume Channel内置支持Derby
File Channel               | Event数据存储在磁盘文件中
Spillable Memory Channel   | Event数据存储在内存中和磁盘上，当内存队列满了，会持久化到磁盘文件
Pseudo Transaction Channel | 测试用途
Custom Channel             | 自定义Channel实现

Flume Sink
Sink类型  说明
HDFS Sink           | 数据写入HDFS
Logger Sink           | 数据写入日志文件
Avro Sink           | 数据被转换成Avro Event，然后发送到配置的RPC端口上
Thrift Sink           | 数据被转换成Thrift Event，然后发送到配置的RPC端口上
IRC Sink              | 数据在IRC上进行回放
File Roll Sink      | 存储数据到本地文件系统
Null Sink           | 丢弃到所有数据
HBase Sink          | 数据写入HBase数据库
Morphline Solr Sink | 数据发送到Solr搜索服务器（集群）
ElasticSearch Sink  | 数据发送到Elastic Search搜索服务器（集群）
Kite Dataset Sink   | 写数据到Kite Dataset，试验性质的
Custom Sink           | 自定义Sink实现
</code></pre>

<hr>

<p><strong>案例1：simple example</strong> <br>
随便在一个目录下面创建一个文件（我的是在conf目录下，创建一个叫simple1的文件） <br>
vi simple1 <br>
配置文件内容</p>

<pre class="prettyprint"><code class=" hljs avrasm"><span class="hljs-preprocessor">############################################################</span>
<span class="hljs-preprocessor"># Name the components on this agent，给三个参数定义别名</span>
a1<span class="hljs-preprocessor">.sources</span> = <span class="hljs-built_in">r1</span>        接受数据
a1<span class="hljs-preprocessor">.sinks</span> = k1       临时存储
a1<span class="hljs-preprocessor">.channels</span> = c1    数据输出

<span class="hljs-preprocessor"># Describe/configure the source</span>
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.r</span>1<span class="hljs-preprocessor">.type</span> = netcat     指定sources的数据类型
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.r</span>1<span class="hljs-preprocessor">.bind</span> = CentOS8    绑定访问节点
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.r</span>1<span class="hljs-preprocessor">.port</span> = <span class="hljs-number">44444</span>      绑定端口

<span class="hljs-preprocessor"># Describe the sink</span>
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.k</span>1<span class="hljs-preprocessor">.type</span> = logger           指定输出时的类型

<span class="hljs-preprocessor"># Use a channel which buffers events in memory</span>
a1<span class="hljs-preprocessor">.channels</span><span class="hljs-preprocessor">.c</span>1<span class="hljs-preprocessor">.type</span> = memory            channels窗口的配置
a1<span class="hljs-preprocessor">.channels</span><span class="hljs-preprocessor">.c</span>1<span class="hljs-preprocessor">.capacity</span> = <span class="hljs-number">1000</span>          最多存<span class="hljs-number">1000</span>条数据
a1<span class="hljs-preprocessor">.channels</span><span class="hljs-preprocessor">.c</span>1<span class="hljs-preprocessor">.transactionCapacity</span> = <span class="hljs-number">100</span>    一次取<span class="hljs-number">100</span>条数据

<span class="hljs-preprocessor"># Bind the source and sink to the channel</span>
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.r</span>1<span class="hljs-preprocessor">.channels</span> = c1     sources的数据存放位置，把sources和channels绑定
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.k</span>1<span class="hljs-preprocessor">.channel</span> = c1        sinks的数据读取位置，把sink和channels绑定
<span class="hljs-preprocessor">############################################################</span></code></pre>

<p><strong>在bin目录下面启动flume</strong> <br>
./flume-ng agent -n a1 -c conf -f ../conf/simple1 -Dflume.root.logger=INFO,console    </p>

<p><strong>安装telnet</strong> <br>
yum install telnet   （退出 ctrl+]  quit） <br>
访问telnet CentOS8 44444    (如果没有配置访问节点，则默认为127.0.0.1) <br>
然后打印数据，将会显示在Flume启动的界面上面</p>

<p><strong>Memory Chanel 配置</strong> <br>
  capacity：默认该通道中最大的可以存储的event数量是100， <br>
  trasactionCapacity：每次最大可以source中拿到或者送到sink中的event数量也是100 <br>
  keep-alive：event添加到通道中或者移出的允许时间 <br>
  byte**：即event的字节量的限制，只包括eventbody</p>

<hr>

<p><strong>案例2、两个Flume做集群（CentOS8接收数据，输出到CentOS9）</strong> <br>
CentOS8服务器中，配置文件</p>

<pre class="prettyprint"><code class=" hljs avrasm"><span class="hljs-preprocessor">############################################################</span>
<span class="hljs-preprocessor"># Name the components on this agent</span>
a1<span class="hljs-preprocessor">.sources</span> = <span class="hljs-built_in">r1</span>
a1<span class="hljs-preprocessor">.sinks</span> = k1
a1<span class="hljs-preprocessor">.channels</span> = c1

<span class="hljs-preprocessor"># Describe/configure the source</span>
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.r</span>1<span class="hljs-preprocessor">.type</span> = netcat
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.r</span>1<span class="hljs-preprocessor">.bind</span> = CentOS8
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.r</span>1<span class="hljs-preprocessor">.port</span> = <span class="hljs-number">44444</span>

<span class="hljs-preprocessor"># Describe the sink</span>
<span class="hljs-preprocessor"># a1.sinks.k1.type = logger</span>
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.k</span>1<span class="hljs-preprocessor">.type</span> = avro
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.k</span>1<span class="hljs-preprocessor">.hostname</span> = CentOS9
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.k</span>1<span class="hljs-preprocessor">.port</span> = <span class="hljs-number">60000</span>

<span class="hljs-preprocessor"># Use a channel which buffers events in memory</span>
a1<span class="hljs-preprocessor">.channels</span><span class="hljs-preprocessor">.c</span>1<span class="hljs-preprocessor">.type</span> = memory
a1<span class="hljs-preprocessor">.channels</span><span class="hljs-preprocessor">.c</span>1<span class="hljs-preprocessor">.capacity</span> = <span class="hljs-number">1000</span>
a1<span class="hljs-preprocessor">.channels</span><span class="hljs-preprocessor">.c</span>1<span class="hljs-preprocessor">.transactionCapacity</span> = <span class="hljs-number">100</span>

<span class="hljs-preprocessor"># Bind the source and sink to the channel</span>
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.r</span>1<span class="hljs-preprocessor">.channels</span> = c1
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.k</span>1<span class="hljs-preprocessor">.channel</span> = c1
<span class="hljs-preprocessor">############################################################</span></code></pre>

<p>CentOS9服务器中，安装Flume（步骤略） <br>
配置文件</p>



<pre class="prettyprint"><code class=" hljs avrasm"><span class="hljs-preprocessor">############################################################</span>
<span class="hljs-preprocessor"># Name the components on this agent</span>
a1<span class="hljs-preprocessor">.sources</span> = <span class="hljs-built_in">r1</span>
a1<span class="hljs-preprocessor">.sinks</span> = k1
a1<span class="hljs-preprocessor">.channels</span> = c1

<span class="hljs-preprocessor"># Describe/configure the source</span>
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.r</span>1<span class="hljs-preprocessor">.type</span> = avro
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.r</span>1<span class="hljs-preprocessor">.bind</span> = CentOS9
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.r</span>1<span class="hljs-preprocessor">.port</span> = <span class="hljs-number">60000</span>

<span class="hljs-preprocessor"># Describe the sink</span>
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.k</span>1<span class="hljs-preprocessor">.type</span> = logger

<span class="hljs-preprocessor"># Use a channel which buffers events in memory</span>
a1<span class="hljs-preprocessor">.channels</span><span class="hljs-preprocessor">.c</span>1<span class="hljs-preprocessor">.type</span> = memory
a1<span class="hljs-preprocessor">.channels</span><span class="hljs-preprocessor">.c</span>1<span class="hljs-preprocessor">.capacity</span> = <span class="hljs-number">1000</span>
a1<span class="hljs-preprocessor">.channels</span><span class="hljs-preprocessor">.c</span>1<span class="hljs-preprocessor">.transactionCapacity</span> = <span class="hljs-number">100</span>

<span class="hljs-preprocessor"># Bind the source and sink to the channel</span>
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.r</span>1<span class="hljs-preprocessor">.channels</span> = c1
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.k</span>1<span class="hljs-preprocessor">.channel</span> = c1
<span class="hljs-preprocessor">############################################################</span></code></pre>

<p>先启动CentOS9的Flume <br>
flume-ng agent  -n a1 -c conf -f ../conf/fimple1 -Dflume.root.logger=INFO,console</p>

<p>再启动CentOS8的Flume <br>
flume-ng agent  -n a1 -c conf -f ../conf/simple2 -Dflume.root.logger=INFO,console</p>

<p>打开telnet 测试  node02控制台输出结果 <br>
telnet CentOS8 44444 </p>

<hr>

<p><strong>案例3、Exec Source</strong> <br>
        <a href="http://flume.apache.org/FlumeUserGuide.html#exec-source" rel="nofollow">http://flume.apache.org/FlumeUserGuide.html#exec-source</a></p>

<pre><code>配置文件
</code></pre>

<pre class="prettyprint"><code class=" hljs avrasm"><span class="hljs-preprocessor">############################################################</span>
a1<span class="hljs-preprocessor">.sources</span> = <span class="hljs-built_in">r1</span>
a1<span class="hljs-preprocessor">.sinks</span> = k1
a1<span class="hljs-preprocessor">.channels</span> = c1

<span class="hljs-preprocessor"># Describe/configure the source</span>
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.r</span>1<span class="hljs-preprocessor">.type</span> = exec
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.r</span>1<span class="hljs-preprocessor">.command</span> = tail -F /home/flume<span class="hljs-preprocessor">.exec</span><span class="hljs-preprocessor">.log</span>

<span class="hljs-preprocessor"># Describe the sink</span>
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.k</span>1<span class="hljs-preprocessor">.type</span> = logger

<span class="hljs-preprocessor"># Use a channel which buffers events in memory</span>
a1<span class="hljs-preprocessor">.channels</span><span class="hljs-preprocessor">.c</span>1<span class="hljs-preprocessor">.type</span> = memory
a1<span class="hljs-preprocessor">.channels</span><span class="hljs-preprocessor">.c</span>1<span class="hljs-preprocessor">.capacity</span> = <span class="hljs-number">1000</span>
a1<span class="hljs-preprocessor">.channels</span><span class="hljs-preprocessor">.c</span>1<span class="hljs-preprocessor">.transactionCapacity</span> = <span class="hljs-number">100</span>

<span class="hljs-preprocessor"># Bind the source and sink to the channel</span>
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.r</span>1<span class="hljs-preprocessor">.channels</span> = c1
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.k</span>1<span class="hljs-preprocessor">.channel</span> = c1
<span class="hljs-preprocessor">############################################################</span></code></pre>

<pre><code>启动Flume
flume-ng agent -n a1 -c conf -f exec.conf -Dflume.root.logger=INFO,console

创建空文件演示 touch flume.exec.log
循环添加数据
for i in {1..50}; do echo "$i hi flume" &gt;&gt; flume.exec.log ; sleep 0.1; done
</code></pre>

<hr>

<p><strong>案例4、Spooling Directory Source</strong> <br>
        <a href="http://flume.apache.org/FlumeUserGuide.html#spooling-directory-source" rel="nofollow" target="_blank">http://flume.apache.org/FlumeUserGuide.html#spooling-directory-source</a> <br>
    配置文件</p>



<pre class="prettyprint"><code class=" hljs avrasm"><span class="hljs-preprocessor">############################################################</span>
a1<span class="hljs-preprocessor">.sources</span> = <span class="hljs-built_in">r1</span>
a1<span class="hljs-preprocessor">.sinks</span> = k1
a1<span class="hljs-preprocessor">.channels</span> = c1

<span class="hljs-preprocessor"># Describe/configure the source</span>
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.r</span>1<span class="hljs-preprocessor">.type</span> = spooldir
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.r</span>1<span class="hljs-preprocessor">.spoolDir</span> = /home/logs
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.r</span>1<span class="hljs-preprocessor">.fileHeader</span> = true

<span class="hljs-preprocessor"># Describe the sink</span>
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.k</span>1<span class="hljs-preprocessor">.type</span> = logger

<span class="hljs-preprocessor"># Use a channel which buffers events in memory</span>
a1<span class="hljs-preprocessor">.channels</span><span class="hljs-preprocessor">.c</span>1<span class="hljs-preprocessor">.type</span> = memory
a1<span class="hljs-preprocessor">.channels</span><span class="hljs-preprocessor">.c</span>1<span class="hljs-preprocessor">.capacity</span> = <span class="hljs-number">1000</span>
a1<span class="hljs-preprocessor">.channels</span><span class="hljs-preprocessor">.c</span>1<span class="hljs-preprocessor">.transactionCapacity</span> = <span class="hljs-number">100</span>

<span class="hljs-preprocessor"># Bind the source and sink to the channel</span>
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.r</span>1<span class="hljs-preprocessor">.channels</span> = c1
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.k</span>1<span class="hljs-preprocessor">.channel</span> = c1
<span class="hljs-preprocessor">############################################################</span></code></pre>

<pre><code>启动Flume
flume-ng agent -n a1 -c conf -f spool.conf -Dflume.root.logger=INFO,console

拷贝文件演示
mkdir logs
cp flume.exec.log logs/
</code></pre>

<hr>

<p><strong>案例5、hdfs sink</strong> <br>
        <a href="http://flume.apache.org/FlumeUserGuide.html#hdfs-sink" rel="nofollow" target="_blank">http://flume.apache.org/FlumeUserGuide.html#hdfs-sink</a></p>

<pre><code>    配置文件
</code></pre>



<pre class="prettyprint"><code class=" hljs avrasm"><span class="hljs-preprocessor">############################################################</span>
a1<span class="hljs-preprocessor">.sources</span> = <span class="hljs-built_in">r1</span>
a1<span class="hljs-preprocessor">.sinks</span> = k1
a1<span class="hljs-preprocessor">.channels</span> = c1

<span class="hljs-preprocessor"># Describe/configure the source</span>
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.r</span>1<span class="hljs-preprocessor">.type</span> = spooldir
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.r</span>1<span class="hljs-preprocessor">.spoolDir</span> = /home/logs
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.r</span>1<span class="hljs-preprocessor">.fileHeader</span> = true

<span class="hljs-preprocessor"># Describe the sink</span>
***只修改上一个spool sink的配置代码块 a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.k</span>1<span class="hljs-preprocessor">.type</span> = logger
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.k</span>1<span class="hljs-preprocessor">.type</span>=hdfs
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.k</span>1<span class="hljs-preprocessor">.hdfs</span><span class="hljs-preprocessor">.path</span>=hdfs://bx/flume/%<span class="hljs-built_in">Y</span>-%m-%d/%H%M

<span class="hljs-preprocessor">##每隔60s或者文件大小超过10M的时候产生新文件</span>
<span class="hljs-preprocessor"># hdfs有多少条消息时新建文件，0不基于消息个数</span>
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.k</span>1<span class="hljs-preprocessor">.hdfs</span><span class="hljs-preprocessor">.rollCount</span>=<span class="hljs-number">0</span>
<span class="hljs-preprocessor"># hdfs创建多长时间新建文件，0不基于时间</span>
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.k</span>1<span class="hljs-preprocessor">.hdfs</span><span class="hljs-preprocessor">.rollInterval</span>=<span class="hljs-number">60</span>
<span class="hljs-preprocessor"># hdfs多大时新建文件，0不基于文件大小</span>
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.k</span>1<span class="hljs-preprocessor">.hdfs</span><span class="hljs-preprocessor">.rollSize</span>=<span class="hljs-number">10240</span>
<span class="hljs-preprocessor"># 当目前被打开的临时文件在该参数指定的时间（秒）内，没有任何数据写入，则将该临时文件关闭并重命名成目标文件</span>
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.k</span>1<span class="hljs-preprocessor">.hdfs</span><span class="hljs-preprocessor">.idleTimeout</span>=<span class="hljs-number">3</span>

a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.k</span>1<span class="hljs-preprocessor">.hdfs</span><span class="hljs-preprocessor">.fileType</span>=DataStream
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.k</span>1<span class="hljs-preprocessor">.hdfs</span><span class="hljs-preprocessor">.useLocalTimeStamp</span>=true

<span class="hljs-preprocessor">## 每五分钟生成一个目录:</span>
<span class="hljs-preprocessor"># 是否启用时间上的”舍弃”，这里的”舍弃”，类似于”四舍五入”，后面再介绍。如果启用，则会影响除了%t的其他所有时间表达式</span>
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.k</span>1<span class="hljs-preprocessor">.hdfs</span><span class="hljs-preprocessor">.round</span>=true
<span class="hljs-preprocessor"># 时间上进行“舍弃”的值；</span>
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.k</span>1<span class="hljs-preprocessor">.hdfs</span><span class="hljs-preprocessor">.roundValue</span>=<span class="hljs-number">5</span>
<span class="hljs-preprocessor"># 时间上进行”舍弃”的单位，包含：second,minute,hour</span>
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.k</span>1<span class="hljs-preprocessor">.hdfs</span><span class="hljs-preprocessor">.roundUnit</span>=minute

<span class="hljs-preprocessor"># Use a channel which buffers events in memory</span>
a1<span class="hljs-preprocessor">.channels</span><span class="hljs-preprocessor">.c</span>1<span class="hljs-preprocessor">.type</span> = memory
a1<span class="hljs-preprocessor">.channels</span><span class="hljs-preprocessor">.c</span>1<span class="hljs-preprocessor">.capacity</span> = <span class="hljs-number">1000</span>
a1<span class="hljs-preprocessor">.channels</span><span class="hljs-preprocessor">.c</span>1<span class="hljs-preprocessor">.transactionCapacity</span> = <span class="hljs-number">100</span>

<span class="hljs-preprocessor"># Bind the source and sink to the channel</span>
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.r</span>1<span class="hljs-preprocessor">.channels</span> = c1
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.k</span>1<span class="hljs-preprocessor">.channel</span> = c1
<span class="hljs-preprocessor">############################################################</span></code></pre>

<p>创建HDFS目录 <br>
hadoop fs -mkdir /flume</p>

<p>启动Flume <br>
flume-ng agent -n a1 -c conf -f hdfs.conf -Dflume.root.logger=INFO,console</p>

<p>在/home/logs目录下面进行操作 <br>
vi /home/logs/test01   保存退出，则会自动生成一个文件</p>

<p>查看hdfs文件 <br>
hadoop fs -ls /flume/… <br>
hadoop fs -get /flume/…</p>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>