---
layout:     post
title:      Hive基本理论概述
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <div id="content_views" class="markdown_views prism-atom-one-light">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<p></p><div class="toc"><h3>文章目录</h3><ul><ul><ul><ul><li><a href="#Hive_1" rel="nofollow">Hive初识</a></li><ul><li><a href="#Hive_21" rel="nofollow">Hive原理</a></li><ul><li><a href="#_25" rel="nofollow">效率问题</a></li></ul><li><a href="#Hive_27" rel="nofollow">Hive做了什么事情</a></li></ul><li><a href="#Hive_30" rel="nofollow">Hive架构</a></li><ul><li><a href="#SQLHive_45" rel="nofollow">将SQL语句给Hive，它会做哪些过程</a></li></ul><li><a href="#Hive_48" rel="nofollow">Hive搭建模式</a></li><ul><li><a href="#localderby_50" rel="nofollow">local本地：元数据库(derby)与工具都是在本地</a></li><ul><li><a href="#_57" rel="nofollow">缺点</a></li></ul><li><a href="#localmysqlhivemysql_61" rel="nofollow">local(mysql)模式：hive工具与mysql在同一个节点上</a></li><li><a href="#mysql_63" rel="nofollow">基于mysql的远程模式</a></li></ul><li><a href="#Hive_70" rel="nofollow">Hive中表的类型</a></li><ul><li><a href="#HiveHDFS_71" rel="nofollow">内部表（受控表）：受Hive控制。删除内部表的时候，HDFS上的数据及元数据都会被删除。</a></li><li><a href="#HDFS_72" rel="nofollow">外部表：删除外部表的时候，HDFS上的数据不会被删除但是元数据会被删除。</a></li><li><a href="#session_73" rel="nofollow">临时表（测试）：在当前会话期间内存在，会话结束自动消失。生命周期随着session</a></li><li><a href="#_74" rel="nofollow">分区表：将一批数据分成多个目录来存储</a></li><ul><li><a href="#_75" rel="nofollow">为什么创建分区表？</a></li><li><a href="#_77" rel="nofollow">往分区中添加数据有四种方式：</a></li></ul><li><a href="#_84" rel="nofollow">分桶表：取模存储</a></li><ul><li><a href="#_85" rel="nofollow">为什么创建分桶表？</a></li></ul></ul></ul></ul></ul></ul></div><p></p>
<h4><a id="Hive_1"></a>Hive初识</h4>
<p><img src="https://img-blog.csdnimg.cn/2018102814133488.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FuZHJlYV9udWxs,size_27,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
Hive是一种构建数据仓库的工具。里面有表的概念。<br>
在Mysql里从表中插入的数据，会放在磁盘上。再打开这个表的时候，会把磁盘上的数据规整到一个表格里显示。</p>
<p>但是计算机不会自己规整成表格，所以在Hive中需要一份元数据</p>
<p>这份元数据包括：</p>
<blockquote>
<p>元数据（<br>
行的分隔符（这样在映射成表的时候知道能映射成几行）<br>
字段分隔符（这样在映射成表的时候知道能映射成几列）<br>
字段的类型<br>
字段的名称<br>
）</p>
</blockquote>
<p>Hive内部也是有表的概念，Hive把数据存储到HDFS上。<br>
它的元数据存到了本地的轻量级的Derby数据库中。</p>
<p>Hive依赖于HDFS和MapReduce，可以看成是分布式的大表。也是支持使用SQL语句进行数据的处理。</p>
<h5><a id="Hive_21"></a>Hive原理</h5>
<p>1.客户端传一条SQL语句给Hive（Hive支持所有的SQL标准）<br>
2.Hive对SQL进行解析，优化SQL，策略选择器，消耗模型（看下哪种计划是最好的，看下消耗时间），把一个个的SQL解析成一个个MapReduce。（解析器，编译器，优化器）<br>
3.MR计算的数据在HDFS上。MR处理HDFS上的数据。</p>
<h6><a id="_25"></a>效率问题</h6>
<p>封装的越高层，效率越低</p>
<h5><a id="Hive_27"></a>Hive做了什么事情</h5>
<p>通过SQL语句解析成MapReduce这个过程是Hive做的。<br>
其它的事情是它指挥别人来做的。</p>
<h4><a id="Hive_30"></a>Hive架构</h4>
<p><img src="https://img-blog.csdnimg.cn/20181028151650159.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FuZHJlYV9udWxs,size_27,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<strong>Hive提供了一个服务叫做thrift server[干嘛用的：方便用户通过JDK操作Hive]</strong><br>
1.客户端可以写JDBC程序，先连thrift server。<br>
Hive工具里有：解析器，优化器，编译器等等。<br>
2.thrift server连接Hive工具。然后把客户端里写的SQL语句传给Hive。<br>
3.Hive解析完了以后，就会产生一个个MapReduce应用程序。这些节点既是DataNode，也是NodeManager。</p>
<p><strong>我们也可以通过其它客户端，利用Hive提供的CLI工具直接连接Hive。</strong><br>
在Hive脚本直接执行hive命令，会进入一个命令提示符hive&gt;。<br>
在里面可以直接书写hive语句，回车以后后台会直接运行，之后把结果提示出来。</p>
<p><strong>Hive也提供了另一个工具，叫做WEB GUI，通过Web界面操作Hive(兼容性不是那么好)</strong><br>
可以在UI界面上写SQL语句，点击页面的某个按钮提交给Hive工具<br>
Hive工具解析成MapReduce</p>
<h5><a id="SQLHive_45"></a>将SQL语句给Hive，它会做哪些过程</h5>
<p>在Hive里面写SQL语句。那语句叫做HQL<br>
<img src="https://img-blog.csdnimg.cn/20181028151823418.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FuZHJlYV9udWxs,size_27,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4><a id="Hive_48"></a>Hive搭建模式</h4>
<p>搭建HiveT具的模式分为三种：</p>
<h5><a id="localderby_50"></a>local本地：元数据库(derby)与工具都是在本地</h5>
<p>1、配置完成后在Hive中创建一张表<br>
create table Andrea1(id Int,name String)<br>
2、往表中插入数据<br>
insert into Andrea1 values(1,“zs”);启动MR任务<br>
3、select * from Andrea1;不会启动MR，直接去HDFS上读取就行<br>
如果SQL语句中有where,count,sum等聚合类的函数，会启动一个MR任务。</p>
<h6><a id="_57"></a>缺点</h6>
<p><img src="https://img-blog.csdnimg.cn/20181028153326274.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FuZHJlYV9udWxs,size_27,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
不允许多个用户同时操作hive，是由于derby的缺陷导致。<br>
另外一个用户已经创建这个数据库了，你不可以再用了。</p>
<h5><a id="localmysqlhivemysql_61"></a>local(mysql)模式：hive工具与mysql在同一个节点上</h5>
<p>这样元数据库使用mysql来替换。</p>
<h5><a id="mysql_63"></a>基于mysql的远程模式</h5>
<p><img src="https://img-blog.csdnimg.cn/2018102815435174.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FuZHJlYV9udWxs,size_27,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
我们在客户端上搭建了一个Hive工具，这个工具可以直接拿来就用不用启动。在客户端上配置了一个mysql数据库。好处：解耦<br>
这个Hive工具提供了一个服务叫做meta store service（提供了元数据的存储服务）。<br>
如何开启这个服务？hive --service metastore<br>
这个服务，作为一个永驻的进程。<br>
假设node01上也有一个Hive安装包。在hive-site.xml中配置了连接client的元数据服务。这样如果有node02，操作的可以是同一个数据库。因为连接的是同一个meta store服务。支持数据共享。</p>
<h4><a id="Hive_70"></a>Hive中表的类型</h4>
<h5><a id="HiveHDFS_71"></a>内部表（受控表）：受Hive控制。删除内部表的时候，HDFS上的数据及元数据都会被删除。</h5>
<h5><a id="HDFS_72"></a>外部表：删除外部表的时候，HDFS上的数据不会被删除但是元数据会被删除。</h5>
<h5><a id="session_73"></a>临时表（测试）：在当前会话期间内存在，会话结束自动消失。生命周期随着session</h5>
<h5><a id="_74"></a>分区表：将一批数据分成多个目录来存储</h5>
<h6><a id="_75"></a>为什么创建分区表？</h6>
<p>防止暴力扫描全表，需要一个分区表来提高查询效率</p>
<h6><a id="_77"></a>往分区中添加数据有四种方式：</h6>
<p>（1）insert 指定分区<br>
（2）load data 指定分区<br>
（3）查询已有表的数据，insert到新表中<br>
from day_hour_table insert into table newt partition(dt=01,hour=9898) select id,content<br>
（4）alter table add partition创建空分区，然后使用HDFS命令往空分区目录中上传数据<br>
（5）创建分区，并且指定分区数据的位置</p>
<h5><a id="_84"></a>分桶表：取模存储</h5>
<h6><a id="_85"></a>为什么创建分桶表？</h6>
<p>思想：引例找两个文件的url—将url装成hashcode取模，转成小文件，比对小文件。<br>
<img src="https://img-blog.csdnimg.cn/20181028155543569.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FuZHJlYV9udWxs,size_27,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
比如，有两个表如上。要找所有用户的订单数，就要进行join。<br>
join底层的原理：先搞一个笛卡尔积。遍历右表n次，效率很慢。<br>
解决：<br>
把用户信息表存储的时候，根据ID与number(分成小文件的个数)取模，分成多个表来存。<br>
订单表也同样根据ID与number(分成小文件的个数)取模，分成多个表来存。<br>
对应的表两两join就可以完成。</p>

            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>