---
layout:     post
title:      Hive笔记二之数据类型,加载方式与hdfs对应关系
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/ty4315/article/details/53730727				</div>
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<h3>数据类型</h3>
<h4>读写模式</h4>
<p>数据库加载数据分为读模式和写模式，hive属于读模式。</p>
<p>读模式：加载数据时不对数据合法性进行检验，查询时不合法的数据显示为null，优点是加载数据速度快适合大数据。</p>
<p>写模式：加载数据时对数据合法性进行检验。优点是不必担心数据库中的数据不合法，传统的数据库如mysql，oracle就是此种模式。</p>
<p>例1，创建一个hive表t1并导入数据</p>
<p>创建一张表</p>
<p><img src="https://img-blog.csdn.net/20161218222021906?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHk0MzE1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br></p>
<p></p>
<p>创建一个文件</p>
<img src="https://img-blog.csdn.net/20161218222059095?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHk0MzE1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br><p></p>
<p>导入数据并显示</p>
<img src="https://img-blog.csdn.net/20161218222131564?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHk0MzE1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br><p></p>
<p>将文件t1的数据导入hive中的表t1，实际上文件中的每一行数据都只导入到了t1表的id字段中，而name和online字段并未导入数据这是因为数据不合法没有指定分隔符，但是hive在加载数据时为读模式所以它并未检验合法性，而显示时用null来填充name和online字段。</p>
<br><p><br></p>
<p></p>
<h4>分隔符</h4>
<p></p>
<p>之前在上一节中介绍hive在创建表时必须指定行列分隔符，不指定则使用默认的分隔符，默认的行分隔符为’\n’，列分隔符为’\001’这是一个不可见字符。</p>
<p>例2：创建一个hive表t2并指定分隔符然后导入数据</p>
<p>创建一个文件包含创建语句然后在hive中执行</p>
<p>[root@shb01 data]# more t2_hql.hql </p>
<p>create table t2(</p>
<p>id string,</p>
<p>name string,</p>
<p>online boolean)</p>
<p>row format delimited</p>
<p>fields terminated by '\t'</p>
<p>lines terminated by '\n';</p>
<p> </p>
<p>hive&gt; source /usr/local/data/t2_hql.hql;</p>
<p>OK</p>
<p>Time taken: 0.116 seconds</p>
<p> </p>
<p> </p>
<p>创建一个数据文件</p>
<p>[root@shb01 data]# more t2_data </p>
<p>1      jack    true</p>
<p>2      tom     false</p>
<p> </p>
<p>执行加载并显示结果</p>
<p><img src="https://img-blog.csdn.net/20161218222242350?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHk0MzE1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br></p>
<p></p>
<p>可以看到此次加载数据并没有像例1中t1表那样出现null，因为我创建t2表时指定的分隔符和数据文件t2_data中的行列分隔符一致。另外指定分隔符必须fields在前lines在后</p>
<p> </p>
<p> </p>
<h4>基本数据类型</h4>
Hive和数据库类似也有一些基本的数据类型，这里就不介绍了只从网上找了一个截图。
<p></p>
<p><img src="https://img-blog.csdn.net/20161220232935588?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHk0MzE1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br></p>
<p><br></p>
<p><br></p>
<p></p>
<h4>复杂数据类型</h4>
<p></p>
<p>Hive有三种复杂数据类型分别是array，map，struct。Array类似java中的集合，map类似java中的map容器，struct类似java中的对象。下面的一个例子介绍其基本使用方法。</p>
<p>Array通过下标获取数据，map通过key获取数据，通过字段属性获取数据。</p>
<p> </p>
<p>1.创建hive表并加载数据</p>
<p>[root@shb01 data]# more t3_hql.hql </p>
<p>create table t3(</p>
<p>id string,</p>
<p>name string,</p>
<p>stu_num array&lt;string&gt;,</p>
<p>class_num map&lt;string,int&gt;,</p>
<p>person_addressstruct&lt;floor:string,room:string&gt;)</p>
<p>row format delimited</p>
<p>fields terminated by '\t'</p>
<p>collection items terminated by ','</p>
<p>map keys terminated by ':';</p>
<p> </p>
<p>hive&gt; source  /usr/local/data/t3_hql.hql;</p>
<p>OK</p>
<p>Time taken: 2.755 seconds</p>
<p> </p>
<p>[root@shb01 data]# more t3_data </p>
<p>1      teacher1        tom,jack,will   class1:30,class2:20     13th,room2</p>
<p>2      teacher2       tom1,jack1,will1  class1:31,class2:21     6th,room4</p>
<p> </p>
<p>hive&gt; load data local inpath'/usr/local/data/t3_data' overwrite into table t3;</p>
<p>Loading data to table default.t3</p>
<p>Table default.t3 stats: [numFiles=1,numRows=0, totalSize=133, rawDataSize=0]</p>
<p>OK</p>
<p>Time taken: 4.836 seconds</p>
<p> </p>
<p>   创建一个教师信息表，stu_num表示其学生名称信息使用array，class_num表示其所带班级学生人数使用map，person_address表示此教师办公室地址使用struct。Array和struct的默认分隔符为\002，map的默认分隔符为\003，不过我定义时指定了分隔符。</p>
<p> </p>
<p>2.查询复杂数据类型</p>
<p>hive&gt; select * from t3;                                                                                          </p>
<p>OK</p>
<p>1      teacher1       ["tom","jack","will"]  {"class1":30,"class2":20}      {"floor":"13th","room":"room2"}</p>
<p>2      teacher2        ["tom1","jack1","will1"]        {"class2":31}  {"floor":"4th","room":"room1"}</p>
<p>查询复杂数据类型</p>
<p>hive&gt; selectid,name,stu_num[1],class_num["class2"],person_address.floor,person_address.roomfrom t3 where id="1";</p>
<p>OK</p>
<p>1      teacher1        jack    20     13th    room2</p>
<p>Time taken: 0.11 seconds, Fetched: 1 row(s)</p>
<p> </p>
<p>stu_num是array，使用下标获取数据stu_num[1]</p>
<p>class_num是map，使用key获取数据class_num["class2"]</p>
<p>person_address.floor 是struct，使用对象属性获取数据，person_address相当于一个对象，floor相当与对象的属性person_address.floor</p>
<p> </p>
<h4>Hive中库，表数据与hdfs数据的对应关系</h4>
<p></p>
<p>Hive中库和表都对应hdfs的目录</p>
<p>库</p>
<p>Hive有一个默认的数据库default，而hive数据库对应hdfs上的一个目录，此目录的位置可以在hive_site.xml中找到。</p>
<p>&lt;property&gt;</p>
<p>   &lt;name&gt;hive.metastore.warehouse.dir&lt;/name&gt;</p>
<p>   &lt;value&gt;/user/hive/warehouse&lt;/value&gt;</p>
<p>   &lt;description&gt;location of default database for thewarehouse&lt;/description&gt;</p>
<p> &lt;/property&gt;</p>
<p>  同样在SQLyog中也可以通过查阅DBS来查看数据库信息</p>
<p> <img src="https://img-blog.csdn.net/20161221213553595?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHk0MzE1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p></p>
<p>我们可以在hive中通过命令来查看，创建，删除数据库，当我们执行创建删除数据库时DBS表都会及时感应到，注意存放元数据的默认数据库default不能被删除。</p>
<p>show databases;</p>
<p>use default;</p>
<p>create database mydb1;/ create databasemydb2 location '/user/hive/mydb2';</p>
<p>drop database mydb1;</p>
<p> </p>
<p>表</p>
<p>  和数据库一样我们可以创建查看删除表，表的元数据通过TBLS和COLUMNS_V2可以查看到。</p>
<p>create table t1(id int);</p>
<p>show tables;</p>
<p>desc tableName;</p>
<p>show create table tableName;</p>
<img src="https://img-blog.csdn.net/20161221213627236?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHk0MzE1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br><p><img src="https://img-blog.csdn.net/20161221213648456?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHk0MzE1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br></p>
<p></p>
<p>上面两个图是我创建的t1和t3表的元数据，COLUMNS_V2表的存放字段信息，CD_ID和TBLS表中的TBL_ID一致。</p>
<p> </p>
<p>也可以通过web方式查看相关信息</p>
<img src="https://img-blog.csdn.net/20161221213718453?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHk0MzE1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br><p></p>
<p><a href="http://shb01:50070/" rel="nofollow">http://shb01:50070</a>也可以看到表数据信息</p>
<img src="https://img-blog.csdn.net/20161221222319880?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHk0MzE1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br><p><br></p>
<h4>加载数据</h4>
<p></p>
<p>1.使用load data local inpath '/usr/local/data/t3_data' overwrite intotable t3;加载数据，没有<span style="color:#0070C0;"></span>local是从hdfs中加载数据，有则是从本地的linux中加载数据。<span style="color:#0070C0;"></span></p>
<p>2.hive中执行insert</p>
<p>insert into table t1 select id from t2</p>
<p>insert overwrite table t1 select id from t2</p>
<p>3.使用文件data1</p>
<p>创建一个文件，文件内容</p>
<p>from t5</p>
<p>insert into table t4 select id where id=1</p>
<p>insert into table t3 select id where id =2</p>
<p>然后在hive中使用source data1</p>
<p>4.import命令</p>
<p>Import table t1 from ‘usr/local/data/t1’</p>
<p>5.动态分区加载</p>
<p>开启动态分区，在hive中执行</p>
<p>set hive.exec.dynamic.partition=true</p>
<p>set hive.exec.dynamic.partition.mode=nonstrict</p>
<p>insert into table t5_part_2 partition(year=2015,school) select id,name from t5_part</p>
6.也可以使用hadoop直接上传数据。<br><p>[root@shb01 data]# hadoop fs -putt3_data_01 /user/hive/warehouse/t3</p>
<p><img src="https://img-blog.csdn.net/20161221213757738?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHk0MzE1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p></p>
<p>在hive下查看数据多了一倍</p>
<p>hive&gt; selectid,name,stu_num[1],class_num["class2"],person_address.room,person_address.floorfrom t3;</p>
<p>OK</p>
<p>1      teacher1        jack    20     room2   13th</p>
<p>2      teacher2        jack1   31     room1   4th</p>
<p>1      teacher1        jack    20     room2   13th</p>
<p>2      teacher2        jack1   31     room1   4th</p>
<br><p>注意 ：时间关系2~5我没有做实验验证只是把例子贴出来了：）</p>
<br><br>            </div>
                </div>