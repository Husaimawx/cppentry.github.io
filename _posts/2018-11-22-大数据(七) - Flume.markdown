---
layout:     post
title:      大数据(七) - Flume
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，转载请注明出处。					https://blog.csdn.net/matthewei6/article/details/50534563				</div>
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<div style="font-family:'微软雅黑';font-size:14px;line-height:21px;">
<div>
<div style="background-color:inherit;"><span style="background-color:inherit;"><span style="color:#ff0000;background-color:inherit;">flume[flu:m]</span></span>：日志采集、聚合和传输的系统，<span style="color:#ff0000;background-color:inherit;">java语言实现</span></div>
<div style="background-color:inherit;"><a href="http://flume.apache.org/" rel="nofollow" style="background-color:inherit;">http://flume.apache.org/</a></div>
<div style="background-color:inherit;">
<div style="background-color:inherit;"><a href="http://flume.apache.org/FlumeUserGuide.html" rel="nofollow" style="background-color:inherit;">http://flume.apache.org/FlumeUserGuide.html</a></div>
<div style="background-color:inherit;"><br style="background-color:inherit;"></div>
<div style="background-color:inherit;"><span style="background-color:inherit;line-height:1.5;">flume是干什么的？</span></div>
<div style="background-color:inherit;">
<div style="background-color:inherit;">收集日志的</div>
<div style="background-color:inherit;">flume如何搜集日志？</div>
<div style="background-color:inherit;">我们把flume比作情报人员</div>
<div style="background-color:inherit;">（1）搜集信息</div>
<div style="background-color:inherit;">（2）获取记忆信息</div>
<div style="background-color:inherit;">（3）传递报告间谍信息</div>
<div style="background-color:inherit;">flume是怎么完成上面三件事情的，三个组件：</div>
<div style="background-color:inherit;">source： 搜集信息</div>
<div style="background-color:inherit;">channel：传递信息</div>
<div style="background-color:inherit;">sink：存储信息</div>
</div>
<div style="background-color:inherit;"><br style="background-color:inherit;"></div>
<div style="background-color:inherit;"><br style="background-color:inherit;"></div>
</div>
</div>
<div>
<div style="background-color:inherit;">flume OG（<span style="line-height:1.5;">original generation初始版本</span><span style="background-color:inherit;line-height:1.5;">）和</span><span style="background-color:inherit;line-height:1.5;"><span style="color:#ff0000;background-color:inherit;">NG（</span></span><span style="line-height:1.5;"><span style="background-color:inherit;"><span style="color:#ff0000;background-color:inherit;">next generation，cdh4以及之后的版本</span></span></span><span style="background-color:inherit;line-height:1.5;"><span style="color:#ff0000;background-color:inherit;">）</span></span></div>
<div style="background-color:inherit;"><span style="line-height:1.5;">Flume OG 代码工程臃肿、核心组件设计不合理、核心配置不标准等</span></div>
<div style="background-color:inherit;"><span style="line-height:1.5;">Flume OG 有三种角色节点：agent、collector、master节点。<br style="background-color:inherit;"></span></div>
<div style="background-color:inherit;">
<div style="background-color:inherit;">Flume NG 只有一种角色的节点：代理节点（agent）,去掉了 collector、master 节点，这是核心组件最核心的变化。 </div>
<div style="background-color:inherit;">agent 节点的组成也发生了变化,由 source、sink、channel 组成。</div>
<div style="background-color:inherit;"><br style="background-color:inherit;"></div>
</div>
<div style="background-color:inherit;">NG要求jdk1.6以上，而且只有linux上的启动脚本</div>
<div style="background-color:inherit;">    <del style="background-color:inherit;">OG版本已经不更新了</del></div>
<div style="background-color:inherit;">    NG的核心组件：</div>
<div style="background-color:inherit;">        source：完成对<span style="color:#ff0000;background-color:inherit;">日志数据的收集，分成transition和event</span>打入到channel中。</div>
<div style="background-color:inherit;">            source有多种实现包括AvroSource（监控端口）、NetCat Source、Syslog Source、Syslog TCP Source、Syslog UDP Source、Http Source、HDFS Source、Spooling Directory Source（对目录下新增文件的监控，并读取文件数据）、Exec Source（以运行linux命令的方式，持续输出最新数据，如tail -F）等</div>
<div style="background-color:inherit;">            flume可以和log4j配合使用</div>
<div style="background-color:inherit;">        sink：取出channel中的数据，输出到存储文件系统，数据库，或远程服务器</div>
<div style="background-color:inherit;">            多种实现方式如Avro sink、HDFS Sink、HBase Sink、Logger Sink（测试用，后台打印）</div>
<div style="background-color:inherit;">        小数据可以存储在文件或数据库中，海量数据（每天GB、TB级别的数据）存储到hadoop中</div>
<div style="background-color:inherit;">        Channel：管道，提供一个队列的功能，对source提供的数据进行简单缓存</div>
<div style="background-color:inherit;">            实现由Memory/File/jdbc channel,Memory无法保证数据完成性，官方建议使用File Channel，保证数据完整性和一致性</div>
</div>
<br style="background-color:inherit;"></div>
<div style="font-family:'微软雅黑';font-size:14px;line-height:21px;"><span style="background-color:inherit;"><span style="color:#ff0000;background-color:inherit;">Flow Pipeline</span></span></div>
<div style="font-family:'微软雅黑';font-size:14px;line-height:21px;">1、多个Agent顺序连接</div>
<div style="font-family:'微软雅黑';font-size:14px;line-height:21px;"><img src="https://img-blog.csdn.net/20160118070815811?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" width="700"></div>
<div style="font-family:'微软雅黑';font-size:14px;line-height:21px;"></div>
<div style="font-family:'微软雅黑';font-size:14px;line-height:21px;">2、多个Agent的数据汇聚到同一个Agent</div>
<div style="font-family:'微软雅黑';font-size:14px;line-height:21px;"><img src="https://img-blog.csdn.net/20160118070856514?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" width="700"><br></div>
<div style="font-family:'微软雅黑';font-size:14px;line-height:21px;"></div>
<div style="font-family:'微软雅黑';font-size:14px;line-height:21px;">3、多路（一个agent上有多个channel）（Multiplexing）Agent</div>
<div style="font-family:'微软雅黑';font-size:14px;line-height:21px;"><img src="https://img-blog.csdn.net/20160118070914781?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" width="700"><br></div>
<div style="font-family:'微软雅黑';font-size:14px;line-height:21px;"></div>
<div style="font-family:'微软雅黑';font-size:14px;line-height:21px;">这种模式，有两种方式，一种是用来复制（Replication），另一种是用来分流（Multiplexing）。Replication方式，可以将最前端的数据源复制多份，分别传递到多个channel中，每个channel接收到的数据都是相同的；<a href="http://blog.csdn.net/matthewei6/article/details/50534563" rel="nofollow">Multiplexing</a>方式，selector可以根据header的值来确定数据传递到哪一个channel</div>
<div style="font-family:'微软雅黑';font-size:14px;line-height:21px;">4、实现load balance功能</div>
<div style="font-family:'微软雅黑';font-size:14px;line-height:21px;"><img src="https://img-blog.csdn.net/20160118070931177?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" width="700"><br></div>
<div style="font-family:'微软雅黑';font-size:14px;line-height:21px;">5、实现failover功能</div>
<div style="font-family:'微软雅黑';font-size:14px;line-height:21px;"><br style="background-color:inherit;"></div>
<div style="font-family:'微软雅黑';font-size:14px;line-height:21px;"><span style="background-color:inherit;"><span style="color:#ff0000;background-color:inherit;">flume source</span></span></div>
<div style="font-family:'微软雅黑';font-size:14px;line-height:21px;">    Avro Source：接收外部avro客户端的事件</div>
<div style="font-family:'微软雅黑';font-size:14px;line-height:21px;">    Thrift Source：接收外部thrift客户端的事件</div>
<div style="font-family:'微软雅黑';font-size:14px;line-height:21px;">    Exec Source：接收来自一个给定的Unix命令的标准输出上的数据</div>
<div style="font-family:'微软雅黑';font-size:14px;line-height:21px;">    Jms Source：接收来自消息队列的事件</div>
<div style="font-family:'微软雅黑';font-size:14px;line-height:21px;">    NetCat Source：netcat在一端侦听，每一行文字变成一个事件源</div>
<div style="font-family:'微软雅黑';font-size:14px;line-height:21px;">    Spooling Directory Source：以目录中文件内容为事件源</div>
<div style="font-family:'微软雅黑';font-size:14px;line-height:21px;">    SequenceGenerator Source:一个简单地序列生成器，主要用于测试</div>
<div style="font-family:'微软雅黑';font-size:14px;line-height:21px;">    Syslog Source：读取syslog数据</div>
<div style="font-family:'微软雅黑';font-size:14px;line-height:21px;">        Syslog<span style="background-color:inherit;"> </span>UDP Source</div>
<div style="font-family:'微软雅黑';font-size:14px;line-height:21px;">        Syslog<span style="background-color:inherit;"> </span>TCP Source</div>
<div style="font-family:'微软雅黑';font-size:14px;line-height:21px;">        Multiport Syslog TCP Source</div>
<div style="font-family:'微软雅黑';font-size:14px;line-height:21px;">    Http Source：接收http post，get事件，get只用于试验</div>
<div style="font-family:'微软雅黑';font-size:14px;line-height:21px;">    Custom Source：自定义source</div>
<div style="font-family:'微软雅黑';font-size:14px;line-height:21px;"><br style="background-color:inherit;"></div>
<div style="font-family:'微软雅黑';font-size:14px;line-height:21px;">
<div style="background-color:inherit;"><span style="color:#ff0000;background-color:inherit;"><span style="background-color:inherit;">flume sink</span></span></div>
<div style="background-color:inherit;">    HDFS Sink将事件写入到hadoop分布式文件系统<a href="http://blog.csdn.net/matthewei6/article/details/50507023" rel="nofollow">HDFS</a></div>
<div style="background-color:inherit;">    Logger sink 通常用于调试、测试</div>
<div style="background-color:inherit;">    Avro sink 可以批量传送，可以配置批量大小</div>
<div style="background-color:inherit;">    Thrift sink</div>
<div style="background-color:inherit;">    IRC sink 从通道中取得信息到irc server</div>
<div style="background-color:inherit;">    File Roll sink存储文件到本地文件系统中</div>
<div style="background-color:inherit;">    Null sink丢弃从通道接收的所有事件</div>
<div style="background-color:inherit;">    HBase sink将数据写入到<a href="http://blog.csdn.net/matthewei6/article/details/50526752" rel="nofollow">hbase</a>中</div>
<div style="background-color:inherit;">    AsyncHbase sink异步方式将数据写入到hbase中</div>
<div style="background-color:inherit;">    Custom sink 自定义sink</div>
<div style="background-color:inherit;"><span style="background-color:inherit;"><span style="color:#ff0000;background-color:inherit;">flume channel</span></span></div>
<div style="background-color:inherit;">    Memory channel 时间存储在一个可配置的最大尺寸的内存中的队列；速度快，吞吐量大，但是代理出现故障时数据丢失</div>
<div style="background-color:inherit;">    JDBC channel 时间存储在数据库中</div>
<div style="background-color:inherit;">    File channel 不同的file channel应该写到不同的磁盘上，避免单磁盘io过大</div>
<div style="background-color:inherit;">    Pseudo Thansaction channel 用于测试</div>
<div style="background-color:inherit;">    Custom channel 自定义channel</div>
<div style="background-color:inherit;"><span style="color:#ff0000;background-color:inherit;"><span style="background-color:inherit;">flume channel selector</span></span></div>
<div style="background-color:inherit;">    Replicating channel selector （default） 复制，相同的数据发送到多个channel</div>
<div style="background-color:inherit;">    Multiplexing channel selector 复用，以header区分一个event发送到哪个channel</div>
<div style="background-color:inherit;">    Custom channel selector 自定义channel selector</div>
<div style="background-color:inherit;"><br style="background-color:inherit;"></div>
</div>
<div style="font-family:'微软雅黑';font-size:14px;line-height:21px;"><br style="background-color:inherit;"></div>
<div style="font-family:'微软雅黑';font-size:14px;line-height:21px;">数据通信系统或计算机网络系统中，传输媒体的带宽或容量往往会大于传输单一信号的需求，为了有效地利用通信线路,希望一个信道同时传输多路信号，这就是所谓的<span style="color:#ff0000;background-color:inherit;">多路复用技术(Multiplexing)</span>。采用多路复用技术能把多个信号组合起来在一条物理信道上进行传输，在远距离传输时可大大节省电缆的安装和维护费用。</div>
<div style="font-family:'微软雅黑';font-size:14px;line-height:21px;"><br style="background-color:inherit;"></div>
<div style="font-family:'微软雅黑';font-size:14px;line-height:21px;"><br style="background-color:inherit;"></div>
<div style="font-family:'微软雅黑';font-size:14px;line-height:21px;">
<div style="background-color:inherit;"><span style="background-color:inherit;"><span style="color:#ff0000;background-color:inherit;">Flume sink processor</span></span></div>
<div style="background-color:inherit;">    Default sink processor</div>
<div style="background-color:inherit;">    Failover sink processor 故障转移（主备）</div>
<div style="background-color:inherit;">    Load balancing sink processor 负载均衡：轮询round_robin或随机random</div>
<div style="background-color:inherit;"><br style="background-color:inherit;"></div>
<div style="background-color:inherit;">
<div style="background-color:inherit;"><span style="background-color:inherit;"><span style="color:#ff0000;background-color:inherit;">flume interceptor</span></span> </div>
<div style="background-color:inherit;">    拦截器主要是对事件的header信息信息操作，要么直接忽略他，要么修改他的数据</div>
<div style="background-color:inherit;">    一、Event Serializers</div>
<div style="background-color:inherit;">　　file_roll sink 和hdfs sink 都支持EventSerializer接口</div>
<div style="background-color:inherit;">    Body TextSerializer，别名：text。这个拦截器将把事件的body部分写入到输出流中而不需要任何转换或者修改。事件的header将直接被忽略。</div>
<div style="background-color:inherit;">    Avro Event Serializer别名：avro_event。这个拦截器将把事件序列化到一个Avro容器文件中。使用的模式和RPC Avro机制使用到的处理flume事件的机制一样。这个序列化器继承自AbstractAvroEventSerializer类。</div>
<div style="background-color:inherit;">    二、Timestamp Interceptor</div>
<div style="background-color:inherit;">    Flume 可以在事件传输过程中对它进行修改与删除，而这个都是通过Interceptor进行实现的，实际都是往事件的header里插数据。而Timestamp Interceptor拦截器就是可以往event的header中插入关键词为timestamp的时间戳。</div>
<div style="background-color:inherit;">    三、Host Interceptor</div>
<div style="background-color:inherit;"><span style="background-color:inherit;line-height:1.5;">　　该拦截器可以往event的header中插入关键词默认为host主机名或者<a href="http://blog.csdn.net/matthewei6/article/details/50536609" rel="nofollow">ip</a>地址（注意是agent运行的机器的主机名或者ip地址）</span></div>
<div style="background-color:inherit;">    四、Static Interceptor</div>
<div style="background-color:inherit;"><span style="background-color:inherit;line-height:1.5;">　　Static Interceptor拦截器允许用户增加一个static的header并为所有的事件赋值。范围是所有事件。</span></div>
<div style="background-color:inherit;">    五、Regex FilteringInterceptor</div>
<div style="background-color:inherit;"><span style="background-color:inherit;line-height:1.5;">　　Regex Filtering Interceptor拦截器用于过滤事件，筛选出与配置的正则表达式相匹配的事件。可以用于包含事件和排除事件(include 或者是exclude)。常用于数据清洗，通过正则表达式把数据过滤出来。</span></div>
</div>
</div>
<div style="font-family:'微软雅黑';font-size:14px;line-height:21px;"><br style="background-color:inherit;"></div>
<div style="font-family:'微软雅黑';font-size:14px;line-height:21px;">
<div style="background-color:inherit;"><span style="background-color:inherit;"><span style="color:#ff0000;background-color:inherit;">flume开发</span></span></div>
<div style="background-color:inherit;">    1、RPC</div>
<div style="background-color:inherit;">        flume虽然包含一些内部机制来采集数据，但是有时候用户希望能将应用程序和flume直接相通。flume client是一个库，允许应用程序链接flume和通过rpc往flume发送数据。</div>
<div style="background-color:inherit;">        avro是flume默认的rpc协议</div>
<div style="background-color:inherit;">    2、<span style="color:#ff0000;background-color:inherit;">Transaction    </span></div>
<div style="background-color:inherit;">        Flume 的核心是把数据从数据源收集过来，再送到目的地。为了保证输送一定成功，在送到目的地之前，会先缓存数据，待数据真正到达目的地后，删除自己缓存的数据。</div>
<div style="background-color:inherit;"><span style="background-color:inherit;line-height:1.5;">        Flume 使用事务性的方式保证传送Event整个过程的可靠性。Sink 必须在 Event 被存入 Channel 后，或者，已经被传达到下一站agent里，又或者，已经被存入外部数据目的地之后，才能把 Event 从 Channel 中 remove 掉。这样数据流里的 event 无论是在一个 agent 里还是多个 agent 之间流转，都能保证可靠，因为以上的事务保证了 event 会被成功存储起来。而 Channel 的多种实现在可恢复性上有不同的保证。也保证了 event 不同程度的可靠性。比如 Flume 支持在本地保存一份文件 channel 作为备份，而memory channel 将 event 存在内存 queue 里，速度快，但丢失的话无法恢复。</span></div>
<div style="background-color:inherit;">    3、Source</div>
<div style="background-color:inherit;">    4、Sink</div>
</div>
<div style="font-family:'微软雅黑';font-size:14px;line-height:21px;"><br style="background-color:inherit;"></div>
<div style="font-family:'微软雅黑';font-size:14px;line-height:21px;"><span style="color:#ff0000;background-color:inherit;"><span style="background-color:inherit;">最佳实践</span></span></div>
<div style="font-family:'微软雅黑';font-size:14px;line-height:21px;">
<p style="color:rgb(51,51,51);font-family:'Open Sans', 'Helvetica Neue', Helvetica, Arial, STHeiti, 'Microsoft Yahei', SimSun, sans-serif;">
参考<a href="http://tech.meituan.com/mt-log-system-arch.html" rel="nofollow" style="background-color:inherit;color:rgb(0,142,89);">基于Flume的美团日志收集系统(一)架构和设计</a>，列出一些最佳实践：</p>
<ul style="font-family:'Open Sans', 'Helvetica Neue', Helvetica, Arial, STHeiti, 'Microsoft Yahei', SimSun, sans-serif;"><li style="background-color:inherit;"><span style="color:#333333;background-color:inherit;">模块命名规则：所有的 </span><span style="color:#ff0000;background-color:inherit;">Source 以 src 开头，所有的 Channel 以 ch 开头，所有的 Sink 以 sink 开头</span><span style="color:#333333;background-color:inherit;">；</span></li><li style="background-color:inherit;"><span style="color:#ff0000;background-color:inherit;">模块之间内部通信统一使用 Avro 接口</span><span style="color:#333333;background-color:inherit;">；</span></li><li style="background-color:inherit;"><span style="color:#333333;background-color:inherit;">将</span><span style="color:#ff0000;background-color:inherit;">日志采集系统系统分为三层：Agent 层，Collector 层和 Store 层</span><span style="color:#333333;background-color:inherit;">，其中
 Agent 层每个机器部署一个进程，负责对单机的日志收集工作；Collector 层部署在中心服务器上，负责接收Agent层发送的日志，并且将日志根据路由规则写到相应的 Store 层中；Store 层负责提供永久或者临时的日志存储服务，或者将日志流导向其它服务器。</span></li><li style="background-color:inherit;"><span style="color:#ff0000;background-color:inherit;"><span style="background-color:inherit;">扩展 MemoryChannel 和 FileChannel ，提供 DualChannel 的实现，以提供高吞吐和大缓存</span></span></li><li style="background-color:inherit;color:rgb(51,51,51);">监控 collector HdfsSink写数据到 hdfs 的速度、FileChannel 中拥堵的 events 数量，以及写 hdfs 状态（查看是否有 .tmp 文件生成）</li></ul><p style="color:rgb(51,51,51);font-family:'Open Sans', 'Helvetica Neue', Helvetica, Arial, STHeiti, 'Microsoft Yahei', SimSun, sans-serif;">
美团对 flume 的改进代码见 github：<a href="https://github.com/javachen/mt-flume" rel="nofollow" style="background-color:inherit;color:rgb(0,142,89);">https://github.com/javachen/mt-flume</a>。</p>
</div>
            </div>
                </div>