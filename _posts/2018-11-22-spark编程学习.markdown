---
layout:     post
title:      spark编程学习
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<h1 class="news-item" style="font-size:28px;font-family:'Lucida Grande', 'Lucida Sans Unicode', Helvetica, 'Helvetica Neue', 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', Arial, Verdana, sans-serif;font-weight:500;line-height:1.1;border-bottom-width:1px;border-bottom-style:dashed;">
Spark编程指南笔记 2015.02.03</h1>
<div>
<p>本文是参考Spark官方编程指南（Spark 版本为1.2）整理出来的学习笔记，主要是用于加深对 Spark 的理解，并记录一些知识点。</p>
<h1 id="1.-一些概念" style="font-size:28px;font-family:inherit;font-weight:500;line-height:1.1;border-bottom-width:1px;border-bottom-style:solid;">
1. 一些概念</h1>
<p>每一个 Spark 的应用，都是由一个驱动程序构成，它运行用户的 main 函数，在一个集群上执行各种各样的并行操作。</p>
<p>Spark 提出的最主要抽象概念是<code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;color:rgb(199,37,78);background-color:rgb(254,251,243);">弹性分布式数据集</code>，它是一个有容错机制（划分到集群的各个节点上）并可以被并行操作的元素集合。目前有两种类型的RDD：</p>
<ul><li><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;color:rgb(199,37,78);background-color:rgb(254,251,243);">并行集合</code>：接收一个已经存在的 Scala 集合，然后进行各种并行计算。</li><li><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;color:rgb(199,37,78);background-color:rgb(254,251,243);">外部数据集</code>：外部存储系统，例如一个共享的文件系统，HDFS、HBase以及任何支持
 Hadoop InputFormat 的数据源。</li></ul><p>这两种类型的 RDD 都可以通过相同的方式进行操作。用户可以让 Spark 保留一个 RDD 在内存中，使其能在并行操作中被有效的重复使用，并且，RDD 能自动从节点故障中恢复。</p>
<p>Spark 的第二个抽象概念是<code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;color:rgb(199,37,78);background-color:rgb(254,251,243);">共享变量</code>，可以在并行操作中使用。在默认情况下，Spark
 通过不同节点上的一系列任务来运行一个函数，它将每一个函数中用到的变量的拷贝传递到每一个任务中。有时候，一个变量需要在任务之间，或任务与驱动程序之间被共享。</p>
<p>Spark 支持两种类型的共享变量：<code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;color:rgb(199,37,78);background-color:rgb(254,251,243);">广播变量</code>，可以在内存的所有的结点上缓存变量；<code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;color:rgb(199,37,78);background-color:rgb(254,251,243);">累加器</code>：只能用于做加法的变量，例如计数或求和。</p>
<h1 id="2.-编写程序" style="font-size:28px;font-family:inherit;font-weight:500;line-height:1.1;border-bottom-width:1px;border-bottom-style:solid;">
2. 编写程序</h1>
<h2 id="初始化-spark" style="font-family:inherit;font-weight:500;line-height:1.1;font-size:24px;">
初始化 Spark</h2>
<p>Spark 程序需要做的第一件事情，就是创建一个 SparkContext 对象，它将告诉 Spark 如何访问一个集群。这个通常是通过下面的构造器来实现的：</p>
<div class="highlight">
<pre style="overflow:auto;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;line-height:1.42857143;color:rgb(51,51,51);background-color:rgb(248,248,248);"><code class="language-java" style="font-family:Menlo, 'Andale Mono', Consolas, 'Courier New', Monaco, monospace;color:inherit;background-color:transparent;"><span class="k" style="color:rgb(0,128,0);font-weight:bold;">new</span> <span class="nf" style="color:rgb(0,0,255);">SparkContext</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="n">master</span><span class="o" style="color:rgb(102,102,102);">,</span> <span class="n">appName</span><span class="o" style="color:rgb(102,102,102);">,</span> <span class="o" style="color:rgb(102,102,102);">[</span><span class="n">sparkHome</span><span class="o" style="color:rgb(102,102,102);">],</span> <span class="o" style="color:rgb(102,102,102);">[</span><span class="n">jars</span><span class="o" style="color:rgb(102,102,102);">])</span>
</code></pre>
</div>
<p>参数说明：</p>
<ul><li><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;color:rgb(199,37,78);background-color:rgb(254,251,243);">master</code>：用于指定所连接的 Spark 或者 Mesos 集群的 URL。</li><li><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;color:rgb(199,37,78);background-color:rgb(254,251,243);">appName</code> ：应用的名称，将会在集群的 Web 监控 UI 中显示。</li><li><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;color:rgb(199,37,78);background-color:rgb(254,251,243);">sparkHome</code>：可选，你的集群机器上 Spark 的安装路径（所有机器上路径必须一致）。</li><li><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;color:rgb(199,37,78);background-color:rgb(254,251,243);">jars</code>：可选，在本地机器上的 JAR 文件列表，其中包括你应用的代码以及任何的依赖，Spark
 将会把他们部署到所有的集群结点上。</li></ul><p>在 python 中初始化，示例代码如下：</p>
<div class="highlight">
<pre style="overflow:auto;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;line-height:1.42857143;color:rgb(51,51,51);background-color:rgb(248,248,248);"><code class="language-python" style="font-family:Menlo, 'Andale Mono', Consolas, 'Courier New', Monaco, monospace;color:inherit;background-color:transparent;"><span class="o" style="color:rgb(102,102,102);">//</span><span class="n">conf</span> <span class="o" style="color:rgb(102,102,102);">=</span> <span class="n">SparkContext</span><span class="p">(</span><span class="s" style="color:rgb(186,33,33);">"local"</span><span class="p">,</span> <span class="s" style="color:rgb(186,33,33);">"Hello Spark"</span><span class="p">)</span>
<span class="n">conf</span> <span class="o" style="color:rgb(102,102,102);">=</span> <span class="n">SparkConf</span><span class="p">()</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">setAppName</span><span class="p">(</span><span class="s" style="color:rgb(186,33,33);">"Hello Spark"</span><span class="p">)</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">setMaster</span><span class="p">(</span><span class="s" style="color:rgb(186,33,33);">"local"</span><span class="p">)</span>
<span class="n">sc</span> <span class="o" style="color:rgb(102,102,102);">=</span> <span class="n">SparkContext</span><span class="p">(</span><span class="n">conf</span><span class="o" style="color:rgb(102,102,102);">=</span><span class="n">conf</span><span class="p">)</span>
</code></pre>
</div>
<p>说明：如果部署到集群，在分布式模式下运行，最后两个参数是必须的。</p>
<p>第一个参数可以是以下任一种形式：</p>
<table style="border-spacing:0px;border-collapse:collapse;background-color:transparent;font-size:13px;"><thead><tr><th style="border-width:0px 1px 2px;border-style:none solid solid;vertical-align:bottom;">
Master URL</th>
<th style="border-width:0px 1px 2px;border-style:none solid solid;vertical-align:bottom;">
含义</th>
</tr></thead><tbody><tr><td style="vertical-align:middle;"><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">loca</code>l</td>
<td style="vertical-align:middle;">默认值，使用一个 Worker 线程本地化运行(完全不并行)</td>
</tr><tr><td style="vertical-align:middle;"><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">local[K]</code></td>
<td style="vertical-align:middle;">使用 K 个 Worker 线程本地化运行（理想情况下，K 应该根据运行机器的 CPU 核数设定）</td>
</tr><tr><td style="vertical-align:middle;"><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">spark://HOST:PORT</code></td>
<td style="vertical-align:middle;">连接到指定的 Spark 单机版集群 master 进程所在的主机和端口，端口默认是7077</td>
</tr><tr><td style="vertical-align:middle;"><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">mesos://HOST:PORT</code></td>
<td style="vertical-align:middle;">连接到指定的 Mesos 集群。host 参数是Moses master的hostname。端口默认是5050</td>
</tr></tbody></table><p>如果你在一个集群上运行 spark-shell，则 master 参数默认为 <code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;color:rgb(199,37,78);background-color:rgb(254,251,243);">local</code>，在启动之前你可以通过修改配置文件指定 <code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;color:rgb(199,37,78);background-color:rgb(254,251,243);">ADD_JAR</code> 环境变量将
 JAR 文件们加载在集群上，这个变量需要包括一个用逗号分隔的 JAR 文件列表。</p>
<h2 id="运行代码" style="font-family:inherit;font-weight:500;line-height:1.1;font-size:24px;">
运行代码</h2>
<p>运行代码有几种方式，一是通过 spark-shell 来运行 scala 代码，一是编写 java 代码并打成包以 spark on yarn 方式运行，还有一种是通过 pyspark 来运行 python 代码。</p>
<p>更多内容，参考 <a href="http://blog.javachen.com/2014/07/01/spark-install-and-usage/" rel="nofollow" style="background-color:transparent;text-decoration:none;">Spark安装和使用</a>。</p>
<h1 id="3.-弹性分布式数据集" style="font-size:28px;font-family:inherit;font-weight:500;line-height:1.1;border-bottom-width:1px;border-bottom-style:solid;">
3. 弹性分布式数据集</h1>
<h2 id="3.1-并行集合" style="font-family:inherit;font-weight:500;line-height:1.1;font-size:24px;">
3.1 并行集合</h2>
<p>并行集合是通过调用 SparkContext 的 <code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;color:rgb(199,37,78);background-color:rgb(254,251,243);">parallelize</code> 方法，在一个已经存在的
 Scala 集合上创建一个 Seq 对象。</p>
<p>parallelize 方法还可以接受一个参数 <code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;color:rgb(199,37,78);background-color:rgb(254,251,243);">slices</code>，表示数据集切分的份数。Spark
 将会在集群上为每一份数据起一个任务。典型地，你可以在集群的每个 CPU 上分布 2-4个 slices。一般来说，Spark 会尝试根据集群的状况，来自动设定 slices 的数目，当然，你也可以手动设置。</p>
<p>Scala 示例程序：</p>
<div class="highlight">
<pre style="overflow:auto;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;line-height:1.42857143;color:rgb(51,51,51);background-color:rgb(248,248,248);"><code class="language-java" style="font-family:Menlo, 'Andale Mono', Consolas, 'Courier New', Monaco, monospace;color:inherit;background-color:transparent;"><span class="n">scala</span><span class="o" style="color:rgb(102,102,102);">&gt;</span> <span class="n">val</span> <span class="n">data</span> <span class="o" style="color:rgb(102,102,102);">=</span> <span class="n">Array</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="mi" style="color:rgb(102,102,102);">1</span><span class="o" style="color:rgb(102,102,102);">,</span> <span class="mi" style="color:rgb(102,102,102);">2</span><span class="o" style="color:rgb(102,102,102);">,</span> <span class="mi" style="color:rgb(102,102,102);">3</span><span class="o" style="color:rgb(102,102,102);">,</span> <span class="mi" style="color:rgb(102,102,102);">4</span><span class="o" style="color:rgb(102,102,102);">,</span> <span class="mi" style="color:rgb(102,102,102);">5</span><span class="o" style="color:rgb(102,102,102);">)</span>
<span class="nl" style="color:rgb(160,160,0);">data:</span> <span class="n">Array</span><span class="o" style="color:rgb(102,102,102);">[</span><span class="n">Int</span><span class="o" style="color:rgb(102,102,102);">]</span> <span class="o" style="color:rgb(102,102,102);">=</span> <span class="n">Array</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="mi" style="color:rgb(102,102,102);">1</span><span class="o" style="color:rgb(102,102,102);">,</span> <span class="mi" style="color:rgb(102,102,102);">2</span><span class="o" style="color:rgb(102,102,102);">,</span> <span class="mi" style="color:rgb(102,102,102);">3</span><span class="o" style="color:rgb(102,102,102);">,</span> <span class="mi" style="color:rgb(102,102,102);">4</span><span class="o" style="color:rgb(102,102,102);">,</span> <span class="mi" style="color:rgb(102,102,102);">5</span><span class="o" style="color:rgb(102,102,102);">)</span>

<span class="n">scala</span><span class="o" style="color:rgb(102,102,102);">&gt;</span> <span class="n">var</span> <span class="n">distData</span> <span class="o" style="color:rgb(102,102,102);">=</span> <span class="n">sc</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="na" style="color:rgb(125,144,41);">parallelize</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="n">data</span><span class="o" style="color:rgb(102,102,102);">)</span>
<span class="nl" style="color:rgb(160,160,0);">distData:</span> <span class="n">org</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="na" style="color:rgb(125,144,41);">apache</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="na" style="color:rgb(125,144,41);">spark</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="na" style="color:rgb(125,144,41);">rdd</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="na" style="color:rgb(125,144,41);">RDD</span><span class="o" style="color:rgb(102,102,102);">[</span><span class="n">Int</span><span class="o" style="color:rgb(102,102,102);">]</span> <span class="o" style="color:rgb(102,102,102);">=</span> <span class="n">ParallelCollectionRDD</span><span class="o" style="color:rgb(102,102,102);">[</span><span class="mi" style="color:rgb(102,102,102);">0</span><span class="o" style="color:rgb(102,102,102);">]</span> <span class="n">at</span> <span class="n">parallelize</span> <span class="n">at</span> <span class="o" style="color:rgb(102,102,102);">&lt;</span><span class="n">console</span><span class="o" style="color:rgb(102,102,102);">&gt;:</span><span class="mi" style="color:rgb(102,102,102);">14</span>

<span class="n">scala</span><span class="o" style="color:rgb(102,102,102);">&gt;</span> <span class="n">distData</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="na" style="color:rgb(125,144,41);">reduce</span><span class="o" style="color:rgb(102,102,102);">((</span><span class="n">a</span><span class="o" style="color:rgb(102,102,102);">,</span> <span class="n">b</span><span class="o" style="color:rgb(102,102,102);">)</span> <span class="o" style="color:rgb(102,102,102);">=&gt;</span> <span class="n">a</span> <span class="o" style="color:rgb(102,102,102);">+</span> <span class="n">b</span><span class="o" style="color:rgb(102,102,102);">)</span>
<span class="nl" style="color:rgb(160,160,0);">res4:</span> <span class="n">Int</span> <span class="o" style="color:rgb(102,102,102);">=</span> <span class="mi" style="color:rgb(102,102,102);">15</span>
</code></pre>
</div>
<p>Java 示例程序：</p>
<div class="highlight">
<pre style="overflow:auto;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;line-height:1.42857143;color:rgb(51,51,51);background-color:rgb(248,248,248);"><code class="language-java" style="font-family:Menlo, 'Andale Mono', Consolas, 'Courier New', Monaco, monospace;color:inherit;background-color:transparent;"><span class="n">List</span><span class="o" style="color:rgb(102,102,102);">&lt;</span><span class="n">Integer</span><span class="o" style="color:rgb(102,102,102);">&gt;</span> <span class="n">data</span> <span class="o" style="color:rgb(102,102,102);">=</span> <span class="n">Arrays</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="na" style="color:rgb(125,144,41);">asList</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="mi" style="color:rgb(102,102,102);">1</span><span class="o" style="color:rgb(102,102,102);">,</span> <span class="mi" style="color:rgb(102,102,102);">2</span><span class="o" style="color:rgb(102,102,102);">,</span> <span class="mi" style="color:rgb(102,102,102);">3</span><span class="o" style="color:rgb(102,102,102);">,</span> <span class="mi" style="color:rgb(102,102,102);">4</span><span class="o" style="color:rgb(102,102,102);">,</span> <span class="mi" style="color:rgb(102,102,102);">5</span><span class="o" style="color:rgb(102,102,102);">);</span>
<span class="n">JavaRDD</span><span class="o" style="color:rgb(102,102,102);">&lt;</span><span class="n">Integer</span><span class="o" style="color:rgb(102,102,102);">&gt;</span> <span class="n">distData</span> <span class="o" style="color:rgb(102,102,102);">=</span> <span class="n">sc</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="na" style="color:rgb(125,144,41);">parallelize</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="n">data</span><span class="o" style="color:rgb(102,102,102);">);</span>
<span class="n">Integer</span> <span class="n">sum</span><span class="o" style="color:rgb(102,102,102);">=</span><span class="n">distData</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="na" style="color:rgb(125,144,41);">reduce</span><span class="o" style="color:rgb(102,102,102);">((</span><span class="n">a</span><span class="o" style="color:rgb(102,102,102);">,</span> <span class="n">b</span><span class="o" style="color:rgb(102,102,102);">)</span> <span class="o" style="color:rgb(102,102,102);">-&gt;</span> <span class="n">a</span> <span class="o" style="color:rgb(102,102,102);">+</span> <span class="n">b</span><span class="o" style="color:rgb(102,102,102);">);</span>
</code></pre>
</div>
<p>Python 示例程序：</p>
<div class="highlight">
<pre style="overflow:auto;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;line-height:1.42857143;color:rgb(51,51,51);background-color:rgb(248,248,248);"><code class="language-python" style="font-family:Menlo, 'Andale Mono', Consolas, 'Courier New', Monaco, monospace;color:inherit;background-color:transparent;"><span class="n">data</span> <span class="o" style="color:rgb(102,102,102);">=</span> <span class="p">[</span><span class="mi" style="color:rgb(102,102,102);">1</span><span class="p">,</span> <span class="mi" style="color:rgb(102,102,102);">2</span><span class="p">,</span> <span class="mi" style="color:rgb(102,102,102);">3</span><span class="p">,</span> <span class="mi" style="color:rgb(102,102,102);">4</span><span class="p">,</span> <span class="mi" style="color:rgb(102,102,102);">5</span><span class="p">]</span>
<span class="n">distData</span> <span class="o" style="color:rgb(102,102,102);">=</span> <span class="n">sc</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">parallelize</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="n">distData</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">reduce</span><span class="p">(</span><span class="k" style="color:rgb(0,128,0);font-weight:bold;">lambda</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="n">a</span> <span class="o" style="color:rgb(102,102,102);">+</span> <span class="n">b</span><span class="p">)</span>
</code></pre>
</div>
<h2 id="3.2-外部数据源" style="font-family:inherit;font-weight:500;line-height:1.1;font-size:24px;">
3.2 外部数据源</h2>
<p>Spark可以从存储在 HDFS，或者 Hadoop 支持的其它文件系统（包括本地文件，Amazon S3， Hypertable， HBase 等等）上的文件创建分布式数据集。Spark 支持<code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;color:rgb(199,37,78);background-color:rgb(254,251,243);">TextFile</code>、<code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;color:rgb(199,37,78);background-color:rgb(254,251,243);">SequenceFiles</code> 以及其他任何 <code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;color:rgb(199,37,78);background-color:rgb(254,251,243);">Hadoop
 InputFormat</code> 格式的输入。</p>
<p>TextFile 的 RDD 可以通过下面方式创建，该方法接受一个文件的 URI 地址，该地址可以是本地路径，或者 <code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;color:rgb(199,37,78);background-color:rgb(254,251,243);">hdfs://</code>、<code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;color:rgb(199,37,78);background-color:rgb(254,251,243);">s3n://</code> 等
 URL 地址。</p>
<div class="highlight">
<pre style="overflow:auto;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;line-height:1.42857143;color:rgb(51,51,51);background-color:rgb(248,248,248);"><code class="language-java" style="font-family:Menlo, 'Andale Mono', Consolas, 'Courier New', Monaco, monospace;color:inherit;background-color:transparent;"><span class="c1" style="color:rgb(64,128,128);font-style:italic;">// scala 语法</span>
<span class="n">val</span> <span class="n">distFile</span> <span class="o" style="color:rgb(102,102,102);">=</span> <span class="n">sc</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="na" style="color:rgb(125,144,41);">textFile</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="s" style="color:rgb(186,33,33);">"data.txt"</span><span class="o" style="color:rgb(102,102,102);">)</span>

<span class="c1" style="color:rgb(64,128,128);font-style:italic;">// java 语法</span>
<span class="n">JavaRDD</span><span class="o" style="color:rgb(102,102,102);">&lt;</span><span class="n">String</span><span class="o" style="color:rgb(102,102,102);">&gt;</span> <span class="n">distFile</span> <span class="o" style="color:rgb(102,102,102);">=</span> <span class="n">sc</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="na" style="color:rgb(125,144,41);">textFile</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="s" style="color:rgb(186,33,33);">"data.txt"</span><span class="o" style="color:rgb(102,102,102);">);</span>

<span class="c1" style="color:rgb(64,128,128);font-style:italic;">// python 语法</span>
<span class="n">distFile</span> <span class="o" style="color:rgb(102,102,102);">=</span> <span class="n">sc</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="na" style="color:rgb(125,144,41);">textFile</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="s" style="color:rgb(186,33,33);">"data.txt"</span><span class="o" style="color:rgb(102,102,102);">)</span>
</code></pre>
</div>
<p>一些说明：</p>
<ul><li>引用的路径必须是绝对路径，并且必须在每一个 worker 节点上保持一致。</li><li>输入的地址可以是一个目录，也可以是正则匹配表达式，也可以是压缩的文件。</li><li>textFile 方法也可以通过输入一个可选的第二参数，来控制文件的分片数目。默认情况下，Spark 为每一块文件创建一个分片（HDFS 默认的块大小为64MB)，但是你也可以通过传入一个更大的值，来指定一个更高的片值，但不能指定一个比块数更小的片值。</li></ul><p>除了 TextFile，Spark 还支持其他格式的输入：</p>
<ul><li><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;color:rgb(199,37,78);background-color:rgb(254,251,243);">SparkContext.wholeTextFiles</code> 方法可以读取一个包含多个小文件的目录，并以
 filename，content 键值对的方式返回结果。</li><li>对于 SequenceFiles，可以使用 SparkContext 的 <code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;color:rgb(199,37,78);background-color:rgb(254,251,243);">sequenceFile[K,
 V]</code>` 方法创建。像 IntWritable 和 Text 一样，它们必须是 Hadoop 的 Writable 接口的子类。另外，对于几种通用 Writable 类型，Spark 允许你指定原生类型来替代。例如：sequencFile[Int, String] 将会自动读取 IntWritable 和 Texts。</li><li>对于其他类型的 Hadoop 输入格式，你可以使用 <code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;color:rgb(199,37,78);background-color:rgb(254,251,243);">SparkContext.hadoopRDD</code> 方法，它可以接收任意类型的
 JobConf 和输入格式类，键类型和值类型。按照像 Hadoop 作业一样的方法设置输入源就可以了。</li><li><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;color:rgb(199,37,78);background-color:rgb(254,251,243);">RDD.saveAsObjectFile</code> 和 <code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;color:rgb(199,37,78);background-color:rgb(254,251,243);">SparkContext.objectFile</code> 提供了以
 Java 序列化的简单方式来保存 RDD。虽然这种方式没有 Avro 高效，但也是一种简单的方式来保存任意的 RDD。</li></ul><h2 id="3.3-rdd-操作" style="font-family:inherit;font-weight:500;line-height:1.1;font-size:24px;">
3.3 RDD 操作</h2>
<p>RDD支持两种操作：</p>
<ul><li><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;color:rgb(199,37,78);background-color:rgb(254,251,243);">转换</code>：从现有的数据集创建一个新的数据集；</li><li><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;color:rgb(199,37,78);background-color:rgb(254,251,243);">动作</code>：在数据集上运行计算后，返回一个值给驱动程序。</li></ul><p>例如，map 是一种转换，它将数据集每一个元素都传递给函数，并返回一个新的分布数据集表示结果，而 reduce 是一种动作，通过一些函数将所有的元素叠加起来，并将最终结果返回给运行程序。</p>
<p>Spark 中的<code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;color:rgb(199,37,78);background-color:rgb(254,251,243);">所有转换都是惰性的</code>，也就是说，他们并不会直接计算结果。相反的，它们只是记住应用到基础数据集上的这些转换动作。只有当发生一个要求返回结果给运行程序的动作时，这些转换才会真正运行。</p>
<p>默认情况下，每一个转换过的 RDD 都会在你运行一个动作时被重新计算。不过，你也可以使用 <code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;color:rgb(199,37,78);background-color:rgb(254,251,243);">persist</code> 或者 <code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;color:rgb(199,37,78);background-color:rgb(254,251,243);">cache</code> 方法，持久化一个
 RDD 在内存中。在这种情况下，Spark 将会在集群中，保存相关元素，下次你查询这个 RDD 时，它将能更快速访问。除了持久化到内存，Spark 也支持在磁盘上持久化数据集，或在节点之间复制数据集。</p>
<p>Scala 示例：</p>
<div class="highlight">
<pre style="overflow:auto;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;line-height:1.42857143;color:rgb(51,51,51);background-color:rgb(248,248,248);"><code class="language-scala" style="font-family:Menlo, 'Andale Mono', Consolas, 'Courier New', Monaco, monospace;color:inherit;background-color:transparent;"><span class="k" style="color:rgb(0,128,0);font-weight:bold;">val</span> <span class="n">lines</span> <span class="k" style="color:rgb(0,128,0);font-weight:bold;">=</span> <span class="n">sc</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">textFile</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="s" style="color:rgb(186,33,33);">"data.txt"</span><span class="o" style="color:rgb(102,102,102);">)</span>
<span class="k" style="color:rgb(0,128,0);font-weight:bold;">val</span> <span class="n">lineLengths</span> <span class="k" style="color:rgb(0,128,0);font-weight:bold;">=</span> <span class="n">lines</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">map</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="n">s</span> <span class="k" style="color:rgb(0,128,0);font-weight:bold;">=&gt;</span> <span class="n">s</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">length</span><span class="o" style="color:rgb(102,102,102);">)</span>
<span class="k" style="color:rgb(0,128,0);font-weight:bold;">val</span> <span class="n">totalLength</span> <span class="k" style="color:rgb(0,128,0);font-weight:bold;">=</span> <span class="n">lineLengths</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">reduce</span><span class="o" style="color:rgb(102,102,102);">((</span><span class="n">a</span><span class="o" style="color:rgb(102,102,102);">,</span> <span class="n">b</span><span class="o" style="color:rgb(102,102,102);">)</span> <span class="k" style="color:rgb(0,128,0);font-weight:bold;">=&gt;</span> <span class="n">a</span> <span class="o" style="color:rgb(102,102,102);">+</span> <span class="n">b</span><span class="o" style="color:rgb(102,102,102);">)</span>
</code></pre>
</div>
<p>Java 示例：</p>
<div class="highlight">
<pre style="overflow:auto;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;line-height:1.42857143;color:rgb(51,51,51);background-color:rgb(248,248,248);"><code class="language-java" style="font-family:Menlo, 'Andale Mono', Consolas, 'Courier New', Monaco, monospace;color:inherit;background-color:transparent;"><span class="n">JavaRDD</span><span class="o" style="color:rgb(102,102,102);">&lt;</span><span class="n">String</span><span class="o" style="color:rgb(102,102,102);">&gt;</span> <span class="n">lines</span> <span class="o" style="color:rgb(102,102,102);">=</span> <span class="n">sc</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="na" style="color:rgb(125,144,41);">textFile</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="s" style="color:rgb(186,33,33);">"data.txt"</span><span class="o" style="color:rgb(102,102,102);">);</span>
<span class="n">JavaRDD</span><span class="o" style="color:rgb(102,102,102);">&lt;</span><span class="n">Integer</span><span class="o" style="color:rgb(102,102,102);">&gt;</span> <span class="n">lineLengths</span> <span class="o" style="color:rgb(102,102,102);">=</span> <span class="n">lines</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="na" style="color:rgb(125,144,41);">map</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="n">s</span> <span class="o" style="color:rgb(102,102,102);">-&gt;</span> <span class="n">s</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="na" style="color:rgb(125,144,41);">length</span><span class="o" style="color:rgb(102,102,102);">());</span>
<span class="kt" style="color:rgb(176,0,64);">int</span> <span class="n">totalLength</span> <span class="o" style="color:rgb(102,102,102);">=</span> <span class="n">lineLengths</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="na" style="color:rgb(125,144,41);">reduce</span><span class="o" style="color:rgb(102,102,102);">((</span><span class="n">a</span><span class="o" style="color:rgb(102,102,102);">,</span> <span class="n">b</span><span class="o" style="color:rgb(102,102,102);">)</span> <span class="o" style="color:rgb(102,102,102);">-&gt;</span> <span class="n">a</span> <span class="o" style="color:rgb(102,102,102);">+</span> <span class="n">b</span><span class="o" style="color:rgb(102,102,102);">);</span>
</code></pre>
</div>
<p>Python 示例：</p>
<div class="highlight">
<pre style="overflow:auto;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;line-height:1.42857143;color:rgb(51,51,51);background-color:rgb(248,248,248);"><code class="language-python" style="font-family:Menlo, 'Andale Mono', Consolas, 'Courier New', Monaco, monospace;color:inherit;background-color:transparent;"><span class="n">lines</span> <span class="o" style="color:rgb(102,102,102);">=</span> <span class="n">sc</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">textFile</span><span class="p">(</span><span class="s" style="color:rgb(186,33,33);">"data.txt"</span><span class="p">)</span>
<span class="n">lineLengths</span> <span class="o" style="color:rgb(102,102,102);">=</span> <span class="n">lines</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">map</span><span class="p">(</span><span class="k" style="color:rgb(0,128,0);font-weight:bold;">lambda</span> <span class="n">s</span><span class="p">:</span> <span class="nb" style="color:rgb(0,128,0);">len</span><span class="p">(</span><span class="n">s</span><span class="p">))</span>
<span class="n">totalLength</span> <span class="o" style="color:rgb(102,102,102);">=</span> <span class="n">lineLengths</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">reduce</span><span class="p">(</span><span class="k" style="color:rgb(0,128,0);font-weight:bold;">lambda</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="n">a</span> <span class="o" style="color:rgb(102,102,102);">+</span> <span class="n">b</span><span class="p">)</span>
</code></pre>
</div>
<p>代码说明：</p>
<ul><li>第一行定义了一个基础 RDD，但并没有开始载入内存，仅仅将 lines 指向了这个file</li><li>第二行也仅仅定义了 linelengths 是作为 map 的结果，但也没有开始运行 map 这个过程</li><li>直到第三句话才开始运行，各个 worker 节点开始运行自己的 map、reduce 过程</li></ul><p>你也可以调用 <code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;color:rgb(199,37,78);background-color:rgb(254,251,243);">lineLengths.persist()</code> 来持久化
 RDD。</p>
<p>除了使用 lambda 表达式，也可以通过函数来运行转换或者动作，使用函数需要注意局部变量的作用域问题。</p>
<p>例如下面的 Python 代码中的 field 变量：</p>
<div class="highlight">
<pre style="overflow:auto;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;line-height:1.42857143;color:rgb(51,51,51);background-color:rgb(248,248,248);"><code class="language-python" style="font-family:Menlo, 'Andale Mono', Consolas, 'Courier New', Monaco, monospace;color:inherit;background-color:transparent;"><span class="k" style="color:rgb(0,128,0);font-weight:bold;">class</span> <span class="nc" style="color:rgb(0,0,255);font-weight:bold;">MyClass</span><span class="p">(</span><span class="nb" style="color:rgb(0,128,0);">object</span><span class="p">):</span>
    <span class="k" style="color:rgb(0,128,0);font-weight:bold;">def</span> <span class="nf" style="color:rgb(0,0,255);">__init__</span><span class="p">(</span><span class="bp" style="color:rgb(0,128,0);">self</span><span class="p">):</span>
        <span class="bp" style="color:rgb(0,128,0);">self</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">field</span> <span class="o" style="color:rgb(102,102,102);">=</span> <span class="s" style="color:rgb(186,33,33);">"Hello"</span>

    <span class="k" style="color:rgb(0,128,0);font-weight:bold;">def</span> <span class="nf" style="color:rgb(0,0,255);">doStuff</span><span class="p">(</span><span class="bp" style="color:rgb(0,128,0);">self</span><span class="p">,</span> <span class="n">rdd</span><span class="p">):</span>
        <span class="n">field</span> <span class="o" style="color:rgb(102,102,102);">=</span> <span class="bp" style="color:rgb(0,128,0);">self</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">field</span>
        <span class="k" style="color:rgb(0,128,0);font-weight:bold;">return</span> <span class="n">rdd</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">map</span><span class="p">(</span><span class="k" style="color:rgb(0,128,0);font-weight:bold;">lambda</span> <span class="n">s</span><span class="p">:</span> <span class="n">field</span> <span class="o" style="color:rgb(102,102,102);">+</span> <span class="n">x</span><span class="p">)</span>    
</code></pre>
</div>
<p>如果使用 Java 语言，则需要用到匿名内部类：</p>
<div class="highlight">
<pre style="overflow:auto;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;line-height:1.42857143;color:rgb(51,51,51);background-color:rgb(248,248,248);"><code class="language-java" style="font-family:Menlo, 'Andale Mono', Consolas, 'Courier New', Monaco, monospace;color:inherit;background-color:transparent;"><span class="kd" style="color:rgb(0,128,0);font-weight:bold;">class</span> <span class="nc" style="color:rgb(0,0,255);font-weight:bold;">GetLength</span> <span class="kd" style="color:rgb(0,128,0);font-weight:bold;">implements</span> <span class="n">Function</span><span class="o" style="color:rgb(102,102,102);">&lt;</span><span class="n">String</span><span class="o" style="color:rgb(102,102,102);">,</span> <span class="n">Integer</span><span class="o" style="color:rgb(102,102,102);">&gt;</span> <span class="o" style="color:rgb(102,102,102);">{</span>
  <span class="kd" style="color:rgb(0,128,0);font-weight:bold;">public</span> <span class="n">Integer</span> <span class="nf" style="color:rgb(0,0,255);">call</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="n">String</span> <span class="n">s</span><span class="o" style="color:rgb(102,102,102);">)</span> <span class="o" style="color:rgb(102,102,102);">{</span> <span class="k" style="color:rgb(0,128,0);font-weight:bold;">return</span> <span class="n">s</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="na" style="color:rgb(125,144,41);">length</span><span class="o" style="color:rgb(102,102,102);">();</span> <span class="o" style="color:rgb(102,102,102);">}</span>
<span class="o" style="color:rgb(102,102,102);">}</span>
<span class="kd" style="color:rgb(0,128,0);font-weight:bold;">class</span> <span class="nc" style="color:rgb(0,0,255);font-weight:bold;">Sum</span> <span class="kd" style="color:rgb(0,128,0);font-weight:bold;">implements</span> <span class="n">Function2</span><span class="o" style="color:rgb(102,102,102);">&lt;</span><span class="n">Integer</span><span class="o" style="color:rgb(102,102,102);">,</span> <span class="n">Integer</span><span class="o" style="color:rgb(102,102,102);">,</span> <span class="n">Integer</span><span class="o" style="color:rgb(102,102,102);">&gt;</span> <span class="o" style="color:rgb(102,102,102);">{</span>
  <span class="kd" style="color:rgb(0,128,0);font-weight:bold;">public</span> <span class="n">Integer</span> <span class="nf" style="color:rgb(0,0,255);">call</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="n">Integer</span> <span class="n">a</span><span class="o" style="color:rgb(102,102,102);">,</span> <span class="n">Integer</span> <span class="n">b</span><span class="o" style="color:rgb(102,102,102);">)</span> <span class="o" style="color:rgb(102,102,102);">{</span> <span class="k" style="color:rgb(0,128,0);font-weight:bold;">return</span> <span class="n">a</span> <span class="o" style="color:rgb(102,102,102);">+</span> <span class="n">b</span><span class="o" style="color:rgb(102,102,102);">;</span> <span class="o" style="color:rgb(102,102,102);">}</span>
<span class="o" style="color:rgb(102,102,102);">}</span>

<span class="n">JavaRDD</span><span class="o" style="color:rgb(102,102,102);">&lt;</span><span class="n">String</span><span class="o" style="color:rgb(102,102,102);">&gt;</span> <span class="n">lines</span> <span class="o" style="color:rgb(102,102,102);">=</span> <span class="n">sc</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="na" style="color:rgb(125,144,41);">textFile</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="s" style="color:rgb(186,33,33);">"data.txt"</span><span class="o" style="color:rgb(102,102,102);">);</span>
<span class="n">JavaRDD</span><span class="o" style="color:rgb(102,102,102);">&lt;</span><span class="n">Integer</span><span class="o" style="color:rgb(102,102,102);">&gt;</span> <span class="n">lineLengths</span> <span class="o" style="color:rgb(102,102,102);">=</span> <span class="n">lines</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="na" style="color:rgb(125,144,41);">map</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="k" style="color:rgb(0,128,0);font-weight:bold;">new</span> <span class="nf" style="color:rgb(0,0,255);">GetLength</span><span class="o" style="color:rgb(102,102,102);">());</span>
<span class="kt" style="color:rgb(176,0,64);">int</span> <span class="n">totalLength</span> <span class="o" style="color:rgb(102,102,102);">=</span> <span class="n">lineLengths</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="na" style="color:rgb(125,144,41);">reduce</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="k" style="color:rgb(0,128,0);font-weight:bold;">new</span> <span class="nf" style="color:rgb(0,0,255);">Sum</span><span class="o" style="color:rgb(102,102,102);">());</span>
</code></pre>
</div>
<p>Spark 也支持键值对的操作，这在分组和聚合操作时候用得到。定义一个键值对对象时，需要自定义该对象的 equals() 和 hashCode() 方法。</p>
<p>在 Scala 中有一个 <a href="http://www.scala-lang.org/api/2.10.4/index.html#scala.Tuple2" rel="nofollow" style="background-color:transparent;text-decoration:none;">Tuple2</a> 对象表示键值对，这是一个内置的对象，通过 <code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;color:rgb(199,37,78);background-color:rgb(254,251,243);">(a,b)</code> 就可以创建一个
 Tuple2 对象。在你的程序中，通过导入 <code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;color:rgb(199,37,78);background-color:rgb(254,251,243);">org.apache.spark.SparkContext._</code> 就可以对 Tuple2 进行操作。对键值对的操作方法，可以查看 <a href="http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.rdd.PairRDDFunctions" rel="nofollow" style="background-color:transparent;text-decoration:none;">PairRDDFunctions</a></p>
<p>下面是一个用 scala 统计单词出现次数的例子：</p>
<div class="highlight">
<pre style="overflow:auto;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;line-height:1.42857143;color:rgb(51,51,51);background-color:rgb(248,248,248);"><code class="language-scala" style="font-family:Menlo, 'Andale Mono', Consolas, 'Courier New', Monaco, monospace;color:inherit;background-color:transparent;"><span class="k" style="color:rgb(0,128,0);font-weight:bold;">val</span> <span class="n">lines</span> <span class="k" style="color:rgb(0,128,0);font-weight:bold;">=</span> <span class="n">sc</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">textFile</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="s" style="color:rgb(186,33,33);">"data.txt"</span><span class="o" style="color:rgb(102,102,102);">)</span>
<span class="k" style="color:rgb(0,128,0);font-weight:bold;">val</span> <span class="n">pairs</span> <span class="k" style="color:rgb(0,128,0);font-weight:bold;">=</span> <span class="n">lines</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">map</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="n">s</span> <span class="k" style="color:rgb(0,128,0);font-weight:bold;">=&gt;</span> <span class="o" style="color:rgb(102,102,102);">(</span><span class="n">s</span><span class="o" style="color:rgb(102,102,102);">,</span> <span class="mi" style="color:rgb(102,102,102);">1</span><span class="o" style="color:rgb(102,102,102);">))</span>
<span class="k" style="color:rgb(0,128,0);font-weight:bold;">val</span> <span class="n">counts</span> <span class="k" style="color:rgb(0,128,0);font-weight:bold;">=</span> <span class="n">pairs</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">reduceByKey</span><span class="o" style="color:rgb(102,102,102);">((</span><span class="n">a</span><span class="o" style="color:rgb(102,102,102);">,</span> <span class="n">b</span><span class="o" style="color:rgb(102,102,102);">)</span> <span class="k" style="color:rgb(0,128,0);font-weight:bold;">=&gt;</span> <span class="n">a</span> <span class="o" style="color:rgb(102,102,102);">+</span> <span class="n">b</span><span class="o" style="color:rgb(102,102,102);">)</span>
</code></pre>
</div>
<p>接下来，你还可以执行 <code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;color:rgb(199,37,78);background-color:rgb(254,251,243);">counts.sortByKey()</code>、<code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;color:rgb(199,37,78);background-color:rgb(254,251,243);">counts.collect()</code> 等操作。</p>
<p>如果用 Java 统计，则代码如下：</p>
<div class="highlight">
<pre style="overflow:auto;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;line-height:1.42857143;color:rgb(51,51,51);background-color:rgb(248,248,248);"><code class="language-java" style="font-family:Menlo, 'Andale Mono', Consolas, 'Courier New', Monaco, monospace;color:inherit;background-color:transparent;"><span class="n">JavaRDD</span><span class="o" style="color:rgb(102,102,102);">&lt;</span><span class="n">String</span><span class="o" style="color:rgb(102,102,102);">&gt;</span> <span class="n">lines</span> <span class="o" style="color:rgb(102,102,102);">=</span> <span class="n">sc</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="na" style="color:rgb(125,144,41);">textFile</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="s" style="color:rgb(186,33,33);">"data.txt"</span><span class="o" style="color:rgb(102,102,102);">);</span>
<span class="n">JavaPairRDD</span><span class="o" style="color:rgb(102,102,102);">&lt;</span><span class="n">String</span><span class="o" style="color:rgb(102,102,102);">,</span> <span class="n">Integer</span><span class="o" style="color:rgb(102,102,102);">&gt;</span> <span class="n">pairs</span> <span class="o" style="color:rgb(102,102,102);">=</span> <span class="n">lines</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="na" style="color:rgb(125,144,41);">mapToPair</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="n">s</span> <span class="o" style="color:rgb(102,102,102);">-&gt;</span> <span class="k" style="color:rgb(0,128,0);font-weight:bold;">new</span> <span class="nf" style="color:rgb(0,0,255);">Tuple2</span><span class="o" style="color:rgb(102,102,102);">(</span><span class="n">s</span><span class="o" style="color:rgb(102,102,102);">,</span> <span class="mi" style="color:rgb(102,102,102);">1</span><span class="o" style="color:rgb(102,102,102);">));</span>
<span class="n">JavaPairRDD</span><span class="o" style="color:rgb(102,102,102);">&lt;</span><span class="n">String</span><span class="o" style="color:rgb(102,102,102);">,</span> <span class="n">Integer</span><span class="o" style="color:rgb(102,102,102);">&gt;</span> <span class="n">counts</span> <span class="o" style="color:rgb(102,102,102);">=</span> <span class="n">pairs</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="na" style="color:rgb(125,144,41);">reduceByKey</span><span class="o" style="color:rgb(102,102,102);">((</span><span class="n">a</span><span class="o" style="color:rgb(102,102,102);">,</span> <span class="n">b</span><span class="o" style="color:rgb(102,102,102);">)</span> <span class="o" style="color:rgb(102,102,102);">-&gt;</span> <span class="n">a</span> <span class="o" style="color:rgb(102,102,102);">+</span> <span class="n">b</span><span class="o" style="color:rgb(102,102,102);">);</span>
</code></pre>
</div>
<p>用 Python 统计，代码如下：</p>
<div class="highlight">
<pre style="overflow:auto;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;line-height:1.42857143;color:rgb(51,51,51);background-color:rgb(248,248,248);"><code class="language-python" style="font-family:Menlo, 'Andale Mono', Consolas, 'Courier New', Monaco, monospace;color:inherit;background-color:transparent;"><span class="n">lines</span> <span class="o" style="color:rgb(102,102,102);">=</span> <span class="n">sc</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">textFile</span><span class="p">(</span><span class="s" style="color:rgb(186,33,33);">"data.txt"</span><span class="p">)</span>
<span class="n">pairs</span> <span class="o" style="color:rgb(102,102,102);">=</span> <span class="n">lines</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">map</span><span class="p">(</span><span class="k" style="color:rgb(0,128,0);font-weight:bold;">lambda</span> <span class="n">s</span><span class="p">:</span> <span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="mi" style="color:rgb(102,102,102);">1</span><span class="p">))</span>
<span class="n">counts</span> <span class="o" style="color:rgb(102,102,102);">=</span> <span class="n">pairs</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">reduceByKey</span><span class="p">(</span><span class="k" style="color:rgb(0,128,0);font-weight:bold;">lambda</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="n">a</span> <span class="o" style="color:rgb(102,102,102);">+</span> <span class="n">b</span><span class="p">)</span>
</code></pre>
</div>
<h3 id="测试" style="font-family:inherit;font-weight:500;line-height:1.1;font-size:18px;">
测试</h3>
<p>现在来结合上面的例子实现一个完整的例子。下面，我们来 <a href="http://segmentfault.com/blog/whuwb/1190000000723037" rel="nofollow" style="background-color:transparent;text-decoration:none;">分析 Nginx 日志中状态码出现次数</a>，并且将结果按照状态码从小到大排序。</p>
<p>先将测试数据上传到 hdfs:</p>
<div class="highlight">
<pre style="overflow:auto;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;line-height:1.42857143;color:rgb(51,51,51);background-color:rgb(248,248,248);"><code class="language-bash" style="font-family:Menlo, 'Andale Mono', Consolas, 'Courier New', Monaco, monospace;color:inherit;background-color:transparent;"><span class="nv" style="color:rgb(25,23,124);">$ </span>hadoop fs -put access.log
</code></pre>
</div>
<p>然后，编写一个 python 文件，保存为 SimpleApp.py：</p>
<div class="highlight">
<pre style="overflow:auto;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;line-height:1.42857143;color:rgb(51,51,51);background-color:rgb(248,248,248);"><code class="language-python" style="font-family:Menlo, 'Andale Mono', Consolas, 'Courier New', Monaco, monospace;color:inherit;background-color:transparent;"><span class="kn" style="color:rgb(0,128,0);font-weight:bold;">from</span> <span class="nn" style="color:rgb(0,0,255);font-weight:bold;">pyspark</span> <span class="kn" style="color:rgb(0,128,0);font-weight:bold;">import</span> <span class="n">SparkContext</span>

<span class="n">logFile</span> <span class="o" style="color:rgb(102,102,102);">=</span> <span class="s" style="color:rgb(186,33,33);">"access.log"</span>

<span class="n">sc</span> <span class="o" style="color:rgb(102,102,102);">=</span> <span class="n">SparkContext</span><span class="p">(</span><span class="s" style="color:rgb(186,33,33);">"local"</span><span class="p">,</span> <span class="s" style="color:rgb(186,33,33);">"Simple App"</span><span class="p">)</span>

<span class="n">logData</span> <span class="o" style="color:rgb(102,102,102);">=</span> <span class="n">sc</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">textFile</span><span class="p">(</span><span class="n">logFile</span><span class="p">)</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">cache</span><span class="p">()</span>

<span class="n">counts</span> <span class="o" style="color:rgb(102,102,102);">=</span> <span class="n">logData</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">map</span><span class="p">(</span><span class="k" style="color:rgb(0,128,0);font-weight:bold;">lambda</span> <span class="n">line</span><span class="p">:</span> <span class="n">line</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">split</span><span class="p">()[</span><span class="mi" style="color:rgb(102,102,102);">8</span><span class="p">])</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">map</span><span class="p">(</span><span class="k" style="color:rgb(0,128,0);font-weight:bold;">lambda</span> <span class="n">word</span><span class="p">:</span> <span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="mi" style="color:rgb(102,102,102);">1</span><span class="p">))</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">reduceByKey</span><span class="p">(</span><span class="k" style="color:rgb(0,128,0);font-weight:bold;">lambda</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="n">a</span> <span class="o" style="color:rgb(102,102,102);">+</span> <span class="n">b</span><span class="p">)</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">sortByKey</span><span class="p">(</span><span class="k" style="color:rgb(0,128,0);font-weight:bold;">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">)</span> 

<span class="c" style="color:rgb(64,128,128);font-style:italic;"># This is just a demo on how to bring all the sorted data back to a single node.  </span>
<span class="c" style="color:rgb(64,128,128);font-style:italic;"># In reality, we wouldn't want to collect all the data to the driver node.</span>
<span class="n">output</span> <span class="o" style="color:rgb(102,102,102);">=</span> <span class="n">counts</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">collect</span><span class="p">()</span>  
<span class="k" style="color:rgb(0,128,0);font-weight:bold;">for</span> <span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="n">count</span><span class="p">)</span> <span class="ow" style="color:rgb(170,34,255);font-weight:bold;">in</span> <span class="n">output</span><span class="p">:</span>  
    <span class="k" style="color:rgb(0,128,0);font-weight:bold;">print</span> <span class="s" style="color:rgb(186,33,33);">"</span><span class="si" style="color:rgb(187,102,136);font-weight:bold;">%s</span><span class="s" style="color:rgb(186,33,33);">: </span><span class="si" style="color:rgb(187,102,136);font-weight:bold;">%i</span><span class="s" style="color:rgb(186,33,33);">"</span> <span class="o" style="color:rgb(102,102,102);">%</span> <span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="n">count</span><span class="p">)</span>  

<span class="n">counts</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">saveAsTextFile</span><span class="p">(</span><span class="s" style="color:rgb(186,33,33);">"spark_results"</span><span class="p">)</span>

<span class="n">sc</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="n">stop</span><span class="p">()</span>
</code></pre>
</div>
<p>接下来，运行下面代码：</p>
<div class="highlight">
<pre style="overflow:auto;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;line-height:1.42857143;color:rgb(51,51,51);background-color:rgb(248,248,248);"><code class="language-bash" style="font-family:Menlo, 'Andale Mono', Consolas, 'Courier New', Monaco, monospace;color:inherit;background-color:transparent;"><span class="nv" style="color:rgb(25,23,124);">$ </span>spark-submit  --master <span class="nb" style="color:rgb(0,128,0);">local</span><span class="o" style="color:rgb(102,102,102);">[</span>4<span class="o" style="color:rgb(102,102,102);">]</span>   SimpleApp.py
</code></pre>
</div>
<p>运行成功之后，你会在终端看到以下输出：</p>
<div class="highlight">
<pre style="overflow:auto;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;line-height:1.42857143;color:rgb(51,51,51);background-color:rgb(248,248,248);"><code class="language-java" style="font-family:Menlo, 'Andale Mono', Consolas, 'Courier New', Monaco, monospace;color:inherit;background-color:transparent;"><span class="mi" style="color:rgb(102,102,102);">200</span><span class="o" style="color:rgb(102,102,102);">:</span> <span class="mi" style="color:rgb(102,102,102);">6827</span>
<span class="mi" style="color:rgb(102,102,102);">206</span><span class="o" style="color:rgb(102,102,102);">:</span> <span class="mi" style="color:rgb(102,102,102);">120</span>
<span class="mi" style="color:rgb(102,102,102);">301</span><span class="o" style="color:rgb(102,102,102);">:</span> <span class="mi" style="color:rgb(102,102,102);">7</span>
<span class="mi" style="color:rgb(102,102,102);">304</span><span class="o" style="color:rgb(102,102,102);">:</span> <span class="mi" style="color:rgb(102,102,102);">10</span>
<span class="mi" style="color:rgb(102,102,102);">403</span><span class="o" style="color:rgb(102,102,102);">:</span> <span class="mi" style="color:rgb(102,102,102);">38</span>
<span class="mi" style="color:rgb(102,102,102);">404</span><span class="o" style="color:rgb(102,102,102);">:</span> <span class="mi" style="color:rgb(102,102,102);">125</span>
<span class="mi" style="color:rgb(102,102,102);">416</span><span class="o" style="color:rgb(102,102,102);">:</span> <span class="mi" style="color:rgb(102,102,102);">1</span>
</code></pre>
</div>
<p>并且，在hdfs 上 /user/spark/spark_results/part-00000 内容如下：</p>
<div class="highlight">
<pre style="overflow:auto;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;line-height:1.42857143;color:rgb(51,51,51);background-color:rgb(248,248,248);"><code class="language-python" style="font-family:Menlo, 'Andale Mono', Consolas, 'Courier New', Monaco, monospace;color:inherit;background-color:transparent;"><span class="p">(</span><span class="s" style="color:rgb(186,33,33);">u'200'</span><span class="p">,</span> <span class="mi" style="color:rgb(102,102,102);">6827</span><span class="p">)</span>
<span class="p">(</span><span class="s" style="color:rgb(186,33,33);">u'206'</span><span class="p">,</span> <span class="mi" style="color:rgb(102,102,102);">120</span><span class="p">)</span>
<span class="p">(</span><span class="s" style="color:rgb(186,33,33);">u'301'</span><span class="p">,</span> <span class="mi" style="color:rgb(102,102,102);">7</span><span class="p">)</span>
<span class="p">(</span><span class="s" style="color:rgb(186,33,33);">u'304'</span><span class="p">,</span> <span class="mi" style="color:rgb(102,102,102);">10</span><span class="p">)</span>
<span class="p">(</span><span class="s" style="color:rgb(186,33,33);">u'403'</span><span class="p">,</span> <span class="mi" style="color:rgb(102,102,102);">38</span><span class="p">)</span>
<span class="p">(</span><span class="s" style="color:rgb(186,33,33);">u'404'</span><span class="p">,</span> <span class="mi" style="color:rgb(102,102,102);">125</span><span class="p">)</span>
<span class="p">(</span><span class="s" style="color:rgb(186,33,33);">u'416'</span><span class="p">,</span> <span class="mi" style="color:rgb(102,102,102);">1</span><span class="p">)</span>
</code></pre>
</div>
<p>其实，这个例子和官方提供的例子很相像，具体请看 <a href="https://github.com/apache/spark/blob/master/examples/src/main/python/wordcount.py" rel="nofollow" style="background-color:transparent;text-decoration:none;">wordcount.py</a>。</p>
<h3 id="常见的转换" style="font-family:inherit;font-weight:500;line-height:1.1;font-size:18px;">
常见的转换</h3>
<table style="border-spacing:0px;border-collapse:collapse;background-color:transparent;font-size:13px;"><thead><tr><th style="border-width:0px 1px 2px;border-style:none solid solid;vertical-align:bottom;">
转换</th>
<th style="border-width:0px 1px 2px;border-style:none solid solid;vertical-align:bottom;">
含义</th>
</tr></thead><tbody><tr><td style="vertical-align:middle;"><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">map(func)</code></td>
<td style="vertical-align:middle;">返回一个新分布式数据集，由每一个输入元素经过func函数转换后组成</td>
</tr><tr><td style="vertical-align:middle;"><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">filter(func)</code></td>
<td style="vertical-align:middle;">返回一个新数据集，由经过func函数计算后返回值为 true 的输入元素组成</td>
</tr><tr><td style="vertical-align:middle;"><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">flatMap(func)</code></td>
<td style="vertical-align:middle;">类似于 map，但是每一个输入元素可以被映射为0或多个输出元素，因此 func 应该返回一个序列</td>
</tr><tr><td style="vertical-align:middle;"><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">mapPartitions(func)</code></td>
<td style="vertical-align:middle;">类似于 map，但独立地在 RDD 的每一个分块上运行，因此在类型为 T 的 RDD 上运行时，func 的函数类型必须是 <code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">Iterator[T]
 ⇒ Iterator[U]</code></td>
</tr><tr><td style="vertical-align:middle;"><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">mapPartitionsWithSplit(func)</code></td>
<td style="vertical-align:middle;">类似于 mapPartitions, 但 func 带有一个整数参数表示分块的索引值。因此在类型为 T的RDD上运行时，func 的函数类型必须是 <code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">(Int,
 Iterator[T]) ⇒ Iterator[U]</code></td>
</tr><tr><td style="vertical-align:middle;"><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">sample(withReplacement,fraction, seed)</code></td>
<td style="vertical-align:middle;">根据 fraction 指定的比例，对数据进行采样，可以选择是否用随机数进行替换，seed 用于指定随机数生成器种子</td>
</tr><tr><td style="vertical-align:middle;"><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">union(otherDataset)</code></td>
<td style="vertical-align:middle;">返回一个新的数据集，新数据集是由源数据集和参数数据集联合而成</td>
</tr><tr><td style="vertical-align:middle;"><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">distinct([numTasks]))</code></td>
<td style="vertical-align:middle;">返回一个包含源数据集中所有不重复元素的新数据集</td>
</tr><tr><td style="vertical-align:middle;"><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">groupByKey([numTasks])</code></td>
<td style="vertical-align:middle;">在一个键值对的数据集上调用，返回一个<code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">(K，Seq[V])</code>对的数据集 。注意：默认情况下，只有8个并行任务来做操作，但是你可以传入一个可选的
 numTasks 参数来改变它</td>
</tr><tr><td style="vertical-align:middle;"><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">reduceByKey(func, [numTasks])</code></td>
<td style="vertical-align:middle;">在一个键值对的数据集上调用时，返回一个键值对的数据集，使用指定的 reduce 函数，将相同 key 的值聚合到一起。类似 groupByKey，reduce 任务个数是可以通过第二个可选参数来配置的</td>
</tr><tr><td style="vertical-align:middle;"><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">sortByKey([ascending], [numTasks])</code></td>
<td style="vertical-align:middle;">在一个键值对的数据集上调用，K 必须实现 <code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">Ordered</code> 接口，返回一个按照
 Key 进行排序的键值对数据集。升序或降序由 ascending 布尔参数决定</td>
</tr><tr><td style="vertical-align:middle;"><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">join(otherDataset, [numTasks])</code></td>
<td style="vertical-align:middle;">在类型为（K,V)和（K,W) 类型的数据集上调用时，返回一个相同key对应的所有元素对在一起的 <code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">(K,
 (V, W))</code> 数据集</td>
</tr><tr><td style="vertical-align:middle;"><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">cogroup(otherDataset, [numTasks])</code></td>
<td style="vertical-align:middle;">在类型为（K,V)和（K,W) 的数据集上调用，返回一个 <code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">(K, Seq[V], Seq[W])</code> 元组的数据集。这个操作也可以称之为
 groupwith</td>
</tr><tr><td style="vertical-align:middle;"><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">cartesian(otherDataset)</code></td>
<td style="vertical-align:middle;">笛卡尔积，在类型为 T 和 U 类型的数据集上调用时，返回一个 (T, U) 对数据集(两两的元素对)</td>
</tr><tr><td style="vertical-align:middle;"><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">pipe(command, [envVars])</code></td>
<td style="vertical-align:middle;">对 RDD 进行管道操作</td>
</tr><tr><td style="vertical-align:middle;"><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">coalesce(numPartitions)</code></td>
<td style="vertical-align:middle;">减少 RDD 的分区数到指定值。在过滤大量数据之后，可以执行此操作</td>
</tr><tr><td style="vertical-align:middle;"><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">repartition(numPartitions)</code></td>
<td style="vertical-align:middle;">重新给 RDD 分区</td>
</tr><tr><td style="vertical-align:middle;"><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">repartitionAndSortWithinPartitions(partitioner)</code></td>
<td style="vertical-align:middle;">重新给 RDD 分区，并且每个分区内以记录的 key 排序</td>
</tr></tbody></table><h3 id="常用的动作" style="font-family:inherit;font-weight:500;line-height:1.1;font-size:18px;">
常用的动作</h3>
<p>常用的动作列表</p>
<table style="border-spacing:0px;border-collapse:collapse;background-color:transparent;font-size:13px;"><thead><tr><th style="border-width:0px 1px 2px;border-style:none solid solid;vertical-align:bottom;">
动作</th>
<th style="border-width:0px 1px 2px;border-style:none solid solid;vertical-align:bottom;">
含义</th>
</tr></thead><tbody><tr><td style="vertical-align:middle;"><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">reduce(func)</code></td>
<td style="vertical-align:middle;">通过函数 func 聚集数据集中的所有元素。这个功能必须可交换且可关联的，从而可以正确的被并行执行。</td>
</tr><tr><td style="vertical-align:middle;"><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">collect()</code></td>
<td style="vertical-align:middle;">在驱动程序中，以数组的形式，返回数据集的所有元素。这通常会在使用 filter 或者其它操作并返回一个足够小的数据子集后再使用会比较有用。</td>
</tr><tr><td style="vertical-align:middle;"><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">count()</code></td>
<td style="vertical-align:middle;">返回数据集的元素的个数。</td>
</tr><tr><td style="vertical-align:middle;"><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">first()</code></td>
<td style="vertical-align:middle;">返回数据集的第一个元素，类似于 <code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">take(1)</code></td>
</tr><tr><td style="vertical-align:middle;"><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">take(n)</code></td>
<td style="vertical-align:middle;">返回一个由数据集的前 n 个元素组成的数组。注意，这个操作目前并非并行执行，而是由驱动程序计算所有的元素</td>
</tr><tr><td style="vertical-align:middle;"><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">takeSample(withReplacement,num, seed)</code></td>
<td style="vertical-align:middle;">返回一个数组，在数据集中随机采样 num 个元素组成，可以选择是否用随机数替换不足的部分，seed 用于指定的随机数生成器种子</td>
</tr><tr><td style="vertical-align:middle;"><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">takeOrdered(n, [ordering])</code></td>
<td style="vertical-align:middle;">返回自然顺序或者自定义顺序的前 n 个元素</td>
</tr><tr><td style="vertical-align:middle;"><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">saveAsTextFile(path)</code></td>
<td style="vertical-align:middle;">将数据集的元素，以 textfile 的形式，保存到本地文件系统，HDFS或者任何其它 hadoop 支持的文件系统。对于每个元素，Spark 将会调用 <code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">toString</code> 方法，将它转换为文件中的文本行</td>
</tr><tr><td style="vertical-align:middle;"><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">saveAsSequenceFile(path)</code> (Java and Scala)</td>
<td style="vertical-align:middle;">将数据集的元素，以 Hadoop sequencefile 的格式保存到指定的目录下</td>
</tr><tr><td style="vertical-align:middle;"><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">saveAsObjectFile(path)</code> (Java and Scala)</td>
<td style="vertical-align:middle;">将数据集的元素，以 Java 序列化的方式保存到指定的目录下</td>
</tr><tr><td style="vertical-align:middle;"><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">countByKey()</code></td>
<td style="vertical-align:middle;">对(K,V)类型的 RDD 有效，返回一个 (K，Int) 对的 Map，表示每一个key对应的元素个数</td>
</tr><tr><td style="vertical-align:middle;"><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">foreach(func)</code></td>
<td style="vertical-align:middle;">在数据集的每一个元素上，运行函数 func 进行更新。这通常用于边缘效果，例如更新一个累加器，或者和外部存储系统进行交互，例如HBase</td>
</tr></tbody></table><h2 id="3.4-rdd持久化" style="font-family:inherit;font-weight:500;line-height:1.1;font-size:24px;">
3.4 RDD持久化</h2>
<p>Spark 最重要的一个功能，就是在不同操作间，持久化（或缓存）一个数据集在内存中，这将使得后续的动作变得更加迅速。缓存是用 Spark 构建迭代算法的关键。 使用以下两种方法可以标记要缓存的 RDD：</p>
<div class="highlight">
<pre style="overflow:auto;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;line-height:1.42857143;color:rgb(51,51,51);background-color:rgb(248,248,248);"><code class="language-java" style="font-family:Menlo, 'Andale Mono', Consolas, 'Courier New', Monaco, monospace;color:inherit;background-color:transparent;"><span class="n">lineLengths</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="na" style="color:rgb(125,144,41);">persist</span><span class="o" style="color:rgb(102,102,102);">()</span>  
<span class="n">lineLengths</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="na" style="color:rgb(125,144,41);">cache</span><span class="o" style="color:rgb(102,102,102);">()</span> 
</code></pre>
</div>
<p>取消缓存则用：</p>
<div class="highlight">
<pre style="overflow:auto;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;line-height:1.42857143;color:rgb(51,51,51);background-color:rgb(248,248,248);"><code class="language-java" style="font-family:Menlo, 'Andale Mono', Consolas, 'Courier New', Monaco, monospace;color:inherit;background-color:transparent;"><span class="n">lineLengths</span><span class="o" style="color:rgb(102,102,102);">.</span><span class="na" style="color:rgb(125,144,41);">unpersist</span><span class="o" style="color:rgb(102,102,102);">()</span>
</code></pre>
</div>
<p>每一个RDD都可以用不同的保存级别进行保存，通过将一个 <code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;color:rgb(199,37,78);background-color:rgb(254,251,243);">org.apache.spark.storage.StorageLevel</code> 对象传递给 <code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;color:rgb(199,37,78);background-color:rgb(254,251,243);">persist(self,
 storageLevel)</code> 可以控制 RDD 持久化到磁盘、内存或者是跨节点复制等等。<code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;color:rgb(199,37,78);background-color:rgb(254,251,243);">cache()</code> 方法是使用默认存储级别的快捷方法，也就是 <code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;color:rgb(199,37,78);background-color:rgb(254,251,243);">StorageLevel.MEMORY_ONLY</code>。
 完整的可选存储级别如下：</p>
<table style="border-spacing:0px;border-collapse:collapse;background-color:transparent;font-size:13px;"><thead><tr><th style="border-width:0px 1px 2px;border-style:none solid solid;vertical-align:bottom;">
存储级别</th>
<th style="border-width:0px 1px 2px;border-style:none solid solid;vertical-align:bottom;">
意义</th>
</tr></thead><tbody><tr><td style="vertical-align:middle;"><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">MEMORY_ONLY</code></td>
<td style="vertical-align:middle;">默认的级别， 将 RDD 作为反序列化的的对象存储在 JVM 中。如果不能被内存装下，一些分区将不会被缓存，并且在需要的时候被重新计算</td>
</tr><tr><td style="vertical-align:middle;"><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">MEMORY_AND_DISK</code></td>
<td style="vertical-align:middle;">将 RDD 作为反序列化的的对象存储在 JVM 中。如果不能被与内存装下，超出的分区将被保存在硬盘上，并且在需要时被读取</td>
</tr><tr><td style="vertical-align:middle;"><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">MEMORY_ONLY_SER</code></td>
<td style="vertical-align:middle;">将 RDD 作为序列化的的对象进行存储（每一分区占用一个字节数组）。通常来说，这比将对象反序列化的空间利用率更高，尤其当使用fast serializer,但在读取时会比较占用CPU</td>
</tr><tr><td style="vertical-align:middle;"><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">MEMORY_AND_DISK_SER</code></td>
<td style="vertical-align:middle;">与 <code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">MEMORY_ONLY_SER</code> 相似，但是把超出内存的分区将存储在硬盘上而不是在每次需要的时候重新计算</td>
</tr><tr><td style="vertical-align:middle;"><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">DISK_ONLY</code></td>
<td style="vertical-align:middle;">只将 RDD 分区存储在硬盘上</td>
</tr><tr><td style="vertical-align:middle;"><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">MEMORY_ONLY_2</code>、<code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">MEMORY_AND_DISK_2</code>等</td>
<td style="vertical-align:middle;">与上述的存储级别一样，但是将每一个分区都复制到两个集群结点上</td>
</tr><tr><td style="vertical-align:middle;"><code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(199,37,78);background-color:rgb(254,251,243);">OFF_HEAP</code></td>
<td style="vertical-align:middle;">开发中</td>
</tr></tbody></table><p>Spark 的不同存储级别，旨在满足内存使用和 CPU 效率权衡上的不同需求。我们建议通过以下的步骤来进行选择：</p>
<ul><li>如果你的 RDD 可以很好的与默认的存储级别契合，就不需要做任何修改了。这已经是 CPU 使用效率最高的选项，它使得 RDD的操作尽可能的快。</li><li>如果不行，试着使用 <code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;color:rgb(199,37,78);background-color:rgb(254,251,243);">MEMORY_ONLY_SER</code> 并且选择一个快速序列化的库使得对象在有比较高的空间使用率的情况下，依然可以较快被访问。</li><li>尽可能不要存储到硬盘上，除非计算数据集的函数，计算量特别大，或者它们过滤了大量的数据。否则，重新计算一个分区的速度，和与从硬盘中读取基本差不多快。</li><li>如果你想有快速故障恢复能力，使用复制存储级别。例如：用 Spark 来响应web应用的请求。所有的存储级别都有通过重新计算丢失数据恢复错误的容错机制，但是复制存储级别可以让你在 RDD 上持续的运行任务，而不需要等待丢失的分区被重新计算。</li><li>如果你想要定义你自己的存储级别，比如复制因子为3而不是2，可以使用 <code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;color:rgb(199,37,78);background-color:rgb(254,251,243);">StorageLevel</code> 单例对象的 <code class="prettyprint" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;color:rgb(199,37,78);background-color:rgb(254,251,243);">apply()</code>方法。</li></ul><h1 id="4.-共享变量" style="font-size:28px;font-family:inherit;font-weight:500;line-height:1.1;border-bottom-width:1px;border-bottom-style:solid;">
4. 共享变量</h1>
<h1 id="5.-参考文章" style="font-size:28px;font-family:inherit;font-weight:500;line-height:1.1;border-bottom-width:1px;border-bottom-style:solid;">
5. 参考文章</h1>
<ul><li><a href="http://spark.apache.org/docs/latest/programming-guide.html" rel="nofollow" style="background-color:transparent;text-decoration:none;">http://spark.apache.org/docs/latest/programming-guide.html</a></li><li><a href="http://rdc.taobao.org/?p=2024" rel="nofollow" style="background-color:transparent;text-decoration:none;">http://rdc.taobao.org/?p=2024</a></li><li><a href="http://blog.csdn.net/u011391905/article/details/37929731" rel="nofollow" style="background-color:transparent;text-decoration:none;">http://blog.csdn.net/u011391905/article/details/37929731</a></li><li><a href="http://segmentfault.com/blog/whuwb/1190000000723037" rel="nofollow" style="background-color:transparent;text-decoration:none;">http://segmentfault.com/blog/whuwb/1190000000723037</a></li></ul></div>
<div id="pay" style="font-family:'Lucida Grande', 'Lucida Sans Unicode', Helvetica, 'Helvetica Neue', 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', Arial, Verdana, sans-serif;font-size:14px;line-height:22.399999618530273px;text-align:center;">
----EOF----- </div>
            </div>
                </div>