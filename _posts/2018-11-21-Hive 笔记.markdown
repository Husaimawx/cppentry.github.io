---
layout:     post
title:      Hive 笔记
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/qq479245760/article/details/79148889				</div>
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<h1 id="hive-笔记">Hive 笔记</h1>

<ul>
<li><p>什么是Hive</p></li>
<li><p>如何安装Hive</p></li>
<li><p>Hive中什么是元数据库，以及配置元数据库</p></li>
<li><p>Hive如何进行SQL的操作</p></li>
<li><p>Hive如何分区建表</p></li>
<li><p>Hive如何加载数据</p>

<p>​</p></li>
</ul>

<h1 id="什么是hive">什么是Hive</h1>

<p>hive是基于Hadoop的一个数据仓库工具，可以将结构化的数据文件映射为一张数据库表，并提供简单的sql查询功能，可以将sql语句转换为MapReduce任务进行运行。 其优点是学习成本低</p>



<h1 id="如何安装hive">如何安装Hive</h1>

<p><a href="http://lxw1234.com/archives/2015/06/269.htm" rel="nofollow">点击查看hive安装和多种配置元数据库的方式</a></p>



<h1 id="hive的元数据库">Hive的元数据库</h1>

<p>hive数据库中有两类数据：表数据和元数据，表数据就是数据文件所映射的表数据，元数据可以看做是描述表数据的数据 <br>
metastore是Hive元数据集中存放地。它包括两部分：服务和后台数据存储。有三种方式配置metastore：内嵌metastore、本地metastore以及远程metastore。</p>

<p><a href="http://lxw1234.com/archives/2015/06/269.htm" rel="nofollow">点击查看hive安装和多种配置元数据库的方式</a></p>

<p>下面是元数据库中每张表的基本描述</p>

<table>
<thead>
<tr>
  <th><strong>表名</strong></th>
  <th><strong>作用</strong></th>
</tr>
</thead>
<tbody><tr>
  <td>BUCKETING_COLS</td>
  <td>存储bucket字段信息，通过SD_ID与其他表关联</td>
</tr>
<tr>
  <td>CDS</td>
  <td>一个字段CD_ID，与SDS表关联</td>
</tr>
<tr>
  <td>COLUMNS_V2</td>
  <td>存储字段信息，通过CD_ID与其他表关联</td>
</tr>
<tr>
  <td>DATABASE_PARAMS</td>
  <td>空</td>
</tr>
<tr>
  <td>DBS</td>
  <td>存储hive的database信息</td>
</tr>
<tr>
  <td>DELETEME1410257703262</td>
  <td>空</td>
</tr>
<tr>
  <td>FUNCS</td>
  <td>空</td>
</tr>
<tr>
  <td>FUNC_RU</td>
  <td>空</td>
</tr>
<tr>
  <td>GLOBAL_PRIVS</td>
  <td>全局变量，与表无关</td>
</tr>
<tr>
  <td>IDXS</td>
  <td>空</td>
</tr>
<tr>
  <td>INDEX_PARAMS</td>
  <td>空</td>
</tr>
<tr>
  <td>PARTITIONS</td>
  <td>分区记录，SD_ID, TBL_ID关联</td>
</tr>
<tr>
  <td>PARTITION_KEYS</td>
  <td>存储分区字段，TBL_ID关联</td>
</tr>
<tr>
  <td>PARTITION_KEY_VALS</td>
  <td>分区的值，通过PART_ID关联。与PARTITION_KEYS共用同一个字段INTEGER_IDX来标示不同的分区字段。</td>
</tr>
<tr>
  <td>PARTITION_PARAMS</td>
  <td>存储某分区相关信息，包括文件数，文件大小，记录条数等。通过PART_ID关联</td>
</tr>
<tr>
  <td>PART_COL_PRIVS</td>
  <td>空</td>
</tr>
<tr>
  <td>PART_COL_STATS</td>
  <td>空</td>
</tr>
<tr>
  <td>PART_PRIVS</td>
  <td>空</td>
</tr>
<tr>
  <td>ROLES</td>
  <td>角色表，和GLOBAL_PRIVS配合，与表无关</td>
</tr>
<tr>
  <td>SDS</td>
  <td>存储输入输出format等信息，包括表的format和分区的format。关联字段CD_ID,SERDE_ID</td>
</tr>
<tr>
  <td>SD_PARAMS</td>
  <td>空</td>
</tr>
<tr>
  <td>SEQUENCE_TABLE</td>
  <td>存储sqeuence相关信息，与表无关</td>
</tr>
<tr>
  <td>SERDES</td>
  <td>存储序列化反序列化使用的类</td>
</tr>
<tr>
  <td>SERDE_PARAMS</td>
  <td>序列化反序列化相关信息，通过SERDE_ID关联</td>
</tr>
<tr>
  <td>SKEWED_COL_NAMES</td>
  <td>空</td>
</tr>
<tr>
  <td>SKEWED_COL_VALUE_LOC_MAP</td>
  <td>空</td>
</tr>
<tr>
  <td>SKEWED_STRING_LIST</td>
  <td>空</td>
</tr>
<tr>
  <td>SKEWED_STRING_LIST_VALUES</td>
  <td>空</td>
</tr>
<tr>
  <td>SKEWED_VALUES</td>
  <td>空</td>
</tr>
<tr>
  <td>SORT_COLS</td>
  <td>排序字段，通过SD_ID关联</td>
</tr>
<tr>
  <td>TABLE_PARAMS</td>
  <td>表相关信息，是否外部表，通过TBL_ID关联</td>
</tr>
<tr>
  <td>TAB_COL_STATS</td>
  <td>空</td>
</tr>
<tr>
  <td>TBLS</td>
  <td>存储表信息，关联字段DB_ID,SD_ID,</td>
</tr>
<tr>
  <td>TBL_COL_PRIVS</td>
  <td>空</td>
</tr>
<tr>
  <td>TBL_PRIVS</td>
  <td>表赋权限相关信息，通过TBL_ID关联</td>
</tr>
<tr>
  <td>VERSION</td>
  <td>版本</td>
</tr>
<tr>
  <td>VERSION_copy</td>
  <td>版本，通过VER_ID关联</td>
</tr>
</tbody></table>




<h1 id="hive如何进行sql的操作">Hive如何进行SQL的操作</h1>



<h4 id="hive-数据库操作"><strong>Hive 数据库操作</strong></h4>

<p>Hive中的数据库在HDFS上的存储路径为：</p>

<p>${hive.metastore.warehouse.dir}/databasename.db</p>

<p>比如，名为lxw1234的数据库存储路径为：</p>

<p>/user/hive/warehouse/lxw1234.db</p>

<ul>
<li><p><strong>创建数据库</strong></p>

<pre class="prettyprint"><code class="language-sql hljs "><span class="hljs-operator"><span class="hljs-keyword">CREATE</span> (<span class="hljs-keyword">DATABASE</span>|<span class="hljs-keyword">SCHEMA</span>) [<span class="hljs-keyword">IF</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>] database_name
    [COMMENT database_comment]
    [LOCATION hdfs_path]
    [<span class="hljs-keyword">WITH</span> DBPROPERTIES (property_name=property_value, ...)];</span>

ep:
<span class="hljs-operator"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> example_database
COMMENT <span class="hljs-string">'这是一个例子'</span>
LOCATION <span class="hljs-string">'hdfs://user/hive/wherehouse/example/example_database.db/'</span>;</span></code></pre></li>
<li><p><strong>删除数据库</strong></p>

<blockquote>
  <p>默认情况下，Hive不允许删除一个里面有表存在的数据库，如果想删除数据库，要么先将数据库中的表全部删除，要么可以使用CASCADE关键字，使用该关键字后，Hive会自己将数据库下的表全部删除。RESTRICT关键字就是默认情况，即如果有表存在，则不允许删除数据库。</p>
</blockquote>

<pre class="prettyprint"><code class="language-sql hljs "><span class="hljs-operator"><span class="hljs-keyword">DROP</span> (<span class="hljs-keyword">DATABASE</span>|<span class="hljs-keyword">SCHEMA</span>) [<span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span>] database_name [<span class="hljs-keyword">RESTRICT</span>|<span class="hljs-keyword">CASCADE</span>];</span>

ep:
<span class="hljs-operator"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">DATABASE</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">exists</span> example_database <span class="hljs-keyword">CASCADE</span>;</span></code></pre>

<p>​</p></li>
</ul>



<h4 id="hive-表操作"><strong>Hive 表操作</strong></h4>

<p>默认情况下，表的存储路径为：</p>

<p>${hive.metastore.warehouse.dir}/databasename.db/tablename/</p>

<p>可以使用desc formatted tablename;命令查看表的详细信息，其中包括了存储路径：</p>

<p>hdfs://cdh5/hivedata/warehouse/lxw1234.db/lxw1234</p>

<ul>
<li><p><strong>内部表和外部表</strong></p>

<p>内部表DROP时候**会删除**HDFS上的数据;</p>

<p>外部表DROP时候**不会删除**HDFS上的数据;</p>

<ul><li><p>内部表适用场景：</p>

<p>Hive中间表、结果表、一般不需要从外部（如本地文件、HDFS上load数据）的情况。</p></li>
<li><p>外部表适用场景：</p>

<p>源表，需要定期将外部数据映射到表中。</p></li>
<li><p>我们的使用场景：</p>

<p>每天将收集到的网站日志定期流入HDFS文本文件，一天一个目录；</p>

<p>在Hive中建立外部表作为源表，通过添加分区的方式，将每天HDFS上的原始日志映射到外部表的天分区中；</p>

<p>在外部表（原始日志表）的基础上做大量的统计分析，用到的中间表、结果表使用内部表存储，数据通过SELECT+INSERT进入内部表。</p></li>
<li><p><strong>创建表</strong></p></li></ul>

<p>创建表的语法选项特别多，这里只列出常用的选项。</p>

<p><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DDL#LanguageManualDDL-CreateTable" rel="nofollow">其他请参见Hive官方文档</a></p>

<pre class="prettyprint"><code class="language-sql hljs ">
# 举个例子,创建外部表

<span class="hljs-operator"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">EXTERNAL</span> <span class="hljs-keyword">TABLE</span> external_table (id <span class="hljs-keyword">INT</span>, name STRING, <span class="hljs-keyword">day</span> STRING) // 表示该表为外部表，如果不指定<span class="hljs-keyword">EXTERNAL</span>关键字，则表示内部表
COMMENT <span class="hljs-string">'这是个外部表例子'</span>
PARTITIONED <span class="hljs-keyword">BY</span> (<span class="hljs-keyword">day</span> STRING) // 表示该表为分区表，分区字段为<span class="hljs-keyword">day</span>,类型为string
<span class="hljs-keyword">ROW</span> FORMAT DELIMITED // 指定表的分隔符，通常后面要与以下关键字连用：
FIELDS TERMINATED <span class="hljs-keyword">BY</span> <span class="hljs-string">','</span> // 指定每行中字段分隔符为逗号
LINES TERMINATED <span class="hljs-keyword">BY</span> <span class="hljs-string">'\n'</span> // 指定行分隔符
COLLECTION ITEMS TERMINATED <span class="hljs-keyword">BY</span> <span class="hljs-string">','</span> // 指定集合中元素之间的分隔符
MAP KEYS TERMINATED <span class="hljs-keyword">BY</span> <span class="hljs-string">':'</span> // 指定数据中Map类型的<span class="hljs-keyword">Key</span>与<span class="hljs-keyword">Value</span>之间的分隔符
STORED <span class="hljs-keyword">AS</span> textfile // TEXTFILE文本，默认值、SEQUENCEFILE:二进制序列文件、RCFILE:列式存储格式文件...
LOCATION <span class="hljs-string">'hdfs://cdh5/tmp/lxw1234/'</span>;</span> // 指定表在HDFS上的存储位置。</code></pre>

<ul><li>删除表</li></ul>

<pre class="prettyprint"><code class="language-sql hljs "><span class="hljs-operator"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> [<span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span>] table_name [PURGE];</span>
ep:
<span class="hljs-operator"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> table_name;</span></code></pre></li>
</ul>



<h1 id="hive如何分区建表">Hive如何分区建表</h1>

<p>Hive中的表分区比较简单，就是将同一组数据放到同一个HDFS目录下，当查询中过滤条件指定了某一个分区值时候，只将该分区对应的目录作为Input，从而减少MapReduce的输入数据，提高查询效率。</p>



<h4 id="创建分区">创建分区</h4>



<pre class="prettyprint"><code class="language-sql hljs "><span class="hljs-operator"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">EXTERNAL</span> <span class="hljs-keyword">TABLE</span> t_lxw1234 (
  id <span class="hljs-keyword">INT</span>, 
  ip STRING COMMENT <span class="hljs-string">'访问者IP'</span>,
  avg_view_depth <span class="hljs-keyword">DECIMAL</span>(<span class="hljs-number">5</span>,<span class="hljs-number">1</span>),
  bounce_rate <span class="hljs-keyword">DECIMAL</span>(<span class="hljs-number">6</span>,<span class="hljs-number">5</span>)
) COMMENT <span class="hljs-string">'lxw的大数据田地-lxw1234.com'</span>
PARTITIONED <span class="hljs-keyword">BY</span> (<span class="hljs-keyword">month</span> STRING, <span class="hljs-keyword">day</span> STRING)
<span class="hljs-keyword">ROW</span> FORMAT DELIMITED
FIELDS TERMINATED <span class="hljs-keyword">BY</span> <span class="hljs-string">','</span>
STORED <span class="hljs-keyword">AS</span> textfile;</span></code></pre>

<blockquote>
  <p>在创建表时候，使用PARTITIONED BY关键字来指定该表为分区表，后面括号中指定了分区的字段和类型，分区字段可以有多个，在HDFS中对应多级目录。</p>
  
  <p>上面的表t_lxw1234分区month=’2015-06’,day=’2015-06-15’对应HDFS上的路径为：/user/hive/warehouse/default.db/t_lxw1234/month=2015-06/day=2015-06-15/，当查询中指定了month=’2015-06’ AND day=’2015-06-15’,MapReduce直接从该目录中读取数据，如果只指定了month=’2015-06’，那么MapReduce将/month=2015-06/下所有的子目录都作为Input。</p>
</blockquote>



<h4 id="添加分区">添加分区</h4>

<ul>
<li><p>使用INSERT添加分区：</p>

<ul><li>往分区中追加数据：</li></ul>

<pre class="prettyprint"><code class="language-sql hljs "><span class="hljs-operator"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">TABLE</span> t_lxw1234 PARTITION (<span class="hljs-keyword">month</span> = <span class="hljs-string">'2015-06'</span>, <span class="hljs-keyword">day</span> = <span class="hljs-string">'2015-06-15'</span>)
<span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> dual;</span></code></pre>

<ul><li>覆盖分区数据：</li></ul>

<pre class="prettyprint"><code class="language-sql hljs "><span class="hljs-operator"><span class="hljs-keyword">INSERT</span> overwrite <span class="hljs-keyword">TABLE</span> t_lxw1234 PARTITION (<span class="hljs-keyword">month</span> = <span class="hljs-string">'2015-06'</span>, <span class="hljs-keyword">day</span> = <span class="hljs-string">'2015-06-15'</span>)
<span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> dual;</span></code></pre></li>
<li><p>使用ALTER TABLE添加分区：</p>

<pre class="prettyprint"><code class="language-sql hljs "><span class="hljs-operator"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> t_lxw1234 <span class="hljs-keyword">ADD</span> PARTITION (<span class="hljs-keyword">month</span> = <span class="hljs-string">'2015-06'</span>, <span class="hljs-keyword">day</span> = <span class="hljs-string">'2015-06-15'</span>)
location <span class="hljs-string">'hdfs://namenode/tmp/lxw1234/month=2015-06/day=2015-06-15/'</span>;</span></code></pre></li>
</ul>



<h4 id="查看表所对应的分区">查看表所对应的分区</h4>



<pre class="prettyprint"><code class="language-scala hljs ">hive&gt; show partitions t_lxw1234;

OK

month=<span class="hljs-number">2015</span>-<span class="hljs-number">01</span>/day=<span class="hljs-number">2015</span>-<span class="hljs-number">01</span>-<span class="hljs-number">25</span>

month=<span class="hljs-number">2015</span>-<span class="hljs-number">01</span>/day=<span class="hljs-number">2015</span>-<span class="hljs-number">01</span>-<span class="hljs-number">31</span>

month=<span class="hljs-number">2015</span>-<span class="hljs-number">02</span>/day=<span class="hljs-number">2015</span>-<span class="hljs-number">02</span>-<span class="hljs-number">15</span>

month=<span class="hljs-number">2015</span>-<span class="hljs-number">02</span>/day=<span class="hljs-number">2015</span>-<span class="hljs-number">02</span>-<span class="hljs-number">28</span>

month=<span class="hljs-number">2015</span>-<span class="hljs-number">03</span>/day=<span class="hljs-number">2015</span>-<span class="hljs-number">03</span>-<span class="hljs-number">15</span>

month=<span class="hljs-number">2015</span>-<span class="hljs-number">03</span>/day=<span class="hljs-number">2015</span>-<span class="hljs-number">03</span>-<span class="hljs-number">31</span>
</code></pre>



<h4 id="删除分区">删除分区</h4>



<pre class="prettyprint"><code class="language-sql hljs "><span class="hljs-operator"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> t_lxw1234 <span class="hljs-keyword">DROP</span> PARTITION (<span class="hljs-keyword">month</span> = <span class="hljs-string">'2015-06'</span>, <span class="hljs-keyword">day</span> = <span class="hljs-string">'2015-06-15'</span>);</span> </code></pre>

<blockquote>
  <p>删除一个分区，同内部表和外部表，如果该分区表为外部表，则分区对应的HDFS目录数据不会被删除。</p>
</blockquote>



<h4 id="动态分区">动态分区</h4>

<p><a href="http://lxw1234.com/archives/2015/06/286.htm" rel="nofollow">请查看该篇文章，需要进行配置</a></p>



<h1 id="hive如何加载数据">Hive如何加载数据</h1>



<h4 id="直接指定">直接指定</h4>



<pre class="prettyprint"><code class="language-sql hljs "><span class="hljs-operator"><span class="hljs-keyword">CREATE</span> [<span class="hljs-keyword">EXTERNAL</span>] <span class="hljs-keyword">TABLE</span> t_lxw1234 (
<span class="hljs-keyword">day</span> STRING,
url STRING)
<span class="hljs-keyword">ROW</span> FORMAT DELIMITED 
FIELDS TERMINATED <span class="hljs-keyword">BY</span> <span class="hljs-string">' '</span> 
stored <span class="hljs-keyword">as</span> textfile 
location <span class="hljs-string">'/tmp/lxw1234/'</span>;</span></code></pre>



<h4 id="从本地文件系统或者hdfs的一个目录中加载">从本地文件系统或者HDFS的一个目录中加载</h4>

<p>如果数据在本地，或者HDFS的某一个目录下，需要加载到目标中或分区中，那么使用LOAD DATA命令即可加载数据：</p>

<ul>
<li><p><strong>加载本地文件</strong></p>

<pre class="prettyprint"><code class="language-sql hljs "><span class="hljs-operator"><span class="hljs-keyword">LOAD</span> DATA <span class="hljs-keyword">LOCAL</span> INPATH <span class="hljs-string">'/home/lxw1234/t_lxw1234/'</span>
<span class="hljs-keyword">INTO</span> <span class="hljs-keyword">TABLE</span> t_lxw1234 PARTITION (<span class="hljs-keyword">day</span> = <span class="hljs-string">'2015-06-15'</span>);</span></code></pre></li>
<li><p><strong>加载HDFS文件</strong></p>

<pre class="prettyprint"><code class="language-sql hljs "><span class="hljs-operator"><span class="hljs-keyword">LOAD</span> DATA INPATH <span class="hljs-string">'/home/lxw1234/t_lxw1234/'</span>
<span class="hljs-keyword">INTO</span> <span class="hljs-keyword">TABLE</span> t_lxw1234 PARTITION (<span class="hljs-keyword">day</span> = <span class="hljs-string">'2015-06-15'</span>);</span></code></pre></li>
</ul>



<h4 id="从一个子查询中加载数据">从一个子查询中加载数据</h4>



<pre class="prettyprint"><code class="language-sql hljs "><span class="hljs-operator"><span class="hljs-keyword">INSERT</span> overwrite <span class="hljs-keyword">TABLE</span> t_lxw1234 PARTITION (<span class="hljs-keyword">day</span> = <span class="hljs-string">'2015-06-15'</span>);</span>
<span class="hljs-operator"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">day</span>,url <span class="hljs-keyword">from</span> source_table;</span></code></pre>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>