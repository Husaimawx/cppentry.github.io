---
layout:     post
title:      kafka架构原理和安装部署
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<h2 id="一什么是kafka"><a name="t0"></a><strong>一、什么是kafka</strong></h2>
<p>　　kafka是分布式发布-订阅消息系统。它最初由LinkedIn公司开发，之后成为Apache项目的一部分。Kafka是一种快速、可扩展的、设计内在就是分布式的，分区的和可复制的提交日志服务。
<br><strong>重点内容</strong> </p>
<h2 id="二kafka架构"><a name="t1"></a><strong>二、kafka架构</strong></h2>
<p>　　Kafka内在就是分布式的，一个Kafka集群通常包括多个broker。为了均衡负载，将话题分成多个分区，每个broker存储一或多个分区。多个生产者和消费者能够同时生产和获取消息。
<br>
　　<a title="大型网站架构知识库" class="replace_word" href="http://lib.csdn.net/base/16" rel="nofollow" style="color:rgb(223,52,52);font-weight:bold;">架构</a>中的主要组件解析如下：
<br>
　<img title="" alt="这里写图片描述" src="https://img-blog.csdn.net/20160504171852209"></p>
<ul><li>话题（Topic）是特定类型的消息流。消息是字节的有效负载（Payload），话题是消息的分类名或种子（Feed）名。</li><li>生产者（Producer）是能够发布消息到话题的任何对象。 已发布的消息保存在一组服务器中，它们被称为Broker或Kafka集群。</li><li>消费者可以订阅一个或多个话题，并从Broker拉数据，从而消费这些已发布的消息。</li></ul><h2 id="三kafka存储结构设计"><a name="t2"></a><strong>三、kafka存储结构设计</strong></h2>
<p>　　kafka存储布局是在话题的每个分区对应一个逻辑日志。物理上，一个日志为相同大小的一组分段文件。每次生产者发布消息到一个分区，代理就将消息追加到最后一个段文件中。当发布的消息数量达到设定值或者经过一定的时间后，段文件真正写入磁盘中。写入完成后，消息公开给消费者。其结构如下图所示：
<br>
　　<img title="" alt="这里写图片描述" src="https://img-blog.csdn.net/20160504171504610"></p>
<p>　　消费者始终从特定分区顺序地获取消息，如果消费者知道特定消息的偏移量，也就说明消费者已经消费了之前的所有消息。消费者向代理发出异步拉请求，准备字节缓冲区用于消费。每个异步拉请求都包含要消费的消息偏移量。Kafka利用sendfile API高效地从代理的日志段文件中分发字节给消费者。
<br>
　</p>
<h2 id="四kafka-应用代码示例"><a name="t3"></a><strong>四、kafka 应用代码示例</strong></h2>
<p><strong>Kafka生产者代码示例：</strong></p>
<pre class="prettyprint">&lt;code class="hljs cs has-numbering"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-title"&gt;KafkaMailProducer&lt;/span&gt;(String topic, String directoryPath) { 
       props.put(&lt;span class="hljs-string"&gt;"serializer.class"&lt;/span&gt;, &lt;span class="hljs-string"&gt;"kafka.serializer.StringEncoder"&lt;/span&gt;); 
       props.put(&lt;span class="hljs-string"&gt;"metadata.broker.list"&lt;/span&gt;, &lt;span class="hljs-string"&gt;"localhost:9092"&lt;/span&gt;); 
       producer = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; kafka.javaapi.producer.Producer&lt;Integer, String&gt;(&lt;span class="hljs-keyword"&gt;new&lt;/span&gt; ProducerConfig(props)); 
       &lt;span class="hljs-keyword"&gt;this&lt;/span&gt;.topic = topic; 
       &lt;span class="hljs-keyword"&gt;this&lt;/span&gt;.directoryPath = directoryPath; 
} 

&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;run&lt;/span&gt;() { 
      Path dir = Paths.&lt;span class="hljs-keyword"&gt;get&lt;/span&gt;(directoryPath); 
      &lt;span class="hljs-keyword"&gt;try&lt;/span&gt; { 
           &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; WatchDir(dir).start(); 
           &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; ReadDir(dir).start(); 
      } &lt;span class="hljs-keyword"&gt;catch&lt;/span&gt; (IOException e) { 
           e.printStackTrace(); 
      } 
} &lt;/code&gt;&lt;ul class="pre-numbering"&gt;&lt;li&gt;1&lt;/li&gt;&lt;li&gt;2&lt;/li&gt;&lt;li&gt;3&lt;/li&gt;&lt;li&gt;4&lt;/li&gt;&lt;li&gt;5&lt;/li&gt;&lt;li&gt;6&lt;/li&gt;&lt;li&gt;7&lt;/li&gt;&lt;li&gt;8&lt;/li&gt;&lt;li&gt;9&lt;/li&gt;&lt;li&gt;10&lt;/li&gt;&lt;li&gt;11&lt;/li&gt;&lt;li&gt;12&lt;/li&gt;&lt;li&gt;13&lt;/li&gt;&lt;li&gt;14&lt;/li&gt;&lt;li&gt;15&lt;/li&gt;&lt;li&gt;16&lt;/li&gt;&lt;li&gt;17&lt;/li&gt;&lt;/ul&gt;&lt;ul class="pre-numbering"&gt;&lt;li&gt;1&lt;/li&gt;&lt;li&gt;2&lt;/li&gt;&lt;li&gt;3&lt;/li&gt;&lt;li&gt;4&lt;/li&gt;&lt;li&gt;5&lt;/li&gt;&lt;li&gt;6&lt;/li&gt;&lt;li&gt;7&lt;/li&gt;&lt;li&gt;8&lt;/li&gt;&lt;li&gt;9&lt;/li&gt;&lt;li&gt;10&lt;/li&gt;&lt;li&gt;11&lt;/li&gt;&lt;li&gt;12&lt;/li&gt;&lt;li&gt;13&lt;/li&gt;&lt;li&gt;14&lt;/li&gt;&lt;li&gt;15&lt;/li&gt;&lt;li&gt;16&lt;/li&gt;&lt;li&gt;17&lt;/li&gt;&lt;/ul&gt;</pre>
<p>　　上面的代码片断展示了Kafka生产者API的基本用法，例如设置生产者的属性，包括发布哪个话题的消息，可以使用哪个序列化类以及代理的相关信息。这个类的基本功能是从邮件目录读取邮件消息文件，然后作为消息发布到Kafka代理。目录通过<a title="Java EE知识库" class="replace_word" href="http://lib.csdn.net/base/17" rel="nofollow" style="color:rgb(223,52,52);font-weight:bold;">Java</a>.nio.WatchService类监视，一旦新的邮件消息Dump到该目录，就会被立即读取并作为消息发布到Kafka代理。</p>
<p><strong>Kafka消费者代码示例：</strong>　</p>
<pre class="prettyprint">&lt;code class="hljs cs has-numbering"&gt;&lt;span class="hljs-keyword"&gt;private&lt;/span&gt; &lt;span class="hljs-keyword"&gt;static&lt;/span&gt; ConsumerConfig &lt;span class="hljs-title"&gt;createConsumerConfig&lt;/span&gt;() { 
      Properties props = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; Properties(); 
      props.put(&lt;span class="hljs-string"&gt;"zookeeper.connect"&lt;/span&gt;, KafkaMailProperties.zkConnect); 
      props.put(&lt;span class="hljs-string"&gt;"group.id"&lt;/span&gt;, KafkaMailProperties.groupId); 
      props.put(&lt;span class="hljs-string"&gt;"zookeeper.session.timeout.ms"&lt;/span&gt;, &lt;span class="hljs-string"&gt;"400"&lt;/span&gt;); 
      props.put(&lt;span class="hljs-string"&gt;"zookeeper.sync.time.ms"&lt;/span&gt;, &lt;span class="hljs-string"&gt;"200"&lt;/span&gt;); 
      props.put(&lt;span class="hljs-string"&gt;"auto.commit.interval.ms"&lt;/span&gt;, &lt;span class="hljs-string"&gt;"1000"&lt;/span&gt;); 
      &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; ConsumerConfig(props); 
} 

&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;run&lt;/span&gt;() { 
      Map&lt;String, Integer&gt; topicCountMap = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; HashMap&lt;String, Integer&gt;(); 
      topicCountMap.put(topic, &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; Integer(&lt;span class="hljs-number"&gt;1&lt;/span&gt;)); 
      Map&lt;String, List&lt;KafkaStream&lt;&lt;span class="hljs-keyword"&gt;byte&lt;/span&gt;[], &lt;span class="hljs-keyword"&gt;byte&lt;/span&gt;[]&gt;&gt;&gt; consumerMap = consumer.createMessageStreams(topicCountMap); 
      KafkaStream&lt;&lt;span class="hljs-keyword"&gt;byte&lt;/span&gt;[], &lt;span class="hljs-keyword"&gt;byte&lt;/span&gt;[]&gt; stream = consumerMap.&lt;span class="hljs-keyword"&gt;get&lt;/span&gt;(topic).&lt;span class="hljs-keyword"&gt;get&lt;/span&gt;(&lt;span class="hljs-number"&gt;0&lt;/span&gt;); 
      ConsumerIterator&lt;&lt;span class="hljs-keyword"&gt;byte&lt;/span&gt;[], &lt;span class="hljs-keyword"&gt;byte&lt;/span&gt;[]&gt; it = stream.iterator();
      &lt;span class="hljs-keyword"&gt;while&lt;/span&gt; (it.hasNext()) 
      System.&lt;span class="hljs-keyword"&gt;out&lt;/span&gt;.println(&lt;span class="hljs-keyword"&gt;new&lt;/span&gt; String(it.next().message())); 
}&lt;/code&gt;&lt;ul class="pre-numbering"&gt;&lt;li&gt;1&lt;/li&gt;&lt;li&gt;2&lt;/li&gt;&lt;li&gt;3&lt;/li&gt;&lt;li&gt;4&lt;/li&gt;&lt;li&gt;5&lt;/li&gt;&lt;li&gt;6&lt;/li&gt;&lt;li&gt;7&lt;/li&gt;&lt;li&gt;8&lt;/li&gt;&lt;li&gt;9&lt;/li&gt;&lt;li&gt;10&lt;/li&gt;&lt;li&gt;11&lt;/li&gt;&lt;li&gt;12&lt;/li&gt;&lt;li&gt;13&lt;/li&gt;&lt;li&gt;14&lt;/li&gt;&lt;li&gt;15&lt;/li&gt;&lt;li&gt;16&lt;/li&gt;&lt;li&gt;17&lt;/li&gt;&lt;li&gt;18&lt;/li&gt;&lt;li&gt;19&lt;/li&gt;&lt;/ul&gt;&lt;ul class="pre-numbering"&gt;&lt;li&gt;1&lt;/li&gt;&lt;li&gt;2&lt;/li&gt;&lt;li&gt;3&lt;/li&gt;&lt;li&gt;4&lt;/li&gt;&lt;li&gt;5&lt;/li&gt;&lt;li&gt;6&lt;/li&gt;&lt;li&gt;7&lt;/li&gt;&lt;li&gt;8&lt;/li&gt;&lt;li&gt;9&lt;/li&gt;&lt;li&gt;10&lt;/li&gt;&lt;li&gt;11&lt;/li&gt;&lt;li&gt;12&lt;/li&gt;&lt;li&gt;13&lt;/li&gt;&lt;li&gt;14&lt;/li&gt;&lt;li&gt;15&lt;/li&gt;&lt;li&gt;16&lt;/li&gt;&lt;li&gt;17&lt;/li&gt;&lt;li&gt;18&lt;/li&gt;&lt;li&gt;19&lt;/li&gt;&lt;/ul&gt;</pre>
<p>　　 上面的代码演示了基本的消费者API。正如我们前面提到的，消费者需要设置消费的消息流。在Run方法中，我们进行了设置，并在控制台打印收到的消息。</p>
<h2 id="五kafka的安装部署"><a name="t4"></a><strong>五、kafka的安装部署</strong></h2>
<p>（提示：在安装kafka之前，需要先安装部署zookeeper 集群。请参考：<a href="http://blog.csdn.net/u010330043/article/details/51209939" rel="nofollow">http://blog.csdn.net/u010330043/article/details/51209939</a>）
<br>
kafka的安装步骤如下： <br><strong>步骤一</strong> 　解压 <br><strong>步骤二</strong>　 修改server.properties</p>
<pre class="prettyprint">&lt;code class="hljs avrasm has-numbering"&gt;
broker&lt;span class="hljs-preprocessor"&gt;.id&lt;/span&gt;=&lt;span class="hljs-number"&gt;1&lt;/span&gt;
zookeeper&lt;span class="hljs-preprocessor"&gt;.connect&lt;/span&gt;=cs2:&lt;span class="hljs-number"&gt;2181&lt;/span&gt;,cs3:&lt;span class="hljs-number"&gt;2181&lt;/span&gt;,cs4:&lt;span class="hljs-number"&gt;2181&lt;/span&gt;&lt;/code&gt;&lt;ul class="pre-numbering"&gt;&lt;li&gt;1&lt;/li&gt;&lt;li&gt;2&lt;/li&gt;&lt;li&gt;3&lt;/li&gt;&lt;/ul&gt;&lt;ul class="pre-numbering"&gt;&lt;li&gt;1&lt;/li&gt;&lt;li&gt;2&lt;/li&gt;&lt;li&gt;3&lt;/li&gt;&lt;/ul&gt;</pre>
<p><strong>步骤三</strong> 　将zookeeper集群启动</p>
<p><strong>步骤四</strong> 　在每一台节点上启动broker</p>
<pre class="prettyprint">&lt;code class="hljs axapta has-numbering"&gt;bin/kafka-&lt;span class="hljs-keyword"&gt;server&lt;/span&gt;-start.sh config/&lt;span class="hljs-keyword"&gt;server&lt;/span&gt;.properties&lt;/code&gt;&lt;ul class="pre-numbering"&gt;&lt;li&gt;1&lt;/li&gt;&lt;/ul&gt;&lt;ul class="pre-numbering"&gt;&lt;li&gt;1&lt;/li&gt;&lt;/ul&gt;</pre>
<p><strong>步骤五</strong> 　在kafka集群中创建一个topic</p>
<pre class="prettyprint">&lt;code class="hljs brainfuck has-numbering"&gt;
&lt;span class="hljs-comment"&gt;bin/kafka&lt;/span&gt;&lt;span class="hljs-literal"&gt;-&lt;/span&gt;&lt;span class="hljs-comment"&gt;topics&lt;/span&gt;&lt;span class="hljs-string"&gt;.&lt;/span&gt;&lt;span class="hljs-comment"&gt;sh&lt;/span&gt; &lt;span class="hljs-literal"&gt;-&lt;/span&gt;&lt;span class="hljs-literal"&gt;-&lt;/span&gt;&lt;span class="hljs-comment"&gt;create&lt;/span&gt; &lt;span class="hljs-literal"&gt;-&lt;/span&gt;&lt;span class="hljs-literal"&gt;-&lt;/span&gt;&lt;span class="hljs-comment"&gt;zookeeper&lt;/span&gt; &lt;span class="hljs-comment"&gt;weekend05:2181&lt;/span&gt; &lt;span class="hljs-literal"&gt;-&lt;/span&gt;&lt;span class="hljs-literal"&gt;-&lt;/span&gt;&lt;span class="hljs-comment"&gt;replication&lt;/span&gt;&lt;span class="hljs-literal"&gt;-&lt;/span&gt;&lt;span class="hljs-comment"&gt;factor&lt;/span&gt; &lt;span class="hljs-comment"&gt;3&lt;/span&gt; &lt;span class="hljs-literal"&gt;-&lt;/span&gt;&lt;span class="hljs-literal"&gt;-&lt;/span&gt;&lt;span class="hljs-comment"&gt;partitions&lt;/span&gt; &lt;span class="hljs-comment"&gt;1&lt;/span&gt; &lt;span class="hljs-literal"&gt;-&lt;/span&gt;&lt;span class="hljs-literal"&gt;-&lt;/span&gt;&lt;span class="hljs-comment"&gt;topic&lt;/span&gt; &lt;span class="hljs-comment"&gt;order&lt;/span&gt;&lt;/code&gt;&lt;ul class="pre-numbering"&gt;&lt;li&gt;1&lt;/li&gt;&lt;li&gt;2&lt;/li&gt;&lt;/ul&gt;&lt;ul class="pre-numbering"&gt;&lt;li&gt;1&lt;/li&gt;&lt;li&gt;2&lt;/li&gt;&lt;/ul&gt;</pre>
<p><strong>步骤六</strong> 　用一个producer向某一个topic中写入消息</p>
<pre class="prettyprint">&lt;code class="hljs lasso has-numbering"&gt;
bin/kafka&lt;span class="hljs-attribute"&gt;-console&lt;/span&gt;&lt;span class="hljs-attribute"&gt;-producer&lt;/span&gt;&lt;span class="hljs-built_in"&gt;.&lt;/span&gt;sh &lt;span class="hljs-subst"&gt;--&lt;/span&gt;broker&lt;span class="hljs-attribute"&gt;-list&lt;/span&gt; weekend:&lt;span class="hljs-number"&gt;9092&lt;/span&gt; &lt;span class="hljs-subst"&gt;--&lt;/span&gt;topic &lt;span class="hljs-keyword"&gt;order&lt;/span&gt;&lt;/code&gt;&lt;ul class="pre-numbering"&gt;&lt;li&gt;1&lt;/li&gt;&lt;li&gt;2&lt;/li&gt;&lt;/ul&gt;&lt;ul class="pre-numbering"&gt;&lt;li&gt;1&lt;/li&gt;&lt;li&gt;2&lt;/li&gt;&lt;/ul&gt;</pre>
<p><strong>步骤七</strong> 　用一个comsumer从某一个topic中读取信息</p>
<pre class="prettyprint">&lt;code class="hljs lasso has-numbering"&gt;bin/kafka&lt;span class="hljs-attribute"&gt;-console&lt;/span&gt;&lt;span class="hljs-attribute"&gt;-consumer&lt;/span&gt;&lt;span class="hljs-built_in"&gt;.&lt;/span&gt;sh &lt;span class="hljs-subst"&gt;--&lt;/span&gt;zookeeper weekend05:&lt;span class="hljs-number"&gt;2181&lt;/span&gt; &lt;span class="hljs-subst"&gt;--&lt;/span&gt;from&lt;span class="hljs-attribute"&gt;-beginning&lt;/span&gt; &lt;span class="hljs-subst"&gt;--&lt;/span&gt;topic &lt;span class="hljs-keyword"&gt;order&lt;/span&gt;&lt;/code&gt;&lt;ul class="pre-numbering"&gt;&lt;li&gt;1&lt;/li&gt;&lt;/ul&gt;&lt;ul class="pre-numbering"&gt;&lt;li&gt;1&lt;/li&gt;&lt;/ul&gt;</pre>
<p><strong>步骤八</strong> 　查看一个topic的分区及副本状态信息</p>
<pre class="prettyprint">&lt;code class="hljs brainfuck has-numbering"&gt;&lt;span class="hljs-comment"&gt;bin/kafka&lt;/span&gt;&lt;span class="hljs-literal"&gt;-&lt;/span&gt;&lt;span class="hljs-comment"&gt;topics&lt;/span&gt;&lt;span class="hljs-string"&gt;.&lt;/span&gt;&lt;span class="hljs-comment"&gt;sh&lt;/span&gt; &lt;span class="hljs-literal"&gt;-&lt;/span&gt;&lt;span class="hljs-literal"&gt;-&lt;/span&gt;&lt;span class="hljs-comment"&gt;describe&lt;/span&gt; &lt;span class="hljs-literal"&gt;-&lt;/span&gt;&lt;span class="hljs-literal"&gt;-&lt;/span&gt;&lt;span class="hljs-comment"&gt;zookeeper&lt;/span&gt; &lt;span class="hljs-comment"&gt;weekend05:2181&lt;/span&gt; &lt;span class="hljs-literal"&gt;-&lt;/span&gt;&lt;span class="hljs-literal"&gt;-&lt;/span&gt;&lt;span class="hljs-comment"&gt;topic&lt;/span&gt; &lt;span class="hljs-comment"&gt;order&lt;/span&gt;&lt;/code&gt;&lt;ul class="pre-numbering"&gt;&lt;li&gt;1&lt;/li&gt;&lt;/ul&gt;&lt;ul class="pre-numbering"&gt;&lt;li&gt;1&lt;/li&gt;&lt;/ul&gt;</pre>
<p>参考文献：　Apache Kafka: Next Generation Distributed Messaging System</p>
            </div>
                </div>