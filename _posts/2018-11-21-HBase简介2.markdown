---
layout:     post
title:      HBase简介2
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<p align="left">HBase简介2</p>
<p><span style="font-size:14px;"><strong>HBase是什么？ </strong></span><br><span style="font-family:'宋体';font-size:14px;">HBase</span><span style="font-family:'宋体';font-size:14px;">是Apache Hadoop中的一个子项目，HBase依托于Hadoop的HDFS作为最基本存储基础单元，通过使用hadoop的DFS工具就可以看到这些这些数据存储文件夹的结构,还可以通过Map/Reduce框架(算法)对HBase进行操作，如下图所示：</span></p>
<p><span style="font-family:'宋体';font-size:14px;"></span><img alt="" src="https://img-blog.csdn.net/20130902171403234"><br><br><span style="font-family:'宋体';font-size:14px;">HBase</span><span style="font-family:'宋体';font-size:14px;">在产品中还包含了Jetty，在HBase启动时采用嵌入式的方式来启动Jetty，因此可以通过web界面对HBase进行管理和查看当前运行的一些状态，非常轻巧。</span></p>
<p><span style="font-size:14px;"><strong>为什么采用HBase</strong><span style="font-family:'宋体';">？</span></span><br><span style="font-family:'宋体';font-size:14px;">HBase </span><span style="font-family:'宋体';font-size:14px;">不同于一般的关系数据库,它是一个适合于非结构化数据存储的数据库.所谓非结构化数据存储就是说HBase是基于列的而不是基于行的模式，这样方便读写你的大数据内容。</span></p>
<p><span style="font-family:'宋体';font-size:14px;">HBase是介于Map Entry(key &amp; value)和DB Row之间的一种数据存储方式。这点有点类似于现在流行的Memcache，但不仅仅是简单的一个key对应一个 value，你很可能需要存储多个属性的数据结构，但没有传统数据库表中那么多的关联关系，这就是所谓的松散数据。</span></p>
<p><span style="font-family:'宋体';font-size:14px;">简单来说，你在HBase中的表创建的可以看做是一张很大的表，而这个表的属性可以根据需求去动态增加，在HBase中没有表与表之间关联查询。你只需要告诉你的数据存储到HBase的那个column families 就可以了，不需要指定它的具体类型：char,varchar,int,tinyint,text等等。但是你需要注意HBase中不包含事务此类的功能。</span></p>
<p><span style="font-family:'宋体';font-size:14px;">Apache HBase和Google Bigtable有非常相似的地方，一个数据行拥有一个可选择的键和任意数量的列。表是疏松的存储的，因此用户可以给行定义各种不同的列，对于这样的功能在大项目中非常实用，可以简化设计和升级的成本。</span></p>
<div>
<h1><span style="font-family:Calibri;"> </span></h1>
<h1>列式数据库</h1>
</div>
<p><span style="font-family:Calibri;font-size:14px;"> </span></p>
<p><span style="font-size:14px;"><strong>列式数据库</strong>是以列相关存储架构进行数据存储的<a title="数据库" href="http://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93" rel="nofollow"><span>数据库</span></a>，主要适合与批量数据处理和即席查询。相对应的是<a title="行式数据库（页面不存在）" href="http://zh.wikipedia.org/w/index.php?title=%E8%A1%8C%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93&amp;action=edit&amp;redlink=1" rel="nofollow"><span>行式数据库</span></a>，数据以行相关的存储体系架构进行空间分配，主要适合与小批量的数据处理，常用于联机事务型数据处理。</span></p>
<p><strong><span id=".E6.8F.8F.E8.BF.B0">描述</span></strong></p>
<p style="background:#FFFFFF;"><span style="color:#000000;"><span style="font-family:'宋体';">数据库以行、列的二维表的形式存储数据，但是却以一维字符串的方式存储，例如以下的一个表：</span></span></p>
<table cellspacing="0" cellpadding="0" border="1" style="background:#f9f9f9;"><tbody><tr><td style="background:#f2f2f2;">
<p align="center"><span style="font-size:14px;"><strong><span style="color:#000000;">EmpId</span></strong></span></p>
</td>
<td style="background:#f2f2f2;">
<p align="center"><span style="font-size:14px;"><strong><span style="color:#000000;">Lastname</span></strong></span></p>
</td>
<td style="background:#f2f2f2;">
<p align="center"><span style="font-size:14px;"><strong><span style="color:#000000;">Firstname</span></strong></span></p>
</td>
<td style="background:#f2f2f2;">
<p align="center"><span style="font-size:14px;"><strong><span style="color:#000000;">Salary</span></strong></span></p>
</td>
</tr><tr><td>
<p><span style="font-size:14px;"><span style="color:#000000;">1</span></span></p>
</td>
<td>
<p><span style="font-size:14px;"><span style="color:#000000;">Smith</span></span></p>
</td>
<td>
<p><span style="font-size:14px;"><span style="color:#000000;">Joe</span></span></p>
</td>
<td>
<p><span style="font-size:14px;"><span style="color:#000000;">40000</span></span></p>
</td>
</tr><tr><td>
<p><span style="font-size:14px;"><span style="color:#000000;">2</span></span></p>
</td>
<td>
<p><span style="font-size:14px;"><span style="color:#000000;">Jones</span></span></p>
</td>
<td>
<p><span style="font-size:14px;"><span style="color:#000000;">Mary</span></span></p>
</td>
<td>
<p><span style="font-size:14px;"><span style="color:#000000;">50000</span></span></p>
</td>
</tr><tr><td>
<p><span style="font-size:14px;"><span style="color:#000000;">3</span></span></p>
</td>
<td>
<p><span style="font-size:14px;"><span style="color:#000000;">Johnson</span></span></p>
</td>
<td>
<p><span style="font-size:14px;"><span style="color:#000000;">Cathy</span></span></p>
</td>
<td>
<p><span style="font-size:14px;"><span style="color:#000000;">44000</span></span></p>
</td>
</tr></tbody></table><p style="background:#FFFFFF;"><span style="color:#000000;"><span style="font-family:'宋体';">这个简单的表包括员工代码</span></span><span style="color:#000000;">(EmpId),</span><span style="color:#000000;"><span style="font-family:'宋体';">姓名字段</span></span><span style="color:#000000;">(Lastname
 and Firstname)</span><span style="color:#000000;"><span style="font-family:'宋体';">及工资</span></span><span style="color:#000000;">(Salary).</span></p>
<p style="background:#FFFFFF;"><span style="color:#000000;"><span style="font-family:'宋体';">这个表存储在电脑的内存</span></span><span style="color:#000000;">(RAM)</span><span style="color:#000000;"><span style="font-family:'宋体';">和存储</span></span><span style="color:#000000;">(</span><span style="color:#000000;"><span style="font-family:'宋体';">硬盘</span></span><span style="color:#000000;">)</span><span style="color:#000000;"><span style="font-family:'宋体';">中。虽然内存和硬盘在机制上不同，电脑的操作系统是以同样的方式存储的。数据库必须把这个二维表存储在一系列一维的</span></span><span style="color:#000000;">“</span><span style="color:#000000;"><span style="font-family:'宋体';">字节</span></span><span style="color:#000000;">”</span><span style="font-family:'宋体';"><span style="color:#000000;">中，由操作系统写到内存或硬盘中。</span></span></p>
<p style="background:#FFFFFF;"><span style="font-family:'宋体';"><span style="color:#000000;">行式数据库把一行中的数据值串在一起存储起来，然后再存储下一行的数据，以此类推。</span></span></p>
<div style="background:#f9f9f9;">
<pre style="background:#f9f9f9;"><span style="color:#000000;">      </span>1,Smith,Joe,40000;</pre>
<pre style="background:#f9f9f9;"><span style="color:#000000;">      </span>2,Jones,Mary,50000;</pre>
<pre style="background:#f9f9f9;"><span style="color:#000000;">      </span>3,Johnson,Cathy,44000;</pre>
</div>
<p style="background:#FFFFFF;"><span style="font-family:'宋体';"><span style="color:#000000;">列式数据库把一列中的数据值串在一起存储起来，然后再存储下一列的数据，以此类推。</span></span></p>
<div style="background:#f9f9f9;">
<pre style="background:#f9f9f9;"><span style="color:#000000;">      </span>1,2,3;</pre>
<pre style="background:#f9f9f9;"><span style="color:#000000;">      </span>Smith,Jones,Johnson;</pre>
<pre style="background:#f9f9f9;"><span style="color:#000000;">      </span>Joe,Mary,Cathy;</pre>
<pre style="background:#f9f9f9;"><span style="color:#000000;">      </span>40000,50000,44000;</pre>
</div>
<p style="background:#FFFFFF;"><span style="color:#000000;"><span style="font-family:'宋体';">这只是一个简化的说法。此外，</span></span><span style="color:#000000;"><a title="Partition (database)（页面不存在）" href="http://zh.wikipedia.org/w/index.php?title=Partition_(database)&amp;action=edit&amp;redlink=1" rel="nofollow"><span style="color:#000000;">partitioning</span></a>,</span><span style="font-family:'宋体';font-size:14px;"> </span><span style="color:#000000;"><a title="Index (database)（页面不存在）" href="http://zh.wikipedia.org/w/index.php?title=Index_(database)&amp;action=edit&amp;redlink=1" rel="nofollow"><span style="color:#000000;">索引</span></a></span>,<span style="color:#000000;"><span style="font-family:'宋体';">缓存机制</span></span><span style="color:#000000;">,</span><span style="color:#000000;"><span style="font-family:'宋体';">视图</span></span><span style="color:#000000;">,</span><span style="font-family:'宋体';font-size:14px;"> </span><span style="color:#000000;"><a title="OLAP cube（页面不存在）" href="http://zh.wikipedia.org/w/index.php?title=OLAP_cube&amp;action=edit&amp;redlink=1" rel="nofollow"><span style="color:#000000;">联机分析多维数据集</span></a></span>,<span style="font-family:'宋体';"><span style="color:#000000;">以及诸如</span><span style="font-size:14px;"> <span style="color:#000000;"><a title="Write ahead logging（页面不存在）" href="http://zh.wikipedia.org/w/index.php?title=Write_ahead_logging&amp;action=edit&amp;redlink=1" rel="nofollow"><span style="color:#000000;">预写式日志</span></a></span></span><span style="font-size:14px;"> </span><span style="color:#000000;">和</span><span style="font-size:14px;"> <span style="color:#000000;"><a title="Multiversion concurrency control（页面不存在）" href="http://zh.wikipedia.org/w/index.php?title=Multiversion_concurrency_control&amp;action=edit&amp;redlink=1" rel="nofollow"><span style="color:#000000;">multiversion
 concurrency control</span></a></span></span><span style="font-size:14px;"> </span><span style="color:#000000;">此类的事务系统都在现实的应用环境中发挥作用。一般来说</span></span><span style="color:#000000;">,</span><span style="font-family:'宋体';"><span style="color:#000000;">侧重于</span><span style="color:#000000;"><a title="Online transaction processing（页面不存在）" href="http://zh.wikipedia.org/w/index.php?title=Online_transaction_processing&amp;action=edit&amp;redlink=1" rel="nofollow"><span style="color:#000000;">联机事务处理</span></a></span><span style="font-size:14px;"> </span></span><span style="color:#000000;">(OLTP)</span><span style="color:#000000;"><span style="font-family:'宋体';">的系统更适用行数据库</span></span><span style="color:#000000;">,</span><span style="font-family:'宋体';"><span style="color:#000000;">而侧重于</span><span style="color:#000000;"><a title="Online analytical processing（页面不存在）" href="http://zh.wikipedia.org/w/index.php?title=Online_analytical_processing&amp;action=edit&amp;redlink=1" rel="nofollow"><span style="color:#000000;">联机分析处理</span></a></span><span style="font-size:14px;"> </span><span style="color:#000000;">的系统就必须在行数据库和列数据库中找到适当得平衡。</span></span></p>
<div style="background:#FFFFFF;">
<h2><span id=".E7.89.B9.E7.82.B9"><span style="color:#000000;"><span style="font-family:'宋体';">特点</span></span></span></h2>
</div>
<p style="background:#FFFFFF;"><span style="color:#000000;"><span style="font-family:'宋体';">因为硬盘寻址时间相较于计算机上其他部件的运行速度来说慢的不是一般，所以常用相同工作负载下的硬盘访问性能来比较行数据库和列数据库。通常，顺序读取数据要比随机访问更快</span></span><sup id="cite_ref-1"><span style="color:#000000;"><a href="http://zh.wikipedia.org/wiki/%E5%88%97%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93#cite_note-1" rel="nofollow"><span style="color:#0b0080;">[1]</span></a></span></sup><span style="color:#000000;"><span style="font-family:'宋体';">。而且，硬盘寻址时间的提升比起</span></span><span style="color:#000000;">CPU</span><span style="color:#000000;"><span style="font-family:'宋体';">速度的进步要慢得多</span></span><span style="color:#000000;">
 (</span><span style="font-family:'宋体';"><span style="color:#000000;">参看</span><span style="font-size:14px;"> </span></span><span style="color:#000000;"><a title="Moore's Law" href="http://zh.wikipedia.org/wiki/Moore%27s_Law" rel="nofollow"><span style="color:#000000;">摩尔定律</span></a></span>)<span style="font-family:'宋体';"><span style="color:#000000;">，在使用硬盘作为存储媒介的系统上这种情况很可能还会持续一段时间。下面简单罗列了一些选择行数据库还是列数据库的权衡依据。当然，如果能够把数据全放在内存中，那么使用</span><span style="color:#000000;"><a title="In-memory database（页面不存在）" href="http://zh.wikipedia.org/w/index.php?title=In-memory_database&amp;action=edit&amp;redlink=1" rel="nofollow"><span style="color:#000000;">内存数据库</span></a></span><span style="color:#000000;">性能会更好。</span></span></p>
<p align="left" style="background:#FFFFFF;"><span style="color:#000000;">1.   </span><span style="color:#000000;">在只需要根据某几列来聚合数据的时候按列的数据组织方式更有效。因为这样只需要读取一部分数据，要比读取全部数据更快</span><span style="color:#000000;">.</span></p>
<p align="left" style="background:#FFFFFF;"><span style="color:#000000;">2.   </span><span style="color:#000000;">当只需要修改某一列值的时候按列的数据组织方式更有效。因为可以直接找到某列数据并修改，而与行中的其他列无关。</span></p>
<p align="left" style="background:#FFFFFF;"><span style="color:#000000;">3.   </span><span style="color:#000000;">当需要某行的多列数据的时候按行的数据组织方式更有效。当行中数据不是太多的情况下一次硬盘寻址就可以获得该行的所有数据。</span></p>
<p align="left" style="background:#FFFFFF;"><span style="color:#000000;">4.   </span><span style="color:#000000;">在新增行数据的时候，如果各列都有值，那么按行的数据组织方式会更有效，因为只需要一次硬盘寻址就可以写入整行的全部数据</span><span style="color:#000000;">.</span></p>
<p style="background:#FFFFFF;"><span style="color:#000000;"><span style="font-family:'宋体';">在实际应用中，面向行的数据存储架构更适用于</span></span><span style="color:#000000;"><a title="OLTP" href="http://zh.wikipedia.org/wiki/OLTP" rel="nofollow"><span style="color:#000000;">OLTP</span></a>-</span><span style="color:#000000;"><span style="font-family:'宋体';">频繁交互事务的场景。面向列的数据存储架构更适用于</span></span><span style="color:#000000;"><a title="OLAP" href="http://zh.wikipedia.org/wiki/OLAP" rel="nofollow"><span style="color:#000000;">OLAP</span></a>-(</span><span style="color:#000000;"><span style="font-family:'宋体';">如数据仓库</span></span><span style="color:#000000;">)</span><span style="color:#000000;"><span style="font-family:'宋体';">这样在海量数据（</span></span><span style="color:#000000;">(</span><span style="font-family:'宋体';"><span style="color:#000000;">可能达到</span><span style="font-size:14px;"> <span style="color:#000000;"><a title="Terabyte" href="http://zh.wikipedia.org/wiki/Terabyte" rel="nofollow"><span style="color:#000000;">terabyte</span></a></span></span><span style="color:#000000;">规模：</span></span><span style="color:#000000;">1TB=1000G)</span><span style="font-family:'宋体';"><span style="color:#000000;">）中进行有限复杂查询的场景。</span></span></p>
<div style="background:#FFFFFF;">
<h2 style="background:#FFFFFF;"><span style="font-family:'宋体';">列存储的好处：</span></h2>
</div>
<p><span style="font-family:'宋体';font-size:14px;">1.</span>   <span style="font-family:'宋体';font-size:14px;">
由于查询中的选择规则是通过列来定义的，因此整个数据库是自动索引化的；</span></p>
<p><span style="font-family:'宋体';font-size:14px;">2.</span>   <span style="font-family:'宋体';font-size:14px;">
按列存储每个字段的数据聚集存储，在查询只需要少数几个字段的时候，能大大减少读取的数据量；</span></p>
<p><span style="font-family:'宋体';font-size:14px;">3.</span>   <span style="font-family:'宋体';font-size:14px;">
一个字段的数据聚集存储，更容易为这种聚集存储设计更好的压缩/解压算法。</span></p>
<p><span style="font-family:'宋体';font-size:14px;">下图讲述了传统的行存储和列存储的区别：</span></p>
<p><img alt="" src="https://img-blog.csdn.net/20130902171521687"></p>
            </div>
                </div>