---
layout:     post
title:      Kafka集群搭建及生产者消费者案例
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/qq_33689414/article/details/80106155				</div>
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<h3 id="kafka集群搭建及生产者消费者案例">Kafka集群搭建及生产者消费者案例</h3>

<p>本文搭建的集群是采3台机器，分别是<code>server01，server02，server03</code>。linux系统是<code>centos6.7</code>。</p>

<p>kafka需要配合zookeeper使用，在安装kafka之前，需要先安装zookeeper集群，关于安装zookeeper集群，可以参考：<a href="https://blog.csdn.net/qq_33689414/article/details/80101081" rel="nofollow">Zookeeper集群环境搭建</a></p>



<h4 id="一kafka集群搭建">一、Kafka集群搭建</h4>

<p><strong>1.1 下载kafka安装包</strong></p>

<p>进入kafka的官方网站的下载页面，进行下载，下载页面链接如下:</p>

<blockquote>
  <p><a href="http://kafka.apache.org/downloads" rel="nofollow">http://kafka.apache.org/downloads</a></p>
</blockquote>

<p>本文安装的版本是：<code>kafka_2.12-1.1.0.tgz</code></p>

<p><strong>1.2 上传linux机器，解压，重命名</strong></p>

<p>1.2.1 上传到server01机器的<code>/hadoop</code>目录</p>



<pre class="prettyprint"><code class=" hljs ruby">scp  kafka_2.<span class="hljs-number">12</span>-<span class="hljs-number">1.1</span>.<span class="hljs-number">0</span>.tgz  hadoop<span class="hljs-variable">@server01</span><span class="hljs-symbol">:/hadoop</span></code></pre>

<p>1.2.2 解压：</p>



<pre class="prettyprint"><code class=" hljs autohotkey">tar -zxvf kafk<span class="hljs-built_in">a_2</span>.<span class="hljs-number">12</span>-<span class="hljs-number">1.1</span>.<span class="hljs-number">0</span>.tgz</code></pre>

<p>1.2.3 重命名为kafka</p>



<pre class="prettyprint"><code class=" hljs autohotkey">mv kafk<span class="hljs-built_in">a_2</span>.<span class="hljs-number">12</span>-<span class="hljs-number">1.1</span>.<span class="hljs-number">0</span> kafka</code></pre>

<p><strong>1.3 配置kafka的配置文件</strong></p>

<p>进入kafka/config目录，编辑<code>server.properties</code>文件，如图：</p>

<p><img src="https://raw.githubusercontent.com/zhang3550545/image_center/master/image-2018/kafka-1.png" alt="image" title=""></p>

<p><img src="https://raw.githubusercontent.com/zhang3550545/image_center/master/image-2018/kafka-2.png" alt="image" title=""></p>

<p>使用红色框出的是需要自己修改的，其余的默认就好</p>

<p><strong>1.4 将kafka目录，分发到server02，server03机器上</strong></p>



<pre class="prettyprint"><code class=" hljs ruby">scp -r /hadoop/kafka hadoop<span class="hljs-variable">@server02</span><span class="hljs-symbol">:/hadoop</span>

scp -r /hadoop/kafka hadoop<span class="hljs-variable">@server03</span><span class="hljs-symbol">:/hadoop</span></code></pre>

<p><strong>修改kafka/config/server.properties文件中的broker.id</strong>（重要）</p>

<p>如下所示：</p>

<p><img src="https://raw.githubusercontent.com/zhang3550545/image_center/master/image-2018/kafka-3.png" alt="image" title=""></p>

<p><img src="https://raw.githubusercontent.com/zhang3550545/image_center/master/image-2018/kafka-4.png" alt="image" title=""></p>

<p><strong>1.5 设置环境变量</strong></p>

<p>给每一台机器，配置环境变量</p>

<p>在/etc/profile文件末尾，写入如下环境变量</p>



<pre class="prettyprint"><code class=" hljs bash"><span class="hljs-keyword">export</span> KAFKA_HOME=/hadoop/kafka
<span class="hljs-keyword">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$KAFKA_HOME</span>/bin</code></pre>

<p>使环境变量生效</p>



<pre class="prettyprint"><code class=" hljs bash"><span class="hljs-built_in">source</span> /etc/profile</code></pre>

<p><strong>1.6 启动kafka集群</strong></p>

<p>在每一台机器上，启动kafka</p>



<pre class="prettyprint"><code class=" hljs axapta"><span class="hljs-preprocessor"># kafka目录，指定server.properties配置文件启动，-daemon：在后台启动</span>
./bin/kafka-<span class="hljs-keyword">server</span>-start.sh -daemon ./config/<span class="hljs-keyword">server</span>.properties</code></pre>

<p><img src="https://raw.githubusercontent.com/zhang3550545/image_center/master/image-2018/kafka-5.png" alt="image" title=""></p>

<p>我们使用jps命令可以看到，3台机器的kafka都起来了。</p>

<p><strong>注意一个问题：如果集群的broker.id重复，kafka起来后会挂掉</strong></p>



<h4 id="kafka的常用命令介绍">Kafka的常用命令介绍</h4>

<ul>
<li>启动</li>
</ul>



<pre class="prettyprint"><code class=" hljs axapta"><span class="hljs-preprocessor"># 显示启动</span>
./bin/kafka-<span class="hljs-keyword">server</span>-start.sh ./config/<span class="hljs-keyword">server</span>.properties

<span class="hljs-preprocessor"># 在后台启动</span>
./bin/kafka-<span class="hljs-keyword">server</span>-start.sh -daemon ./config/<span class="hljs-keyword">server</span>.properties</code></pre>

<ul>
<li>创建topic</li>
</ul>



<pre class="prettyprint"><code class=" hljs brainfuck"><span class="hljs-comment">#</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">create：表示创建</span>
<span class="hljs-comment">#</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">zookeeper</span> <span class="hljs-comment">后面的参数是zk的集群节点</span>
<span class="hljs-comment">#</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">replication</span><span class="hljs-literal">-</span><span class="hljs-comment">factor</span> <span class="hljs-comment">3</span> <span class="hljs-comment">：表示复本数</span>
<span class="hljs-comment">#</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">partitions</span> <span class="hljs-comment">3：表示分区数</span>
<span class="hljs-comment">#</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">topic</span> <span class="hljs-comment">test：表示topic的主题名称</span>

<span class="hljs-string">.</span><span class="hljs-comment">/bin/kafka</span><span class="hljs-literal">-</span><span class="hljs-comment">topics</span><span class="hljs-string">.</span><span class="hljs-comment">sh</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">create</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">zookeeper</span> <span class="hljs-comment">server01:2181</span><span class="hljs-string">,</span><span class="hljs-comment">server02:2181</span><span class="hljs-string">,</span><span class="hljs-comment">server03:2181</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">replication</span><span class="hljs-literal">-</span><span class="hljs-comment">factor</span> <span class="hljs-comment">3</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">partitions</span> <span class="hljs-comment">3</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">topic</span> <span class="hljs-comment">test</span></code></pre>

<ul>
<li>查看topic</li>
</ul>



<pre class="prettyprint"><code class=" hljs brainfuck"><span class="hljs-string">.</span><span class="hljs-comment">/bin/kafka</span><span class="hljs-literal">-</span><span class="hljs-comment">topics</span><span class="hljs-string">.</span><span class="hljs-comment">sh</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">list</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">zookeeper</span> <span class="hljs-comment">server01:2181</span></code></pre>

<ul>
<li>删除topic</li>
</ul>

<p>删除topic，需要在<code>server.properties</code>中设置<code>delete.topic.enable=true</code>否则只是标记删除或者直接重启。</p>



<pre class="prettyprint"><code class=" hljs brainfuck"><span class="hljs-string">.</span><span class="hljs-comment">/bin/kafka</span><span class="hljs-literal">-</span><span class="hljs-comment">topics</span><span class="hljs-string">.</span><span class="hljs-comment">sh</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">delete</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">zookeeper</span> <span class="hljs-comment">server01:2181</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">topic</span> <span class="hljs-comment">test</span></code></pre>

<ul>
<li>执行生产者命令</li>
</ul>



<pre class="prettyprint"><code class=" hljs lasso"><span class="hljs-built_in">.</span>/bin/kafka<span class="hljs-attribute">-console</span><span class="hljs-attribute">-producer</span><span class="hljs-built_in">.</span>sh <span class="hljs-subst">--</span>broker<span class="hljs-attribute">-list</span> server01:<span class="hljs-number">9092</span> <span class="hljs-subst">--</span>topic test</code></pre>

<p>执行该命令，在命令窗口可以输入消息（生产消息）</p>

<ul>
<li>执行消费者命令</li>
</ul>



<pre class="prettyprint"><code class=" hljs brainfuck"><span class="hljs-comment">#</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">from</span><span class="hljs-literal">-</span><span class="hljs-comment">beginning：表示从生产的开始获取数据</span>
<span class="hljs-string">.</span><span class="hljs-comment">/bin/kafka</span><span class="hljs-literal">-</span><span class="hljs-comment">console</span><span class="hljs-literal">-</span><span class="hljs-comment">consumer</span><span class="hljs-string">.</span><span class="hljs-comment">sh</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">zookeeper</span> <span class="hljs-comment">server01:2181</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">from</span><span class="hljs-literal">-</span><span class="hljs-comment">beginning</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">topic</span> <span class="hljs-comment">test</span></code></pre>

<ul>
<li>查看topic更详细的信息</li>
</ul>



<pre class="prettyprint"><code class=" hljs brainfuck"><span class="hljs-string">.</span><span class="hljs-comment">/bin/kafka</span><span class="hljs-literal">-</span><span class="hljs-comment">topics</span><span class="hljs-string">.</span><span class="hljs-comment">sh</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">topic</span> <span class="hljs-comment">test</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">describe</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">zookeeper</span> <span class="hljs-comment">server01:2181</span></code></pre>

<hr>



<h4 id="生产者和消费者案例">生产者和消费者案例</h4>

<ul>
<li><p><strong>shell 实现</strong></p>

<ol><li>启动<code>zookeeper</code>集群和<code>kafka</code>集群</li></ol></li>
</ul>

<p>在安装的时候已经讲过</p>

<ol>
<li>创建topic主题</li>
</ol>



<pre class="prettyprint"><code class=" hljs brainfuck"><span class="hljs-string">.</span><span class="hljs-comment">/bin/kafka</span><span class="hljs-literal">-</span><span class="hljs-comment">topics</span><span class="hljs-string">.</span><span class="hljs-comment">sh</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">create</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">zookeeper</span> <span class="hljs-comment">server01:2181</span><span class="hljs-string">,</span><span class="hljs-comment">server02:2181</span><span class="hljs-string">,</span><span class="hljs-comment">server03:2181</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">replication</span><span class="hljs-literal">-</span><span class="hljs-comment">factor</span> <span class="hljs-comment">3</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">partitions</span> <span class="hljs-comment">3</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">topic</span> <span class="hljs-comment">test_shell</span></code></pre>

<p><img src="https://raw.githubusercontent.com/zhang3550545/image_center/master/image-2018/kafka-6.png" alt="image" title=""></p>

<ol>
<li>在server01机器上执行生产者的命令</li>
</ol>



<pre class="prettyprint"><code class=" hljs lasso"><span class="hljs-built_in">.</span>/bin/kafka<span class="hljs-attribute">-console</span><span class="hljs-attribute">-producer</span><span class="hljs-built_in">.</span>sh <span class="hljs-subst">--</span>broker<span class="hljs-attribute">-list</span> server01:<span class="hljs-number">9092</span> <span class="hljs-subst">--</span>topic test_shell</code></pre>

<ol>
<li>在server02机器上执行消费者的命令</li>
</ol>



<pre class="prettyprint"><code class=" hljs brainfuck"><span class="hljs-string">.</span><span class="hljs-comment">/bin/kafka</span><span class="hljs-literal">-</span><span class="hljs-comment">console</span><span class="hljs-literal">-</span><span class="hljs-comment">consumer</span><span class="hljs-string">.</span><span class="hljs-comment">sh</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">zookeeper</span> <span class="hljs-comment">server01:2181</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">from</span><span class="hljs-literal">-</span><span class="hljs-comment">beginning</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">topic</span> <span class="hljs-comment">test_shell</span></code></pre>

<ol>
<li>在server01生产者命令窗口，输入一些消息按enter，效果如图：</li>
</ol>

<p><img src="https://raw.githubusercontent.com/zhang3550545/image_center/master/image-2018/kafka-7.png" alt="image" title=""></p>

<ul>
<li><strong>java api实现</strong>：</li>
</ul>

<p>pom.xml配置kafka依赖：</p>



<pre class="prettyprint"><code class=" hljs xml"><span class="hljs-tag">&lt;<span class="hljs-title">dependencies</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>org.apache.kafka<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>kafka_2.9.2<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>0.8.1.1<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">dependencies</span>&gt;</span></code></pre>

<p>Producer生产者代码</p>



<pre class="prettyprint"><code class=" hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> KafkaProducer {

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(String[] args) throws InterruptedException {
        Properties p = <span class="hljs-keyword">new</span> Properties();
        <span class="hljs-comment">// 设置配置信息</span>
        p.put(<span class="hljs-string">"serializer.class"</span>, <span class="hljs-string">"kafka.serializer.StringEncoder"</span>);<span class="hljs-comment">// 指定序列化数据的对象，不然会导致序列化和传递的数据类型不一致</span>
        p.put(<span class="hljs-string">"metadata.broker.list"</span>, <span class="hljs-string">"server01:9092"</span>);<span class="hljs-comment">// 指定kafka broker对应的主机，格式为 host:port,host:port,...</span>

        ProducerConfig config = <span class="hljs-keyword">new</span> ProducerConfig(p);
        Producer&lt;String, String&gt; producer = <span class="hljs-keyword">new</span> Producer&lt;String, String&gt;(config);
        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;
        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) {
            <span class="hljs-comment">// test_java：表示主题</span>
            KeyedMessage&lt;String, String&gt; message = <span class="hljs-keyword">new</span> KeyedMessage&lt;String, String&gt;(<span class="hljs-string">"test_java"</span>, <span class="hljs-string">"message_"</span> + count);
            <span class="hljs-comment">// 发送消息</span>
            producer.send(message);
            count++;
            Thread.sleep(<span class="hljs-number">5000</span>);
        }
    }
}</code></pre>

<p>Consumer消费者代码</p>



<pre class="prettyprint"><code class=" hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> KafkaConsumer {
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(String[] args) {
        Properties p = <span class="hljs-keyword">new</span> Properties();
        p.put(<span class="hljs-string">"group.id"</span>, <span class="hljs-string">"testGroup"</span>);<span class="hljs-comment">// 设置group.id，必须要设置，不然报错</span>
        p.put(<span class="hljs-string">"zookeeper.connect"</span>, <span class="hljs-string">"server01:2181,server02:2181,server02:2181"</span>);<span class="hljs-comment">//zk集群设置</span>
        p.put(<span class="hljs-string">"auto.offset.reset"</span>, <span class="hljs-string">"smallest"</span>);<span class="hljs-comment">//从头开始消费，如果是largeest:表示从最后开始消费</span>
        p.put(<span class="hljs-string">"auto.commit.interval.ms"</span>, <span class="hljs-string">"1000"</span>);<span class="hljs-comment">// consumer向zookeeper提交offset的频率，单位是秒</span>
        <span class="hljs-comment">// 在“range”和“roundrobin”策略之间选择一种作为分配partitions给consumer 数据流的策略</span>
        p.put(<span class="hljs-string">"partition.assignment.strategy"</span>, <span class="hljs-string">"roundrobin"</span>);

        <span class="hljs-comment">// 将属性添加到ConsumerConfig配置中</span>
        ConsumerConfig conf = <span class="hljs-keyword">new</span> ConsumerConfig(p);
        <span class="hljs-comment">// 创建连接</span>
        ConsumerConnector connector = Consumer.createJavaConsumerConnector(conf);
        Map&lt;String, Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String, Integer&gt;();
        <span class="hljs-comment">// 设置主题，并设置partitions分区</span>
        map.put(<span class="hljs-string">"test_java"</span>, <span class="hljs-number">2</span>);
        <span class="hljs-comment">// 创建信息流，返回一个map，map里面装载是topic对应的流信息</span>
        Map&lt;String, List&lt;KafkaStream&lt;<span class="hljs-keyword">byte</span>[], <span class="hljs-keyword">byte</span>[]&gt;&gt;&gt; streams = connector.createMessageStreams(map);
        <span class="hljs-comment">// 通过主题topic获取留信息</span>
        final List&lt;KafkaStream&lt;<span class="hljs-keyword">byte</span>[], <span class="hljs-keyword">byte</span>[]&gt;&gt; kafkaStreams = streams.<span class="hljs-keyword">get</span>(<span class="hljs-string">"test_java"</span>);

        <span class="hljs-comment">// 通过线程池获取流信息的数据</span>
        ExecutorService service = Executors.newFixedThreadPool(<span class="hljs-number">4</span>);

        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; streams.size(); i++) {
            final <span class="hljs-keyword">int</span> index = i;
            service.execute(<span class="hljs-keyword">new</span> Runnable() {
                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span>() {
                    <span class="hljs-comment">//获取信息数据，包含topic,partition,message等信息</span>
                    KafkaStream&lt;<span class="hljs-keyword">byte</span>[], <span class="hljs-keyword">byte</span>[]&gt; messageAndMetadatas = kafkaStreams.<span class="hljs-keyword">get</span>(index);
                    <span class="hljs-keyword">for</span> (MessageAndMetadata&lt;<span class="hljs-keyword">byte</span>[], <span class="hljs-keyword">byte</span>[]&gt; data : messageAndMetadatas) {
                        String topic = data.topic();
                        <span class="hljs-keyword">int</span> partition = data.partition();
                        String message = <span class="hljs-keyword">new</span> String(data.message());
                        <span class="hljs-comment">// 信息输出至控制台</span>
                        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">"topic: "</span> + topic + <span class="hljs-string">"    partition: "</span> + partition + <span class="hljs-string">"    message: "</span> + message);
                    }
                }
            });
        }
    }
}
</code></pre>

<p>创建topic主题：</p>



<pre class="prettyprint"><code class=" hljs brainfuck"><span class="hljs-string">.</span><span class="hljs-comment">/bin/kafka</span><span class="hljs-literal">-</span><span class="hljs-comment">topics</span><span class="hljs-string">.</span><span class="hljs-comment">sh</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">create</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">zookeeper</span> <span class="hljs-comment">server01:2181</span><span class="hljs-string">,</span><span class="hljs-comment">server02:2181</span><span class="hljs-string">,</span><span class="hljs-comment">server03:2181</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">replication</span><span class="hljs-literal">-</span><span class="hljs-comment">factor</span> <span class="hljs-comment">3</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">partitions</span> <span class="hljs-comment">3</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">topic</span> <span class="hljs-comment">test_java</span></code></pre>

<p>执行结果：</p>

<p><img src="https://raw.githubusercontent.com/zhang3550545/image_center/master/image-2018/kafka-8.png" alt="image" title=""></p>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>