---
layout:     post
title:      Receiver 分发详解
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<p style="color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';font-size:16px;line-height:25.6px;">
<span style="font-weight:bolder;"><span>[酷玩 Spark] Spark Streaming 源码解析系列</span></span> ，返回目录请 <a href="https://github.com/lw-lin/CoolplaySpark/blob/master/Spark%20Streaming%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97/readme.md" rel="nofollow" style="color:rgb(64,120,192);text-decoration:none;background-color:transparent;">猛戳这里</a></p>
<p style="color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';font-size:16px;line-height:25.6px;">
<a href="http://e.qq.com/" rel="nofollow" style="color:rgb(64,120,192);text-decoration:none;background-color:transparent;">「腾讯·广点通」</a>技术团队荣誉出品</p>
<p style="color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';font-size:16px;line-height:25.6px;">
<span>本文内容适用范围：</span></p>
<ul style="color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';font-size:16px;line-height:25.6px;"><li><span>2016.02.25 update, Spark 2.0 全系列 √ (2.0.0-SNAPSHOT 尚未正式发布)</span></li><li><span>2016.03.10 update, Spark 1.6 全系列 √ (1.6.0, 1.6.1)</span></li><li><span>2015.11.09 update, Spark 1.5 全系列 √ (1.5.0, 1.5.1, 1.5.2)</span></li><li><span>2015.07.15 update, Spark 1.4 全系列 √ (1.4.0, 1.4.1)</span> <br><br></li></ul><p style="color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';font-size:16px;line-height:25.6px;">
阅读本文前，请一定先阅读 <a href="https://github.com/lw-lin/CoolplaySpark/blob/master/Spark%20Streaming%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97/0.1%20Spark%20Streaming%20%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF%E4%B8%8E%E6%A8%A1%E5%9D%97%E6%A6%82%E8%BF%B0.md" rel="nofollow" style="color:rgb(64,120,192);text-decoration:none;background-color:transparent;">Spark
 Streaming 实现思路与模块概述</a> 一文，其中概述了 Spark Streaming 的 4 大模块的基本作用，有了全局概念后再看本文对 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">模块 3：数据产生与导入</code> 细节的解释。</p>
<h2 style="line-height:1.225;font-size:1.75em;border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(238,238,238);color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';">
<a id="user-content-引言" class="anchor" href="https://github.com/lw-lin/CoolplaySpark/blob/master/Spark%20Streaming%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97/3.1%20Receiver%20%E5%88%86%E5%8F%91%E8%AF%A6%E8%A7%A3.md#%E5%BC%95%E8%A8%80" rel="nofollow" style="color:rgb(64,120,192);text-decoration:none;display:inline-block;margin-left:-18px;line-height:1;background-color:transparent;"></a>引言</h2>
<p style="color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';font-size:16px;line-height:25.6px;">
我们前面在 <a href="https://github.com/lw-lin/CoolplaySpark/blob/master/Spark%20Streaming%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97/1.1%20DStream,%20DStreamGraph%20%E8%AF%A6%E8%A7%A3.md" rel="nofollow" style="color:rgb(64,120,192);text-decoration:none;background-color:transparent;">DStream,
 DStreamGraph 详解</a> 讲到，整个 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">DStreamGraph</code> 是由 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">output
 stream</code> 通过 <span>dependency</span> 引用关系，索引到上游 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">DStream</code> 节点。而递归的追溯到最上游的 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">InputDStream</code> 节点时，就没有对其它 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">DStream</code> 节点的依赖了，因为<code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">InputDStream</code> 节点本身就代表了最原始的数据集。</p>
<p style="color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';font-size:16px;line-height:25.6px;">
<a href="https://github.com/lw-lin/CoolplaySpark/blob/master/Spark%20Streaming%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97/1.imgs/035.png" rel="nofollow" style="color:rgb(64,120,192);text-decoration:none;background-color:transparent;"><img src="https://github.com/lw-lin/CoolplaySpark/raw/master/Spark%20Streaming%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97/1.imgs/035.png" alt="image" width="680" height="260" style="border-style:none;"></a></p>
<p style="color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';font-size:16px;line-height:25.6px;">
我们对 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">模块 3：数据产生与导入</code> 细节的解释，是仅针对 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">ReceiverInputDStream</code> 及其子类的；其它 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">InputDStream</code> 子类的讲解，我们在另外的文章中进行。即，本模块的讨论范围是：</p>
<div class="highlight highlight-source-scala" style="color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';font-size:16px;line-height:25.6px;">
<pre style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;line-height:1.45;overflow:auto;background-color:rgb(247,247,247);"><span class="pl-k" style="color:rgb(167,29,93);">-</span> <span class="pl-en" style="color:rgb(121,93,163);">ReceiverInputDStream</span>
  <span class="pl-k" style="color:rgb(167,29,93);">-</span> 子类 <span class="pl-en" style="color:rgb(121,93,163);">SocketInputDStream</span>
  <span class="pl-k" style="color:rgb(167,29,93);">-</span> 子类 <span class="pl-en" style="color:rgb(121,93,163);">TwitterInputDStream</span>
  <span class="pl-k" style="color:rgb(167,29,93);">-</span> 子类 <span class="pl-en" style="color:rgb(121,93,163);">RawInputDStream</span>
  <span class="pl-k" style="color:rgb(167,29,93);">-</span> 子类 <span class="pl-en" style="color:rgb(121,93,163);">FlumePollingInputDStream</span>
  <span class="pl-k" style="color:rgb(167,29,93);">-</span> 子类 <span class="pl-en" style="color:rgb(121,93,163);">MQTTInputDStream</span>
  <span class="pl-k" style="color:rgb(167,29,93);">-</span> 子类 <span class="pl-en" style="color:rgb(121,93,163);">FlumeInputDStream</span>
  <span class="pl-k" style="color:rgb(167,29,93);">-</span> 子类 <span class="pl-en" style="color:rgb(121,93,163);">PluggableInputDStream</span>
  <span class="pl-k" style="color:rgb(167,29,93);">-</span> 子类 <span class="pl-en" style="color:rgb(121,93,163);">KafkaInputDStream</span></pre>
</div>
<h2 style="line-height:1.225;font-size:1.75em;border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(238,238,238);color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';">
<a id="user-content-receivertracker-分发-receiver-过程" class="anchor" href="https://github.com/lw-lin/CoolplaySpark/blob/master/Spark%20Streaming%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97/3.1%20Receiver%20%E5%88%86%E5%8F%91%E8%AF%A6%E8%A7%A3.md#receivertracker-%E5%88%86%E5%8F%91-receiver-%E8%BF%87%E7%A8%8B" rel="nofollow" style="color:rgb(64,120,192);text-decoration:none;display:inline-block;margin-left:-18px;line-height:1;background-color:transparent;"></a>ReceiverTracker
 分发 Receiver 过程</h2>
<p style="color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';font-size:16px;line-height:25.6px;">
我们已经知道，<code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">ReceiverTracker</code> 自身运行在 driver 端，是一个管理分布在各个 executor 上的 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Receiver</code> 的总指挥者。</p>
<p style="color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';font-size:16px;line-height:25.6px;">
在 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">ssc.start()</code> 时，将隐含地调用 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">ReceiverTracker.start()</code>；而 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">ReceiverTracker.start()</code> 最重要的任务就是调用自己的<code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">launchReceivers()</code> 方法将 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Receiver</code> 分发到多个
 executor 上去。然后在每个 executor 上，由 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">ReceiverSupervisor</code> 来分别启动一个 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Receiver</code> 接收数据。这个过程用下图表示：</p>
<p style="color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';font-size:16px;line-height:25.6px;">
<a href="https://github.com/lw-lin/CoolplaySpark/blob/master/Spark%20Streaming%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97/0.imgs/060.png" rel="nofollow" style="color:rgb(64,120,192);text-decoration:none;background-color:transparent;"><img src="https://github.com/lw-lin/CoolplaySpark/raw/master/Spark%20Streaming%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97/0.imgs/060.png" alt="image" width="888" height="389" style="border-style:none;"></a></p>
<p style="color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';font-size:16px;line-height:25.6px;">
我们将以 1.4.0 和 1.5.0 这两个版本为代表，仔细分析一下 launchReceivers() 的实现。</p>
<pre style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;line-height:1.45;overflow:auto;color:rgb(51,51,51);background-color:rgb(247,247,247);"><code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;border:0px;display:inline;overflow:visible;line-height:inherit;background:transparent;">1.4.0 代表了 1.5.0 以前的版本，如 1.2.x, 1.3.x, 1.4.x

1.5.0 代表了 1.5.0 以来的版本，如 1.5.x, 1.6.x
</code></pre>
<h2 style="line-height:1.225;font-size:1.75em;border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(238,238,238);color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';">
<a id="user-content-spark-140-的-launchreceivers-实现" class="anchor" href="https://github.com/lw-lin/CoolplaySpark/blob/master/Spark%20Streaming%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97/3.1%20Receiver%20%E5%88%86%E5%8F%91%E8%AF%A6%E8%A7%A3.md#spark-140-%E7%9A%84-launchreceivers-%E5%AE%9E%E7%8E%B0" rel="nofollow" style="color:rgb(64,120,192);text-decoration:none;display:inline-block;margin-left:-18px;line-height:1;background-color:transparent;"></a>Spark
 1.4.0 的 launchReceivers() 实现</h2>
<p style="color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';font-size:16px;line-height:25.6px;">
Spark 1.4.0 的 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">launchReceivers()</code> 的过程如下：</p>
<ul style="color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';font-size:16px;line-height:25.6px;"><li>
<p>(1.a) <span style="font-weight:bolder;">构造 Receiver RDD</span>。具体的，是先遍历所有的 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">ReceiverInputStream</code>，获得将要启动的所有 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">x</code> 个 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Receiver</code> 的实例。然后，把这些实例当做 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">x</code> 份数据，在
 driver 端构造一个 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">RDD</code> 实例，这个 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">RDD</code> 分为 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">x</code> 个
 partition，每个 partition 包含一个 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Receiver</code> 数据（即 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Receiver</code> 实例）。</p>
</li><li>
<p>(1.b) <span style="font-weight:bolder;">定义计算 func</span>。我们将在多个 executor 上共启动 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">x</code> 个 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Task</code>，每个 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Task</code> 负责一个
 partition 的数据，即一个<code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Receiver</code> 实例。我们要对这个 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Receiver</code> 实例做的计算定义为 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">func</code> 函数，具体的，<code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">func</code> 是：</p>
<ul><li>以这个 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Receiver</code> 实例为参数，构造新的 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">ReceiverSupervisor</code> 实例 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">supervisor</code>：<code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">supervisor
 = new ReceiverSupervisorImpl(receiver, ...)</code></li><li><code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">supervisor.start()</code>；这一步将启动新线程启动 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Receiver</code> 实例，然后很快返回</li><li><code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">supervisor.awaitTermination()</code>；将一直 block 住当前 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Task</code> 的线程</li></ul></li><li>
<p>(1.c) <span style="font-weight:bolder;">分发 RDD(Receiver) 和 func 到具体的 executor</span>。上面 (a)(b) 两步只是在 driver 端定义了 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">RDD[Receiver]</code> 和
 这个<code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">RDD</code> 之上将执行的 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">func</code>，但并没有具体的去做。这一步是将两者的定义分发到
 executor 上去，马上就可以实际执行了。</p>
</li><li>
<p>(2) <span style="font-weight:bolder;">在各个 executor 端，执行(1.b) 中定义的 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">func</code></span>。即启动 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Receiver</code> 实例，并一直
 block 住当前线程。</p>
</li></ul><p style="color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';font-size:16px;line-height:25.6px;">
这样，通过 1 个 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">RDD</code> 实例包含 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">x</code> 个 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Receiver</code>，对应启动
 1 个 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Job</code> 包含 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">x</code> 个 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Task</code>，就可以完成 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Receiver</code> 的分发和部署了。上述
 (1.a)(1.b)(1.c)(2) 的过程示意如下图：</p>
<p style="color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';font-size:16px;line-height:25.6px;">
<a href="https://github.com/lw-lin/CoolplaySpark/blob/master/Spark%20Streaming%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97/3.imgs/020.png" rel="nofollow" style="color:rgb(64,120,192);text-decoration:none;background-color:transparent;"><img src="https://github.com/lw-lin/CoolplaySpark/raw/master/Spark%20Streaming%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97/3.imgs/020.png" alt="image" width="600" height="232" style="border-style:none;"></a></p>
<p style="color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';font-size:16px;line-height:25.6px;">
这里 Spark Streaming 下层的 Spark Core 对 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Receiver</code> 分发是毫无感知的，它只是执行了“应用层面” -- 对 Spark Core 来讲，Spark Streaming 就是“应用层面”-- 的一个普通 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Job</code>；但
 Spark Streaming 只通过这个普通 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Job</code> 即可完“特殊功能”的 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Receiver</code>分发，可谓巧妙巧妙。</p>
<p style="color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';font-size:16px;line-height:25.6px;">
上述逻辑实现的源码请到 <a href="https://github.com/apache/spark/blob/v1.4.0/streaming/src/main/scala/org/apache/spark/streaming/scheduler/ReceiverTracker.scala" rel="nofollow" style="color:rgb(64,120,192);text-decoration:none;background-color:transparent;">Spark 1.4.0
 的 ReceiverTracker</a> 查看。</p>
<h2 style="line-height:1.225;font-size:1.75em;border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(238,238,238);color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';">
<a id="user-content-spark-150-的-launchreceivers-实现" class="anchor" href="https://github.com/lw-lin/CoolplaySpark/blob/master/Spark%20Streaming%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97/3.1%20Receiver%20%E5%88%86%E5%8F%91%E8%AF%A6%E8%A7%A3.md#spark-150-%E7%9A%84-launchreceivers-%E5%AE%9E%E7%8E%B0" rel="nofollow" style="color:rgb(64,120,192);text-decoration:none;display:inline-block;margin-left:-18px;line-height:1;background-color:transparent;"></a>Spark
 1.5.0 的 launchReceivers() 实现</h2>
<p style="color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';font-size:16px;line-height:25.6px;">
其实上面这个实现，这个长时运行的分发 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Job</code> 还存在一些问题：</p>
<ul style="color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';font-size:16px;line-height:25.6px;"><li>如果某个 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Task</code> 失败超过 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">spark.task.maxFailures(默认=4)</code> 次的话，整个 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Job</code> 就会失败。这个在长时运行的
 Spark Streaming 程序里，<code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Executor</code> 多失效几次就有可能导致 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Task</code> 失败达到上限次数了。</li><li>如果某个 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Task</code> 失效一下，Spark Core 的 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">TaskScheduler</code> 会将其重新部署到另一个
 executor 上去重跑。但这里的问题在于，负责重跑的 executor 可能是在下发重跑的那一刻是正在执行 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Task</code> 数较少的，但不一定能够将 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Receiver</code> 分布的最均衡的。</li><li>有个用户 code 可能会想自定义一个 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Receiver</code> 的分布策略，比如所有的 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Receiver</code> 都部署到同一个节点上去。</li></ul><p style="color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';font-size:16px;line-height:25.6px;">
从 1.5.0 开始，Spark Streaming 添加了增强的 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Receiver</code> 分发策略。对比之前的版本，主要的变更在于：</p>
<ol style="color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';font-size:16px;line-height:25.6px;"><li>添加可插拔的 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">ReceiverSchedulingPolicy</code></li><li>把 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">1</code> 个 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Job</code>（包含 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">x</code> 个 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Task</code>），改为 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">x</code> 个 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Job</code>（每个 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Job</code> 只包含 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">1</code> 个 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Task</code>）</li><li>添加对 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Receiver</code> 的监控重启机制</li></ol><p style="color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';font-size:16px;line-height:25.6px;">
我们一个一个看一看。</p>
<h3 style="line-height:1.43;font-size:1.5em;color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';">
<a id="user-content-1-可插拔的-receiverschedulingpolicy" class="anchor" href="https://github.com/lw-lin/CoolplaySpark/blob/master/Spark%20Streaming%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97/3.1%20Receiver%20%E5%88%86%E5%8F%91%E8%AF%A6%E8%A7%A3.md#1-%E5%8F%AF%E6%8F%92%E6%8B%94%E7%9A%84-receiverschedulingpolicy" rel="nofollow" style="color:rgb(64,120,192);text-decoration:none;display:inline-block;margin-left:-18px;line-height:1.2;background-color:transparent;"></a>(1)
 可插拔的 ReceiverSchedulingPolicy</h3>
<p style="color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';font-size:16px;line-height:25.6px;">
<code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">ReceiverSchedulingPolicy</code> 的主要目的，是在 Spark Streaming 层面添加对 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Receiver</code> 的分发目的地的计算，相对于之前版本依赖
 Spark Core 的 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">TaskScheduler</code> 进行通用分发，新的 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">ReceiverSchedulingPolicy</code> 会对
 Streaming 应用的更好的语义理解，也能计算出更好的分发策略。</p>
<p style="color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';font-size:16px;line-height:25.6px;">
<code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">ReceiverSchedulingPolicy</code> 有两个方法，分别用于：</p>
<ul style="color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';font-size:16px;line-height:25.6px;"><li>
<p>在 Streaming 程序首次启动时：</p>
<ul><li>收集所有 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">InputDStream</code> 包含的所有 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Receiver</code> 实例
 —— <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">receivers</code></li><li>收集所有的 executor —— <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">executors</code> —— 作为候选目的地</li><li>然后就调用 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">ReceiverSchedulingPolicy.scheduleReceivers(receivers, executors)</code> 来计算每个 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Receiver</code> 的目的地
 executor 列表</li></ul></li><li>
<p>在 Streaming 程序运行过程中，如果需要重启某个 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Receiver</code>：</p>
<ul><li>将首先看一看之前计算过的目的地 executor 还没有还 alive 的</li><li>如果没有，就需要 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">ReceiverSchedulingPolicy.rescheduleReceiver(receiver, ...)</code> 来重新计算这个 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Receiver</code> 的目的地
 executor 列表</li></ul></li></ul><p style="color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';font-size:16px;line-height:25.6px;">
<a href="https://github.com/apache/spark/blob/master/streaming/src/main/scala/org/apache/spark/streaming/scheduler/ReceiverSchedulingPolicy.scala" rel="nofollow" style="color:rgb(64,120,192);text-decoration:none;background-color:transparent;">默认的 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">ReceiverSchedulingPolicy</code></a> 是实现为 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">round-robin</code> 式的了。我们举例说明下这两个方法：</p>
<p style="color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';font-size:16px;line-height:25.6px;">
<a href="https://github.com/lw-lin/CoolplaySpark/blob/master/Spark%20Streaming%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97/3.imgs/030.png" rel="nofollow" style="color:rgb(64,120,192);text-decoration:none;background-color:transparent;"><img src="https://github.com/lw-lin/CoolplaySpark/raw/master/Spark%20Streaming%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97/3.imgs/030.png" alt="image" width="600" height="189" style="border-style:none;"></a></p>
<p style="color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';font-size:16px;line-height:25.6px;">
其中，在 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Receiver y</code> 失效时，以前的 Spark Streaming 有可能会在 executor 1 上重启 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Recever
 y</code>，而 1.5.0 以来，将在 executor 3 上重启 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Receiver y</code>。</p>
<h3 style="line-height:1.43;font-size:1.5em;color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';">
<a id="user-content-2-每个-receiver-分发有单独的-job-负责" class="anchor" href="https://github.com/lw-lin/CoolplaySpark/blob/master/Spark%20Streaming%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97/3.1%20Receiver%20%E5%88%86%E5%8F%91%E8%AF%A6%E8%A7%A3.md#2-%E6%AF%8F%E4%B8%AA-receiver-%E5%88%86%E5%8F%91%E6%9C%89%E5%8D%95%E7%8B%AC%E7%9A%84-job-%E8%B4%9F%E8%B4%A3" rel="nofollow" style="color:rgb(64,120,192);text-decoration:none;display:inline-block;margin-left:-18px;line-height:1.2;background-color:transparent;"></a>(2)
 每个 Receiver 分发有单独的 Job 负责</h3>
<p style="color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';font-size:16px;line-height:25.6px;">
1.5.0 版本以来的 Spark Streaming，是为每个 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Receiver</code> 都分配单独的只有 1 个 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Task</code> 的 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Job</code> 来尝试分发，这与以前版本将<code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">x</code> 个 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Receiver</code> 都放到一个有 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">x</code> 个 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Task</code> 的 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Job</code> 里分发是很不一样的。</p>
<p style="color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';font-size:16px;line-height:25.6px;">
而且，对于这仅有的一个 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Task</code>，只在第 1 次执行时，才尝试启动 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Receiver</code>；如果该 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Task</code> 因为失效而被调度到其它
 executor 执行时，就不再尝试启动 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Receiver</code>、只做一个空操作，从而导致本 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Job</code> 的状态是成功执行已完成。<code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">ReceiverTracker</code> 会另外调起一个 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Job</code> ——
 有可能会重新计算 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Receiver</code> 的目的地 —— 来继续尝试 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Receiver</code> 分发……如此直到成功为止。</p>
<p style="color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';font-size:16px;line-height:25.6px;">
另外，由于 Spark Core 的 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Task</code> 下发时只会参考并大部分时候尊重 Spark Streaming 设置的 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">preferredLocation</code> 目的地信息，还是有一定可能该分发 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Receiver</code> 的 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Job</code> 并没有在我们想要调度的
 executor 上运行。此时，在第 1 次执行 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Task</code> 时，会首先向 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">ReceiverTracker</code> 发送 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">RegisterReceiver</code> 消息，只有得到肯定的答复时，才真正启动 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Receiver</code>，否则就继续做一个空操作，导致本 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Job</code> 的状态是成功执行已完成。当然，<code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">ReceiverTracker</code> 也会另外调起一个 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Job</code>，来继续尝试 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Receiver</code> 分发……如此直到成功为止。</p>
<p style="color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';font-size:16px;line-height:25.6px;">
我们用图示来表达这个改动：</p>
<p style="color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';font-size:16px;line-height:25.6px;">
<a href="https://github.com/lw-lin/CoolplaySpark/blob/master/Spark%20Streaming%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97/3.imgs/040.png" rel="nofollow" style="color:rgb(64,120,192);text-decoration:none;background-color:transparent;"><img src="https://github.com/lw-lin/CoolplaySpark/raw/master/Spark%20Streaming%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97/3.imgs/040.png" alt="image" width="600" height="232" style="border-style:none;"></a></p>
<p style="color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';font-size:16px;line-height:25.6px;">
所以通过上面可以看到，一个 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Receiver</code> 的分发 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Job</code> 是有可能没有完成分发 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Receiver</code> 的目的的，所以 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">ReceiverTracker</code> 会继续再起一个 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Job</code> 来尝试 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Receiver</code> 分发。这个机制保证了，如果一次 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Receiver</code> 如果没有抵达预先计算好的
 executor，就有机会再次进行分发，从而实现在 Spark Streaming 层面对 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Receiver</code> 所在位置更好的控制。</p>
<h3 style="line-height:1.43;font-size:1.5em;color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';">
<a id="user-content-3-对-receiver-的监控重启机制" class="anchor" href="https://github.com/lw-lin/CoolplaySpark/blob/master/Spark%20Streaming%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97/3.1%20Receiver%20%E5%88%86%E5%8F%91%E8%AF%A6%E8%A7%A3.md#3-%E5%AF%B9-receiver-%E7%9A%84%E7%9B%91%E6%8E%A7%E9%87%8D%E5%90%AF%E6%9C%BA%E5%88%B6" rel="nofollow" style="color:rgb(64,120,192);text-decoration:none;display:inline-block;margin-left:-18px;line-height:1.2;background-color:transparent;"></a>(3)
 对 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;">Receiver</code> 的监控重启机制</h3>
<p style="color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';font-size:16px;line-height:25.6px;">
上面分析了每个 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Receiver</code> 都有专门的 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Job</code> 来保证分发后，我们发现这样一来，<code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Receiver</code> 的失效重启就不受<code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">spark.task.maxFailures(默认=4)</code> 次的限制了。</p>
<p style="color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';font-size:16px;line-height:25.6px;">
因为现在的 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Receiver</code> 重试不是在 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Task</code> 级别，而是在 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Job</code> 级别；并且 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Receiver</code> 失效后并不会导致前一次 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Job</code> 失败，而是前一次 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Job</code> 成功、并新起一个 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Job</code> 再次进行分发。这样一来，不管
 Spark Streaming 运行多长时间，<code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Receiver</code> 总是保持活性的，不会随着 executor 的丢失而导致 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Receiver</code> 死去。</p>
<h2 style="line-height:1.225;font-size:1.75em;border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(238,238,238);color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';">
<a id="user-content-总结" class="anchor" href="https://github.com/lw-lin/CoolplaySpark/blob/master/Spark%20Streaming%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97/3.1%20Receiver%20%E5%88%86%E5%8F%91%E8%AF%A6%E8%A7%A3.md#%E6%80%BB%E7%BB%93" rel="nofollow" style="color:rgb(64,120,192);text-decoration:none;display:inline-block;margin-left:-18px;line-height:1;background-color:transparent;"></a>总结</h2>
<p style="color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';font-size:16px;line-height:25.6px;">
我们再简单对比一下 1.4.0 和 1.5.0 版本在 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Receiver</code> 分发上的区别：</p>
<p style="color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';font-size:16px;line-height:25.6px;">
<a href="https://github.com/lw-lin/CoolplaySpark/blob/master/Spark%20Streaming%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97/3.imgs/020.png" rel="nofollow" style="color:rgb(64,120,192);text-decoration:none;background-color:transparent;"><img src="https://github.com/lw-lin/CoolplaySpark/raw/master/Spark%20Streaming%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97/3.imgs/020.png" alt="image" width="600" height="232" style="border-style:none;"></a> <a href="https://github.com/lw-lin/CoolplaySpark/blob/master/Spark%20Streaming%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97/3.imgs/040.png" rel="nofollow" style="color:rgb(64,120,192);text-decoration:none;background-color:transparent;"><img src="https://github.com/lw-lin/CoolplaySpark/raw/master/Spark%20Streaming%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97/3.imgs/040.png" alt="image" width="600" height="232" style="border-style:none;"></a></p>
<p style="color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';font-size:16px;line-height:25.6px;">
通过以上分析，我们总结：</p>
<table style="border-spacing:0px;border-collapse:collapse;display:block;overflow:auto;color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';font-size:16px;line-height:25.6px;"><tbody><tr style="border-top-width:1px;border-top-style:solid;border-top-color:rgb(204,204,204);"><td align="center" style="border:1px solid rgb(221,221,221);"> </td>
<td align="center" style="border:1px solid rgb(221,221,221);"><span style="font-weight:bolder;">Spark Streaming 1.4.0</span></td>
<td align="center" style="border:1px solid rgb(221,221,221);"><span style="font-weight:bolder;">Spark Streaming 1.5.0</span></td>
</tr><tr style="border-top-width:1px;border-top-style:solid;border-top-color:rgb(204,204,204);background-color:rgb(248,248,248);"><td align="center" style="border:1px solid rgb(221,221,221);"><span style="font-weight:bolder;">Receiver 活性</span></td>
<td align="center" style="border:1px solid rgb(221,221,221);">不保证永活</td>
<td align="center" style="border:1px solid rgb(221,221,221);">无限重试、保证永活</td>
</tr><tr style="border-top-width:1px;border-top-style:solid;border-top-color:rgb(204,204,204);"><td align="center" style="border:1px solid rgb(221,221,221);"><span style="font-weight:bolder;">Receiver 均衡分发</span></td>
<td align="center" style="border:1px solid rgb(221,221,221);">无保证</td>
<td align="center" style="border:1px solid rgb(221,221,221);">round-robin 策略</td>
</tr><tr style="border-top-width:1px;border-top-style:solid;border-top-color:rgb(204,204,204);background-color:rgb(248,248,248);"><td align="center" style="border:1px solid rgb(221,221,221);"><span style="font-weight:bolder;">自定义 Receiver 分发</span></td>
<td align="center" style="border:1px solid rgb(221,221,221);">很 tricky</td>
<td align="center" style="border:1px solid rgb(221,221,221);">方便</td>
</tr></tbody></table><h2 style="line-height:1.225;font-size:1.75em;border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(238,238,238);color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';">
<a id="user-content-致谢" class="anchor" href="https://github.com/lw-lin/CoolplaySpark/blob/master/Spark%20Streaming%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97/3.1%20Receiver%20%E5%88%86%E5%8F%91%E8%AF%A6%E8%A7%A3.md#%E8%87%B4%E8%B0%A2" rel="nofollow" style="color:rgb(64,120,192);text-decoration:none;display:inline-block;margin-left:-18px;line-height:1;background-color:transparent;"></a>致谢</h2>
<p style="color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';font-size:16px;line-height:25.6px;">
本文所分析的 1.5.0 以来增强的 <code style="font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Receiver</code> 分发策略，是由朱诗雄同学强势贡献给社区的：</p>
            </div>
                </div>