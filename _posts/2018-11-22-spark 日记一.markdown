---
layout:     post
title:      spark 日记一
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/leon_aptx4869/article/details/66002896				</div>
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<h2 id="spark-编程入门">spark 编程入门</h2>



<h5 id="接触spark也有一段时间了记下我理解的spark也为了和更多的开发朋友分享和交流于是有了spark日记它是一个通用-专用过的分布式集群运算系统它提供了诸如sacla-javapythonr等语言的高层接口和一个经过优化的引擎去执行各种通用作业执行图提供的工具有spark-sqlspark-ml-spark-graphxspark-streaming用于不同的处理用途点击查看-spark-overview-此文参考和部分翻译-spark-programming-guide">接触spark也有一段时间了，记下我理解的spark，也为了和更多的开发朋友分享和交流，于是有了spark日记。它是一个通用-专用过的分布式集群运算系统，它提供了诸如sacla, java,python,r等语言的高层接口和一个经过优化的引擎去执行各种通用作业执行图。提供的工具有spark sql,spark ML， spark graphx，spark streaming用于不同的处理用途。点击查看 <a href="http://spark.apache.org/docs/1.6.2/" rel="nofollow">spark overview</a>， 此文参考和部分翻译 <a href="http://spark.apache.org/docs/1.6.2/programming-guide.html#spark-programming-guide" rel="nofollow">spark programming-guide</a></h5>



<h3 id="安装和入门"><em>安装和入门</em></h3>

<p>直接下载已经编译好的文件就可以用了，这里就不介绍了，还没用过的朋友看到请移步到 <a href="http://spark.apache.org/docs/1.6.2/" rel="nofollow">这里</a></p>



<h3 id="spark-rdd"><em>spark RDD</em></h3>

<p>RDD (resilient distributed dataset )是spark 提供的核心概念，它是一个spark提供的数据结构，代表着一个不可修改，可分布，可容错的数据集合，该集合的元素可以分区进行并行计算。原文翻译是(a collection of elements partitioned across the nodes of the cluster that can be operated on in parallel). RDD 可以通过两种方式创建，一是由外部文件(数据源)接入来生成，例如hadoop, kafka; 另一种是由现有结合数据集合调用系统接口parallelizing  生成。</p>

<ul>
<li><p>parallelizing 集合生成rdd </p>

<pre class="prettyprint"><code class=" hljs haskell">./bin/pyspark  # 启动spark python shell
<span class="hljs-typedef"><span class="hljs-keyword">data</span> = [1, 2, 3, 4, 5]</span>
<span class="hljs-title">distData</span> = sc.parallelize(<span class="hljs-typedef"><span class="hljs-keyword">data</span>)</span>
<span class="hljs-title">disData</span>.reduce(lambda x,y: x+y)  # 计算总和</code></pre></li>
<li><p>External Datasets生成rdd: 外部文件也分两种类型，一种是可以直接通过系统接口生成rdd的basic source: 如文件系统，Hadoop file,network file;一种是要使用专用外部依赖库提供接口来生成rdd,如kafka，Twitter，flume等。</p>

<pre class="prettyprint"><code class=" hljs vala">
<span class="hljs-preprocessor"># 通过外部文件创建 rdd</span>

distFile = sc.textFile(<span class="hljs-string">"data.txt"</span>)</code></pre></li>
</ul>



<h3 id="rdd-operation"><em>rdd operation</em></h3>

<p>rdd operation分成两类，一类是transformations，把一个rdd 转成成另一种rdd; 一种是action，对该rdd进行计算并返回一个value给程序。spark对rdd的操作是 lazy 执行的，在执行transformations时并不会执行，而是到了执行action 时候才执行。另外，rdd 在执行的过程中可能遇到重新计算的过程，可以通过persist 或者 cache的方法保存在内存或横跨集群中，用于加快计算速度。</p>

<ul>
<li><p>transformations，spark提供了通用的接口，<a href="http://spark.apache.org/docs/1.6.2/programming-guide.html#transformations" rel="nofollow">详见</a></p></li>
<li><p>actions, 参考 <a href="http://spark.apache.org/docs/1.6.2/programming-guide.html#actions" rel="nofollow">http://spark.apache.org/docs/1.6.2/programming-guide.html#actions</a></p></li>
</ul>



<h3 id="spark-函数传递"><em>spark 函数传递</em></h3>

<p>用三总方式传递函数给spark执行，这里以python为例：</p>

<ul>
<li>使用 匿名函数</li>
</ul>



<pre class="prettyprint"><code class=" hljs haskell"><span class="hljs-preprocessor"># 继续使用上面例子</span>
<span class="hljs-typedef"><span class="hljs-keyword">data</span> = [1, 2, 3, 4, 5]</span>
<span class="hljs-title">distData</span> = sc.parallelize(<span class="hljs-typedef"><span class="hljs-keyword">data</span>)</span>
<span class="hljs-title">disData</span>.reduce(lambda x,y: x+y)  # 计算总和</code></pre>

<ul>
<li>使用一般函数</li>
</ul>



<pre class="prettyprint"><code class=" hljs python"><span class="hljs-comment">#  </span>
data = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]
distData = sc.parallelize(data)
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(x,y)</span>:</span>
    <span class="hljs-keyword">return</span> x + y
disData.reduce(add)  <span class="hljs-comment"># 计算总和</span></code></pre>

<ul>
<li>使用类</li>
</ul>



<pre class="prettyprint"><code class=" hljs haskell"><span class="hljs-typedef"><span class="hljs-keyword">data</span> = [1, 2, 3, 4, 5]</span>
<span class="hljs-title">distData</span> = sc.parallelize(<span class="hljs-typedef"><span class="hljs-keyword">data</span>)</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">AddObject</span><span class="hljs-container">(<span class="hljs-title">object</span>)</span>：
    def add<span class="hljs-container">(<span class="hljs-title">self</span>, <span class="hljs-title">x</span>, <span class="hljs-title">y</span>)</span>:
        return x + y
    def doStuff<span class="hljs-container">(<span class="hljs-title">self</span>, <span class="hljs-title">rdd</span>)</span>
        return rdd.reduce<span class="hljs-container">(<span class="hljs-title">self</span>.<span class="hljs-title">add</span>)</span>

 <span class="hljs-type">AddObject</span><span class="hljs-container">()</span>.doStuff<span class="hljs-container">(<span class="hljs-title">disData</span>)</span> # 计算总和</span></code></pre>

<ul>
<li><p>关于外部变量： <br>
闭包的引用变量在local模式下运行可以被excuter正确索引到同一变量，但在cluster中，excuter复制dirver paogrem的变量值并复制到本地，所以每个excuter都有自己的复制而并不是driver的那个变量，所以计算结果会不正确。当需要更新去全局变量时候要使用  <a href="http://spark.apache.org/docs/1.6.2/programming-guide.html#accumulators" rel="nofollow">Accumulators</a></p></li>
<li><p>元素输出： <br>
输出所有元素： rdd.collect().foreach(println) <br>
输出所有元素可能导致driver program消耗大量内存，避免此情况可以使用take; rdd.take(100).foreach(println).</p></li>
<li><p>key-value 元素： <br>
key-value元素在python表现为一个元祖 (1,3 );键值对数据处理通常有”shuffle”，以key为键值进行aggregate 聚合运算</p></li>
</ul>

<p>For example, the following code uses the reduceByKey operation on key-value pairs to count how many times each line of text occurs in a file:</p>



<pre class="prettyprint"><code class=" hljs livecodeserver"><span class="hljs-keyword">lines</span> = sc.textFile(<span class="hljs-string">"data.txt"</span>)
pairs = <span class="hljs-keyword">lines</span>.map(lambda s: (s, <span class="hljs-number">1</span>))
counts = pairs.reduceByKey(lambda <span class="hljs-operator">a</span>, b: <span class="hljs-operator">a</span> + b)</code></pre>



<h3 id="spark-share-变量"><em>spark share 变量</em></h3>

<p>前面提到过，spark是一个分布式计算框架，在集群运算中需要把code，变量，数据分布到多个记得点计算。其中的变量是以复制的形式copy到节点本地存储，所以涉及到一个计算同步问题，spark share 变量有</p>

<ul>
<li>Broadcast variables <br>
如你所愿，广播变量是可以让你保存一份本地read-only变量，你不能更新它。广播变量通过SparkContext.broadcast(v)来创建，同过value 属性来获取该变量值</li>
</ul>



<pre class="prettyprint"><code class=" hljs avrasm">&gt;&gt;&gt; broadcastVar = sc<span class="hljs-preprocessor">.broadcast</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])
&lt;pyspark<span class="hljs-preprocessor">.broadcast</span><span class="hljs-preprocessor">.Broadcast</span> object at <span class="hljs-number">0x102789f10</span>&gt;
&gt;&gt;&gt; broadcastVar<span class="hljs-preprocessor">.value</span>
[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]</code></pre>

<ul>
<li>Accumulators <br>
Accumulators是允许你进行”add”操作的变量，你可以自顶一个add操作使他更加灵活的实现你的逻辑。 Accumulators 使用SparkContext.accumulator(v)创建。 任务执行可以通过 add()或者 += 来执行叠加操作</li>
</ul>



<pre class="prettyprint"><code class=" hljs avrasm">&gt;&gt;&gt; accum = sc<span class="hljs-preprocessor">.accumulator</span>(<span class="hljs-number">0</span>)
Accumulator&lt;id=<span class="hljs-number">0</span>, value=<span class="hljs-number">0</span>&gt;
&gt;&gt;&gt; sc<span class="hljs-preprocessor">.parallelize</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])<span class="hljs-preprocessor">.foreach</span>(lambda <span class="hljs-built_in">x</span>: accum<span class="hljs-preprocessor">.add</span>(<span class="hljs-built_in">x</span>))

scala&gt; accum<span class="hljs-preprocessor">.value</span></code></pre>



<h3 id="参考资料">参考资料:</h3>

<ul>
<li>spark 编程指南:　<a href="http://spark.apache.org/docs/1.6.2/programming-guide.html#spark-programming-guide" rel="nofollow">http://spark.apache.org/docs/1.6.2/programming-guide.html#spark-programming-guide</a></li>
</ul>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>