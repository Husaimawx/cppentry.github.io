---
layout:     post
title:      Hbase学习二
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<p># Hbase学习二</p>

<p>标签（空格分隔）： Hbase</p>

<hr>

<p>[TOC] <br>
一，回顾和复习 <br>
kudu:集成HDFS和HBase的所有优势，速度是Hbase的10倍</p>



<h2 id="二hbase架构以及各角色的作用">二，Hbase架构以及各角色的作用</h2>

<p><img src="http://static.zybuluo.com/forrestxing/l3iwkuck3r1yjebojluo0tbc/001.jpg" alt="001.jpg-33.6kB" title=""></p>

<p>1，client <br>
<img src="http://static.zybuluo.com/forrestxing/lwr6de7ge0xo8kq2mhcwj5aa/001.jpg" alt="001.jpg-17.3kB" title=""></p>

<p>2，Zookeeper <br>
<img src="http://static.zybuluo.com/forrestxing/rugslg0kswg5i78kfd8ebktj/001.jpg" alt="001.jpg-18.5kB" title=""></p>

<p>====存储所有HRegion的寻址入口======================================= <br>
table -&gt;   HRegion     -&gt;   HRegionServer <br>
  1   :    N |  1       :       1</p>

<p>Client  -&gt;  zookeeper -&gt;  meta -&gt; Region   -&gt;  RegionServer  </p>

<p>====================================================================</p>

<p>3,Hmaster <br>
<img src="http://static.zybuluo.com/forrestxing/qga2vokf9dsvcleb2vwcm90e/001.jpg" alt="001.jpg-25.8kB" title=""></p>

<p>=====配置master-backup================================= <br>
1,在conf目录下创建master-backup文件 <br>
2，添加服务器IP</p>



<h1 id="3binhbase-daemonsh-start-master-backup">3，bin/hbase-daemon.sh start master-backup</h1>

<p>4.HRegionServer <br>
<img src="http://static.zybuluo.com/forrestxing/aii5jgjxknxaww7ye1n2t4uv/001.jpg" alt="001.jpg-21.1kB" title=""></p>

<p>5,Hbase&amp;Zookeeper <br>
<img src="http://static.zybuluo.com/forrestxing/qcuv9598m2iuswf5kxuo2tdk/001.jpg" alt="001.jpg-22.2kB" title=""></p>

<p><img src="http://static.zybuluo.com/forrestxing/6ux0pc3eopwu89elhy1mwf2a/001.jpg" alt="001.jpg-20.3kB" title=""></p>

<p><img src="http://static.zybuluo.com/forrestxing/h91ukc0az3sluvdm23x3lmoi/001.jpg" alt="001.jpg-33.6kB" title=""></p>

<p><img src="http://static.zybuluo.com/forrestxing/of9jfmn6t2wjlda1alkb6w8i/001.jpg" alt="001.jpg-36.3kB" title=""></p>



<h2 id="二hbase-java-api">二，Hbase Java API</h2>

<p><img src="http://static.zybuluo.com/forrestxing/xuezev6wuhedju8am81ju7f0/001.jpg" alt="001.jpg-10.8kB" title=""></p>

<p>1,pom.xml文件添加如下配置</p>



<pre class="prettyprint"><code class=" hljs xml"><span class="hljs-comment">&lt;!-- HBase Client --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>org.apache.hbase<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>hbase-server<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>${hbase.version}<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>org.apache.hbase<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>hbase-client<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>${hbase.version}<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span></code></pre>

<p>2,拷贝配置文件到资源目录下面 <br>
拷贝core-site.xml,hdfs-site.xml,hbase-site.xml到/home/hadoop002/workspace5/hadoopstudy/res目录下</p>

<p>3,HBaseApp.java代码如下</p>



<pre class="prettyprint"><code class=" hljs avrasm">package <span class="hljs-keyword">com</span><span class="hljs-preprocessor">.ibeifeng</span><span class="hljs-preprocessor">.bigdata</span><span class="hljs-preprocessor">.senior</span><span class="hljs-preprocessor">.hbase</span><span class="hljs-preprocessor">.app</span><span class="hljs-comment">;</span>
import org<span class="hljs-preprocessor">.apache</span><span class="hljs-preprocessor">.hadoop</span><span class="hljs-preprocessor">.conf</span><span class="hljs-preprocessor">.Configuration</span><span class="hljs-comment">;</span>
import org<span class="hljs-preprocessor">.apache</span><span class="hljs-preprocessor">.hadoop</span><span class="hljs-preprocessor">.hbase</span><span class="hljs-preprocessor">.Cell</span><span class="hljs-comment">;</span>
import org<span class="hljs-preprocessor">.apache</span><span class="hljs-preprocessor">.hadoop</span><span class="hljs-preprocessor">.hbase</span><span class="hljs-preprocessor">.CellUtil</span><span class="hljs-comment">;</span>
import org<span class="hljs-preprocessor">.apache</span><span class="hljs-preprocessor">.hadoop</span><span class="hljs-preprocessor">.hbase</span><span class="hljs-preprocessor">.HBaseConfiguration</span><span class="hljs-comment">;</span>
import org<span class="hljs-preprocessor">.apache</span><span class="hljs-preprocessor">.hadoop</span><span class="hljs-preprocessor">.hbase</span><span class="hljs-preprocessor">.client</span><span class="hljs-preprocessor">.Delete</span><span class="hljs-comment">;</span>
import org<span class="hljs-preprocessor">.apache</span><span class="hljs-preprocessor">.hadoop</span><span class="hljs-preprocessor">.hbase</span><span class="hljs-preprocessor">.client</span><span class="hljs-preprocessor">.Get</span><span class="hljs-comment">;</span>
import org<span class="hljs-preprocessor">.apache</span><span class="hljs-preprocessor">.hadoop</span><span class="hljs-preprocessor">.hbase</span><span class="hljs-preprocessor">.client</span><span class="hljs-preprocessor">.HTable</span><span class="hljs-comment">;</span>
import org<span class="hljs-preprocessor">.apache</span><span class="hljs-preprocessor">.hadoop</span><span class="hljs-preprocessor">.hbase</span><span class="hljs-preprocessor">.client</span><span class="hljs-preprocessor">.Put</span><span class="hljs-comment">;</span>
import org<span class="hljs-preprocessor">.apache</span><span class="hljs-preprocessor">.hadoop</span><span class="hljs-preprocessor">.hbase</span><span class="hljs-preprocessor">.client</span><span class="hljs-preprocessor">.Result</span><span class="hljs-comment">;</span>
import org<span class="hljs-preprocessor">.apache</span><span class="hljs-preprocessor">.hadoop</span><span class="hljs-preprocessor">.hbase</span><span class="hljs-preprocessor">.client</span><span class="hljs-preprocessor">.ResultScanner</span><span class="hljs-comment">;</span>
import org<span class="hljs-preprocessor">.apache</span><span class="hljs-preprocessor">.hadoop</span><span class="hljs-preprocessor">.hbase</span><span class="hljs-preprocessor">.client</span><span class="hljs-preprocessor">.Scan</span><span class="hljs-comment">;</span>
import org<span class="hljs-preprocessor">.apache</span><span class="hljs-preprocessor">.hadoop</span><span class="hljs-preprocessor">.hbase</span><span class="hljs-preprocessor">.filter</span><span class="hljs-preprocessor">.PrefixFilter</span><span class="hljs-comment">;</span>
import org<span class="hljs-preprocessor">.apache</span><span class="hljs-preprocessor">.hadoop</span><span class="hljs-preprocessor">.hbase</span><span class="hljs-preprocessor">.util</span><span class="hljs-preprocessor">.Bytes</span><span class="hljs-comment">;</span>
import org<span class="hljs-preprocessor">.apache</span><span class="hljs-preprocessor">.hadoop</span><span class="hljs-preprocessor">.io</span><span class="hljs-preprocessor">.IOUtils</span><span class="hljs-comment">;</span>
public class HBaseApp {
    public static HTable getHTableByTableName(String tableName) throws Exception {
        // Get instance of Configuration
        Configuration conf = HBaseConfiguration<span class="hljs-preprocessor">.create</span>()<span class="hljs-comment">;</span>
        // Get table Instance
        HTable table = new HTable(conf, tableName)<span class="hljs-comment">;</span>

        return table<span class="hljs-comment">;</span>
    }
    public static void getData() throws Exception {
        HTable table = HBaseApp<span class="hljs-preprocessor">.getHTableByTableName</span>(<span class="hljs-string">"student"</span>)<span class="hljs-comment">;</span>
        // Get data
        Get get = new Get(Bytes<span class="hljs-preprocessor">.toBytes</span>(<span class="hljs-string">"10001"</span>))<span class="hljs-comment">;</span>
        // <span class="hljs-keyword">add</span> column
        get<span class="hljs-preprocessor">.addColumn</span>( //
                Bytes<span class="hljs-preprocessor">.toBytes</span>(<span class="hljs-string">"info"</span>), //
                Bytes<span class="hljs-preprocessor">.toBytes</span>(<span class="hljs-string">"name"</span>)//
        )<span class="hljs-comment">;</span>
        get<span class="hljs-preprocessor">.addColumn</span>( //
                Bytes<span class="hljs-preprocessor">.toBytes</span>(<span class="hljs-string">"info"</span>), //
                Bytes<span class="hljs-preprocessor">.toBytes</span>(<span class="hljs-string">"age"</span>)//
        )<span class="hljs-comment">;</span>

//      get<span class="hljs-preprocessor">.addFamily</span>(family)

        Result result = table<span class="hljs-preprocessor">.get</span>(get)<span class="hljs-comment">;</span>
        for (Cell cell : result<span class="hljs-preprocessor">.rawCells</span>()) {
            System<span class="hljs-preprocessor">.out</span><span class="hljs-preprocessor">.print</span>(Bytes<span class="hljs-preprocessor">.toString</span>(CellUtil<span class="hljs-preprocessor">.cloneRow</span>(cell)) + <span class="hljs-string">"\t"</span>)<span class="hljs-comment">;</span>
            System<span class="hljs-preprocessor">.out</span><span class="hljs-preprocessor">.println</span>(//
                    Bytes<span class="hljs-preprocessor">.toString</span>(CellUtil<span class="hljs-preprocessor">.cloneFamily</span>(cell)) //
                            + <span class="hljs-string">":"</span> + //
                            Bytes<span class="hljs-preprocessor">.toString</span>(CellUtil<span class="hljs-preprocessor">.cloneQualifier</span>(cell)) //
                            + <span class="hljs-string">"-&gt;"</span> + //
                            Bytes<span class="hljs-preprocessor">.toString</span>(CellUtil<span class="hljs-preprocessor">.cloneValue</span>(cell)) //
                            + <span class="hljs-string">" "</span> + //
                            cell<span class="hljs-preprocessor">.getTimestamp</span>())<span class="hljs-comment">;</span>
            System<span class="hljs-preprocessor">.out</span><span class="hljs-preprocessor">.println</span>(<span class="hljs-string">"-----------------------------"</span>)<span class="hljs-comment">;</span>
        }
        // close
        table<span class="hljs-preprocessor">.close</span>()<span class="hljs-comment">;</span>
    }
    public static void putData() throws Exception {
        HTable table = HBaseApp<span class="hljs-preprocessor">.getHTableByTableName</span>(<span class="hljs-string">"student"</span>)<span class="hljs-comment">;</span>
        Put put = new Put(Bytes<span class="hljs-preprocessor">.toBytes</span>(<span class="hljs-string">"10007"</span>)) <span class="hljs-comment">;</span>
        // <span class="hljs-keyword">Add</span> a column with value
        put<span class="hljs-preprocessor">.add</span>( //
            Bytes<span class="hljs-preprocessor">.toBytes</span>(<span class="hljs-string">"info"</span>), //
            Bytes<span class="hljs-preprocessor">.toBytes</span>(<span class="hljs-string">"name"</span>), //
            Bytes<span class="hljs-preprocessor">.toBytes</span>(<span class="hljs-string">"tianqi"</span>) //
        ) <span class="hljs-comment">;</span>
        put<span class="hljs-preprocessor">.add</span>( //
                Bytes<span class="hljs-preprocessor">.toBytes</span>(<span class="hljs-string">"info"</span>), //
                Bytes<span class="hljs-preprocessor">.toBytes</span>(<span class="hljs-string">"sex"</span>), //
                Bytes<span class="hljs-preprocessor">.toBytes</span>(<span class="hljs-string">"male"</span>) //
            ) <span class="hljs-comment">;</span>
        put<span class="hljs-preprocessor">.add</span>( //
                Bytes<span class="hljs-preprocessor">.toBytes</span>(<span class="hljs-string">"info"</span>), //
                Bytes<span class="hljs-preprocessor">.toBytes</span>(<span class="hljs-string">"address"</span>), //
                Bytes<span class="hljs-preprocessor">.toBytes</span>(<span class="hljs-string">"shanghai"</span>) //
            ) <span class="hljs-comment">;</span>

    <span class="hljs-comment">/**     
            Map&lt;String, String&gt; kvs = new HashMap&lt;String, String&gt;() ;
            for(String key : kvs.keySet()){
                put.add(
                        HBaseTableConstant.HBASE_TABLE_STUDENT_CF, //
                        Bytes.toBytes(key), //
                        Bytes.toBytes(kvs.get(key)) //
                ) ;
            }
    */</span>      
        table<span class="hljs-preprocessor">.put</span>(put)<span class="hljs-comment">;</span>

        // close
        table<span class="hljs-preprocessor">.close</span>()<span class="hljs-comment">;</span>
    }

    public static void deleteData() throws Exception {
        HTable table = HBaseApp<span class="hljs-preprocessor">.getHTableByTableName</span>(<span class="hljs-string">"student"</span>)<span class="hljs-comment">;</span>

        Delete delete = new Delete(Bytes<span class="hljs-preprocessor">.toBytes</span>(<span class="hljs-string">"10012"</span>)) <span class="hljs-comment">;</span>
<span class="hljs-comment">/**     
        delete.deleteColumn(//
                Bytes.toBytes("info"), //
                Bytes.toBytes("telphone")//
        );
*/</span>
        delete<span class="hljs-preprocessor">.deleteFamily</span>(Bytes<span class="hljs-preprocessor">.toBytes</span>(<span class="hljs-string">"info"</span>))<span class="hljs-comment">;</span>

        table<span class="hljs-preprocessor">.delete</span>(delete)<span class="hljs-comment">;</span>

        table<span class="hljs-preprocessor">.close</span>()<span class="hljs-comment">;</span>
    }

    public static void scanData() throws Exception {
        String tableName = <span class="hljs-string">"student"</span> <span class="hljs-comment">;</span>

        HTable table = null <span class="hljs-comment">;</span>
        ResultScanner resultScanner = null <span class="hljs-comment">;</span>


        try{
            table = HBaseApp<span class="hljs-preprocessor">.getHTableByTableName</span>(tableName)<span class="hljs-comment">;</span>

            Scan scan = new Scan() <span class="hljs-comment">;</span>

// ==========================================================================
// Range
            scan<span class="hljs-preprocessor">.setStartRow</span>(Bytes<span class="hljs-preprocessor">.toBytes</span>(<span class="hljs-string">"1000"</span>))<span class="hljs-comment">;</span>
            scan<span class="hljs-preprocessor">.setStopRow</span>(Bytes<span class="hljs-preprocessor">.toBytes</span>(<span class="hljs-string">"10005"</span>)) <span class="hljs-comment">;</span>

// Scan
            // Scan scan2 = new Scan(startRow, stopRow) <span class="hljs-comment">;</span>

// <span class="hljs-keyword">add</span> CF <span class="hljs-keyword">and</span> Column
            // scan<span class="hljs-preprocessor">.addFamily</span>(family)
            // scan<span class="hljs-preprocessor">.addColumn</span>(family, qualifier)

// Filter
            PrefixFilter filter =   new PrefixFilter(Bytes<span class="hljs-preprocessor">.toBytes</span>(<span class="hljs-string">""</span>)) <span class="hljs-comment">;</span>
            scan<span class="hljs-preprocessor">.setFilter</span>(filter) <span class="hljs-comment">;</span>
<span class="hljs-comment">/**
 *      话单查询
 *      telphone_datetime
 *  查询三月份通话记录，使用Scan Range  
 *      startrow:
 *          18298459876_20160301000000000
 *      stoprow:        
 *          18298459876_20160401000000000
 *  使用前缀匹配Filter查询
 *      prefix = 18298459876_201603
 *  分页查询
 *      尽量不要使用PageFilter，很慢，性能很不好
 *      可以在页面前端展示的时候进行分页（伪分页）
 */</span>
// Cache
//  scan<span class="hljs-preprocessor">.setCacheBlocks</span>(cacheBlocks)<span class="hljs-comment">;</span>
//  scan<span class="hljs-preprocessor">.setCaching</span>(caching)<span class="hljs-comment">;</span>

//  scan<span class="hljs-preprocessor">.setBatch</span>(batch)<span class="hljs-comment">;</span>

// ==========================================================================

            resultScanner = table<span class="hljs-preprocessor">.getScanner</span>(scan) <span class="hljs-comment">;</span>

            for(Result result : resultScanner){
                for (Cell cell : result<span class="hljs-preprocessor">.rawCells</span>()) {
                    System<span class="hljs-preprocessor">.out</span><span class="hljs-preprocessor">.print</span>(Bytes<span class="hljs-preprocessor">.toString</span>(CellUtil<span class="hljs-preprocessor">.cloneRow</span>(cell)) + <span class="hljs-string">"\t"</span>)<span class="hljs-comment">;</span>
                    System<span class="hljs-preprocessor">.out</span><span class="hljs-preprocessor">.println</span>(//
                        Bytes<span class="hljs-preprocessor">.toString</span>(CellUtil<span class="hljs-preprocessor">.cloneFamily</span>(cell)) //
                                + <span class="hljs-string">":"</span> + //
                                Bytes<span class="hljs-preprocessor">.toString</span>(CellUtil<span class="hljs-preprocessor">.cloneQualifier</span>(cell)) //
                                + <span class="hljs-string">"-&gt;"</span> + //
                                Bytes<span class="hljs-preprocessor">.toString</span>(CellUtil<span class="hljs-preprocessor">.cloneValue</span>(cell)) //
                                + <span class="hljs-string">" "</span> + //
                                cell<span class="hljs-preprocessor">.getTimestamp</span>()
                            )<span class="hljs-comment">;</span>
                }
                System<span class="hljs-preprocessor">.out</span><span class="hljs-preprocessor">.println</span>(<span class="hljs-string">"-----------------------------"</span>)<span class="hljs-comment">;</span>
            }

        }catch(Exception e){
            e<span class="hljs-preprocessor">.printStackTrace</span>()<span class="hljs-comment">;</span>
        }finally {
            IOUtils<span class="hljs-preprocessor">.closeStream</span>(table)<span class="hljs-comment">;</span>
            IOUtils<span class="hljs-preprocessor">.closeStream</span>(resultScanner)<span class="hljs-comment">;</span>
        }

    }

    public static void main(String[] args) throws Exception {
        deleteData()<span class="hljs-comment">;</span>

    }
}
</code></pre>

<p>4,对hbase的基本操作进行封装</p>

<p><img src="http://static.zybuluo.com/forrestxing/zk9fvajb786wxi3px5v45uv0/001.PNG" alt="001.PNG-7.4kB" title=""></p>

<ul>
<li>HbaseHelp.java:</li>
</ul>



<pre class="prettyprint"><code class=" hljs avrasm">package org<span class="hljs-preprocessor">.apache</span><span class="hljs-preprocessor">.hadoop</span><span class="hljs-preprocessor">.hbase</span><span class="hljs-comment">;</span>

import java<span class="hljs-preprocessor">.io</span><span class="hljs-preprocessor">.IOException</span><span class="hljs-comment">;</span>
import java<span class="hljs-preprocessor">.io</span><span class="hljs-preprocessor">.InterruptedIOException</span><span class="hljs-comment">;</span>
import java<span class="hljs-preprocessor">.util</span><span class="hljs-preprocessor">.HashMap</span><span class="hljs-comment">;</span>
import java<span class="hljs-preprocessor">.util</span><span class="hljs-preprocessor">.Map</span><span class="hljs-comment">;</span>

import org<span class="hljs-preprocessor">.apache</span><span class="hljs-preprocessor">.hadoop</span><span class="hljs-preprocessor">.hbase</span><span class="hljs-preprocessor">.client</span><span class="hljs-preprocessor">.Delete</span><span class="hljs-comment">;</span>
import org<span class="hljs-preprocessor">.apache</span><span class="hljs-preprocessor">.hadoop</span><span class="hljs-preprocessor">.hbase</span><span class="hljs-preprocessor">.client</span><span class="hljs-preprocessor">.Get</span><span class="hljs-comment">;</span>
import org<span class="hljs-preprocessor">.apache</span><span class="hljs-preprocessor">.hadoop</span><span class="hljs-preprocessor">.hbase</span><span class="hljs-preprocessor">.client</span><span class="hljs-preprocessor">.HTable</span><span class="hljs-comment">;</span>
import org<span class="hljs-preprocessor">.apache</span><span class="hljs-preprocessor">.hadoop</span><span class="hljs-preprocessor">.hbase</span><span class="hljs-preprocessor">.client</span><span class="hljs-preprocessor">.Put</span><span class="hljs-comment">;</span>
import org<span class="hljs-preprocessor">.apache</span><span class="hljs-preprocessor">.hadoop</span><span class="hljs-preprocessor">.hbase</span><span class="hljs-preprocessor">.client</span><span class="hljs-preprocessor">.Result</span><span class="hljs-comment">;</span>
import org<span class="hljs-preprocessor">.apache</span><span class="hljs-preprocessor">.hadoop</span><span class="hljs-preprocessor">.hbase</span><span class="hljs-preprocessor">.client</span><span class="hljs-preprocessor">.ResultScanner</span><span class="hljs-comment">;</span>
import org<span class="hljs-preprocessor">.apache</span><span class="hljs-preprocessor">.hadoop</span><span class="hljs-preprocessor">.hbase</span><span class="hljs-preprocessor">.client</span><span class="hljs-preprocessor">.RetriesExhaustedWithDetailsException</span><span class="hljs-comment">;</span>
import org<span class="hljs-preprocessor">.apache</span><span class="hljs-preprocessor">.hadoop</span><span class="hljs-preprocessor">.hbase</span><span class="hljs-preprocessor">.client</span><span class="hljs-preprocessor">.Scan</span><span class="hljs-comment">;</span>
import org<span class="hljs-preprocessor">.apache</span><span class="hljs-preprocessor">.hadoop</span><span class="hljs-preprocessor">.hbase</span><span class="hljs-preprocessor">.util</span><span class="hljs-preprocessor">.Bytes</span><span class="hljs-comment">;</span>

public class HbaseHelp {
    private HTable hTable<span class="hljs-comment">;</span>

    public HbaseHelp(String tablename) throws Exception {
        this<span class="hljs-preprocessor">.hTable</span> = HbaseUtils<span class="hljs-preprocessor">.getHTableByTableName</span>(tablename)<span class="hljs-comment">;</span>
    }

    // query data
    public Result queryData(ParamObj paramObj) throws IOException {
        Get get = new Get(Bytes<span class="hljs-preprocessor">.toBytes</span>(paramObj<span class="hljs-preprocessor">.getRowKey</span>()))<span class="hljs-comment">;</span>
        Map&lt;String, HashMap&lt;String, String&gt;&gt; kvs= paramObj<span class="hljs-preprocessor">.getKvs</span>()<span class="hljs-comment">;</span>
        for (String key : kvs<span class="hljs-preprocessor">.keySet</span>()) {
            HashMap&lt;String, String&gt; temp=kvs<span class="hljs-preprocessor">.get</span>(key)<span class="hljs-comment">;</span>
            for(String columnname:temp<span class="hljs-preprocessor">.keySet</span>()){
                get<span class="hljs-preprocessor">.addColumn</span>(Bytes<span class="hljs-preprocessor">.toBytes</span>(key), //
                        Bytes<span class="hljs-preprocessor">.toBytes</span>(columnname) //
                )<span class="hljs-comment">;</span>
            }

        }
        Result result = this<span class="hljs-preprocessor">.hTable</span><span class="hljs-preprocessor">.get</span>(get)<span class="hljs-comment">;</span>

        return result<span class="hljs-comment">;</span>
    }
    //put data
    public boolean putData(ParamObj paramObj){
        Put put = new Put(Bytes<span class="hljs-preprocessor">.toBytes</span>(paramObj<span class="hljs-preprocessor">.getRowKey</span>()))<span class="hljs-comment">;</span>

        Map&lt;String, HashMap&lt;String, String&gt;&gt; kvs= paramObj<span class="hljs-preprocessor">.getKvs</span>()<span class="hljs-comment">;</span>
        for (String columnfamily : kvs<span class="hljs-preprocessor">.keySet</span>()) {
            HashMap&lt;String, String&gt; temp=kvs<span class="hljs-preprocessor">.get</span>(columnfamily)<span class="hljs-comment">;</span>
            for(String columnname:temp<span class="hljs-preprocessor">.keySet</span>()){
                put<span class="hljs-preprocessor">.add</span>(
                    Bytes<span class="hljs-preprocessor">.toBytes</span>(columnfamily),
                    Bytes<span class="hljs-preprocessor">.toBytes</span>(columnname),
                    Bytes<span class="hljs-preprocessor">.toBytes</span>(temp<span class="hljs-preprocessor">.get</span>(columnname))
                ) <span class="hljs-comment">;</span>
            }
        }
        boolean succ=true<span class="hljs-comment">;</span>
        try {
            this<span class="hljs-preprocessor">.hTable</span><span class="hljs-preprocessor">.put</span>(put)<span class="hljs-comment">;</span>
        } catch (Exception e) {
            e<span class="hljs-preprocessor">.printStackTrace</span>()<span class="hljs-comment">;</span>
            succ=false<span class="hljs-comment">;</span>
        }   
        return succ<span class="hljs-comment">;</span>
    }
    //delete data by columnfamily
    public boolean deleteByColumnFamily(ParamObj paramObj) throws IOException{
        Delete delete = new Delete(Bytes<span class="hljs-preprocessor">.toBytes</span>(paramObj<span class="hljs-preprocessor">.getRowKey</span>())) <span class="hljs-comment">;</span>
        Map&lt;String, HashMap&lt;String, String&gt;&gt; kvs= paramObj<span class="hljs-preprocessor">.getKvs</span>()<span class="hljs-comment">;</span>
        for (String columnfamily : kvs<span class="hljs-preprocessor">.keySet</span>()) {
            delete<span class="hljs-preprocessor">.deleteFamily</span>(Bytes<span class="hljs-preprocessor">.toBytes</span>(columnfamily))<span class="hljs-comment">;</span>
            this<span class="hljs-preprocessor">.hTable</span><span class="hljs-preprocessor">.delete</span>(delete)<span class="hljs-comment">;</span>
        }
        return true<span class="hljs-comment">;</span>
    }
    //delete data by column
    public boolean deleteByColumn(ParamObj paramObj) throws IOException{
        Delete delete = new Delete(Bytes<span class="hljs-preprocessor">.toBytes</span>(paramObj<span class="hljs-preprocessor">.getRowKey</span>())) <span class="hljs-comment">;</span>
        Map&lt;String, HashMap&lt;String, String&gt;&gt; kvs= paramObj<span class="hljs-preprocessor">.getKvs</span>()<span class="hljs-comment">;</span>
        for (String columnfamily : kvs<span class="hljs-preprocessor">.keySet</span>()) {
            HashMap&lt;String, String&gt; temp=kvs<span class="hljs-preprocessor">.get</span>(columnfamily)<span class="hljs-comment">;</span>
            for(String columnname:temp<span class="hljs-preprocessor">.keySet</span>()){
                delete<span class="hljs-preprocessor">.deleteColumn</span>(//
                        Bytes<span class="hljs-preprocessor">.toBytes</span>(columnfamily), //
                        Bytes<span class="hljs-preprocessor">.toBytes</span>(columnname)//
                )<span class="hljs-comment">;</span>
                this<span class="hljs-preprocessor">.hTable</span><span class="hljs-preprocessor">.delete</span>(delete)<span class="hljs-comment">;</span>
            }
        }
        return true<span class="hljs-comment">;</span>
    }
    //scan data
    public ResultScanner scanData(String startRowKey,String stopRowKey,ParamObj paramObj) throws Exception {
        Scan scan = new Scan() <span class="hljs-comment">;</span>
        scan<span class="hljs-preprocessor">.setStartRow</span>(Bytes<span class="hljs-preprocessor">.toBytes</span>(startRowKey))<span class="hljs-comment">;</span>
        scan<span class="hljs-preprocessor">.setStopRow</span>(Bytes<span class="hljs-preprocessor">.toBytes</span>(stopRowKey)) <span class="hljs-comment">;</span>
        Map&lt;String, HashMap&lt;String, String&gt;&gt; kvs= paramObj<span class="hljs-preprocessor">.getKvs</span>()<span class="hljs-comment">;</span>
        for (String columnfamily : kvs<span class="hljs-preprocessor">.keySet</span>()) {
            scan<span class="hljs-preprocessor">.addFamily</span>(Bytes<span class="hljs-preprocessor">.toBytes</span>(columnfamily))<span class="hljs-comment">;</span>
        }

        ResultScanner resultScanner =this<span class="hljs-preprocessor">.hTable</span><span class="hljs-preprocessor">.getScanner</span>(scan)<span class="hljs-comment">;</span>
        return resultScanner<span class="hljs-comment">;</span>
    }
    //close
    public void close() throws IOException{
        this<span class="hljs-preprocessor">.hTable</span><span class="hljs-preprocessor">.close</span>()<span class="hljs-comment">;</span>
    }

}
</code></pre>

<ul>
<li>HbaseUtils.java:</li>
</ul>



<pre class="prettyprint"><code class=" hljs java"><span class="hljs-keyword">package</span> org.apache.hadoop.hbase;

<span class="hljs-keyword">import</span> org.apache.hadoop.conf.Configuration;
<span class="hljs-keyword">import</span> org.apache.hadoop.hbase.client.HTable;

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HbaseUtils</span> {</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HTable <span class="hljs-title">getHTableByTableName</span>(String tableName) <span class="hljs-keyword">throws</span> Exception {
        <span class="hljs-comment">// Get instance of Configuration</span>
        Configuration conf = HBaseConfiguration.create();
        <span class="hljs-comment">// Get table Instance</span>
        HTable table = <span class="hljs-keyword">new</span> HTable(conf, tableName);

        <span class="hljs-keyword">return</span> table;
    }
}
</code></pre>

<ul>
<li>ParamObj.java:</li>
</ul>



<pre class="prettyprint"><code class=" hljs lasso">package org<span class="hljs-built_in">.</span>apache<span class="hljs-built_in">.</span>hadoop<span class="hljs-built_in">.</span>hbase;

<span class="hljs-keyword">import</span> java<span class="hljs-built_in">.</span>util<span class="hljs-built_in">.</span>HashMap;
<span class="hljs-keyword">import</span> java<span class="hljs-built_in">.</span>util<span class="hljs-built_in">.</span><span class="hljs-built_in">Map</span>;

<span class="hljs-keyword">public</span> class ParamObj {
    <span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> rowKey;
    <span class="hljs-keyword">private</span> <span class="hljs-built_in">Map</span><span class="hljs-subst">&lt;</span><span class="hljs-built_in">String</span>, HashMap<span class="hljs-subst">&lt;</span><span class="hljs-built_in">String</span>, <span class="hljs-built_in">String</span><span class="hljs-subst">&gt;&gt;</span> kvs <span class="hljs-subst">=</span> <span class="hljs-literal">new</span> HashMap<span class="hljs-subst">&lt;</span><span class="hljs-built_in">String</span>, HashMap<span class="hljs-subst">&lt;</span><span class="hljs-built_in">String</span>, <span class="hljs-built_in">String</span><span class="hljs-subst">&gt;&gt;</span>() ;

    <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> getRowKey() {
        <span class="hljs-keyword">return</span> rowKey;
    }
    <span class="hljs-keyword">public</span> <span class="hljs-literal">void</span> setRowKey(<span class="hljs-built_in">String</span> rowKey) {
        this<span class="hljs-built_in">.</span>rowKey <span class="hljs-subst">=</span> rowKey;
    }
    <span class="hljs-keyword">public</span> <span class="hljs-built_in">Map</span><span class="hljs-subst">&lt;</span><span class="hljs-built_in">String</span>, HashMap<span class="hljs-subst">&lt;</span><span class="hljs-built_in">String</span>, <span class="hljs-built_in">String</span><span class="hljs-subst">&gt;&gt;</span> getKvs() {
        <span class="hljs-keyword">return</span> kvs;
    }
    <span class="hljs-keyword">public</span> <span class="hljs-literal">void</span> setKvs(<span class="hljs-built_in">Map</span><span class="hljs-subst">&lt;</span><span class="hljs-built_in">String</span>, HashMap<span class="hljs-subst">&lt;</span><span class="hljs-built_in">String</span>, <span class="hljs-built_in">String</span><span class="hljs-subst">&gt;&gt;</span> kvs) {
        this<span class="hljs-built_in">.</span>kvs <span class="hljs-subst">=</span> kvs;
    }
}
</code></pre>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>