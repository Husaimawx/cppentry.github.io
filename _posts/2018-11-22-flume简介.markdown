---
layout:     post
title:      flume简介
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/liuxiao723846/article/details/60323916				</div>
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<p>Flume是一个分布式、可靠、和高可用的海量日志聚合的系统（使用java编写，需要运行在jdk6或以上环境），最早由cloudera开发，现已经并入Apache社区。支持在系统中定制各类数据发送方，用于收集数据；同时，Flume提供对数据进行简单处理，并写到各种数据接受方（可定制）的能力。Flume分为两个主要打</p>
<p></p>
<ul><li>Flume OG:Flume original generation 即Flume 0.9.x版本</li><li>Flume NG:Flume next generation ，即Flume 1.x版本</li></ul><div>一、Flume OG ：</div>
<div>可以说他是一个分布式日志收集系统，有Mater概念，依赖于zookeeper，以下是其架构图</div>
<div><img src="https://img-blog.csdn.net/20170304123727755?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGl1eGlhbzcyMzg0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br></div>
<div>Flume采用了分层架构：分别为agent，collector和storage。<span style="color:#ff0000;">其中，agent和collector均由两部分组成：source和sink，source是数据来源，sink是数据去向</span>。Flume使用两个组件：Master和Node，Node根据在Master shell或web中动态配置，决定其是作为Agent还是Collector。<span></span></div>
<div><br>
Agent用于采集数据，agent是flume中产生数据流的地方，同时，agent会将产生的数据流传输到collector。对应的，collector用于对数据进行聚合，往往会产生一个更大的流。<br></div>
<div><br></div>
<div>1、agent的作用是将数据源的数据发送给collector。<br><br>
1）Flume自带了很多直接可用的数据源（source），如：<br>
text(“filename”)：将文件filename作为数据源，按行发送<br>
tail(“filename”)：探测filename新产生的数据，按行发送出去<br>
fsyslogTcp(5140)：监听TCP的5140端口，并且接收到的数据发送出去<br>
tailDir("dirname"[, fileregex=".*"[, startFromEnd=false[, recurseDepth=0]]])：监听目录中的文件末尾，使用正则去选定需要监听的文件（不包含目录），recurseDepth为递归监听其下子目录的深度<br>
更多可参见这位朋友的整理：http://www.cnblogs.com/zhangmiao-chp/archive/2011/05/18/2050465.html<br><br>
2）同时提供了很多sink，如：<br>
console[("format")] ：直接将将数据显示在consolr上<br>
text(“txtfile”)：将数据写到文件txtfile中<br>
dfs(“dfsfile”)：将数据写到HDFS上的dfsfile文件中<br>
syslogTcp(“host”,port)：将数据通过TCP传递给host节点<br>
agentSink[("machine"[,port])]：等价于agentE2ESink，如果省略，machine参数，默认使用flume.collector.event.host与flume.collector.event.port作为默认collecotr<br>
agentDFOSink[("machine" [,port])]：本地热备agent，agent发现collector节点故障后，不断检查collector的存活状态以便重新发送event，在此间产生的数据将缓存到本地磁盘中<br>
agentBESink[("machine"[,port])]：不负责的agent，如果collector故障，将不做任何处理，它发送的数据也将被直接丢弃<br>
agentE2EChain：指定多个collector提高可用性。 当向主collector发送event失效后，转向第二个collector发送，当所有的collector失败后，它会非常执着的再来一遍<br>
更多可参见这位朋友的整理：http://www.cnblogs.com/zhangmiao-chp/archive/2011/05/18/2050472.html<br><br><br>
2、collector<br>
collector的作用是将多个agent的数据汇总后，加载到storage中。它的source和sink与agent类似。<br><br></div>
<div>1）数据源（source），如：<br>
collectorSource[(port)]：Collector source，监听端口汇聚数据<br>
autoCollectorSource：通过master协调物理节点自动汇聚数据<br>
logicalSource：逻辑source，由master分配端口并监听rpcSink<br><br></div>
<div>2）sink，如：<br>
collectorSink( "fsdir","fsfileprefix",rollmillis)：collectorSink，数据通过collector汇聚之后发送到hdfs, fsdir 是hdfs目录，fsfileprefix为文件前缀码<br>
customdfs("hdfspath"[, "format"])：自定义格式dfs<br><br></div>
<div>3、 storage<br>
storage是存储系统，可以是一个普通file，也可以是HDFS，HIVE，HBase，分布式存储等。<br><br><br>
(4) Master<br>
Master是管理协调agent和collector的配置等信息，是flume集群的控制器。<br><br><br>
 在Flume中，最重要的抽象是data flow（数据流），data flow描述了数据从产生，传输、处理并最终写入目标的一条路径。<br></div>
<div>对于agent数据流配置就是从哪得到数据，把数据发送到哪个collector。<br>
对于collector是接收agent发过来的数据，把数据发送到指定的目标机器上。<br>
注：Flume框架对hadoop和zookeeper的依赖只是在jar包上，并不要求flume启动时必须将hadoop和zookeeper服务也启动。<br></div>
<div><br></div>
<div>参考：http://www.cnblogs.com/oubo/archive/2012/05/25/2517751.html</div>
<div><br></div>
<div>二、Flume NG</div>
<div><span style="font-family:'Microsoft YaHei';font-size:14px;">而对于</span><span style="font-family:'Microsoft YaHei';font-size:14px;">Flume NG</span><span style="font-family:'Microsoft YaHei';font-size:14px;">，它摒弃了Master和zookeeper，collector也没有了，web配置台也没有了，只剩下source，sink和channel，此时一个Agent的概念包括source,channel和sink，完全由一个分布式系统变成了传输工具。不同机器之间的数据传输不再是OG那样由agent-&gt;collector，而是由一个Agent端的sink流向另一个agent的source。其新的架构如下</span><br></div>
<div><span style="font-family:'Microsoft YaHei';font-size:14px;"><img src="https://img-blog.csdn.net/20170304124725100?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGl1eGlhbzcyMzg0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br></span></div>
<div><span style="font-family:'Microsoft YaHei';font-size:14px;"><br></span></div>
<div><span style="font-family:'Microsoft YaHei';font-size:14px;"><img src="https://img-blog.csdn.net/20170304124740803?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGl1eGlhbzcyMzg0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br></span></div>
<p></p>
            </div>
                </div>