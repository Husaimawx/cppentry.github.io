---
layout:     post
title:      kafka源码分析之producer
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/u014393917/article/details/52043242				</div>
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<h1><strong>Producer<span style="font-family:SimSun">的</span><span style="font-family:Arial">client</span><span style="font-family:SimSun">端</span></strong></h1>
<h2><strong><em>示例代码</em></strong></h2>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">Properties props = </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">Properties()</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">props.put(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"bootstrap.servers"</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">, </span><strong><span style="color:#0800; background:rgb(255,255,255)">"localhost:9092"</span></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">props.put(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"client.id"</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">, </span><strong><span style="color:#0800; background:rgb(255,255,255)">"DemoProducer"</span></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">props.put(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"key.serializer"</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">, </span><strong><span style="color:#0800; background:rgb(255,255,255)">"org.apache.kafka.common.serialization.</span></strong><span style="color:#000000; background:rgb(228,228,255)">ByteArraySerializer</span><strong><span style="color:#0800; background:rgb(255,255,255)">"</span></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">props.put(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"value.serializer"</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">, </span><strong><span style="color:#0800; background:rgb(255,255,255)">"org.apache.kafka.common.serialization.</span></strong><span style="color:#000000; background:rgb(228,228,255)">ByteArraySerializer</span><strong><span style="color:#0800; background:rgb(255,255,255)">"</span></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">producer </span></strong><span style="color:#000000; background:rgb(255,255,255)">= </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">KafkaProducer&lt;Integer</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">String&gt;(props)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><strong><span style="color:#0080; background:rgb(255,255,255)">this</span></strong><span style="color:#000000; background:rgb(255,255,255)">.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">topic </span></strong><span style="color:#000000; background:rgb(255,255,255)">= topic</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><strong><span style="color:#0080; background:rgb(255,255,255)">this</span></strong><span style="color:#000000; background:rgb(255,255,255)">.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">isAsync </span></strong><span style="color:#000000; background:rgb(255,255,255)">= isAsync</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">String messageStr = </span><strong><span style="color:#0800; background:rgb(255,255,255)">"Message_"</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><strong><span style="color:#0080; background:rgb(255,255,255)">long </span></strong><span style="color:#000000; background:rgb(255,255,255)">startTime = System.</span><em><span style="color:#000000; background:rgb(255,255,255)">currentTimeMillis</span></em><span style="color:#000000; background:rgb(255,255,255)">()</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><strong><span style="color:#0080; background:rgb(255,255,255)">if </span></strong><span style="color:#000000; background:rgb(255,255,255)">(</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">isAsync</span></strong><span style="color:#000000; background:rgb(255,255,255)">) {</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">异步处理，这个过程需要定义一个回调函数来监听发送的消息的响应结果</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span><em><span style="color:#808080; background:rgb(255,255,255)">// Send asynchronously</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">  </span></em><strong><span style="color:#66e7a; background:rgb(255,255,255)">producer</span></strong><span style="color:#000000; background:rgb(255,255,255)">.send(</span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">ProducerRecord&lt;byte[]</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">byte[]&gt;(</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">topic</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">      </span><span style="color:#000000; background:rgb(255,255,255)">messageNo.getBytes()/*key*/</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">      </span><span style="color:#000000; background:rgb(255,255,255)">messageNo.getBytes()/*value*/)</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">      /*异步处理,回调函数*/</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">      </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">DemoCallBack(startTime</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">messageNo</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">messageStr))</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">} </span><strong><span style="color:#0080; background:rgb(255,255,255)">else </span></strong><span style="color:#000000; background:rgb(255,255,255)">{ </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">同步处理，发送完成后，等待发送的响应结果。</span></p>
<p style="background:rgb(255,255,255)"><em><span style="color:#808080; background:rgb(255,255,255)">// Send synchronously</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">  </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">try </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#66e7a; background:rgb(255,255,255)">producer</span></strong><span style="color:#000000; background:rgb(255,255,255)">.send(</span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">ProducerRecord&lt;Integer</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">String&gt;(</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">topic</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><span style="color:#000000; background:rgb(255,255,255)">messageNo.getBytes()/*key*/</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><span style="color:#000000; background:rgb(255,255,255)">messageNo.getBytes()/*value*/)).get()</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">    </span><span style="color:#000000; background:rgb(255,255,255)">System.</span><strong><em><span style="color:#66e7a; background:rgb(255,255,255)">out</span></em></strong><span style="color:#000000; background:rgb(255,255,255)">.println(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Sent message: (" </span></strong><span style="color:#000000; background:rgb(255,255,255)">+ messageNo + </span><strong><span style="color:#0800; background:rgb(255,255,255)">", " </span></strong><span style="color:#000000; background:rgb(255,255,255)">+ messageStr + </span><strong><span style="color:#0800; background:rgb(255,255,255)">")"</span></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">  </span><span style="color:#000000; background:rgb(255,255,255)">} </span><strong><span style="color:#0080; background:rgb(255,255,255)">catch </span></strong><span style="color:#000000; background:rgb(255,255,255)">(InterruptedException e) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    e.printStackTrace()</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">  </span><span style="color:#000000; background:rgb(255,255,255)">} </span><strong><span style="color:#0080; background:rgb(255,255,255)">catch </span></strong><span style="color:#000000; background:rgb(255,255,255)">(ExecutionException e) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    e.printStackTrace()</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">  </span><span style="color:#000000; background:rgb(255,255,255)">}</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p> </p>
<p>关于异步处理的回调函数定义：</p>
<p style="background:rgb(255,255,255)">这个回调函数实现需要实现<span style="color:#000000; background:rgb(228,228,255)">org</span><span style="color:#000000; background:rgb(255,255,255)">.apache.kafka.clients.producer.Callback</span>接口。</p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0080; background:rgb(255,255,255)">class </span></strong><span style="color:#000000; background:rgb(255,255,255)">DemoCallBack </span><strong><span style="color:#0080; background:rgb(255,255,255)">implements </span></strong><span style="color:#000000; background:rgb(255,255,255)">Callback </span></p>
<p> </p>
<p>并实现接口中的函数：</p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0080; background:rgb(255,255,255)">public void </span></strong><span style="color:#000000; background:rgb(255,255,255)">onCompletion(RecordMetadata metadata</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">Exception exception) {</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里的startTime是发送这条消息时，生成回调函数时传入的消息发送的开始时间，</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">计算出来了这次发送这条消息共花的时间</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">long </span></strong><span style="color:#000000; background:rgb(255,255,255)">elapsedTime = System.</span><em><span style="color:#000000; background:rgb(255,255,255)">currentTimeMillis</span></em><span style="color:#000000; background:rgb(255,255,255)">() - </span><strong><span style="color:#66e7a; background:rgb(255,255,255)">startTime</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">if </span></strong><span style="color:#000000; background:rgb(255,255,255)">(metadata != </span><strong><span style="color:#0080; background:rgb(255,255,255)">null</span></strong><span style="color:#000000; background:rgb(255,255,255)">) {</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">如果metadata信息不为空，表示消息添加成功，可以得到当前添加成功的消息的offset.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    System.</span><strong><em><span style="color:#66e7a; background:rgb(255,255,255)">out</span></em></strong><span style="color:#000000; background:rgb(255,255,255)">.println(</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><strong><span style="color:#0800; background:rgb(255,255,255)">"message(" </span></strong><span style="color:#000000; background:rgb(255,255,255)">+ </span><strong><span style="color:#66e7a; background:rgb(255,255,255)">key </span></strong><span style="color:#000000; background:rgb(255,255,255)">+ </span><strong><span style="color:#0800; background:rgb(255,255,255)">", " </span></strong><span style="color:#000000; background:rgb(255,255,255)">+ </span><strong><span style="color:#66e7a; background:rgb(255,255,255)">message </span></strong><span style="color:#000000; background:rgb(255,255,255)">+ </span><strong><span style="color:#0800; background:rgb(255,255,255)">") sent to partition(" </span></strong></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0800; background:rgb(255,255,255)">           </span></strong><span style="color:#000000; background:rgb(255,255,255)">+ metadata.partition() +</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">            </span><strong><span style="color:#0800; background:rgb(255,255,255)">"), " </span></strong><span style="color:#000000; background:rgb(255,255,255)">+</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">            </span><strong><span style="color:#0800; background:rgb(255,255,255)">"offset(" </span></strong><span style="color:#000000; background:rgb(255,255,255)">+ metadata.offset() + </span><strong><span style="color:#0800; background:rgb(255,255,255)">") in " </span></strong><span style="color:#000000; background:rgb(255,255,255)">+ elapsedTime + </span><strong><span style="color:#0800; background:rgb(255,255,255)">" ms"</span></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">  </span><span style="color:#000000; background:rgb(255,255,255)">} </span><strong><span style="color:#0080; background:rgb(255,255,255)">else </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这种情况下，表示exception有值，也就是添加消息失败了，可以直接打印这个失败的消息的内容。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    exception.printStackTrace()</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">  </span><span style="color:#000000; background:rgb(255,255,255)">}</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p> </p>
<h2><strong><em>Client<span style="font-family:SimSun">端的生成与处理流程</span></em></strong></h2>
<h3><strong>生成<span style="font-family:Arial">KafkaProducer</span><span style="font-family:SimSun">实例</span></strong></h3>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">1,首先看看KafkaProducer实例生成:</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">根据传入的properties配置信息，生成用于Producer的config实例。</span></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0080; background:rgb(228,228,255)">this</span></strong><span style="color:#000000; background:rgb(255,255,255)">(</span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">ProducerConfig(properties)</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><strong><span style="color:#0080; background:rgb(255,255,255)">null</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">, </span><strong><span style="color:#0080; background:rgb(255,255,255)">null</span></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">2,解析必要的配置项：</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">2,1,配置项</span><strong><span style="color:#0800; background:rgb(228,228,255)">client.id</span></strong><span style="color:#000000; background:rgb(255,255,255)">，用于标记client端的一个编码值，默认值为</span><strong><span style="color:#0800; background:rgb(255,255,255)">producer-1</span></strong><span style="color:#000000; background:rgb(255,255,255)">。在同一个进程内，多个client端时，如果没有指定，默认根据1这个值向后增加。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">2,2,配置项</span><strong><span style="color:#0800; background:rgb(255,255,255)">partitioner.class</span></strong><span style="color:#000000; background:rgb(255,255,255)">，配置用于producer写入数据时用于计算这条数据对应的partition的分配算子实例，这个实例必须是的</span><span style="color:#000000; background:rgb(228,228,255)">Partitioner</span><span style="color:#000000; background:rgb(255,255,255)">实现。实例初始化时会调用configure函数把配置文件传入进去，用于实例生成时使用，默认情况下分区算子是</span><span style="color:#000000; background:rgb(228,228,255)">DefaultPartitioner</span><span style="color:#000000; background:rgb(255,255,255)">。这个默认算子根据当前的key值进行murmur2 hash并与对应的topic的个数于模，如果key为null时，根据一个自增的integer的值与partition的个数取模.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">2,3,配置项</span><strong><span style="color:#0800; background:rgb(255,255,255)">retry.backoff.ms</span></strong><span style="color:#000000; background:rgb(255,255,255)">，用于在向broker发送数据失败后的重试间隔时间，默认值为100ms</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">2,4,配置项</span><strong><span style="color:#0800; background:rgb(255,255,255)">metadata.max.age.ms</span></strong><span style="color:#000000; background:rgb(255,255,255)">，用于配置每个producer端缓存topic的metadata的过期时间，默认值为5分钟。配置上面的2,3，与2,4的配置，生成一个Metadata实例。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">2,5,配置项</span><strong><span style="color:#0800; background:rgb(255,255,255)">max.request.size</span></strong><span style="color:#000000; background:rgb(255,255,255)">，用于配置每次producer请求的最大的字节数，默认值为1MB。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">2,6,配置项</span><strong><span style="color:#0800; background:rgb(255,255,255)">buffer.memory</span></strong><span style="color:#000000; background:rgb(255,255,255)">，用于配置producer端等待向server发送的数据的缓冲区的大小，默认值为32MB。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">2,7,配置项</span><strong><span style="color:#0800; background:rgb(255,255,255)">compression.type</span></strong><span style="color:#000000; background:rgb(255,255,255)">，默认值none，用于配置数据的压缩算法，默认为不压缩，可配置的值为</span><strong><span style="color:#0800; background:rgb(255,255,255)">none,gzip,snappy,lz4</span></strong><span style="color:#000000; background:rgb(255,255,255)">。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">2,8,配置项</span><strong><span style="color:#0800; background:rgb(255,255,255)">max.block.ms</span></strong><span style="color:#000000; background:rgb(255,255,255)">，用于配置send数据或partitionFor函数得到对应的leader时，最大的等待时间，默认值为60秒。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">2,9,配置项</span><strong><span style="color:#0800; background:rgb(255,255,255)">request.timeout.ms</span></strong><span style="color:#000000; background:rgb(255,255,255)">，用于配置socket请求的最大超时时间，默认值为30秒。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">3,生成record的累加器，这是一个用于对producer要发送的数据进行缓冲的实例：</span></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0080; background:rgb(255,255,255)">this</span></strong><span style="color:#000000; background:rgb(255,255,255)">.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">accumulator </span></strong><span style="color:#000000; background:rgb(255,255,255)">= </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">RecordAccumulator(</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">        config.getInt(ProducerConfig.</span><strong><em><span style="color:#66e7a; background:rgb(255,255,255)">BATCH_SIZE_CONFIG</span></em></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">this</span></strong><span style="color:#000000; background:rgb(255,255,255)">.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">totalMemorySize</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">this</span></strong><span style="color:#000000; background:rgb(255,255,255)">.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">compressionType</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><span style="color:#000000; background:rgb(255,255,255)">config.getLong(ProducerConfig.</span><strong><em><span style="color:#66e7a; background:rgb(255,255,255)">LINGER_MS_CONFIG</span></em></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><span style="color:#000000; background:rgb(255,255,255)">retryBackoffMs</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><strong><span style="color:#66e7a; background:rgb(255,255,255)">metrics</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><strong><span style="color:#66e7a; background:rgb(255,255,255)">time</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><span style="color:#000000; background:rgb(255,255,255)">metricTags)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">3,1,RecordAccumulator实例需要的配置：</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">3,1,1配置项</span><strong><span style="color:#0800; background:rgb(255,255,255)">batch.size</span></strong><span style="color:#000000; background:rgb(255,255,255)">，用于批量提交的batch字节大小，默认值为16384。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">3,1,2配置项</span><strong><span style="color:#0800; background:rgb(255,255,255)">linger.ms</span></strong><span style="color:#000000; background:rgb(255,255,255)">，这个配置与3,1,1配合使用，用于配置数据缓存的最大延迟时间,默认值0.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">3,1,3依赖的其它配置项：2,6  2,7 2,3。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">4,根据配置项</span><strong><span style="color:#0800; background:rgb(228,228,255)">bootstrap.servers</span></strong><span style="color:#000000; background:rgb(255,255,255)">，多个配置使用逗号分开，</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">生成用于socket请求的</span><span style="color:#000000; background:rgb(228,228,255)">InetSocketAddress</span><span style="color:#000000; background:rgb(255,255,255)">实例集合。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">4,1并根据配置的broker的连接地址集合，生成Cluster的实例。把cluster实例更新到metadata的实例中。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">5,生成</span><span style="color:#000000; background:rgb(228,228,255)">NetworkClient</span><span style="color:#000000; background:rgb(255,255,255)">实例，这个实例用于与各个broker进行socket通信,生成用于进行数据发送的Sender实例，并生成用于数据发送的KafkaThread线程并启动。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">6,根据配置项</span><strong><span style="color:#0800; background:rgb(255,255,255)">key.serializer/value.serializer</span></strong><span style="color:#000000; background:rgb(255,255,255)">，生成key与value的序列化实例，这实例必须是</span><span style="color:#000000; background:rgb(228,228,255)">Serializer</span><span style="color:#000000; background:rgb(255,255,255)">的实现。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<h3><strong>KafkaThread<span style="font-family:SimSun">线程初始化</span></strong></h3>
<p>生成<span style="font-family:Times New Roman">NetworkClient</span><span style="font-family:SimSun">实例需要的配置项：</span></p>
<p style="background:rgb(255,255,255)">1,配置项<strong><span style="color:#0800; background:rgb(255,255,255)">connections.max.idle.ms</span></strong>，默认值为9分钟，用于设置连接最大的空闲时间，</p>
<p style="background:rgb(255,255,255)">2,配置项<strong><span style="color:#0800; background:rgb(255,255,255)">max.in.flight.requests.per.connection</span></strong>，默认值5,用于设置每个连接最大的请求个数</p>
<p style="background:rgb(255,255,255)">3,配置项<strong><span style="color:#0800; background:rgb(255,255,255)">reconnect.backoff.ms</span></strong>，默认值50ms，用于设置重新尝试连接的等待时间。</p>
<p style="background:rgb(255,255,255)">4,配置项<strong><span style="color:#0800; background:rgb(255,255,255)">send.buffer.bytes</span></strong>，默认值128kb，用于设置socket的发送缓冲区<strong><span style="color:#0800; background:rgb(255,255,255)">SO_SNDBUF</span></strong>的大小。</p>
<p style="background:rgb(255,255,255)">5,配置项<strong><span style="color:#0800; background:rgb(255,255,255)">receive.buffer.bytes</span></strong>，默认值32kb,用于设置socket的接收响应的缓冲区<strong><span style="color:#0800; background:rgb(255,255,255)">SO_RCVBUF</span></strong>的大小。</p>
<p style="background:rgb(255,255,255)">6,<span style="color:#000000; background:rgb(255,255,255)">配置项</span><strong><span style="color:#0800; background:rgb(255,255,255)">request.timeout.ms</span></strong><span style="color:#000000; background:rgb(255,255,255)">，用于配置socket请求的最大超时时间，默认值为30秒。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(228,228,255)">NetworkClient</span><span style="color:#000000; background:rgb(255,255,255)"> client = </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(228,228,255)">NetworkClient</span><span style="color:#000000; background:rgb(255,255,255)">(</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">Selector(</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">            config.getLong(ProducerConfig.</span><strong><em><span style="color:#66e7a; background:rgb(255,255,255)">CONNECTIONS_MAX_IDLE_MS_CONFIG</span></em></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">            </span><strong><span style="color:#0080; background:rgb(255,255,255)">this</span></strong><span style="color:#000000; background:rgb(255,255,255)">.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">metrics</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">, </span><strong><span style="color:#66e7a; background:rgb(255,255,255)">time</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">, </span><strong><span style="color:#0800; background:rgb(255,255,255)">"producer"</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">metricTags</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">channelBuilder)</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">this</span></strong><span style="color:#000000; background:rgb(255,255,255)">.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">metadata</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><strong><span style="color:#66e7a; background:rgb(255,255,255)">clientId</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><span style="color:#000000; background:rgb(255,255,255)">config.getInt(ProducerConfig.</span><strong><em><span style="color:#66e7a; background:rgb(255,255,255)">MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION</span></em></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><span style="color:#000000; background:rgb(255,255,255)">config.getLong(ProducerConfig.</span><strong><em><span style="color:#66e7a; background:rgb(255,255,255)">RECONNECT_BACKOFF_MS_CONFIG</span></em></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><span style="color:#000000; background:rgb(255,255,255)">config.getInt(ProducerConfig.</span><strong><em><span style="color:#66e7a; background:rgb(255,255,255)">SEND_BUFFER_CONFIG</span></em></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><span style="color:#000000; background:rgb(255,255,255)">config.getInt(ProducerConfig.</span><strong><em><span style="color:#66e7a; background:rgb(255,255,255)">RECEIVE_BUFFER_CONFIG</span></em></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">this</span></strong><span style="color:#000000; background:rgb(255,255,255)">.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">requestTimeoutMs</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">, </span><strong><span style="color:#66e7a; background:rgb(255,255,255)">time</span></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">Sender是一个用于发送数据的线程。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">需要的配置项：</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">1,</span><span style="color:#000000; background:rgb(255,255,255)">配置项</span><strong><span style="color:#0800; background:rgb(255,255,255)">max.request.size</span></strong><span style="color:#000000; background:rgb(255,255,255)">，用于配置每次producer请求的最大的字节数，默认值为1MB。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">2,</span><span style="color:#000000; background:rgb(255,255,255)">配置项</span><strong><span style="color:#0800; background:rgb(255,255,255)">acks</span></strong><span style="color:#000000; background:rgb(255,255,255)">，默认值1,用于配置请求的ack的类型,-1,0,1三种。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">3,配置项</span><strong><span style="color:#0800; background:rgb(255,255,255)">retries</span></strong><span style="color:#000000; background:rgb(255,255,255)">，默认值0,用于配置发送失败的重试次数。</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><strong><span style="color:#0080; background:rgb(255,255,255)">this</span></strong><span style="color:#000000; background:rgb(255,255,255)">.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">sender </span></strong><span style="color:#000000; background:rgb(255,255,255)">= </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">Sender(client</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">this</span></strong><span style="color:#000000; background:rgb(255,255,255)">.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">metadata</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">this</span></strong><span style="color:#000000; background:rgb(255,255,255)">.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">accumulator</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><span style="color:#000000; background:rgb(255,255,255)">config.getInt(ProducerConfig.</span><strong><em><span style="color:#66e7a; background:rgb(255,255,255)">MAX_REQUEST_SIZE_CONFIG</span></em></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><span style="color:#000000; background:rgb(255,255,255)">(</span><strong><span style="color:#0080; background:rgb(255,255,255)">short</span></strong><span style="color:#000000; background:rgb(255,255,255)">) </span><em><span style="color:#000000; background:rgb(255,255,255)">parseAcks</span></em><span style="color:#000000; background:rgb(255,255,255)">(config.getString(ProducerConfig.</span><strong><em><span style="color:#66e7a; background:rgb(255,255,255)">ACKS_CONFIG</span></em></strong><span style="color:#000000; background:rgb(255,255,255)">))</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><span style="color:#000000; background:rgb(255,255,255)">config.getInt(ProducerConfig.</span><strong><em><span style="color:#66e7a; background:rgb(255,255,255)">RETRIES_CONFIG</span></em></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">this</span></strong><span style="color:#000000; background:rgb(255,255,255)">.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">metrics</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">SystemTime()</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><strong><span style="color:#66e7a; background:rgb(255,255,255)">clientId</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">this</span></strong><span style="color:#000000; background:rgb(255,255,255)">.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">requestTimeoutMs</span></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">String ioThreadName = </span><strong><span style="color:#0800; background:rgb(255,255,255)">"kafka-producer-network-thread" </span></strong></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0800; background:rgb(255,255,255)">        </span></strong><span style="color:#000000; background:rgb(255,255,255)">+ (</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">clientId</span></strong><span style="color:#000000; background:rgb(255,255,255)">.length() &gt; </span><span style="color:#00ff; background:rgb(255,255,255)">0 </span><span style="color:#000000; background:rgb(255,255,255)">? </span><strong><span style="color:#0800; background:rgb(255,255,255)">" | " </span></strong><span style="color:#000000; background:rgb(255,255,255)">+ </span><strong><span style="color:#66e7a; background:rgb(255,255,255)">clientId </span></strong><span style="color:#000000; background:rgb(255,255,255)">: </span><strong><span style="color:#0800; background:rgb(255,255,255)">""</span></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">这里用于启动用于对producer中的数据进行发送的线程Sender实例。</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><strong><span style="color:#0080; background:rgb(255,255,255)">this</span></strong><span style="color:#000000; background:rgb(255,255,255)">.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">ioThread </span></strong><span style="color:#000000; background:rgb(255,255,255)">= </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">KafkaThread(ioThreadName</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><strong><span style="color:#0080; background:rgb(255,255,255)">this</span></strong><span style="color:#000000; background:rgb(255,255,255)">.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">sender</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">, </span><strong><span style="color:#0080; background:rgb(255,255,255)">true</span></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><strong><span style="color:#0080; background:rgb(255,255,255)">this</span></strong><span style="color:#000000; background:rgb(255,255,255)">.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">ioThread</span></strong><span style="color:#000000; background:rgb(255,255,255)">.start()</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span></p>
<p> </p>
<h3><strong>通过<span style="font-family:Arial">producer</span><span style="font-family:SimSun">发送数据</span></strong></h3>
<h4><strong>Producer<span style="font-family:SimSun">的</span><span style="font-family:Times New Roman">send</span><span style="font-family:SimSun">函数</span></strong></h4>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0080; background:rgb(255,255,255)">public </span></strong><span style="color:#000000; background:rgb(255,255,255)">Future&lt;RecordMetadata&gt; send(ProducerRecord&lt;</span><span style="color:#20999d; background:rgb(255,255,255)">K</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#20999d; background:rgb(255,255,255)">V</span><span style="color:#000000; background:rgb(255,255,255)">&gt; record) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">return </span></strong><span style="color:#000000; background:rgb(255,255,255)">send(record</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><strong><span style="color:#0080; background:rgb(255,255,255)">null</span></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">如果需要考虑数据发送成功的回调处理时，需要实现Callback。</span><span style="color:#80800; background:rgb(255,255,255)"><br>
</span><strong><span style="color:#0080; background:rgb(255,255,255)">public </span></strong><span style="color:#000000; background:rgb(255,255,255)">Future&lt;RecordMetadata&gt; send(ProducerRecord&lt;</span><span style="color:#20999d; background:rgb(255,255,255)">K</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#20999d; background:rgb(255,255,255)">V</span><span style="color:#000000; background:rgb(255,255,255)">&gt; record</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">Callback callback) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">try </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里根据请求的记录的topic的名称，得到这个topic对应的metadata信息,这里通过Metadata实例来得到。函数返回值是读取topic的metadata信息的读取时间。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">1,从metadata实例中的</span><span style="color:#000000; background:rgb(228,228,255)">topics</span><span style="color:#000000; background:rgb(255,255,255)">集合中检查这个topic是否存在，如果不存在，把这个topic添加到集合中，</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">2,从metadata对应的Cluster实例（这里存储有每个broker的连接信息）中的</span><span style="color:#000000; background:rgb(228,228,255)">partitionsByTopic</span><span style="color:#000000; background:rgb(255,255,255)">集合中根据topic得到topic对应的partition信息的集合，如果partitionsByTopic中已经存在有对应的partitions的记录，说明这个topic的metadata信息已经被加载出来，函数直接返回0。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">3,如果当前的topic在metadata中没有对应的partitions的信息，根据</span><strong><span style="color:#0800; background:rgb(255,255,255)">max.block.ms</span></strong><span style="color:#000000; background:rgb(255,255,255)">配置的最大等待时间，通过每个broker的连接，随机取出一个broker的连接，如果broker的连接不存在时，会创建这个连接并向broker发起一个Topic</span><span style="color:#000000; background:rgb(228,228,255)">MetadataRequest</span><span style="color:#000000; background:rgb(255,255,255)">请求得到这个topic对应的metadata信息。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><em><span style="color:#808080; background:rgb(255,255,255)">// first make sure the metadata for the topic is available</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">        </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">long </span></strong><span style="color:#000000; background:rgb(255,255,255)">waitedOnMetadataMs = waitOnMetadata(record.topic()</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">             </span><strong><span style="color:#0080; background:rgb(255,255,255)">this</span></strong><span style="color:#000000; background:rgb(255,255,255)">.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">maxBlockTimeMs</span></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里得到总的等待时间除去得到metadata信息用去的时间后还可以用于等待添加数据到发送队列处理的等待时间。</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">long </span></strong><span style="color:#000000; background:rgb(255,255,255)">remainingWaitMs = Math.</span><em><span style="color:#000000; background:rgb(255,255,255)">max</span></em><span style="color:#000000; background:rgb(255,255,255)">(</span><span style="color:#00ff; background:rgb(255,255,255)">0</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><strong><span style="color:#0080; background:rgb(255,255,255)">this</span></strong><span style="color:#000000; background:rgb(255,255,255)">.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">maxBlockTimeMs </span></strong><span style="color:#000000; background:rgb(255,255,255)">- </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">               waitedOnMetadataMs)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">对传入的key与value进行序列化操作,并得到序列化后的byte array的key与value.</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">byte</span></strong><span style="color:#000000; background:rgb(255,255,255)">[] serializedKey</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">try </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">            serializedKey = </span><strong><span style="color:#66e7a; background:rgb(255,255,255)">keySerializer</span></strong><span style="color:#000000; background:rgb(255,255,255)">.serialize(record.topic()</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">record.key())</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><span style="color:#000000; background:rgb(255,255,255)">} </span><strong><span style="color:#0080; background:rgb(255,255,255)">catch </span></strong><span style="color:#000000; background:rgb(255,255,255)">(ClassCastException cce) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">            </span><strong><span style="color:#0080; background:rgb(255,255,255)">throw new </span></strong><span style="color:#000000; background:rgb(255,255,255)">SerializationException(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Can't convert key of class " </span></strong></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0800; background:rgb(255,255,255)">                    </span></strong><span style="color:#000000; background:rgb(255,255,255)">+ record.key().getClass().getName() +</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">                    </span><strong><span style="color:#0800; background:rgb(255,255,255)">" to class " </span></strong><span style="color:#000000; background:rgb(255,255,255)">+ </span><strong><span style="color:#66e7a; background:rgb(255,255,255)">producerConfig</span></strong><span style="color:#000000; background:rgb(255,255,255)">.getClass(</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">                        ProducerConfig.</span><strong><em><span style="color:#66e7a; background:rgb(255,255,255)">KEY_SERIALIZER_CLASS_CONFIG</span></em></strong><span style="color:#000000; background:rgb(255,255,255)">).getName() +</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">                    </span><strong><span style="color:#0800; background:rgb(255,255,255)">" specified in key.serializer"</span></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><span style="color:#000000; background:rgb(255,255,255)">}</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">byte</span></strong><span style="color:#000000; background:rgb(255,255,255)">[] serializedValue</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">try </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">            serializedValue = </span><strong><span style="color:#66e7a; background:rgb(255,255,255)">valueSerializer</span></strong><span style="color:#000000; background:rgb(255,255,255)">.serialize(record.topic()</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">                </span><span style="color:#000000; background:rgb(255,255,255)">record.value())</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><span style="color:#000000; background:rgb(255,255,255)">} </span><strong><span style="color:#0080; background:rgb(255,255,255)">catch </span></strong><span style="color:#000000; background:rgb(255,255,255)">(ClassCastException cce) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">            </span><strong><span style="color:#0080; background:rgb(255,255,255)">throw new </span></strong><span style="color:#000000; background:rgb(255,255,255)">SerializationException(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Can't convert value of class " </span></strong><span style="color:#000000; background:rgb(255,255,255)">+ </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">                    record.value().getClass().getName() +</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">                    </span><strong><span style="color:#0800; background:rgb(255,255,255)">" to class " </span></strong><span style="color:#000000; background:rgb(255,255,255)">+ </span><strong><span style="color:#66e7a; background:rgb(255,255,255)">producerConfig</span></strong><span style="color:#000000; background:rgb(255,255,255)">.getClass(</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">                        ProducerConfig.</span><strong><em><span style="color:#66e7a; background:rgb(255,255,255)">VALUE_SERIALIZER_CLASS_CONFIG</span></em></strong><span style="color:#000000; background:rgb(255,255,255)">).getName() +</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">                    </span><strong><span style="color:#0800; background:rgb(255,255,255)">" specified in value.serializer"</span></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">得到这条记录对应的partition,并根据这个partition生成TopicPartition,</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">在得到对应的partition时，如果传入参数中包含有partition的id时，判断这个partition的值是否在指定的范围内，必须在指定的范围内，如果partition没有传入时，通过指定的partitioner的实例，根据record的kv信息，生成一个partition的id值。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">int </span></strong><span style="color:#000000; background:rgb(255,255,255)">partition = partition(record</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">serializedKey</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">serializedValue</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">                 </span><strong><span style="color:#66e7a; background:rgb(255,255,255)">metadata</span></strong><span style="color:#000000; background:rgb(255,255,255)">.fetch())</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">得到一条记录的长度，这个记录的长度为size(4)，offset(8)，crc(4),magic(1),attr(1),</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">            Keysize(4),key,valuesize(4),value</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">int </span></strong><span style="color:#000000; background:rgb(255,255,255)">serializedSize = Records.</span><strong><em><span style="color:#66e7a; background:rgb(255,255,255)">LOG_OVERHEAD </span></em></strong><span style="color:#000000; background:rgb(255,255,255)">+ Record.</span><em><span style="color:#000000; background:rgb(255,255,255)">recordSize</span></em><span style="color:#000000; background:rgb(255,255,255)">(serializedKey</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">                   </span><span style="color:#000000; background:rgb(255,255,255)">serializedValue)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><span style="color:#000000; background:rgb(255,255,255)">ensureValidRecordSize(serializedSize)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><span style="color:#000000; background:rgb(255,255,255)">TopicPartition tp = </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">TopicPartition(record.topic()</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">partition)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><strong><em><span style="color:#66e7a; background:rgb(255,255,255)">log</span></em></strong><span style="color:#000000; background:rgb(255,255,255)">.trace(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Sending record {} with callback {} to topic {} partition {}"</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">,</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">               </span><span style="color:#000000; background:rgb(255,255,255)">record</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">callback</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">record.topic()</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">partition)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">向client端的消息缓冲区内写入这条消息。</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><span style="color:#000000; background:rgb(255,255,255)">RecordAccumulator.RecordAppendResult result = </span><strong><span style="color:#66e7a; background:rgb(255,255,255)">accumulator</span></strong><span style="color:#000000; background:rgb(255,255,255)">.append(tp</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">              </span><span style="color:#000000; background:rgb(255,255,255)">serializedKey</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">serializedValue</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">callback</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">remainingWaitMs)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">if </span></strong><span style="color:#000000; background:rgb(255,255,255)">(result.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">batchIsFull </span></strong><span style="color:#000000; background:rgb(255,255,255)">|| result.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">newBatchCreated</span></strong><span style="color:#000000; background:rgb(255,255,255)">) {</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">如果当前的缓冲区的batch的大小已经满了，或者说这个缓冲区中重新生成了一个batch时，唤醒sender的线程，让sender的run函数继续执行，完成对数据的发送操作。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">            </span><strong><em><span style="color:#66e7a; background:rgb(255,255,255)">log</span></em></strong><span style="color:#000000; background:rgb(255,255,255)">.trace(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Waking up the sender since topic {} partition {} is either full </span></strong></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0800; background:rgb(255,255,255)">                  or getting a new batch"</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">record.topic()</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">partition)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">            </span><strong><span style="color:#0080; background:rgb(255,255,255)">this</span></strong><span style="color:#000000; background:rgb(255,255,255)">.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">sender</span></strong><span style="color:#000000; background:rgb(255,255,255)">.wakeup()</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><span style="color:#000000; background:rgb(255,255,255)">}</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">return </span></strong><span style="color:#000000; background:rgb(255,255,255)">result.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">future</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><em><span style="color:#808080; background:rgb(255,255,255)">// handling exceptions and record the errors;</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">        // for API exceptions return them in the future,</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">        // for other exceptions throw directly</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    </span></em><span style="color:#000000; background:rgb(255,255,255)">} </span><strong><span style="color:#0080; background:rgb(255,255,255)">catch </span></strong><span style="color:#000000; background:rgb(255,255,255)">(ApiException e) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><strong><em><span style="color:#66e7a; background:rgb(255,255,255)">log</span></em></strong><span style="color:#000000; background:rgb(255,255,255)">.debug(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Exception occurred during message send:"</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">e)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">if </span></strong><span style="color:#000000; background:rgb(255,255,255)">(callback != </span><strong><span style="color:#0080; background:rgb(255,255,255)">null</span></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">            callback.onCompletion(</span><strong><span style="color:#0080; background:rgb(255,255,255)">null</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">e)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">this</span></strong><span style="color:#000000; background:rgb(255,255,255)">.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">errors</span></strong><span style="color:#000000; background:rgb(255,255,255)">.record()</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">return new </span></strong><span style="color:#000000; background:rgb(255,255,255)">FutureFailure(e)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">    </span><span style="color:#000000; background:rgb(255,255,255)">} </span><strong><span style="color:#0080; background:rgb(255,255,255)">catch </span></strong><span style="color:#000000; background:rgb(255,255,255)">(InterruptedException e) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">this</span></strong><span style="color:#000000; background:rgb(255,255,255)">.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">errors</span></strong><span style="color:#000000; background:rgb(255,255,255)">.record()</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">throw new </span></strong><span style="color:#000000; background:rgb(255,255,255)">InterruptException(e)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">    </span><span style="color:#000000; background:rgb(255,255,255)">} </span><strong><span style="color:#0080; background:rgb(255,255,255)">catch </span></strong><span style="color:#000000; background:rgb(255,255,255)">(BufferExhaustedException e) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">this</span></strong><span style="color:#000000; background:rgb(255,255,255)">.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">errors</span></strong><span style="color:#000000; background:rgb(255,255,255)">.record()</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">this</span></strong><span style="color:#000000; background:rgb(255,255,255)">.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">metrics</span></strong><span style="color:#000000; background:rgb(255,255,255)">.sensor(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"buffer-exhausted-records"</span></strong><span style="color:#000000; background:rgb(255,255,255)">).record()</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">throw </span></strong><span style="color:#000000; background:rgb(255,255,255)">e</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">    </span><span style="color:#000000; background:rgb(255,255,255)">} </span><strong><span style="color:#0080; background:rgb(255,255,255)">catch </span></strong><span style="color:#000000; background:rgb(255,255,255)">(KafkaException e) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">this</span></strong><span style="color:#000000; background:rgb(255,255,255)">.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">errors</span></strong><span style="color:#000000; background:rgb(255,255,255)">.record()</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">throw </span></strong><span style="color:#000000; background:rgb(255,255,255)">e</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">    </span><span style="color:#000000; background:rgb(255,255,255)">}</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p> </p>
<h4><strong>Producer<span style="font-family:SimSun">的缓冲区的</span><span style="font-family:Times New Roman">append</span></strong></h4>
<p style="background:rgb(255,255,255)">在执行producer的send函数时，并不是直接就向socket发起网络请求，而是先把数据存储到发送的缓冲区中，这个缓冲区的实现是一个<span style="color:#000000; background:rgb(228,228,255)">RecordAccumulator</span>实例。</p>
<p style="background:rgb(255,255,255)">这个实例生成时，需要的配置项：</p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">配置项</span><strong><span style="color:#0800; background:rgb(255,255,255)">batch.size</span></strong><span style="color:#000000; background:rgb(255,255,255)">，用于批量提交的batch字节大小，默认值为16384。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">配置项</span><strong><span style="color:#0800; background:rgb(255,255,255)">linger.ms</span></strong><span style="color:#000000; background:rgb(255,255,255)">，这个配置与3,1,1配合使用，用于配置数据缓存的最大延迟时间,默认值0.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">配置项</span><strong><span style="color:#0800; background:rgb(255,255,255)">buffer.memory</span></strong><span style="color:#000000; background:rgb(255,255,255)">，用于配置producer端等待向server发送的数据的缓冲区的大小，默认值为32MB。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">配置项</span><strong><span style="color:#0800; background:rgb(255,255,255)">compression.type</span></strong><span style="color:#000000; background:rgb(255,255,255)">，默认值none，用于配置数据的压缩算法，默认为不压缩，可配置的值为</span><strong><span style="color:#0800; background:rgb(255,255,255)">none,gzip,snappy,lz4</span></strong><span style="color:#000000; background:rgb(255,255,255)">。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">配置项</span><strong><span style="color:#0800; background:rgb(255,255,255)">retry.backoff.ms</span></strong><span style="color:#000000; background:rgb(255,255,255)">，用于在向broker发送数据失败后的重试间隔时间，默认值为100ms</span></p>
<p style="background:rgb(255,255,255)"> </p>
<p style="background:rgb(255,255,255)">接下来看看用于添加数据到缓冲区的append函数<em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span></em><strong><span style="color:#0080; background:rgb(255,255,255)">public </span></strong><span style="color:#000000; background:rgb(255,255,255)">RecordAppendResult append(TopicPartition tp</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><strong><span style="color:#0080; background:rgb(255,255,255)">byte</span></strong><span style="color:#000000; background:rgb(255,255,255)">[] key</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><strong><span style="color:#0080; background:rgb(255,255,255)">byte</span></strong><span style="color:#000000; background:rgb(255,255,255)">[] value</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">Callback callback</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><strong><span style="color:#0080; background:rgb(255,255,255)">long </span></strong><span style="color:#000000; background:rgb(255,255,255)">maxTimeToBlock) </span><strong><span style="color:#0080; background:rgb(255,255,255)">throws </span></strong><span style="color:#000000; background:rgb(255,255,255)">InterruptedException {</span></p>
<p style="background:rgb(255,255,255)"><em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    </span></em><strong><span style="color:#66e7a; background:rgb(255,255,255)">appendsInProgress</span></strong><span style="color:#000000; background:rgb(255,255,255)">.incrementAndGet()</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">try </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">if </span></strong><span style="color:#000000; background:rgb(255,255,255)">(</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">closed</span></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">            </span><strong><span style="color:#0080; background:rgb(255,255,255)">throw new </span></strong><span style="color:#000000; background:rgb(255,255,255)">IllegalStateException(</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">                  </span><strong><span style="color:#0800; background:rgb(255,255,255)">"Cannot send after the producer is closed."</span></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)">首先从当前的batchs集合中得到对应这个partition的RecordBatch的双端队列。</p>
<p style="background:rgb(255,255,255)">如果batchs集合中还不存在partition对应的双端队列时，生成一个ArrayDeque的队列实例，并放入到batchs的集合中。这个函数返回batchs集合中对应这个partition的双端队列实例。<span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><em><span style="color:#808080; background:rgb(255,255,255)">// check if we have an in-progress batch</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">        </span></em><span style="color:#000000; background:rgb(255,255,255)">Deque&lt;RecordBatch&gt; dq = dequeFor(tp)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">synchronized </span></strong><span style="color:#000000; background:rgb(255,255,255)">(dq) {</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">得到这个队列中，最后一个RecordBatch的实例值，在一个ArrayDeque的双端队列中，实例初始化时默认生成16个元素的数组（2的倍数）,如果是addLast是从0开始向后添加，如果是addFirst是从数组尾部向前添加。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">            RecordBatch last = dq.peekLast()</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">            </span><strong><span style="color:#0080; background:rgb(255,255,255)">if </span></strong><span style="color:#000000; background:rgb(255,255,255)">(last != </span><strong><span style="color:#0080; background:rgb(255,255,255)">null</span></strong><span style="color:#000000; background:rgb(255,255,255)">) {</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">如果这个双端队列中，得到了一个RecordBatch的用于存储batch的实例时，表示这个队列中是存在待提交的batch的信息。向这个recordBatch中添加这个kvy-value进去。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">第一次进行partition的消息添加时，这个流程不会被执行。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里向队列中最后一个RecordBatch添加这个kv消息，这个流程被执行时，表示这个RecordBatch一定存在一个大于0的record的记录数，</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">向这个RecordBatch中添加消息的流程：</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">1,检查这个batch是否处于可写的状态，Sender线程未对此batch进行提交时，这个值为true,同时这个buffer中没有写入任何内容时，这个buffer的大小能够放下当前的kv，</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">2,检查这个batch中当前的内存位置加上当前要send进去的kv的大小是否超过了batchSize的大小，</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">3,如果流程执行到这里，表示这个kv能被添加到这个RecordBatch中，向RecordBatch中添加这条消息，并返回这个RecordBatch的FutureRecordMetadata的信息，</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">4,如果当前的RecordBatch没有足够的空间来存储这个kv时，这里返回的future是一个null值。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">                FutureRecordMetadata future = last.tryAppend(key</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">value</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">callback</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">                       </span><strong><span style="color:#66e7a; background:rgb(255,255,255)">time</span></strong><span style="color:#000000; background:rgb(255,255,255)">.milliseconds())</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">如果说future的值不为空，表示这条消息成功添加到这个buffer中，检查这个队列中的RecordBatch的个数是否大于1或者当前的RecordBatch的大小是否已经达到了不能写的情况，如果满足这两种情况中的一种那么生成这个</span><span style="color:#000000; background:rgb(255,255,255)">RecordAppendResult的第二个参数为true,否则为false,第三个参数，由于这个情况下是直接拿到的队列中的一个buffe进行的添加，并不是新创建的RecordBatch，这里的值为false.</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                </span><strong><span style="color:#0080; background:rgb(255,255,255)">if </span></strong><span style="color:#000000; background:rgb(255,255,255)">(future != </span><strong><span style="color:#0080; background:rgb(255,255,255)">null</span></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">                    </span><strong><span style="color:#0080; background:rgb(255,255,255)">return new </span></strong><span style="color:#000000; background:rgb(255,255,255)">RecordAppendResult(future</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">dq.size() &gt; </span><span style="color:#00ff; background:rgb(255,255,255)">1 </span><span style="color:#000000; background:rgb(255,255,255)">|| </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">                         last.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">records</span></strong><span style="color:#000000; background:rgb(255,255,255)">.isFull()</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><strong><span style="color:#0080; background:rgb(255,255,255)">false</span></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">            </span><span style="color:#000000; background:rgb(255,255,255)">}</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">如果对应的partition的双端队列中是第一次添加消息到缓冲区，或者说当前双端队列中最后一个RecordBatch内存储的消息已经达到了batch的大小，需要重新生成一个RecordBatch，计算出这个batch存储的大小。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><em><span style="color:#808080; background:rgb(255,255,255)">// we don't have an in-progress record batch try to allocate a new batch</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">        </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">int </span></strong><span style="color:#000000; background:rgb(255,255,255)">size = Math.</span><em><span style="color:#000000; background:rgb(255,255,255)">max</span></em><span style="color:#000000; background:rgb(255,255,255)">(</span><strong><span style="color:#0080; background:rgb(255,255,255)">this</span></strong><span style="color:#000000; background:rgb(255,255,255)">.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">batchSize</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">Records.</span><strong><em><span style="color:#66e7a; background:rgb(255,255,255)">LOG_OVERHEAD </span></em></strong><span style="color:#000000; background:rgb(255,255,255)">+ </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">                Record.</span><em><span style="color:#000000; background:rgb(255,255,255)">recordSize</span></em><span style="color:#000000; background:rgb(255,255,255)">(key</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">value))</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><strong><em><span style="color:#66e7a; background:rgb(255,255,255)">log</span></em></strong><span style="color:#000000; background:rgb(255,255,255)">.trace(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Allocating a new {} byte message buffer for topic {} partition {}"</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">                    </span><span style="color:#000000; background:rgb(255,255,255)">size</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">tp.topic()</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">tp.partition())</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">从内存池中分配指定大小的一个缓冲区出来,分配流程：</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">1,如果申请的size大小与每个batchSize的大小（可以理解为内存页）相同，同时内存池中刚好有缓存起来的已经分配好的buffer，直接取出这个双端队列中的第一个buffer（采用移出的方式）.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">2,如果当前内存池中可用的内存加上所有分配的内存页的大小(每个内存页是一个batchSize的大小)相加大于或者等于当前要申请的size大小，如果当前可用的内存小于申请的size时，释放掉内存池的双端队列中最后一个缓存起来的已经分配的buffer的容量（这个过程是一个迭代过程，直到释放的内存达到可以存储这个size的大小为结束,每次迭代移出最后一个buffer），把当前的可用内存减去分配的size的大小，并根据这个size生成一个ByteBuffer实例。返回这个ByteBuffer.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">3,这种情况表示当前的缓冲区已经没有足够的大小用来分配buffer,通过while进行迭代，直到可用的内存达到size的大小，每次迭代当前的send线程就wait住，等待Sender线程对buffer进行提交释放后唤醒线程,</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">3,1,在线程被唤醒后，检查如果当前的while的迭代是第一次迭代，同时要分配的size刚好就是内存页的大小，同时内存池中空闲的内存页的buffer刚好还有多于的的，取出内存池中双端队列的第一个buffer.停止迭代，返回这个buffer.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">3,2这种情况下，send函数的线程已经被唤醒，但是要分配的size是一个比batchSize(内存页)大的size时，如果当前的内存池中还有缓存的内存页可用，释放缓存的内存页buffer,直到释放到可分配size的空间(如果无法释放更多的空间时，while重新迭代，线程重新进入到wait的状态，等待提交后的唤醒),这种情况下返回的buffer会根据size大小重新申请一个ByteBuffer并返回，在能够分配可用大小的内存空间后，同时当前内存池中可用的内存大于0,或者说内存池还有被缓存起来的内存页buffer,唤醒下一个等待线程。</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><span style="color:#000000; background:rgb(255,255,255)">ByteBuffer buffer = </span><strong><span style="color:#66e7a; background:rgb(255,255,255)">free</span></strong><span style="color:#000000; background:rgb(255,255,255)">.allocate(size</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">maxTimeToBlock)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">synchronized </span></strong><span style="color:#000000; background:rgb(255,255,255)">(dq) {</span><em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">            </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">if </span></strong><span style="color:#000000; background:rgb(255,255,255)">(</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">closed</span></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">                </span><strong><span style="color:#0080; background:rgb(255,255,255)">throw new </span></strong><span style="color:#000000; background:rgb(255,255,255)">IllegalStateException(</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">                        </span><strong><span style="color:#0800; background:rgb(255,255,255)">"Cannot send after the producer is closed."</span></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">如果这个双端队列中，得到了一个RecordBatch的用于存储batch的实例时，表示这个队列中是存在待提交的batch的信息。向这个recordBatch中添加这个kvy-value进去。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">第一次进行partition的消息添加时，这个流程不会被执行。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里向队列中最后一个RecordBatch添加这个kv消息，这个流程被执行时，表示这个RecordBatch一定存在一个大于0的record的记录数，</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">向这个RecordBatch中添加消息的流程：</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">1,检查这个batch是否处于可写的状态，Sender线程未对此batch进行提交时，这个值为true,同时这个buffer中没有写入任何内容时，这个buffer的大小能够放下当前的kv，</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">2,检查这个batch中当前的内存位置加上当前要send进去的kv的大小是否超过了batchSize的大小，</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">3,如果流程执行到这里，表示这个kv能被添加到这个RecordBatch中，向RecordBatch中添加这条消息，并返回这个RecordBatch的FutureRecordMetadata的信息，</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">4,如果当前的RecordBatch没有足够的空间来存储这个kv时，这里返回的future是一个nul值。</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">            </span><span style="color:#000000; background:rgb(255,255,255)">RecordBatch last = dq.peekLast()</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">            </span><strong><span style="color:#0080; background:rgb(255,255,255)">if </span></strong><span style="color:#000000; background:rgb(255,255,255)">(last != </span><strong><span style="color:#0080; background:rgb(255,255,255)">null</span></strong><span style="color:#000000; background:rgb(255,255,255)">) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">                FutureRecordMetadata future = last.tryAppend(key</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">value</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">callback</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">                        </span><strong><span style="color:#66e7a; background:rgb(255,255,255)">time</span></strong><span style="color:#000000; background:rgb(255,255,255)">.milliseconds())</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">下面的future不为空的情况，通常情况下应该不会被发生，如果发生了，把当前申请的buffer释放掉。并把这个buffer放到这个内存池的缓存队列中,用于下一次使用时，不需要重复申请内存。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">如果说future的值不为空，表示这条消息成功添加到这个buffer中，检查这个队列中的RecordBatch的个数是否大于1或者当前的RecordBatch的大小是否已经达到了不能写的情况，如果满足这两种情况中的一种那么生成这个</span><span style="color:#000000; background:rgb(255,255,255)">RecordAppendResult的第二个参数为true,否则为false,第三个参数，由于这个情况下是直接拿到的队列中的一个buffe进行的添加，并不是新创建的RecordBatch，这里的值为false.</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                </span><strong><span style="color:#0080; background:rgb(255,255,255)">if </span></strong><span style="color:#000000; background:rgb(255,255,255)">(future != </span><strong><span style="color:#0080; background:rgb(255,255,255)">null</span></strong><span style="color:#000000; background:rgb(255,255,255)">) {</span><em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">                    </span></em><strong><span style="color:#66e7a; background:rgb(255,255,255)">free</span></strong><span style="color:#000000; background:rgb(255,255,255)">.deallocate(buffer)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                    </span><strong><span style="color:#0080; background:rgb(255,255,255)">return new </span></strong><span style="color:#000000; background:rgb(255,255,255)">RecordAppendResult(future</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">dq.size() &gt; </span><span style="color:#00ff; background:rgb(255,255,255)">1 </span><span style="color:#000000; background:rgb(255,255,255)">|| </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">                        last.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">records</span></strong><span style="color:#000000; background:rgb(255,255,255)">.isFull()</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><strong><span style="color:#0080; background:rgb(255,255,255)">false</span></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                </span><span style="color:#000000; background:rgb(255,255,255)">}</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">            }</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">流程执行到这里，表示当前的partition中对应的双端队列的最后一个RecordBatch不能够存储这个kv的大小，或者说当前的队列中不存在RecordBatch,新生成一个Records用于存储要send的消息集合，并生成一个RecordBatch来归类这个records,把要send的kv添加到这个records中,</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">并生成一个</span><span style="color:#000000; background:rgb(228,228,255)">FutureRecordMetadata</span><span style="color:#000000; background:rgb(255,255,255)">实例返回，</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这个实例中引用一个对应此RecordBatch中的</span><span style="color:#000000; background:rgb(228,228,255)">ProduceRequestResult</span><span style="color:#000000; background:rgb(255,255,255)">实例，这个实例用于在Sender线程中用于控制batch是否被提交成功的处理，第二个参数是表示当前的RecordBatch中已经存储的消息条数，在这里通过RecordBatch添加消息时(tryAppend函数)，在这个流程的处理中一定会返回一个FutureRecordMetadata的实例，因为这是第一次添加，RecordBatch中的buffer被定义成刚好能够存储这个kv或者说这个buffer不光能够存储这一个kv.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">            MemoryRecords records = MemoryRecords.</span><em><span style="color:#000000; background:rgb(255,255,255)">emptyRecords</span></em><span style="color:#000000; background:rgb(255,255,255)">(buffer</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><strong><span style="color:#66e7a; background:rgb(255,255,255)">compression</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">                  </span><strong><span style="color:#0080; background:rgb(255,255,255)">this</span></strong><span style="color:#000000; background:rgb(255,255,255)">.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">batchSize</span></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">            </span><span style="color:#000000; background:rgb(255,255,255)">RecordBatch batch = </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">RecordBatch(tp</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">records</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><strong><span style="color:#66e7a; background:rgb(255,255,255)">time</span></strong><span style="color:#000000; background:rgb(255,255,255)">.milliseconds())</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">            </span><span style="color:#000000; background:rgb(255,255,255)">FutureRecordMetadata future = Utils.</span><em><span style="color:#000000; background:rgb(255,255,255)">notNull</span></em><span style="color:#000000; background:rgb(255,255,255)">(batch.tryAppend(key</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">value</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">                  </span><span style="color:#000000; background:rgb(255,255,255)">callback</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><strong><span style="color:#66e7a; background:rgb(255,255,255)">time</span></strong><span style="color:#000000; background:rgb(255,255,255)">.milliseconds()))</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">最后，把这个新生成的batch添加到队列中。</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">            </span><span style="color:#000000; background:rgb(255,255,255)">dq.addLast(batch)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">            </span><strong><span style="color:#66e7a; background:rgb(255,255,255)">incomplete</span></strong><span style="color:#000000; background:rgb(255,255,255)">.add(batch)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">生成要返回的信息，这个信息中包含有future用于控制提交是否成功，第二个参数1:如果说队列中已经有超过一个的batch时，表示第一个batch已经满了，或者说第一个的batch已经不能存储新send进来的kv，又新创建了一个batch,2:新生成的batch的records中已经存储了大于或等于batchSize的大小的数据，</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">==&gt;如果说这个值是true时，表示这个参数上面的两种情况最少满足一种。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">第三个参数由于这里是新创建的一个RecordBatch，因为为true.</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">            </span><strong><span style="color:#0080; background:rgb(255,255,255)">return new </span></strong><span style="color:#000000; background:rgb(255,255,255)">RecordAppendResult(future</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">dq.size() &gt; </span><span style="color:#00ff; background:rgb(255,255,255)">1 </span><span style="color:#000000; background:rgb(255,255,255)">|| </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">                  batch.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">records</span></strong><span style="color:#000000; background:rgb(255,255,255)">.isFull()</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><strong><span style="color:#0080; background:rgb(255,255,255)">true</span></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><span style="color:#000000; background:rgb(255,255,255)">}</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    } </span><strong><span style="color:#0080; background:rgb(255,255,255)">finally </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><strong><span style="color:#66e7a; background:rgb(255,255,255)">appendsInProgress</span></strong><span style="color:#000000; background:rgb(255,255,255)">.decrementAndGet()</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">    </span><span style="color:#000000; background:rgb(255,255,255)">}</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<h4><strong>Sender<span style="font-family:SimSun">线程处理数据的发送</span></strong></h4>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">线程的run函数：</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><em><span style="color:#808080; background:rgb(255,255,255)">/**</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)"> * The main run loop for the sender thread</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)"> */</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span></em><strong><span style="color:#0080; background:rgb(255,255,255)">public void </span></strong><span style="color:#000000; background:rgb(255,255,255)">run() {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><em><span style="color:#66e7a; background:rgb(255,255,255)">log</span></em></strong><span style="color:#000000; background:rgb(255,255,255)">.debug(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Starting Kafka producer I/O thread."</span></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">KafkaProducer实例生成时，KafkaThread线程启动后，会执行Sender实例中的run函数，</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">    </span><em><span style="color:#808080; background:rgb(255,255,255)">// main loop, runs until close is called</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">while </span></strong><span style="color:#000000; background:rgb(255,255,255)">(</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">running</span></strong><span style="color:#000000; background:rgb(255,255,255)">) {</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">如果producer没有执行shutdown操作前，run函数会一直在这个地方进行执行，不断的执行run函数传入当前的执行时的系统时间。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">try </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">            run(</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">time</span></strong><span style="color:#000000; background:rgb(255,255,255)">.milliseconds())</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><span style="color:#000000; background:rgb(255,255,255)">} </span><strong><span style="color:#0080; background:rgb(255,255,255)">catch </span></strong><span style="color:#000000; background:rgb(255,255,255)">(Exception e) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">            </span><strong><em><span style="color:#66e7a; background:rgb(255,255,255)">log</span></em></strong><span style="color:#000000; background:rgb(255,255,255)">.error(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Uncaught error in kafka producer I/O thread: "</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">e)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><span style="color:#000000; background:rgb(255,255,255)">}</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">如果流程执行到这里，说明produce已经执行了shutdown操作，准备执行停止producer的操作。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><em><span style="color:#66e7a; background:rgb(255,255,255)">log</span></em></strong><span style="color:#000000; background:rgb(255,255,255)">.debug(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Beginning shutdown of Kafka producer I/O thread,</span></strong></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0800; background:rgb(255,255,255)">              sending remaining records."</span></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">    </span><em><span style="color:#808080; background:rgb(255,255,255)">// okay we stopped accepting requests but there may still be</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    // requests in the accumulator or waiting for acknowledgment,</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    // wait until these are completed.</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">while </span></strong><span style="color:#000000; background:rgb(255,255,255)">(!</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">forceClose </span></strong><span style="color:#000000; background:rgb(255,255,255)">&amp;&amp; (</span><strong><span style="color:#0080; background:rgb(255,255,255)">this</span></strong><span style="color:#000000; background:rgb(255,255,255)">.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">accumulator</span></strong><span style="color:#000000; background:rgb(255,255,255)">.hasUnsent() || </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">                </span><strong><span style="color:#0080; background:rgb(255,255,255)">this</span></strong><span style="color:#000000; background:rgb(255,255,255)">.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">client</span></strong><span style="color:#000000; background:rgb(255,255,255)">.inFlightRequestCount() &gt; </span><span style="color:#00ff; background:rgb(255,255,255)">0</span><span style="color:#000000; background:rgb(255,255,255)">)) {</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">如果当前的accumulator的缓冲区还有数据没有被处理，同时networkClient中还有正在进行的请求,迭代执行run函数，直到数据被全部发送完成。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">try </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">            run(</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">time</span></strong><span style="color:#000000; background:rgb(255,255,255)">.milliseconds())</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><span style="color:#000000; background:rgb(255,255,255)">} </span><strong><span style="color:#0080; background:rgb(255,255,255)">catch </span></strong><span style="color:#000000; background:rgb(255,255,255)">(Exception e) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">            </span><strong><em><span style="color:#66e7a; background:rgb(255,255,255)">log</span></em></strong><span style="color:#000000; background:rgb(255,255,255)">.error(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Uncaught error in kafka producer I/O thread: "</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">e)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><span style="color:#000000; background:rgb(255,255,255)">}</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">if </span></strong><span style="color:#000000; background:rgb(255,255,255)">(</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">forceClose</span></strong><span style="color:#000000; background:rgb(255,255,255)">) {</span><em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">        </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">this</span></strong><span style="color:#000000; background:rgb(255,255,255)">.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">accumulator</span></strong><span style="color:#000000; background:rgb(255,255,255)">.abortIncompleteBatches()</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">    </span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">关闭网络连接。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">try </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">this</span></strong><span style="color:#000000; background:rgb(255,255,255)">.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">client</span></strong><span style="color:#000000; background:rgb(255,255,255)">.close()</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">    </span><span style="color:#000000; background:rgb(255,255,255)">} </span><strong><span style="color:#0080; background:rgb(255,255,255)">catch </span></strong><span style="color:#000000; background:rgb(255,255,255)">(Exception e) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><strong><em><span style="color:#66e7a; background:rgb(255,255,255)">log</span></em></strong><span style="color:#000000; background:rgb(255,255,255)">.error(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Failed to close network client"</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">e)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">    </span><span style="color:#000000; background:rgb(255,255,255)">}</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><em><span style="color:#66e7a; background:rgb(255,255,255)">log</span></em></strong><span style="color:#000000; background:rgb(255,255,255)">.debug(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Shutdown of Kafka producer I/O thread has completed."</span></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">执行缓冲区数据的发送操作的函数：</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><em><span style="color:#808080; background:rgb(255,255,255)">/**</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)"> * Run a single iteration of sending</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)"> * </span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)"> * </span></em><strong><em><span style="color:#808080; background:rgb(255,255,255)">@param </span><span style="color:#3d3d3d; background:rgb(255,255,255)">now</span><span style="color:#3d3d3d; background:rgb(255,255,255)"><br>
</span><span style="color:#3d3d3d; background:rgb(255,255,255)"> </span></em></strong><em><span style="color:#808080; background:rgb(255,255,255)">*            The current POSIX time in milliseconds</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)"> */</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span></em><strong><span style="color:#0080; background:rgb(255,255,255)">public void </span></strong><span style="color:#000000; background:rgb(255,255,255)">run(</span><strong><span style="color:#0080; background:rgb(255,255,255)">long </span></strong><span style="color:#000000; background:rgb(255,255,255)">now) {</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">得到当前cluster中所有的broker节点的连接信息。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    Cluster cluster = </span><strong><span style="color:#66e7a; background:rgb(255,255,255)">metadata</span></strong><span style="color:#000000; background:rgb(255,255,255)">.fetch()</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">这里从缓冲区中的所有的partition的batch中进行计算，取出已经准备好的需要进行发送的broker的节点集合，具体流程：</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">1,对缓冲区中batchs集合进行迭代，取出每个partition对应的双端队列(存储数据缓存的batch),</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">2,如果partition在cluster对应的</span><span style="color:#000000; background:rgb(228,228,255)">partitionsByTopicPartition</span><span style="color:#cc7832; background:rgb(255,255,255)">集合中存在，表示这个topic的metadata已经被加载过来，得到这个partition的leader,</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">3,如果partition的leader不存在，</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">       设置这个函数返回</span><span style="color:#000000; background:rgb(255,255,255)">ReadyCheckResult</span><span style="color:#cc7832; background:rgb(255,255,255)">类型的</span><span style="color:#000000; background:rgb(228,228,255)">unknownLeadersExist</span><span style="color:#cc7832; background:rgb(255,255,255)">值为true.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">4,如果迭代的partition的leader存在，取出这个partition的队列中的第一个batch，如果这个batch存在，表示有缓存的数据，</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">4,1检查这个batch是否已经被提交过，重试次数大于0,</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">      同时上一次重试的时间已经大于了</span><strong><span style="color:#0800; background:rgb(255,255,255)">retry.backoff.ms(默认100ms)</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">配置的等待时间，</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">     把这个partition的leader添加到返回的</span><span style="color:#000000; background:rgb(255,255,255)">ReadyCheckResult</span><span style="color:#cc7832; background:rgb(255,255,255)">实例中的</span><span style="color:#000000; background:rgb(255,228,255)">readyNodes</span><span style="color:#cc7832; background:rgb(255,255,255)">集合中。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">         （</span><span style="color:#000000; background:rgb(255,228,255)">readyNodes是一个</span><span style="color:#cc7832; background:rgb(255,255,255)">set集合）</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">4,2如果这个partition对应的队列中已经缓存有超过一个以上的batch，</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">或者说有batch的缓存大小已经达到了batchSize的配置大小时,</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">把这个leader添加到readyNodes中。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">4,3如果这个partition的队列中有batch已经达到了</span><strong><span style="color:#0800; background:rgb(255,255,255)">linger.ms（默认值0）</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">配置的等待时间，</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">    把这个leader添加到readyNodes中。</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">5,这个返回的</span><span style="color:#000000; background:rgb(255,255,255)">ReadyCheckResult</span><span style="color:#cc7832; background:rgb(255,255,255)">实例中，属性</span><span style="color:#000000; background:rgb(255,228,255)">nextReadyCheckDelayMs</span><span style="color:#cc7832; background:rgb(255,255,255)">的值，表示要delay到的下一次时间，也就是下一次执行的wait时间，如果当前的所有的batch中没有超过等待时间时（</span><strong><span style="color:#0800; background:rgb(255,255,255)">retry.backoff.ms/linger.ms</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">），也就是当前执行时间与等待时间的差值。</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">    </span><em><span style="color:#808080; background:rgb(255,255,255)">// get the list of partitions with data ready to send</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    </span></em><span style="color:#000000; background:rgb(255,255,255)">RecordAccumulator.ReadyCheckResult result = </span><strong><span style="color:#0080; background:rgb(255,255,255)">this</span></strong><span style="color:#000000; background:rgb(255,255,255)">.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">accumulator</span></strong><span style="color:#000000; background:rgb(255,255,255)">.ready(cluster</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">               </span><span style="color:#000000; background:rgb(255,255,255)">now)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)"> 如果上面的执行返回的结果中</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">unknownLeadersExist</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">属性值为true，表示topic的metadata还没有被加载过来（这个情况一般不会发生），标记metadata需要被更新。</span><em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">if </span></strong><span style="color:#000000; background:rgb(255,255,255)">(result.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">unknownLeadersExist</span></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">this</span></strong><span style="color:#000000; background:rgb(255,255,255)">.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">metadata</span></strong><span style="color:#000000; background:rgb(255,255,255)">.requestUpdate()</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">对返回的结果集中</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">readyNodes</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">集合中准备好的节点进行迭代，这个while的迭代中主要执行如下的流程：</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">1,通过NetworkClient检查这个node是否已经被连接，同时metadata还没有达到需要更新的时间，同时连接队列中个数数小于</span><strong><span style="color:#0800; background:rgb(255,255,255)">max.in.flight.requests.per.connection</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">配置的连接个数。那么这个node会被保留，</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">2,如果当前迭代的node的连接已经超时，或者metadata需要被更新，或者node对应的broker还没有被创建连接，移出这个node.</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">    </span><em><span style="color:#808080; background:rgb(255,255,255)">// remove any nodes we aren't ready to send to</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    </span></em><span style="color:#000000; background:rgb(255,255,255)">Iterator&lt;Node&gt; iter = result.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">readyNodes</span></strong><span style="color:#000000; background:rgb(255,255,255)">.iterator()</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">long </span></strong><span style="color:#000000; background:rgb(255,255,255)">notReadyTimeout = Long.</span><strong><em><span style="color:#66e7a; background:rgb(255,255,255)">MAX_VALUE</span></em></strong><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">while </span></strong><span style="color:#000000; background:rgb(255,255,255)">(iter.hasNext()) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        Node node = iter.next()</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">if </span></strong><span style="color:#000000; background:rgb(255,255,255)">(!</span><strong><span style="color:#0080; background:rgb(255,255,255)">this</span></strong><span style="color:#000000; background:rgb(255,255,255)">.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">client</span></strong><span style="color:#000000; background:rgb(255,255,255)">.ready(node</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">now)) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">            iter.remove()</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">如果connection是已经被关闭掉的连接，</span><strong><span style="color:#0080; background:rgb(255,255,255)">this</span></strong><span style="color:#000000; background:rgb(255,255,255)">.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">client</span></strong><span style="color:#000000; background:rgb(255,255,255)">.connectionDelay(node</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">now)</span><span style="color:#cc7832; background:rgb(255,255,255)">返回的timeout是</span><strong><span style="color:#0800; background:rgb(255,255,255)">reconnect.backoff.ms(50ms)</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">配置的值。</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">            </span><span style="color:#000000; background:rgb(255,255,255)">notReadyTimeout = Math.</span><em><span style="color:#000000; background:rgb(255,255,255)">min</span></em><span style="color:#000000; background:rgb(255,255,255)">(notReadyTimeout</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">               </span><strong><span style="color:#0080; background:rgb(255,255,255)">this</span></strong><span style="color:#000000; background:rgb(255,255,255)">.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">client</span></strong><span style="color:#000000; background:rgb(255,255,255)">.connectionDelay(node</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">now))</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><span style="color:#000000; background:rgb(255,255,255)">}</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    }</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">流程执行到这里时，result中的</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">readyNodes</span></strong><span style="color:#000000; background:rgb(255,255,255)">集合中包含的是已经与broker创建有连接的node的信息。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里根据可以发起连接的broker的nodes集合，迭代每个node中的所有的partition的队列，</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">取出这个队列中的第一个recordBatch（如果这个batch已经发送失败过一次，同时还没到重试的时间间隔，跳过这个batch）,关闭这个batch（表示这个batch不能在写入）同时把这个batch添加到要返回的map集合中，这个迭代的过程直到找完所有的node中对应的partition中队列的第一个元素,</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">或者达到</span><strong><span style="color:#0800; background:rgb(255,255,255)">max.request.size</span></strong><span style="color:#000000; background:rgb(255,255,255)">配置的最大的请求的消息字节数的大小为结束。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><em><span style="color:#808080; background:rgb(255,255,255)">// create produce requests</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    </span></em><span style="color:#000000; background:rgb(255,255,255)">Map&lt;Integer</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">List&lt;RecordBatch&gt;&gt; batches = </span><strong><span style="color:#0080; background:rgb(255,255,255)">this</span></strong><span style="color:#000000; background:rgb(255,255,255)">.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">accumulator</span></strong><span style="color:#000000; background:rgb(255,255,255)">.drain(cluster</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                                                                     </span><span style="color:#000000; background:rgb(255,255,255)">result.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">readyNodes</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                                                                     </span><strong><span style="color:#0080; background:rgb(255,255,255)">this</span></strong><span style="color:#000000; background:rgb(255,255,255)">.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">maxRequestSize</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                                                                     </span><span style="color:#000000; background:rgb(255,255,255)">now)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">这里根据</span><strong><span style="color:#0800; background:rgb(255,255,255)">request.timeout.ms(默认30秒)</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">配置的请求超时时间，得到缓冲区中所有请求超时的batch的集合（通过batch的最后一次写入消息的时间来判断是否达到了超时时间），如果发现batch已经起时，从缓冲区中移出这个batch,并回收这个batch对应的buffer.</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">    </span><span style="color:#000000; background:rgb(255,255,255)">List&lt;RecordBatch&gt; expiredBatches = </span><strong><span style="color:#0080; background:rgb(255,255,255)">this</span></strong><span style="color:#000000; background:rgb(255,255,255)">.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">accumulator</span></strong><span style="color:#000000; background:rgb(255,255,255)">.abortExpiredBatches(</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">             </span><strong><span style="color:#0080; background:rgb(255,255,255)">this</span></strong><span style="color:#000000; background:rgb(255,255,255)">.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">requestTimeout</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">cluster</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">now)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">    </span><em><span style="color:#808080; background:rgb(255,255,255)">// update sensors</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">for </span></strong><span style="color:#000000; background:rgb(255,255,255)">(RecordBatch expiredBatch : expiredBatches)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">this</span></strong><span style="color:#000000; background:rgb(255,255,255)">.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">sensors</span></strong><span style="color:#000000; background:rgb(255,255,255)">.recordErrors(expiredBatch.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">topicPartition</span></strong><span style="color:#000000; background:rgb(255,255,255)">.topic()</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">                </span><span style="color:#000000; background:rgb(255,255,255)">expiredBatch.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">recordCount</span></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">    </span><strong><span style="color:#66e7a; background:rgb(255,255,255)">sensors</span></strong><span style="color:#000000; background:rgb(255,255,255)">.updateProduceRequestMetrics(batches)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">根据每个broker对应的partition的batch的消息集合，生成对应的</span><span style="color:#000000; background:rgb(228,228,255)">ProduceRequest</span><span style="color:#cc7832; background:rgb(255,255,255)">请求，</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">这个请求每一个broker生成一个请求，这个请求中包含了这个broker中所有的partition的buffer的集合。</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">    </span><span style="color:#000000; background:rgb(255,255,255)">List&lt;ClientRequest&gt; requests = createProduceRequests(batches</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">now)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span></p>
<p style="background:rgb(255,255,255)"><em><span style="color:#808080; background:rgb(255,255,255)"> </span></em></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里计算出下一次执行需要的等待间隔，根据</span><strong><span style="color:#0800; background:rgb(255,255,255)">retry.backoff.ms/linger.ms</span></strong><span style="color:#000000; background:rgb(255,255,255)">配置的时间，如果说这次需要进行提交数据到指定的broker的readyNodes的集合大于0,设置这个间隔时间为0.</span><em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">long </span></strong><span style="color:#000000; background:rgb(255,255,255)">pollTimeout = Math.</span><em><span style="color:#000000; background:rgb(255,255,255)">min</span></em><span style="color:#000000; background:rgb(255,255,255)">(result.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">nextReadyCheckDelayMs</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">notReadyTimeout)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">if </span></strong><span style="color:#000000; background:rgb(255,255,255)">(result.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">readyNodes</span></strong><span style="color:#000000; background:rgb(255,255,255)">.size() &gt; </span><span style="color:#00ff; background:rgb(255,255,255)">0</span><span style="color:#000000; background:rgb(255,255,255)">) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><strong><em><span style="color:#66e7a; background:rgb(255,255,255)">log</span></em></strong><span style="color:#000000; background:rgb(255,255,255)">.trace(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Nodes with data ready to send: {}"</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">result.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">readyNodes</span></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><strong><em><span style="color:#66e7a; background:rgb(255,255,255)">log</span></em></strong><span style="color:#000000; background:rgb(255,255,255)">.trace(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Created {} produce requests: {}"</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">requests.size()</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">requests)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">        </span><span style="color:#000000; background:rgb(255,255,255)">pollTimeout = </span><span style="color:#00ff; background:rgb(255,255,255)">0</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">    </span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">迭代每一个broker的Produce的请求，通过NetworkClient向每一个broker发送对应的请求。</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">for </span></strong><span style="color:#000000; background:rgb(255,255,255)">(ClientRequest request : requests)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><strong><span style="color:#66e7a; background:rgb(255,255,255)">client</span></strong><span style="color:#000000; background:rgb(255,255,255)">.send(request</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">now)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">检查是否需要更新metadata,如果需要，重新向broker发送metadata的请求，并更新metadata.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">接收请求的响应信息，并调用对应的callback函数。</span></p>
<p><span style="color:#000000; background:rgb(255,255,255)">检查连接中是否有超过指定的时间</span><strong><span style="color:#0800; background:rgb(255,255,255)">connections.max.idle.ms（默认9分钟）</span></strong><span style="color:#000000; background:rgb(255,255,255)">没有活动的broker连接，如果有，关闭这个连接。</span><em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">this</span></strong><span style="color:#000000; background:rgb(255,255,255)">.</span><strong><span style="color:#66e7a; background:rgb(255,255,255)">client</span></strong><span style="color:#000000; background:rgb(255,255,255)">.poll(pollTimeout</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">now)</span><span style="color:#cc7832; background:rgb(255,255,255)">;</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
            </div>
                </div>