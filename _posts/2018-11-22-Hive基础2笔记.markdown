---
layout:     post
title:      Hive基础2笔记
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
=================================================================================<br>
复习<br>
1、Hive是什么？<br><span></span>Hive是一个类SQL能够操作hdfs数据的数据仓库基础框架<br><span></span>Hive是一个SQL的解析引擎，能够将HQL翻译转化为MR在hadoop中执行<br>
2、Hive系统架构<br><span></span>用户结构<br><span></span>Shell CLI<br><span></span>Java API<br><span></span>Web GUI<br><span></span>metastore<br><span></span>Hive元数据，主要保存的是Hive数据库的信息，表的信息<br><span></span>driver，驱动，主要做的就是hql的翻译、编译、调度、执行<br>
3、Hive的数据结构<br><span></span>Hive的数据存储是基于hadoop hdfs的<br><span></span>本身没有存储结构<br><span></span>Hive有自己数据结构：数据库、表、视图、索引<br>
4、Hive的元数据<br><span></span>metastore，默认内置的存储引擎是derby，也可以支持mysql，<br><span></span>derby他每次只能支持一个回话，所以通常使用mysql作为外置的存储引擎<br>
5、hive的安装<br><span></span>linux下mysql的安装<br><span></span>hive的安装<br>
6、hwi的访问<br><span></span>制作war包<br><span></span>修改配置文件<br><span></span>访问<br>
=================================================================================<br><strong>Hive的日志信息相关</strong><br>
1、如何去掉hive启动时候的日志信息<br><span></span>启动时发现<br><span></span>SLF4J: Found binding in [jar:file:/usr/local/hive-0.14.0/lib/hive-jdbc-0.14.0-standalone.jar<br><span></span>解决方案：<br><span></span>hive&gt; !mv /usr/local/hive-0.14.0/lib/hive-jdbc-0.14.0-standalone.jar /usr/local/hive-0.14.0/lib/hive-jdbc-0.14.0-standalone.jar.bak;<br>
2、hive的日志<br><span></span>1°、备份日志文件<br><span></span>[root@hive conf]$ cp hive-exec-log4j.properties.template hive-exec-log4j.properties<br><span></span>[root@hive conf]$ cp hive-log4j.properties.template hive-log4j.properties<br><span></span>2°、查看日志配置文件<br><span></span>hive.log.threshold=ALL<br><span></span>hive.root.logger=INFO,DRFA<br><span></span>hive.log.dir=${java.io.tmpdir}/${user.name}<br><span></span>hive.log.file=hive.log<br><span></span>通过SystemInfo.java可以知道<br><span></span>${java.io.tmpdir}=/tmp<br><span></span>${user.name}=root<br>
=================================================================================<br><strong>Hive的数据类型</strong><br><span></span>int、boolean、date、array、map、struct等等。<br><span></span>Hive的数据库、表，及其数据库、表与hdfs、metastore中的对应信息<br><strong>1、Hive数据库，DDL</strong><br><span></span>1°、查看数据库列表<br><span></span>hive&gt; show databases;<br><span></span>2°、使用db<br><span></span>hive&gt; use dbName;<br><span></span>eg.<br><span></span>hive&gt; use default;<br><span></span>3°、创建db<br><span></span>hive&gt; create database dbName;<br><span></span>eg.<br><span></span>hive&gt; create database mydb1;<br><span></span>4°、删除<br><span></span>hive&gt; drop database dbName;<br><span></span>eg.<br><span></span>hive&gt; drop database mydb1;<br><span></span>5°、数据库在hdfs上面的位置<br><span></span>默认数据库在hdfs上面的位置<br><span></span> &lt;property&gt;<br><span></span>&lt;name&gt;hive.metastore.warehouse.dir&lt;/name&gt;<br><span></span>&lt;value&gt;/user/hive/warehouse&lt;/value&gt;<br><span></span>&lt;description&gt;location of default database for the warehouse&lt;/description&gt;<br><span></span> &lt;/property&gt;<br><span></span>也可以通过hive&gt; set hive.metastore.warehouse.dir;来获取<br><span></span>在metastore中查看<br><span></span>有在表DBS中可以看到default的hdfs_uri：hdfs://hive.teach.crxy.cn:9000/user/hive/warehouse<br><span></span>普通的数据库放在了/user/hive/warehouse下面，在metastore中查看==》<br><span></span>我们创建的mydb1的hdfs_uri：hdfs://hive.teach.crxy.cn:9000/user/hive/warehouse/mydb1.db<br><span></span>创建制定存储位置的数据库<br><span></span>hive&gt; create database mydb2 location hdfs_uri;<br><span></span>===》<br><span></span>我们删除，修改hive数据库的定义的时候，对应的hdfs相应的目录和metastore中的相应的列就发生了变化，是同步的。<br><strong>2、hive中的表</strong><br><span></span>设置查看表的头信息<br><span></span>hive&gt; set hive.cli.print.header;<br><span></span>hive.cli.print.header=false<br><span></span>hive&gt; set hive.cli.print.header=true;<br><span></span>1°、表的DDL<br><span></span>查看表<br><span></span>hive&gt; show tables;<br><span></span>创建表<br><span></span>hive&gt; create table t1(id int);<br><span></span>查看表结构<br><span></span>hive&gt; desc [extended] t1;<br><span></span>extended是可选的，是扩展的表的信息<br><span></span>查看表的创建语句<br><span></span>hive&gt; show create table t1;<br><span></span>LOCATION<br><span></span>'hdfs://hive.teach.crxy.cn:9000/user/hive/warehouse/t1'<br><span></span>说了创建的表在hdfs中的位置<br><span></span>在metastore中查看<br><span></span>在表TBLS中有创建的表的信息<br><span></span>删除表<br><span></span>hive&gt; drop table t1;<br><span></span>重命名表的名称<br><span></span>hive&gt; alter table t1 rename to t1_ddl;<br><span></span>修改表中的某一列<br><span></span>hive&gt; alter table t1_ddl change id t_id int;<br><span></span>增加列<br><span></span>mysql:alter table add column colname coltype;<br><span></span>hive&gt; alter table add columns (colname coltype...);可以增加多列<br><span></span>hive&gt; alter table t1_ddl add columns(name string comment 'name', age int); <br><span></span>替换整个表列<br><span></span>hive&gt; alter table t1_ddl replace columns(name string comment 'name', age int);<br><span></span>移动某一列的位置<br><span></span>将某一列放在最前面<br><span></span>hive&gt; alter table t1_ddl add columns(id int);（增加原有的数据）<br><span></span>hive&gt; alter table t1_ddl change id id int first;<br><span></span>将某一列移动到另外一列的后面或前面<br><span></span>hive&gt; alter table t1_ddl change age age int after id;（将age放在id的后面或name的前面）<br><span></span>2°、hive加载数据<br><span></span>一）、使用hive命令load data<br><span></span>hive&gt; alter table t1_ddl replace columns(id int);<br><span></span>hive&gt; alter table t1_ddl rename to t1;  <br><span></span>hive&gt; load data local inpath 'data/t1' into table t1;<br><span></span>查看表中的数据<br><span></span>hive&gt; select * from t1;<br><span></span>二）、使用hadoop fs命令<br><span></span>把数据直接放到hdfs中hive对应的目录下面，hive表会不会感知到呢？<br><span></span>hive&gt; dfs -put data/t1 /user/hive/warehouse/t1/t1_1; <br><span></span>这样hive也是可以感知到加载上来的数据的。<br><span></span>3°、数据加载的模式及其hive表列的分隔符<br><span></span>create table t2(<br><span></span>id int comment "ID",<br><span></span>name string comment "name",<br><span></span>birthday date comment 'birthday',<br><span></span>online boolean comment "is online"<br><span></span>);<br><span></span>load data local inpath 'data/t2' into table t2;<br><span></span>Hive有默认的行列分隔符<br><span></span>行分隔符和linux下面的行分隔符一直都是'\n'<br><span></span>列分隔符是八进制的\001,是不可见的ASCII，怎么输入呢ctrl+v ctrl+a<br><span></span>创建表的时候如何制定行列的分隔符呢？<br><span></span>create table t2_1(<br><span></span>id int comment "ID",<br><span></span>name string comment "name",<br><span></span>birthday date comment 'birthday',<br><span></span>online boolean comment "is online"<br><span></span>) comment "test table's seperator"<br><span></span>row format delimited<br><span></span>fields terminated by '\t'<br><span></span>lines terminated by '\n';<br><span></span>load data local inpath 'data/t2_1' into table t2;<br><span></span>====》有问题，读取错误数据为NULL<br><span></span>====》两种数据的加载模式<br><span></span>读模式<br><span></span>数据库加载数据的时候不进行数据的合法性校验，在查询数据的时候将不合法的数据显示为NULL，<br><span></span>好处：加载速度快，适合大数据的加载。<br><span></span>写模式<br><span></span>数据库加载数据的时候要进行数据的合法性校验，在数据库里面的数据都是合法的<br><span></span>好处：适合进行查询，不会担心有不合法的数据存在。<br><span></span>我们的Hive采用的是读模式，加载数据的时候不进行数据的合法性校验，在查询数据的时候将不合法的数据显示为NULL。<br><p>=================================================================================</p>
<p><strong>hive复合数据类型</strong><br><span></span>array、map、struct<br><span></span>array<br><span></span>有一群学生，id，name，hobby(多个)<br><span></span>create table t3_arr(<br><span></span>id int,<br><span></span>name string,<br><span></span>hobyy array&lt;string&gt;<br><span></span>) row format delimited<br><span></span> fields terminated by '\t';<br><span></span>hive&gt; load data local inpath 'data/t3' into table t3_arr;<br><span></span>查看数组中的某一个元素<br><span></span>hive&gt; select id, hobyy[1] from t3_arr;<br><span></span>设置数组中的分隔符<br><span></span>它的默认分隔符为\002，如何输入ctrl+v ctrl+b<br><span></span>create table t3_arr_1(<br><span></span>id int,<br><span></span>name string,<br><span></span>hobyy array&lt;string&gt;<br><span></span>) row format delimited<br><span></span> fields terminated by '\t'<br><span></span> collection items terminted by ',';<br><span></span>hive&gt; load data local inpath 'data/t3' into table t3_arr_1;<br><span></span>hive&gt; select id, name, hobby[0],hobby[1] from t3_arr_1;<br><span></span>map<br><span></span>有一群学生，id，name，scores(chinese,math,english)<br><span></span>create table t4_map (<br><span></span>id int,<br><span></span>name string,<br><span></span>scores map&lt;string, int&gt;<br><span></span>) row format delimited<br><span></span>fields terminated by '\t'<br><span></span>collection items terminated by ','<br><span></span>map keys terminated by ':';<br><span></span>load data local inpath 'data/t4_map' into table t4_map;<br><span></span>查询map中的特定的值<br><span></span>hive&gt; select id, name, scores["chinese"] from t4_map;<br><span></span>map也是有默认的分隔符的，它的分隔符是\003,对应的输入为ctrl+v ctrl+c<br><span></span>struct<br><span></span>有点想咱们的java中的对象，c语言中的struct，可以容纳多种数据类的数据<br><span></span>create table t5_struct(<br><span></span>id int,<br><span></span>name string,<br><span></span>info struct&lt;addr:string,subway:int&gt;<br><span></span>) row format delimited<br><span></span>fields terminated by '\t'<br><span></span>collection items terminated by ',';<br><span></span>查看其中的struct中某一列数据<br><span></span>hive&gt; select id, name, info.subway from t5_struct;<br><span></span>综合案例（全用默认的分隔符）：<br><span></span>超人学院有许多员工，学员都有工资、级别、住址等等<br><span></span>create tablet t5_employee (<br><span></span>id int,<br><span></span>name string,<br><span></span>salary float,<br><span></span>subordinate array&lt;string&gt;,<br><span></span>tax map&lt;string, float&gt;,<br><span></span>jiguan struct&lt;province:string, city:string, zip:int&gt;<br><span></span>);<br><span></span>注意：起别名的时候不用使用'' “”<br></p>
总结：<br><span></span>hive中的各种默认分隔符<br><span></span>行分隔符：\n<br><span></span>列分隔符：\001 --&gt; ctrl+v ctrl+a<br><span></span>集合元素之间的分隔符:\002 --&gt; ctrl+v ctrl+b<br><span></span>map key-value之间的分隔符是：\003 --&gt; ctrl+v ctrl+c<br><span></span>自定义分隔符<br><span></span>row format delimited<br><span></span>列分隔符：fields terminated by ...<br><span></span>集合元素分割<span> </span>
collection items terminated by ...<br><span></span>map：key-value分割<span>
</span>map keys terminated by ...<br><span></span>行分割<span> </span>lines terminated by ...(一般不写)<br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>            </div>
                </div>