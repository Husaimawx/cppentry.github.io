---
layout:     post
title:      日志采集框架--Flume
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为涂志海博客原创文章，未经博主允许不得转载。					https://blog.csdn.net/tuzhihai/article/details/78719772				</div>
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<p><img src="https://img-blog.csdn.net/20171205140133139?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHV6aGloYWk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title=""></p>

<h2 id="日志收集框架flume">日志收集框架–flume</h2>

<blockquote>
  <h3 id="webserver源端-flume-hdfs目的地">webServer(源端) –&gt; flume –&gt; hdfs(目的地)</h3>
</blockquote>

<p><img src="https://img-blog.csdn.net/20171205140115521?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHV6aGloYWk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title=""></p>

<h3 id="flume框架核心组件">flume框架核心组件</h3>

<blockquote>
  <h3 id="source-日志来源">source: 日志来源</h3>
  
  <h3 id="channel-渠道数据处理管道">channel: 渠道，数据处理管道</h3>
  
  <h3 id="sink存储目的地要下落的地方">sink：存储目的地(要下落的地方)</h3>
</blockquote>



<h3 id="jdk下载安装">jdk下载安装</h3>

<blockquote>
  <h3 id="下载jdk-8-linux-x64targz">下载：jdk-8-linux-x64.tar.gz</h3>
  
  <h3 id="上传rz">上传：rz</h3>
  
  <h3 id="解压tar-zvxf-jdk-8-linux-x64targz-c-softinstall">解压：tar -zvxf  jdk-8-linux-x64.tar.gz -C ~/soft_install/</h3>
  
  <h3 id="配置配置文件vi-bashprofile">配置配置文件：vi ~/.bash_profile</h3>
  
  <blockquote>
    <h3 id="export-javahome-rootsoftinstalljdk180"><code>export JAVA_HOME = /root/soft_install/jdk1.8.0</code></h3>
    
    <h3 id="export-path-javahomebinpath"><code>export PATH = $JAVA_HOME/bin:$PATH</code></h3>
    
    <h3 id="source-bashprofile">source  ~/.bash_profile</h3>
  </blockquote>
  
  <h3 id="检测java-version">检测：java -version</h3>
</blockquote>

<h3 id="flume下载安装">flume下载安装</h3>

<blockquote>
  <h3 id="一">一：</h3>
  
  <blockquote>
    <h3 id="下载httparchiveclouderacomcdh5cdh5">下载：<a href="http://archive.cloudera.com/cdh5/cdh/5/" rel="nofollow" target="_blank">http://archive.cloudera.com/cdh5/cdh/5/</a></h3>
    
    <h3 id="上传rz-1">上传：rz</h3>
    
    <h3 id="解压tar-zvxf-flume-ng-160-cdh570targz-c-softinstall">解压：tar -zvxf  flume-ng-1.6.0-cdh5.7.0.tar.gz -C ~/soft_install/</h3>
    
    <h3 id="配置配置文件vi-bashprofile-1">配置配置文件：vi ~/.bash_profile</h3>
    
    <blockquote>
      <h3 id="export-flumehome-rootsoftinstallapache-flume-160-cdh570-bin">&gt;### <code>export FLUME_HOME = /root/soft_install/apache-flume-1.6.0-cdh5.7.0-bin</code></h3>
      
      <h3 id="export-path-flumehomebinpath"><code>export PATH = $FLUME_HOME/bin:$PATH</code></h3>
      
      <h3 id="source-bashprofile-1"><code>source  ~/.bash_profile</code></h3>
    </blockquote>
  </blockquote>
  
  <h3 id="二">二：</h3>
  
  <blockquote>
    <h3 id="配置conf下配置文件">配置conf下配置文件：</h3>
    
    <blockquote>
      <h3 id="cp-flume-envshtemplate-flume-envsh"><code>cp flume-env.sh.template flume-env.sh</code></h3>
      
      <h3 id="vi-flume-envsh-添加-javahome-rootsoftinstalljdk180"><code>vi flume-env.sh   添加 JAVA_HOME = /root/soft_install/jdk1.8.0</code></h3>
    </blockquote>
    
    <h3 id="检测flume-ng-version">检测：<code>flume-ng version</code></h3>
  </blockquote>
</blockquote>

<h2 id="启动flume配置文件">启动flume配置文件</h2>



<pre class="prettyprint"><code class=" hljs haml"> flume-ng agent \
  -<span class="ruby">-name avro-memory-logger \
</span>  -<span class="ruby">-conf <span class="hljs-variable">$FLUME_HOME</span>/conf \
</span>  -<span class="ruby">-conf-file <span class="hljs-variable">$FLUME_HOME</span>/conf/exampleB.conf \
</span>  -<span class="ruby"><span class="hljs-constant">Dflume</span>.root.logger=<span class="hljs-constant">INFO</span>,console </span></code></pre>



<h3 id="event">Event</h3>

<blockquote>
  <h3 id="event-headers-body-69-20-6c-6f-76-65-20-6c-69-66-08-6e-66-65-69-66-i-love-lifnfeif">Event: { headers:{} body: 69 20 6C 6F 76 65 20 6C 69 66 08 6E 66 65 69 66 i love lif.nfeif }</h3>
  
  <h3 id="event是flume中数据传输的基本单元">Event是flume中数据传输的基本单元</h3>
  
  <h3 id="event-可选的header-bye-array">Event = 可选的header + bye array</h3>
  
  <h3 id="flume核心就在于配置文件新增一个配置文件指定agentsourcechannelsink">flume核心就在于配置文件，新增一个配置文件，指定agent、source、channel、sink</h3>
  
  <h3 id="关键是选择何种sourcechannelsink">关键是选择何种source、channel、sink</h3>
</blockquote>



<h3 id="实战一从指定的网络端口采集获取日志信息并打印在控制台上">实战一：从指定的网络端口采集（获取）日志信息，并打印在控制台上</h3>

<blockquote>
  <h3 id="技术选型netcat-source-memory-channel-logger-sink">技术选型：netcat source + memory channel + logger sink</h3>
  
  <blockquote>
    <h3 id="一-vi-exampleconf-详见配置文件">一： vi example.conf  – 详见配置文件</h3>
  </blockquote>
</blockquote>



<h3 id="二-启动">二： 启动</h3>



<pre class="prettyprint"><code class=" hljs haml">  flume-ng agent \
  -<span class="ruby">-name a1 \
</span>  -<span class="ruby">-conf <span class="hljs-variable">$FLUME_HOME</span>/conf \
</span>  -<span class="ruby">-conf-file <span class="hljs-variable">$FLUME_HOME</span>/conf/exampleB.conf \
</span>  -<span class="ruby"><span class="hljs-constant">Dflume</span>.root.logger=<span class="hljs-constant">INFO</span>,console  
</span></code></pre>

<blockquote>
  <h3 id="三测试">三：测试</h3>
  
  <blockquote>
    <h3 id="另开一个窗口telnet-192168145128-44444-查询原窗口是否有日志信息打印">另开一个窗口：telnet 192.168.145.128 44444 – 查询原窗口是否有日志信息打印</h3>
  </blockquote>
</blockquote>



<h3 id="实战二实时监控一个文件新增的内容">实战二：实时监控一个文件新增的内容</h3>

<blockquote>
  <h3 id="技术选型exec-source-memory-channel-logger-sink">技术选型：exec source + memory channel + logger sink</h3>
  
  <blockquote>
    <h3 id="一-vi-example2conf-详见配置文件">一： vi example2.conf  – 详见配置文件</h3>
  </blockquote>
  
  <h3 id="二-启动-最后一句是打印info级别的日志到控制台上">二： 启动 – 最后一句是打印info级别的日志到控制台上</h3>
  
  <blockquote>
    <h3 id="flume-ng-agent">flume-ng agent \</h3>
    
    <p>–name a1 \ <br>
      –conf <span class="MathJax_Preview"></span><span class="MathJax" id="MathJax-Element-13-Frame" role="textbox" aria-readonly="true" style=""><nobr><span class="math" id="MathJax-Span-288" style="width: 19.629em; display: inline-block;"><span style="display: inline-block; position: relative; width: 15.683em; height: 0px; font-size: 125%;"><span style="position: absolute; clip: rect(1.816em 1000em 3.149em -0.424em); top: -2.717em; left: 0.003em;"><span class="mrow" id="MathJax-Span-289"><span class="mi" id="MathJax-Span-290" style="font-family: MathJax_Math-italic;">F<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.109em;"></span></span><span class="mi" id="MathJax-Span-291" style="font-family: MathJax_Math-italic;">L</span><span class="mi" id="MathJax-Span-292" style="font-family: MathJax_Math-italic;">U<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.109em;"></span></span><span class="mi" id="MathJax-Span-293" style="font-family: MathJax_Math-italic;">M<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.109em;"></span></span><span class="msubsup" id="MathJax-Span-294"><span style="display: inline-block; position: relative; width: 1.443em; height: 0px;"><span style="position: absolute; clip: rect(1.763em 1000em 2.776em -0.424em); top: -2.611em; left: 0.003em;"><span class="mi" id="MathJax-Span-295" style="font-family: MathJax_Math-italic;">E<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.003em;"></span></span><span style="display: inline-block; width: 0px; height: 2.616em;"></span></span><span style="position: absolute; top: -2.291em; left: 0.749em;"><span class="mi" id="MathJax-Span-296" style="font-size: 70.7%; font-family: MathJax_Math-italic;">H<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.056em;"></span></span><span style="display: inline-block; width: 0px; height: 2.456em;"></span></span></span></span><span class="mi" id="MathJax-Span-297" style="font-family: MathJax_Math-italic;">O</span><span class="mi" id="MathJax-Span-298" style="font-family: MathJax_Math-italic;">M<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.109em;"></span></span><span class="mi" id="MathJax-Span-299" style="font-family: MathJax_Math-italic;">E<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.003em;"></span></span><span class="texatom" id="MathJax-Span-300"><span class="mrow" id="MathJax-Span-301"><span class="mo" id="MathJax-Span-302" style="font-family: MathJax_Main;">/</span></span></span><span class="mi" id="MathJax-Span-303" style="font-family: MathJax_Math-italic;">c</span><span class="mi" id="MathJax-Span-304" style="font-family: MathJax_Math-italic;">o</span><span class="mi" id="MathJax-Span-305" style="font-family: MathJax_Math-italic;">n</span><span class="mi" id="MathJax-Span-306" style="font-family: MathJax_Math-italic;">f<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.056em;"></span></span><span class="mtext" id="MathJax-Span-307" style="font-family: MathJax_Main;"> </span><span class="mo" id="MathJax-Span-308" style="font-family: MathJax_Main;">–</span><span class="mi" id="MathJax-Span-309" style="font-family: MathJax_Math-italic; padding-left: 0.163em;">c</span><span class="mi" id="MathJax-Span-310" style="font-family: MathJax_Math-italic;">o</span><span class="mi" id="MathJax-Span-311" style="font-family: MathJax_Math-italic;">n</span><span class="mi" id="MathJax-Span-312" style="font-family: MathJax_Math-italic;">f<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.056em;"></span></span><span class="mo" id="MathJax-Span-313" style="font-family: MathJax_Main; padding-left: 0.216em;">−</span><span class="mi" id="MathJax-Span-314" style="font-family: MathJax_Math-italic; padding-left: 0.216em;">f<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.056em;"></span></span><span class="mi" id="MathJax-Span-315" style="font-family: MathJax_Math-italic;">i</span><span class="mi" id="MathJax-Span-316" style="font-family: MathJax_Math-italic;">l</span><span class="mi" id="MathJax-Span-317" style="font-family: MathJax_Math-italic;">e</span></span><span style="display: inline-block; width: 0px; height: 2.723em;"></span></span></span><span style="border-left: 0.003em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.403em; vertical-align: -0.397em;"></span></span></nobr></span><script type="math/tex" id="MathJax-Element-13">FLUME_HOME/conf \  
      –conf-file </script>FLUME_HOME/conf/example2.conf \ <br>
      -Dflume.root.logger=INFO,console  </p>
  </blockquote>
  
  <h3 id="三测试-1">三：测试</h3>
  
  <blockquote>
    <h3 id="另开一个窗口telnet-192168145128-44444-查询原窗口是否有日志信息打印-1">另开一个窗口：telnet 192.168.145.128 44444 – 查询原窗口是否有日志信息打印</h3>
  </blockquote>
</blockquote>



<h3 id="实战二进阶离线处理">实战二进阶–离线处理</h3>

<blockquote>
  <h3 id="将收到的日志信息保存到hdfs中">将收到的日志信息保存到hdfs中</h3>
  
  <h3 id="技术选型exec-source-memory-channel-hdfs-sink">技术选型：exec source + memory channel + hdfs sink</h3>
  
  <h3 id="example3conf">example3.conf</h3>
</blockquote>



<h3 id="日志采集过程">日志采集过程</h3>

<blockquote>
  <h3 id="机器a监控一个文件将结果-avro-sink-到另一个节点">机器A监控一个文件，将结果 (avro) sink 到另一个节点</h3>
  
  <h3 id="机器b采用avro-source接受-机器a-sink的数据">机器B采用(avro) source接受 机器A sink的数据</h3>
  
  <h3 id="机器b可采用logger将数据打印在控制台或者保存或者kafka">机器B可采用logger将数据打印在控制台，或者保存,或者(kafka)</h3>
</blockquote>



<h3 id="example1conf">example1.conf</h3>

<pre class="prettyprint"><code class=" hljs avrasm">a1<span class="hljs-preprocessor">.sources</span> = <span class="hljs-built_in">r1</span>
a1<span class="hljs-preprocessor">.sinks</span> = k1
a1<span class="hljs-preprocessor">.channels</span> = c1

<span class="hljs-preprocessor"># Describe/configure the source</span>
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.r</span>1<span class="hljs-preprocessor">.type</span> = netcat
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.r</span>1<span class="hljs-preprocessor">.binf</span> = hadoop01
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.r</span>1<span class="hljs-preprocessor">.port</span> = <span class="hljs-number">44444</span>

<span class="hljs-preprocessor"># Describe/ the sink</span>
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.k</span>1<span class="hljs-preprocessor">.type</span> = logger

<span class="hljs-preprocessor"># Use a channel which buffers events in memory</span>
a1<span class="hljs-preprocessor">.channels</span><span class="hljs-preprocessor">.c</span>1<span class="hljs-preprocessor">.type</span> = memory
a1<span class="hljs-preprocessor">.channels</span><span class="hljs-preprocessor">.c</span>1<span class="hljs-preprocessor">.capacity</span> = <span class="hljs-number">1000</span>
a1<span class="hljs-preprocessor">.channels</span><span class="hljs-preprocessor">.c</span>1<span class="hljs-preprocessor">.transactionCapacity</span> = <span class="hljs-number">100</span>

<span class="hljs-preprocessor"># Bind the source and sink to the channel</span>
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.r</span>1<span class="hljs-preprocessor">.channels</span> = c1
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.k</span>1<span class="hljs-preprocessor">.channel</span> = c1</code></pre>



<h3 id="example2conf">example2.conf</h3>

<pre class="prettyprint"><code class=" hljs avrasm">a1<span class="hljs-preprocessor">.sources</span> = <span class="hljs-built_in">r1</span>
a1<span class="hljs-preprocessor">.sinks</span> = k1
a1<span class="hljs-preprocessor">.channels</span> = c1

<span class="hljs-preprocessor"># Describe/configure the source</span>
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.r</span>1<span class="hljs-preprocessor">.type</span> = exec
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.r</span>1<span class="hljs-preprocessor">.command</span> = tail -F  /root/data/example2<span class="hljs-preprocessor">.txt</span>
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.r</span>1<span class="hljs-preprocessor">.shell</span> = /bin/sh -c

<span class="hljs-preprocessor"># Describe/ the sink</span>
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.k</span>1<span class="hljs-preprocessor">.type</span> = logger

<span class="hljs-preprocessor"># Use a channel which buffers events in memory</span>
a1<span class="hljs-preprocessor">.channels</span><span class="hljs-preprocessor">.c</span>1<span class="hljs-preprocessor">.type</span> = memory

<span class="hljs-preprocessor"># Bind the source and sink to the channel</span>
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.r</span>1<span class="hljs-preprocessor">.channels</span> = c1
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.k</span>1<span class="hljs-preprocessor">.channel</span> = c1</code></pre>



<h3 id="example3conf-1">example3.conf</h3>

<pre class="prettyprint"><code class=" hljs avrasm">a1<span class="hljs-preprocessor">.sources</span> = <span class="hljs-built_in">r1</span>
a1<span class="hljs-preprocessor">.sinks</span> = k1
a1<span class="hljs-preprocessor">.channels</span> = c1

<span class="hljs-preprocessor"># Describe/configure the source</span>
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.r</span>1<span class="hljs-preprocessor">.type</span> = exec
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.r</span>1<span class="hljs-preprocessor">.command</span> = tail -F  /root/data/example2<span class="hljs-preprocessor">.txt</span>
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.r</span>1<span class="hljs-preprocessor">.shell</span> = /bin/sh -c

<span class="hljs-preprocessor"># Describe/ the sink</span>
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.k</span>1<span class="hljs-preprocessor">.type</span> = hdfs
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.k</span>1<span class="hljs-preprocessor">.hdfs</span><span class="hljs-preprocessor">.path</span> = hdfs://<span class="hljs-number">192.168</span><span class="hljs-number">.145</span><span class="hljs-number">.128</span>:<span class="hljs-number">8020</span>

<span class="hljs-preprocessor"># Use a channel which buffers events in memory</span>
a1<span class="hljs-preprocessor">.channels</span><span class="hljs-preprocessor">.c</span>1<span class="hljs-preprocessor">.type</span> = memory

<span class="hljs-preprocessor"># Bind the source and sink to the channel</span>
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.r</span>1<span class="hljs-preprocessor">.channels</span> = c1
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.k</span>1<span class="hljs-preprocessor">.channel</span> = c1
</code></pre>

<h3 id="exampleaconf">exampleA.conf</h3>



<pre class="prettyprint"><code class=" hljs mel"># example <span class="hljs-keyword">exec</span>-<span class="hljs-keyword">memory</span>-avro
<span class="hljs-keyword">exec</span>-<span class="hljs-keyword">memory</span>-avro.sources = <span class="hljs-keyword">exec</span>-<span class="hljs-keyword">source</span>
<span class="hljs-keyword">exec</span>-<span class="hljs-keyword">memory</span>-avro.sinks = avro-sink
<span class="hljs-keyword">exec</span>-<span class="hljs-keyword">memory</span>-avro.channels = <span class="hljs-keyword">memory</span>-channel

# Describe/configure the <span class="hljs-keyword">source</span>
<span class="hljs-keyword">exec</span>-<span class="hljs-keyword">memory</span>-avro.sources.<span class="hljs-keyword">exec</span>-<span class="hljs-keyword">source</span>.type = <span class="hljs-keyword">exec</span>
<span class="hljs-keyword">exec</span>-<span class="hljs-keyword">memory</span>-avro.sources.<span class="hljs-keyword">exec</span>-<span class="hljs-keyword">source</span>.command = tail -F  /root/data/exampleA.txt
<span class="hljs-keyword">exec</span>-<span class="hljs-keyword">memory</span>-avro.sources.<span class="hljs-keyword">exec</span>-<span class="hljs-keyword">source</span>.shell = /bin/sh -c

# Describe/ the sink
<span class="hljs-keyword">exec</span>-<span class="hljs-keyword">memory</span>-avro.sinks.avro-sink.type = avro
<span class="hljs-keyword">exec</span>-<span class="hljs-keyword">memory</span>-avro.sinks.avro-sink.hostname = <span class="hljs-number">192.168</span><span class="hljs-number">.145</span><span class="hljs-number">.128</span>
<span class="hljs-keyword">exec</span>-<span class="hljs-keyword">memory</span>-avro.sinks.avro-sink.port = <span class="hljs-number">44444</span> 

# Use a channel which buffers events <span class="hljs-keyword">in</span> <span class="hljs-keyword">memory</span>
<span class="hljs-keyword">exec</span>-<span class="hljs-keyword">memory</span>-avro.channels.<span class="hljs-keyword">memory</span>-channel.type = <span class="hljs-keyword">memory</span>

# Bind the <span class="hljs-keyword">source</span> and sink to the channel
<span class="hljs-keyword">exec</span>-<span class="hljs-keyword">memory</span>-avro.sources.<span class="hljs-keyword">exec</span>-<span class="hljs-keyword">source</span>.channels = <span class="hljs-keyword">memory</span>-channel
<span class="hljs-keyword">exec</span>-<span class="hljs-keyword">memory</span>-avro.sinks.avro-sink.channel = <span class="hljs-keyword">memory</span>-channel
</code></pre>



<h3 id="examplebconf">exampleB.conf</h3>

<pre class="prettyprint"><code class=" hljs avrasm"><span class="hljs-preprocessor"># example avro-memory-logger</span>
avro-memory-logger<span class="hljs-preprocessor">.sources</span> = avro-source
avro-memory-logger<span class="hljs-preprocessor">.sinks</span> = logger-sink
avro-memory-logger<span class="hljs-preprocessor">.channels</span> = memory-channel

<span class="hljs-preprocessor"># Describe/configure the source</span>
avro-memory-logger<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.avro</span>-source<span class="hljs-preprocessor">.type</span> = avro
avro-memory-logger<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.avro</span>-source<span class="hljs-preprocessor">.bind</span> = <span class="hljs-number">192.168</span><span class="hljs-number">.145</span><span class="hljs-number">.128</span>
avro-memory-logger<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.avro</span>-source<span class="hljs-preprocessor">.port</span> = <span class="hljs-number">44444</span>

<span class="hljs-preprocessor"># Describe/ the sink</span>
avro-memory-logger<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.logger</span>-sink<span class="hljs-preprocessor">.type</span> = logger

<span class="hljs-preprocessor"># Use a channel which buffers events in memory</span>
avro-memory-logger<span class="hljs-preprocessor">.channels</span><span class="hljs-preprocessor">.memory</span>-channel<span class="hljs-preprocessor">.type</span> = memory

<span class="hljs-preprocessor"># Bind the source and sink to the channel</span>
avro-memory-logger<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.avro</span>-source<span class="hljs-preprocessor">.channels</span> = memory-channel
avro-memory-logger<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.logger</span>-sink<span class="hljs-preprocessor">.channel</span> = memory-channel</code></pre>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>