---
layout:     post
title:      Spring kafka Integration集成
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<h1 style="margin-left:0px;line-height:1.25;border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(234,236,239);color:rgb(36,41,46);">
<span style="font-size:18px;">原文链接：<a href="https://github.com/spring-projects/spring-integration-kafka/blob/1.3.x/README.md" rel="nofollow">https://github.com/spring-projects/spring-integration-kafka/blob/1.3.x/README.md</a></span></h1>
<h1 style="margin-left:0px;line-height:1.25;border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(234,236,239);color:rgb(36,41,46);">
Spring Integration Kafka Adapter</h1>
<p style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
The <span>Spring Integration Kafka Adapter</span> provides client components for Apache Kafka. Apache Kafka is a distributed publish-subscribe messaging system that is designed for high throughput (terabytes of data) and low latency (miliseconds).
 For more information on Kafka and its design goals, see <a href="http://kafka.apache.org/" rel="nofollow" style="color:rgb(3,102,214);text-decoration:none;background-color:transparent;">Kafka main page</a>.</p>
<p style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
In particular, Spring Integration Kafka provides:</p>
<ul style="color:rgb(36,41,46);font-size:16px;line-height:24px;"><li>A consumer client library based on the Simple Consumer API with the following features:
<ul><li>Dependency injection-friendly <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">ConnectionFactory</code> for infrastructure management;</li><li><code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">KafkaTemplate</code> for broker read operations, following the general Spring Template
 model, with the ability of reading from specific partitions and offsets;</li><li>Message-driven <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">KafkaMessageListenerContainer</code> with support for:
<ul><li>Listening to specific partitions and starting offsets;</li><li>Customizing offset management via the <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">OffsetManager</code> abstraction, with the ability
 of choosing between various offset storage and update strategies;</li><li>Manual acknowledgment of offsets for asynchronous operation;</li></ul></li></ul></li><li>Inbound and outbound channel adapters for Spring Integration</li></ul><h2 style="line-height:1.25;border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(234,236,239);color:rgb(36,41,46);">
<a id="user-content-quick-start" class="anchor" href="https://github.com/spring-projects/spring-integration-kafka/blob/1.3.x/README.md#quick-start" rel="nofollow" style="color:rgb(3,102,214);text-decoration:none;margin-left:-20px;line-height:1;background-color:transparent;"></a>Quick
 Start</h2>
<p style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
See the <a href="https://github.com/spring-projects/spring-integration-samples/tree/master/basic/kafka" rel="nofollow" style="color:rgb(3,102,214);text-decoration:none;background-color:transparent;">Spring Integration kafka Sample</a> for
 a simple Spring Boot application that sends and receives messages.</p>
<h2 style="line-height:1.25;border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(234,236,239);color:rgb(36,41,46);">
<a id="user-content-checking-out-and-building" class="anchor" href="https://github.com/spring-projects/spring-integration-kafka/blob/1.3.x/README.md#checking-out-and-building" rel="nofollow" style="color:rgb(3,102,214);text-decoration:none;margin-left:-20px;line-height:1;background-color:transparent;"></a>Checking
 out and building</h2>
<p style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
Currently Spring Integration Kafka adapter is built against Kafka 0.8.2.1 that is backed by Scala 2.10.4.</p>
<p style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
In order to build the project:</p>
<pre style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;line-height:1.45;overflow:auto;color:rgb(36,41,46);background-color:rgb(246,248,250);"><code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;border:0px;display:inline;overflow:visible;line-height:inherit;background:transparent;">./gradlew build
</code></pre>
<p style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
In order to install this into your local maven cache:</p>
<pre style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;line-height:1.45;overflow:auto;color:rgb(36,41,46);background-color:rgb(246,248,250);"><code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;border:0px;display:inline;overflow:visible;line-height:inherit;background:transparent;">./gradlew install
</code></pre>
<p style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
Spring Integration Kafka project currently supports the following components. Please keep in mind that this is very early stage in development and do not yet fully make use of all the features that Kafka provides.</p>
<ul style="color:rgb(36,41,46);font-size:16px;line-height:24px;"><li>Outbound Channel Adapter</li><li>Message Driven Channel Adapter based on the simple consumer API</li><li>Inbound Channel Adapter based on the High level consumer API</li></ul><h2 style="line-height:1.25;border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(234,236,239);color:rgb(36,41,46);">
<a id="user-content-outbound-channel-adapter" class="anchor" href="https://github.com/spring-projects/spring-integration-kafka/blob/1.3.x/README.md#outbound-channel-adapter" rel="nofollow" style="color:rgb(3,102,214);text-decoration:none;margin-left:-20px;line-height:1;background-color:transparent;"></a>Outbound
 Channel Adapter:</h2>
<p style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
The Outbound channel adapter is used to publish messages from a Spring Integration channel to Kafka. The channel is defined in the application context and then wired in the application that sends messages to Kafka. After that, sender applications can publish
 to Kafka via Spring Integration messages, which are internally converted to Kafka messages by the outbound channel adapter, as follows: the payload of the Spring Integration message will be used to populate the payload of the Kafka message, and the <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">kafka_messageKey</code> header
 of the Spring Integration message will be used to populate the key of the Kafka message.</p>
<p style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
The target topic and partition for publishing the message can be customized through the <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">kafka_topic</code> and<code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">kafka_partitionId</code> headers,
 respectively.</p>
<p style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
Here's an example for sending a message with an arbitrary payload and the String <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">"key"</code> as value on the <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">test</code> topic.</p>
<div class="highlight highlight-source-java" style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
<pre style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;line-height:1.45;overflow:auto;background-color:rgb(246,248,250);">    <span class="pl-k" style="color:rgb(167,29,93);">final</span> <span class="pl-smi" style="color:rgb(51,51,51);">MessageChannel</span> channel <span class="pl-k" style="color:rgb(167,29,93);">=</span> ctx<span class="pl-k" style="color:rgb(167,29,93);">.</span>getBean(<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>inputToKafka<span class="pl-pds">"</span></span>, <span class="pl-smi" style="color:rgb(51,51,51);">MessageChannel</span><span class="pl-k" style="color:rgb(167,29,93);">.</span>class);

    channel<span class="pl-k" style="color:rgb(167,29,93);">.</span>send(
            <span class="pl-smi" style="color:rgb(51,51,51);">MessageBuilder</span><span class="pl-k" style="color:rgb(167,29,93);">.</span>withPayload(payload)
                    .setHeader(<span class="pl-smi" style="color:rgb(51,51,51);">KafkaHeaders</span><span class="pl-c1" style="color:rgb(0,134,179);"><span class="pl-k" style="color:rgb(167,29,93);">.</span>MESSAGE_KEY</span>, <span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>key<span class="pl-pds">"</span></span>)  <span class="pl-c" style="color:rgb(150,152,150);"><span class="pl-c">//</span> Note: the header was `messageKey` in earlier versions</span>
                    .setHeader(<span class="pl-smi" style="color:rgb(51,51,51);">KafkaHeaders</span><span class="pl-c1" style="color:rgb(0,134,179);"><span class="pl-k" style="color:rgb(167,29,93);">.</span>TOPIC</span>, <span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>test<span class="pl-pds">"</span></span>)       <span class="pl-c" style="color:rgb(150,152,150);"><span class="pl-c">//</span> Note: the header was `topic` in earlier versions</span>
                    .build()
            );</pre>
</div>
<p style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
In addition, the <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">&lt;int-kafka:outbound-channel-adapter&gt;</code> provides the ability to extract the key, target topic,
 and target partition by applying SpEL expressions on the outbound message. To that end, it supports the mutually exclusive pairs of attributes <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">topic</code>/<code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">topic-expression</code>, <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">message-key</code>/<code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">message-key-expression</code>,
 and <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">partition-id</code>/<code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">partition-id-expression</code>,
 to allow the specification of <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">topic</code>,<code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">message-key</code> and <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">partition-id</code> respectively
 as static values on the adapter, or to dynamically evaluate their values at runtime against the request message.</p>
<p style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
<span style="font-weight:600;">Important. The <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">KafkaHeaders</code> interface contains constants used for interacting with
 headers. The <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">messageKey</code> and<code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">topic</code> default
 headers now require a <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">kafka_</code> prefix. When migrating from an earlier version that used the old headers, you need
 to specify <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">message-key-expression="headers.messageKey"</code> and <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">topic-expression="headers.topic"</code>on
 the <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">&lt;int-kafka:outbound-channel-adapter&gt;</code>, or simply change the headers upstream to the new headers from<code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">KafkaHeaders</code> using
 a <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">&lt;header-enricher&gt;</code> or <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">MessageBuilder</code>.
 Or, of course, configure them on the adapter if you are using constant values.</span></p>
<p style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
Here is how kafka outbound channel adapter is configured:</p>
<div class="highlight highlight-text-xml" style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
<pre style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;line-height:1.45;overflow:auto;background-color:rgb(246,248,250);">    &lt;<span class="pl-ent" style="color:rgb(99,163,92);">int-kafka</span><span class="pl-ent" style="color:rgb(99,163,92);">:</span><span class="pl-ent" style="color:rgb(99,163,92);">outbound-channel-adapter</span> <span class="pl-e" style="color:rgb(121,93,163);">id</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>kafkaOutboundChannelAdapter<span class="pl-pds">"</span></span>
                                        <span class="pl-e" style="color:rgb(121,93,163);">kafka-producer-context-ref</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>kafkaProducerContext<span class="pl-pds">"</span></span>
                                        <span class="pl-e" style="color:rgb(121,93,163);">auto-startup</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>false<span class="pl-pds">"</span></span>
                                        <span class="pl-e" style="color:rgb(121,93,163);">channel</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>inputToKafka<span class="pl-pds">"</span></span>
                                        <span class="pl-e" style="color:rgb(121,93,163);">topic</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span>
                                        <span class="pl-e" style="color:rgb(121,93,163);">message-key-expression</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>header.messageKey<span class="pl-pds">"</span></span>&gt;
        &lt;<span class="pl-ent" style="color:rgb(99,163,92);">int</span><span class="pl-ent" style="color:rgb(99,163,92);">:</span><span class="pl-ent" style="color:rgb(99,163,92);">poller</span> <span class="pl-e" style="color:rgb(121,93,163);">fixed-delay</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>1000<span class="pl-pds">"</span></span> <span class="pl-e" style="color:rgb(121,93,163);">time-unit</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>MILLISECONDS<span class="pl-pds">"</span></span> <span class="pl-e" style="color:rgb(121,93,163);">receive-timeout</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>0<span class="pl-pds">"</span></span> <span class="pl-e" style="color:rgb(121,93,163);">task-executor</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>taskExecutor<span class="pl-pds">"</span></span>/&gt;
    &lt;/<span class="pl-ent" style="color:rgb(99,163,92);">int-kafka</span><span class="pl-ent" style="color:rgb(99,163,92);">:</span><span class="pl-ent" style="color:rgb(99,163,92);">outbound-channel-adapter</span>&gt;</pre>
</div>
<p style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
The key aspect in this configuration is the producer-context-ref. The producer context contains all the producer configurations for the topics that this adapter is expected to handle. The adapter will subscribe to a channel and any message sent to that channel
 will be handled by this adapter. You can also configure a poller depending on the type of the channel used. For example, in the above configuration, we use a queue based channel and thus a poller is configured with a task executor. If no messages are available
 in the queue it will timeout immediately because of the receive-timeout configuration. Then it will poll again with a delay of 1 second.</p>
<p style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
The producer context is at the heart of the kafka outbound adapter. Here is an example of how it is configured.</p>
<div class="highlight highlight-text-xml" style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
<pre style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;line-height:1.45;overflow:auto;background-color:rgb(246,248,250);">    &lt;<span class="pl-ent" style="color:rgb(99,163,92);">int-kafka</span><span class="pl-ent" style="color:rgb(99,163,92);">:</span><span class="pl-ent" style="color:rgb(99,163,92);">producer-context</span> <span class="pl-e" style="color:rgb(121,93,163);">id</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>kafkaProducerContext<span class="pl-pds">"</span></span>&gt;
        &lt;<span class="pl-ent" style="color:rgb(99,163,92);">int-kafka</span><span class="pl-ent" style="color:rgb(99,163,92);">:</span><span class="pl-ent" style="color:rgb(99,163,92);">producer-configurations</span>&gt;
            &lt;<span class="pl-ent" style="color:rgb(99,163,92);">int-kafka</span><span class="pl-ent" style="color:rgb(99,163,92);">:</span><span class="pl-ent" style="color:rgb(99,163,92);">producer-configuration</span> <span class="pl-e" style="color:rgb(121,93,163);">broker-list</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>localhost:9092<span class="pl-pds">"</span></span>
                       <span class="pl-e" style="color:rgb(121,93,163);">key-class-type</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>java.lang.String<span class="pl-pds">"</span></span>
                       <span class="pl-e" style="color:rgb(121,93,163);">value-class-type</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>java.lang.String<span class="pl-pds">"</span></span>
                       <span class="pl-e" style="color:rgb(121,93,163);">topic</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>test1<span class="pl-pds">"</span></span>
                       <span class="pl-e" style="color:rgb(121,93,163);">value-serializer</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>kafkaSerializer<span class="pl-pds">"</span></span>
                       <span class="pl-e" style="color:rgb(121,93,163);">key-serializer</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>kafkaSerializer<span class="pl-pds">"</span></span>
                       <span class="pl-e" style="color:rgb(121,93,163);">compression-type</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>none<span class="pl-pds">"</span></span>/&gt;
            &lt;<span class="pl-ent" style="color:rgb(99,163,92);">int-kafka</span><span class="pl-ent" style="color:rgb(99,163,92);">:</span><span class="pl-ent" style="color:rgb(99,163,92);">producer-configuration</span> <span class="pl-e" style="color:rgb(121,93,163);">broker-list</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>localhost:9092<span class="pl-pds">"</span></span>
                       <span class="pl-e" style="color:rgb(121,93,163);">topic</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>test2<span class="pl-pds">"</span></span>
                       <span class="pl-e" style="color:rgb(121,93,163);">compression-type</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>none<span class="pl-pds">"</span></span>/&gt;
            &lt;<span class="pl-ent" style="color:rgb(99,163,92);">int-kafka</span><span class="pl-ent" style="color:rgb(99,163,92);">:</span><span class="pl-ent" style="color:rgb(99,163,92);">producer-configuration</span> <span class="pl-e" style="color:rgb(121,93,163);">broker-list</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>localhost:9092<span class="pl-pds">"</span></span>
                        <span class="pl-e" style="color:rgb(121,93,163);">topic</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>regextopic.*<span class="pl-pds">"</span></span>
                        <span class="pl-e" style="color:rgb(121,93,163);">compression-type</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>gzip<span class="pl-pds">"</span></span>/&gt;
        &lt;/<span class="pl-ent" style="color:rgb(99,163,92);">int-kafka</span><span class="pl-ent" style="color:rgb(99,163,92);">:</span><span class="pl-ent" style="color:rgb(99,163,92);">producer-configurations</span>&gt;
    &lt;/<span class="pl-ent" style="color:rgb(99,163,92);">int-kafka</span><span class="pl-ent" style="color:rgb(99,163,92);">:</span><span class="pl-ent" style="color:rgb(99,163,92);">producer-context</span>&gt;</pre>
</div>
<p style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
There are a few things going on here. So, lets go one by one. First of all, producer context is simply a holder of, as the name indicates, a context for the Kafka producer. It contains one ore more producer configurations. Each producer configuration is ultimately
 gets translated into a Kafka native producer. Each producer configuration is per topic based right now. If you go by the above example, there are two producers generated from this configuration - one for topic named test1 and another for test2. Each producer
 can take the following:</p>
<pre style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;line-height:1.45;overflow:auto;color:rgb(36,41,46);background-color:rgb(246,248,250);"><code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;border:0px;display:inline;overflow:visible;line-height:inherit;background:transparent;">broker-list				List of comma separated brokers that this producer connects to
topic					Topic name or Java regex pattern of topic name
compression-type		Compression method to be used. Supported compression types are `none`, `gzip` and `snappy`. Default is `none`.
value-serializer			Serializer to be used for encoding messages.
key-serializer				Serializer to be used for encoding the partition key
key-class-type			Type of the key class. This will be ignored if no key-encoder is provided
value-class-type		Type of the value class. This will be ignored if no value-encoder is provided.
partitioner				Custom implementation of a Kafka Partitioner interface.
batch-bytes		Number of bytes to batch at the producer. If async is false, then this has no effect.
</code></pre>
<p style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
The <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">value-serializer</code> and <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">key-serializer</code> are
 referring to other spring beans. They are essentially implementations of an interface provided by Kafka, the Serializer interface. Here is an example of configuring an encoder.</p>
<div class="highlight highlight-text-xml" style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
<pre style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;line-height:1.45;overflow:auto;background-color:rgb(246,248,250);">	&lt;<span class="pl-ent" style="color:rgb(99,163,92);">bean</span> <span class="pl-e" style="color:rgb(121,93,163);">id</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>kafkaSerializer<span class="pl-pds">"</span></span> <span class="pl-e" style="color:rgb(121,93,163);">class</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>com.acme.KryoSerializer<span class="pl-pds">"</span></span>/&gt;</pre>
</div>
<p style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
Spring Integration Kafka allows the reuse of pre-0.8.2 <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Encoder</code>s. To do so, the attributes <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">key-encoder</code> and <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">value-encoder</code>can
 be used instead of <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">key-serializer</code> and <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">value-serializer</code> respectively.
 For either the key or value, you can configure either a <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Serializer</code> or an <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Encoder</code> but
 not both.</p>
<p style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
Spring Integration Kafka provides Apache Avro backed encoders out of the box, as this is a popular choice for serialization in the big data spectrum. If no encoders are specified as beans, the default encoders provided by Kafka will be used. On that not, if
 the encoder is configured only for the message and not for the key, the same encoder will be used for both. These are standard Kafka behaviors. Spring Integration Kafka adapter does simply enforce those behaviours. Kafka default encoder expects the data to
 come as byte arrays and it is a no-op encoder, i.e. it just takes the byte array as it is. When default encoders are used, there are two ways a message can be sent. Either, the sender of the message to the channel can simply put byte arrays as message key
 and payload. Or, the key and value can be sent as Java Serializable object. In the latter case, the Kafka adapter will automatically convert them to byte arrays before sending to Kafka broker. If the encoders are default and the objects sent are not serializable,
 then that would cause an error. By providing explicit encoders it is totally up to the developer to configure how the objects are serialized. In that case, the objects may or may not implement the Serializable interface.</p>
<p style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
A bit more on the Avro support. There are two flavors of Avro encoders provided, one based on the Avro ReflectDatum and the other based on SpecificDatum. The encoding using reflection is fairly simple as you only have to configure your POJO or other class types
 along with the XML. Here is an example.</p>
<div class="highlight highlight-text-xml" style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
<pre style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;line-height:1.45;overflow:auto;background-color:rgb(246,248,250);">    &lt;<span class="pl-ent" style="color:rgb(99,163,92);">bean</span> <span class="pl-e" style="color:rgb(121,93,163);">id</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>kafkaEncoder<span class="pl-pds">"</span></span> <span class="pl-e" style="color:rgb(121,93,163);">class</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>org.springframework.integration.kafka.serializer.avro.AvroReflectDatumBackedKafkaEncoder<span class="pl-pds">"</span></span>&gt;
        &lt;<span class="pl-ent" style="color:rgb(99,163,92);">constructor-arg</span> <span class="pl-e" style="color:rgb(121,93,163);">value</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>java.lang.String<span class="pl-pds">"</span></span> /&gt;
    &lt;/<span class="pl-ent" style="color:rgb(99,163,92);">bean</span>&gt;</pre>
</div>
<p style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
Reflection based encoding may not be appropriate for large scale systems and Avro's SpecificDatum based encoders can be a better fit. In this case, you can generate a specific Avro object (a glorified POJO) from a schema definition. The generated object will
 store the schema as well. In order to do this, you need to generate the Avro object separately though. There are both maven and gradle plugins available to do code generation automatically. You have to provide the avdl or avsc files to specify your schema.
 Once you take care of these steps, you can simply configure a specific datum based Avro encoder (see the first example above) and pass along the fully qualified class name of the generated Avro object for which you want to encode instances. The samples project
 has examples of using both of these encoders.</p>
<p style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
Encoding String for key and value is a very common use case and Kafka provides a StringEncoder out of the box. It takes a Kafka specific VerifiableProperties object along with its constructor that wraps a regular Java.util.Properties object. The StringEncoder
 is great when writing a direct Java client that talks to Kafka. However, when using Spring Integration Kafka adapter, it introduces unnecessary steps to create these properties objects. Therefore, we provide a wrapper class for this same StringEncoder as part
 of the SI kafka support, which makes using it from Spring a bit easier. You can inject any properties to it in the Spring way. Kafka StringEncoder looks at a specific property for the type of encoding scheme used. In the wrapper bean provided, this property
 can simply be injected as a value without constructing any other objects. Spring Integration provided StringEncoder is available in the package org.springframework.integration.kafka.serializer.common.StringEncoder. The avro support for serialization is also
 available in a package called avro under serializer.</p>
<h4 style="font-size:16px;line-height:1.25;color:rgb(36,41,46);">
<a id="user-content-tuning-producer-properties" class="anchor" href="https://github.com/spring-projects/spring-integration-kafka/blob/1.3.x/README.md#tuning-producer-properties" rel="nofollow" style="color:rgb(3,102,214);text-decoration:none;margin-left:-20px;line-height:1;background-color:transparent;"></a>Tuning
 Producer Properties</h4>
<p style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
Kafka Producer API provides several [Producer Configs] (<a href="http://kafka.apache.org/documentation.html#producerconfigs" rel="nofollow" style="color:rgb(3,102,214);text-decoration:none;background-color:transparent;">http://kafka.apache.org/documentation.html#producerconfigs</a>)
 to fine-tune producers. To specify those properties, <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">producer-context</code> element supports optional <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">producer-properties</code> attribute
 that can reference the Spring properties bean. These properties will be applied to all Producer Configurations within the producer context. For example:</p>
<div class="highlight highlight-text-xml" style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
<pre style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;line-height:1.45;overflow:auto;background-color:rgb(246,248,250);">    &lt;<span class="pl-ent" style="color:rgb(99,163,92);">bean</span> <span class="pl-e" style="color:rgb(121,93,163);">id</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>producerProperties<span class="pl-pds">"</span></span> <span class="pl-e" style="color:rgb(121,93,163);">class</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>org.springframework.beans.factory.config.PropertiesFactoryBean<span class="pl-pds">"</span></span>&gt;
        &lt;<span class="pl-ent" style="color:rgb(99,163,92);">property</span> <span class="pl-e" style="color:rgb(121,93,163);">name</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>properties<span class="pl-pds">"</span></span>&gt;
          &lt;<span class="pl-ent" style="color:rgb(99,163,92);">props</span>&gt;
            &lt;<span class="pl-ent" style="color:rgb(99,163,92);">prop</span> <span class="pl-e" style="color:rgb(121,93,163);">key</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>topic.metadata.refresh.interval.ms<span class="pl-pds">"</span></span>&gt;3600000&lt;/<span class="pl-ent" style="color:rgb(99,163,92);">prop</span>&gt;
                    &lt;<span class="pl-ent" style="color:rgb(99,163,92);">prop</span> <span class="pl-e" style="color:rgb(121,93,163);">key</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>message.send.max.retries<span class="pl-pds">"</span></span>&gt;5&lt;/<span class="pl-ent" style="color:rgb(99,163,92);">prop</span>&gt;
                    &lt;<span class="pl-ent" style="color:rgb(99,163,92);">prop</span> <span class="pl-e" style="color:rgb(121,93,163);">key</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>send.buffer.bytes<span class="pl-pds">"</span></span>&gt;5242880&lt;/<span class="pl-ent" style="color:rgb(99,163,92);">prop</span>&gt;
          &lt;/<span class="pl-ent" style="color:rgb(99,163,92);">props</span>&gt;
        &lt;/<span class="pl-ent" style="color:rgb(99,163,92);">property</span>&gt;
    &lt;/<span class="pl-ent" style="color:rgb(99,163,92);">bean</span>&gt;

    &lt;<span class="pl-ent" style="color:rgb(99,163,92);">int-kafka</span><span class="pl-ent" style="color:rgb(99,163,92);">:</span><span class="pl-ent" style="color:rgb(99,163,92);">producer-context</span> <span class="pl-e" style="color:rgb(121,93,163);">id</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>kafkaProducerContext<span class="pl-pds">"</span></span> <span class="pl-e" style="color:rgb(121,93,163);">producer-properties</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>producerProperties<span class="pl-pds">"</span></span>&gt;
        &lt;<span class="pl-ent" style="color:rgb(99,163,92);">int-kafka</span><span class="pl-ent" style="color:rgb(99,163,92);">:</span><span class="pl-ent" style="color:rgb(99,163,92);">producer-configurations</span>&gt;
            &lt;<span class="pl-ent" style="color:rgb(99,163,92);">int-kafka</span><span class="pl-ent" style="color:rgb(99,163,92);">:</span><span class="pl-ent" style="color:rgb(99,163,92);">producer-configuration</span> ... &gt; ... &lt;/<span class="pl-ent" style="color:rgb(99,163,92);">int-kafka</span><span class="pl-ent" style="color:rgb(99,163,92);">:</span><span class="pl-ent" style="color:rgb(99,163,92);">producer-configuration</span>&gt;
            &lt;<span class="pl-ent" style="color:rgb(99,163,92);">int-kafka</span><span class="pl-ent" style="color:rgb(99,163,92);">:</span><span class="pl-ent" style="color:rgb(99,163,92);">producer-configuration</span> ... &gt; ... &lt;/<span class="pl-ent" style="color:rgb(99,163,92);">int-kafka</span><span class="pl-ent" style="color:rgb(99,163,92);">:</span><span class="pl-ent" style="color:rgb(99,163,92);">producer-configuration</span>&gt;
            ...
        &lt;<span class="pl-ent" style="color:rgb(99,163,92);">int-kafka</span><span class="pl-ent" style="color:rgb(99,163,92);">:</span><span class="pl-ent" style="color:rgb(99,163,92);">producer-configurations</span>&gt;
    &lt;/<span class="pl-ent" style="color:rgb(99,163,92);">int-kafka</span><span class="pl-ent" style="color:rgb(99,163,92);">:</span><span class="pl-ent" style="color:rgb(99,163,92);">producer-context</span>&gt;</pre>
</div>
<h2 style="line-height:1.25;border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(234,236,239);color:rgb(36,41,46);">
<a id="user-content-inbound-channel-adapter" class="anchor" href="https://github.com/spring-projects/spring-integration-kafka/blob/1.3.x/README.md#inbound-channel-adapter" rel="nofollow" style="color:rgb(3,102,214);text-decoration:none;margin-left:-20px;line-height:1;background-color:transparent;"></a>Inbound
 Channel Adapter:</h2>
<p style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
The Inbound channel adapter is used to consume messages from Kafka. These messages will be placed into a channel as Spring Integration specific Messages. Kafka provides two types of consumer API's primarily. One is called the High Level Consumer and the other
 is the Simple Consumer. High Level consumer is pretty complex inside. Nonetheless, for the client, using the high level API is straightforward. Although easy to use, High level consumer does not provide any offset management. So, if you want to rewind and
 re-fetch messages, it is not possible to do so using the High Level Consumer API. Offsets are managed by the Zookeeper internally in the High Level Consumer. If your use case does not require any offset management or re-reading messages from the same consumer,
 then high level consumer is a perfect fit. Spring Integration Kafka inbound channel adapter currently supports only the High Level Consumer. Here are the details of configuring one.</p>
<div class="highlight highlight-text-xml" style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
<pre style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;line-height:1.45;overflow:auto;background-color:rgb(246,248,250);">    &lt;<span class="pl-ent" style="color:rgb(99,163,92);">int-kafka</span><span class="pl-ent" style="color:rgb(99,163,92);">:</span><span class="pl-ent" style="color:rgb(99,163,92);">inbound-channel-adapter</span> <span class="pl-e" style="color:rgb(121,93,163);">id</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>kafkaInboundChannelAdapter<span class="pl-pds">"</span></span>
                                           <span class="pl-e" style="color:rgb(121,93,163);">kafka-consumer-context-ref</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>consumerContext<span class="pl-pds">"</span></span>
                                           <span class="pl-e" style="color:rgb(121,93,163);">auto-startup</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>false<span class="pl-pds">"</span></span>
                                           <span class="pl-e" style="color:rgb(121,93,163);">channel</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>inputFromKafka<span class="pl-pds">"</span></span>&gt;
            &lt;<span class="pl-ent" style="color:rgb(99,163,92);">int</span><span class="pl-ent" style="color:rgb(99,163,92);">:</span><span class="pl-ent" style="color:rgb(99,163,92);">poller</span> <span class="pl-e" style="color:rgb(121,93,163);">fixed-delay</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>10<span class="pl-pds">"</span></span> <span class="pl-e" style="color:rgb(121,93,163);">time-unit</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>MILLISECONDS<span class="pl-pds">"</span></span> <span class="pl-e" style="color:rgb(121,93,163);">max-messages-per-poll</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>5<span class="pl-pds">"</span></span>/&gt;
    &lt;/<span class="pl-ent" style="color:rgb(99,163,92);">int-kafka</span><span class="pl-ent" style="color:rgb(99,163,92);">:</span><span class="pl-ent" style="color:rgb(99,163,92);">inbound-channel-adapter</span>&gt;</pre>
</div>
<p style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
Since this inbound channel adapter uses a Polling Channel under the hood, it must be configured with a Poller. A notable difference between the poller configured with this inbound adapter and other pollers used in Spring Integration is that the receive-timeout
 specified on this poller does not have any effect. The reason for this is because of the way Kafka implements iterators on the consumer stream. It is using a BlockingQueue internally and thus it would wait indefinitely. Instead of interrupting the underlying
 thread, we are leveraging a direct Kafka support for consumer time out. It is configured on the consumer context. Everything else is pretty much the same as in a regular inbound adapter. Any message that it receives will be sent to the channel configured with
 it.</p>
<p style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
Inbound Kafka Adapter must specify a kafka-consumer-context-ref element and here is how it is configured:</p>
<div class="highlight highlight-text-xml" style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
<pre style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;line-height:1.45;overflow:auto;background-color:rgb(246,248,250);">   &lt;<span class="pl-ent" style="color:rgb(99,163,92);">int-kafka</span><span class="pl-ent" style="color:rgb(99,163,92);">:</span><span class="pl-ent" style="color:rgb(99,163,92);">consumer-context</span> <span class="pl-e" style="color:rgb(121,93,163);">id</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>consumerContext<span class="pl-pds">"</span></span>
                                   <span class="pl-e" style="color:rgb(121,93,163);">consumer-timeout</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>4000<span class="pl-pds">"</span></span>
                                   <span class="pl-e" style="color:rgb(121,93,163);">zookeeper-connect</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>zookeeperConnect<span class="pl-pds">"</span></span>&gt;
           &lt;<span class="pl-ent" style="color:rgb(99,163,92);">int-kafka</span><span class="pl-ent" style="color:rgb(99,163,92);">:</span><span class="pl-ent" style="color:rgb(99,163,92);">consumer-configurations</span>&gt;
               &lt;<span class="pl-ent" style="color:rgb(99,163,92);">int-kafka</span><span class="pl-ent" style="color:rgb(99,163,92);">:</span><span class="pl-ent" style="color:rgb(99,163,92);">consumer-configuration</span> <span class="pl-e" style="color:rgb(121,93,163);">group-id</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>default<span class="pl-pds">"</span></span>
                       <span class="pl-e" style="color:rgb(121,93,163);">value-decoder</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>valueDecoder<span class="pl-pds">"</span></span>
                       <span class="pl-e" style="color:rgb(121,93,163);">key-decoder</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>valueDecoder<span class="pl-pds">"</span></span>
                       <span class="pl-e" style="color:rgb(121,93,163);">max-messages</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>5000<span class="pl-pds">"</span></span>&gt;
                   &lt;<span class="pl-ent" style="color:rgb(99,163,92);">int-kafka</span><span class="pl-ent" style="color:rgb(99,163,92);">:</span><span class="pl-ent" style="color:rgb(99,163,92);">topic</span> <span class="pl-e" style="color:rgb(121,93,163);">id</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>test1<span class="pl-pds">"</span></span> <span class="pl-e" style="color:rgb(121,93,163);">streams</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>4<span class="pl-pds">"</span></span>/&gt;
                   &lt;<span class="pl-ent" style="color:rgb(99,163,92);">int-kafka</span><span class="pl-ent" style="color:rgb(99,163,92);">:</span><span class="pl-ent" style="color:rgb(99,163,92);">topic</span> <span class="pl-e" style="color:rgb(121,93,163);">id</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>test2<span class="pl-pds">"</span></span> <span class="pl-e" style="color:rgb(121,93,163);">streams</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>4<span class="pl-pds">"</span></span>/&gt;
               &lt;/<span class="pl-ent" style="color:rgb(99,163,92);">int-kafka</span><span class="pl-ent" style="color:rgb(99,163,92);">:</span><span class="pl-ent" style="color:rgb(99,163,92);">consumer-configuration</span>&gt;
               &lt;<span class="pl-ent" style="color:rgb(99,163,92);">int-kafka</span><span class="pl-ent" style="color:rgb(99,163,92);">:</span><span class="pl-ent" style="color:rgb(99,163,92);">consumer-configuration</span> <span class="pl-e" style="color:rgb(121,93,163);">group-id</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>default3<span class="pl-pds">"</span></span>
                        <span class="pl-e" style="color:rgb(121,93,163);">value-decoder</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>kafkaSpecificDecoder<span class="pl-pds">"</span></span>
                        <span class="pl-e" style="color:rgb(121,93,163);">key-decoder</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>kafkaReflectionDecoder<span class="pl-pds">"</span></span>
                        <span class="pl-e" style="color:rgb(121,93,163);">max-messages</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>10<span class="pl-pds">"</span></span>&gt;
                   &lt;<span class="pl-ent" style="color:rgb(99,163,92);">int-kafka</span><span class="pl-ent" style="color:rgb(99,163,92);">:</span><span class="pl-ent" style="color:rgb(99,163,92);">topic-filter</span> <span class="pl-e" style="color:rgb(121,93,163);">pattern</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>regextopic.*<span class="pl-pds">"</span></span> <span class="pl-e" style="color:rgb(121,93,163);">streams</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>4<span class="pl-pds">"</span></span> <span class="pl-e" style="color:rgb(121,93,163);">exclude</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>false<span class="pl-pds">"</span></span>/&gt;
               &lt;/<span class="pl-ent" style="color:rgb(99,163,92);">int-kafka</span><span class="pl-ent" style="color:rgb(99,163,92);">:</span><span class="pl-ent" style="color:rgb(99,163,92);">consumer-configuration</span>&gt;
           &lt;/<span class="pl-ent" style="color:rgb(99,163,92);">int-kafka</span><span class="pl-ent" style="color:rgb(99,163,92);">:</span><span class="pl-ent" style="color:rgb(99,163,92);">consumer-configurations</span>&gt;
   &lt;/<span class="pl-ent" style="color:rgb(99,163,92);">int-kafka</span><span class="pl-ent" style="color:rgb(99,163,92);">:</span><span class="pl-ent" style="color:rgb(99,163,92);">consumer-context</span>&gt;</pre>
</div>
<p style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
<code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">consumer-configuration</code> supports consuming from specific topic using a <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">topic</code> child
 element or from multiple topics matching a topic regex using <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">topic-filter</code> child element. <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">topic-filter</code> supports
 both whitelist and blacklist filter based on<code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">exclude</code> attribute.</p>
<p style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
Consumer context requires a reference to a zookeeper-connect which dictates all the zookeeper specific configuration details. Here is how a zookeeper-connect is configured.</p>
<div class="highlight highlight-text-xml" style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
<pre style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;line-height:1.45;overflow:auto;background-color:rgb(246,248,250);">    &lt;<span class="pl-ent" style="color:rgb(99,163,92);">int-kafka</span><span class="pl-ent" style="color:rgb(99,163,92);">:</span><span class="pl-ent" style="color:rgb(99,163,92);">zookeeper-connect</span> <span class="pl-e" style="color:rgb(121,93,163);">id</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>zookeeperConnect<span class="pl-pds">"</span></span> <span class="pl-e" style="color:rgb(121,93,163);">zk-connect</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>localhost:2181<span class="pl-pds">"</span></span> <span class="pl-e" style="color:rgb(121,93,163);">zk-connection-timeout</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>6000<span class="pl-pds">"</span></span>
                        <span class="pl-e" style="color:rgb(121,93,163);">zk-session-timeout</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>6000<span class="pl-pds">"</span></span>
                        <span class="pl-e" style="color:rgb(121,93,163);">zk-sync-time</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>2000<span class="pl-pds">"</span></span> /&gt;</pre>
</div>
<p style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
zk-connect attribute is where you would specify the zookeeper connection. All the other attributes get translated into their zookeeper counter-part attributes by the consumer.</p>
<p style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
In the above consumer context, you can also specify a consumer-timeout value which would be used to timeout the consumer in case of no messages to consume. This timeout would be applicable to all the streams (threads) in the consumer. The default value for
 this in Kafka is -1 which would make it wait indefinitely. However, Sping Integration overrides it to be 5 seconds by default in order to make sure that no threads are blocking indefinitely in the lifecycle of the application and thereby giving them a chance
 to free up any resources or locks that they hold. It is recommended to override this value so as to meet any specific use case requirements. By providing a reasonable consumer-timeout on the context and a fixed-delay value on the poller, this inbound adapter
 is capable of simulating a message driven behaviour.</p>
<p style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
consumer context takes consumer-configurations which are at the core of the inbound adapter. It is a group of one or more consumer-configuration elements which consists of a consumer group dictated by the group-id. Each consumer-configuration can be configured
 with one or more kafka-topics.</p>
<p style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
In the above example provided, we have a single consumer-configuration that consumes messages from two topics each having 4 streams. These streams are fundamentally equivalent to the number of partitions that a topic is configured with in the producer. For
 instance, if you configure your topic with 4 partitions, then the maximum number of streams that you may have in the consumer is also 4. Any more than this would be a no-op. If you have less number of streams than the available partitions, then messages from
 multiple partitions will be sent to available streams. Therefore, it is a good practice to limit the number of streams for a topic in the consumer configuration to the number of partitions configured for the topic. There may be situations in which a partition
 may be gone during runtime and in that case the stream receiving data from the partition will simply timeout and whenever this partition comes back, it would start read data from it again.</p>
<p style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
Consumer configuration can also be configured with optional decoders for key and value. The default decoders provided by Kafka are basically no-ops and would consume as byte arrays. If you provide a custom encoder for key/value in the producer, then it is recommended
 to provide corresponding decoders for the consumer. As discussed already in the outbound adapter, Spring Integration Kafka adapter gives Apache Avro based data serialization components out of the box. You can use any serialization component for this purpose
 as long as you implement the required encoder/decoder interfaces from Kafka. As with the Avro encoder support, decoders provided also implement Reflection and Specific datum based de-serialization. Here is how you would configure kafka decoder beans that is
 Avro backed.</p>
<h2 style="line-height:1.25;border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(234,236,239);color:rgb(36,41,46);">
<a id="user-content-message-driven-channel-adapter" class="anchor" href="https://github.com/spring-projects/spring-integration-kafka/blob/1.3.x/README.md#message-driven-channel-adapter" rel="nofollow" style="color:rgb(3,102,214);text-decoration:none;margin-left:-20px;line-height:1;background-color:transparent;"></a>Message
 Driven Channel Adapter:</h2>
<p style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
The <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">KafkaMessageDrivenChannelAdapter</code> (<code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">&lt;int-kafka:message-driven-channel-adapter&gt;</code>)
 uses the Kafka<code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">SimpleConsumer</code>(<a href="https://cwiki.apache.org/confluence/display/KAFKA/0.8.0+SimpleConsumer+Example" rel="nofollow" style="color:rgb(3,102,214);text-decoration:none;background-color:transparent;">https://cwiki.apache.org/confluence/display/KAFKA/0.8.0+SimpleConsumer+Example</a>)
 internally. Although it is called 'simple', the API and usage is not so simple. To simplify the configuration and provide a higher-level API based on Spring Integration concepts, the <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">KafkaMessageListenerContainer</code> has
 been introduced. It supports 'leader election' with<code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">org.springframework.integration.kafka.core.ConnectionFactory</code> and
 'offset management' with<code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">org.springframework.integration.kafka.listener.OffsetManager</code> abstractions. The <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">DefaultConnectionFactory</code> requires<code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">org.springframework.integration.kafka.core.Configuration</code> for
 Kafka. <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">ZookeeperConfiguration</code> and<code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">BrokerAddressListConfiguration</code> are
 presented as configuration options.</p>
<p style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
The <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">KafkaMessageDrivenChannelAdapter</code> implements <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">MessageProducer</code>,
 reads a <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">KafkaMessage</code> with its <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Metadata</code> and
 sends it as a Spring Integration message to the provided <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">MessageChannel</code>. The <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">KafkaMessageListenerContainer</code> or<code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">ConnectionFactory</code> and <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">topics</code> pair
 are required for the <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">MessageDrivenChannelAdapter</code> configuration. The typical Java based configuration is:</p>
<div class="highlight highlight-source-java" style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
<pre style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;line-height:1.45;overflow:auto;background-color:rgb(246,248,250);"><span class="pl-k" style="color:rgb(167,29,93);">@Bean</span>
<span class="pl-k" style="color:rgb(167,29,93);">public</span> <span class="pl-smi" style="color:rgb(51,51,51);">Configuration</span> zkConfiguration() {
   <span class="pl-k" style="color:rgb(167,29,93);">return</span> <span class="pl-k" style="color:rgb(167,29,93);">new</span> <span class="pl-smi" style="color:rgb(51,51,51);">ZookeeperConfiguration</span>(<span class="pl-k" style="color:rgb(167,29,93);">new</span> <span class="pl-smi" style="color:rgb(51,51,51);">ZookeeperConnect</span>());
}

<span class="pl-k" style="color:rgb(167,29,93);">@Bean</span>
<span class="pl-k" style="color:rgb(167,29,93);">public</span> <span class="pl-smi" style="color:rgb(51,51,51);">ConnectionFactory</span> kafkaConnectionFactory() {
   <span class="pl-k" style="color:rgb(167,29,93);">return</span> <span class="pl-k" style="color:rgb(167,29,93);">new</span> <span class="pl-smi" style="color:rgb(51,51,51);">DefaultConnectionFactory</span>(zkConfiguration());
}

<span class="pl-k" style="color:rgb(167,29,93);">@Bean</span>
<span class="pl-k" style="color:rgb(167,29,93);">public</span> <span class="pl-smi" style="color:rgb(51,51,51);">MessageProducer</span> kafkaMessageDrivenChannelAdapter() {
   <span class="pl-smi" style="color:rgb(51,51,51);">KafkaMessageDrivenChannelAdapter</span> adapter <span class="pl-k" style="color:rgb(167,29,93);">=</span> <span class="pl-k" style="color:rgb(167,29,93);">new</span> <span class="pl-smi" style="color:rgb(51,51,51);">KafkaMessageDrivenChannelAdapter</span>(
   					<span class="pl-k" style="color:rgb(167,29,93);">new</span> <span class="pl-smi" style="color:rgb(51,51,51);">KafkaMessageListenerContainer</span>(kafkaConnectionFactory(), <span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>topic1<span class="pl-pds">"</span></span>, <span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>topic2<span class="pl-pds">"</span></span>)
   					);
   adapter<span class="pl-k" style="color:rgb(167,29,93);">.</span>setOutputChannel(inputChannel());
   <span class="pl-k" style="color:rgb(167,29,93);">return</span> adapter;
}</pre>
</div>
<p style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
As a variant, the <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">KafkaMessageListenerContainer</code> can accept <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">org.springframework.integration.kafka.core.Partition</code>array
 argument to specify topics and their partitions pair.</p>
<p style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
The xml configuration variant is typical too:</p>
<div class="highlight highlight-text-xml" style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
<pre style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;line-height:1.45;overflow:auto;background-color:rgb(246,248,250);">&lt;<span class="pl-ent" style="color:rgb(99,163,92);">int-kafka</span><span class="pl-ent" style="color:rgb(99,163,92);">:</span><span class="pl-ent" style="color:rgb(99,163,92);">message-driven-channel-adapter</span>
			id=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>adapter<span class="pl-pds">"</span></span>
			channel=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>output<span class="pl-pds">"</span></span>
			connection-factory=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>connectionFactory<span class="pl-pds">"</span></span>
			key-decoder=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>decoder<span class="pl-pds">"</span></span>
			payload-decoder=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>decoder<span class="pl-pds">"</span></span>
			offset-manager=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>offsetManager<span class="pl-pds">"</span></span>
			max-fetch=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>100<span class="pl-pds">"</span></span>
			topics=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>${kafka.test.topic}<span class="pl-pds">"</span></span>/&gt;</pre>
</div>
<p style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
Where <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">offsetManager</code> is a bean that is an implementation of<code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">org.springframework.integration.kafka.listener.OffsetManager</code>.
 The default implementation is<code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">MetadataStoreOffsetManager</code>, which is based on the <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">MetadataStore</code> to
 store and fetch <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">offsets</code> under the key based on the provided <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">Partition</code> and
 preconfigured <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">consumerId</code> option. The <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">KafkaMessageListenerContainer</code> takes
 care about<code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">offsets</code> management during its internal process. Another implementation is <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">KafkaTopicOffsetManager</code> to
 free application from any other external system like Redis for the <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">MetadataStoreOffsetManager</code>.</p>
<p style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
The <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">KafkaMessageListenerContainer</code> can be configured with <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">concurrency</code> to
 run several internal<code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">QueueingMessageListenerInvoker</code> concurrent fetch tasks.</p>
<p style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
Refer to the <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">KafkaMessageDrivenChannelAdapter</code> and <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">KafkaMessageListenerContainer</code> JavaDocs
 for more information.</p>
<p style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
Using Avro Specific support:</p>
<div class="highlight highlight-text-xml" style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
<pre style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;line-height:1.45;overflow:auto;background-color:rgb(246,248,250);">   &lt;<span class="pl-ent" style="color:rgb(99,163,92);">bean</span> <span class="pl-e" style="color:rgb(121,93,163);">id</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>kafkaDecoder<span class="pl-pds">"</span></span> <span class="pl-e" style="color:rgb(121,93,163);">class</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>org.springframework.integration.kafka.serializer.avro.AvroSpecificDatumBackedKafkaDecoder<span class="pl-pds">"</span></span>&gt;
           &lt;<span class="pl-ent" style="color:rgb(99,163,92);">constructor-arg</span> <span class="pl-e" style="color:rgb(121,93,163);">value</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>com.domain.AvroGeneratedSpecificRecord<span class="pl-pds">"</span></span> /&gt;
   &lt;/<span class="pl-ent" style="color:rgb(99,163,92);">bean</span>&gt;</pre>
</div>
<p style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
Using Reflection support:</p>
<div class="highlight highlight-text-xml" style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
<pre style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;line-height:1.45;overflow:auto;background-color:rgb(246,248,250);">   &lt;<span class="pl-ent" style="color:rgb(99,163,92);">bean</span> <span class="pl-e" style="color:rgb(121,93,163);">id</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>kafkaDecoder<span class="pl-pds">"</span></span> <span class="pl-e" style="color:rgb(121,93,163);">class</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>org.springframework.integration.kafka.serializer.avro.AvroReflectDatumBackedKafkaDecoder<span class="pl-pds">"</span></span>&gt;
           &lt;<span class="pl-ent" style="color:rgb(99,163,92);">constructor-arg</span> <span class="pl-e" style="color:rgb(121,93,163);">value</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>java.lang.String<span class="pl-pds">"</span></span> /&gt;
   &lt;/<span class="pl-ent" style="color:rgb(99,163,92);">bean</span>&gt;</pre>
</div>
<p style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
Another important attribute for the consumer-configuration is the max-messages. Please note that this is different from the max-messages-per-poll configured on the inbound adapter element. There it means the number of times the receive method called on the
 adapter. The max-messages on consumer configuration is different. When you use Kafka for ingesting messages, it usually means an influx of large amount of data constantly. Because of this, each time a receive is invoked on the adapter, you would basically
 get a collection of messages. The maximum number of messages to retrieve for a topic in each execution of the receive is what configured through the max-messages attribute on the consumer-configuration. Basically, if the use case is to receive a constant stream
 of large number of data, simply specifying a consumer-timeout alone would not be enough. You would also need to specify the max number of messages to receive.</p>
<p style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
The type of the payload of the Message returned by the adapter is the following:</p>
<div class="highlight highlight-source-java" style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
<pre style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;line-height:1.45;overflow:auto;background-color:rgb(246,248,250);"><span class="pl-k" style="color:rgb(167,29,93);">Map&lt;<span class="pl-smi" style="color:rgb(51,51,51);">String</span>, <span class="pl-k">Map&lt;<span class="pl-smi" style="color:rgb(51,51,51);">Integer</span>, <span class="pl-k">List&lt;<span class="pl-smi" style="color:rgb(51,51,51);">Object</span>&gt;</span>&gt;</span>&gt;</span></pre>
</div>
<p style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
It is a java.util.Map that contains the topic string consumed as the key and another Map as the value. The inner map's key is the stream (partition) number and value is a list of message payloads. The reason for this complex return type is due to the way Kafka
 orders the messages. In the high level consumer, all the messages received in a single stream for a single partition are guaranteed to be in order. For example, if I have a topic named test configured with 4 partitions and I have 4 corresponding streams in
 the consumer, then I would receive data in all the consumer streams in the same order as they were put in the corresponding partitions. This is another reason to set the number of consumer streams for a topic same as the number of broker partitions configured
 for that topic. Lets say that the number of streams are less than the number of partitions. Then, normally, there is no guarantee for any order other than just the fact that a single stream will contain messages from multiple partitions and the messages from
 a given single partition received will still be kept contiguously. By that time probably there is no way to find out which set of messages came from which partition. By providing this complex map that contains the partition information for the topic, we make
 sure that the order sent by the producer is preserved even if the number of streams used was less than the number of broker partitions.</p>
<p style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
A downstream component which receives the data from the inbound adapter can cast the SI payload to the above Map.</p>
<p style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
If your use case does not require ordering of messages during consumption, then you can easily pass this payload to a standard SI transformer and just get a full dump of the actual payload sent by Kafka.</p>
<h4 style="font-size:16px;line-height:1.25;color:rgb(36,41,46);">
<a id="user-content-tuning-consumer-properties" class="anchor" href="https://github.com/spring-projects/spring-integration-kafka/blob/1.3.x/README.md#tuning-consumer-properties" rel="nofollow" style="color:rgb(3,102,214);text-decoration:none;margin-left:-20px;line-height:1;background-color:transparent;"></a>Tuning
 Consumer Properties</h4>
<p style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
Kafka Consumer API provides several [Consumer Configs] (<a href="http://kafka.apache.org/documentation.html#consumerconfigs" rel="nofollow" style="color:rgb(3,102,214);text-decoration:none;background-color:transparent;">http://kafka.apache.org/documentation.html#consumerconfigs</a>)
 to fine tune consumers. To specify those properties, <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">consumer-context</code> element supports optional <code style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;">consumer-properties</code>attribute
 that can reference the spring properties bean. This properties will be applied to all Consumer Configurations within the consumer context. For Eg:</p>
<div class="highlight highlight-text-xml" style="color:rgb(36,41,46);font-size:16px;line-height:24px;">
<pre style="font-family:'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;font-size:13.6px;line-height:1.45;overflow:auto;background-color:rgb(246,248,250);">    &lt;<span class="pl-ent" style="color:rgb(99,163,92);">bean</span> <span class="pl-e" style="color:rgb(121,93,163);">id</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>consumerProperties<span class="pl-pds">"</span></span> <span class="pl-e" style="color:rgb(121,93,163);">class</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>org.springframework.beans.factory.config.PropertiesFactoryBean<span class="pl-pds">"</span></span>&gt;
        &lt;<span class="pl-ent" style="color:rgb(99,163,92);">property</span> <span class="pl-e" style="color:rgb(121,93,163);">name</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>properties<span class="pl-pds">"</span></span>&gt;
            &lt;<span class="pl-ent" style="color:rgb(99,163,92);">props</span>&gt;
                &lt;<span class="pl-ent" style="color:rgb(99,163,92);">prop</span> <span class="pl-e" style="color:rgb(121,93,163);">key</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>auto.offset.reset<span class="pl-pds">"</span></span>&gt;smallest&lt;/<span class="pl-ent" style="color:rgb(99,163,92);">prop</span>&gt;
                &lt;<span class="pl-ent" style="color:rgb(99,163,92);">prop</span> <span class="pl-e" style="color:rgb(121,93,163);">key</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>socket.receive.buffer.bytes<span class="pl-pds">"</span></span>&gt;10485760&lt;/<span class="pl-ent" style="color:rgb(99,163,92);">prop</span>&gt; <span class="pl-c" style="color:rgb(150,152,150);"><span class="pl-c">&lt;!--</span> 10M <span class="pl-c">--&gt;</span></span>
                &lt;<span class="pl-ent" style="color:rgb(99,163,92);">prop</span> <span class="pl-e" style="color:rgb(121,93,163);">key</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>fetch.message.max.bytes<span class="pl-pds">"</span></span>&gt;5242880&lt;/<span class="pl-ent" style="color:rgb(99,163,92);">prop</span>&gt;
                &lt;<span class="pl-ent" style="color:rgb(99,163,92);">prop</span> <span class="pl-e" style="color:rgb(121,93,163);">key</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>auto.commit.interval.ms<span class="pl-pds">"</span></span>&gt;1000&lt;/<span class="pl-ent" style="color:rgb(99,163,92);">prop</span>&gt;
            &lt;/<span class="pl-ent" style="color:rgb(99,163,92);">props</span>&gt;
        &lt;/<span class="pl-ent" style="color:rgb(99,163,92);">property</span>&gt;
    &lt;/<span class="pl-ent" style="color:rgb(99,163,92);">bean</span>&gt;

    &lt;<span class="pl-ent" style="color:rgb(99,163,92);">int-kafka</span><span class="pl-ent" style="color:rgb(99,163,92);">:</span><span class="pl-ent" style="color:rgb(99,163,92);">consumer-context</span> <span class="pl-e" style="color:rgb(121,93,163);">id</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>consumerContext<span class="pl-pds">"</span></span>
            <span class="pl-e" style="color:rgb(121,93,163);">consumer-timeout</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>1000<span class="pl-pds">"</span></span>
            <span class="pl-e" style="color:rgb(121,93,163);">zookeeper-connect</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>zookeeperConnect<span class="pl-pds">"</span></span> <span class="pl-e" style="color:rgb(121,93,163);">consumer-properties</span>=<span class="pl-s" style="color:rgb(24,54,145);"><span class="pl-pds">"</span>consumerProperties<span class="pl-pds">"</span></span>&gt;
        &lt;<span class="pl-ent" style="color:rgb(99,163,92);">int-kafka</span><span class="pl-ent" style="color:rgb(99,163,92);">:</span><span class="pl-ent" style="color:rgb(99,163,92);">consumer-configurations</span>&gt;
            &lt;<span class="pl-ent" style="color:rgb(99,163,92);">int-kafka</span><span class="pl-ent" style="color:rgb(99,163,92);">:</span><span class="pl-ent" style="color:rgb(99,163,92);">consumer-configuration</span> ... &gt; ... &lt;/<span class="pl-ent" style="color:rgb(99,163,92);">int-kafka</span><span class="pl-ent" style="color:rgb(99,163,92);">:</span><span class="pl-ent" style="color:rgb(99,163,92);">consumer-configuration</span>&gt;
            &lt;<span class="pl-ent" style="color:rgb(99,163,92);">int-kafka</span><span class="pl-ent" style="color:rgb(99,163,92);">:</span><span class="pl-ent" style="color:rgb(99,163,92);">consumer-configuration</span> ... &gt; ... &lt;/<span class="pl-ent" style="color:rgb(99,163,92);">int-kafka</span><span class="pl-ent" style="color:rgb(99,163,92);">:</span><span class="pl-ent" style="color:rgb(99,163,92);">consumer-configuration</span>&gt;
            ...
        &lt;/&lt;<span class="pl-ent" style="color:rgb(99,163,92);">int-kafka</span><span class="pl-ent" style="color:rgb(99,163,92);">:</span><span class="pl-ent" style="color:rgb(99,163,92);">consumer-configurations</span>&gt;&gt;
    &lt;/<span class="pl-ent" style="color:rgb(99,163,92);">int-kafka</span><span class="pl-ent" style="color:rgb(99,163,92);">:</span><span class="pl-ent" style="color:rgb(99,163,92);">producer-context</span>&gt;</pre>
</div>
            </div>
                </div>