---
layout:     post
title:      zookeep+kafka消息队列-环境搭建（windows）
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                <h1 style="margin-top:10px;margin-bottom:10px;padding:0px;color:rgb(0,0,0);line-height:1.5;font-family:Verdana, Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);"></h1><h2 style="padding:0px;font-family:'-apple-system', 'SF UI Text', Arial, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'WenQuanYi Micro Hei', sans-serif, SimHei, SimSun;background-color:rgb(255,255,255);">一、Kafka简介</h2><h3 style="padding:0px;font-family:'-apple-system', 'SF UI Text', Arial, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'WenQuanYi Micro Hei', sans-serif, SimHei, SimSun;background-color:rgb(255,255,255);">1 Kafka诞生</h3><p style="font-family:'-apple-system', 'SF UI Text', Arial, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'WenQuanYi Micro Hei', sans-serif, SimHei, SimSun;background-color:rgb(255,255,255);">Kafka由 <span style="font-weight:700;">linked-in</span> 开源 <br>kafka-即是解决上述这类问题的一个框架，它实现了生产者和消费者之间的无缝连接。 <br>kafka-高产出的分布式消息系统(A high-throughput distributed messaging system)</p><p></p><h3 style="padding:0px;font-family:'-apple-system', 'SF UI Text', Arial, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'WenQuanYi Micro Hei', sans-serif, SimHei, SimSun;background-color:rgb(255,255,255);">2.1 Kafka的特性</h3><ul style="list-style:none;color:rgb(51,51,51);font-family:'-apple-system', 'SF UI Text', Arial, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'WenQuanYi Micro Hei', sans-serif, SimHei, SimSun;font-size:14px;background-color:rgb(255,255,255);"><li style="padding:0px;"><span style="font-weight:700;">高吞吐量、低延迟</span>：kafka每秒可以处理几十万条消息，它的延迟最低只有几毫秒</li><li style="padding:0px;"><span style="font-weight:700;">可扩展性</span>：kafka集群支持热扩展</li><li style="padding:0px;"><span style="font-weight:700;">持久性、可靠性</span>：消息被持久化到本地磁盘，并且支持数据备份防止数据丢失</li><li style="padding:0px;"><span style="font-weight:700;">容错性</span>：允许集群中节点失败（若副本数量为n,则允许n-1个节点失败）</li><li style="padding:0px;"><span style="font-weight:700;">高并发</span>：支持数千个客户端同时读写</li></ul><h3 style="padding:0px;font-family:'-apple-system', 'SF UI Text', Arial, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'WenQuanYi Micro Hei', sans-serif, SimHei, SimSun;background-color:rgb(255,255,255);">2.2 Kafka一些重要设计思想</h3><p style="font-family:'-apple-system', 'SF UI Text', Arial, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'WenQuanYi Micro Hei', sans-serif, SimHei, SimSun;background-color:rgb(255,255,255);">下面介绍先大体介绍一下Kafka的主要设计思想，可以让相关人员在短时间内了解到kafka相关特性，如果想深入研究，后面会对其中每一个特性都做详细介绍。</p><ul style="list-style:none;color:rgb(51,51,51);font-family:'-apple-system', 'SF UI Text', Arial, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'WenQuanYi Micro Hei', sans-serif, SimHei, SimSun;font-size:14px;background-color:rgb(255,255,255);"><li style="padding:0px;"><span style="font-weight:700;">Consumergroup</span>：各个consumer可以组成一个组，每个消息只能被组中的一个consumer消费，如果一个消息可以被多个consumer消费的话，那么这些consumer必须在不同的组。</li><li style="padding:0px;"><span style="font-weight:700;">消息状态</span>：在Kafka中，消息的状态被保存在consumer中，broker不会关心哪个消息被消费了被谁消费了，只记录一个offset值（指向partition中下一个要被消费的消息位置），这就意味着如果consumer处理不好的话，broker上的一个消息可能会被消费多次。</li><li style="padding:0px;"><span style="font-weight:700;">消息持久化</span>：Kafka中会把消息持久化到本地文件系统中，并且保持极高的效率。</li><li style="padding:0px;"><span style="font-weight:700;">消息有效期</span>：Kafka会长久保留其中的消息，以便consumer可以多次消费，当然其中很多细节是可配置的。</li><li style="padding:0px;"><span style="font-weight:700;">批量发送</span>：Kafka支持以消息集合为单位进行批量发送，以提高push效率。</li><li style="padding:0px;"><span style="font-weight:700;">push-and-pull</span> : Kafka中的Producer和consumer采用的是push-and-pull模式，即Producer只管向broker push消息，consumer只管从broker pull消息，两者对消息的生产和消费是异步的。</li><li style="padding:0px;"><span style="font-weight:700;">Kafka集群中broker之间的关系</span>：不是主从关系，各个broker在集群中地位一样，我们可以随意的增加或删除任何一个broker节点。</li><li style="padding:0px;"><span style="font-weight:700;">负载均衡方面</span>： Kafka提供了一个 metadata API来管理broker之间的负载（对Kafka0.8.x而言，对于0.7.x主要靠zookeeper来实现负载均衡）。</li><li style="padding:0px;"><span style="font-weight:700;">同步异步</span>：Producer采用异步push方式，极大提高Kafka系统的吞吐率（可以通过参数控制是采用同步还是异步方式）。</li><li style="padding:0px;"><span style="font-weight:700;">分区机制partition</span>：Kafka的broker端支持消息分区，Producer可以决定把消息发到哪个分区，在一个分区中消息的顺序就是Producer发送消息的顺序，一个主题中可以有多个分区，具体分区的数量是可配置的。分区的意义很重大，后面的内容会逐渐体现。</li><li style="padding:0px;"><span style="font-weight:700;">离线数据装载</span>：Kafka由于对可拓展的数据持久化的支持，它也非常适合向Hadoop或者数据仓库中进行数据装载。</li><li style="padding:0px;"><span style="font-weight:700;">插件支持</span>：现在不少活跃的社区已经开发出不少插件来拓展Kafka的功能，如用来配合Storm、Hadoop、flume相关的插件。</li></ul><h3 style="padding:0px;font-family:'-apple-system', 'SF UI Text', Arial, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'WenQuanYi Micro Hei', sans-serif, SimHei, SimSun;background-color:rgb(255,255,255);"><a></a>2.3 kafka 应用场景</h3><ul style="list-style:none;color:rgb(51,51,51);font-family:'-apple-system', 'SF UI Text', Arial, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'WenQuanYi Micro Hei', sans-serif, SimHei, SimSun;font-size:14px;background-color:rgb(255,255,255);"><li style="padding:0px;"><span style="font-weight:700;">日志收集</span>：一个公司可以用Kafka可以收集各种服务的log，通过kafka以统一接口服务的方式开放给各种consumer，例如hadoop、Hbase、Solr等。</li><li style="padding:0px;"><span style="font-weight:700;">消息系统</span>：解耦和生产者和消费者、缓存消息等。</li><li style="padding:0px;"><span style="font-weight:700;">用户活动跟踪</span>：Kafka经常被用来记录web用户或者app用户的各种活动，如浏览网页、搜索、点击等活动，这些活动信息被各个服务器发布到kafka的topic中，然后订阅者通过订阅这些topic来做实时的监控分析，或者装载到hadoop、数据仓库中做离线分析和挖掘。</li><li style="padding:0px;"><span style="font-weight:700;">运营指标</span>：Kafka也经常用来记录运营监控数据。包括收集各种分布式应用的数据，生产各种操作的集中反馈，比如报警和报告。</li><li style="padding:0px;"><span style="font-weight:700;">流式处理</span>：比如spark streaming和storm</li><li style="padding:0px;"><span style="font-weight:700;">事件源</span></li></ul><ul style="list-style:none;color:rgb(51,51,51);font-family:'-apple-system', 'SF UI Text', Arial, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'WenQuanYi Micro Hei', sans-serif, SimHei, SimSun;font-size:14px;background-color:rgb(255,255,255);"><li style="padding:0px;"><span style="font-weight:700;"></span></li></ul><h3 style="padding:0px;font-family:'-apple-system', 'SF UI Text', Arial, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'WenQuanYi Micro Hei', sans-serif, SimHei, SimSun;background-color:rgb(255,255,255);">2.4 Kafka架构组件</h3><p style="font-family:'-apple-system', 'SF UI Text', Arial, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'WenQuanYi Micro Hei', sans-serif, SimHei, SimSun;background-color:rgb(255,255,255);">Kafka中发布订阅的对象是topic。我们可以为每类数据创建一个topic，把向topic发布消息的客户端称作producer，从topic订阅消息的客户端称作consumer。Producers和consumers可以同时从多个topic读写数据。一个kafka集群由一个或多个broker服务器组成，它负责持久化和备份具体的kafka消息。</p><ul style="list-style:none;color:rgb(51,51,51);font-family:'-apple-system', 'SF UI Text', Arial, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'WenQuanYi Micro Hei', sans-serif, SimHei, SimSun;font-size:14px;background-color:rgb(255,255,255);"><li style="padding:0px;">topic：消息存放的目录即主题</li><li style="padding:0px;">Producer：生产消息到topic的一方</li><li style="padding:0px;">Consumer：订阅topic消费消息的一方</li><li style="padding:0px;">Broker：Kafka的服务实例就是一个broker</li></ul><p style="font-family:'-apple-system', 'SF UI Text', Arial, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'WenQuanYi Micro Hei', sans-serif, SimHei, SimSun;background-color:rgb(255,255,255);"><img src="http://kafka.apache.org/images/producer_consumer.png" alt="" title="" style="margin-top:24px;margin-bottom:24px;"></p><p style="font-family:'-apple-system', 'SF UI Text', Arial, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'WenQuanYi Micro Hei', sans-serif, SimHei, SimSun;background-color:rgb(255,255,255);"></p><h2 style="padding:0px;font-family:'-apple-system', 'SF UI Text', Arial, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'WenQuanYi Micro Hei', sans-serif, SimHei, SimSun;background-color:rgb(255,255,255);">三、Kafka核心特性</h2><h3 style="padding:0px;font-family:'-apple-system', 'SF UI Text', Arial, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'WenQuanYi Micro Hei', sans-serif, SimHei, SimSun;background-color:rgb(255,255,255);"><a></a>3.1 压缩</h3><p style="font-family:'-apple-system', 'SF UI Text', Arial, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'WenQuanYi Micro Hei', sans-serif, SimHei, SimSun;background-color:rgb(255,255,255);">我们上面已经知道了Kafka支持以集合（batch）为单位发送消息，在此基础上，Kafka还支持对消息集合进行压缩，Producer端可以通过GZIP或Snappy格式对消息集合进行压缩。Producer端进行压缩之后，在Consumer端需进行解压。压缩的好处就是减少传输的数据量，减轻对网络传输的压力，在对大数据处理上，瓶颈往往体现在网络上而不是CPU（压缩和解压会耗掉部分CPU资源）。 <br>那么如何区分消息是压缩的还是未压缩的呢，Kafka在消息头部添加了一个描述压缩属性字节，这个字节的后两位表示消息的压缩采用的编码，如果后两位为0，则表示消息未被压缩。</p><h3 style="padding:0px;font-family:'-apple-system', 'SF UI Text', Arial, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'WenQuanYi Micro Hei', sans-serif, SimHei, SimSun;background-color:rgb(255,255,255);"><a></a>3.2消息可靠性</h3><p style="font-family:'-apple-system', 'SF UI Text', Arial, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'WenQuanYi Micro Hei', sans-serif, SimHei, SimSun;background-color:rgb(255,255,255);">在消息系统中，保证消息在生产和消费过程中的可靠性是十分重要的，在实际消息传递过程中，可能会出现如下三中情况：</p><ul style="list-style:none;color:rgb(51,51,51);font-family:'-apple-system', 'SF UI Text', Arial, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'WenQuanYi Micro Hei', sans-serif, SimHei, SimSun;font-size:14px;background-color:rgb(255,255,255);"><li style="padding:0px;">一个消息发送失败</li><li style="padding:0px;">一个消息被发送多次</li><li style="padding:0px;">最理想的情况：exactly-once ,一个消息发送成功且仅发送了一次</li></ul><p style="font-family:'-apple-system', 'SF UI Text', Arial, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'WenQuanYi Micro Hei', sans-serif, SimHei, SimSun;background-color:rgb(255,255,255);">有许多系统声称它们实现了exactly-once，但是它们其实忽略了生产者或消费者在生产和消费过程中有可能失败的情况。比如虽然一个Producer成功发送一个消息，但是消息在发送途中丢失，或者成功发送到broker，也被consumer成功取走，但是这个consumer在处理取过来的消息时失败了。 <br>从Producer端看：Kafka是这么处理的，当一个消息被发送后，Producer会等待broker成功接收到消息的反馈（可通过参数控制等待时间），如果消息在途中丢失或是其中一个broker挂掉，Producer会重新发送（我们知道Kafka有备份机制，可以通过参数控制是否等待所有备份节点都收到消息）。 <br>从Consumer端看：前面讲到过partition，broker端记录了partition中的一个offset值，这个值指向Consumer下一个即将消费message。当Consumer收到了消息，但却在处理过程中挂掉，此时Consumer可以通过这个offset值重新找到上一个消息再进行处理。Consumer还有权限控制这个offset值，对持久化到broker端的消息做任意处理。</p><h3 style="padding:0px;font-family:'-apple-system', 'SF UI Text', Arial, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'WenQuanYi Micro Hei', sans-serif, SimHei, SimSun;background-color:rgb(255,255,255);"><a></a>3.3 备份机制</h3><p style="font-family:'-apple-system', 'SF UI Text', Arial, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'WenQuanYi Micro Hei', sans-serif, SimHei, SimSun;background-color:rgb(255,255,255);">备份机制是Kafka0.8版本的新特性，备份机制的出现大大提高了Kafka集群的可靠性、稳定性。有了备份机制后，Kafka允许集群中的节点挂掉后而不影响整个集群工作。一个备份数量为n的集群允许n-1个节点失败。在所有备份节点中，有一个节点作为lead节点，这个节点保存了其它备份节点列表，并维持各个备份间的状体同步。下面这幅图解释了Kafka的备份机制:</p><p style="font-family:'-apple-system', 'SF UI Text', Arial, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'WenQuanYi Micro Hei', sans-serif, SimHei, SimSun;background-color:rgb(255,255,255);"><img src="https://img-blog.csdn.net/20150828162159461" alt="这里写图片描述" title="" style="margin-top:24px;margin-bottom:24px;"></p>参考:https://blog.csdn.net/suifeng3051/article/details/48053965<br><h1 style="margin-top:10px;margin-bottom:10px;padding:0px;color:rgb(0,0,0);line-height:1.5;font-family:Verdana, Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);"><br></h1><h1 style="margin-top:10px;margin-bottom:10px;padding:0px;color:rgb(0,0,0);line-height:1.5;font-family:Verdana, Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);">搭建环境</h1><h2 style="margin-top:10px;margin-bottom:10px;padding:0px;color:rgb(0,0,0);font-size:21px;line-height:1.5;font-family:Verdana, Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);">1. 安装JDK</h2><p style="margin:10px auto 10px 30px;color:rgb(17,17,17);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:13px;background-color:rgb(255,255,255);">1.1 安装文件：http://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html下载Server JRE.<br style="margin:0px;padding:0px;">1.2 安装完成后需要添加以下的环境变量（右键点击“我的电脑” -&gt; "高级系统设置" -&gt; "环境变量" ）：</p><ul style="margin-bottom:0px;margin-left:30px;color:rgb(17,17,17);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:13px;background-color:rgb(255,255,255);"><li style="margin-top:0px;margin-left:0px;padding:0px;list-style:none inside;"><ul style="margin-bottom:0px;margin-left:30px;"><li style="margin-top:0px;margin-left:0px;padding:0px;list-style:circle inside;">JAVA_HOME: C:\Program Files (x86)\Java\jre1.8.0_60（这个是默认安装路径，如果安装过程中更改了安装目录，把更改后的路径填上就行了）</li></ul></li></ul><ul style="margin-bottom:0px;margin-left:30px;color:rgb(17,17,17);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:13px;background-color:rgb(255,255,255);"><li style="margin-top:0px;margin-left:0px;padding:0px;list-style:none inside;"><ul style="margin-bottom:0px;margin-left:30px;"><li style="margin-top:0px;margin-left:0px;padding:0px;list-style:circle inside;">PATH: 在现有的值后面添加"; %JAVA_HOME%\bin"</li></ul></li></ul><p style="margin:10px auto 10px 30px;color:rgb(17,17,17);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:13px;background-color:rgb(255,255,255);">1.3 打开cmd运行 "java -version" 查看当前系统Java的版本：</p><div style="margin:0px 0px 0px 30px;padding:0px;color:rgb(17,17,17);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:13px;background-color:rgb(255,255,255);"><img src="https://img-blog.csdn.net/20160821155757078?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="java-version" style="margin-bottom:0px;padding:0px;border:0px;max-width:900px;"></div><div style="margin:0px 0px 0px 30px;padding:0px;color:rgb(17,17,17);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:13px;background-color:rgb(255,255,255);"><br></div><div style="margin:0px 0px 0px 30px;padding:0px;color:rgb(17,17,17);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:13px;background-color:rgb(255,255,255);"><span style="color:rgb(0,0,0);font-size:21px;"><strong>2. 安装Zookeeper</strong></span></div><div style="margin:0px 0px 0px 30px;padding:0px;color:rgb(17,17,17);font-size:13px;background-color:rgb(255,255,255);"><p style="font-family:Verdana, Arial, Helvetica, sans-serif;margin:10px auto;color:rgb(17,17,17);font-size:13px;background-color:rgb(255,255,255);">Kafka的运行依赖于Zookeeper，所以在运行Kafka之前我们需要安装并运行Zookeeper</p><div style="font-family:Verdana, Arial, Helvetica, sans-serif;margin:0px 0px 0px 30px;padding:0px;color:rgb(17,17,17);font-size:13px;background-color:rgb(255,255,255);"><div style="margin:0px;padding:0px;">2.1 下载安装文件： http://zookeeper.apache.org/releases.html</div><div style="margin:0px;padding:0px;">2.2 解压文件（本文解压到 G:\zookeeper-3.4.8）</div><div style="margin:0px;padding:0px;">2.3 打开G:\zookeeper-3.4.8\conf，把zoo_sample.cfg重命名成zoo.cfg</div><div style="margin:0px;padding:0px;">2.4 从文本编辑器里打开zoo.cfg</div><div style="margin:0px;padding:0px;">2.5 把dataDir和<span style="color:rgb(17,17,17);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:13px;background-color:rgb(255,255,255);">dataLogDir</span>的值改成</div><div style="margin:0px;padding:0px;">    dataDir=F:\\log\\zookeeper\\datas<br>    dataLogDir=F:\\log\\zookeeper\\logs</div><div style="margin:0px;padding:0px;">2.6 添加如下系统变量：</div></div><div style="font-family:Verdana, Arial, Helvetica, sans-serif;margin:0px 0px 0px 30px;padding:0px;color:rgb(17,17,17);font-size:13px;background-color:rgb(255,255,255);"><ul style="margin-bottom:0px;margin-left:30px;"><li style="margin-top:0px;margin-left:0px;padding:0px;list-style:none inside;"><ul style="margin-bottom:0px;margin-left:30px;"><li style="margin-top:0px;margin-left:0px;padding:0px;list-style:circle inside;">ZOOKEEPER_HOME: G:\zookeeper-3.4.</li><li style="margin-top:0px;margin-left:0px;padding:0px;list-style:circle inside;">Path: 在现有的值后面添加 ";%ZOOKEEPER_HOME%\bin;"</li></ul></li></ul><p style="margin:10px auto;">2.7 运行Zookeeper: 打开cmd然后执行</p><div class="cnblogs_code" style="margin:5px 0px;padding:5px;background-color:rgb(245,245,245);border:1px solid rgb(204,204,204);color:rgb(0,0,0);font-family:'Courier New';font-size:12px;"><pre style="margin-bottom:0px;padding-right:0px;padding-left:0px;white-space:pre-wrap;font-family:'Courier New';">zkserver<span style="margin:0px;padding:0px;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;line-height:1.5;"> </span></pre></div></div><h6 style="margin-top:10px;margin-bottom:10px;padding:0px;color:rgb(0,0,0);font-size:21px;line-height:1.5;background-color:rgb(255,255,255);"><span style="font-family:Verdana, Arial, Helvetica, sans-serif;">    </span><span style="font-family:SimSun;">2.8 测试启动</span></h6><h6 style="margin-top:10px;margin-bottom:10px;padding:0px;color:rgb(0,0,0);font-size:21px;line-height:1.5;background-color:rgb(255,255,255);"><span style="font-family:SimSun;">   在zookeeper的bin目录执行 <span style="color:rgb(94,94,94);font-family:Verdana, Helvetica, Arial;font-size:13px;line-height:19.5px;background-color:rgb(255,255,255);">zkCli.cmd-server 127.0.0.1:2181</span></span></h6><h2 style="font-family:Verdana, Arial, Helvetica, sans-serif;margin-top:10px;margin-bottom:10px;padding:0px;color:rgb(0,0,0);font-size:21px;line-height:1.5;background-color:rgb(255,255,255);">3. 安装并运行Kafka</h2><div style="font-family:Verdana, Arial, Helvetica, sans-serif;margin:0px 0px 0px 30px;padding:0px;color:rgb(17,17,17);font-size:13px;background-color:rgb(255,255,255);">3.1 下载安装文件： <a href="http://kafka.apache.org/downloads.html" rel="nofollow" style="margin:0px;padding:0px;text-decoration:underline;color:rgb(0,102,204);">http://kafka.apache.org/downloads.html</a></div><div style="font-family:Verdana, Arial, Helvetica, sans-serif;margin:0px 0px 0px 30px;padding:0px;color:rgb(17,17,17);font-size:13px;background-color:rgb(255,255,255);">3.2 解压文件（本文解压到 G:\kafka_2.11-0.10.0.1）</div><div style="font-family:Verdana, Arial, Helvetica, sans-serif;margin:0px 0px 0px 30px;padding:0px;color:rgb(17,17,17);font-size:13px;background-color:rgb(255,255,255);">3.3 打开G:\kafka_2.11-0.10.0.1\config</div><div style="font-family:Verdana, Arial, Helvetica, sans-serif;margin:0px 0px 0px 30px;padding:0px;color:rgb(17,17,17);font-size:13px;background-color:rgb(255,255,255);">3.4 从文本编辑器里打开 server.properties</div><div style="font-family:Verdana, Arial, Helvetica, sans-serif;margin:0px 0px 0px 30px;padding:0px;color:rgb(17,17,17);font-size:13px;background-color:rgb(255,255,255);">3.5 把 log.dirs的值改成 “F:\\log\\kafka-logs”</div><div style="font-family:Verdana, Arial, Helvetica, sans-serif;margin:0px 0px 0px 30px;padding:0px;color:rgb(17,17,17);font-size:13px;background-color:rgb(255,255,255);">3.6 打开cmd</div><div style="font-family:Verdana, Arial, Helvetica, sans-serif;margin:0px 0px 0px 30px;padding:0px;color:rgb(17,17,17);font-size:13px;background-color:rgb(255,255,255);">3.7 进入kafka文件目录: cd /d G:\kafka_2.11-0.10.0.1\</div><div style="font-family:Verdana, Arial, Helvetica, sans-serif;margin:0px 0px 0px 30px;padding:0px;color:rgb(17,17,17);font-size:13px;background-color:rgb(255,255,255);">3.8 输入并执行以打开kafka:</div><div style="font-family:Verdana, Arial, Helvetica, sans-serif;margin:0px;padding:0px;color:rgb(17,17,17);font-size:13px;background-color:rgb(255,255,255);"><div class="cnblogs_code" style="margin:5px 0px 5px 30px;padding:5px;background-color:rgb(245,245,245);border:1px solid rgb(204,204,204);color:rgb(0,0,0);font-family:'Courier New';font-size:12px;"><pre style="margin-bottom:0px;padding-right:0px;padding-left:0px;white-space:pre-wrap;font-family:'Courier New';">.\bin\windows\kafka-server-<span style="margin:0px;padding:0px;color:rgb(0,0,255);line-height:1.5;">start</span>.bat .\config\server.properties</pre></div></div><p style="font-family:'-apple-system', 'SF UI Text', Arial, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'WenQuanYi Micro Hei', sans-serif, SimHei, SimSun;background-color:rgb(255,255,255);">显示的信息如下，则表示正常运行 <br><img src="https://img-blog.csdn.net/20170419160328721?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDA1NDk2OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title="" style="margin-top:24px;margin-bottom:24px;"></p><p style="font-family:'-apple-system', 'SF UI Text', Arial, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'WenQuanYi Micro Hei', sans-serif, SimHei, SimSun;background-color:rgb(255,255,255);"><span style="font-weight:700;">4.创建topics</span> <br>4.1在D:\kafka_2.11-0.10.2.0\bin\windows文件夹中”Shift+鼠标右键”点击空白处打开命令提示窗口</p><pre class="prettyprint" style="font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;line-height:22px;"><code class="hljs brainfuck has-numbering"><span class="hljs-comment">kafka</span><span class="hljs-literal">-</span><span class="hljs-comment">topics</span><span class="hljs-string">.</span><span class="hljs-comment">bat</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">create</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">zookeeper</span> <span class="hljs-comment">localhost:2181</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">replication</span><span class="hljs-literal">-</span><span class="hljs-comment">factor</span> <span class="hljs-comment">1</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">partitions</span> <span class="hljs-comment">1</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">topic</span> <span class="hljs-comment">test</span></code></pre><ul class="pre-numbering" style="font-family:Verdana, Arial, Helvetica, sans-serif;"><li style="color:rgb(153,153,153);">1</li></ul><p style="font-family:'-apple-system', 'SF UI Text', Arial, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'WenQuanYi Micro Hei', sans-serif, SimHei, SimSun;background-color:rgb(255,255,255);"><span style="font-weight:700;">5.打开一个Producer</span> <br>5.1在D:\kafka_2.11-0.10.2.0\bin\windows文件夹中”Shift+鼠标右键”点击空白处打开命令提示窗口</p><pre class="prettyprint" style="font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;line-height:22px;"><code class="hljs lasso has-numbering">kafka<span class="hljs-attribute">-console</span><span class="hljs-attribute">-producer</span><span class="hljs-built_in">.</span>bat <span class="hljs-subst">--</span>broker<span class="hljs-attribute">-list</span> localhost:<span class="hljs-number">9092</span> <span class="hljs-subst">--</span>topic test</code></pre><ul class="pre-numbering" style="font-family:Verdana, Arial, Helvetica, sans-serif;"><li style="color:rgb(153,153,153);">1</li></ul><p style="font-family:'-apple-system', 'SF UI Text', Arial, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'WenQuanYi Micro Hei', sans-serif, SimHei, SimSun;background-color:rgb(255,255,255);"><span style="font-weight:700;">6.打开一个Consumer</span> <br>6.1在D:\kafka_2.11-0.10.2.0\bin\windows文件夹中”Shift+鼠标右键”点击空白处打开命令提示窗口</p><pre class="prettyprint" style="font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;line-height:22px;"><code class="hljs brainfuck has-numbering"><span class="hljs-comment">kafka</span><span class="hljs-literal">-</span><span class="hljs-comment">console</span><span class="hljs-literal">-</span><span class="hljs-comment">consumer</span><span class="hljs-string">.</span><span class="hljs-comment">bat</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">zookeeper</span> <span class="hljs-comment">localhost:2181</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">topic</span> <span class="hljs-comment">test</span></code></pre><ul class="pre-numbering" style="font-family:Verdana, Arial, Helvetica, sans-serif;"><li style="color:rgb(153,153,153);">1</li></ul><p style="font-family:'-apple-system', 'SF UI Text', Arial, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'WenQuanYi Micro Hei', sans-serif, SimHei, SimSun;background-color:rgb(255,255,255);">注意：以上打开的窗口不要关闭 <br>然后就可以在Producer控制台窗口输入消息了。在消息输入过后，很快Consumer窗口就会显示出Producer发送的消息： <br><img src="https://img-blog.csdn.net/20170420141105330?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDA1NDk2OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title="" style="margin-top:24px;margin-bottom:24px;"></p><span style="font-family:Verdana, Arial, Helvetica, sans-serif;">参考：</span><span style="font-family:'SF Pro Display', Roboto, Noto, Arial, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', sans-serif;color:rgb(153,153,153);font-size:12px;background-color:rgb(255,255,255);">https://blog.csdn.net/u010054969/article/details/70241478</span></div>            </div>
                </div>