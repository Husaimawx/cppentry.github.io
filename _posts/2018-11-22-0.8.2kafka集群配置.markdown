---
layout:     post
title:      0.8.2kafka集群配置
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<h1 id="hadoopsparkkafka交流群224209501">hadoop,spark,kafka交流群：224209501</h1>

<h2 id="1kafka配置">1，kafka配置</h2>

<p>kafka官网的配置参数基本已经满足大家的需求了。</p>



<pre class="prettyprint"><code class=" hljs avrasm"><span class="hljs-preprocessor"># Replication configurations</span>
num<span class="hljs-preprocessor">.replica</span><span class="hljs-preprocessor">.fetchers</span>=<span class="hljs-number">4</span>
replica<span class="hljs-preprocessor">.fetch</span><span class="hljs-preprocessor">.max</span><span class="hljs-preprocessor">.bytes</span>=<span class="hljs-number">1048576</span>
replica<span class="hljs-preprocessor">.fetch</span><span class="hljs-preprocessor">.wait</span><span class="hljs-preprocessor">.max</span><span class="hljs-preprocessor">.ms</span>=<span class="hljs-number">500</span>
replica<span class="hljs-preprocessor">.high</span><span class="hljs-preprocessor">.watermark</span><span class="hljs-preprocessor">.checkpoint</span><span class="hljs-preprocessor">.interval</span><span class="hljs-preprocessor">.ms</span>=<span class="hljs-number">5000</span>
replica<span class="hljs-preprocessor">.socket</span><span class="hljs-preprocessor">.timeout</span><span class="hljs-preprocessor">.ms</span>=<span class="hljs-number">30000</span>
replica<span class="hljs-preprocessor">.socket</span><span class="hljs-preprocessor">.receive</span><span class="hljs-preprocessor">.buffer</span><span class="hljs-preprocessor">.bytes</span>=<span class="hljs-number">65536</span>
replica<span class="hljs-preprocessor">.lag</span><span class="hljs-preprocessor">.time</span><span class="hljs-preprocessor">.max</span><span class="hljs-preprocessor">.ms</span>=<span class="hljs-number">10000</span>
replica<span class="hljs-preprocessor">.lag</span><span class="hljs-preprocessor">.max</span><span class="hljs-preprocessor">.messages</span>=<span class="hljs-number">4000</span>

controller<span class="hljs-preprocessor">.socket</span><span class="hljs-preprocessor">.timeout</span><span class="hljs-preprocessor">.ms</span>=<span class="hljs-number">30000</span>
controller<span class="hljs-preprocessor">.message</span><span class="hljs-preprocessor">.queue</span><span class="hljs-preprocessor">.size</span>=<span class="hljs-number">10</span>

<span class="hljs-preprocessor"># Log configuration</span>
num<span class="hljs-preprocessor">.partitions</span>=<span class="hljs-number">8</span>
message<span class="hljs-preprocessor">.max</span><span class="hljs-preprocessor">.bytes</span>=<span class="hljs-number">1000000</span>
auto<span class="hljs-preprocessor">.create</span><span class="hljs-preprocessor">.topics</span><span class="hljs-preprocessor">.enable</span>=true
log<span class="hljs-preprocessor">.index</span><span class="hljs-preprocessor">.interval</span><span class="hljs-preprocessor">.bytes</span>=<span class="hljs-number">4096</span>
log<span class="hljs-preprocessor">.index</span><span class="hljs-preprocessor">.size</span><span class="hljs-preprocessor">.max</span><span class="hljs-preprocessor">.bytes</span>=<span class="hljs-number">10485760</span>
log<span class="hljs-preprocessor">.retention</span><span class="hljs-preprocessor">.hours</span>=<span class="hljs-number">168</span>
log<span class="hljs-preprocessor">.flush</span><span class="hljs-preprocessor">.interval</span><span class="hljs-preprocessor">.ms</span>=<span class="hljs-number">10000</span>
log<span class="hljs-preprocessor">.flush</span><span class="hljs-preprocessor">.interval</span><span class="hljs-preprocessor">.messages</span>=<span class="hljs-number">20000</span>
log<span class="hljs-preprocessor">.flush</span><span class="hljs-preprocessor">.scheduler</span><span class="hljs-preprocessor">.interval</span><span class="hljs-preprocessor">.ms</span>=<span class="hljs-number">2000</span>
log<span class="hljs-preprocessor">.roll</span><span class="hljs-preprocessor">.hours</span>=<span class="hljs-number">168</span>
log<span class="hljs-preprocessor">.retention</span><span class="hljs-preprocessor">.check</span><span class="hljs-preprocessor">.interval</span><span class="hljs-preprocessor">.ms</span>=<span class="hljs-number">300000</span>
log<span class="hljs-preprocessor">.segment</span><span class="hljs-preprocessor">.bytes</span>=<span class="hljs-number">1073741824</span>

<span class="hljs-preprocessor"># ZK configuration</span>
zookeeper<span class="hljs-preprocessor">.connection</span><span class="hljs-preprocessor">.timeout</span><span class="hljs-preprocessor">.ms</span>=<span class="hljs-number">6000</span>
zookeeper<span class="hljs-preprocessor">.sync</span><span class="hljs-preprocessor">.time</span><span class="hljs-preprocessor">.ms</span>=<span class="hljs-number">2000</span>

<span class="hljs-preprocessor"># Socket server configuration</span>
num<span class="hljs-preprocessor">.io</span><span class="hljs-preprocessor">.threads</span>=<span class="hljs-number">8</span>
num<span class="hljs-preprocessor">.network</span><span class="hljs-preprocessor">.threads</span>=<span class="hljs-number">8</span>
socket<span class="hljs-preprocessor">.request</span><span class="hljs-preprocessor">.max</span><span class="hljs-preprocessor">.bytes</span>=<span class="hljs-number">104857600</span>
socket<span class="hljs-preprocessor">.receive</span><span class="hljs-preprocessor">.buffer</span><span class="hljs-preprocessor">.bytes</span>=<span class="hljs-number">1048576</span>
socket<span class="hljs-preprocessor">.send</span><span class="hljs-preprocessor">.buffer</span><span class="hljs-preprocessor">.bytes</span>=<span class="hljs-number">1048576</span>
queued<span class="hljs-preprocessor">.max</span><span class="hljs-preprocessor">.requests</span>=<span class="hljs-number">16</span>
fetch<span class="hljs-preprocessor">.purgatory</span><span class="hljs-preprocessor">.purge</span><span class="hljs-preprocessor">.interval</span><span class="hljs-preprocessor">.requests</span>=<span class="hljs-number">100</span>
producer<span class="hljs-preprocessor">.purgatory</span><span class="hljs-preprocessor">.purge</span><span class="hljs-preprocessor">.interval</span><span class="hljs-preprocessor">.requests</span>=<span class="hljs-number">100</span></code></pre>



<h2 id="kafka集群配置">kafka集群配置</h2>



<h3 id="1修该broker-id">1，修该broker id</h3>



<pre class="prettyprint"><code class=" hljs css"><span class="hljs-tag">broker</span><span class="hljs-class">.id</span> <span class="hljs-attr_selector">[阿拉伯数字，集群中不能重复]</span></code></pre>



<h3 id="2zookeeper的地址列表">2，zookeeper的地址列表</h3>



<pre class="prettyprint"><code class=" hljs lasso">zookeeper<span class="hljs-built_in">.</span>connect<span class="hljs-subst">=</span>ukafka<span class="hljs-attribute">-rmicyl</span><span class="hljs-subst">-</span><span class="hljs-number">1</span><span class="hljs-attribute">-bj04</span><span class="hljs-built_in">.</span>service:<span class="hljs-number">2181</span>,ukafka<span class="hljs-attribute">-rmicyl</span><span class="hljs-subst">-</span><span class="hljs-number">2</span><span class="hljs-attribute">-bj04</span><span class="hljs-built_in">.</span>service:<span class="hljs-number">2181</span>,ukafka<span class="hljs-attribute">-rmicyl</span><span class="hljs-subst">-</span><span class="hljs-number">3</span><span class="hljs-attribute">-bj04</span><span class="hljs-built_in">.</span>service:<span class="hljs-number">2181</span></code></pre>



<h3 id="3广播参数">3,广播参数</h3>

<p>假如broker所在为内网环境并经过nat，consumer和producer所在网络在nat外部，需要配置这两个参数为nat网关ip和响应端口。kafka目前还不支持，内外网(consumer和producer一个在内网一个在外网)。</p>



<pre class="prettyprint"><code class=" hljs vhdl"># Hostname the broker will advertise <span class="hljs-keyword">to</span> producers <span class="hljs-keyword">and</span> consumers. <span class="hljs-keyword">If</span> <span class="hljs-keyword">not</span> set, it uses the
# value <span class="hljs-keyword">for</span> <span class="hljs-string">"host.name"</span> <span class="hljs-keyword">if</span> configured.  Otherwise, it will <span class="hljs-keyword">use</span> the value returned from
# java.net.InetAddress.getCanonicalHostName().
advertised.host.name=&lt;hostname routable by clients&gt;
# The <span class="hljs-keyword">port</span> <span class="hljs-keyword">to</span> publish <span class="hljs-keyword">to</span> ZooKeeper <span class="hljs-keyword">for</span> clients <span class="hljs-keyword">to</span> <span class="hljs-keyword">use</span>. <span class="hljs-keyword">If</span> this <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> set,
# it will publish the same <span class="hljs-keyword">port</span> that the broker binds <span class="hljs-keyword">to</span>.
advertised.<span class="hljs-keyword">port</span>=&lt;<span class="hljs-keyword">port</span> accessible by clients&gt;</code></pre>

<p>Kafka 0.10.0 这个版本参数如下：</p>



<pre class="prettyprint"><code class=" hljs vala"><span class="hljs-preprocessor"># The address the socket server listens on. It will get the value returned from </span>
<span class="hljs-preprocessor"># java.net.InetAddress.getCanonicalHostName() if not configured.</span>
<span class="hljs-preprocessor">#   FORMAT:</span>
<span class="hljs-preprocessor">#     listeners = security_protocol://host_name:port</span>
<span class="hljs-preprocessor">#   EXAMPLE:</span>
<span class="hljs-preprocessor">#     listeners = PLAINTEXT://your.host.name:9092</span>
listeners=PLAINTEXT:<span class="hljs-comment">//your.host.name:9092</span>

<span class="hljs-preprocessor"># Hostname and port the broker will advertise to producers and consumers. If not set, </span>
<span class="hljs-preprocessor"># it uses the value for "listeners" if configured.  Otherwise, it will use the value</span>
<span class="hljs-preprocessor"># returned from java.net.InetAddress.getCanonicalHostName().</span>
advertised.listeners=PLAINTEXT:<span class="hljs-comment">//your.host.name:9092</span></code></pre>



<h2 id="kafka的生产者demo">kafka的生产者demo</h2>



<pre class="prettyprint"><code class=" hljs vbscript">props.put(<span class="hljs-string">"metadata.broker.list"</span>, <span class="hljs-string">"ip1:9092,ip2:9092,ip3:9092"</span>);
props.put(<span class="hljs-string">"serializer.class"</span>, <span class="hljs-string">"kafka.serializer.StringEncoder"</span>);
props.put(<span class="hljs-string">"batch.size"</span>, <span class="hljs-string">"307200"</span>);
props.put(<span class="hljs-string">"linger.ms"</span>, <span class="hljs-string">"10"</span>);
props.put(<span class="hljs-string">"producer.type"</span>, <span class="hljs-string">"async"</span>);
config = <span class="hljs-keyword">new</span> ProducerConfig(props);
producer = <span class="hljs-keyword">new</span> Producer&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">String</span>&gt;(config);
<span class="hljs-built_in">String</span> key=hell0;
<span class="hljs-built_in">String</span> value=hi;
<span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>i++){
KeyedMessage&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">String</span>&gt; msg = <span class="hljs-keyword">new</span> KeyedMessage&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">String</span>&gt;(topic, key+Integer.toString(i), value+Integer.toString(i));
producer.send(msg);
}</code></pre>



<h2 id="消费者demo">消费者demo</h2>



<pre class="prettyprint"><code class=" hljs java">
<span class="hljs-keyword">import</span> kafka.consumer.ConsumerConfig;
<span class="hljs-keyword">import</span> kafka.consumer.KafkaStream;
<span class="hljs-keyword">import</span> kafka.javaapi.consumer.ConsumerConnector;

<span class="hljs-keyword">import</span> java.util.HashMap;
<span class="hljs-keyword">import</span> java.util.List;
<span class="hljs-keyword">import</span> java.util.Map;
<span class="hljs-keyword">import</span> java.util.Properties;
<span class="hljs-keyword">import</span> java.util.concurrent.ExecutorService;
<span class="hljs-keyword">import</span> java.util.concurrent.Executors;

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConsumerGroupExample</span> {</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ConsumerConnector consumer;
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String topic;
    <span class="hljs-keyword">private</span>  ExecutorService executor;

    <span class="hljs-keyword">public</span> <span class="hljs-title">ConsumerGroupExample</span>(String a_zookeeper, String a_groupId, String a_topic) {
        consumer = kafka.consumer.Consumer.createJavaConsumerConnector(
                createConsumerConfig(a_zookeeper, a_groupId));
        <span class="hljs-keyword">this</span>.topic = a_topic;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shutdown</span>() {
        <span class="hljs-keyword">if</span> (consumer != <span class="hljs-keyword">null</span>) consumer.shutdown();
        <span class="hljs-keyword">if</span> (executor != <span class="hljs-keyword">null</span>) executor.shutdown();
        <span class="hljs-keyword">try</span> {
            <span class="hljs-keyword">if</span> (!executor.awaitTermination(<span class="hljs-number">5000</span>, TimeUnit.MILLISECONDS)) {
                System.out.println(<span class="hljs-string">"Timed out waiting for consumer threads to shut down, exiting uncleanly"</span>);
            }
        } <span class="hljs-keyword">catch</span> (InterruptedException e) {
            System.out.println(<span class="hljs-string">"Interrupted during shutdown, exiting uncleanly"</span>);
        }
   }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span>(<span class="hljs-keyword">int</span> a_numThreads) {
        Map&lt;String, Integer&gt; topicCountMap = <span class="hljs-keyword">new</span> HashMap&lt;String, Integer&gt;();
        topicCountMap.put(topic, <span class="hljs-keyword">new</span> Integer(a_numThreads));
        Map&lt;String, List&lt;KafkaStream&lt;<span class="hljs-keyword">byte</span>[], <span class="hljs-keyword">byte</span>[]&gt;&gt;&gt; consumerMap = consumer.createMessageStreams(topicCountMap);
        List&lt;KafkaStream&lt;<span class="hljs-keyword">byte</span>[], <span class="hljs-keyword">byte</span>[]&gt;&gt; streams = consumerMap.get(topic);

        <span class="hljs-comment">// now launch all the threads</span>
        <span class="hljs-comment">//</span>
        executor = Executors.newFixedThreadPool(a_numThreads);

        <span class="hljs-comment">// now create an object to consume the messages</span>
        <span class="hljs-comment">//</span>
        <span class="hljs-keyword">int</span> threadNumber = <span class="hljs-number">0</span>;
        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">final</span> KafkaStream stream : streams) {
            executor.submit(<span class="hljs-keyword">new</span> ConsumerTest(stream, threadNumber));
            threadNumber++;
        }
    }

    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ConsumerConfig <span class="hljs-title">createConsumerConfig</span>(String a_zookeeper, String a_groupId) {
        Properties props = <span class="hljs-keyword">new</span> Properties();
        props.put(<span class="hljs-string">"zookeeper.connect"</span>, a_zookeeper);
        props.put(<span class="hljs-string">"group.id"</span>, a_groupId);
        props.put(<span class="hljs-string">"zookeeper.session.timeout.ms"</span>, <span class="hljs-string">"400"</span>);
        props.put(<span class="hljs-string">"zookeeper.sync.time.ms"</span>, <span class="hljs-string">"200"</span>);
        props.put(<span class="hljs-string">"auto.commit.interval.ms"</span>, <span class="hljs-string">"1000"</span>);

        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ConsumerConfig(props);
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(String[] args) {
        String zooKeeper = args[<span class="hljs-number">0</span>];
        String groupId = args[<span class="hljs-number">1</span>];
        String topic = args[<span class="hljs-number">2</span>];
        <span class="hljs-keyword">int</span> threads = Integer.parseInt(args[<span class="hljs-number">3</span>]);

        ConsumerGroupExample example = <span class="hljs-keyword">new</span> ConsumerGroupExample(zooKeeper, groupId, topic);
        example.run(threads);

        <span class="hljs-keyword">try</span> {
            Thread.sleep(<span class="hljs-number">10000</span>);
        } <span class="hljs-keyword">catch</span> (InterruptedException ie) {

        }
        example.shutdown();
    }
}</code></pre>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>