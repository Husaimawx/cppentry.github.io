---
layout:     post
title:      2.hive的java客户端
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/qq_34448345/article/details/83819214				</div>
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                <h3>1.启动hive</h3>

<ul><li>(1)启动hive</li>
</ul><pre class="has">
<code>./hive --service hiveserver2 &amp;
</code></pre>

<ul><li>(2)启动beeline</li>
</ul><pre class="has">
<code>#进入beeline命令行
./beeline
#连接hive的hiveserver2，按照提示输入用户名和密码
beeline&gt; !connect jdbc:hive2://192.168.1.222:10000
#查看数据库
0: jdbc:hive2://192.168.1.222:10000&gt; show databases;
</code></pre>

<h3>2.java客户端</h3>

<ul><li>(1)依赖</li>
</ul><pre class="has">
<code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;groupId&gt;hadoop&lt;/groupId&gt;
    &lt;artifactId&gt;1&lt;/artifactId&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;dependencies&gt;

        &lt;!--hadoop--&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.hadoop&lt;/groupId&gt;
            &lt;artifactId&gt;hadoop-common&lt;/artifactId&gt;
            &lt;version&gt;3.1.1&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.hadoop&lt;/groupId&gt;
            &lt;artifactId&gt;hadoop-hdfs&lt;/artifactId&gt;
            &lt;version&gt;3.1.1&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.hadoop&lt;/groupId&gt;
            &lt;artifactId&gt;hadoop-client&lt;/artifactId&gt;
            &lt;version&gt;3.1.1&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.hadoop&lt;/groupId&gt;
            &lt;artifactId&gt;hadoop-assemblies&lt;/artifactId&gt;
            &lt;version&gt;3.1.1&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;!--hbase--&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.hbase&lt;/groupId&gt;
            &lt;artifactId&gt;hbase-client&lt;/artifactId&gt;
            &lt;version&gt;1.3.2&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;!--hive--&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.apache.hive&lt;/groupId&gt;
            &lt;artifactId&gt;hive-jdbc&lt;/artifactId&gt;
            &lt;version&gt;2.3.3&lt;/version&gt;
        &lt;/dependency&gt;

    &lt;/dependencies&gt;
    
&lt;/project&gt;</code></pre>

<ul><li>(2)测试类</li>
</ul><p>由hiveSql提交的查询语句将会解析成一个或多个mr程序，不包含聚合/连接的简单select语句会使用一个只有m阶段的job，使用group by的聚合查询语句会使用一个独立的mr程序，包含大量多表连接的复杂查询会依靠多个mr查询的顺序执行来实现。</p>

<pre class="has">
<code>//DDL操作测试类
public class HiveClient {

    private static String driverName = "org.apache.hive.jdbc.HiveDriver";
    private static String url = "jdbc:hive2://192.168.1.222:10000";
    private static String user = "root";
    private static String password = "123456";

    private static Connection conn = null;
    private static Statement stmt = null;
    private static ResultSet rs = null;

    //初始化连接
    static {
       try{
           Class.forName(driverName);
           conn = DriverManager.getConnection(url,user,password);
           stmt = conn.createStatement();
       }
       catch (Exception e){
           e.printStackTrace();
       }
    }

    //查看数据库
    public void showDatabases() throws Exception{
        String sql = "show databases";
        System.out.println("查询语句:" + sql);
        rs = stmt.executeQuery(sql);
        while (rs.next()) {
            System.out.println(rs.getString(1));
        }
    }

    //创建数据库
    public void createDatabase(String dataBaseName) throws Exception{
        String sql = "create database "+dataBaseName+"";
        System.out.println("查询语句:" + sql);
        stmt.execute(sql);
    }


    //删除数据库
    public void deleteDatabase(String dataBaseName) throws Exception{
        String sql = "drop database if exists "+dataBaseName+"";
        System.out.println("查询语句:" + sql);
        stmt.execute(sql);
    }


    //创建表
    public void createTable(String tableName) throws Exception{
        String sql = "create table "+tableName+"(\n" +
                "id int,\n" +
                "name string,\n" +
                "phone string,\n" +
                "age int\n" +
                ")\n" +
                "row format delimited "+
                "fields terminated by '\\t'";//行记录用tab分割属性
        System.out.println("查询语句:");
        System.out.println(sql);
        //stmt.execute(sql);
    }

    //查看表结构
    public void showTable(String tableName) throws Exception{
        String sql = "desc "+tableName+"";
        System.out.println("查询语句:" + sql);
        rs = stmt.executeQuery(sql);
        while (rs.next()) {
            System.out.println(rs.getString(1) + "\t" + rs.getString(2));
        }
    }


    //删除表
    public void deleteTable(String tableName) throws Exception{
        String sql = "drop table if exists "+tableName+"";
        System.out.println("查询语句:" + sql);
        stmt.execute(sql);
    }

    //查看表
    public void showTables() throws Exception{
        String sql = "show tables";
        System.out.println("查询语句:" + sql);
        rs = stmt.executeQuery(sql);
        while (rs.next()) {
            System.out.println(rs.getString(1));
        }
    }


    //导入数据(从本地文件导入)
    //文件userData.txt放到/root下,文件内容如下
    //1	tyf	13388236294	5
    //2	zd	12345434565	6
    //3	sd	12345434532	5
    //4	lsm	12232323232	70
    public void loadData(String filePath,String tableName) throws Exception{
        String sql = "load data local inpath '" + filePath + "' overwrite into table "+tableName+"";
        System.out.println("查询语句:" + sql);
        stmt.execute(sql);
    }

    //查询数据
    public void query(String tableName) throws Exception{
        String sql = "select * from "+tableName+"";
        System.out.println("查询语句:" + sql);
        rs = stmt.executeQuery(sql);
        System.out.println("id" + "\t" + "name" + "\t" + "phone"+"\t" + "age");
        while (rs.next()) {
            System.out.println(rs.getInt("id") + "\t\t" + rs.getString("name") + "\t\t" + rs.getString("phone")+"\t\t" + rs.getInt("age"));
        }
    }


    //清空数据表
    public void truncateTable(String tableName)throws Exception{
        String sql = "truncate table "+tableName+"";
        System.out.println("查询语句:" + sql);
        stmt.execute(sql);
    }


    //count(*)
    //count(1)
    //count(column)
    public void countTable(String tableName,String word) throws Exception{
        String sql = "select count('"+word+"') from "+tableName+"";
        System.out.println("查询语句:" + sql);
        rs = stmt.executeQuery(sql);
        while (rs.next()) {
            System.out.println(rs.getInt(1) );
        }

    }

    //多列单次计数
    public void wordCount(String tableName,String column)throws Exception{
        String sql="select word,count(*) as count from (select explode(split("+column+",'\\t')) as word from tb_user) word group by word order by count";
        System.out.println("查询语句:" + sql);
        rs = stmt.executeQuery(sql);
        System.out.println("word" + "\t" + "count" );
        while (rs.next()) {
            System.out.println(rs.getInt("word") + "\t\t" + rs.getString("word") + "\t\t" + rs.getInt("count"));
        }
    }


    public static void main(String [] args) throws Exception{

        HiveClient client = new HiveClient();
        //查看数据库
        //client.showDatabases();
        //创建数据库
        //client.createDatabase("db_test3");
        //删除数据库
        //client.deleteDatabase("db_test3");
        //创建表
        //client.createTable("tb_user");
        //查看所有表
        //client.showTables();
        //查看表结构
        //client.showTable("tb_user");
        //删除表
        //client.deleteTable("tb_user");
        //导入数据
        //client.loadData("/root/userData.txt","tb_user");
        //查询数据
        //client.query("tb_user");
        //清空数据表
        //client.truncateTable("tb_user");
        //记录计数
        //client.countTable("tb_user","*");
        //单词计数
        client.wordCount("tb_user","name");//统计一列

    }

}</code></pre>

<p>单词统计，结果如图：</p>

<p><img alt="结果如图" class="has" height="154" src="https://img-blog.csdnimg.cn/2018111513245914.png" width="250"></p>            </div>
                </div>