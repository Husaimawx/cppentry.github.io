---
layout:     post
title:      kafka源码分析之kafka启动-SocketServer
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/u014393917/article/details/52042873				</div>
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<h1><strong>SocketServer</strong></h1>
<p>说明<span style="font-family:'Times New Roman';">,socketserver</span><span style="font-family:SimSun;">主要用于处理</span><span style="font-family:'Times New Roman';">kafka server</span><span style="font-family:SimSun;">对外提交网络请求的操作</span><span style="font-family:'Times New Roman';">,</span><span style="font-family:SimSun;">用于检查连接数</span><span style="font-family:'Times New Roman';">,</span><span style="font-family:SimSun;">把请求添加到请求的队列中</span><span style="font-family:'Times New Roman';">,</span><span style="font-family:SimSun;">对</span><span style="font-family:'Times New Roman';">KafkaApis</span><span style="font-family:SimSun;">提供操作支持</span><span style="font-family:'Times New Roman';">.</span></p>
<h2><strong><em>实例创建与启动</em></strong></h2>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,228,255);">socketServer</span><span style="color:#000000;background:rgb(255,255,255);"> = </span><strong><span style="background:rgb(255,255,255);">new </span></strong><span style="color:#000000;background:rgb(255,255,255);">SocketServer(config</span><span style="color:#cc7832;background:rgb(255,255,255);">, </span><em><span style="background:rgb(255,255,255);">metrics</span></em><span style="color:#cc7832;background:rgb(255,255,255);">, </span><em><span style="background:rgb(255,255,255);">kafkaMetricsTime</span></em><span style="color:#000000;background:rgb(255,255,255);">)</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(228,228,255);">socketServer</span><span style="color:#000000;background:rgb(255,255,255);">.startup()</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);"> </span></p>
<p style="background:rgb(255,255,255);"><span style="background:rgb(255,255,255);">实例初始化生成:</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">得到</span><strong><span style="background:rgb(228,228,255);">listeners</span></strong><span style="color:#000000;background:rgb(255,255,255);">配置的值,默认是</span><strong><span style="background:rgb(255,255,255);">PLAINTEXT://:port,</span></strong><span style="color:#000000;background:rgb(255,255,255);">前面部分是协议,</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);"> 可配置为</span><strong><span style="background:rgb(255,255,255);">PLAINTEXT,SSL,SASL_PLAINTEXT,SASL_SSL</span></strong><span style="color:#000000;background:rgb(255,255,255);">.</span></p>
<p style="background:rgb(255,255,255);"><strong><span style="background:rgb(255,255,255);">private val </span></strong><em><span style="background:rgb(255,255,255);">endpoints </span></em><span style="color:#000000;background:rgb(255,255,255);">= config.</span><em><span style="background:rgb(255,255,255);">listeners</span></em></p>
<p style="background:rgb(255,255,255);"><em><span style="background:rgb(255,255,255);">得到</span></em><strong><span style="background:rgb(228,228,255);">num.network.threads</span></strong><em><span style="background:rgb(255,255,255);">配置的处理网络请求的线程个数配置,默认是3.</span><span style="background:rgb(255,255,255);"><br></span></em><strong><span style="background:rgb(255,255,255);">private val </span></strong><em><span style="background:rgb(255,255,255);">numProcessorThreads </span></em><span style="color:#000000;background:rgb(255,255,255);">= config.</span><em><span style="background:rgb(255,255,255);">numNetworkThreads</span></em></p>
<p style="background:rgb(255,255,255);"><em><span style="background:rgb(255,255,255);">得到</span></em><strong><span style="background:rgb(255,255,255);">queued.max.requests</span></strong><em><span style="background:rgb(255,255,255);">配置的请求队列的最大个数,默认500.</span><span style="background:rgb(255,255,255);"><br></span></em><strong><span style="background:rgb(255,255,255);">private val </span></strong><em><span style="background:rgb(255,255,255);">maxQueuedRequests </span></em><span style="color:#000000;background:rgb(255,255,255);">= config.</span><em><span style="background:rgb(255,255,255);">queuedMaxRequests</span></em></p>
<p style="background:rgb(255,255,255);"><em><span style="background:rgb(255,255,255);">这里生成总的处理线程的个数,用于网络请求,根据listener的个数与网络线程个数的乘积.默认只有一个listener.</span><span style="background:rgb(255,255,255);"><br></span></em><strong><span style="background:rgb(255,255,255);">private val </span></strong><em><span style="background:rgb(255,255,255);">totalProcessorThreads </span></em><span style="color:#000000;background:rgb(255,255,255);">= </span><em><span style="background:rgb(255,255,255);">numProcessorThreads </span></em><span style="color:#000000;background:rgb(255,255,255);">* </span><em><span style="background:rgb(255,255,255);">endpoints</span></em><span style="color:#000000;background:rgb(255,255,255);">.size</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">得到</span><strong><span style="background:rgb(255,255,255);">max.connections.per.ip</span></strong><span style="color:#000000;background:rgb(255,255,255);">配置的单机IP的最大连接个数的配置,默认不限制.</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><strong><span style="background:rgb(255,255,255);">private val </span></strong><em><span style="background:rgb(255,255,255);">maxConnectionsPerIp </span></em><span style="color:#000000;background:rgb(255,255,255);">= config.</span><em><span style="background:rgb(255,255,255);">maxConnectionsPerIp</span></em></p>
<p style="background:rgb(255,255,255);"><em><span style="background:rgb(255,255,255);">得到</span></em><strong><span style="background:rgb(255,255,255);">max.connections.per.ip.overrides</span></strong><em><span style="background:rgb(255,255,255);">配置的针对某个特别的IP的连接个数限制的重新设置值.</span></em></p>
<p style="background:rgb(255,255,255);"><em><span style="background:rgb(255,255,255);">多个IP配置间使用逗号分开,如:host1:500,host2:600</span><span style="background:rgb(255,255,255);"><br></span></em><strong><span style="background:rgb(255,255,255);">private val </span></strong><em><span style="background:rgb(255,255,255);">maxConnectionsPerIpOverrides </span></em><span style="color:#000000;background:rgb(255,255,255);">= config.</span><em><span style="background:rgb(255,255,255);">maxConnectionsPerIpOverrides</span><span style="background:rgb(255,255,255);"><br></span><span style="background:rgb(255,255,255);"><br></span></em><strong><span style="background:rgb(255,255,255);">this</span></strong><span style="color:#000000;background:rgb(255,255,255);">.</span><em><span style="background:rgb(255,255,255);">logIdent </span></em><span style="color:#000000;background:rgb(255,255,255);">= </span><strong><span style="background:rgb(255,255,255);">"[Socket Server on Broker " </span></strong><span style="color:#000000;background:rgb(255,255,255);">+ config.</span><em><span style="background:rgb(255,255,255);">brokerId </span></em><span style="color:#000000;background:rgb(255,255,255);">+ </span><strong><span style="background:rgb(255,255,255);">"], "</span><span style="background:rgb(255,255,255);"><br></span></strong></p>
<p style="background:rgb(255,255,255);"><strong><span style="background:rgb(255,255,255);">生成用于网络请求的管道,管道的处理线程数就是配置的线程数*listeners的个数,请求队列的大小就是配置的队列大小.</span><span style="background:rgb(255,255,255);"><br></span><span style="background:rgb(255,255,255);">val </span></strong><em><span style="background:rgb(255,255,255);">requestChannel </span></em><span style="color:#000000;background:rgb(255,255,255);">= </span><strong><span style="background:rgb(255,255,255);">new </span></strong><span style="color:#000000;background:rgb(255,255,255);">RequestChannel(</span><em><span style="background:rgb(255,255,255);">totalProcessorThreads</span></em><span style="color:#cc7832;background:rgb(255,255,255);">, </span><em><span style="background:rgb(255,255,255);">maxQueuedRequests</span></em><span style="color:#000000;background:rgb(255,255,255);">)</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);"> </span></p>
<p style="background:rgb(255,255,255);"><span style="background:rgb(255,255,255);">实例启动</span><span style="color:#000000;background:rgb(255,255,255);">:</span></p>
<p style="background:rgb(255,255,255);"><strong><span style="background:rgb(228,228,255);">def</span><span style="background:rgb(255,255,255);"> </span></strong><span style="color:#000000;background:rgb(255,255,255);">startup() {</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">  </span><strong><span style="background:rgb(255,255,255);">this</span></strong><span style="color:#000000;background:rgb(255,255,255);">.synchronized {</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">这里根据每个ip对应的连接数限制,生成一个用于对连接数进行记数的quotas实例.</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">    </span><em><span style="background:rgb(255,255,255);">connectionQuotas </span></em><span style="color:#000000;background:rgb(255,255,255);">= </span><strong><span style="background:rgb(255,255,255);">new </span></strong><span style="color:#000000;background:rgb(255,255,255);">ConnectionQuotas(</span><em><span style="background:rgb(255,255,255);">maxConnectionsPerIp</span></em><span style="color:#cc7832;background:rgb(255,255,255);">, </span></p>
<p style="background:rgb(255,255,255);"><span style="color:#cc7832;background:rgb(255,255,255);">       </span><em><span style="background:rgb(255,255,255);">maxConnectionsPerIpOverrides</span></em><span style="color:#000000;background:rgb(255,255,255);">)</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">读取如下配置项,用于生成socket中SO_SNDBUF,SO_RCVBUF等的buffer的大小.</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">读取</span><strong><span style="background:rgb(228,228,255);">socket.send.buffer.bytes</span></strong><span style="color:#000000;background:rgb(255,255,255);">配置项,默认值100kb,这个用于SOCKET发送数据的缓冲区大小.</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">读取</span><strong><span style="background:rgb(228,228,255);">socket.receive.buffer.bytes</span></strong><span style="color:#000000;background:rgb(255,255,255);">配置项默认值100kb,这个用于SOCKET的接收数据的缓冲区大小.</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">读取</span><strong><span style="background:rgb(228,228,255);">socket.request.max.bytes</span></strong><span style="color:#000000;background:rgb(255,255,255);">配置的值,这个用于设置每次请求的数据大小.默认值,100MB.</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">读取</span><strong><span style="background:rgb(255,255,255);">connections.max.idle.ms</span></strong><span style="color:#000000;background:rgb(255,255,255);">配置的值,默认为10分钟,用于设置每个连接最大的空闲回收时间.</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">    </span><strong><span style="background:rgb(255,255,255);">val </span></strong><span style="color:#000000;background:rgb(255,255,255);">sendBufferSize = config.</span><em><span style="background:rgb(255,255,255);">socketSendBufferBytes</span><span style="background:rgb(255,255,255);"><br></span><span style="background:rgb(255,255,255);">    </span></em><strong><span style="background:rgb(255,255,255);">val </span></strong><span style="color:#000000;background:rgb(255,255,255);">recvBufferSize = config.</span><em><span style="background:rgb(255,255,255);">socketReceiveBufferBytes</span><span style="background:rgb(255,255,255);"><br></span><span style="background:rgb(255,255,255);">    </span></em><strong><span style="background:rgb(255,255,255);">val </span></strong><span style="color:#000000;background:rgb(255,255,255);">maxRequestSize = config.</span><em><span style="background:rgb(255,255,255);">socketRequestMaxBytes</span><span style="background:rgb(255,255,255);"><br></span><span style="background:rgb(255,255,255);">    </span></em><strong><span style="background:rgb(255,255,255);">val </span></strong><span style="color:#000000;background:rgb(255,255,255);">connectionsMaxIdleMs = config.</span><em><span style="background:rgb(255,255,255);">connectionsMaxIdleMs</span></em></p>
<p style="background:rgb(255,255,255);"><em><span style="background:rgb(255,255,255);">得到配置项broker.id的值.</span><span style="background:rgb(255,255,255);"><br></span><span style="background:rgb(255,255,255);">    </span></em><strong><span style="background:rgb(255,255,255);">val </span></strong><span style="color:#000000;background:rgb(255,255,255);">brokerId = config.</span><em><span style="background:rgb(255,255,255);">brokerId</span><span style="background:rgb(255,255,255);"><br></span></em></p>
<p style="background:rgb(255,255,255);"><em><span style="background:rgb(255,255,255);">这里根据每一个endpoint(也就是配置的listener的协议与端口),生成处理的网络线程Processor与Acceptor实例.并启动endpoint对应的Acceptor实例.在生成Acceptor的实例时,会同时启动此实例中对应的线程处理实例数组Processor.</span><span style="background:rgb(255,255,255);"><br></span><span style="background:rgb(255,255,255);">    </span></em><strong><span style="background:rgb(255,255,255);">var </span></strong><span style="color:#000000;background:rgb(255,255,255);">processorBeginIndex = </span><span style="background:rgb(255,255,255);">0</span><span style="background:rgb(255,255,255);"><br></span><span style="background:rgb(255,255,255);">    </span><em><span style="background:rgb(255,255,255);">endpoints</span></em><span style="color:#000000;background:rgb(255,255,255);">.values.foreach { endpoint =&gt;</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">      </span><strong><span style="background:rgb(255,255,255);">val </span></strong><span style="color:#000000;background:rgb(255,255,255);">protocol = endpoint.protocolType</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">      </span><strong><span style="background:rgb(255,255,255);">val </span></strong><span style="color:#000000;background:rgb(255,255,255);">processorEndIndex = processorBeginIndex + </span><em><span style="background:rgb(255,255,255);">numProcessorThreads</span><span style="background:rgb(255,255,255);"><br></span><span style="background:rgb(255,255,255);"><br></span><span style="background:rgb(255,255,255);">      </span></em><strong><span style="background:rgb(255,255,255);">for </span></strong><span style="color:#000000;background:rgb(255,255,255);">(i &lt;- processorBeginIndex until processorEndIndex) {</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">        </span><em><span style="background:rgb(255,255,255);">processors</span></em><span style="color:#000000;background:rgb(255,255,255);">(i) = </span><strong><span style="background:rgb(255,255,255);">new </span></strong><span style="color:#000000;background:rgb(255,255,255);">Processor(i</span><span style="color:#cc7832;background:rgb(255,255,255);">,</span><span style="color:#cc7832;background:rgb(255,255,255);"><br></span><span style="color:#cc7832;background:rgb(255,255,255);">          </span><span style="color:#000000;background:rgb(255,255,255);">time</span><span style="color:#cc7832;background:rgb(255,255,255);">,</span><span style="color:#cc7832;background:rgb(255,255,255);"><br></span><span style="color:#cc7832;background:rgb(255,255,255);">          </span><span style="color:#000000;background:rgb(255,255,255);">maxRequestSize</span><span style="color:#cc7832;background:rgb(255,255,255);">,</span><span style="color:#cc7832;background:rgb(255,255,255);"><br></span><span style="color:#cc7832;background:rgb(255,255,255);">          </span><em><span style="background:rgb(255,255,255);">requestChannel</span></em><span style="color:#cc7832;background:rgb(255,255,255);">,</span><span style="color:#cc7832;background:rgb(255,255,255);"><br></span><span style="color:#cc7832;background:rgb(255,255,255);">          </span><em><span style="background:rgb(255,255,255);">connectionQuotas</span></em><span style="color:#cc7832;background:rgb(255,255,255);">,</span><span style="color:#cc7832;background:rgb(255,255,255);"><br></span><span style="color:#cc7832;background:rgb(255,255,255);">          </span><span style="color:#000000;background:rgb(255,255,255);">connectionsMaxIdleMs</span><span style="color:#cc7832;background:rgb(255,255,255);">,</span><span style="color:#cc7832;background:rgb(255,255,255);"><br></span><span style="color:#cc7832;background:rgb(255,255,255);">          </span><span style="color:#000000;background:rgb(255,255,255);">protocol</span><span style="color:#cc7832;background:rgb(255,255,255);">,</span><span style="color:#cc7832;background:rgb(255,255,255);"><br></span><span style="color:#cc7832;background:rgb(255,255,255);">          </span><span style="color:#000000;background:rgb(255,255,255);">config.values</span><span style="color:#cc7832;background:rgb(255,255,255);">,</span><span style="color:#cc7832;background:rgb(255,255,255);"><br></span><span style="color:#cc7832;background:rgb(255,255,255);">          </span><span style="color:#000000;background:rgb(255,255,255);">metrics</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">        )</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">      }</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">      </span><strong><span style="background:rgb(255,255,255);">val </span></strong><span style="color:#000000;background:rgb(255,255,255);">acceptor = </span><strong><span style="background:rgb(255,255,255);">new </span></strong><span style="color:#000000;background:rgb(255,255,255);">Acceptor(endpoint</span><span style="color:#cc7832;background:rgb(255,255,255);">, </span><span style="color:#000000;background:rgb(255,255,255);">sendBufferSize</span><span style="color:#cc7832;background:rgb(255,255,255);">, </span><span style="color:#000000;background:rgb(255,255,255);">recvBufferSize</span><span style="color:#cc7832;background:rgb(255,255,255);">, </span><span style="color:#000000;background:rgb(255,255,255);">brokerId</span><span style="color:#cc7832;background:rgb(255,255,255);">,</span><span style="color:#cc7832;background:rgb(255,255,255);"><br></span><span style="color:#cc7832;background:rgb(255,255,255);">        </span><em><span style="background:rgb(255,255,255);">processors</span></em><span style="color:#000000;background:rgb(255,255,255);">.slice(processorBeginIndex</span><span style="color:#cc7832;background:rgb(255,255,255);">, </span><span style="color:#000000;background:rgb(255,255,255);">processorEndIndex)</span><span style="color:#cc7832;background:rgb(255,255,255);">, </span><em><span style="background:rgb(255,255,255);">connectionQuotas</span></em><span style="color:#000000;background:rgb(255,255,255);">)</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">      </span><em><span style="background:rgb(255,255,255);">acceptors</span></em><span style="color:#000000;background:rgb(255,255,255);">.put(endpoint</span><span style="color:#cc7832;background:rgb(255,255,255);">, </span><span style="color:#000000;background:rgb(255,255,255);">acceptor)</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">      Utils.</span><em><span style="color:#000000;background:rgb(255,255,255);">newThread</span></em><span style="color:#000000;background:rgb(255,255,255);">(</span><strong><span style="background:rgb(255,255,255);">"kafka-socket-acceptor-%s-%d"</span></strong><span style="color:#000000;background:rgb(255,255,255);">.format(protocol.toString</span><span style="color:#cc7832;background:rgb(255,255,255);">, </span></p>
<p style="background:rgb(255,255,255);"><span style="color:#cc7832;background:rgb(255,255,255);">          </span><span style="color:#000000;background:rgb(255,255,255);">endpoint.port)</span><span style="color:#cc7832;background:rgb(255,255,255);">, </span><span style="color:#000000;background:rgb(255,255,255);">acceptor</span><span style="color:#cc7832;background:rgb(255,255,255);">, </span><strong><span style="background:rgb(255,255,255);">false</span></strong><span style="color:#000000;background:rgb(255,255,255);">).start()</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">      acceptor.awaitStartup()</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">      processorBeginIndex = processorEndIndex</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">    }</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">  }</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">  newGauge(</span><strong><span style="background:rgb(255,255,255);">"NetworkProcessorAvgIdlePercent"</span></strong><span style="color:#cc7832;background:rgb(255,255,255);">,</span><span style="color:#cc7832;background:rgb(255,255,255);"><br></span><span style="color:#cc7832;background:rgb(255,255,255);">    </span><strong><span style="background:rgb(255,255,255);">new </span></strong><span style="color:#000000;background:rgb(255,255,255);">Gauge[</span><span style="color:#cc7832;background:rgb(255,255,255);">Double</span><span style="color:#000000;background:rgb(255,255,255);">] {</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">      </span><strong><span style="background:rgb(255,255,255);">def </span></strong><span style="color:#000000;background:rgb(255,255,255);">value = </span><em><span style="background:rgb(255,255,255);">allMetricNames</span></em><span style="color:#000000;background:rgb(255,255,255);">.map( metricName =&gt;</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">        metrics.metrics().get(metricName).value()).sum / </span><em><span style="background:rgb(255,255,255);">totalProcessorThreads</span><span style="background:rgb(255,255,255);"><br></span><span style="background:rgb(255,255,255);">    </span></em><span style="color:#000000;background:rgb(255,255,255);">}</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">  )</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">  </span><span style="color:#000000;background:rgb(228,228,255);">info(</span><strong><span style="background:rgb(228,228,255);">"Started " </span></strong><span style="color:#000000;background:rgb(228,228,255);">+ acceptors.size + </span><strong><span style="background:rgb(228,228,255);">" acceptor threads"</span></strong><span style="color:#000000;background:rgb(228,228,255);">)</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">}</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);"> </span></p>
<h2><strong><em>接收网络请求</em></strong></h2>
<p>当<span style="font-family:'Times New Roman';">SocketServer</span><span style="font-family:SimSun;">实例生成并启动后</span><span style="font-family:'Times New Roman';">,</span><span style="font-family:SimSun;">每一个</span><span style="font-family:'Times New Roman';">endpoint</span><span style="font-family:SimSun;">会生成对应的</span><span style="font-family:'Times New Roman';">Acceptor</span><span style="font-family:SimSun;">的实例</span><span style="font-family:'Times New Roman';">,</span><span style="font-family:SimSun;">这个实例中根据网络请求配置的线程个数</span><span style="font-family:'Times New Roman';">,</span><span style="font-family:SimSun;">生成对应个数的</span><span style="font-family:'Times New Roman';">Processor</span><span style="font-family:SimSun;">实例</span><span style="font-family:'Times New Roman';">.</span></p>
<p>首先先看看<span style="font-family:'Times New Roman';">Acceptor</span><span style="font-family:SimSun;">实例中的</span><span style="font-family:'Times New Roman';">run</span><span style="font-family:SimSun;">函数</span><span style="font-family:'Times New Roman';">,</span><span style="font-family:SimSun;">这个用于对网络请求的接收</span><span style="font-family:'Times New Roman';">:</span></p>
<p style="background:rgb(255,255,255);"><strong><span style="background:rgb(255,255,255);">def </span></strong><span style="color:#000000;background:rgb(255,255,255);">run() {</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">  </span><em><span style="background:rgb(255,255,255);">serverChannel</span></em><span style="color:#000000;background:rgb(255,255,255);">.register(</span><em><span style="background:rgb(255,255,255);">nioSelector</span></em><span style="color:#cc7832;background:rgb(255,255,255);">, </span><span style="color:#000000;background:rgb(255,255,255);">SelectionKey.</span><em><span style="background:rgb(255,255,255);">OP_ACCEPT</span></em><span style="color:#000000;background:rgb(255,255,255);">)</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">  startupComplete()</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">  </span><strong><span style="background:rgb(255,255,255);">try </span></strong><span style="color:#000000;background:rgb(255,255,255);">{</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">    </span><strong><span style="background:rgb(255,255,255);">var </span></strong><span style="color:#000000;background:rgb(255,255,255);">currentProcessor = </span><span style="background:rgb(255,255,255);">0</span><span style="background:rgb(255,255,255);"><br></span><span style="background:rgb(255,255,255);">    </span><strong><span style="background:rgb(255,255,255);">while </span></strong><span style="color:#000000;background:rgb(255,255,255);">(isRunning) {</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">      </span><strong><span style="background:rgb(255,255,255);">try </span></strong><span style="color:#000000;background:rgb(255,255,255);">{</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">这里进行堵塞接收,最多等500ms,如果ready返回的值是0表示还没有准备好,否则表示准备就绪.表示有通道已经被注册</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">        </span><strong><span style="background:rgb(255,255,255);">val </span></strong><span style="color:#000000;background:rgb(255,255,255);">ready = </span><em><span style="background:rgb(255,255,255);">nioSelector</span></em><span style="color:#000000;background:rgb(255,255,255);">.select(</span><span style="background:rgb(255,255,255);">500</span><span style="color:#000000;background:rgb(255,255,255);">)</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">        </span><strong><span style="background:rgb(255,255,255);">if </span></strong><span style="color:#000000;background:rgb(255,255,255);">(ready &gt; </span><span style="background:rgb(255,255,255);">0</span><span style="color:#000000;background:rgb(255,255,255);">) {</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">这里得到已经准备好的网络通道的key的集合.</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">          </span><strong><span style="background:rgb(255,255,255);">val </span></strong><span style="color:#000000;background:rgb(255,255,255);">keys = </span><em><span style="background:rgb(255,255,255);">nioSelector</span></em><span style="color:#000000;background:rgb(255,255,255);">.selectedKeys()</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">          </span><strong><span style="background:rgb(255,255,255);">val </span></strong><span style="color:#000000;background:rgb(255,255,255);">iter = keys.iterator()</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">          </span><strong><span style="background:rgb(255,255,255);">while </span></strong><span style="color:#000000;background:rgb(255,255,255);">(iter.hasNext &amp;&amp; isRunning) {</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">            </span><strong><span style="background:rgb(255,255,255);">try </span></strong><span style="color:#000000;background:rgb(255,255,255);">{</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">              </span><strong><span style="background:rgb(255,255,255);">val </span></strong><span style="color:#000000;background:rgb(255,255,255);">key = iter.next</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">              iter.remove()</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">如果selectkey已经注册到accept事件,通过accept函数与对应的线程Processor进行处理.</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">这里表示这个socket的通道包含有一个client端的连接请求.</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">              </span><strong><span style="background:rgb(255,255,255);">if </span></strong><span style="color:#000000;background:rgb(255,255,255);">(key.isAcceptable)</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">                accept(key</span><span style="color:#cc7832;background:rgb(255,255,255);">, </span><span style="color:#000000;background:rgb(255,255,255);">processors(currentProcessor))</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">              </span><strong><span style="background:rgb(255,255,255);">else</span><span style="background:rgb(255,255,255);"><br></span><span style="background:rgb(255,255,255);">                throw new </span></strong><span style="color:#000000;background:rgb(255,255,255);">IllegalStateException(</span><strong><span style="background:rgb(255,255,255);">"Unrecognized key state for acceptor </span></strong></p>
<p style="background:rgb(255,255,255);"><strong><span style="background:rgb(255,255,255);">                     thread."</span></strong><span style="color:#000000;background:rgb(255,255,255);">)</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);"> </span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">每次接收一个socket请求后,用于处理的线程进行轮询到一个线程中处理.</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">              </span><em><span style="color:#808080;background:rgb(255,255,255);">// round robin to the next processor thread</span><span style="color:#808080;background:rgb(255,255,255);"><br></span><span style="color:#808080;background:rgb(255,255,255);">              </span></em><span style="color:#000000;background:rgb(255,255,255);">currentProcessor = (currentProcessor + </span><span style="background:rgb(255,255,255);">1</span><span style="color:#000000;background:rgb(255,255,255);">) % processors.length</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">            } </span><strong><span style="background:rgb(255,255,255);">catch </span></strong><span style="color:#000000;background:rgb(255,255,255);">{</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">              </span><strong><span style="background:rgb(255,255,255);">case </span></strong><span style="color:#000000;background:rgb(255,255,255);">e: </span><span style="color:#20999d;background:rgb(255,255,255);">Throwable </span><span style="color:#000000;background:rgb(255,255,255);">=&gt; error(</span><strong><span style="background:rgb(255,255,255);">"Error while accepting connection"</span></strong><span style="color:#cc7832;background:rgb(255,255,255);">, </span><span style="color:#000000;background:rgb(255,255,255);">e)</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">            }</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">          }</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">        }</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">      }</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">      </span><strong><span style="background:rgb(255,255,255);">catch </span></strong><span style="color:#000000;background:rgb(255,255,255);">{</span><em><span style="color:#808080;background:rgb(255,255,255);"><br></span><span style="color:#808080;background:rgb(255,255,255);">        </span></em><strong><span style="background:rgb(255,255,255);">case </span></strong><span style="color:#000000;background:rgb(255,255,255);">e: ControlThrowable =&gt; </span><strong><span style="background:rgb(255,255,255);">throw </span></strong><span style="color:#000000;background:rgb(255,255,255);">e</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">        </span><strong><span style="background:rgb(255,255,255);">case </span></strong><span style="color:#000000;background:rgb(255,255,255);">e: </span><span style="color:#20999d;background:rgb(255,255,255);">Throwable </span><span style="color:#000000;background:rgb(255,255,255);">=&gt; error(</span><strong><span style="background:rgb(255,255,255);">"Error occurred"</span></strong><span style="color:#cc7832;background:rgb(255,255,255);">, </span><span style="color:#000000;background:rgb(255,255,255);">e)</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">      }</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">    }</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">  } </span><strong><span style="background:rgb(255,255,255);">finally </span></strong><span style="color:#000000;background:rgb(255,255,255);">{</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">    debug(</span><strong><span style="background:rgb(255,255,255);">"Closing server socket and selector."</span></strong><span style="color:#000000;background:rgb(255,255,255);">)</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">    swallowError(</span><em><span style="background:rgb(255,255,255);">serverChannel</span></em><span style="color:#000000;background:rgb(255,255,255);">.close())</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">    swallowError(</span><em><span style="background:rgb(255,255,255);">nioSelector</span></em><span style="color:#000000;background:rgb(255,255,255);">.close())</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">    shutdownComplete()</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">  }</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">}</span></p>
<p> </p>
<p>接下来看看<span style="font-family:'Times New Roman';">accept</span><span style="font-family:SimSun;">函数的处理流程</span><span style="font-family:'Times New Roman';">:</span></p>
<p style="background:rgb(255,255,255);"><strong><span style="background:rgb(228,228,255);">def</span><span style="background:rgb(255,255,255);"> </span></strong><span style="color:#000000;background:rgb(255,255,255);">accept(key: SelectionKey</span><span style="color:#cc7832;background:rgb(255,255,255);">, </span><span style="color:#000000;background:rgb(255,255,255);">processor: Processor) {</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">  </span><strong><span style="background:rgb(255,255,255);">val </span></strong><span style="color:#000000;background:rgb(255,255,255);">serverSocketChannel = key.channel().asInstanceOf[ServerSocketChannel]</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">得到请求的socket通道.</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">  </span><strong><span style="background:rgb(255,255,255);">val </span></strong><span style="color:#000000;background:rgb(255,255,255);">socketChannel = serverSocketChannel.accept()</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">  </span><strong><span style="background:rgb(255,255,255);">try </span></strong><span style="color:#000000;background:rgb(255,255,255);">{</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">这里检查当前的IP的连接数是否已经达到了最大的连接数,如果是,直接throw too many connect.</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">    connectionQuotas.inc(socketChannel.socket().getInetAddress)</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">    socketChannel.configureBlocking(</span><strong><span style="background:rgb(255,255,255);">false</span></strong><span style="color:#000000;background:rgb(255,255,255);">)</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">    socketChannel.socket().setTcpNoDelay(</span><strong><span style="background:rgb(255,255,255);">true</span></strong><span style="color:#000000;background:rgb(255,255,255);">)</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">    socketChannel.socket().setKeepAlive(</span><strong><span style="background:rgb(255,255,255);">true</span></strong><span style="color:#000000;background:rgb(255,255,255);">)</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">    socketChannel.socket().setSendBufferSize(sendBufferSize)</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">    .....................................</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">这里通过对应线程的Processor实例(Endpoint对应的Processor)来处理这个socket通道.</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">    </span><span style="color:#000000;background:rgb(228,228,255);">processor.accept(socketChannel)</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">  } </span><strong><span style="background:rgb(255,255,255);">catch </span></strong><span style="color:#000000;background:rgb(255,255,255);">{</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">    </span><strong><span style="background:rgb(255,255,255);">case </span></strong><span style="color:#000000;background:rgb(255,255,255);">e: TooManyConnectionsException =&gt;</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">      info(</span><strong><span style="background:rgb(255,255,255);">"Rejected connection from %s, address already has the configured maximum </span></strong></p>
<p style="background:rgb(255,255,255);"><strong><span style="background:rgb(255,255,255);">           of %d connections."</span></strong><span style="color:#000000;background:rgb(255,255,255);">.format(e.ip</span><span style="color:#cc7832;background:rgb(255,255,255);">, </span><span style="color:#000000;background:rgb(255,255,255);">e.count))</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">      </span><span style="color:#000000;background:rgb(228,228,255);">close(socketChannel)</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">  }</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">}</span></p>
<p> </p>
<p>然后再看看这个<span style="font-family:'Times New Roman';">Processor</span><span style="font-family:SimSun;">实例中</span><span style="font-family:'Times New Roman';">,</span><span style="font-family:SimSun;">如何去处理</span><span style="font-family:'Times New Roman';">socket</span><span style="font-family:SimSun;">通道的请求流程</span><span style="font-family:'Times New Roman';">:</span></p>
<p style="background:rgb(255,255,255);"><em><span style="color:#808080;background:rgb(255,255,255);">/**</span><span style="color:#808080;background:rgb(255,255,255);"><br></span><span style="color:#808080;background:rgb(255,255,255);"> * Queue up a new connection for reading</span><span style="color:#808080;background:rgb(255,255,255);"><br></span><span style="color:#808080;background:rgb(255,255,255);"> */</span><span style="color:#808080;background:rgb(255,255,255);"><br></span></em><strong><span style="background:rgb(255,255,255);">def </span></strong><span style="color:#000000;background:rgb(255,255,255);">accept(socketChannel: SocketChannel) {</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">把socket通道添加到队列中.等待Processor线程的处理.</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">  </span><em><span style="background:rgb(255,255,255);">newConnections</span></em><span style="color:#000000;background:rgb(255,255,255);">.add(socketChannel)</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">  wakeup()</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">}</span></p>
<p> </p>
<p>接下来<span style="font-family:'Times New Roman';">,</span><span style="font-family:SimSun;">当</span><span style="font-family:'Times New Roman';">Processor</span><span style="font-family:SimSun;">的</span><span style="font-family:'Times New Roman';">run</span><span style="font-family:SimSun;">函数不停的迭代时</span><span style="font-family:'Times New Roman';">,</span><span style="font-family:SimSun;">会执行如下的处理流程</span><span style="font-family:'Times New Roman';">:</span></p>
<p style="background:rgb(255,255,255);"><strong><span style="background:rgb(255,255,255);">override def </span></strong><span style="color:#000000;background:rgb(255,255,255);">run() {</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">  startupComplete()</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">  </span><strong><span style="background:rgb(255,255,255);">while</span></strong><span style="color:#000000;background:rgb(255,255,255);">(isRunning) {</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">    </span><strong><span style="background:rgb(255,255,255);">try </span></strong><span style="color:#000000;background:rgb(255,255,255);">{</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">这里取出一个Socket的通道,并注册到selector中,</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">      </span><em><span style="color:#808080;background:rgb(255,255,255);">// setup any new connections that have been queued up</span><span style="color:#808080;background:rgb(255,255,255);"><br></span><span style="color:#808080;background:rgb(255,255,255);">      </span></em><span style="color:#000000;background:rgb(255,255,255);">configureNewConnections()</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">      </span><em><span style="color:#808080;background:rgb(255,255,255);">// register any new responses for writing</span><span style="color:#808080;background:rgb(255,255,255);"><br></span><span style="color:#808080;background:rgb(255,255,255);">      </span></em><span style="color:#000000;background:rgb(255,255,255);">processNewResponses()</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">      </span><strong><span style="background:rgb(255,255,255);">try </span></strong><span style="color:#000000;background:rgb(255,255,255);">{</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">这里开始处理socket通道中的请求,根据如下几个流程进行处理:</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">1,如果请求中包含有一个</span><span style="color:#000000;background:rgb(228,228,255);">isConnectable</span><span style="color:#000000;background:rgb(255,255,255);">操作,把这个连接缓存起来.</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">2,如果请求中包含有</span><span style="color:#000000;background:rgb(228,228,255);">isReadable</span><span style="color:#000000;background:rgb(255,255,255);">操作.表示这个client的管道中包含有数据,需要读取,接收数据.</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">3,如果包含有isWriteable的操作,表示需要向client端进行写操作.</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">4,最后检查是否有connect被关闭的请求或connect连接空闲过期.</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">        </span><em><span style="background:rgb(255,255,255);">selector</span></em><span style="color:#000000;background:rgb(255,255,255);">.poll(</span><span style="background:rgb(255,255,255);">300</span><span style="color:#000000;background:rgb(255,255,255);">)</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">      } </span><strong><span style="background:rgb(255,255,255);">catch </span></strong><span style="color:#000000;background:rgb(255,255,255);">{</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">        </span><strong><span style="background:rgb(255,255,255);">case </span></strong><span style="color:#000000;background:rgb(255,255,255);">e @ (_: IllegalStateException | _: IOException) =&gt;</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">          error(</span><strong><span style="background:rgb(255,255,255);">"Closing processor %s due to illegal state or IO exception"</span></strong><span style="color:#000000;background:rgb(255,255,255);">.format(id))</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">          swallow(closeAll())</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">          shutdownComplete()</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">          </span><strong><span style="background:rgb(255,255,255);">throw </span></strong><span style="color:#000000;background:rgb(255,255,255);">e</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">      }</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);"> </span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">得到对应的请求的Request的实例,并把这个Request通过SocketServer中的RequestChannel的sendRequest的函数,把请求添加到请求的队列中.等待KafkaApis来进行处理.</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">      </span><em><span style="background:rgb(255,255,255);">selector</span></em><span style="color:#000000;background:rgb(255,255,255);">.completedReceives.asScala.foreach { receive =&gt;</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">        </span><strong><span style="background:rgb(255,255,255);">try </span></strong><span style="color:#000000;background:rgb(255,255,255);">{</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">          </span><strong><span style="background:rgb(255,255,255);">val </span></strong><span style="color:#000000;background:rgb(255,255,255);">channel = </span><em><span style="background:rgb(255,255,255);">selector</span></em><span style="color:#000000;background:rgb(255,255,255);">.channel(receive.source)</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">          </span><strong><span style="background:rgb(255,255,255);">val </span></strong><span style="color:#000000;background:rgb(255,255,255);">session = RequestChannel.</span><em><span style="color:#000000;background:rgb(255,255,255);">Session</span></em><span style="color:#000000;background:rgb(255,255,255);">(</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">              </span><strong><span style="background:rgb(255,255,255);">new </span></strong><span style="color:#000000;background:rgb(255,255,255);">KafkaPrincipal(KafkaPrincipal.</span><em><span style="background:rgb(255,255,255);">USER_TYPE</span></em><span style="color:#cc7832;background:rgb(255,255,255);">,</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#cc7832;background:rgb(255,255,255);">                   </span><span style="color:#000000;background:rgb(255,255,255);">channel.principal.getName)</span><span style="color:#cc7832;background:rgb(255,255,255);">,</span><span style="color:#cc7832;background:rgb(255,255,255);"><br></span><span style="color:#cc7832;background:rgb(255,255,255);">              </span><span style="color:#000000;background:rgb(255,255,255);">channel.socketAddress)</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">          </span><strong><span style="background:rgb(255,255,255);">val </span></strong><span style="color:#000000;background:rgb(255,255,255);">req = RequestChannel.</span><em><span style="color:#000000;background:rgb(255,255,255);">Request</span></em><span style="color:#000000;background:rgb(255,255,255);">(processor = id</span><span style="color:#cc7832;background:rgb(255,255,255);">, </span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">               connectionId = receive.source</span><span style="color:#cc7832;background:rgb(255,255,255);">, </span><span style="color:#000000;background:rgb(255,255,255);">session = session</span><span style="color:#cc7832;background:rgb(255,255,255);">, </span></p>
<p style="background:rgb(255,255,255);"><span style="color:#cc7832;background:rgb(255,255,255);">               </span><span style="color:#000000;background:rgb(255,255,255);">buffer = receive.payload</span><span style="color:#cc7832;background:rgb(255,255,255);">, </span><span style="color:#000000;background:rgb(255,255,255);">startTimeMs = time.milliseconds</span><span style="color:#cc7832;background:rgb(255,255,255);">,</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#cc7832;background:rgb(255,255,255);">               </span><span style="color:#000000;background:rgb(255,255,255);">securityProtocol = protocol)</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);"> </span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">这里请参见KafkaApis中对requestChannel的队列请求进行处理的具体流程.</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">          requestChannel.sendRequest(req)</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">        } </span><strong><span style="background:rgb(255,255,255);">catch </span></strong><span style="color:#000000;background:rgb(255,255,255);">{</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">          </span><strong><span style="background:rgb(255,255,255);">case </span></strong><span style="color:#000000;background:rgb(255,255,255);">e @ (_: InvalidRequestException | _: SchemaException) =&gt;</span><em><span style="color:#808080;background:rgb(255,255,255);"><br></span><span style="color:#808080;background:rgb(255,255,255);">            </span></em><span style="color:#000000;background:rgb(255,255,255);">error(</span><strong><span style="background:rgb(255,255,255);">"Closing socket for " </span></strong><span style="color:#000000;background:rgb(255,255,255);">+ receive.source + </span><strong><span style="background:rgb(255,255,255);">" because of error"</span></strong><span style="color:#cc7832;background:rgb(255,255,255);">, </span><span style="color:#000000;background:rgb(255,255,255);">e)</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">            close(</span><em><span style="background:rgb(255,255,255);">selector</span></em><span style="color:#cc7832;background:rgb(255,255,255);">, </span><span style="color:#000000;background:rgb(255,255,255);">receive.source)</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">        }</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">        </span><em><span style="background:rgb(255,255,255);">selector</span></em><span style="color:#000000;background:rgb(255,255,255);">.mute(receive.source)</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">      }</span><span style="color:#000000;background:rgb(255,255,255);"><br></span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">这里的send完成表示有向client端进行响应的写操作处理完成.</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">      </span><em><span style="background:rgb(255,255,255);">selector</span></em><span style="color:#000000;background:rgb(255,255,255);">.completedSends.asScala.foreach { send =&gt;</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">        </span><strong><span style="background:rgb(255,255,255);">val </span></strong><span style="color:#000000;background:rgb(255,255,255);">resp = </span><em><span style="background:rgb(255,255,255);">inflightResponses</span></em><span style="color:#000000;background:rgb(255,255,255);">.remove(send.destination).getOrElse {</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">          </span><strong><span style="background:rgb(255,255,255);">throw new </span></strong><span style="color:#000000;background:rgb(255,255,255);">IllegalStateException(</span><strong><span style="background:rgb(255,255,255);">s"Send for </span><span style="background:rgb(255,255,255);">$</span></strong><span style="color:#000000;background:rgb(255,255,255);">{send.destination}</span><strong><span style="background:rgb(255,255,255);"> completed, </span></strong></p>
<p style="background:rgb(255,255,255);"><strong><span style="background:rgb(255,255,255);">               but not in `inflightResponses`"</span></strong><span style="color:#000000;background:rgb(255,255,255);">)</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">        }</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">        resp.request.updateRequestMetrics()</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">        </span><em><span style="background:rgb(255,255,255);">selector</span></em><span style="color:#000000;background:rgb(255,255,255);">.unmute(send.destination)</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">      }</span><span style="color:#000000;background:rgb(255,255,255);"><br></span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">如果socket server中包含有已经关闭的连接,减少这个quotas中对此ip的连接数的值.</span></p>
<p style="background:rgb(255,255,255);"><span style="color:#000000;background:rgb(255,255,255);">这个情况包含connect处理超时或者说有connect的消息处理错误被发起了close的请求后的处理成功的消息.</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">      </span><em><span style="background:rgb(255,255,255);">selector</span></em><span style="color:#000000;background:rgb(255,255,255);">.disconnected.asScala.foreach { connectionId =&gt;</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">        </span><strong><span style="background:rgb(255,255,255);">val </span></strong><span style="color:#000000;background:rgb(255,255,255);">remoteHost = ConnectionId.</span><em><span style="color:#000000;background:rgb(255,255,255);">fromString</span></em><span style="color:#000000;background:rgb(255,255,255);">(connectionId).getOrElse {</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">          </span><strong><span style="background:rgb(255,255,255);">throw new </span></strong><span style="color:#000000;background:rgb(255,255,255);">IllegalStateException(</span><strong><span style="background:rgb(255,255,255);">s"connectionId has unexpected format: </span></strong></p>
<p style="background:rgb(255,255,255);"><strong><span style="background:rgb(255,255,255);">              </span><span style="background:rgb(255,255,255);">$</span></strong><span style="color:#000000;background:rgb(255,255,255);">connectionId</span><strong><span style="background:rgb(255,255,255);">"</span></strong><span style="color:#000000;background:rgb(255,255,255);">)</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">        }.remoteHost</span><em><span style="color:#808080;background:rgb(255,255,255);"><br></span><span style="color:#808080;background:rgb(255,255,255);">        </span></em><span style="color:#000000;background:rgb(255,255,255);">connectionQuotas.dec(InetAddress.</span><em><span style="color:#000000;background:rgb(255,255,255);">getByName</span></em><span style="color:#000000;background:rgb(255,255,255);">(remoteHost))</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">      }</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">    } </span><strong><span style="background:rgb(255,255,255);">catch </span></strong><span style="color:#000000;background:rgb(255,255,255);">{</span><em><span style="color:#808080;background:rgb(255,255,255);"><br></span><span style="color:#808080;background:rgb(255,255,255);">      </span></em><strong><span style="background:rgb(255,255,255);">case </span></strong><span style="color:#000000;background:rgb(255,255,255);">e : ControlThrowable =&gt; </span><strong><span style="background:rgb(255,255,255);">throw </span></strong><span style="color:#000000;background:rgb(255,255,255);">e</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">      </span><strong><span style="background:rgb(255,255,255);">case </span></strong><span style="color:#000000;background:rgb(255,255,255);">e : </span><span style="color:#20999d;background:rgb(255,255,255);">Throwable </span><span style="color:#000000;background:rgb(255,255,255);">=&gt;</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">        error(</span><strong><span style="background:rgb(255,255,255);">"Processor got uncaught exception."</span></strong><span style="color:#cc7832;background:rgb(255,255,255);">, </span><span style="color:#000000;background:rgb(255,255,255);">e)</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">    }</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">  }</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">  debug(</span><strong><span style="background:rgb(255,255,255);">"Closing selector - processor " </span></strong><span style="color:#000000;background:rgb(255,255,255);">+ id)</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">  swallowError(closeAll())</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">  shutdownComplete()</span><span style="color:#000000;background:rgb(255,255,255);"><br></span><span style="color:#000000;background:rgb(255,255,255);">}</span></p>
            </div>
                </div>