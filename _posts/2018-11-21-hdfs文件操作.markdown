---
layout:     post
title:      hdfs文件操作
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：早起签到群:642179511 [2018我们要早起不赖床]					https://blog.csdn.net/qq_36238595/article/details/78223257				</div>
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<h3 id="常用操作命令">常用操作命令</h3>

<p>查看目录    hadoop fs -ls  /</p>

<p>创建文件夹 hadoop fs -mkdir /文件夹名</p>

<p>往里塞文件 hadoop fs -put 本地文件地址  hdfs文件路径   </p>

<p>删除文件 hadoop fs -rm /文件名</p>

<p>删除文件夹  hadoop fs -rm -r /文件夹名</p>

<p>查看文件内容 hadoop fs -cat /文件名</p>

<p>将hdfs中的文件下载到本机上 hadoop fs -get hdfs文件路径 本机路径(保存的地址)</p>



<h3 id="通过eclipse代码操作hdfs">通过eclipse代码操作hdfs</h3>



<h4 id="操作步骤">操作步骤</h4>

<p></p><li>需要导入hadoop/share/hadoop/common目录下3个jar和lib目录下全部jar <br>
还需要导入hadoop/share/hadoop/hdfs目录下3个jar和lib目录下全部jar <br>
</li><li>进行Configuration 类的设置 <br>
</li><li>使用FileSystem进行文件操作</li><p></p>

<pre class="prettyprint"><code class=" hljs cs">
import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> Demo {

    Configuration conf ; 
    FileSystem fs ;
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(String[] args) {
        <span class="hljs-keyword">new</span> Demo();
    }

    <span class="hljs-keyword">public</span> <span class="hljs-title">Demo</span>(){
        conf = <span class="hljs-keyword">new</span> Configuration();
        conf.<span class="hljs-keyword">set</span>(<span class="hljs-string">"fs.defaultFS"</span>,<span class="hljs-string">"hdfs://localhost:9000"</span>);
        conf.<span class="hljs-keyword">set</span>(<span class="hljs-string">"fs.hdfs.impl"</span>,<span class="hljs-string">"org.apache.hadoop.hdfs.DistributedFileSystem"</span>);
        createFile(); <span class="hljs-comment">//创建文件</span>
        createDir(); <span class="hljs-comment">//创建文件</span>
        openwrite(); <span class="hljs-comment">//打开test.txt文件进行写入</span>
        openread(); <span class="hljs-comment">//读取test.txt</span>
        updatename(); <span class="hljs-comment">//更名</span>
        delete(); <span class="hljs-comment">//删除</span>
    }
        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span>(){
        <span class="hljs-keyword">try</span> {
            fs = FileSystem.<span class="hljs-keyword">get</span>(conf);
            fs.delete(<span class="hljs-keyword">new</span> Path(<span class="hljs-string">"test.txt"</span>));
            fs.close();
        } <span class="hljs-keyword">catch</span> (Exception e) {
            <span class="hljs-comment">// TODO Auto-generated catch block</span>
            e.printStackTrace();
        }
    }
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updatename</span>(){
        <span class="hljs-keyword">try</span> {
            fs = FileSystem.<span class="hljs-keyword">get</span>(conf);
            fs.rename(<span class="hljs-keyword">new</span> Path(<span class="hljs-string">"test"</span>), <span class="hljs-keyword">new</span> Path(<span class="hljs-string">"newtest"</span>));
            fs.close();
        } <span class="hljs-keyword">catch</span> (Exception e) {
            <span class="hljs-comment">// TODO Auto-generated catch block</span>
            e.printStackTrace();
        }
    }
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">openread</span>(){
        <span class="hljs-keyword">try</span> {
            fs = FileSystem.<span class="hljs-keyword">get</span>(conf);
            FSDataInputStream input = fs.open(<span class="hljs-keyword">new</span> Path(<span class="hljs-string">"test.txt"</span>));
            <span class="hljs-comment">//System.out.println(input.readLine());</span>
            BufferedReader buff = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(input));
            System.<span class="hljs-keyword">out</span>.println(buff.readLine());

            fs.close();
            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">"create dir ok"</span>);
        } <span class="hljs-keyword">catch</span> (Exception e) {
            <span class="hljs-comment">// TODO Auto-generated catch block</span>
            e.printStackTrace();
        }
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">openwrite</span>(){
        <span class="hljs-keyword">try</span> {
            fs = FileSystem.<span class="hljs-keyword">get</span>(conf);
            String str = <span class="hljs-string">"hello hadoop"</span>;
            <span class="hljs-keyword">byte</span>[] b = <span class="hljs-string">"hello hadoop"</span>.getBytes();
            FSDataOutputStream <span class="hljs-keyword">out</span> = fs.append(<span class="hljs-keyword">new</span> Path(<span class="hljs-string">"test.txt"</span>));
            <span class="hljs-keyword">out</span>.write(b, <span class="hljs-number">0</span>, str.length());
            <span class="hljs-keyword">out</span>.close();
            fs.close();
            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">"write ok"</span>);
        } <span class="hljs-keyword">catch</span> (Exception e) {
            <span class="hljs-comment">// TODO Auto-generated catch block</span>
            e.printStackTrace();
        }
    }
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">createFile</span>(){
        <span class="hljs-keyword">try</span> {
            fs = FileSystem.<span class="hljs-keyword">get</span>(conf);
            fs.create(<span class="hljs-keyword">new</span> Path(<span class="hljs-string">"test.txt"</span>));
            fs.close();
            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">"create ok"</span>);
        } <span class="hljs-keyword">catch</span> (Exception e) {
            <span class="hljs-comment">// TODO Auto-generated catch block</span>
            e.printStackTrace();
        }
    }
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">createDir</span>(){
    <span class="hljs-keyword">try</span> {
        fs = FileSystem.<span class="hljs-keyword">get</span>(conf);
        fs.create(<span class="hljs-keyword">new</span> Path(<span class="hljs-string">"myDir"</span>));
        fs.close();
        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">"create dir ok"</span>);
    } <span class="hljs-keyword">catch</span> (Exception e) {
        <span class="hljs-comment">// TODO Auto-generated catch block</span>
        e.printStackTrace();
    }
}
}</code></pre>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>