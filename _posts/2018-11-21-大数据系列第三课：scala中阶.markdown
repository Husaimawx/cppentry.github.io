---
layout:     post
title:      大数据系列第三课：scala中阶
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<p><span style="font-size:14px;">第一阶段：<span style="font-family:'Times New Roman';">Spark streaming</span><span style="font-family:'宋体';">、</span><span style="font-family:'Times New Roman';">spark sql</span><span style="font-family:'宋体';">、</span><span style="font-family:'Times New Roman';">kafka</span><span style="font-family:'宋体';">、</span><span style="font-family:'Times New Roman';">spark</span><span style="font-family:'宋体';">内核原</span>
  理（必须有一个大型项目经验）；</span></p>
<p><span style="font-size:14px;">第二阶段：<span style="font-family:'Times New Roman';">spark</span><span style="font-family:'宋体';">运行的各种环境，各种故障的解决，性能</span>  优化（精通<span style="font-family:'Times New Roman';">spark</span><span style="font-family:'宋体';">内核、运行原理）；</span></span></p>
<p><span style="font-size:14px;">第三阶段：流处理、机器学习为鳌头，需要首先掌握前两个  阶段的内容；</span></p>
<p><span style="color:rgb(255,0,0);">跟随王家林老师的零基础讲解，注重动手实战，成为<span style="font-family:'Times New Roman';">spark</span><span style="font-family:'宋体';">高手，笑傲大数据之林！</span></span></p>
<p><span style="color:rgb(255,0,0);">第一部分：学习笔记</span></p>
<p>本期内容：</p>
<p><span></span>1 Scala<span style="font-family:'宋体';">中函数式编程彻底详解</span></p>
<p><span></span>2 Spark<span style="font-family:'宋体';">源码中的</span><span style="font-family:'Times New Roman';">Scala</span><span style="font-family:'宋体';">函数式编程</span></p>
<p><span></span>3 <span style="font-family:'宋体';">案例和作业</span></p>
<p><span style="font-family:'宋体';"></span></p>
<p><strong>一、函数、高阶函数</strong></p>
<p>1<span style="font-family:'宋体';">、最基础函数，函数不依赖类、对象，可以作为一等公民进行赋值。</span></p>
<pre><code class="language-java">def fun1(name:String){println(name)}
val fun1_v = fun1 _
fun1("Spark")</code></pre>
<p>2<span style="font-family:'宋体';">、匿名函数</span><span style="font-family:'Times New Roman';">:</span><span style="font-family:'宋体';">参数名称 </span><span style="font-family:'Times New Roman';">=</span><span style="font-family:'宋体';">（参数：类型）</span><span style="font-family:'Times New Roman';">=&gt; </span><span style="font-family:'宋体';">函数体</span></p>
<p>一般会将匿名函数赋值给一个变量。</p>
<pre><code class="language-java">val fun2 = (content:String) =&gt;println(content)
fun2("Hadoop")</code></pre>
<p>3<span style="font-family:'宋体';">高阶函数： （</span><span style="font-family:'Times New Roman';">1</span><span style="font-family:'宋体';">）函数参数也是函数</span><span style="font-family:'Times New Roman';">(</span><span style="font-family:'宋体';">函数作为一等公民可以赋值给变</span> 量，也可以作为函数的参数<span style="font-family:'Times New Roman';">)</span></p>
<p><span></span>  （<span style="font-family:'Times New Roman';">2</span><span style="font-family:'宋体';">）高阶函数返回值也有可能为函数</span></p>
<p><span style="font-family:'宋体';"></span></p><pre><code class="language-java">val hiScala = (content:String) =&gt;println(content)
//定义函数
def bigData(func:(String) =&gt;Unit，content:String){func(content)}
//第一个参数是一个String类型字符串，返回类型Unit
bigData(hiScala,"Spark")
//调用函数
val array =Array(1,2,3,4,5,6,7,8,9)
array.map(item =&gt;2*item)
array.map(item =&gt;println(item))
//打印出1到9</code></pre>
<p>4<span style="font-family:'宋体';">、</span>高阶函数返回值也有可能为函数</p>
<pre><code class="language-java">def func_Returned(content:String) = (message:String) =println(message)
//func_Returned本身返回字符串类型
func_Returned("Spark")
res:String =&gt;Unit = &lt;function1&gt;
//输入类型Strin，返回Unit =function1 为一个函数
val returned = func_Returned("Spark")
returned("Scala")</code></pre>
<p>高阶函数可以自动推导出参数的类型，在函数的作用的函数体内只使用一次函数输入参数值，我们可以将输入函数的名称省略掉，用“<span style="font-family:'Times New Roman';">_</span><span style="font-family:'宋体';">”代替。</span></p>
<pre><code class="language-java">def  spark(func:(String) =&gt;Unit,name:String){func(name)}  
//调用第一个参数（函数func），第二个参数为String（name）
spark((name:String) =&gt;println(name),"Scala")
spark(println(_),"Scala")
//只用一个参数的话，可以省略()
spark(println _,"Scala")  		//必须有空格
spark(println,"Scala")
array.map(2*_)
array.map(2*_).foreach(println(_))
//只有一个元素，可以省略()，下面两个等价
array.map(2*_).foreach(println _)
array.map(2*_).foreach(println)
array.map(2*_).filter(_ &gt;10).foreach(println)</code></pre>
<p><strong>二、闭包</strong></p>
<p>Scala<span style="font-family:'宋体';">为我们当前的对象隐式生成一个对象，此对象可以重新再传入使用。</span></p>
<pre><code class="language-java">//定义函数，闭包的形式
def scala(content:String) = (message:String) =&gt;println(content+":"message)
val func3 = scala("Spark")
func3("Flink")
//Spark作为content传入值，依旧可以传入值Flink</code></pre>
<p><strong>三、<span style="font-family:'Times New Roman';">Curring</span></strong></p>
<p>1<span style="font-family:'宋体';">、</span><span style="font-family:'Times New Roman';">Curring</span><span style="font-family:'宋体';">的函数被应用于多个参数列表，而非仅仅一个</span></p>
<pre><code class="language-java">def plainOld(x:Int,y:Int) =x+y
def plainOld(x:Int)(y:Int) =x+y</code></pre><pre><code class="language-java">&lt;p&gt;plainOld(1)(3)  //&lt;span style="font-family:宋体;"&gt;调用函数&lt;/span&gt;&lt;/p&gt;</code></pre>
<p><span style="font-family:'宋体';">这里当我们调用</span><span style="font-family:'Times New Roman';">plainOld</span><span style="font-family:'宋体';">时，实际上连接调用了两个传统函数，第一个函数调用带单个的名为</span><span style="font-family:'Times New Roman';">x</span><span style="font-family:'宋体';">的</span><span style="font-family:'Times New Roman';">Int</span><span style="font-family:'宋体';">参数，并返回第二个函数的函数值，第二个函数带</span><span style="font-family:'Times New Roman';">Int</span><span style="font-family:'宋体';">参数</span><span style="font-family:'Times New Roman';">y.。</span></p>
<p><strong>四、<span style="font-family:'Times New Roman';">List</span><span style="font-family:'宋体';">集合操作</span></strong></p>
<p>从集合<span style="font-family:'Times New Roman';">list</span><span style="font-family:'宋体';">的角度讲，包含</span><span style="font-family:'Times New Roman';">flatmap</span><span style="font-family:'宋体';">、</span><span style="font-family:'Times New Roman';">map</span><span style="font-family:'宋体';">、</span><span style="font-family:'Times New Roman';">filter</span><span style="font-family:'宋体';">、</span><span style="font-family:'Times New Roman';">zip</span><span style="font-family:'宋体';">、</span><span style="font-family:'Times New Roman';">listBuffer</span><span style="font-family:'宋体';">等</span><span style="font-family:'Times New Roman';">(immutable,mutable)</span><span style="font-family:'宋体';">的操作。</span></p>
<pre><code class="language-java">(immutable,mutable)的操作
val list = List("Scala","Spark","Flink")
val call =list.map("The content is :" + _)
list.map(println)
call.flatmap(_.split(" "))  //以空格进行切分，返回List[String]
call.flatmap(_.split(" ")).foreach(println)  //遍历打印切分后的List
list.zip(List(10.4.6))      //进行拉链操作，返回List[(String,Int)]
1 to 100</code></pre>
<p><span style="color:rgb(255,0,0);">第二部分：作业</span></p>
<p>统计一个目录下所有单词出现的总次数</p>
<pre><code class="language-java">import scala.io.Source
import java.io._
import scala.collection.mutable
/**
 * @author css-kxr
 */
class DT_my3 {

//通过aggregate来实现map reduce，效率更高    
 val lines = Source.fromFile("c:/hello.txt").getLines()foreach(println)  
 val seqop = (result: mutable.HashMap[String, Int], line: String) =&gt; {  
   val wordcount = line.replace(",", " ").replace(".", " ").replace("(", " ").replace(")", " ").split(" ").filter(_.trim.length &gt; 0).map(word =&gt; (word, 1))  
   wordcount.foreach(count =&gt; { 
     val addOne = (count._1, result.getOrElse(count._1, 0) + count._2)  
     result += addOne })
     result  
 }  
 val combop = (result1: mutable.HashMap[String, Int], result2: mutable.HashMap[String, Int]) =&gt;result1 ++= result2  
 val test = lines.aggregate(mutable.HashMap[String, Int]())(seqop, combop)  
 println(test) 
}</code></pre><br><br><br><br><br><br><br><br><br><br><br><p><span style="font-family:'宋体';"><br></span></p>
<p><span style="font-family:'宋体';"><br></span></p>
<p><span style="font-family:'宋体';"><br></span></p>
<p><span style="font-family:'宋体';"><br></span></p>
<p><span style="font-family:'宋体';"><br></span></p>
            </div>
                </div>