---
layout:     post
title:      删除HDFS集群中的所有空文件和空目录
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/qq_41851454/article/details/79829945				</div>
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                <h2>1、连接HDFS：</h2><pre><code class="language-java">package api;


import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FileSystem;

public class Utils {

    public static FileSystem HDFS() throws Exception{
        
        Configuration conf = new Configuration();
        conf.set("fs.defaultFS","hdfs://potter2:9000");
        System.setProperty("HADOOP_USER_NAME", "potter");
        FileSystem fs = FileSystem.get(conf);
        return fs;
         
         
    }
}</code></pre><h2>2、主程序代码：</h2><pre><code class="language-java">package api;

import org.apache.hadoop.fs.FileStatus;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.LocatedFileStatus;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.fs.RemoteIterator;
import org.junit.Test;

/**
 * 删除HDFS集群中的所有空文件和空目录
 * @author Administrator
 *
 */
public class Empty {

        @Test
        public void tt() throws Exception {
            Path path = new Path("/");
            Empty1(path);
        }
        
        public static void Empty1(Path path) throws Exception {
            FileSystem fs = Utils.HDFS();
            
            //当是空文件时，判断当前路径下有几个空文件夹
            FileStatus[] listStatus = fs.listStatus(path);
            System.out.println(listStatus.length+"********");
            //当根目录没有文件的时候会进入if里面
            if (listStatus.length == 0) {
                fs.delete(path,true);
            }
            System.out.println("删除成功xxxxx");
            //迭代器用于遍历
            RemoteIterator&lt;LocatedFileStatus&gt; listLocatedStatus = fs.listLocatedStatus(path);
        
            while (listLocatedStatus.hasNext()) {

                LocatedFileStatus next = listLocatedStatus.next();
                //输出文件夹的目录
                Path currentPath = next.getPath();
                System.out.println(currentPath+"1111111");
                //输出上面文件夹的父亲目录
                Path parent = next.getPath().getParent();
                System.out.println(parent+"2222222");
                if (next.isDirectory()) {
                    //如果是空文件夹
                    if (fs.listStatus(currentPath).length == 0) {
                        //删除掉
                        fs.delete(currentPath,true);
                    }else {
                        //不是空文件夹，那么继续遍历
                        if (fs.exists(currentPath)) {
                            Empty1(next.getPath());
                        }
                    }
                //如果是文件
                }else {
                    //获取文件的长度
                    long fileLength = next.getLen();
                    //当文件是空文件时，删除
                    if (fileLength ==0) {
                        fs.delete(currentPath,true);
                    }
                }
                int length = fs.listStatus(parent).length;
                if (length ==0) {
                    fs.delete(parent,true);
                }
                
            }
        }
}</code></pre><br>            </div>
                </div>