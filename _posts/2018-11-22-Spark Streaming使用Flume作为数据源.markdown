---
layout:     post
title:      Spark Streaming使用Flume作为数据源
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                <p>官网地址：<span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);"> </span><a href="http://spark.apache.org/docs/latest/streaming-flume-integration.html" rel="nofollow"><span style="font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;color:#005580;"><span style="font-size:14px;text-align:left;background-color:rgb(255,255,255);"><u>Flume Integration Guide</u></span></span><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);"> </span></a></p><p>1、<span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">Spark Streaming 2.3.1适配 Flume 1.6.0，在<span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">Spark Streaming 2.3.0之后对flume的支持已被标记为过时。主要由于flume直接对接Spark Streaming 会造成Spark Streaming压力过大，特别是高峰期的时候（在之间加一层消息队列会好得多）。但由于很多公司可能仍然在用，故简单做一下介绍。</span></span></p><p><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);"><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">2、有两种方式可以让Spark Streaming集成Flume并从Flume接受数据。以下分别介绍这两种方式。</span></span></p><p><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);"><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);"><br></span></span></p><p><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);"><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);"><strong>一、<span style="color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);">基于Flume的Push模式(</span><span style="color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);line-height:1.57143em;">Flume</span><span style="color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);">-style Push-based Approach)</span></strong></span></span></p><p><span style="font-family:gotham, helvetica, arial, sans-serif;color:#383838;"><span style="font-size:14px;background-color:rgb(255,255,255);">    这种方式Spark Streaming会建立一个Receiver，这个Receiver起到一个相当于Flume的Avro Agent的作用，Flume可以将数据推送到这个Receiver。以下是详细的配置步骤。</span></span></p><p><span style="font-family:gotham, helvetica, arial, sans-serif;color:#383838;"><span style="font-size:14px;background-color:rgb(255,255,255);">1、一般要求</span></span></p><p><span style="font-family:gotham, helvetica, arial, sans-serif;color:#383838;"><span style="font-size:14px;background-color:rgb(255,255,255);">    在你的集群中选择一台机器，这台机器需要满足一下条件：<br></span></span></p><p><span style="font-family:gotham, helvetica, arial, sans-serif;color:#383838;"><span style="font-size:14px;background-color:rgb(255,255,255);">          A.当<span style="color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);">Spark Streaming+Flume的应用程序运行时，有一个Spark的Worker节点运行在这台机器上。</span><br></span></span></p><p><span style="font-family:gotham, helvetica, arial, sans-serif;color:#383838;"><span style="font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);">          B.Flume通过配置后可以将数据推送到这台机器的端口上。<br></span></span></span></p><p><span style="font-family:gotham, helvetica, arial, sans-serif;color:#383838;"><span style="font-size:14px;background-color:rgb(255,255,255);">2、配置Flume</span></span></p><p><span style="font-family:gotham, helvetica, arial, sans-serif;color:#383838;"><span style="font-size:14px;background-color:rgb(255,255,255);">    通过以下的配置文件可以将数据发送到Avro Sink。</span></span></p><pre style="font-family:Menlo, 'Lucida Console', monospace;font-size:13px;color:rgb(51,51,51);background-color:rgb(245,245,245);border:1px solid rgba(0,0,0,.14902);"><code style="font-family:Menlo, 'Lucida Console', monospace;font-size:12px;color:inherit;background:transparent;border:0px;">agent.sinks = avroSink
agent.sinks.avroSink.type = avro
agent.sinks.avroSink.channel = memoryChannel
agent.sinks.avroSink.hostname = &lt;所选机器的IP&gt;
agent.sinks.avroSink.port = &lt;所选机器的端口&gt;</code></pre><p><span style="font-family:gotham, helvetica, arial, sans-serif;color:#383838;"><span style="font-size:14px;background-color:rgb(255,255,255);">3、配置<span style="color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);">Spark Streaming应用程序</span></span></span></p><p><span style="font-family:gotham, helvetica, arial, sans-serif;color:#383838;"><span style="font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);">A.添加依赖</span></span></span></p><p><span style="font-family:gotham, helvetica, arial, sans-serif;color:#383838;"><span style="font-size:14px;background-color:rgb(255,255,255);">&lt;dependency&gt;</span></span></p><p><span style="font-family:gotham, helvetica, arial, sans-serif;color:#383838;"><span style="font-size:14px;background-color:rgb(255,255,255);">    &lt;groupId&gt;</span></span><span style="color:inherit;font-family:Menlo, 'Lucida Console', monospace;font-size:12px;">org.apache.spark<span style="color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);"> &lt;/groupId&gt;</span></span></p><p><span style="color:inherit;font-family:Menlo, 'Lucida Console', monospace;font-size:12px;"><span style="color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);">    &lt;artifactId&gt;</span></span><span style="color:inherit;font-family:Menlo, 'Lucida Console', monospace;font-size:12px;text-align:left;">spark-streaming-flume_2.11<span style="color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);">&lt;/artifactId&gt;</span></span><span style="color:inherit;font-family:Menlo, 'Lucida Console', monospace;font-size:12px;"><span style="color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);"><br>    &lt;version&gt;${spark.version}&lt;/version&gt;</span></span></p><p><span style="font-family:gotham, helvetica, arial, sans-serif;color:#383838;"><span style="font-size:14px;background-color:rgb(255,255,255);">&lt;/dependency&gt;</span></span></p><p><span style="font-family:gotham, helvetica, arial, sans-serif;color:#383838;"><span style="font-size:14px;background-color:rgb(255,255,255);">B.在Streaming应用程序的代码中，导入一个<span style="color:rgb(68,68,68);font-family:Menlo, 'Lucida Console', monospace;font-size:12px;text-align:left;background-color:rgb(255,255,255);">FlumeUtils类并创建input DStream。</span></span></span></p><pre style="font-family:Menlo, 'Lucida Console', monospace;font-size:13px;color:rgb(51,51,51);background-color:rgb(245,245,245);border:1px solid rgba(0,0,0,.14902);text-align:left;"><code style="font-family:Menlo, 'Lucida Console', monospace;font-size:12px;color:inherit;background:transparent;border:0px;">import org.apache.spark.streaming.flume._

 val flumeStream = FlumeUtils.createStream(streamingContext, [所选机器ip], [所选机器端口])</code></pre><p><span style="font-family:gotham, helvetica, arial, sans-serif;color:#383838;"><span style="font-size:14px;background-color:rgb(255,255,255);"><strong>4、测试</strong></span></span></p><p><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);"><span style="color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);"><strong>A.直接运行代码</strong></span></span></span></p><p><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);"><span style="color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);">package com.ruozedata.streaming</span></span></span></p><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);"><span style="color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);">import org.apache.spark.SparkConf<br>import org.apache.spark.streaming.flume.FlumeUtils<br>import org.apache.spark.streaming.{Seconds, StreamingContext}<br><br>object FlumePushApp {<br><br>  def main(args: Array[String]) {<br><br>    val Array(hostname, port) = args<br><br>    val sparkConf = new SparkConf()<br>      .setAppName("FlumePushApp")<br>      .setMaster("local[2]")<br>    val ssc = new StreamingContext(sparkConf, Seconds(10))<br><br>    val lines = FlumeUtils.createStream(ssc,hostname,port.toInt) <span>	</span><br><span>	</span>/*由于createStream返回的DStream类型为SparkFlumeEvent,而不是String，故此时split方法无法使用<br><span>	</span> *为了能够使用split，我们执行了以下的map操作<br><span>	</span> */<span>	</span><br>    lines.map(x =&gt; new String(x.event.getBody.array()).trim)<br>      .flatMap(_.split(" ")).map((_,1)).reduceByKey(_+_).print()<br><br>    ssc.start()<br>    ssc.awaitTermination()<br>  }<br></span></span></span><p><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);"><span style="color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);">}</span></span></span></p><p><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);"><span style="color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);">//以上代码运行会出错，因为args没有传参数。</span></span></span></p><p><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);"><span style="color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);">传参流程：右上角<span style="color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);">FlumePushApp--&gt;Edit Configurations--&gt;program arguments--&gt;填写满足条件的参数</span></span></span></span></p><p><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);"><span style="color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);"><img src="https://img-blog.csdn.net/20180710125944391?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Blbmd6b25nbHU3Mjky/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""><br></span></span></span></span></p><p><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);"><span style="color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);">接着：</span></span></span></span></p><p><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);"><span style="color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);"><img src="https://img-blog.csdn.net/20180710131033729?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Blbmd6b25nbHU3Mjky/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""><br></span></span></span></span></p><p><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;background-color:rgb(255,255,255);"><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;text-align:left;background-color:rgb(255,255,255);"><span style="color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;background-color:rgb(255,255,255);"><span style="color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;background-color:rgb(255,255,255);"><span style="font-size:16px;"><strong>B.打成jar包上传运行</strong></span></span></span></span></span></p><p><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);"><span style="color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);"><strong>先启动spark-submit</strong></span></span></span></span></p><p>./spark-submit --master local[2] \<br>--class com.ruozedata.streaming.FlumePullApp \<br><span style="color:#ff0000;">--packages org.apache.spark:spark-streaming-flume_2.11:2.2.0 \      //<span style="color:rgb(255,0,0);">相当于添加依赖，需要集群能够访问外网</span></span><br>--name FlumePushApp \<br>/home/hadoop/lib/train-scala-1.0.jar \<br></p><p>localhost 41414</p><p><strong>再启动flume</strong></p><p>./flume-ng agent \<br>--name a1 \<br>--conf $FLUME_HOME/conf \<br>--conf-file $FLUME_HOME/conf/nc-memory-flume.conf \<br></p><p>-Dflume.root.logger=INFO,console</p><p>在另一台客户端执行 telnet localhost 44444,此时在该客户端输入数据，另一客户端会实时打印出处理结果</p><p></p><p><span style="color:rgb(255,0,0);">//mvn clean packages 打包只包含源码不包含依赖包</span><br></p><p><span style="color:rgb(255,0,0);">//以上解决方式需要集群能够访问外网，不能访问外网时可参照以下步骤</span></p><p><span style="color:#333333;">a。把不所有需要打包进来的依赖全部添加&lt;scope&gt;provided&lt;/scope&gt;</span></p><img src="https://img-blog.csdn.net/20180710134702465?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Blbmd6b25nbHU3Mjky/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""><br><p><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;background-color:rgb(255,255,255);"><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;text-align:left;background-color:rgb(255,255,255);"><span style="color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;background-color:rgb(255,255,255);"><span style="color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;background-color:rgb(255,255,255);"><span style="font-size:16px;">b。在pom.xml文件中添加plugin</span></span></span></span></span></p><p><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);"><span style="color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);">&lt;plugin&gt;<br><span>	</span>&lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;<br><span>	</span>&lt;configuration&gt;<br><span>		</span>&lt;archive&gt;<br><span>			</span>&lt;manifest&gt;<br><span>				</span>&lt;mainClass&gt;&lt;/mainClass&gt;<br><span>			</span>&lt;/manifest&gt;<br><span>		</span>&lt;/archive&gt;<br><span>		</span>&lt;descriptorRefs&gt;<br><span>			</span>&lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;<br><span>		</span>&lt;/descriptorRefs&gt;<br><span>	</span>&lt;/configuration&gt;<br>&lt;/plugin&gt;<br></span></span></span></span></p><p><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);"><span style="color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);">c。编译时使用<span>	mvn assembly:assembly</span>来打包</span></span></span></span></p><p><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;background-color:rgb(255,255,255);"><span style="color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;text-align:left;background-color:rgb(255,255,255);"><span style="color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;background-color:rgb(255,255,255);"><span style="color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;background-color:rgb(255,255,255);"><span style="font-size:16px;"><strong>二、基于自定义sink的pull模式</strong></span><span style="font-size:14px;"><strong>（</strong></span></span></span></span></span><span style="font-size:16px;color:rgb(29,31,34);font-family:'Helvetica Neue', Helvetica, Arial, sans-serif;"><strong>Pull-based Approach using a Custom Sink</strong></span><span style="color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;"><strong><span style="font-size:14px;">）</span></strong></span></p><p><span style="color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);"><strong>1、一般要求</strong></span></p><p><span style="color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);"> 不同于Flume直接将数据推送到Spark Streaming中，这种方法自定义一个满足以下条件的Flume Sink：</span><br></p><p><span style="font-family:gotham, helvetica, arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);"></span></p><ul style="color:rgb(56,56,56);list-style:none outside;font-size:14px;background-color:rgb(255,255,255);border:0px;line-height:1.57143em;font-family:gotham, helvetica, arial, sans-serif;"><li style="border:0px;line-height:1.57143em;">Flume将数据推送到sink中,并且数据保持buffered状态</li><li style="border:0px;line-height:1.57143em;"><span style="line-height:1.57143em;">Spark</span> Streaming使用一个可靠的Flume接收器(<a href="http://spark.apache.org/docs/latest/streaming-programming-guide.html#receiver-reliability" rel="nofollow" style="color:rgb(4,122,198);border:0px;line-height:1.57143em;">reliable <span style="line-height:1.57143em;"><span style="line-height:1.57143em;"><span style="line-height:1.57143em;"><span style="line-height:1.57143em;">Flume</span></span></span></span> receiver</a><span style="line-height:1.57143em;"> </span>)和转换器(transaction)从sink拉取数据.只要当数据被接收并且被Spark Streaming备份后,转换器才运行成功.</li></ul><span style="color:#383838;">和第一种方式相比，这种方式更可靠，有更好的</span><a href="http://spark.apache.org/docs/latest/streaming-programming-guide.html#fault-tolerance-semantics" rel="nofollow" style="color:rgb(51,204,0);text-decoration:underline;">容错能力</a><span style="color:#333333;">，</span><span style="background-color:rgb(255,255,255);color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;font-size:14px;">选择一台运行在一个Flume agent中的普通sink节点的机器.Flume其他的pipeline配置成向该agent发送数据.Spark集群中的机器应该可以访问到选为sink节点的那台机器。</span><p><span style="font-family:gotham, helvetica, arial, sans-serif;color:#383838;"><span style="font-size:14px;background-color:rgb(255,255,255);"><strong>2、添加依赖</strong></span></span></p><p><span style="font-family:gotham, helvetica, arial, sans-serif;color:#383838;"><span style="font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);"></span></span></span></p><pre style="font-family:Menlo, 'Lucida Console', monospace;font-size:13px;color:rgb(51,51,51);background-color:rgb(245,245,245);border:1px solid rgba(0,0,0,.14902);text-align:left;"><code style="font-family:Menlo, 'Lucida Console', monospace;font-size:12px;color:inherit;background:transparent;border:0px;">groupId = org.apache.spark
 artifactId = spark-streaming-flume-sink_2.11
 version = 2.3.1</code></pre><pre style="font-family:Menlo, 'Lucida Console', monospace;font-size:13px;color:rgb(51,51,51);background-color:rgb(245,245,245);border:1px solid rgba(0,0,0,.14902);text-align:left;"><code style="font-family:Menlo, 'Lucida Console', monospace;font-size:12px;color:inherit;background:transparent;border:0px;">groupId = org.scala-lang
 artifactId = scala-library
 version = 2.11.8</code></pre><pre style="font-family:Menlo, 'Lucida Console', monospace;font-size:13px;color:rgb(51,51,51);background-color:rgb(245,245,245);border:1px solid rgba(0,0,0,.14902);text-align:left;"><code style="font-family:Menlo, 'Lucida Console', monospace;font-size:12px;color:inherit;background:transparent;border:0px;">groupId = org.apache.commons
 artifactId = commons-lang3
 version = 3.5</code></pre><p><span style="font-family:gotham, helvetica, arial, sans-serif;color:#383838;"><span style="font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);"><strong>3、配置flume</strong></span></span></span></p><p><span style="font-family:gotham, helvetica, arial, sans-serif;color:#383838;"><span style="font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);">a1.sinks.k1.type = org.apache.spark.streaming.flume.sink.SparkSink<br>a1.sinks.k1.hostname = localhost<br></span></span></span></p><p><span style="font-family:gotham, helvetica, arial, sans-serif;color:#383838;"><span style="font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);">a1.sinks.k1.port = 41414</span></span></span></p><p><span style="font-family:gotham, helvetica, arial, sans-serif;color:#383838;"><span style="font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);"><strong>4、测试</strong></span></span></span></p><p><span style="font-family:gotham, helvetica, arial, sans-serif;color:#383838;"><span style="font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);">package com.ruozedata.streaming<br>import org.apache.spark.SparkConf<br>import org.apache.spark.streaming.flume.FlumeUtils<br>import org.apache.spark.streaming.{Seconds, StreamingContext}<br><br>object FlumePullApp {<br><br>  def main(args: Array[String]) {<br><br>    val Array(hostname, port) = args<br><br>    val sparkConf = new SparkConf()<br>      .setAppName("FlumePullApp")<br>      .setMaster("local[2]")<br>    val ssc = new StreamingContext(sparkConf, Seconds(10))<br><br>    val lines = FlumeUtils.createPollingStream(ssc, hostname,port.toInt)<br>    lines.map(x =&gt; new String(x.event.getBody.array()).trim)<br>      .flatMap(_.split(" ")).map((_,1)).reduceByKey(_+_).print()<br><br>    ssc.start()<br>    ssc.awaitTermination()<br>  }<br></span></span></span></p><p><span style="font-family:gotham, helvetica, arial, sans-serif;color:#383838;"><span style="font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);">}</span></span></span></p><p><span style="font-family:gotham, helvetica, arial, sans-serif;color:#383838;"><span style="font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);">5、启动</span></span></span></p><p><span style="font-family:gotham, helvetica, arial, sans-serif;color:#383838;"><span style="font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);">先启动Flume</span></span></span></p><p><span style="font-family:gotham, helvetica, arial, sans-serif;color:#383838;"><span style="font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);">./flume-ng agent \<br>--name a1 \<br>--conf $FLUME_HOME/conf \<br>--conf-file $FLUME_HOME/conf/nc-memory-flume2.conf \<br></span></span></span></p><p><span style="font-family:gotham, helvetica, arial, sans-serif;color:#383838;"><span style="font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(56,56,56);font-family:gotham, helvetica, arial, sans-serif;font-size:14px;background-color:rgb(255,255,255);">-Dflume.root.logger=INFO,console</span></span></span></p><p><span style="font-family:gotham, helvetica, arial, sans-serif;color:#383838;"><span style="font-size:14px;background-color:rgb(255,255,255);">然后再另一客户端启动 telnet localhost 44444</span></span></p><p><span style="font-family:gotham, helvetica, arial, sans-serif;color:#383838;"><span style="font-size:14px;background-color:rgb(255,255,255);">最后启动Spark Streaming</span></span></p><p><span style="font-family:gotham, helvetica, arial, sans-serif;"><span style="background-color:rgb(255,255,255);"></span></span></p><p style="font-size:14px;"><span style="color:#383838;">./spark-submit --master local[2] \</span><br><span style="color:#383838;">--class com.ruozedata.streaming.FlumePullApp \</span><br><span style="color:#333333;">--packages org.apache.spark:spark-streaming-flume_2.11:2.2.0 \    </span><br><span style="color:#383838;">--name FlumePushApp \</span><br><span style="color:#383838;">/home/hadoop/lib/train-scala-1.0.jar \</span><br></p><p style="font-size:14px;color:rgb(56,56,56);">localhost 41414</p><p style="font-size:14px;color:rgb(56,56,56);"><br></p><p style="font-size:14px;color:rgb(56,56,56);">此时在telnet端输入数据，立马出处理结果。</p><p style="font-size:14px;color:rgb(56,56,56);"><br></p><p><strong><span style="font-size:18px;color:#ff0000;">第二种方式更好</span></strong></p><p><strong><span style="font-size:18px;color:#ff0000;"><br></span></strong></p><p><strong>最后来两个与题目无关的Spark Streaming小例子</strong></p><p>1、黑名单过滤</p><p>import org.apache.spark.{SparkConf, SparkContext}</p>import scala.collection.mutable.ListBuffer<br><br>/**<br>  * Created by ruozedata on 2018/4/15.<br>  */<br>object FilterApp {<br><br>  def main(args: Array[String]) {<br><br>    val sparkConf = new SparkConf()<br>      .setAppName("FilterApp")<br>      .setMaster("local[2]")<br>    val sc = new SparkContext(sparkConf)<br><br>    // (骚马,true)<br>    val blackTuple = new ListBuffer[(String,Boolean)]<br>    blackTuple.append(("sm",true))  //true为了方便join<br>    val blacksRDD = sc.parallelize(blackTuple)  //将数组转成RDD<br><br>    // 准备测试数据: log<br>    val input = new ListBuffer[(String,String)]<br>    input.append(("su","20180808,su,M,20"))<br>    input.append(("kk","20180808,kk,M,20"))<br>    input.append(("sm","20180808,sm,M,20"))<br>    val inputRDD = sc.parallelize(input)<br><br>    // TODO... 过滤掉黑名单用户<br>    val joinRDD = inputRDD.leftOuterJoin(blacksRDD) <br>   <em><strong> joinRDD.filter(x =&gt; {<br>      x._2._2.getOrElse(false) != true<br>    }).map(_._2._1).foreach(println) </strong></em> <span style="color:#ff0000;">//x._2._2为true或none,x._2._1为日志本身</span><br>    sc.stop()<br>  }<br><p>}</p><p>2、改造例子1，将其使用Spark Streaming来完成</p><p>package com.ruozedata.streaming<br>import org.apache.spark.SparkConf<br>import org.apache.spark.streaming.{Seconds, StreamingContext}<br><br>object StreamingFilterApp {<br><br>  def main(args: Array[String]) {<br><br>    val sparkConf = new SparkConf()<br>      .setAppName("SocketWordCountApp")<br>      .setMaster("local[2]")<br>    val ssc = new StreamingContext(sparkConf, Seconds(10))<br><br>    val blacks = List("sm","su")<br>    val blacksRDD = ssc.sparkContext.parallelize(blacks).map(x=&gt;(x,true))<br><br>    val lines = ssc.socketTextStream("hadoop000",9997)<br>    // (su, log of su)<br>    val clickLogDstream = lines.map(x =&gt; (x.split(",")(1), x)).<span style="color:#ff0000;">transform</span>(rdd =&gt; {<br>     <strong><em> rdd.leftOuterJoin(blacksRDD)<br>        .filter(x =&gt; {<br>          // _2 : (string,option)  _2:option<br>          x._2._2.getOrElse(false) != true<br>      }).map(_._2._1)</em> </strong><span style="color:#ff0000;">//x._2._2为true或none,x._2._1为日志本身</span><br>    })<br><br>    clickLogDstream.print()<br><br>    ssc.start()<br>    ssc.awaitTermination()<br>  }<br></p><p>}</p>            </div>
                </div>