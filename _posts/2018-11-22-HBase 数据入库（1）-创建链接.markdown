---
layout:     post
title:      HBase 数据入库（1）-创建链接
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/weixin_39716269/article/details/79006251				</div>
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<p style="line-height:100%;"><span style="font-family:'Liberation Serif', serif;"><span style="font-size:14px;"><span lang="en-us" xml:lang="en-us">HBase</span></span></span>是一个分布式的、面向列的开源数据库<span style="font-family:'Liberation Serif', serif;"><span style="font-size:14px;"><span lang="en-us" xml:lang="en-us">,HBase</span></span></span>不同于一般的关系数据库，它是一个适合于非结构化数据存储的数据库。另一个不同的是<span style="font-family:'Liberation Serif', serif;"><span style="font-size:14px;"><span lang="en-us" xml:lang="en-us">HBase</span></span></span>基于列的而不是基于行的模式。</p>
<p><strong>HBase 基础 API</strong><br></p>
<p>这里我编写了一个Hbase的基础API使用的类。类似与sqldao:</p>
<p>创建链接HBase使用的是Zookeeper</p>
<pre><code class="language-java">public class HBasesql 
{
	private String zookeeperHosts = null;  // zookeeper ip 
	private String zookeeperPort = null;
	private Configuration conf = null;
	private Connection conn = null;
	private Admin hbaseAdmin = null;
	
	public HBasesql(String zookeeperHosts, String zookeeperPort)
	{
		this.zookeeperHosts = zookeeperHosts;
		this.zookeeperPort = zookeeperPort;
	}
 }</code></pre><pre><code class="language-java">public boolean ConnecHbase()
{
       try
       {
           conf = HBaseConfiguration.create();
           conf.set("hbase.zookeeper.quorum",zookeeperHosts);
           conf.set("hbase.zookeeper.property.clientPort", zookeeperPort);
           conf.set("zookeeper.znode.parent","/hbase-unsecure"); // 适用hdp集群
           conf.set("hbase.client.retries.number", "3"); // 链接hbase,失败重连次数
           conf.set("hbase.client.pause", "50"); // 重试间隔 单位：ms
           conf.set("hbase.rpc.timeout", "1800000"); // 提高RPC通信时长
           conf.set("zookeeper.session.timeout", "180000");
           conf.set("hbase.client.scanner.caching", "1000"); // 设置Scan缓存
           // 创建Connection
           conn = ConnectionFactory.createConnection(conf);
           // 创建 Admin
           hbaseAdmin = conn.getAdmin();
           return true;
       }
       catch(Exception e)
       {
           e.printStackTrace();
           return false;
       }
}
</code></pre>
<p>关闭Hbase链接</p>
<p></p>
<pre><code class="language-java">public void close()
{
	try
	{
		if(hbaseAdmin != null)hbaseAdmin.close();
		if(conn != null)conn.close();
	}
	catch(Exception e)
	{
		e.printStackTrace();
	}
}</code></pre>创建命名空间
<p></p>
<p></p>
<pre><code class="language-java">public boolean CreateNamespace(String namespace)
{
	try
	{
                // 创建命名空间
                hbaseAdmin.createNamespace(NamespaceDescriptor.create(namespace).build());
		return true;
	}
	catch(Exception e)
	{
		e.printStackTrace();
		return false;
	}
}</code></pre>创建表
<p></p>
<p></p>
<pre><code class="language-java">public boolean CreateTable(String tablename, String columnFamily)
{
	TableName tName = TableName.valueOf(tablename);
	try
	{
		if(!hbaseAdmin.tableExists(tName))
		{
			HTableDescriptor newHTD = new HTableDescriptor(tName);
			HColumnDescriptor newHCD = new HColumnDescriptor(columnFamily);
			newHCD.setMaxVersions(1); // 设置数据保留版本
			newHTD.addFamily(newHCD);
			return true;
		}
		else
		{
			return true;
		}
	}
	catch(Exception e)
	{
		e.printStackTrace();
		return false;
	}
}</code></pre>
<p></p>
            </div>
                </div>