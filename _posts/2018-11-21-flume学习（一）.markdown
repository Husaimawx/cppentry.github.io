---
layout:     post
title:      flume学习（一）
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<h1 id="flume结构">flume结构</h1>



<h2 id="flume类别">flume类别</h2>



<h3 id="flume-og">flume-og</h3>

<pre><code>采用master结构，引入zookeeper进行管理
采用相同的线程进行数据的读写操作，写的效率低会降低读取的效率
</code></pre>



<h3 id="flume-ng">flume-ng</h3>

<pre><code>取消master结构，取消zookeeper，完全变成传输工具
采用不同的线程进行数据的读写操作
</code></pre>



<h2 id="flume结构-1">flume结构</h2>

<p>flume以agent为基本单位</p>



<h2 id="agent">agent：</h2>

<pre><code>source， channel， sink
cli =&gt; source(接受客户端数据) =&gt; channel(数据传输保存) =&gt; sink(发送数据) =&gt; Des(kafka…)
</code></pre>

<p>agent结构：</p>

<blockquote>
  <p>1.单agent <br>
          结构图&lt;后续添加&gt;</p>
  
  <p>2.链式多agent <br>
          结构图&lt;后续添加&gt;</p>
  
  <p>3.多路复用agent <br>
         结构图&lt;后续添加&gt;</p>
</blockquote>



<h3 id="source">source</h3>

<p>主要用来接收客户端的请求，并将数据发送到channel中 <br>
一般情况下一个source对应多个channel（当然source和channle之间可以是多对多的关系） <br>
通常情况下使用不同的名称对source进行区分 <br>
常用source： <br>
<code>avro source | thrift source | exec source | kafka source | netcat source</code> <br>
exec source ==&gt; shell 命令 <br>
配置：</p>



<pre class="prettyprint"><code class=" hljs avrasm"><span class="hljs-preprocessor">#a1 agent name</span>
<span class="hljs-preprocessor">#r1 source name</span>
a1<span class="hljs-preprocessor">.sources</span> = <span class="hljs-built_in">r1</span>
<span class="hljs-preprocessor">#source type</span>
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.r</span>1<span class="hljs-preprocessor">.type</span>   = netcat
<span class="hljs-preprocessor">#netcat source的参数，不同类型的source具有不同的参数，具体后续章节在进行讲解</span>
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.r</span>1<span class="hljs-preprocessor">.bind</span>   = dev-hadoop-single<span class="hljs-preprocessor">.com</span>
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.r</span>1<span class="hljs-preprocessor">.port</span>   = <span class="hljs-number">44444</span>
<span class="hljs-preprocessor">#source的路由，配置source指向的channel</span>
<span class="hljs-preprocessor">#c1 channel name</span>
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.r</span>1<span class="hljs-preprocessor">.channels</span> = c1</code></pre>



<h3 id="channel">channel</h3>

<p>主要功能是数据的传输通道，source将数据传入channel，sink从channel中获取数据 <br>
常用channel： <br>
<code>Memory channel | JDBC Channel | Kafka channel | File channel</code> <br>
其中memory channel处理速度最快，jdbc/file channel可以将数据永久保存 <br>
配置：</p>



<pre class="prettyprint"><code class=" hljs avrasm"><span class="hljs-preprocessor">#c1 channel name</span>
a1<span class="hljs-preprocessor">.channels</span>= c1
<span class="hljs-preprocessor">#channel type</span>
a1<span class="hljs-preprocessor">.channels</span><span class="hljs-preprocessor">.c</span>1<span class="hljs-preprocessor">.type</span>                = memory
<span class="hljs-preprocessor">#memory channel 的特殊参数 </span>
a1<span class="hljs-preprocessor">.channels</span><span class="hljs-preprocessor">.c</span>1<span class="hljs-preprocessor">.capacity</span>            = <span class="hljs-number">1000</span>
a1<span class="hljs-preprocessor">.channels</span><span class="hljs-preprocessor">.c</span>1<span class="hljs-preprocessor">.transactionCapacity</span> = <span class="hljs-number">100</span> </code></pre>



<h3 id="sink">sink</h3>

<p>主要用来从channel中读取数据，同时将数据按照定义的方式进行输出，sink从channel中获取数据，其中channel和sink之间是一对多的关系，正常情况情况下使用一对一的关系 <br>
常用sink： <br>
<code>Hdfs sink | Hive sink | File sink | HBase sink | Avro sink | Thrift sink | Logger sink</code> <br>
其中Avro sink一般用来讲数据传输到下一个agent <br>
配置：</p>



<pre class="prettyprint"><code class=" hljs avrasm"><span class="hljs-preprocessor">#k1 sink name</span>
a1<span class="hljs-preprocessor">.sinks</span>   = k1
<span class="hljs-preprocessor">#sink type</span>
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.k</span>1<span class="hljs-preprocessor">.type</span> = logger
<span class="hljs-preprocessor">#指定sink从哪个channel中获取数据</span>
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.k</span>1<span class="hljs-preprocessor">.channel</span> = c1</code></pre>



<h2 id="flume-event">flume event</h2>

<p>flume 的agent三个模块之间传输的内容被称为event</p>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>