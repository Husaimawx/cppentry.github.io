---
layout:     post
title:      【十八掌●内功篇】第五掌：HDFS之基础知识
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/chybin500/article/details/78552593				</div>
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<p><strong>这一篇博文是【大数据技术●降龙十八掌】系列文章的其中一篇，点击查看目录：<img src="https://img-blog.csdn.net/20171116204808649?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY2h5YmluNTAw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title=""><a href="http://blog.csdn.net/chybin500/article/details/78551867" rel="nofollow" target="_blank">大数据技术●降龙十八掌</a><strong></strong></strong></p>

<hr>

<dl>
<dt>系列文章：</dt>
<dd><a href="http://blog.csdn.net/chybin500/article/details/78552593" rel="nofollow" target="_blank">【十八掌●内功篇】第五掌：HDFS之基础知识</a> <br>
<a href="http://blog.csdn.net/chybin500/article/details/78678558" rel="nofollow" target="_blank">【十八掌●内功篇】第五掌：HDFS之Shell</a></dd>
</dl>

<h3 id="一-hdfs简介">一、 HDFS简介</h3>



<h4 id="1-hadoop中的hdfs">1、  Hadoop中的HDFS</h4>

<p>HDFS是Hadoop Distributed File System（Hadoop 分布式文件系统）的缩写，但是HDFS不是Hadoop里的唯一的分布式文件系统，因为Hadoop只是定义了文件系统的抽象，HDFS只是其中的一个实现，另外，Hadoop中支持的文件系统如下：</p>

<table>
<thead>
<tr>
  <th>文件系统</th>
  <th>URI方案</th>
  <th>Java实现</th>
  <th>定义</th>
</tr>
</thead>
<tbody><tr>
  <td>Local</td>
  <td>file</td>
  <td>fs.LocalFileSystem</td>
  <td>支持有客户端校验和的本地文件系统</td>
</tr>
<tr>
  <td>HDFS</td>
  <td>hdfs</td>
  <td>hdfs.DistributedFileSystem</td>
  <td>Hadoop的分布式文件系统</td>
</tr>
<tr>
  <td>HFTP</td>
  <td>hftp</td>
  <td>hdfs.HftpFilesSystem</td>
  <td>支持通过Http方式以只读的方式访问HDFS,distcp经常用在不同的HDFS集群间复制数据</td>
</tr>
<tr>
  <td>HSFTP</td>
  <td>hsftp</td>
  <td>hdfs.HsftpFilesSystem</td>
  <td>支持通过Https方式以只读的方式访问HDFS</td>
</tr>
<tr>
  <td>HAR</td>
  <td>har</td>
  <td>fs.HarFileSystem</td>
  <td>构建在其他文件系统上进行归档文件的文件系统，Hadoop归档文件主要用来减少NameNode的内存使用。</td>
</tr>
<tr>
  <td>KFS</td>
  <td>kfs</td>
  <td>fs.kfs.KosmosFilesSystem</td>
  <td></td>
</tr>
<tr>
  <td>FTP</td>
  <td>ftp</td>
  <td>Fs.ftp.FtpFileSystem</td>
  <td>由FTP服务器支持的文件系统</td>
</tr>
<tr>
  <td>S3（本地）</td>
  <td>s3n</td>
  <td>fs.s3native.NativeS3FileSystem</td>
  <td>基于AmazonS3的文件系统</td>
</tr>
<tr>
  <td>S3（基于块）</td>
  <td>s3</td>
  <td>fs.s3.NativeS3FileSystem</td>
  <td>基于AmazonS3的文件系统，以块格式存储解决了S3的5GB文件大小的限制</td>
</tr>
</tbody></table>




<h4 id="2-hdfs的特点">2、  HDFS的特点</h4>

<p>HDFS是基于流数据模式访问和处理超大文件的需求而开发的，HDFS的主要特点</p>

<p>(1)  超大文件数据集群</p>

<p>HDFS可以存储和管理GB、TB、甚至PB级别的大文件。</p>

<p>(2)  流式数据访问方式读取文件</p>

<p>HDFS的设计是基于“一次写入、多次读取”任务，对文件的读取，是采用顺序全部扫描的方式。</p>

<p>(3)  对硬件要求并不是特别高，有很好的容错机制。</p>

<p>因为HDFS在设计上考虑了数据的可靠性、安全性、高可用性，所以HDFS对硬件的要求并不是太高，可以运行在廉价的商用硬件集群上。</p>

<p>(4)  数据访问有一定的延迟</p>

<p>HDFS适合大型数据集的分析人物，HDFS优化的是数据吞吐量，是要以提高延迟为代价的。 <br>
(5) HDFS无法高效存储大量小文件</p>

<p>因为HDFS上所有文件的元数据都是存储在NameNode上的，而NameNode数据是存在内存里的，所以NameNode的内存大小限制了文件个数。</p>

<p>(6) HDFS不支持多个写入者，也不支持随机写。</p>

<p>HDFS的一个文件只有一个写入者，并且操作只能在文件末尾追加，所以不支持随机写。</p>



<h3 id="二-hdfs体系结构">二、 HDFS体系结构</h3>



<h4 id="1-体系结构图">1、  体系结构图</h4>

<p><img src="http://upload-images.jianshu.io/upload_images/8658527-f172795bf035f9e2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png" title=""></p>



<h4 id="2-体系结构介绍">2、  体系结构介绍</h4>

<p>(1)  HDFS由Client、NameNode、DataNode、SecondaryNameNode组成。</p>

<p>(2)  Client提供了文件系统的调用接口。</p>

<p>(3)NameNode由fsimage(HDFS元数据镜像文件)和editlog(HDFS文件改动 <br>
日志)组成，NameNode在内存中保存着每个文件和数据块的引用关系。 <br>
NameNode中的引用关系不存在硬盘中，每次都是HDFS启动时重新构造 <br>
出来的。 <br>
(4) SecondaryNameNode的任务有两个：</p>

<p>定期合并fsimage和editlog，并传输给NameNode。</p>

<p>为NameNode提供热备份。</p>

<p>(5) 一般是一个机器上安装一个DataNode，一个DataNode上又分为很多</p>

<p>很多数据块（block）。</p>

<p>(6) DataNode会通过心跳定时向NameNode发送所存储的文件块信息。</p>

<p>(7) HDFS的副本存放规则</p>

<p>默认的副本系数是3，一个副本存在本地机架的本机器上，第二个副本存 <br>
储在本地机架的其他机器上，第三个副本存在其他机架的一个节点上。 <br>
 这样减少了写操作的网络数据传输，提高了写操作的效率；另一方面，机 <br>
 架的错误率远比节点的错误率低，所以不影响数据的可靠性。</p>



<h4 id="3-核心概念">3、  核心概念</h4>

<p>(1)  块</p>

<p>数据块是HDFS中最小的寻址单位，Hadoop2.5中默认一个块的大小为 <br>
128M，不像其他的文件系统，HDFS中块是个逻辑概念，少于一个块大小 <br>
的文件不会占用一整块的空间。 <br>
设置块比较大的原因是减少寻址开销，但是块设置的也不能过大，因为一 <br>
个Map任务一般是处理一个块的数据，如果块设置的太大，Map任务处理的数据 <br>
量就会过大，会导致效率并不高</p>

<p>HDFS中块是逻辑概念的好处：</p>

<ul>
<li><p>可以存储任意大的文件而不受单个节点磁盘大小的限制，HDFS可以将超 <br>
大文件分割为多个块，分别存储在不同的机器上。</p></li>
<li><p>简化存储子系统的设计，权限信息和块分开存储，利于管理。</p></li>
<li><p>块的设计利于数据备份，进而提供容错能力和提高可用性。</p></li>
</ul>

<p>(2)  NameNode</p>

<p>NameNode管理集群中的文件读写执行调度，并存储文件的元数据，NameNode的 <br>
数据存储在命名空间镜像（Namespace image）和编辑日志（Edit log） <br>
中，NameNode启动时，会将所有数据读取到内存中</p>

<p>(3)  DataNode</p>

<p>DataNode负责任务的执行，并存储数据，和客户端进行交互，DataNode <br>
会通过心跳定时向NameNode发送它所存储的块信息。</p>

<p>(4)  HDFS联盟</p>

<p>HDFS集群中只有一个NameNode是有很多局限性的，为了解决单个 <br>
NameNode的局限，设计了HDFS联盟，HDFS 联盟是可以在Hadoop集群 <br>
中设置多个NameNode，联盟中的多个NameNode是不同的，可以理解为 <br>
将一个NameNode切分为了多个NameNode，每一个NameNode只负责管 <br>
理一部分数据，HDFS Federation中的多个NameNode共用DataNode。</p>

<p>单个NameNode节点的局限性：</p>

<ul>
<li>命名空间的限制</li>
</ul>

<p>NameNode上存储着整个HDFS上的文件的元数据，NameNode是部署在 <br>
一台机器上的，因为单个机器硬件的限制，必然会限制NameNode所能管 <br>
理的文件个数，制约了数据量的增长。</p>

<ul>
<li>数据隔离问题</li>
</ul>

<p>整个HDFS上的文件都由一个NameNode管理，所以一个程序很有可能会 <br>
影响到整个HDFS上的程序，并且权限控制比较复杂。</p>

<ul>
<li>性能瓶颈</li>
</ul>

<p>单个NameNode时HDFS文件系统的吞吐量受限于单个NameNode的吞吐 <br>
量。因为NameNode是个JVM进程，JVM进程所占用的内存很大时，性能 <br>
会下降很多。</p>

<p>HDFS联盟架构：</p>

<p><img src="http://upload-images.jianshu.io/upload_images/8658527-86725b91e0417629.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png" title=""></p>

<p>(5)  HDFS HA</p>

<p>单NameNode的缺陷存在单点故障的问题，如果NameNode不可用，则会 <br>
导致整个HDFS文件系统不可用。所以需要设计高可用的HDFS（Hadoop  <br>
HA）来解决NameNode单点故障的问题。解决的方法是在HDFS集群中设 <br>
置多个NameNode节点。但是一旦引入多个NameNode，就有一些问题需 <br>
要解决。</p>

<p>HDFS HA需要保证的四个问题：</p>

<ul>
<li><p>保证NameNode内存中元数据数据一致，并保证编辑日志文件的安全 <br>
性。</p></li>
<li><p>多个NameNode如何协作</p></li>
<li><p>客户端如何能正确地访问到可用的那个NameNode。</p></li>
<li><p>怎么保证任意时刻只能有一个NameNode处于对外服务状态。</p></li>
</ul>

<p>解决方法:</p>

<ul>
<li><p>对于保证NameNode元数据的一致性和编辑日志的安全性，采用 <br>
Zookeeper来存储编辑日志文件。</p></li>
<li><p>两个NameNode一个是Active状态的，一个是Standby状态的，一个时间 <br>
点只能有一个Active状态的NameNode提供服务,两个NameNode上存储的元数据是实时同步的，当Active的NameNode出现问题时，通过 <br>
Zookeeper实时切换到Standby的NameNode上，并将Standby改为Active <br>
状态。</p></li>
<li><p>客户端通过连接一个Zookeeper的代理来确定当时哪个NameNode处于服 <br>
务状态</p></li>
</ul>

<p>HDFS HA架构图：</p>

<p><img src="http://upload-images.jianshu.io/upload_images/8658527-d6d86ebb210577c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title=""></p>

<ul>
<li><p>HDFS HA架构中有两台NameNode节点，一台是处于活动状态 <br>
（Active）为客户端提供服务，另外一台处于热备份状态（Standby）</p></li>
<li><p>元数据文件有两个文件：fsimage和edits，备份元数据就是备份这两个文 <br>
件。JournalNode用来实时从Active NameNode上拷贝edits文件， <br>
JournalNode有三台也是为了实现高可用</p></li>
<li><p>Standby NameNode不对外提供元数据的访问，它从Active NameNode <br>
上拷贝fsimage文件，从JournalNode上拷贝edits文件，然后负责合并 <br>
fsimage和edits文件，相当于SecondaryNameNode的作用。最终目的是保 <br>
证Standby NameNode上的元数据信息和Active NameNode上的元数据信 <br>
息一致，以实现热备份。</p></li>
<li><p>Zookeeper来保证在Active NameNode失效时及时将Standby NameNode <br>
修改为Active状态。</p></li>
<li><p>ZKFC（失效检测控制）是Hadoop里的一个Zookeeper客户端，在每一 <br>
个NameNode节点上都启动一个ZKFC进程，来监控NameNode的状态， <br>
并把NameNode的状态信息汇报给Zookeeper集群，其实就是在 <br>
Zookeeper上创建了一个Znode节点，节点里保存了NameNode状态信 <br>
息。当NameNode失效后，ZKFC检测到报告给Zookeeper，Zookeeper把 <br>
对应的Znode删除掉，Standby ZKFC发现没有Active状态的NameNode <br>
时，就会用shell命令将自己监控的NameNode改为Active状态，并修改 <br>
Znode上的数据。</p></li>
</ul>

<p>Znode是个临时的节点，临时节点特征是客户端的连接断了后就会把znode删除，所以当ZKFC失效时，也会导致切换NameNode。</p>

<ul>
<li>DataNode会将心跳信息和Block汇报信息同时发给两台NameNode，DataNode只接受Active NameNode发来的文件读写操作指令。</li>
</ul>



<h3 id="三-工作机制">三、 工作机制</h3>



<h4 id="1副本存放和读取策略">1、副本存放和读取策略</h4>

<p>HDFS中的文件是被分成块存放的，为了达到数据的高可用性，每一个块会保存N个副本，如果数据块损坏，就会读取副本来恢复数据块，而副本的存放策略是HDFS可靠性和性能的关键。</p>

<p>举个例子：HDFS默认副本数是3，HDFS存放的策略是将第一个副本存放在本地节点上，第二个副本存放在同一个机架的不同节点上，第三个副本存放在不同机架上另一个节点上，同一个机架上的两个节点同时失效的概率要比一个节点失效的概率低，而两个机架同时失效的概率要比一个机架上两个节点失效的概率低，这样尽最大可能地提高数据存储的可靠性；另外读取副本时，为了减少带宽，首先尝试读取同一个节点上的第一个副本，读取失败后再去读取同一个机架上另外一个节点上的第二个副本，如果还是读取失败，就读取不同机架上的第三个副本，这样尽可能地提高读取副本的性能。</p>

<p><img src="http://upload-images.jianshu.io/upload_images/8658527-53c812795b4fca4a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png" title=""></p>



<h4 id="2机架感知">2、机架感知</h4>

<p>为了提高HDFS的数据存储可靠性和提高数据读写的性能，HDFS采用了一种称为<strong>机架感知</strong>的策略：</p>

<p>在一个交换机上的所有节点被称为在一个机架上，通常HDFS运行在跨越多个机架的集群上，通常同一个机架上的两个节点间的带宽比不同机架上的两个节点间的带宽要大。HDFS的机架感知策略就是将一个数据块的副本存放在不同机架上，这样防止整个机架的失效导致数据的丢失，从而提高数据的存储可靠性，同时读取副本时，优先读取同一个机架上的副本，从而提高副本读取的性能。配置dfs.network.script 参数来确定节点所处的机架。当这个脚本配置完毕，每个节点都会运行这个脚本来获取它的机架ID。默认的安装假定所有的节点属于同一个机架。</p>

<p>机架感知设置步骤：</p>

<p>(1)  编写机架感知的脚本</p>

<p>机架感知的脚本是用Python写的，输入一个域名或者IP，返回所在机架。</p>



<pre class="prettyprint"><code class="language-java hljs ">#!/usr/bin/python
#-*-coding:UTF-<span class="hljs-number">8</span> -*-
<span class="hljs-keyword">import</span> sys

rack = {<span class="hljs-string">"hadoop-node-31"</span>:<span class="hljs-string">"rack1"</span>,
        <span class="hljs-string">"hadoop-node-32"</span>:<span class="hljs-string">"rack1"</span>,
        <span class="hljs-string">"hadoop-node-33"</span>:<span class="hljs-string">"rack1"</span>,
        <span class="hljs-string">"hadoop-node-34"</span>:<span class="hljs-string">"rack1"</span>,      
        <span class="hljs-string">"192.168.1.50"</span>:<span class="hljs-string">"rack2"</span>,
        <span class="hljs-string">"192.168.1.51"</span>:<span class="hljs-string">"rack2"</span>,
        <span class="hljs-string">"192.168.1.52"</span>:<span class="hljs-string">"rack2"</span>,
        <span class="hljs-string">"192.168.1.53"</span>:<span class="hljs-string">"rack2"</span>,
        <span class="hljs-string">"192.168.1.54"</span>:<span class="hljs-string">"rack2"</span>,
       }
<span class="hljs-keyword">if</span> __name__==<span class="hljs-string">"__main__"</span>:
    print <span class="hljs-string">"/"</span> + rack.get(sys.argv[<span class="hljs-number">1</span>],<span class="hljs-string">"rack0"</span>)
</code></pre>

<p>(2) 配置脚本路径 <br>
将脚本放在NameNode所在的机器上，然后在core-site.xml中配置</p>



<pre class="prettyprint"><code class="language-java hljs ">&lt;property&gt;
&lt;name&gt;topology.script.file.name&lt;/name&gt;
&lt;value&gt;/opt/topology.py&lt;/value&gt;
&lt;/property&gt;
</code></pre>

<p>(3) 重启NameNode，使得机架感知生效。</p>



<h4 id="3安全模式">3、安全模式</h4>

<p>NameNode启动后会进入安全模式，安全模式下进行NameNode的初始化操作，不接受客户端的写入操作，只接受读取操作，并且不进行数据块的复制。安全模式下的NameNode做的工作如下：</p>

<p>(1)  NameNode从硬盘加载fsimage</p>

<p>NameNode中存存储着fsimage开头、后面带一堆数字的文件，这些是NameNode元数据的序列化后的文件，编号最大的就是最新的文件，NameNode从硬盘读取编号最大的fsimage文件内容，将元数据信息加载到内存里。</p>

<p>(2) 回放edits</p>

<p>edits文件里是存储着还未写入fsimage的操作，尤其是上次NameNode没有正常停止时，为写入fsimage的操作只是写在edits文件里，所以NameNode启动时，加载完fsimage文件后，然后加载edits文件，并且回放edits里的操作，写入fsimage，保证不会丢失操作。</p>

<p>回放edits日志写入fsimage后，NameNode就会创建一个新的fsimage文件和一个空的edits文件。</p>

<p>(3) NameNode等待DataNode报告块信息</p>

<p>fsimage文件里并不记录文件块的信息，文件块的信息存在于DataNode中，所以接下来NameNode需要等待DataNode报告他们各自块的列表信息，DataNode通过心跳机制向NameNode报告。</p>

<p>这里也能看出来，NameNode内存里的元数据的组成结构为：fsimage+edits+datanode中block列表信息； <br>
(4) 退出安全模式</p>

<p>每个数据块都有一个最小副本数，当HDFS中99.9%的块都达到各自的最小副本数时，再等待30秒，就退出安全模式。 <br>
这个99.9%可以在hdfs-site.xml中配置，属性名为dfs.namenode.safemode.threshold-pct，默认为0.999f。 <br>
这个30秒也是可以在hdfs-site.xml中配置的，属性名为dfs.namenode.safemode.extension，默认是30000。</p>

<p>(5) 复制缺少的副本块</p>

<p>退出安全模式后，检测哪些数据块还没有达到最小副本数，从其他副本块中复制数据块进行补充。</p>

<p>(6) 流程图</p>

<p><img src="https://img-blog.csdn.net/20171116161738081?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY2h5YmluNTAw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title=""></p>



<h4 id="4hdfs程序文件结构">4、HDFS程序文件结构</h4>

<p>(1) HDFS数据存储配置</p>

<p>${HADOOP_HOME}/etc/hadoop/core-site.xml配置文件中的hadoop.tmp.dir属性用来配置HDFS文件存储的目录路径，NameNode节点和DataNode节点都是读取这个属性。</p>

<ul>
<li><p>NameNode存储路径配置属性为：dfs.namenode.name.dir，默认为：file://${hadoop.tmp.dir}/dfs/name</p></li>
<li><p>DataNode存储路径配置属性为：dfs.datanode.data.dir，默认为：file://${hadoop.tmp.dir}/dfs/data <br>
比如hadoop.tmp.dir属性设置的是：/opt/data/tmp，下面来介绍下各自文件。</p></li>
</ul>

<p>(2) NameNode节点文件</p>

<p>[hadoop@bigdata-senior01 tmp]$ ll /opt/data/tmp/dfs/name/current/</p>

<p><img src="http://upload-images.jianshu.io/upload_images/8658527-bdc000dde3327a0b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png" title=""></p>

<p>NameNode中有几类文件： <br>
- fsimage文件：</p>

<p>NameNode在运行状态时，元数据是存储在内存里的，这样能保证数据的读写速度很快，但是NameNode会将元数据信息存储在硬盘里，fsimage文件就是存储元数据的映像文件，fsimage文件名称后面的编码最大的文件，就是当前正在使用的fsimage文件。</p>

<ul>
<li>fsimage_*****.md5文件</li>
</ul>

<p>是校验文件，用于验证fsimage的完整性。</p>

<ul>
<li>edits文件</li>
</ul>

<p>edits文件是NameNode元数据日志文件，当有元数据的写入需求时，先将日志写入edits文件，因为edits文件比fsimage文件要小很多，所以写入非常快。之后SencondaryNameNode会协助将edits日志写入fsimage文件。</p>

<ul>
<li>seen_txid文件</li>
</ul>

<p>seen_txid文件中的数字是当前正在使用的edits文件的编号，namenode启动时用来判断回放seen_txid指定版本的日志。</p>

<ul>
<li>VERSION文件</li>
</ul>



<pre class="prettyprint"><code class="language-java hljs ">
[hadoop<span class="hljs-annotation">@bigdata</span>-senior01 tmp]$ cat /opt/data/tmp/dfs/name/current/VERSION
#Tue Jul <span class="hljs-number">05</span> <span class="hljs-number">09</span>:<span class="hljs-number">00</span>:<span class="hljs-number">19</span> CST <span class="hljs-number">2016</span>
namespaceID=<span class="hljs-number">2101579007</span>
clusterID=CID-<span class="hljs-number">205277e6</span>-<span class="hljs-number">493</span>b-<span class="hljs-number">4601</span>-<span class="hljs-number">8e33</span>-c09d1d23ece4
cTime=<span class="hljs-number">0</span>
storageType=NAME_NODE
blockpoolID=BP-<span class="hljs-number">1641019026</span>-<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>-<span class="hljs-number">1467624350057</span>
layoutVersion=-<span class="hljs-number">57</span>
</code></pre>

<ul>
<li><p>namespaceID是HDFS文件系统的唯一标示，在格式化的时候生成。</p></li>
<li><p>clusterID是集群ID，NameNode和DataNode的集群ID应该一致，格式化的时候可以指定一个集群ID，没有指定则会自动生成一个集群ID。</p></li>
<li><p>cTime是NameNode的Fsimage的创建时间，如果layoutVersion发生变化触发一次升级，就会更新。</p></li>
<li><p>storageType是说明这个文件存储的是什么进程的数据结构信息，NAME_NODE或者DATA_NODE。</p></li>
<li><p>blockpoolID是存储块池的Id。</p></li>
<li><p>layoutVersion表示 HDFS 永久性数据结构的版本信息， 只要数据结构变更，版本号也要递减，此时的 HDFS 也需要升级，否则磁盘仍旧是使用旧版本的数据结构，这会导致新版本的 NameNode 无法使用。</p></li>
</ul>

<p>(3) DataNode节点文件</p>

<p>[hadoop@bigdata-senior01 tmp]$ ll /opt/data/tmp/dfs/data/current/BP-1641019026-127.0.0.1-1467624350057/current/finalized/</p>

<p><img src="http://upload-images.jianshu.io/upload_images/8658527-c3d91b7821baa04b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png" title=""></p>

<p>blk_开头的文件是块文件。</p>



<h4 id="5数据读取流程">5、数据读取流程</h4>

<p><img src="http://upload-images.jianshu.io/upload_images/8658527-93820d18e327c387.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png" title=""></p>

<p>(1)  HDFS客户端调用DistributedFileSystem类的open()方法，通过RPC协议请求NameNode来确定所请求的文件所在位置，找出最近的DataNode节点的地址。</p>

<p>(2)  DistributedFileSystem会返回一个FSDataInputStream输入流对象给客户端。</p>

<p>(3)  客户端会在FSDatatInputStream上调用read()函数，按照每个DataNode的距离从近到远依次读取。</p>

<p>(4)  读取完每个DataNode后，在FSDataInputStream上调用close()函数。</p>

<p>(5)  如果读取出现故障，就会读取数据块的副本，同时向NameNode报告这个消息。</p>



<h4 id="6数据写入流程">6、数据写入流程</h4>

<p><img src="http://upload-images.jianshu.io/upload_images/8658527-febb395e0e5c2f50.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png" title=""></p>

<p>(1)  客户端调用DistributedFileSystem对象的create()方法，通过RPC协议调用NameNode，在命名空间创建一个新文件，此时还没有关联的DataNode与之关联。</p>

<p>(2)  create()方法会返回一个FSDataOutputStream对象给客户端用来写入数据。</p>

<p>(3)  写入数据前，会将文件分割成包，放入一个“数据队列”中。</p>

<p>(4)  NameNode为文件包分配合适的DateNode存放副本，返回一个DataNode的管道。</p>

<p>(5)  根据管道依次保存文件包在各个DataNode上。</p>

<p>(6)  各个DataNode保存好文件包后，会返回确认信息，确认消息保存在确认队列里，当管道中所有的DataNode都返回成功的的确认信息后，就会从确认队列里删除。</p>

<p>管道中所有的DataNode都保存完成后，调用FileSystem对象的close()关闭数据流。</p>

<hr>

<p><strong>这一篇博文是【大数据技术●降龙十八掌】系列文章的其中一篇，点击查看目录：<img src="https://img-blog.csdn.net/20171116204808649?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY2h5YmluNTAw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title=""><a href="http://blog.csdn.net/chybin500/article/details/78551867" rel="nofollow" target="_blank">大数据技术●降龙十八掌</a><strong></strong></strong></p>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>