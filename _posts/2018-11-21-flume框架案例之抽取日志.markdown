---
layout:     post
title:      flume框架案例之抽取日志
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/qq_39532946/article/details/76927022				</div>
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<p><span style="font-family:'Courier New';font-size:18px;">flume抽取日志文件</span></p>
<p><span style="font-family:'Courier New';font-size:18px;"></span></p>
<p style="color:rgb(63,63,63);font-family:'microsoft yahei';font-size:15px;">
<span></span>对于flume的原理其实很容易理解，我们更应该掌握flume的具体使用方法，flume提供了大量内置的Source、Channel和Sink类型。而且不同类型的Source、Channel和Sink可以自由组合—–组合方式基于用户设置的配置文件，非常灵活。比如：Channel可以把事件暂存在内存里，也可以持久化到本地硬盘上。Sink可以把日志写入HDFS, <a href="http://lib.csdn.net/base/hbase" rel="nofollow" class="replace_word" title="Hbase知识库" style="color:rgb(223,52,52);font-weight:bold;">hbase</a>，甚至是另外一个Source等等。<br><span></span>其实flume的用法主要在于配置文件的配置，在配置文件当中描述source、channel与sink的具体实现，而后运行一个agent实例，在运行agent实例的过程中会读取配置文件的内容，这样flume就会采集到数据。 </p>
<p style="color:rgb(63,63,63);font-family:'microsoft yahei';font-size:15px;">
<br>
配置文件的编写原则： <br>
1&gt;从整体上描述代理agent中sources、sinks、channels所涉及到的组件</p>
<pre class="prettyprint" style="font-family:'Source Code Pro', monospace;font-size:14px;line-height:1.45;color:rgb(51,51,51);background-color:rgba(128,128,128,.0470588);border:0px solid rgb(136,136,136);"><code class="hljs avrasm has-numbering" style="display:block;background:transparent;color:inherit;font-family:'Source Code Pro', monospace;">    <span class="hljs-preprocessor" style="color:rgb(68,68,68);"># Name the components on this agent</span>
    a1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.sources</span> = <span class="hljs-built_in" style="color:rgb(102,0,102);">r1</span>
    a1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.sinks</span> = k1
    a1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.channels</span> = c1</code></pre><ul class="pre-numbering" style="width:50px;background-color:rgb(238,238,238);border-right:1px solid rgb(221,221,221);list-style:none;text-align:right;opacity:0;"><li>1</li><li>2</li><li>3</li><li>4</li></ul><ul class="pre-numbering" style="width:50px;background-color:rgb(238,238,238);border-right:1px solid rgb(221,221,221);list-style:none;text-align:right;"><li>1</li><li>2</li><li>3</li><li>4</li></ul><p style="color:rgb(63,63,63);font-family:'microsoft yahei';font-size:15px;">
2&gt;详细描述agent中每一个source、sink与channel的具体实现：即在描述source的时候，需要 <br>
指定source到底是什么类型的，即这个source是接受文件的、还是接受http的、还是接受thrift <br>
的；对于sink也是同理，需要指定结果是输出到HDFS中，还是Hbase中啊等等；对于channel <br>
需要指定是内存啊，还是<a href="http://lib.csdn.net/base/mysql" rel="nofollow" class="replace_word" title="MySQL知识库" style="color:rgb(223,52,52);font-weight:bold;">数据库</a>啊，还是文件啊等等。</p>
<pre class="prettyprint" style="font-family:'Source Code Pro', monospace;font-size:14px;line-height:1.45;color:rgb(51,51,51);background-color:rgba(128,128,128,.0470588);border:0px solid rgb(136,136,136);"><code class="hljs avrasm has-numbering" style="display:block;background:transparent;color:inherit;font-family:'Source Code Pro', monospace;">    <span class="hljs-preprocessor" style="color:rgb(68,68,68);"># Describe/configure the source</span>
    a1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.sources</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.r</span>1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.type</span> = netcat
    a1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.sources</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.r</span>1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.bind</span> = localhost
    a1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.sources</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.r</span>1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.port</span> = <span class="hljs-number" style="color:rgb(0,102,102);">44444</span>

    <span class="hljs-preprocessor" style="color:rgb(68,68,68);"># Describe the sink</span>
    a1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.sinks</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.k</span>1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.type</span> = logger

    <span class="hljs-preprocessor" style="color:rgb(68,68,68);"># Use a channel which buffers events in memory</span>
    a1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.channels</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.c</span>1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.type</span> = memory
    a1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.channels</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.c</span>1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.capacity</span> = <span class="hljs-number" style="color:rgb(0,102,102);">1000</span>
    a1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.channels</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.c</span>1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.transactionCapacity</span> = <span class="hljs-number" style="color:rgb(0,102,102);">100</span></code></pre><ul class="pre-numbering" style="width:50px;background-color:rgb(238,238,238);border-right:1px solid rgb(221,221,221);list-style:none;text-align:right;opacity:0;"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li></ul><ul class="pre-numbering" style="width:50px;background-color:rgb(238,238,238);border-right:1px solid rgb(221,221,221);list-style:none;text-align:right;"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li></ul><p style="color:rgb(63,63,63);font-family:'microsoft yahei';font-size:15px;">
3&gt;通过channel将source与sink连接起来</p>
<pre class="prettyprint" style="font-family:'Source Code Pro', monospace;font-size:14px;line-height:1.45;color:rgb(51,51,51);background-color:rgba(128,128,128,.0470588);border:0px solid rgb(136,136,136);"><code class="hljs avrasm has-numbering" style="display:block;background:transparent;color:inherit;font-family:'Source Code Pro', monospace;">    <span class="hljs-preprocessor" style="color:rgb(68,68,68);"># Bind the source and sink to the channel</span>
    a1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.sources</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.r</span>1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.channels</span> = c1
    a1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.sinks</span><span class="hljs-preprocessor" style="color:rgb(68,68,68);">.k</span>1<span class="hljs-preprocessor" style="color:rgb(68,68,68);">.channel</span> = c1</code></pre><ul class="pre-numbering" style="width:50px;background-color:rgb(238,238,238);border-right:1px solid rgb(221,221,221);list-style:none;text-align:right;opacity:0;"><li>1</li><li>2</li><li>3</li></ul><ul class="pre-numbering" style="width:50px;background-color:rgb(238,238,238);border-right:1px solid rgb(221,221,221);list-style:none;text-align:right;"><li>1</li><li>2</li><li>3</li></ul><p style="color:rgb(63,63,63);font-family:'microsoft yahei';font-size:15px;">
启动agent的shell操作：</p>
<pre class="prettyprint" style="font-family:'Source Code Pro', monospace;font-size:14px;line-height:1.45;color:rgb(51,51,51);background-color:rgba(128,128,128,.0470588);border:0px solid rgb(136,136,136);"><code class="hljs lasso has-numbering" style="display:block;background:transparent;color:inherit;font-family:'Source Code Pro', monospace;">    flume<span class="hljs-attribute">-ng</span>  agent <span class="hljs-attribute">-n</span> a1  <span class="hljs-attribute">-c</span>  <span class="hljs-built_in" style="color:rgb(102,0,102);">..</span>/conf   <span class="hljs-attribute">-f</span>  <span class="hljs-built_in" style="color:rgb(102,0,102);">..</span>/conf/example<span class="hljs-built_in" style="color:rgb(102,0,102);">.</span>file  
    <span class="hljs-attribute">-Dflume</span><span class="hljs-built_in" style="color:rgb(102,0,102);">.</span>root<span class="hljs-built_in" style="color:rgb(102,0,102);">.</span>logger<span class="hljs-subst" style="color:rgb(0,0,0);">=</span>DEBUG,console  </code></pre><ul class="pre-numbering" style="width:50px;background-color:rgb(238,238,238);border-right:1px solid rgb(221,221,221);list-style:none;text-align:right;opacity:0;"><li>1</li><li>2</li></ul><ul class="pre-numbering" style="width:50px;background-color:rgb(238,238,238);border-right:1px solid rgb(221,221,221);list-style:none;text-align:right;"><li>1</li><li>2</li></ul><p style="color:rgb(63,63,63);font-family:'microsoft yahei';font-size:15px;">
参数说明： -n 指定agent名称(与配置文件中代理的名字相同) <br>
-c 指定flume中配置文件的目录 <br>
-f 指定配置文件 <br>
-Dflume.root.logger=DEBUG,console 设置日志等级</p>
<br><span style="font-family:'Courier New';font-size:18px;">1.配置a2.conf<br>
=====<span style="font-family:'Courier New';font-size:18px;">修改a2.conf</span>====<br>
#a2:agent name<br>
a2.sources = r2<br>
a2.channels = c2<br>
a2.sinks = k2<br><br><br>
# define sources<br>
#主动获取日志<br>
a2.sources.r2.type = exec<br>
#获取日志的命令（注意要有权限,监听的web项目日志记得写全地址）<br>
a2.sources.r2.command = tail -F /var/log/httpd/access_log<br>
#上一行命令所运行的环境<br>
a2.sources.r2.shell = /bin/bash -c<br><br><br>
# define channels<br>
a2.channels.c2.type = memory<br>
a2.channels.c2.capacity = 1000<br>
a2.channels.c2.transactionCapacity = 100<br><br><br>
# define sinks<br>
#目标上传到hdfs<br>
a2.sinks.k2.type = hdfs<br>
a2.sinks.k2.hdfs.path=hdfs://[hostname]:8020/flume/%Y%m%d/%H<br>
a2.sinks.k2.hdfs.filePrefix = accesslog<br>
#启用按时间生成文件夹<br>
a2.sinks.k2.hdfs.round=true<br>
#设置roundValue:1，round单位：小时  <br>
a2.sinks.k2.hdfs.roundValue=1<br>
a2.sinks.k2.hdfs.roundUnit=hour<br>
#使用本地时间戳（这个必须设置不然会报错）<br>
a2.sinks.k2.hdfs.useLocalTimeStamp=true<br>
#多少个events会flush to hdfs<br>
a2.sinks.k2.hdfs.batchSize=1000<br>
# File format: 默认是SequenceFile（key:value对），DataStream是无压缩的一般数据流<br>
a2.sinks.k2.hdfs.fileType=DataStream<br>
#序列化的格式Text<br>
a2.sinks.k2.hdfs.writeFormat=Text<br><br><br>
#设置解决文件过多、过小问题<br>
#每600秒生成一个文件<br>
a2.sinks.k2.hdfs.rollInterval=60<br>
#当达到128000000bytes时，创建新文件 127*1024*1024（in bytes）<br>
#实际环境中如果按照128M回滚文件,那么这里设置一般设置成127M<br>
a2.sinks.k2.hdfs.rollSize=128000000<br>
#设置文件的生成不和events数相关<br>
a2.sinks.k2.hdfs.rollCount=0<br>
#设置成1，否则当有副本复制时就重新生成文件，上面三条则没有效果<br>
a2.sinks.k2.hdfs.minBlockReplicas=1<br><br>
//通过channel将sources和sinks连接起来<br>
# bind the sources and sinks to the channels<br>
a2.sources.r2.channels = c2<br>
a2.sinks.k2.channel = c2<br><br><br>
===================================<br><br><br>
2.安装Apache HTTP服务器程序用于生成网站日志文件<br><span></span>2.1 安装Apache HTTP<br><span></span>#  yum -y  install httpd<br><span></span>2.2 启动httpd服务<span> </span>
<br><span></span># service  httpd start<br><span></span>2.3 编辑一个静态的html的页面<br><span></span># vi /var/www/html/index.html<br><span></span>this is  a test html<br><span></span>2.4 浏览器输入主机名访问这个页面<br><span></span>vampire04<br><span></span>2.5 实时监控httpd日志<br><span></span># chmod -R 777  /var/log/httpd<br><span></span>$ tail -f /var/log/httpd/access_log<br><br><br>
3.启动hadoop<br>
$ sbin/start-dfs.sh<br><br><br>
4.启动Flume-agent a2<br>
$ bin/flume-ng agent --conf conf --conf-file conf/a2.conf --name a2 -Dflume.root.logger=INFO,console<br><br><br>
5.刷新静态页面，观察HDFS是否生成指定的目录和文件</span>
            </div>
                </div>