---
layout:     post
title:      HBase安装及操作
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/zhangfengBX/article/details/78511770				</div>
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<p>单机版：   （hbase内嵌有zookeeper） <br>
解压hbase软件，到达conf目录下 <br>
配置hbase-site.xml文件</p>



<pre class="prettyprint"><code class=" hljs xml"><span class="hljs-tag">&lt;<span class="hljs-title">configuration</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">property</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">name</span>&gt;</span>hbase.rootdir<span class="hljs-tag">&lt;/<span class="hljs-title">name</span>&gt;</span>    配置hbase存在位置
    <span class="hljs-tag">&lt;<span class="hljs-title">value</span>&gt;</span>file:///home/testuser/hbase<span class="hljs-tag">&lt;/<span class="hljs-title">value</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">property</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">property</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">name</span>&gt;</span>hbase.zookeeper.property.dataDir<span class="hljs-tag">&lt;/<span class="hljs-title">name</span>&gt;</span>  配置hbase文件保存路径
    <span class="hljs-tag">&lt;<span class="hljs-title">value</span>&gt;</span>/home/testuser/zookeeper<span class="hljs-tag">&lt;/<span class="hljs-title">value</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">property</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">configuration</span>&gt;</span></code></pre>

<p>配置hbase-env.sh文件：把29行的注释取消，配置虚拟机上面的Java地址</p>



<pre class="prettyprint"><code class=" hljs objectivec">     <span class="hljs-number">28</span> <span class="hljs-preprocessor"># The java implementation to use.  Java 1.6 required.</span>
     <span class="hljs-number">29</span> <span class="hljs-keyword">export</span> JAVA_HOME=/usr/java/<span class="hljs-keyword">default</span>        
     <span class="hljs-number">30</span> 
     <span class="hljs-number">31</span> <span class="hljs-preprocessor"># Extra Java CLASSPATH elements.  Optional.</span>
     <span class="hljs-number">32</span> <span class="hljs-preprocessor"># export HBASE_CLASSPATH</span></code></pre>

<p>然后使用start-hbase.sh命令启动hbase <br>
使用hbase shell  进入hbase的命令提示界面，进行hbase语句操作练习</p>

<p>hbase集群：（高可用） <br>
配置hbase-site.xml文件</p>

<pre class="prettyprint"><code class=" hljs xml"><span class="hljs-tag">&lt;<span class="hljs-title">configuration</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">property</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">name</span>&gt;</span>hbase.rootdir<span class="hljs-tag">&lt;/<span class="hljs-title">name</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">value</span>&gt;</span>hdfs://bx/hbase<span class="hljs-tag">&lt;/<span class="hljs-title">value</span>&gt;</span>    此处的bx为以前搭建hdfs集群时，使用的那个集群代号
<span class="hljs-tag">&lt;/<span class="hljs-title">property</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">property</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">name</span>&gt;</span>hbase.zookeeper.quorum<span class="hljs-tag">&lt;/<span class="hljs-title">name</span>&gt;</span>       指定集群的几台zookeeper主机名
  <span class="hljs-tag">&lt;<span class="hljs-title">value</span>&gt;</span>CentOS8,CentOS9,CentOS10,CentOS15<span class="hljs-tag">&lt;/<span class="hljs-title">value</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">property</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">property</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">name</span>&gt;</span>hbase.cluster.distributed<span class="hljs-tag">&lt;/<span class="hljs-title">name</span>&gt;</span>    设置使用zookeeper集群，true为使用
  <span class="hljs-tag">&lt;<span class="hljs-title">value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-title">value</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">property</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">configuration</span>&gt;</span></code></pre>

<p>配置hbase-env.sh文件：把124行的注释取消，把true改为false，代表不使用自带的zookeeper</p>



<pre class="prettyprint"><code class=" hljs bash"><span class="hljs-number">121</span> <span class="hljs-comment"># export HBASE_SLAVE_SLEEP=0.1</span>
    <span class="hljs-number">122</span> <span class="hljs-comment">#</span>
    <span class="hljs-number">123</span> <span class="hljs-comment"># Tell HBase whether it should manage it's own instance of Zookeeper or not.</span>
    <span class="hljs-number">124</span> <span class="hljs-keyword">export</span> HBASE_MANAGES_ZK=<span class="hljs-literal">false</span>      默认为<span class="hljs-literal">true</span>
    <span class="hljs-number">125</span> <span class="hljs-comment">#</span></code></pre>

<p>设置regionservers文件 <br>
vi regionservers    </p>



<pre class="prettyprint"><code class=" hljs ">     CentOS8    设置四个regionserver节点
     CentOS9
     CentOS10
     CentOS15</code></pre>

<p>创建backup-masters文件 <br>
vi backup-masters</p>



<pre class="prettyprint"><code class=" hljs ">CentOS8    指定两台master主机
CentOS9  </code></pre>

<p>然后再把hadoop2.6.5/etc/hadoop/hdfs-site.xml文件拷贝到该目录下</p>

<p>到此，配置文件准备完毕。 <br>
首先每台机器启动zkServer.start.sh <br>
然后在配了免密钥登录的机器上执行start-dfs.sh ，启动hdfs集群 <br>
最后，在start-hbase.sh  启动hbase数据库</p>

<hr>

<p>安装完毕后就开始可以使用了</p>

<p>创建命名空间：</p>



<pre class="prettyprint"><code class=" hljs bash">create_namespace   <span class="hljs-string">'benxi'</span></code></pre>

<p>创建region：</p>

<pre class="prettyprint"><code class=" hljs sql"><span class="hljs-operator"><span class="hljs-keyword">create</span> <span class="hljs-string">'t_user'</span>,<span class="hljs-string">'f1'</span>,f2<span class="hljs-string">' </span></span></code></pre>

<p>插入数据：</p>

<pre class="prettyprint"><code class=" hljs livecodeserver"><span class="hljs-built_in">put</span> <span class="hljs-string">'t_user'</span>,<span class="hljs-string">'001'</span>,<span class="hljs-string">'f1:name'</span>,<span class="hljs-string">'张三'</span>    第一个为表名，第二个为Row Key，第三个为列族名：属性名，第四个为属性的<span class="hljs-built_in">value</span>值</code></pre>



<pre class="prettyprint"><code class=" hljs livecodeserver"><span class="hljs-built_in">put</span> <span class="hljs-string">'t_user'</span>,<span class="hljs-string">'001'</span>,<span class="hljs-string">'f1:age'</span>,<span class="hljs-string">'13'</span></code></pre>

<p>查看表结构：<code>desc 't_user'</code>  显示结果如下：（部分参数解释）</p>

<p>Table t_user is ENABLED <br>
t_user <br>
COLUMN FAMILIES DESCRIPTION <br>
{NAME=&gt;’f1’,                列族名 <br>
DATA_BLOCK_ENCODING=&gt;’NONE’, <br>
BLOOMFILTER=&gt;’ROW’, <br>
 REPLICATION_SCOPE =&gt; ‘0’, <br>
     VERSIONS =&gt; ‘1’,   最大保存数为1 <br>
COMPRESSION =&gt; ‘NONE’, <br>
     MIN_VERSIONS =&gt; ‘0’,   最小保存数为0 <br>
TTL=&gt;FOREVER’,        保存时间为永久有效 <br>
KEEP_DELETED_CELLS =&gt; ‘FALSE’,  <br>
BLOCKSIZE=&gt;’65536’,     一个块大小，单位字节，64k <br>
IN_MEMORY=&gt;’false’, <br>
BLOCKCACHE =&gt; ‘true’}   默认为true，开启查询保存                                                                        </p>

<p>禁用命名空间</p>



<pre class="prettyprint"><code class=" hljs scss"><span class="hljs-value">disabled</span> ‘t_user’</code></pre>

<p>删除命名空间  首先要禁用表才能删除。</p>



<pre class="prettyprint"><code class=" hljs rust"> <span class="hljs-keyword">drop</span>  <span class="hljs-string">'t_user'</span></code></pre>

<hr>

<p>接下来使用Java代码进行操作：</p>



<pre class="prettyprint"><code class=" hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">create_test1</span> {</span>
    <span class="hljs-javadoc">/**
     * 案例1：
     * 存放电信通话数据
     * 表：t_phone_recode   --&gt; t_cdr
     * rowkey：phone+Long.maxvalue-date
     * 列族：cf1:
     */</span>
    String tableName = <span class="hljs-string">"t_phone_recode"</span>;
    Random r = <span class="hljs-keyword">new</span> Random();
    <span class="hljs-annotation">@Test</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">createTable</span>() <span class="hljs-keyword">throws</span> Exception{
        Configuration config = <span class="hljs-keyword">new</span> Configuration();
        <span class="hljs-comment">//指定zookeeper集群，和hbase-size.xml文件一样</span>
        config.set(<span class="hljs-string">"hbase.zookeeper.quorum"</span>, <span class="hljs-string">"CentOS8,CentOS9,CentOS10,CentOS15"</span>);
        <span class="hljs-comment">//创建表的对象</span>
        HBaseAdmin admin = <span class="hljs-keyword">new</span> HBaseAdmin(config);

        <span class="hljs-comment">//判断该表是否存在</span>
        <span class="hljs-keyword">if</span>(admin.tableExists(tableName)){
            <span class="hljs-comment">//使表失效，然后才能进行删除操作</span>
            admin.disableTable(tableName);
            <span class="hljs-comment">//删除表操作</span>
            admin.deleteTable(tableName);
        }
        <span class="hljs-comment">//创建一个表对象</span>
        HTableDescriptor table = <span class="hljs-keyword">new</span> HTableDescriptor(TableName.valueOf(tableName));
        <span class="hljs-comment">//创建列族，需要创建多个列族，就多写几个</span>
        HColumnDescriptor columnfamily = <span class="hljs-keyword">new</span> HColumnDescriptor(<span class="hljs-string">"cf1"</span>);
        <span class="hljs-comment">//设置列族的最大cell保存数量（默认为2）,和设置列族最小保存数量（默认为0）</span>
        columnfamily.setMaxVersions(<span class="hljs-number">2</span>);
        columnfamily.setMinVersions(<span class="hljs-number">1</span>);
        <span class="hljs-comment">//把列族设置添加进表中</span>
        table.addFamily(columnfamily);
        <span class="hljs-comment">//把表对象添加到HBaseAdmin对象中去</span>
        admin.createTable(table);
        <span class="hljs-comment">//关闭连接</span>
        admin.close();
    }
    <span class="hljs-javadoc">/**
     * 列族里面的列：当前手机号，目标手机号，通话类型，通话时间
     */</span>
    <span class="hljs-annotation">@Test</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertDates</span>() <span class="hljs-keyword">throws</span> Exception{
        Configuration config = <span class="hljs-keyword">new</span> Configuration();
        <span class="hljs-comment">//指定zookeeper集群，和hbase-size.xml文件一样</span>
        config.set(<span class="hljs-string">"hbase.zookeeper.quorum"</span>, <span class="hljs-string">"CentOS8,CentOS9,CentOS10,CentOS15"</span>);
        <span class="hljs-comment">//创建表操作对象,前面一个为configuration对象，后面为表名</span>
        HTable table = <span class="hljs-keyword">new</span> HTable(config, tableName);
        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">100</span>;i++){
            <span class="hljs-comment">//随机生成一个手机号</span>
            String phone = getPhone(<span class="hljs-string">"151"</span>);
            <span class="hljs-comment">//创建put集合对象</span>
            List&lt;Put&gt; puts = <span class="hljs-keyword">new</span> ArrayList&lt;Put&gt;();
            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;j&lt;<span class="hljs-number">10</span>;j++){
                <span class="hljs-comment">//随机生成一个日期，虽然生成的可能不准确，可能会出现20190230这样的日期</span>
                String date  = getDate(<span class="hljs-string">"2019"</span>);
                <span class="hljs-comment">//把手机号和日期拼接在一起作为rowkey</span>
                String rowkey = phone + <span class="hljs-string">"_"</span>+(Long.MAX_VALUE-Long.parseLong(date));
                <span class="hljs-comment">//put对象用来进行对HBase操作</span>
                Put put = <span class="hljs-keyword">new</span> Put(rowkey.getBytes());
                <span class="hljs-comment">//把rowkey放到Put对象中去</span>
                put.add(<span class="hljs-string">"cf1"</span>.getBytes(),<span class="hljs-string">"phone"</span>.getBytes(),phone.getBytes());
                put.add(<span class="hljs-string">"cf1"</span>.getBytes(),<span class="hljs-string">"dest"</span>.getBytes(),getPhone(<span class="hljs-string">"151"</span>).getBytes());
                put.add(<span class="hljs-string">"cf1"</span>.getBytes(),<span class="hljs-string">"type"</span>.getBytes(),(r.nextInt(<span class="hljs-number">2</span>)+<span class="hljs-string">""</span>).getBytes());
                put.add(<span class="hljs-string">"cf1"</span>.getBytes(),<span class="hljs-string">"date"</span>.getBytes(),date.getBytes());
                <span class="hljs-comment">//把put对象添加到集合中</span>
                puts.add(put);
            }
            <span class="hljs-comment">//把生成的put对象放到HTable对象中去</span>
            table.put(puts);
        }
        table.close();
    }
    <span class="hljs-javadoc">/**
     * 已知rowkey查询一行数据
     *<span class="hljs-javadoctag"> @throws</span> Exception
     */</span>
    <span class="hljs-annotation">@Test</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">findOne</span>() <span class="hljs-keyword">throws</span> Exception{
        Configuration config = <span class="hljs-keyword">new</span> Configuration();
        <span class="hljs-comment">//指定zookeeper集群，和hbase-size.xml文件一样</span>
        config.set(<span class="hljs-string">"hbase.zookeeper.quorum"</span>, <span class="hljs-string">"CentOS8,CentOS9,CentOS10,CentOS15"</span>);
        <span class="hljs-comment">//创建表操作对象,前面一个为configuration对象，后面为表名</span>
        HTable table = <span class="hljs-keyword">new</span> HTable(config, tableName);
        String rowkey = <span class="hljs-string">"15198932957_9223351846730721367"</span>;
        <span class="hljs-comment">//通过Get获取rowkey为15198518559_9223351846450735的对象</span>
        Get get = <span class="hljs-keyword">new</span> Get(rowkey.getBytes());
<span class="hljs-comment">//设置访问拦截后，设置这个继续访问</span>
        get.setAttribute(<span class="hljs-string">"user"</span>, <span class="hljs-string">"zs"</span>.getBytes());
        <span class="hljs-comment">//把rowkey关联表,Result对象代表hbase中一行数据</span>
        Result re = table.get(get);
<span class="hljs-comment">//      byte[] value = re.getValue("cf1".getBytes(), "dest".getBytes());</span>
<span class="hljs-comment">//      System.out.println(new String(value));</span>
        <span class="hljs-comment">//获取最高版本的，最新的那条数据。获取一个单元格</span>
        Cell destCell=re.getColumnLatestCell(<span class="hljs-string">"cf1"</span>.getBytes(), <span class="hljs-string">"dest"</span>.getBytes());
        String dest = <span class="hljs-keyword">new</span> String(CellUtil.cloneValue(destCell));
        String type = <span class="hljs-keyword">new</span> String(CellUtil.cloneValue(re.getColumnLatestCell(<span class="hljs-string">"cf1"</span>.getBytes(),<span class="hljs-string">"dest"</span>.getBytes())));

        System.out.println(<span class="hljs-string">"目标手机号："</span>+dest);
        System.out.println(<span class="hljs-string">"通话类型："</span>+(type.equals(<span class="hljs-string">"1"</span>)?<span class="hljs-string">"主叫"</span>:<span class="hljs-string">"被叫"</span>));

    }
    <span class="hljs-javadoc">/**
     * 查询一个手机号15198518559第二个季度的所有通话记录
     */</span>
    <span class="hljs-annotation">@Test</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">findRowsTwo</span>() <span class="hljs-keyword">throws</span> Exception{
        Configuration config = <span class="hljs-keyword">new</span> Configuration();
        config.set(<span class="hljs-string">"hbase.zookeeper.quorum"</span>, <span class="hljs-string">"CentOS8,CentOS9,CentOS10,CentOS15"</span>);
        HTable table = <span class="hljs-keyword">new</span> HTable(config, tableName);
        <span class="hljs-comment">//使用正则匹配条件，^15198932957_表示以15198932957_开头的rowkey; $1234表示匹配以1234结尾的rowkey</span>
        RowFilter rf = <span class="hljs-keyword">new</span> RowFilter(CompareOp.EQUAL, <span class="hljs-keyword">new</span> RegexStringComparator(<span class="hljs-string">"^15198932957_"</span>) );
        <span class="hljs-comment">//使用Scan查询多条数据</span>
        Scan scan = <span class="hljs-keyword">new</span> Scan();
        scan.setFilter(rf);
        <span class="hljs-comment">//使用ResultScanner对象获取表中所有数据</span>
        ResultScanner res = table.getScanner(scan);
        <span class="hljs-keyword">for</span> (Result result : res) {
            System.out.println(<span class="hljs-keyword">new</span> String(CellUtil.cloneValue(result.getColumnLatestCell(<span class="hljs-string">"cf1"</span>.getBytes(),<span class="hljs-string">"dest"</span>.getBytes()))));
            System.out.println(<span class="hljs-keyword">new</span> String(CellUtil.cloneValue(result.getColumnLatestCell(<span class="hljs-string">"cf1"</span>.getBytes(),<span class="hljs-string">"phone"</span>.getBytes()))));
            System.out.println(<span class="hljs-keyword">new</span> String(CellUtil.cloneValue(result.getColumnLatestCell(<span class="hljs-string">"cf1"</span>.getBytes(),<span class="hljs-string">"date"</span>.getBytes()))));
            System.out.println(<span class="hljs-string">"-----------------"</span>);
        }

    }
    <span class="hljs-annotation">@Test</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">findRows</span>() <span class="hljs-keyword">throws</span> Exception{
        Configuration config = <span class="hljs-keyword">new</span> Configuration();
        <span class="hljs-comment">//指定zookeeper集群，和hbase-size.xml文件一样</span>
        config.set(<span class="hljs-string">"hbase.zookeeper.quorum"</span>, <span class="hljs-string">"CentOS8,CentOS9,CentOS10,CentOS15"</span>);
        <span class="hljs-comment">//创建表操作对象,前面一个为configuration对象，后面为表名</span>
        HTable table = <span class="hljs-keyword">new</span> HTable(config, tableName);
        <span class="hljs-comment">//使用Scan对象查询多个数据</span>
        Scan scan = <span class="hljs-keyword">new</span> Scan();
        String startRowkey =<span class="hljs-string">"15195946934_"</span>+(Long.MAX_VALUE-<span class="hljs-number">20190630246060</span>l);
        String endRowkey =<span class="hljs-string">"15195946934_"</span>+(Long.MAX_VALUE-<span class="hljs-number">20190331246060</span>l);
        scan.setStartRow(startRowkey.getBytes());
        scan.setStopRow(endRowkey.getBytes());

        ResultScanner res =table.getScanner(scan);
        <span class="hljs-keyword">for</span>(Result re :res){
            Cell destCell=re.getColumnLatestCell(<span class="hljs-string">"cf1"</span>.getBytes(), <span class="hljs-string">"dest"</span>.getBytes());<span class="hljs-comment">//获取一行里面的其中一个单元格</span>
            String dest =<span class="hljs-keyword">new</span> String(CellUtil.cloneValue(destCell));
            String type =<span class="hljs-keyword">new</span> String(CellUtil.cloneValue(re.getColumnLatestCell(<span class="hljs-string">"cf1"</span>.getBytes(), <span class="hljs-string">"type"</span>.getBytes())));
            String date =<span class="hljs-keyword">new</span> String(CellUtil.cloneValue(re.getColumnLatestCell(<span class="hljs-string">"cf1"</span>.getBytes(), <span class="hljs-string">"date"</span>.getBytes())));
            String phone =<span class="hljs-keyword">new</span> String(CellUtil.cloneValue(re.getColumnLatestCell(<span class="hljs-string">"cf1"</span>.getBytes(), <span class="hljs-string">"phone"</span>.getBytes())));
            System.out.println(<span class="hljs-string">"通话时间："</span>+date);
            System.out.println(<span class="hljs-string">"目标手机号"</span>+dest);
            System.out.println(<span class="hljs-string">"通话类型："</span>+(type.equals(<span class="hljs-string">"1"</span>)?<span class="hljs-string">"主叫"</span>:<span class="hljs-string">"被叫"</span>));
            System.out.println(<span class="hljs-string">"-------------------------------"</span>);
        }
        table.close();
    }
    <span class="hljs-javadoc">/**
     * 查询手机号13899154250，的所有主叫记录
     */</span>
    <span class="hljs-annotation">@Test</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">findRows2</span>()<span class="hljs-keyword">throws</span> Exception{
        Configuration config =<span class="hljs-keyword">new</span> Configuration();
        config.set(<span class="hljs-string">"hbase.zookeeper.quorum"</span>, <span class="hljs-string">"CentOS8,CentOS9,CentOS10,CentOS15"</span>);
        HTable htable  =<span class="hljs-keyword">new</span> HTable(config, tableName);

        PrefixFilter rowkeyPrefix =<span class="hljs-keyword">new</span> PrefixFilter(<span class="hljs-string">"15198932957"</span>.getBytes());
        SingleColumnValueFilter f2 =<span class="hljs-keyword">new</span> SingleColumnValueFilter(<span class="hljs-string">"cf1"</span>.getBytes(), <span class="hljs-string">"type"</span>.getBytes(), CompareOp.EQUAL, <span class="hljs-string">"1"</span>.getBytes());<span class="hljs-comment">//判断一个列的值是否等于（大于，小于等）某个指定的value</span>
        FilterList list = <span class="hljs-keyword">new</span> FilterList(FilterList.Operator.MUST_PASS_ALL);
        list.addFilter(rowkeyPrefix);
        list.addFilter(f2);
        Scan scan =<span class="hljs-keyword">new</span> Scan();
        scan.setFilter(list);

        ResultScanner res =htable.getScanner(scan);
        <span class="hljs-keyword">for</span>(Result re :res){
            Cell destCell=re.getColumnLatestCell(<span class="hljs-string">"cf1"</span>.getBytes(), <span class="hljs-string">"dest"</span>.getBytes());<span class="hljs-comment">//获取一行里面的其中一个单元格</span>
            String dest =<span class="hljs-keyword">new</span> String(CellUtil.cloneValue(destCell));
            String type =<span class="hljs-keyword">new</span> String(CellUtil.cloneValue(re.getColumnLatestCell(<span class="hljs-string">"cf1"</span>.getBytes(), <span class="hljs-string">"type"</span>.getBytes())));
            String date =<span class="hljs-keyword">new</span> String(CellUtil.cloneValue(re.getColumnLatestCell(<span class="hljs-string">"cf1"</span>.getBytes(), <span class="hljs-string">"date"</span>.getBytes())));
            String phone =<span class="hljs-keyword">new</span> String(CellUtil.cloneValue(re.getColumnLatestCell(<span class="hljs-string">"cf1"</span>.getBytes(), <span class="hljs-string">"phone"</span>.getBytes())));
            System.out.println(<span class="hljs-string">"通话时间："</span>+date);
            System.out.println(<span class="hljs-string">"目标手机号"</span>+dest);
            System.out.println(<span class="hljs-string">"通话类型："</span>+(type.equals(<span class="hljs-string">"1"</span>)?<span class="hljs-string">"主叫"</span>:<span class="hljs-string">"被叫"</span>));
            System.out.println(<span class="hljs-string">"-------------------------------"</span>);
        }
        htable.close();
    }
    <span class="hljs-annotation">@Test</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">findRowTwo2</span>() <span class="hljs-keyword">throws</span> Exception{
        Configuration config = <span class="hljs-keyword">new</span> Configuration();
        config.set(<span class="hljs-string">"hbase.zookeeper.quorum"</span>, <span class="hljs-string">"CentOS8,CentOS9,CentOS10,CentOS15"</span>);
        HTable htable  =<span class="hljs-keyword">new</span> HTable(config, tableName);

        <span class="hljs-comment">//设置查询条件,因为条件比较多，使用过滤器集合对象存储FilterList,MUST_PASS_ALL 设置多个条件，MUST_PASS_ONE 设置一个条件</span>
        FilterList list = <span class="hljs-keyword">new</span> FilterList(FilterList.Operator.MUST_PASS_ALL);
        <span class="hljs-comment">//判断一个列的值是否等于（大于，小于等）某个指定的value。 第一个指定列族，第二个参数指定属性名，第三个指定比较方式（EQUAL为相等），第四个参数代表比较对比的值</span>
        SingleColumnValueFilter f1 = <span class="hljs-keyword">new</span> SingleColumnValueFilter(<span class="hljs-string">"cf1"</span>.getBytes(), <span class="hljs-string">"type"</span>.getBytes(), CompareOp.EQUAL, <span class="hljs-string">"1"</span>.getBytes());
        <span class="hljs-comment">//设置前缀过滤器，查询rowkey为15198932957的所有数据</span>
        PrefixFilter rowkeyPrefix = <span class="hljs-keyword">new</span> PrefixFilter(<span class="hljs-string">"15198932957"</span>.getBytes());
        <span class="hljs-comment">//把过滤条件添加进入list集合中</span>
        list.addFilter(f1);
        list.addFilter(rowkeyPrefix);
        <span class="hljs-comment">//使用Scan查询多条数据</span>
        Scan scan = <span class="hljs-keyword">new</span> Scan();
        <span class="hljs-comment">//给scan对象设置过滤器，可以设置一条，也可以是一个集合</span>
        scan.setFilter(list);
        <span class="hljs-comment">//把使用迭代器</span>
        ResultScanner res = htable.getScanner(scan);
        <span class="hljs-keyword">for</span> (Result result : res) {
            System.out.println(<span class="hljs-string">"通话时间："</span>+<span class="hljs-keyword">new</span> String(CellUtil.cloneValue(result.getColumnLatestCell(<span class="hljs-string">"cf1"</span>.getBytes(),<span class="hljs-string">"date"</span>.getBytes()))));
            System.out.println(<span class="hljs-string">"当前手机号："</span>+<span class="hljs-keyword">new</span> String(CellUtil.cloneValue(result.getColumnLatestCell(<span class="hljs-string">"cf1"</span>.getBytes(),<span class="hljs-string">"phone"</span>.getBytes()))));
            System.out.println(<span class="hljs-string">"目标手机号："</span>+<span class="hljs-keyword">new</span> String(CellUtil.cloneValue(result.getColumnLatestCell(<span class="hljs-string">"cf1"</span>.getBytes(),<span class="hljs-string">"dest"</span>.getBytes()))));
            System.out.println(<span class="hljs-string">"电话类型："</span>+((<span class="hljs-keyword">new</span> String(CellUtil.cloneValue(result.getColumnLatestCell(<span class="hljs-string">"cf1"</span>.getBytes(),<span class="hljs-string">"type"</span>.getBytes())))).equals(<span class="hljs-string">"1"</span>)?<span class="hljs-string">"主叫"</span>:<span class="hljs-string">"被叫"</span>));
        }
        htable.close();

    }
    <span class="hljs-comment">//修改某个单元格的内容</span>
    <span class="hljs-annotation">@Test</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span>()<span class="hljs-keyword">throws</span> Exception{
        Configuration config = <span class="hljs-keyword">new</span> Configuration();
        <span class="hljs-comment">//指定zookeeper集群，和hbase-size.xml文件一样</span>
        config.set(<span class="hljs-string">"hbase.zookeeper.quorum"</span>, <span class="hljs-string">"CentOS8,CentOS9,CentOS10,CentOS15"</span>);
        <span class="hljs-comment">//创建表操作对象,前面一个为configuration对象，后面为表名</span>
        HTable table = <span class="hljs-keyword">new</span> HTable(config, tableName);
        <span class="hljs-comment">//把手机号和日期拼接在一起作为rowkey</span>
        String rowkey = <span class="hljs-string">"15198932957_9223351846730721367"</span>;
        <span class="hljs-comment">//put对象用来进行对HBase操作</span>
        Put put = <span class="hljs-keyword">new</span> Put(rowkey.getBytes());
        <span class="hljs-comment">//把rowkey放到Put对象中去</span>
        put.add(<span class="hljs-string">"cf1"</span>.getBytes(),<span class="hljs-string">"dest"</span>.getBytes(),getPhone(<span class="hljs-string">"151"</span>).getBytes());
        put.add(<span class="hljs-string">"cf1"</span>.getBytes(),<span class="hljs-string">"type"</span>.getBytes(),(r.nextInt(<span class="hljs-number">2</span>)+<span class="hljs-string">""</span>).getBytes());
        put.add(<span class="hljs-string">"cf1"</span>.getBytes(),<span class="hljs-string">"date"</span>.getBytes(),getDate(<span class="hljs-string">"2017"</span>).getBytes());
        table.put(put);
        table.close();
    }
    <span class="hljs-comment">//删除一个指定column(所有版本)</span>
    <span class="hljs-annotation">@Test</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete2</span>() <span class="hljs-keyword">throws</span> Exception{
        Configuration config = <span class="hljs-keyword">new</span> Configuration();
        <span class="hljs-comment">//指定zookeeper集群，和hbase-size.xml文件一样</span>
        config.set(<span class="hljs-string">"hbase.zookeeper.quorum"</span>, <span class="hljs-string">"CentOS8,CentOS9,CentOS10,CentOS15"</span>);
        <span class="hljs-comment">//创建表操作对象,前面一个为configuration对象，后面为表名</span>
        HTable table = <span class="hljs-keyword">new</span> HTable(config, tableName);
        String rowkey = <span class="hljs-string">"15198932957_9223351846240714672"</span>;
        <span class="hljs-comment">//创建Delete对象，把rowkey传递过去</span>
        Delete del = <span class="hljs-keyword">new</span> Delete(rowkey.getBytes());
        <span class="hljs-comment">//删除最新的符合条件的数据</span>
        Delete delete = del.deleteColumn(<span class="hljs-string">"cf1"</span>.getBytes(), <span class="hljs-string">"dest"</span>.getBytes());
        table.delete(delete);
        table.close();
    }
    <span class="hljs-annotation">@Test</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span>() <span class="hljs-keyword">throws</span> Exception{
        Configuration config = <span class="hljs-keyword">new</span> Configuration();
        <span class="hljs-comment">//指定zookeeper集群，和hbase-size.xml文件一样</span>
        config.set(<span class="hljs-string">"hbase.zookeeper.quorum"</span>, <span class="hljs-string">"CentOS8,CentOS9,CentOS10,CentOS15"</span>);
        <span class="hljs-comment">//创建表操作对象,前面一个为configuration对象，后面为表名</span>
        HTable table = <span class="hljs-keyword">new</span> HTable(config, tableName);
        <span class="hljs-comment">//把手机号和日期拼接在一起作为rowkey</span>
        String rowkey = <span class="hljs-string">"15198932957_9223351846240714672"</span>;
        <span class="hljs-comment">//通过Get获取rowkey为15198518559_9223351846450735的对象</span>
        Get get = <span class="hljs-keyword">new</span> Get(rowkey.getBytes());
        <span class="hljs-comment">//把rowkey关联表,Result对象代表hbase中一行数据</span>
        Result re = table.get(get);
<span class="hljs-comment">//      byte[] value = re.getValue("cf1".getBytes(), "dest".getBytes());</span>
<span class="hljs-comment">//      System.out.println(new String(value));</span>
        <span class="hljs-comment">//获取最高版本的，最新的那条数据。获取一个单元格</span>
<span class="hljs-comment">//      Cell cell=re.getColumnLatestCell("cf1".getBytes(), "dest".getBytes());</span>
<span class="hljs-comment">//      Cell ce = CellUtil.createCell();</span>
        Delete del = <span class="hljs-keyword">new</span> Delete(rowkey.getBytes());
        del.deleteColumn(<span class="hljs-string">"cf1"</span>.getBytes(), <span class="hljs-string">"dest"</span>.getBytes());
<span class="hljs-comment">//      del.addDeleteMarker(cell);</span>
        table.delete(del);
        table.close();
    }
    <span class="hljs-comment">//删除指定的一行数据</span>
    <span class="hljs-annotation">@Test</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteRowkey</span>() <span class="hljs-keyword">throws</span> Exception{
        Configuration config = <span class="hljs-keyword">new</span> Configuration();
        <span class="hljs-comment">//指定zookeeper集群，和hbase-size.xml文件一样</span>
        config.set(<span class="hljs-string">"hbase.zookeeper.quorum"</span>, <span class="hljs-string">"CentOS8,CentOS9,CentOS10,CentOS15"</span>);
        <span class="hljs-comment">//创建表操作对象,前面一个为configuration对象，后面为表名</span>
        HTable table = <span class="hljs-keyword">new</span> HTable(config, tableName);
        String rowkey = <span class="hljs-string">"15198932957_9223351846240714672"</span>;
        <span class="hljs-comment">//创建Delete对象，把rowkey传递过去</span>
        Delete del = <span class="hljs-keyword">new</span> Delete(rowkey.getBytes());
        <span class="hljs-comment">//删除最新的符合条件的数据</span>
<span class="hljs-comment">//      Delete delete = del.deleteColumn("cf1".getBytes(), "dest".getBytes());</span>
        table.delete(del);
        table.close();
    }
    <span class="hljs-comment">//删除13899154250第3季度的通话记录</span>
    <span class="hljs-annotation">@Test</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteByPhone</span>() <span class="hljs-keyword">throws</span> Exception{
        Configuration config = <span class="hljs-keyword">new</span> Configuration();
        <span class="hljs-comment">//指定zookeeper集群，和hbase-size.xml文件一样</span>
        config.set(<span class="hljs-string">"hbase.zookeeper.quorum"</span>, <span class="hljs-string">"CentOS8,CentOS9,CentOS10,CentOS15"</span>);
        <span class="hljs-comment">//创建表操作对象,前面一个为configuration对象，后面为表名</span>
        HTable table = <span class="hljs-keyword">new</span> HTable(config, tableName);
        Scan scan = <span class="hljs-keyword">new</span> Scan();
        <span class="hljs-comment">//获得第三季度，long的最大值减去季度最大日期，得到起始日期</span>
        String startdate = <span class="hljs-string">"15198902068_"</span>+(Long.MAX_VALUE-<span class="hljs-number">20190930246060</span>l);
        String lastdate = <span class="hljs-string">"15198902068_"</span>+(Long.MAX_VALUE-<span class="hljs-number">20190630246060</span>l);
        <span class="hljs-comment">//把起始时间戳设置进Scan</span>
        scan.setStartRow(startdate.getBytes());
        scan.setStopRow(lastdate.getBytes());
<span class="hljs-comment">//      Delete del = new Delete("".getBytes());</span>
        <span class="hljs-comment">//往table对象中添加scan条件设置,创建ResultScanner对象，获取当前表的所有数据</span>
        ResultScanner res =table.getScanner(scan);
        <span class="hljs-comment">//遍历该表</span>
        <span class="hljs-keyword">for</span>(Result re :res){
            <span class="hljs-comment">//获取一行里面的其中一个单元格</span>
            Cell destCell=re.getColumnLatestCell(<span class="hljs-string">"cf1"</span>.getBytes(), <span class="hljs-string">"dest"</span>.getBytes());
            <span class="hljs-comment">//获取这列数据的rowkey，得到的是内存地址。一般不使用</span>
            String str = re.getRow().toString();
            System.out.println(str);
            <span class="hljs-comment">//取出当前单元格的电话号码所属</span>
            String phone =<span class="hljs-keyword">new</span> String(CellUtil.cloneValue(re.getColumnLatestCell(<span class="hljs-string">"cf1"</span>.getBytes(), <span class="hljs-string">"phone"</span>.getBytes())));
            <span class="hljs-comment">//如果当前电话号码为15198902068，则删除这个数据</span>
            <span class="hljs-keyword">if</span>(<span class="hljs-string">"15198902068"</span>.equals(phone)){
                <span class="hljs-comment">//设置删除条件</span>
                Delete del = <span class="hljs-keyword">new</span> Delete(re.getRow());
                <span class="hljs-comment">//删除数据</span>
                table.delete(del);
                <span class="hljs-keyword">continue</span>;
            }
        }
        table.close();
    }
    <span class="hljs-comment">//生成随机电话号码，传入前三位数，后面八位数随机生成</span>
    <span class="hljs-keyword">private</span> String <span class="hljs-title">getPhone</span>(String prefix){
        <span class="hljs-keyword">return</span> prefix+String.format(<span class="hljs-string">"%08d"</span>, r.nextInt(<span class="hljs-number">99999999</span>));
    }
    <span class="hljs-comment">//随机生成日期，年份需要传入，月日时分秒随机生成</span>
    <span class="hljs-keyword">private</span> String <span class="hljs-title">getDate</span>(String year){
        <span class="hljs-keyword">return</span> year+String.format(<span class="hljs-string">"%02d%02d%02d%02d%02d"</span>, <span class="hljs-keyword">new</span> Object[]{r.nextInt(<span class="hljs-number">12</span>)+<span class="hljs-number">1</span>,r.nextInt(<span class="hljs-number">31</span>)+<span class="hljs-number">1</span>,r.nextInt(<span class="hljs-number">24</span>),r.nextInt(<span class="hljs-number">60</span>),r.nextInt(<span class="hljs-number">60</span>)});
    }
}
</code></pre>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>