---
layout:     post
title:      第八天 - JAVA操作HDFS工具类
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<h1 id="第八天-java操作hdfs工具类">第八天 - JAVA操作HDFS工具类</h1>

<p></p><div class="toc">
<ul>
<li><a href="#%E7%AC%AC%E5%85%AB%E5%A4%A9-java%E6%93%8D%E4%BD%9Chdfs%E5%B7%A5%E5%85%B7%E7%B1%BB" rel="nofollow">第八天 - JAVA操作HDFS工具类</a><ul>
<li><ul>
<li><a href="#%E4%B8%80hdfsutil%E5%B7%A5%E5%85%B7%E7%B1%BB%E8%A1%A5%E5%85%85" rel="nofollow">一、HDFSUtil工具类补充</a><ul>
<li><ul>
<li><a href="#%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6" rel="nofollow">删除文件</a></li>
<li><a href="#%E8%8E%B7%E5%8F%96%E6%9F%90%E4%B8%80%E8%B7%AF%E5%BE%84%E4%B8%8B%E7%9A%84%E6%96%87%E4%BB%B6%E4%BF%A1%E6%81%AF" rel="nofollow">获取某一路径下的文件信息</a></li>
<li><a href="#%E6%96%87%E4%BB%B6%E5%A4%A7%E5%B0%8F%E5%8D%95%E4%BD%8D%E6%8D%A2%E7%AE%97" rel="nofollow">文件大小单位换算</a></li>
<li><a href="#%E5%B0%86%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E5%86%99%E5%85%A5hdfs%E6%96%87%E4%BB%B6%E4%B8%AD" rel="nofollow">将本地文件内容写入HDFS文件中</a></li>
<li><a href="#%E8%AF%BB%E5%8F%96hdfs%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9" rel="nofollow">读取HDFS中的文件内容</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E4%BA%8Cpropertiesutil%E5%B7%A5%E5%85%B7%E7%B1%BB" rel="nofollow">二、PropertiesUtil工具类</a></li>
<li><a href="#%E4%B8%89remoteutil%E5%B7%A5%E5%85%B7%E7%B1%BB" rel="nofollow">三、RemoteUtil工具类</a></li>
<li><a href="#%E5%9B%9B%E5%AF%B9%E5%B7%A5%E5%85%B7%E7%B1%BB%E7%9A%84%E6%B5%8B%E8%AF%95" rel="nofollow">四、对工具类的测试</a></li>
<li><a href="#%E4%BA%94%E9%80%9A%E8%BF%87web%E6%93%8D%E4%BD%9Chdfs" rel="nofollow">五、通过Web操作HDFS</a><ul>
<li><ul>
<li><a href="#%E4%B8%8A%E4%BC%A0%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E8%87%B3hdfs" rel="nofollow">上传本地文件至HDFS</a></li>
<li><a href="#%E5%B1%95%E7%A4%BAhdfs%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6" rel="nofollow">展示hdfs文件系统中的文件</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>


<h3 id="一hdfsutil工具类补充">一、HDFSUtil工具类补充</h3>



<h5 id="删除文件">删除文件</h5>



<pre class="prettyprint"><code class=" hljs java">    <span class="hljs-javadoc">/**
     * 删除某一路径
     *<span class="hljs-javadoctag"> @param</span> path 需要删除的路径
     *<span class="hljs-javadoctag"> @param</span> recursive 指定为true删除目录中全部文件，false时可以删除空目录和单个文件
     *<span class="hljs-javadoctag"> @return</span>
     */</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">delete</span>(String path, <span class="hljs-keyword">boolean</span> recursive) {
        <span class="hljs-keyword">boolean</span> result = <span class="hljs-keyword">false</span>;
        <span class="hljs-keyword">if</span>(recursive) {
            <span class="hljs-keyword">try</span> {
                result = fs.delete(<span class="hljs-keyword">new</span> Path(path), <span class="hljs-keyword">true</span>);
            } <span class="hljs-keyword">catch</span> (Exception e) {
                e.printStackTrace();
                result = <span class="hljs-keyword">false</span>;
            }
            <span class="hljs-keyword">return</span> result;
        }<span class="hljs-keyword">else</span>{
            <span class="hljs-keyword">try</span> {
                result = fs.delete(<span class="hljs-keyword">new</span> Path(path), <span class="hljs-keyword">false</span>);
            } <span class="hljs-keyword">catch</span> (Exception e) {
                e.printStackTrace();
                result = <span class="hljs-keyword">false</span>;
            } 
            <span class="hljs-keyword">return</span> result;
        }
    }</code></pre>



<h5 id="获取某一路径下的文件信息">获取某一路径下的文件信息</h5>



<pre class="prettyprint"><code class=" hljs java"><span class="hljs-javadoc">/**
     * 获得某一路径下的文件信息
     *<span class="hljs-javadoctag"> @param</span> path 待查看路径
     *<span class="hljs-javadoctag"> @return</span> 文件信息列表-包含文件类型，文件大小，所有者，所在组，文件名称
     */</span>
    <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title">getFileInfo</span>(String path){
        List&lt;String&gt; infos = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();
        <span class="hljs-keyword">try</span> {
            <span class="hljs-comment">// 通过FileSystem获得某一路径下的文件状态列表</span>
            FileStatus[] fileStatus = fs.listStatus(<span class="hljs-keyword">new</span> Path(path));
            <span class="hljs-keyword">for</span> (FileStatus temp : fileStatus) {
                String info = <span class="hljs-string">""</span>;
                <span class="hljs-comment">// 判断文件类型</span>
                <span class="hljs-keyword">if</span> (temp.isDirectory()) {
                    info += <span class="hljs-string">"目录\t"</span> + <span class="hljs-string">"0"</span> + <span class="hljs-string">"\t"</span>;
                }<span class="hljs-keyword">else</span> {
                    info += <span class="hljs-string">"文件\t"</span> + sizeFormat(temp.getLen()) + <span class="hljs-string">"\t"</span>;
                }
                <span class="hljs-comment">// 拼接文件信息</span>
                info += temp.getOwner() + <span class="hljs-string">"\t"</span> + temp.getGroup() + <span class="hljs-string">"\t"</span> + temp.getPath().getName();
                infos.add(info);
            }
        } <span class="hljs-keyword">catch</span> (Exception e) {
            e.printStackTrace();
        }
        <span class="hljs-keyword">return</span> infos;
    }</code></pre>



<h5 id="文件大小单位换算">文件大小单位换算</h5>



<pre class="prettyprint"><code class=" hljs java"><span class="hljs-javadoc">/**
     * 文件大小单位换算
     *<span class="hljs-javadoctag"> @param</span> length 默认获得的文件大小单位为Byte-字节
     *<span class="hljs-javadoctag"> @return</span> 使用1024进行换算
     */</span>
    <span class="hljs-keyword">private</span> String <span class="hljs-title">sizeFormat</span>(<span class="hljs-keyword">long</span> length) {
        <span class="hljs-keyword">long</span> result = length;
        <span class="hljs-comment">// 不足1024则单位为Byte</span>
        <span class="hljs-keyword">if</span> (result / <span class="hljs-number">1024</span> == <span class="hljs-number">0</span>) {
            <span class="hljs-keyword">return</span> result + <span class="hljs-string">"B"</span>;
        }<span class="hljs-keyword">else</span> {
            result /= <span class="hljs-number">1024</span>;
            <span class="hljs-comment">// 不足1024*1024则单位为KB，否则为MB</span>
            <span class="hljs-keyword">if</span> (result / <span class="hljs-number">1024</span> == <span class="hljs-number">0</span>) {
                <span class="hljs-keyword">return</span> result + <span class="hljs-string">"KB"</span>;
            }<span class="hljs-keyword">else</span> {
                <span class="hljs-keyword">return</span> result / <span class="hljs-number">1024</span> + <span class="hljs-string">"MB"</span>;
            }
        }
    }</code></pre>



<h5 id="将本地文件内容写入hdfs文件中">将本地文件内容写入HDFS文件中</h5>

<ul>
<li>create()：覆盖原文件</li>
<li>append()：直接在原文件基础上进行追加</li>
</ul>



<pre class="prettyprint"><code class="language-\ hljs java"><span class="hljs-javadoc">/**
     * 将本地磁盘文件内容写入HDFS文件中
     *<span class="hljs-javadoctag"> @param</span> src 源文件路径
     *<span class="hljs-javadoctag"> @param</span> parentDir 目标文件父级目录
     *<span class="hljs-javadoctag"> @param</span> fileName 目标文件名称
     *<span class="hljs-javadoctag"> @param</span> overwrite 是否覆盖写入
     *<span class="hljs-javadoctag"> @return</span>
     */</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">write</span>(String src,String parentDir,String fileName,<span class="hljs-keyword">boolean</span> overwrite) {
        <span class="hljs-comment">// 判断源文件是否存在，如不存在则直接返回</span>
        <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">new</span> File(src).exists()) {
            System.out.println(<span class="hljs-string">"源文件不存在"</span>);
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;
        }
        FSDataOutputStream fsDataOutputStream = <span class="hljs-keyword">null</span>;
        <span class="hljs-keyword">boolean</span> isDir = <span class="hljs-keyword">false</span>;
        <span class="hljs-keyword">try</span> {
            <span class="hljs-comment">// 由于HDFS的特殊性，必须保证父级路径是一个目录，而不能只判断是否存在</span>
            isDir = fs.isDirectory(<span class="hljs-keyword">new</span> Path(parentDir));
        } <span class="hljs-keyword">catch</span> (Exception e) {
            e.printStackTrace();
        }
        <span class="hljs-keyword">if</span> (!isDir) {<span class="hljs-comment">// false -&gt; 可能为文件也可能不存在</span>
            <span class="hljs-keyword">try</span> {
                <span class="hljs-comment">// 尝试创建父级目录</span>
                fs.mkdirs(<span class="hljs-keyword">new</span> Path(parentDir));
            } <span class="hljs-keyword">catch</span> (Exception e) {
                <span class="hljs-comment">// 出现异常说明该路径下已经存在了文件 - 与目标文件夹文件相同</span>
                e.printStackTrace();
                System.out.println(<span class="hljs-string">"该路径不可用"</span>);
                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;
            }
        }
        Path destPath = <span class="hljs-keyword">new</span> Path(parentDir + File.separator + fileName);
        <span class="hljs-keyword">if</span> (overwrite) {
            <span class="hljs-keyword">try</span> {
                <span class="hljs-comment">// 覆盖写入时使用create方法进行创建，指定覆盖参数为true</span>
                fsDataOutputStream = fs.create(destPath,<span class="hljs-keyword">true</span>);
            } <span class="hljs-keyword">catch</span> (Exception e) {
                e.printStackTrace();
            }
        }<span class="hljs-keyword">else</span> {
            <span class="hljs-keyword">try</span> {
                <span class="hljs-comment">// 保证文件一定存在，如果已经存在返回false，不会重新创建</span>
                fs.createNewFile(destPath);
                <span class="hljs-comment">// 追加写入时使用append方法进行创建</span>
                fsDataOutputStream = fs.append(destPath);
            } <span class="hljs-keyword">catch</span> (Exception e) {
                e.printStackTrace();
            }
        }
        <span class="hljs-comment">// 初始化输入流，指定编码</span>
        BufferedReader bufferedReader = <span class="hljs-keyword">null</span>;
        Writer writer = <span class="hljs-keyword">null</span>;
        <span class="hljs-keyword">try</span> {
            bufferedReader = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-keyword">new</span> File(src)), <span class="hljs-string">"UTF-8"</span>));
            writer = <span class="hljs-keyword">new</span> OutputStreamWriter(fsDataOutputStream, <span class="hljs-string">"UTF-8"</span>);
        } <span class="hljs-keyword">catch</span> (Exception e) {
            e.printStackTrace();
        }
        BufferedWriter bufferedWriter = <span class="hljs-keyword">new</span> BufferedWriter(writer);
        String temp = <span class="hljs-string">""</span>;
        <span class="hljs-keyword">int</span> line = <span class="hljs-number">0</span>;
        <span class="hljs-keyword">try</span> {
            <span class="hljs-keyword">while</span>((temp = bufferedReader.readLine()) != <span class="hljs-keyword">null</span>) {
                bufferedWriter.write(temp);
                bufferedWriter.newLine();
                line ++;
                <span class="hljs-comment">// 每一千行写入一次数据</span>
                <span class="hljs-keyword">if</span> (line % <span class="hljs-number">1000</span> == <span class="hljs-number">0</span>) {
                    bufferedWriter.flush();
                }
            }
        } <span class="hljs-keyword">catch</span> (IOException e) {
            e.printStackTrace();
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;
        }
        <span class="hljs-keyword">try</span> {
            bufferedWriter.flush();
            bufferedWriter.close();
            writer.close();
            bufferedReader.close();
            fsDataOutputStream.close();
        } <span class="hljs-keyword">catch</span> (IOException e) {
            e.printStackTrace();
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;
        }
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;
    }</code></pre>



<h5 id="读取hdfs中的文件内容">读取HDFS中的文件内容</h5>



<pre class="prettyprint"><code class=" hljs java"><span class="hljs-javadoc">/**
     * 从指定文件中读取数据
     *<span class="hljs-javadoctag"> @param</span> path HDFS路径
     */</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">read</span>(String path) {
        <span class="hljs-keyword">try</span> {
            <span class="hljs-comment">// 使用open方法获得一个输入流</span>
            FSDataInputStream fsDataInputStream =  fs.open(<span class="hljs-keyword">new</span> Path(path));
            <span class="hljs-comment">// 使用缓冲流读取文件内容</span>
            BufferedReader bufferedReader = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(fsDataInputStream, <span class="hljs-string">"UTF-8"</span>));
            String temp = <span class="hljs-string">""</span>;
            <span class="hljs-keyword">while</span> ((temp = bufferedReader.readLine()) != <span class="hljs-keyword">null</span>) {
                System.out.println(temp);
            }
            bufferedReader.close();
            fsDataInputStream.close();
        } <span class="hljs-keyword">catch</span> (Exception e) {
            e.printStackTrace();
        }
    }</code></pre>



<h3 id="二propertiesutil工具类">二、PropertiesUtil工具类</h3>

<p>此工具类作用是获取properties中的配置</p>



<pre class="prettyprint"><code class=" hljs java"><span class="hljs-keyword">import</span> java.io.IOException;
<span class="hljs-keyword">import</span> java.util.Properties;

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PropertiesUtil</span> {</span>

    <span class="hljs-keyword">private</span> String fileName;
    <span class="hljs-keyword">private</span> Properties properties = <span class="hljs-keyword">new</span> Properties();

    <span class="hljs-keyword">public</span> <span class="hljs-title">PropertiesUtil</span>(String fileName) {
        <span class="hljs-keyword">this</span>.fileName = fileName;
        open();
    }

    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">open</span>() {
        <span class="hljs-keyword">try</span> {
            properties.load(Thread.currentThread().getContextClassLoader().getResourceAsStream(fileName));
        } <span class="hljs-keyword">catch</span> (IOException e) {
            e.printStackTrace();
        }
    }

    <span class="hljs-keyword">public</span> String <span class="hljs-title">readPropertyByKey</span>(String key) {
        <span class="hljs-keyword">return</span> properties.getProperty(key);
    }

}
</code></pre>



<h3 id="三remoteutil工具类">三、RemoteUtil工具类</h3>

<p>此工具类的作用是直接通过传入hdfs语句对hdfs进行操作</p>

<p>注意事项：</p>

<ol>
<li>通过SSH的工具类实现命令执行时需要将命令的全路径写出</li>
<li>远程登录需要导入ganymed-ssh2.jar包</li>
</ol>



<pre class="prettyprint"><code class=" hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;
<span class="hljs-keyword">import</span> java.io.IOException;
<span class="hljs-keyword">import</span> java.io.InputStream;
<span class="hljs-keyword">import</span> java.io.InputStreamReader;
<span class="hljs-keyword">import</span> org.apache.commons.lang.StringUtils;
<span class="hljs-keyword">import</span> ch.ethz.ssh2.Connection;
<span class="hljs-keyword">import</span> ch.ethz.ssh2.Session;
<span class="hljs-keyword">import</span> ch.ethz.ssh2.StreamGobbler;

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RemoteUtil</span> {</span>

    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String DEFAULTCHART = <span class="hljs-string">"UTF-8"</span>;
    <span class="hljs-keyword">private</span> Connection conn;
    <span class="hljs-keyword">private</span> String host;
    <span class="hljs-keyword">private</span> String userName;
    <span class="hljs-keyword">private</span> String userPwd;

    <span class="hljs-keyword">public</span> <span class="hljs-title">RemoteUtil</span>(String host, String userName, String userPwd) {
        <span class="hljs-keyword">this</span>.host = host;
        <span class="hljs-keyword">this</span>.userName = userName;
        <span class="hljs-keyword">this</span>.userPwd = userPwd;
    }
    <span class="hljs-comment">// 登录</span>
    <span class="hljs-keyword">public</span> Boolean <span class="hljs-title">login</span>() {
        <span class="hljs-keyword">boolean</span> flg = <span class="hljs-keyword">false</span>;
        <span class="hljs-keyword">try</span> {
            conn = <span class="hljs-keyword">new</span> Connection(host);
            conn.connect();<span class="hljs-comment">// 连接</span>
            flg = conn.authenticateWithPassword(userName, userPwd);<span class="hljs-comment">// 认证</span>
        } <span class="hljs-keyword">catch</span> (IOException e) {
            e.printStackTrace();
        }
        <span class="hljs-keyword">return</span> flg;
    }
    <span class="hljs-comment">// 执行操作</span>
    <span class="hljs-keyword">public</span> String <span class="hljs-title">execute</span>(String cmd) {
        String result = <span class="hljs-string">""</span>;
        <span class="hljs-keyword">try</span> {
            <span class="hljs-keyword">if</span> (login()) {
                System.out.println(<span class="hljs-string">"登录成功"</span>);
                Session session = conn.openSession();<span class="hljs-comment">// 打开一个会话</span>
                session.execCommand(cmd);<span class="hljs-comment">// 执行命令</span>
                <span class="hljs-comment">// session.getStdout():获得session标准输出</span>
                result = processStdout(session.getStdout(), DEFAULTCHART);
                <span class="hljs-comment">// 如果未得到标准输出为空，说明脚本执行出错了</span>
                <span class="hljs-keyword">if</span> (StringUtils.isBlank(result)) {
                    result = processStdout(session.getStderr(), DEFAULTCHART);
                }
                conn.close();
                session.close();
            }
        } <span class="hljs-keyword">catch</span> (IOException e) {
            e.printStackTrace();
        }
        <span class="hljs-keyword">return</span> result;
    }
    <span class="hljs-comment">// 将从服务器得到的数据包装成String返回</span>
    <span class="hljs-keyword">private</span> String <span class="hljs-title">processStdout</span>(InputStream in, String charset) {
        <span class="hljs-comment">// 接收目标服务器上的控制台返回结果</span>
        InputStream stdout = <span class="hljs-keyword">new</span> StreamGobbler(in);
        StringBuffer buffer = <span class="hljs-keyword">new</span> StringBuffer();
        <span class="hljs-keyword">try</span> {
            <span class="hljs-comment">// 将控制台的返回结果包装成BufferedReader</span>
            BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(stdout, charset));
            String line = <span class="hljs-keyword">null</span>;
            <span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-keyword">null</span>) {
                buffer.append(line + <span class="hljs-string">"\n"</span>);
            }
            br.close();
        } <span class="hljs-keyword">catch</span> (Exception e) {
            e.printStackTrace();
        }
        <span class="hljs-keyword">return</span> buffer.toString();
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCharset</span>(String charset) {
        DEFAULTCHART = charset;
    }

}
</code></pre>



<h3 id="四对工具类的测试">四、对工具类的测试</h3>

<ul>
<li><p>配置文件system.properties</p>

<pre class="prettyprint"><code class=" hljs ini"><span class="hljs-setting">hostName=<span class="hljs-value">SZ01</span></span>
<span class="hljs-setting">hdfsPort=<span class="hljs-value"><span class="hljs-number">8020</span></span></span>
<span class="hljs-setting">hadoopUser=<span class="hljs-value">bigdata</span></span>
<span class="hljs-setting">hadoopPwd=<span class="hljs-value">bigdata</span></span>
<span class="hljs-setting">hadoopBinHome=<span class="hljs-value">/home/bigdata/hadoop-<span class="hljs-number">2.7</span>.<span class="hljs-number">2</span>/bin</span></span>
<span class="hljs-setting">userDataDir=<span class="hljs-value">/input/user</span></span></code></pre></li>
<li><p>测试类UtilTest.java</p>

<pre class="prettyprint"><code class=" hljs avrasm">import java<span class="hljs-preprocessor">.util</span><span class="hljs-preprocessor">.List</span><span class="hljs-comment">;</span>

import <span class="hljs-keyword">com</span><span class="hljs-preprocessor">.sand</span><span class="hljs-preprocessor">.util</span><span class="hljs-preprocessor">.HDFSUtil</span><span class="hljs-comment">;</span>
import <span class="hljs-keyword">com</span><span class="hljs-preprocessor">.sand</span><span class="hljs-preprocessor">.util</span><span class="hljs-preprocessor">.PropertiesUtil</span><span class="hljs-comment">;</span>
import <span class="hljs-keyword">com</span><span class="hljs-preprocessor">.sand</span><span class="hljs-preprocessor">.util</span><span class="hljs-preprocessor">.RemoteUtil</span><span class="hljs-comment">;</span>

public class UtilTest {

public static void main(String[] args) {
    // TODO 工具类测试类
    PropertiesUtil propertiesUtil = new PropertiesUtil(<span class="hljs-string">"system.properties"</span>)<span class="hljs-comment">;</span>
    String host = propertiesUtil<span class="hljs-preprocessor">.readPropertyByKey</span>(<span class="hljs-string">"hostName"</span>)<span class="hljs-comment">;</span>
    String userName = propertiesUtil<span class="hljs-preprocessor">.readPropertyByKey</span>(<span class="hljs-string">"hadoopUser"</span>)<span class="hljs-comment">;</span>
    String userPwd = propertiesUtil<span class="hljs-preprocessor">.readPropertyByKey</span>(<span class="hljs-string">"hadoopPwd"</span>)<span class="hljs-comment">;</span>
    // 使用Java API的方式获取文件信息
    HDFSUtil hdfsUtil = new HDFSUtil(host)<span class="hljs-comment">;</span>
    // 输出根目录下的内容信息
    List&lt;String&gt; list = hdfsUtil<span class="hljs-preprocessor">.getFileInfo</span>(<span class="hljs-string">"/"</span>)<span class="hljs-comment">;</span>
    for (String string : list) {
        System<span class="hljs-preprocessor">.out</span><span class="hljs-preprocessor">.println</span>(string)<span class="hljs-comment">;</span>
    }
    // 远程登录至Hadoop集群环境，通过命令执行取回信息
    RemoteUtil remoteUtil = new RemoteUtil(host, userName, userPwd)<span class="hljs-comment">;</span>
    String bin = propertiesUtil<span class="hljs-preprocessor">.readPropertyByKey</span>(<span class="hljs-string">"hadoopBinHome"</span>)<span class="hljs-comment">;</span>
    // 执行时可以使用命令全路径
    String result = remoteUtil<span class="hljs-preprocessor">.execute</span>(bin + <span class="hljs-string">"/hdfs dfs -ls /"</span>)<span class="hljs-comment">;</span>
    System<span class="hljs-preprocessor">.out</span><span class="hljs-preprocessor">.println</span>(result)<span class="hljs-comment">;</span>
    // 如果相关命令所在路径已经在PATH中声明，则可以先source再执行
    // 通过&amp;&amp;可以组合执行多条命令
    result = remoteUtil<span class="hljs-preprocessor">.execute</span>(<span class="hljs-string">"source .bash_profile &amp;&amp; hdfs dfs -ls /"</span>)<span class="hljs-comment">;</span>
    System<span class="hljs-preprocessor">.out</span><span class="hljs-preprocessor">.println</span>(result)<span class="hljs-comment">;</span>
    // System<span class="hljs-preprocessor">.out</span><span class="hljs-preprocessor">.println</span>(result<span class="hljs-preprocessor">.split</span>(<span class="hljs-string">"\n"</span>)[<span class="hljs-number">0</span>])<span class="hljs-comment">;</span>
}

}</code></pre>

<p>运行结果：</p>

<p><img src="https://day08-1253629415.cos.ap-guangzhou.myqcloud.com/1536204532792.png" alt="1536204532792" title=""></p></li>
</ul>



<h3 id="五通过web操作hdfs">五、通过Web操作HDFS</h3>



<h5 id="上传本地文件至hdfs">上传本地文件至HDFS</h5>

<p>upload.jsp</p>



<pre class="prettyprint"><code class=" hljs xml"><span class="vbscript">&lt;%@ page language=<span class="hljs-string">"java"</span> contentType=<span class="hljs-string">"text/html; charset=UTF-8"</span>
    pageEncoding=<span class="hljs-string">"UTF-8"</span>%&gt;</span>
<span class="hljs-doctype">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">html</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">http-equiv</span>=<span class="hljs-value">"Content-Type"</span> <span class="hljs-attribute">content</span>=<span class="hljs-value">"text/html; charset=UTF-8"</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">title</span>&gt;</span>Insert title here<span class="hljs-tag">&lt;/<span class="hljs-title">title</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">body</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">form</span> <span class="hljs-attribute">action</span>=<span class="hljs-value">"UploadServlet"</span> <span class="hljs-attribute">method</span>=<span class="hljs-value">"post"</span> <span class="hljs-attribute">enctype</span>=<span class="hljs-value">"multipart/form-data"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"file"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"data"</span> /&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"submit"</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">"上传"</span> /&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">form</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span></code></pre>

<p>UploadServlet.java</p>



<pre class="prettyprint"><code class=" hljs java"><span class="hljs-keyword">import</span> java.io.File;
<span class="hljs-keyword">import</span> java.io.IOException;
<span class="hljs-keyword">import</span> java.io.PrintWriter;
<span class="hljs-keyword">import</span> java.util.List;
<span class="hljs-keyword">import</span> java.util.UUID;

<span class="hljs-keyword">import</span> javax.servlet.ServletException;
<span class="hljs-keyword">import</span> javax.servlet.annotation.MultipartConfig;
<span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;
<span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;
<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;
<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;
<span class="hljs-keyword">import</span> javax.servlet.http.Part;

<span class="hljs-keyword">import</span> com.sand.util.HDFSUtil;
<span class="hljs-keyword">import</span> com.sand.util.PropertiesUtil;

<span class="hljs-javadoc">/**
 * Servlet implementation class UploadServlet
 */</span>
<span class="hljs-annotation">@WebServlet</span>(<span class="hljs-string">"/UploadServlet"</span>)
<span class="hljs-annotation">@MultipartConfig</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UploadServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> {</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">1</span>L;

    <span class="hljs-javadoc">/**
     *<span class="hljs-javadoctag"> @see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse
     *      response)
     */</span>
    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span>(HttpServletRequest request, HttpServletResponse response)
            <span class="hljs-keyword">throws</span> ServletException, IOException {
        <span class="hljs-comment">// 设置编码</span>
        response.setCharacterEncoding(<span class="hljs-string">"UTF-8"</span>);
        response.setContentType(<span class="hljs-string">"text/plain; charset=UTF-8"</span>);
        <span class="hljs-comment">// 使用Part对象接收文件</span>
        Part part = request.getPart(<span class="hljs-string">"data"</span>);
        <span class="hljs-comment">// 取出文件名(如果需要)</span>
        String path = <span class="hljs-string">"E://userData/"</span>;
        <span class="hljs-comment">// 可以使用自定义的名称，也可以使用UUID</span>
        String fileName = UUID.randomUUID().toString();
        <span class="hljs-comment">// 从登陆信息中获取当前用户的唯一标识</span>
        String userId = <span class="hljs-string">"1"</span>;
        <span class="hljs-comment">// 使用write方法向路径中写入文件</span>
        part.write(path + File.separator + fileName);
        <span class="hljs-comment">// 从配置文件中读取所需参数</span>
        PropertiesUtil propertiesUtil = <span class="hljs-keyword">new</span> PropertiesUtil(<span class="hljs-string">"system.properties"</span>);
        String hostName = propertiesUtil.readPropertyByKey(<span class="hljs-string">"hostName"</span>);
        String userDataDir = propertiesUtil.readPropertyByKey(<span class="hljs-string">"userDataDir"</span>);
        HDFSUtil hdfsUtil = <span class="hljs-keyword">new</span> HDFSUtil(hostName);
        <span class="hljs-comment">// 使用工具类进行上传</span>
        hdfsUtil.upLoad(<span class="hljs-keyword">true</span>, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">new</span> String[]{path + fileName}, userDataDir + userId + <span class="hljs-string">"/"</span> + fileName);
        PrintWriter printWriter = response.getWriter();
        <span class="hljs-comment">// 使用工具类获得文件信息</span>
        List&lt;String&gt; list = hdfsUtil.getFileInfo(userDataDir + userId);
        <span class="hljs-comment">// 将内容输出至页面</span>
        <span class="hljs-keyword">for</span> (String info : list) {
            printWriter.write(info + <span class="hljs-string">"\n"</span>);
        }
        printWriter.flush();
        printWriter.close();
    }

    <span class="hljs-javadoc">/**
     *<span class="hljs-javadoctag"> @see</span> HttpServlet#doPost(HttpServletRequest request, HttpServletResponse
     *      response)
     */</span>
    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span>(HttpServletRequest request, HttpServletResponse response)
            <span class="hljs-keyword">throws</span> ServletException, IOException {
        <span class="hljs-comment">// TODO Auto-generated method stub</span>
        doGet(request, response);
    }

}</code></pre>



<h5 id="展示hdfs文件系统中的文件">展示hdfs文件系统中的文件</h5>

<p>从根目录开始展示，当目标是目录时，可以继续点击展示其中的内容</p>

<p>CheckMsgServlet.java</p>



<pre class="prettyprint"><code class=" hljs java"><span class="hljs-keyword">import</span> java.io.IOException;
<span class="hljs-keyword">import</span> java.util.List;

<span class="hljs-keyword">import</span> javax.servlet.ServletException;
<span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;
<span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;
<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;
<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;

<span class="hljs-keyword">import</span> com.sand.util.HDFSUtil;
<span class="hljs-keyword">import</span> com.sand.util.PropertiesUtil;

<span class="hljs-javadoc">/**
 * Servlet implementation class CheckMsgServlet
 */</span>
<span class="hljs-annotation">@WebServlet</span>(<span class="hljs-string">"/CheckMsgServlet"</span>)
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CheckMsgServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> {</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">1</span>L;

    <span class="hljs-keyword">public</span> <span class="hljs-title">CheckMsgServlet</span>() {
        <span class="hljs-keyword">super</span>();
    }

    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span>(HttpServletRequest request, HttpServletResponse response)
            <span class="hljs-keyword">throws</span> ServletException, IOException {
        String method = request.getParameter(<span class="hljs-string">"method"</span>);
        System.out.println(method);
        response.setCharacterEncoding(<span class="hljs-string">"UTF-8"</span>);
        response.setContentType(<span class="hljs-string">"text/plain; charset=UTF-8"</span>);
        PropertiesUtil propertiesUtil = <span class="hljs-keyword">new</span> PropertiesUtil(<span class="hljs-string">"system.properties"</span>);
        String host = propertiesUtil.readPropertyByKey(<span class="hljs-string">"hostName"</span>);
        String userName = propertiesUtil.readPropertyByKey(<span class="hljs-string">"hadoopUser"</span>);
        String userPwd = propertiesUtil.readPropertyByKey(<span class="hljs-string">"hadoopPwd"</span>);
        <span class="hljs-comment">// 使用Java API的方式获取文件信息</span>
        HDFSUtil hdfsUtil = <span class="hljs-keyword">new</span> HDFSUtil(host);
        <span class="hljs-comment">//PrintWriter printWriter = response.getWriter();</span>
        List&lt;String&gt; list = <span class="hljs-keyword">null</span>;
        <span class="hljs-keyword">if</span> (method == <span class="hljs-keyword">null</span>) {
            list = hdfsUtil.getFileInfo(<span class="hljs-string">"/"</span>);
            request.setAttribute(<span class="hljs-string">"infoList"</span>, list);
            request.getRequestDispatcher(<span class="hljs-string">"show.jsp"</span>).forward(request, response);
            <span class="hljs-comment">/*
             * for (String info : list) { printWriter.write(info + "\n"); }
             */</span>
        }<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">"dir"</span>.equals(method)){
            String path = request.getParameter(<span class="hljs-string">"path"</span>);
            System.out.println(path);
            list = hdfsUtil.getFileInfo(path);
            request.setAttribute(<span class="hljs-string">"infoList"</span>, list);
            request.getRequestDispatcher(<span class="hljs-string">"show.jsp"</span>).forward(request, response);

        }
    }

    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span>(HttpServletRequest request, HttpServletResponse response)
            <span class="hljs-keyword">throws</span> ServletException, IOException {
        <span class="hljs-comment">// TODO Auto-generated method stub</span>
        doGet(request, response);
    }

}</code></pre>

<p>show.jsp</p>

<p>用到jstl标签库，需要导入jstl的jar包</p>



<pre class="prettyprint"><code class=" hljs xml"><span class="vbscript">&lt;%@ page language=<span class="hljs-string">"java"</span> contentType=<span class="hljs-string">"text/html; charset=UTF-8"</span>
    pageEncoding=<span class="hljs-string">"UTF-8"</span>%&gt;</span>
    <span class="vbscript">&lt;%@taglib prefix=<span class="hljs-string">"c"</span> uri=<span class="hljs-string">"http://java.sun.com/jsp/jstl/core"</span>%&gt;</span>
<span class="hljs-doctype">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">html</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">http-equiv</span>=<span class="hljs-value">"Content-Type"</span> <span class="hljs-attribute">content</span>=<span class="hljs-value">"text/html; charset=UTF-8"</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">title</span>&gt;</span>Insert title here<span class="hljs-tag">&lt;/<span class="hljs-title">title</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">body</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">c:forEach</span> <span class="hljs-attribute">items</span>=<span class="hljs-value">"${infoList}"</span> <span class="hljs-attribute">var</span>=<span class="hljs-value">"info"</span>&gt;</span>
        ${info}<span class="hljs-tag">&lt;<span class="hljs-title">br</span> /&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">c:forEach</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span></code></pre>

<p>此实现方式较为简单，由于未包装返回项目信息的实体类，所以直接在HDFSUtil中通过判断封装了a标签进行判断跳转</p>

<p>HDFSUtil.java</p>



<pre class="prettyprint"><code class=" hljs java"><span class="hljs-javadoc">/**
     * 获得某一路径下的文件信息
     *<span class="hljs-javadoctag"> @param</span> path 待查看路径
     *<span class="hljs-javadoctag"> @return</span> 文件信息列表-包含文件类型，文件大小，所有者，所在组，文件名称
     */</span>
    <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title">getFileInfo</span>(String path){
        List&lt;String&gt; infos = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();
        <span class="hljs-keyword">try</span> {
            <span class="hljs-comment">// 通过FileSystem获得某一路径下的文件状态列表</span>
            FileStatus[] fileStatus = fs.listStatus(<span class="hljs-keyword">new</span> Path(path));
            <span class="hljs-keyword">for</span> (FileStatus temp : fileStatus) {
                String info = <span class="hljs-string">""</span>;
                <span class="hljs-comment">// 判断文件类型</span>
                <span class="hljs-keyword">if</span> (temp.isDirectory()) {
                    info += <span class="hljs-string">"目录\t"</span> + <span class="hljs-string">"0"</span> + <span class="hljs-string">"\t"</span>;
                    info += temp.getOwner() + <span class="hljs-string">"\t"</span> + temp.getGroup() + <span class="hljs-string">"\t"</span> + <span class="hljs-string">"&lt;a href='CheckMsgServlet?method=dir&amp;path="</span> + temp.getPath() + <span class="hljs-string">"'&gt;"</span> + temp.getPath().getName() + <span class="hljs-string">"&lt;/a&gt;"</span>;
                }<span class="hljs-keyword">else</span> {
                    info += <span class="hljs-string">"文件\t"</span> + sizeFormat(temp.getLen()) + <span class="hljs-string">"\t"</span>;
                    info += temp.getOwner() + <span class="hljs-string">"\t"</span> + temp.getGroup() + <span class="hljs-string">"\t"</span> + temp.getPath().getName();
                }
                <span class="hljs-comment">// 拼接文件信息</span>
                <span class="hljs-comment">//info += temp.getOwner() + "\t" + temp.getGroup() + "\t" + temp.getPath().getName();</span>
                infos.add(info);
            }
        } <span class="hljs-keyword">catch</span> (Exception e) {
            e.printStackTrace();
        }
        <span class="hljs-keyword">return</span> infos;
    }</code></pre>

<p><img src="https://day08-1253629415.cos.ap-guangzhou.myqcloud.com/1536205707037.png" alt="1536205707037" title=""></p>

<p><img src="https://day08-1253629415.cos.ap-guangzhou.myqcloud.com/1536205717539.png" alt="1536205717539" title=""></p>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>