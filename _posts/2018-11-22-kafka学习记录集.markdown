---
layout:     post
title:      kafka学习记录集
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<h1 id="kafka笔记一">kafka笔记一</h1>

<p>（本人是kafka小白，想把自己的笔记记录下来，慢慢学习，逐渐成长）</p>

<p>一、首先安装kafka集群，最近最新版本是1.0，下载kafka1.0安装包，解压缩，修改配置文件，安装，测试，详见另一篇博客笔记：kafka集群安装部署 <br>
二、完成kafka消息订阅三剑客：producer生产者、broker中间件、consumer消费者 <br>
三、利用kafkaAPI编写生产消费demo</p>

<hr>

<p>（1）建立maven项目，pom文件中添加kafka依赖包</p>



<pre class="prettyprint"><code class=" hljs xml">        <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>org.apache.kafka<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>kafka-clients<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>1.0.0<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span></code></pre>

<p>（2）写生产者程序</p>



<pre class="prettyprint"><code class=" hljs avrasm">import org<span class="hljs-preprocessor">.apache</span><span class="hljs-preprocessor">.kafka</span><span class="hljs-preprocessor">.clients</span><span class="hljs-preprocessor">.producer</span><span class="hljs-preprocessor">.KafkaProducer</span><span class="hljs-comment">;</span>
import org<span class="hljs-preprocessor">.apache</span><span class="hljs-preprocessor">.kafka</span><span class="hljs-preprocessor">.clients</span><span class="hljs-preprocessor">.producer</span><span class="hljs-preprocessor">.ProducerRecord</span><span class="hljs-comment">;</span>
import org<span class="hljs-preprocessor">.apache</span><span class="hljs-preprocessor">.kafka</span><span class="hljs-preprocessor">.clients</span><span class="hljs-preprocessor">.producer</span><span class="hljs-preprocessor">.Producer</span><span class="hljs-comment">;</span>

import java<span class="hljs-preprocessor">.util</span><span class="hljs-preprocessor">.Properties</span><span class="hljs-comment">;</span>

public class kafka_producer {
    public static void main(String[] args){
        //配置信息
        Properties props = new Properties()<span class="hljs-comment">;</span>
        props<span class="hljs-preprocessor">.put</span>(<span class="hljs-string">"bootstrap.servers"</span>, <span class="hljs-string">"写上自己的集群IP：port"</span>)
        props<span class="hljs-preprocessor">.put</span>(<span class="hljs-string">"acks"</span>, <span class="hljs-string">"all"</span>)<span class="hljs-comment">;</span>
        props<span class="hljs-preprocessor">.put</span>(<span class="hljs-string">"retries"</span>, <span class="hljs-number">0</span>)<span class="hljs-comment">;</span>
        props<span class="hljs-preprocessor">.put</span>(<span class="hljs-string">"batch.size"</span>, <span class="hljs-number">16384</span>)<span class="hljs-comment">;</span>
        props<span class="hljs-preprocessor">.put</span>(<span class="hljs-string">"linger.ms"</span>, <span class="hljs-number">1</span>)<span class="hljs-comment">;</span>
        props<span class="hljs-preprocessor">.put</span>(<span class="hljs-string">"buffer.memory"</span>, <span class="hljs-number">33554432</span>)<span class="hljs-comment">;</span>
        props<span class="hljs-preprocessor">.put</span>(<span class="hljs-string">"key.serializer"</span>, <span class="hljs-string">"org.apache.kafka.common.serialization.StringSerializer"</span>)<span class="hljs-comment">;</span>
        props<span class="hljs-preprocessor">.put</span>(<span class="hljs-string">"value.serializer"</span>, <span class="hljs-string">"org.apache.kafka.common.serialization.StringSerializer"</span>)<span class="hljs-comment">;</span>
        //实例化生产者对象
        Producer&lt;String, String&gt; producer = new KafkaProducer&lt;String,String&gt;(props)<span class="hljs-comment">;</span>
        for(int i=<span class="hljs-number">0</span><span class="hljs-comment">;i&lt;=50;i++){</span>
            String s = <span class="hljs-string">"send message : "</span>+i<span class="hljs-comment">;</span>
            producer<span class="hljs-preprocessor">.send</span>(new ProducerRecord&lt;String,String&gt;(<span class="hljs-string">"test1"</span>,Integer<span class="hljs-preprocessor">.toString</span>(i), s))<span class="hljs-comment">;</span>
        }

        producer<span class="hljs-preprocessor">.close</span>()<span class="hljs-comment">;</span>
    }
}
</code></pre>

<p>（3）现在在后端切到kafka安装目录的bin目录下，执行kafka的消费者命令</p>



<pre class="prettyprint"><code class=" hljs lasso"><span class="hljs-built_in">.</span>/kafka<span class="hljs-attribute">-console</span><span class="hljs-attribute">-consumer</span><span class="hljs-built_in">.</span>sh <span class="hljs-subst">--</span>bootstrap<span class="hljs-attribute">-server</span> 你的ip:port <span class="hljs-subst">--</span>topic 你的topic <span class="hljs-subst">--</span>from<span class="hljs-attribute">-beginning</span></code></pre>

<p>执行生产者程序，观察到后端kafka服务中consumer在消费消息。</p>

<blockquote>
  <p>注：保证topic一致，保证kafka集群正常启动。</p>
</blockquote>

<p>（4）消费者demo</p>



<pre class="prettyprint"><code class=" hljs avrasm">import org<span class="hljs-preprocessor">.apache</span><span class="hljs-preprocessor">.kafka</span><span class="hljs-preprocessor">.clients</span><span class="hljs-preprocessor">.consumer</span><span class="hljs-preprocessor">.ConsumerRecord</span><span class="hljs-comment">;</span>
import org<span class="hljs-preprocessor">.apache</span><span class="hljs-preprocessor">.kafka</span><span class="hljs-preprocessor">.clients</span><span class="hljs-preprocessor">.consumer</span><span class="hljs-preprocessor">.ConsumerRecords</span><span class="hljs-comment">;</span>
import org<span class="hljs-preprocessor">.apache</span><span class="hljs-preprocessor">.kafka</span><span class="hljs-preprocessor">.clients</span><span class="hljs-preprocessor">.consumer</span><span class="hljs-preprocessor">.KafkaConsumer</span><span class="hljs-comment">;</span>

import java<span class="hljs-preprocessor">.util</span><span class="hljs-preprocessor">.Arrays</span><span class="hljs-comment">;</span>
import java<span class="hljs-preprocessor">.util</span><span class="hljs-preprocessor">.Properties</span><span class="hljs-comment">;</span>

public class kafka_consumer {
    public static void main(String[] args){

        Properties props = new Properties()<span class="hljs-comment">;</span>
        props<span class="hljs-preprocessor">.put</span>(<span class="hljs-string">"bootstrap.servers"</span>, <span class="hljs-string">"your ip:port"</span>)
        props<span class="hljs-preprocessor">.put</span>(<span class="hljs-string">"group.id"</span>, <span class="hljs-string">"my_group"</span>)<span class="hljs-comment">;</span>
        props<span class="hljs-preprocessor">.put</span>(<span class="hljs-string">"enable.auto.commit"</span>, <span class="hljs-string">"true"</span>)<span class="hljs-comment">;</span>
        props<span class="hljs-preprocessor">.put</span>(<span class="hljs-string">"auto.commit.interval.ms"</span>, <span class="hljs-string">"1000"</span>)<span class="hljs-comment">;</span>
        props<span class="hljs-preprocessor">.put</span>(<span class="hljs-string">"key.deserializer"</span>, <span class="hljs-string">"org.apache.kafka.common.serialization.StringDeserializer"</span>)<span class="hljs-comment">;</span>
        props<span class="hljs-preprocessor">.put</span>(<span class="hljs-string">"value.deserializer"</span>, <span class="hljs-string">"org.apache.kafka.common.serialization.StringDeserializer"</span>)<span class="hljs-comment">;</span>

        KafkaConsumer&lt;String, String&gt; consumer = new KafkaConsumer&lt;String, String&gt;(props)<span class="hljs-comment">;</span>

        consumer<span class="hljs-preprocessor">.subscribe</span>(Arrays<span class="hljs-preprocessor">.asList</span>(<span class="hljs-string">"test1"</span>))<span class="hljs-comment">;</span>

        while (true) {
            ConsumerRecords&lt;String, String&gt; records = consumer<span class="hljs-preprocessor">.poll</span>(<span class="hljs-number">100</span>)<span class="hljs-comment">;</span>
            for (ConsumerRecord&lt;String, String&gt; record : records)
                System<span class="hljs-preprocessor">.out</span><span class="hljs-preprocessor">.printf</span>(<span class="hljs-string">"offset = %d, key = %s, value = %s%n"</span>, record<span class="hljs-preprocessor">.offset</span>(), record<span class="hljs-preprocessor">.key</span>(), record<span class="hljs-preprocessor">.value</span>())<span class="hljs-comment">;</span>
        }
    }
}</code></pre>

<blockquote>
  <p>依据kafkaAPI， 简单的实现了生产消费进程，后续会继续学习，共勉！</p>
</blockquote>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>