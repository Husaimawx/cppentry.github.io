---
layout:     post
title:      kafka初探
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，转载注明来源。					https://blog.csdn.net/ligeforrent/article/details/51647764				</div>
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<p style="color:rgb(51,51,51);font-family:Arial, sans-serif;font-size:14px;line-height:20px;">
kafka简介：</p>
<p style="margin-left:30px;color:rgb(51,51,51);font-family:Arial, sans-serif;font-size:14px;line-height:20px;">
<a href="http://www.infoq.com/cn/articles/kafka-analysis-part-1" rel="nofollow" class="external-link" style="color:rgb(53,114,176);text-decoration:none;">kafka简介</a></p>
<p style="color:rgb(51,51,51);font-family:Arial, sans-serif;font-size:14px;line-height:20px;">
kafka demo：</p>
<p style="margin-left:30px;color:rgb(51,51,51);font-family:Arial, sans-serif;font-size:14px;line-height:20px;">
<a href="http://outofmemory.cn/code-snippet/33051/java-kafka-producer-consumer-example" rel="nofollow" class="external-link" style="color:rgb(53,114,176);text-decoration:none;">kafka demo</a></p>
<p style="color:rgb(51,51,51);font-family:Arial, sans-serif;font-size:14px;line-height:20px;">
我的实践：</p>
<p style="margin-left:30px;color:rgb(51,51,51);font-family:Arial, sans-serif;font-size:14px;line-height:20px;">
</p>
<p style="margin-left:30px;color:rgb(51,51,51);font-family:Arial, sans-serif;font-size:14px;line-height:20px;">
公司的kafka采用maven管理，Spring自动装载。在实现kafka时，有两种方式：直接实现和引用实现。</p>
<p style="margin-left:30px;color:rgb(51,51,51);font-family:Arial, sans-serif;font-size:14px;line-height:20px;">
1. 直接实现：</p>
<p style="margin-left:60px;color:rgb(51,51,51);font-family:Arial, sans-serif;font-size:14px;line-height:20px;">
在maven中引入kafka的依赖后，在类中import ConsumerConnector类。在该类的&lt;bean&gt;中，以&lt;property&gt;的形式定义topicName和subscribeGroup，在类中生成<span style="color:rgb(51,51,51);font-family:Arial, sans-serif;font-size:14px;line-height:20px;">ConsumerConnector</span>。</p>
<p style="margin-left:60px;color:rgb(51,51,51);font-family:Arial, sans-serif;font-size:14px;line-height:20px;">
之后，实现此<span style="color:rgb(51,51,51);font-family:Arial, sans-serif;font-size:14px;line-height:20px;">ConsumerConnector</span>的recvMessage方法（或send方法）。</p>
<p style="margin-left:30px;color:rgb(51,51,51);font-family:Arial, sans-serif;font-size:14px;line-height:20px;">
2. 引用实现：(<strong>不必再类内部给topic等字段赋值, <strong>不必在每个Consumer中生成一次ConsumerConnector</strong></strong>)</p>
<p style="margin-left:60px;color:rgb(51,51,51);font-family:Arial, sans-serif;font-size:14px;line-height:20px;">
在maven中引入kafka的依赖后，在kafka.xml中定义class为<span style="color:rgb(51,51,51);font-family:Arial, sans-serif;font-size:14px;line-height:20px;">ConsumerConnector</span>的&lt;bean&gt;，实现kafka的Consumer和Producer。</p>
<p style="margin-left:60px;color:rgb(51,51,51);font-family:Arial, sans-serif;font-size:14px;line-height:20px;">
之后，在.xml中定义其他Consumer与Producer的bean，指定class为Consumer与Producer的实现类，以&lt;property&gt;的形式定义类中<span style="color:rgb(51,51,51);font-family:Arial, sans-serif;font-size:14px;line-height:20px;">ConsumerConnector</span>的ref，引入上一步生成的实例。</p>
<p style="margin-left:60px;color:rgb(51,51,51);font-family:Arial, sans-serif;font-size:14px;line-height:20px;">
<span style="line-height:1.42857;">在实现类中调用，并实现c<span style="color:rgb(51,51,51);font-family:Arial, sans-serif;font-size:14px;line-height:20px;">onsumerConnector</span>的具体recvMessage方法。</span></p>
<p style="margin-left:60px;color:rgb(51,51,51);font-family:Arial, sans-serif;font-size:14px;line-height:20px;">
<span style="line-height:1.42857;">这种情况下，多个Consumer可以共用一个kafka的ConsumerConnector，只要在kafka.xml中，为多个Consumer指定同一个ConsumerConnector的&lt;property&gt;。</span></p>
<p style="margin-left:30px;color:rgb(51,51,51);font-family:Arial, sans-serif;font-size:14px;line-height:20px;">
</p>
            </div>
                </div>