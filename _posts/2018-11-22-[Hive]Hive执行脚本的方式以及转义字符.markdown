---
layout:     post
title:      [Hive]Hive执行脚本的方式以及转义字符
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/yeweiouyang/article/details/52560116				</div>
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<h1 id="1-hive脚本的执行方式">1. hive脚本的执行方式</h1>

<p>hive脚本的执行方式大致有三种： <br>
1. <code>hive控制台</code>执行； <br>
2. <code>hive -e "SQL"</code>执行； <br>
3. <code>hive -f SQL文件</code>执行；</p>

<p>参考hive的用法</p>



<pre class="prettyprint"><code class="language-bash hljs ">usage: hive
 <span class="hljs-operator">-d</span>,--define &lt;key=value&gt;          Variable subsitution to apply to hive
                                  commands. e.g. <span class="hljs-operator">-d</span> A=B or --define A=B
    --database &lt;databasename&gt;     Specify the database to use
 <span class="hljs-operator">-e</span> &lt;quoted-query-string&gt;         SQL from command line
 <span class="hljs-operator">-f</span> &lt;filename&gt;                    SQL from files
 -H,--help                        Print <span class="hljs-built_in">help</span> information
 -h &lt;hostname&gt;                    connecting to Hive Server on remote host
    --hiveconf &lt;property=value&gt;   Use value <span class="hljs-keyword">for</span> given property
    --hivevar &lt;key=value&gt;         Variable subsitution to apply to hive
                                  commands. e.g. --hivevar A=B
 -i &lt;filename&gt;                    Initialization SQL file
 -p &lt;port&gt;                        connecting to Hive Server on port number
 -S,--silent                      Silent mode <span class="hljs-keyword">in</span> interactive shell
 -v,--verbose                     Verbose mode (<span class="hljs-built_in">echo</span> executed SQL to the
                                  console)</code></pre>

<h2 id="11-hive控制台执行">1.1. <code>hive控制台</code>执行</h2>

<p>顾名思义，是进入hive控制台以后，执行sql脚本，例如：</p>



<pre class="prettyprint"><code class="language-bash hljs ">hive&gt; <span class="hljs-keyword">set</span> mapred.job.queue.name=pms;
hive&gt; select page_name, tpa_name from pms.pms_exps_prepro limit <span class="hljs-number">2</span>;
Total MapReduce jobs = <span class="hljs-number">1</span>
Launching Job <span class="hljs-number">1</span> out of <span class="hljs-number">1</span>
...
Job running <span class="hljs-keyword">in</span>-process (local Hadoop)
<span class="hljs-number">2015</span>-<span class="hljs-number">10</span>-<span class="hljs-number">23</span> <span class="hljs-number">10</span>:<span class="hljs-number">06</span>:<span class="hljs-number">47</span>,<span class="hljs-number">756</span> null map = <span class="hljs-number">100</span>%,  reduce = <span class="hljs-number">0</span>%
<span class="hljs-number">2015</span>-<span class="hljs-number">10</span>-<span class="hljs-number">23</span> <span class="hljs-number">10</span>:<span class="hljs-number">06</span>:<span class="hljs-number">48</span>,<span class="hljs-number">863</span> null map = <span class="hljs-number">23</span>%,  reduce = <span class="hljs-number">0</span>%
<span class="hljs-number">2015</span>-<span class="hljs-number">10</span>-<span class="hljs-number">23</span> <span class="hljs-number">10</span>:<span class="hljs-number">06</span>:<span class="hljs-number">49</span>,<span class="hljs-number">946</span> null map = <span class="hljs-number">38</span>%,  reduce = <span class="hljs-number">0</span>%
<span class="hljs-number">2015</span>-<span class="hljs-number">10</span>-<span class="hljs-number">23</span> <span class="hljs-number">10</span>:<span class="hljs-number">06</span>:<span class="hljs-number">51</span>,<span class="hljs-number">051</span> null map = <span class="hljs-number">72</span>%,  reduce = <span class="hljs-number">0</span>%
<span class="hljs-number">2015</span>-<span class="hljs-number">10</span>-<span class="hljs-number">23</span> <span class="hljs-number">10</span>:<span class="hljs-number">06</span>:<span class="hljs-number">52</span>,<span class="hljs-number">129</span> null map = <span class="hljs-number">100</span>%,  reduce = <span class="hljs-number">0</span>%
Ended Job = job_local1109193547_0001
Execution completed successfully
Mapred Local Task Succeeded . Convert the Join into MapJoin
OK
APP首页   APP首页_价格比京东低
APP首页   APP首页_价格比京东低
Time taken: <span class="hljs-number">14.279</span> seconds
hive&gt; </code></pre>



<h2 id="12-hive-e-sql方式执行">1.2. <code>hive -e "SQL"</code>方式执行</h2>

<p>利用<code>hive -e "SQL"</code>的方式进入hive控制台并直接执行sql脚本，例如：</p>



<pre class="prettyprint"><code class="language-bash hljs ">hive <span class="hljs-operator">-e</span> <span class="hljs-string">"
set mapred.job.queue.name=pms;
set mapred.job.name=[HQL]exps_prepro_query;

select page_name, tpa_name 
from pms.pms_exps_prepro 
limit 2;"</span></code></pre>



<h2 id="13-hive-f-sql文件方式执行">1.3. <code>hive -f SQL文件</code>方式执行</h2>

<p>执行sql文件中的sql脚本，例如：</p>

<p><strong>pms_exps_prepro.sql</strong>文件内容如下：</p>



<pre class="prettyprint"><code class="language-sql hljs "><span class="hljs-operator"><span class="hljs-keyword">set</span> mapred.job.queue.name=pms;</span>
<span class="hljs-operator"><span class="hljs-keyword">set</span> hive.<span class="hljs-keyword">exec</span>.reducers.<span class="hljs-aggregate">max</span>=<span class="hljs-number">48</span>;</span>
<span class="hljs-operator"><span class="hljs-keyword">set</span> mapred.reduce.tasks=<span class="hljs-number">48</span>;</span>
<span class="hljs-operator"><span class="hljs-keyword">set</span> mapred.job.name=[HQL]pms_exps_prepro;</span>

<span class="hljs-operator"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">exists</span> pms.pms_exps_prepro;</span> 
<span class="hljs-operator"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> pms.pms_exps_prepro <span class="hljs-keyword">as</span> 
<span class="hljs-keyword">select</span> 
  a.provinceid,
  a.cityid,
  a.ieversion,
  a.platform,
  <span class="hljs-string">'${date}'</span> <span class="hljs-keyword">as</span> ds
<span class="hljs-keyword">from</span> track_exps a;</span></code></pre>

<p>上述文件中的sql脚本接收一个日期，接收参数写法类似<code>${date}</code>，执行时如下执行：</p>



<pre class="prettyprint"><code class="language-bash hljs ">date=<span class="hljs-number">2015</span>-<span class="hljs-number">10</span>-<span class="hljs-number">22</span>
hive <span class="hljs-operator">-f</span> pms_exps_prepro.sql --hivevar date=<span class="hljs-variable">$date</span></code></pre>



<h1 id="2-hive转义字符的问题">2. hive转义字符的问题</h1>

<p>下面以一个业务场景阐述关于hive转义字符的问题</p>

<blockquote>
  <p>track_exps记录曝光数据，现在小A希望获取2015-10-20有效的曝光数据 <br>
  其中有效的曝光记录是指， <br>
  * <code>relatedinfo</code>字段满足<code>数字.数字.数字.数字.数字</code>的格式， <br>
      例如<code>4.4.5.1080100.1</code></p>
  
  <ul>
  <li><code>extfield1</code>字段满足<code>request-字符串,section-数字</code>的格式， <br>
  例如<code>request-b470805b620900ac492bb892ad7e955e,section-4</code></li>
  </ul>
  
  <p>对于这个问题，小A写出了如下sql脚本：</p>
</blockquote>



<pre class="prettyprint"><code class="language-sql hljs "><span class="hljs-operator"><span class="hljs-keyword">select</span> 
    *
<span class="hljs-keyword">from</span> track_exps
<span class="hljs-keyword">where</span> ds = <span class="hljs-string">'2015-10-20'</span>
  <span class="hljs-keyword">and</span> relatedinfo rlike <span class="hljs-string">'^4.\d+.\d+.\d+.\d+$'</span> 
  <span class="hljs-keyword">and</span> extfield1 rlike <span class="hljs-string">'^request.+section-\d+$'</span>;</span></code></pre>

<p>但是由于正则表达式是被包含在sql里面，所以里面的特殊字符需要转义</p>



<h2 id="21-hive-e-sql的方式执行">2.1. <code>hive -e "SQL"</code>的方式执行</h2>

<p>改动如下：</p>



<pre class="prettyprint"><code class="language-bash hljs ">hive <span class="hljs-operator">-e</span> <span class="hljs-string">"
set mapred.job.queue.name=pms;

explain select 
    cityid
from track_exps
where ds = '2015-10-20'
  and relatedinfo rlike '\\^4\\.\\\d\\+\\.\\\d\\+\\.\\\d\\+\\.\\\d\\+\\$' 
  and extfield1 rlike '\\^request\\.\\+section\\-\\\d\\+\\$';"</span></code></pre>

<p>查看执行计划，可以确定正则表达式解析正确了：</p>



<pre class="prettyprint"><code class="language-bash hljs ">...
predicate:
  expr: ((relatedinfo rlike <span class="hljs-string">'^4.\d+.\d+.\d+.\d+$'</span>) and (extfield1 rlike <span class="hljs-string">'^request.+section-\d+$'</span>))
  <span class="hljs-built_in">type</span>: boolean
...</code></pre>

<p>分析如下：</p>

<blockquote>
  <p>在<code>hive -e "SQL"</code>的执行方式中，<code>"'正则表达式'"</code>，正则表达式先被一个单引号括起来，再被一个双引号括起来的，所以正则表达式里面，<code>\\^</code>的第一个<code>\</code>用来解析第二个<code>\</code>，第二个<code>\</code>才真正起到了转义的作用</p>
</blockquote>



<h2 id="22-hive-f-sql文件的方式执行">2.2. <code>hive -f SQL文件</code>的方式执行</h2>

<p>改动如下：</p>

<p><strong>pms_exps_prepro.sql</strong>文件内容如下：</p>



<pre class="prettyprint"><code class="language-sql hljs "><span class="hljs-operator"><span class="hljs-keyword">select</span> 
    *
<span class="hljs-keyword">from</span> track_exps
<span class="hljs-keyword">where</span> ds = <span class="hljs-string">'2015-10-20'</span>
  <span class="hljs-keyword">and</span> relatedinfo rlike <span class="hljs-string">'\^4\.\\d\+\.\\d\+\.\\d\+\.\\d\+\$'</span> 
  <span class="hljs-keyword">and</span> extfield1 rlike <span class="hljs-string">'\^request\.\+section\-\\d\+\$'</span>;</span></code></pre>

<p>分析如下：</p>

<blockquote>
  <p>不同于<code>hive -e "SQL"</code>的执行方式，因为是sql文件，所以正则表达式只被一个单引号括起来而已，一个<code>\</code>就起到了转义的作用了</p>
</blockquote>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>