---
layout:     post
title:      HBase应用场景、原理与基本架构
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/qq_25371579/article/details/50894145				</div>
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<h1 id="hbase">HBase</h1>

<pre><code>Hbase概述
Hbase物理模型
Hbase数据模型
Hbase基本架构
Hbase应用举例
</code></pre>



<h2 id="1hbase概述">1、HBase概述</h2>

<pre><code>HBase是一个构建在HDFS上的分布式列存储系统；

HBase是Apache Hadoop生态系统中的重要一员，主要用于海量结构化数据存储

从逻辑上讲， HBase将数据按照表、行和列进行存储。
</code></pre>

<p>Hbase是Hadoop生态系统的一个组成部分</p>

<p><img src="http://7xqkk1.com1.z0.glb.clouddn.com/16-3-14/69227354.jpg" alt="" title=""></p>



<h3 id="11hbase与hdfs的对比">1.1、HBase与HDFS的对比</h3>

<pre><code>两者都具有良好的容错性和扩展性，都可以扩展到成百上千个节点；

HDFS适合批处理场景

不支持数据随机查找
不适合增量数据处理
不支持数据更新
</code></pre>



<h3 id="12hbase的特点">1.2、HBase的特点</h3>

<pre><code>大：一个表可以有数十亿行，上百万列；

无模式：每行都有一个可排序的主键和任意多的列，列可以根据需要动态的增加，同一张表中不同的行可以有截然不同的列；

面向列：面向列（族）的存储和权限控制，列（族）独立检索；

稀疏：对于空（ null）的列，并不占用存储空间，表可以设计的非常稀疏；

数据多版本：每个单元中的数据可以有多个版本，默认情况下版本号自动分配，是单元格插入时的时间戳；

数据类型单一： Hbase中的数据都是字符串，没有类型
</code></pre>



<h3 id="13行存储与列存储">1.3、行存储与列存储</h3>

<p>传统行式数据库</p>

<pre><code>数据是按行存储的
没有索引的查询使用大量I/O 
建立索引需要花费大量时间和资源
</code></pre>

<p><img src="http://7xqkk1.com1.z0.glb.clouddn.com/16-3-14/49517032.jpg" alt="" title=""></p>

<p>列式数据库</p>

<pre><code>数据是按列存储-每一列单独存放
   数据即是索引
   指访问查询涉及的列-大量降低系统I/O 
每一列由一个线索来处理-查询的并发处理
   数据类型一致，数据特征相似-高效压缩
</code></pre>

<p><img src="http://7xqkk1.com1.z0.glb.clouddn.com/16-3-14/51618724.jpg" alt="" title=""></p>



<h3 id="14hbase的数据模型">1.4、HBase的数据模型</h3>

<pre><code> HBase是基于Google BigTable模型开发的，典型的key/value系统；
</code></pre>

<p><img src="http://7xqkk1.com1.z0.glb.clouddn.com/16-3-14/58486765.jpg" alt="" title=""></p>



<h3 id="15逻辑视图">1.5、逻辑视图</h3>

<p><img src="http://7xqkk1.com1.z0.glb.clouddn.com/16-3-14/20969952.jpg" alt="" title=""></p>



<h3 id="16rowkey与column-family">1.6、Rowkey与Column Family</h3>

<p><img src="http://7xqkk1.com1.z0.glb.clouddn.com/16-3-14/41923073.jpg" alt="" title=""></p>



<h3 id="17hbase基本概念">1.7、Hbase基本概念</h3>

<pre><code>Row Key
  Byte array
  表中每条记录的“主键”
  方便快速查找
Column Family
  拥有一个名称(string)
  包含一个或者多个相关列
Column
  属于某一个column family
  包含在某一列中
familyName:columnName

Version Number
默认值系统时间戳

Value（cell）
  Byte array
</code></pre>



<h2 id="2hbase数据类型">2、Hbase数据类型</h2>

<pre><code> HBase schema可以有多个类似Table 
 每个表可由多个Column Family组成
 Hbase可以有Dynamic Column
</code></pre>

<p><img src="http://7xqkk1.com1.z0.glb.clouddn.com/16-3-14/14643940.jpg" alt="" title=""></p>

<pre><code>version number 可由用户提供
无需以递增的顺序插入
Table可能非常稀疏
不同的cell可以拥有不同的列
Row Key是主键
</code></pre>

<p><img src="http://7xqkk1.com1.z0.glb.clouddn.com/16-3-14/57779510.jpg" alt="" title=""></p>



<h3 id="21hbase与支持的操作">2.1、HBase与支持的操作</h3>

<pre><code>所有操作均是基于rowkey的；
支持CRUD（Create、Read、Update和Delete）和Scan；

单行操作
    put
    get
    scan

多行操作
    Scan
    Multiput

没有内置join操作，可使用MapReduce解决
</code></pre>



<h2 id="3hbase物理模型">3、Hbase物理模型</h2>

<pre><code>每个column family存储在HDFS上的一个单独文件中；
Key 和 Version number在每个 column family中均由一份；
空值不会被保存。
Hbase为每个值维护了多级索引
</code></pre>

<p><img src="http://7xqkk1.com1.z0.glb.clouddn.com/16-3-14/29538607.jpg" alt="" title=""></p>

<pre><code>1、Table中的所有行都按照row key的字典序排列；
2、Table 在行的方向上分割为多个Region；
</code></pre>

<p><img src="http://7xqkk1.com1.z0.glb.clouddn.com/16-3-14/8087664.jpg" alt="" title=""></p>

<pre><code>3、Region按大小分割的，每个表开始只有一个region，随着数据增多， region不断增大，当增大到一个阀值的时候，region就会等分会两个新的region，之后会有越来越多的region；
</code></pre>

<p><img src="http://7xqkk1.com1.z0.glb.clouddn.com/16-3-14/8856880.jpg" alt="" title=""></p>

<pre><code>4、Region是HBase中分布式存储和负载均衡的最小单元。不同Region分布到不同RegionServer上；
</code></pre>

<p><img src="http://7xqkk1.com1.z0.glb.clouddn.com/16-3-14/9160220.jpg" alt="" title=""></p>

<pre><code>5、Region虽然是分布式存储的最小单元，但并不是存储的最小单元
   Region由一个或者多个Store组成，每个store保存一个columns family
   每个Store又由一个memStore和0至多个StoreFile组成；
   memStore存储在内存中， StoreFile存储在HDFS上。
</code></pre>

<p><img src="http://7xqkk1.com1.z0.glb.clouddn.com/16-3-14/17076266.jpg" alt="" title=""></p>



<h2 id="hbase架构">HBase架构</h2>

<p><img src="http://7xqkk1.com1.z0.glb.clouddn.com/16-3-14/222256.jpg" alt="" title=""></p>



<h2 id="hbase基本组件">HBase基本组件</h2>

<pre><code>Client
   包含访问Hbase的接口，并维护cache来加快对Hbase的访问

ZooKeeper
   保证任何时候，集群中只有一个master
   存贮所有Region的寻址入口
   实时监控Region server的上线和下线信息。并实时通知给Master
   存储HBase的schema和table元数据

Master
   为Region server分配region
   负责Region server的负载均衡
   发现失效的Region server并重新分配其上的region
   管理用户对table的增删改查操作

Region Server
   Region server维护region，处理对这些region的IO请求
   Region server负责切分在运行过程中变得过大的region
</code></pre>



<h2 id="zookeeper作用">Zookeeper作用</h2>

<pre><code> HBase 依赖ZooKeeper

 默认情况下， HBase 管理ZooKeeper 实例
</code></pre>

<p>比如， 启动或者停止ZooKeeper <br>
     Master与RegionServers启动时会向ZooKeeper注册 <br>
     Zookeeper的引入使得Master不再是单点故障</p>

<p><img src="http://7xqkk1.com1.z0.glb.clouddn.com/16-3-14/74268011.jpg" alt="" title=""></p>



<h2 id="write-ahead-logwal">Write-Ahead-Log(WAL)</h2>

<p><img src="http://7xqkk1.com1.z0.glb.clouddn.com/16-3-14/35812020.jpg" alt="" title=""></p>



<h2 id="hbase容错性">HBase容错性</h2>

<pre><code>Master容错： Zookeeper重新选择一个新的Master
   无Master过程中，数据读取仍照常进行；
   无master过程中， region切分、负载均衡等无法进行；

RegionServer容错：定时向Zookeeper汇报心跳，如果一旦时间内未出现心跳
   Master将该RegionServer上的Region重新分配到其他RegionServer上；
   失效服务器上“预写”日志由主服务器进行分割并派送给新的RegionServer

Zookeeper容错： Zookeeper是一个可靠地服务
   一般配置3或5个Zookeeper实例。
</code></pre>



<h2 id="regin定位">Regin定位</h2>

<pre><code>寻找RegionServer
   ZooKeeper
   -ROOT-(单Region)
   .META.
   用户表
</code></pre>

<p><img src="http://7xqkk1.com1.z0.glb.clouddn.com/16-3-14/51913375.jpg" alt="" title=""></p>



<h2 id="root-表与meta表">-ROOT-表与.META.表</h2>

<pre><code>-ROOT-
   表包含.META.表所在的region列表，该表只会有一个Region；
   Zookeeper中记录了-ROOT-表的location。

.META.
   表包含所有的用户空间region列表，以及RegionServer的服务器地址。
</code></pre>



<h2 id="hdfs与hbase的比较">HDFS与HBase的比较</h2>

<p><img src="http://7xqkk1.com1.z0.glb.clouddn.com/16-3-14/54819739.jpg" alt="" title=""></p>



<h2 id="关系型数据与hbase的比较">关系型数据与HBase的比较</h2>

<p><img src="http://7xqkk1.com1.z0.glb.clouddn.com/16-3-14/51913375.jpg" alt="" title=""></p>



<h2 id="何时使用hbase">何时使用HBase</h2>

<pre><code>需对数据进行随机读操作或者随机写操作；

大数据上高并发操作，比如每秒对PB级数据进行上千次操作；

读写访问均是非常简单的操作。
</code></pre>



<h2 id="hbase在淘宝的应用">HBase在淘宝的应用</h2>

<pre><code>交易历史记录查询系统
百亿行数据表，千亿级二级索引表
每天千万行更新
查询场景简单，检索条件较少
关系型数据库所带来的问题
基于userId+time+id rowkey设计
成本考虑
</code></pre>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>