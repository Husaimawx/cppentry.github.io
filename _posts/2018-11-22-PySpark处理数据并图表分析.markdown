---
layout:     post
title:      PySpark处理数据并图表分析
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<h2><strong>PySpark<span style="font-family:'黑体';">简介</span></strong></h2>
<ol><li>官方对PySpark的释义为：“PySpark is the Python API for Spark”。 也就是说pyspark为Spark提供的Python编程接口。</li><li>Spark使用py4j来实现python与java的互操作，从而实现使用python编写Spark程序。Spark也同样提供了pyspark，一个Spark的python shell，可以以交互式的方式使用Python编写Spark程序。 如：</li></ol><div class="dp-highlighter bg_python">
<div class="bar">
<div class="tools"><strong>[python]</strong> <a href="http://blog.csdn.net/u011204847/article/details/51224383#" rel="nofollow" class="ViewSource" title="view plain">
view plain</a><span> <a href="http://blog.csdn.net/u011204847/article/details/51224383#" rel="nofollow" class="CopyToClipboard" title="copy">
copy</a></span><span> </span></div>
</div>
<ol start="1" class="dp-py"><li class="alt"><span><span class="keyword">from</span><span> pyspark </span><span class="keyword">import</span><span> SparkContext  </span></span></li><li><span>sc = SparkContext(<span class="string">"local"</span><span>,</span><span class="string">"Job Name"</span><span>, pyFiles=[</span><span class="string">'MyFile.py'</span><span>, </span><span class="string">'lib.zip'</span><span>, </span><span class="string">'app.egg'</span><span>])  </span></span></li><li class="alt"><span>words =sc.textFile(<span class="string">"/usr/share/dict/words"</span><span>)  </span></span></li><li><span>words.filter(<span class="keyword">lambda</span><span> w:w.startswith(</span><span class="string">"spar"</span><span>)).take(</span><span class="number">5</span><span>)  </span></span></li></ol></div>
<br><br><p>PySpark文档主页界面：</p>
<p><span style="color:#3e4349;"> <img src="https://img-blog.csdn.net/20160423013733820" alt=""></span></p>
<p> </p>
<p>PySpark是构建在Java API之上的，如下图：</p>
<p> <img src="https://img-blog.csdn.net/20160423013742210" alt=""></p>
<p> </p>
<p><br></p>
<p><br></p>
<p> </p>
<h2><a name="t2"></a><a name="_Toc13034"></a><strong>处理数据并图表分析</strong></h2>
<p>下面我通过PySpark对真实的数据集进行处理，并作图形来分析。首先我需要介绍下数据集以及数据处理的环境。</p>
<p><br></p>
<h3><a name="t3"></a><a name="_Toc11199"></a><strong>数据集</strong></h3>
<p><a name="OLE_LINK4"></a>MovieLens数据集是由Minnesota大学的GroupLens Research Project对电影评分网站(movielens.umn.edu)收集的，数据集包含了1997年9月19日到1998年四月22日间共七个月的数据。这些数据已经被处理过了（清除了那些评分次数少于20次以及信息没有填写完整的数据）</p>
<p> </p>
<p><a name="OLE_LINK1"></a>MovieLens数据集：</p>
<p>MovieLens数据集，用户对自己看过的电影进行评分，分值为1～5。MovieLens包括两个不同大小的库，适用于不同规模的算法．小规模的库是943个独立用户对1682部电影作的10000次评分的数据（我是用这个小规模作数据处理和分析）；通过对数据集分析，为用户预测他对其他未观看的电影的打分，将预测分值高的电影推荐给用户，认为这些电影是用户下一步感兴趣的电影。</p>
<p> </p>
<p>数据集结构：</p>
<p>1<span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">943</span><span style="font-family:'宋体';">个用户对</span><span style="font-family:Calibri;">1682</span><span style="font-family:'宋体';">场电影评分，评判次数为</span><span style="font-family:Calibri;">100000</span><span style="font-family:'宋体';">次，评分标准：</span><span style="font-family:Calibri;">1~5</span><span style="font-family:'宋体';">分。</span></p>
<p>2、每位用户至少评判<span style="font-family:Calibri;">20</span><span style="font-family:'宋体';">场电影。</span></p>
<p>3、简单地统计了用户的一些信息 <span style="font-family:Calibri;">(age, gender, occupation, zip)</span></p>
<p> </p>
<p>数据用途：</p>
<p>供科研单位和研发企业使用，可用于数据挖掘、推荐系统，人工智能等领域，复杂网络研究等领域。</p>
<p> </p>
<p> </p>
<h3><a name="t4"></a><a name="_Toc3158"></a><strong>数据处理的环境</strong></h3>
<ol><li>Hadoop<span style="font-family:'宋体';">伪分布环境</span></li><li>Spark Standalone<span style="font-family:'宋体';">环境</span></li><li>Anaconda<span style="font-family:'宋体';">环境：（下载地址：</span><span style="font-family:Calibri;">https://www.continuum.io/downloads</span><span style="font-family:'宋体';">）</span></li><li>Anaconda Python <span style="font-family:'宋体';">是</span><span style="font-family:Calibri;"> </span><a href="http://www.oschina.net/p/python" rel="nofollow">Python</a> <span style="font-family:'宋体';">科学技术包的合集，包含超过</span><span style="font-family:Calibri;">400</span><span style="font-family:'宋体';">个流行的科学计算、数学、工程以及数据分析用的包。这里我主要是用它的一些包，免得自己装一些</span><span style="font-family:Calibri;">Python</span><span style="font-family:'宋体';">包麻烦。</span></li></ol><p>其他：</p>
<p> <img src="https://img-blog.csdn.net/20160423013853914" alt=""></p>
<p><br></p>
<p><br></p>
<p><br></p>
<h3><a name="t5"></a><a name="_Toc31613"></a><strong>处理一（用户年龄统计分析）</strong></h3>
<p>处理一简介：</p>
<p>通过对用户数据处理，获得用户信息中的年龄。然后对年龄进行统计并使用Python<span style="font-family:'宋体';">中的图形框架</span>Matplotlib<span style="font-family:'宋体';">生成柱状图，最后通过柱状图分析观看电影的观众年龄分布趋势。</span></p>
<p> </p>
<p>处理一所有代码：</p>
<div class="dp-highlighter bg_python">
<div class="bar">
<div class="tools"><strong>[python]</strong> <a href="http://blog.csdn.net/u011204847/article/details/51224383#" rel="nofollow" class="ViewSource" title="view plain">
view plain</a><span> <a href="http://blog.csdn.net/u011204847/article/details/51224383#" rel="nofollow" class="CopyToClipboard" title="copy">
copy</a></span><span> </span></div>
</div>
<ol start="1" class="dp-py"><li class="alt"><span><span class="comment">#加载HDFS上面的用户数据</span><span>  </span></span></li><li><span>user_data = sc.textFile(<span class="string">"hdfs:/input/ml-100k/u.user"</span><span>)  </span></span></li><li class="alt"><span><span class="comment">#打印加载的用户信息第一条</span><span>  </span></span></li><li><span>user_data.first()  </span></li><li class="alt"><span>  </span></li><li><span><span class="comment">#用"|"分割符分割每一行的数据，然后将数据返回到user_fields</span><span>  </span></span></li><li class="alt"><span>user_fields = user_data.map(<span class="keyword">lambda</span><span> line: line.split(</span><span class="string">"|"</span><span>))  </span></span></li><li><span><span class="comment">#统计总的用户数</span><span>  </span></span></li><li class="alt"><span>num_users = user_fields.map(<span class="keyword">lambda</span><span> fields: fields[</span><span class="number">0</span><span>]).count()  </span></span></li><li><span><span class="comment">#统计性别的种类数，distinct()函数用来去重。</span><span>  </span></span></li><li class="alt"><span>num_genders = user_fields.map(<span class="keyword">lambda</span><span> fields:fields[</span><span class="number">2</span><span>]).distinct().count()  </span></span></li><li><span><span class="comment">#统计职位种类数</span><span>  </span></span></li><li class="alt"><span>num_occupations = user_fields.map(<span class="keyword">lambda</span><span> fields:fields[</span><span class="number">3</span><span>]).distinct().count()  </span></span></li><li><span><span class="comment">#统计邮政编码种类数</span><span>  </span></span></li><li class="alt"><span>num_zipcodes = user_fields.map(<span class="keyword">lambda</span><span> fields:fields[</span><span class="number">4</span><span>]).distinct().count()  </span></span></li><li><span><span class="comment">#打印统计的这些信息</span><span>  </span></span></li><li class="alt"><span><span class="keyword">print</span><span> </span><span class="string">"Users: %d, genders: %d, occupations: %d, ZIP codes: %d"</span><span> % (num_users, num_genders, num_occupations, num_zipcodes)  </span></span></li><li><span>  </span></li><li class="alt"><span><span class="comment">#统计用户年龄</span><span>  </span></span></li><li><span>ages = user_fields.map(<span class="keyword">lambda</span><span> x: int(x[</span><span class="number">1</span><span>])).collect()  </span></span></li><li class="alt"><span><span class="comment">#通过python中的matplotlib生成图表提供给分析师分析</span><span>  </span></span></li><li><span><span class="keyword">import</span><span> matplotlib.pyplot as plt  </span></span></li><li class="alt"><span>hist(ages, bins=<span class="number">20</span><span>, color=</span><span class="string">'lightblue'</span><span>, normed=</span><span class="special">True</span><span>)  </span></span></li><li><span>fig = plt.gcf()  </span></li><li class="alt"><span>fig.set_size_inches(<span class="number">16</span><span>, </span><span class="number">10</span><span>)  </span></span></li><li><span>plt.show()  </span></li></ol></div>
<br><p>进入Spark<span style="font-family:'宋体';">安装目录的，然后输入如下命令开启</span><span style="font-family:Calibri;">pyspark:</span></p>
<div class="dp-highlighter bg_python">
<div class="bar">
<div class="tools"><strong>[python]</strong> <a href="http://blog.csdn.net/u011204847/article/details/51224383#" rel="nofollow" class="ViewSource" title="view plain">
view plain</a><span> <a href="http://blog.csdn.net/u011204847/article/details/51224383#" rel="nofollow" class="CopyToClipboard" title="copy">
copy</a></span><span> </span></div>
</div>
<ol start="1" class="dp-py"><li class="alt"><span><span>./bin/pyspark  </span></span></li></ol></div>
<p> </p>
<p>之后加载HDFS<span style="font-family:'宋体';">上面的用户数据（</span><span style="font-family:Calibri;">u.user)</span><span style="font-family:'宋体';">，然后通过</span><span style="font-family:Calibri;">user_data.first()</span><span style="font-family:'宋体';">打印第一条数据显示数据格式。</span></p>
<p> <img src="https://img-blog.csdn.net/20160423014002961" alt=""></p>
<p> </p>
<p>统计的HDFS<span style="font-family:'宋体';">上面的所有用户信息：总共</span><span style="font-family:Calibri;">943</span><span style="font-family:'宋体';">位用户、男女两种性别、</span><span style="font-family:Calibri;">21</span><span style="font-family:'宋体';">中职位、</span><span style="font-family:Calibri;">795</span><span style="font-family:'宋体';">个不同的邮政编码。</span></p>
<p> <img src="https://img-blog.csdn.net/20160423014025984" alt=""></p>
<p> </p>
<p><a name="OLE_LINK2"></a><span style="color:#404040;">Matplotlib是一个Python的图形框架，</span><span style="color:#404040;">下面为</span><span style="color:#404040;">matplotlib工作过程的打印信息：</span></p>
<p> <img src="https://img-blog.csdn.net/20160423014050407" alt=""></p>
<p> </p>
<p><span style="color:#404040;">Matplotlib</span><span style="color:#404040;">对统计后的数据图形化显示：</span></p>
<p> <img src="https://img-blog.csdn.net/20160423014105251" alt=""></p>
<p> </p>
<p>用户年龄分布图：</p>
<p> <img src="https://img-blog.csdn.net/20160423014123564" alt=""></p>
<p> </p>
<p><strong>结论：</strong></p>
<p>通过生成的柱状图我们可以看出这些电影观众年龄段趋于青年，并且大部分用户年龄都在15<span style="font-family:'宋体';">到</span><span style="font-family:Calibri;">35</span><span style="font-family:'宋体';">之间。</span></p>
<p> </p>
<p> </p>
<p><br></p>
<h3><a name="t6"></a><a name="_Toc25780"></a><strong>处理二（用户职位统计分析）</strong></h3>
<p>处理二简介：</p>
<p><span></span>首先对用户数据处理，获得用户信息中的职位种类以及每种职位用户个数。然后对职位进行统计并使用Python<span style="font-family:'宋体';">中的图形框架</span>Matplotlib<span style="font-family:'宋体';">生成柱状图，最后通过柱状图分析观看电影的观众职位以及人数分布趋势。</span></p>
<p> </p>
<p><a name="OLE_LINK3"></a>处理二所有代码：</p>
<div class="dp-highlighter bg_python">
<div class="bar">
<div class="tools"><strong>[python]</strong> <a href="http://blog.csdn.net/u011204847/article/details/51224383#" rel="nofollow" class="ViewSource" title="view plain">
view plain</a><span> <a href="http://blog.csdn.net/u011204847/article/details/51224383#" rel="nofollow" class="CopyToClipboard" title="copy">
copy</a></span><span> </span></div>
</div>
<ol start="1" class="dp-py"><li class="alt"><span><span class="comment">#处理职位那一列，通过类似于MapReduce经典例子WordCount处理过程处理职位</span><span>  </span></span></li><li><span>count_by_occupation = user_fields.map(<span class="keyword">lambda</span><span> fields: (fields[</span><span class="number">3</span><span>], </span><span class="number">1</span><span>)).reduceByKey(</span><span class="keyword">lambda</span><span> x, y: x + y).collect()  </span></span></li><li class="alt"><span><span class="comment">#导入numpy模块</span><span>  </span></span></li><li><span><span class="keyword">import</span><span> numpy as np  </span></span></li><li class="alt"><span><span class="comment">#获取用户职位，并作为柱状图的x轴数据显示</span><span>  </span></span></li><li><span>x_axis1 = np.array([c[<span class="number">0</span><span>] </span><span class="keyword">for</span><span> c </span><span class="keyword">in</span><span> count_by_occupation])  </span></span></li><li class="alt"><span><span class="comment">#获取用户的各个职位数，并作为y轴数据显示</span><span>  </span></span></li><li><span>y_axis1 = np.array([c[<span class="number">1</span><span>] </span><span class="keyword">for</span><span> c </span><span class="keyword">in</span><span> count_by_occupation])  </span></span></li><li class="alt"><span><span class="comment">#让x轴类别的显示按照y轴中每种职位的个数升序排序</span><span>  </span></span></li><li><span>x_axis = x_axis1[np.argsort(y_axis1)]  </span></li><li class="alt"><span><span class="comment">#y轴也是升序</span><span>  </span></span></li><li><span>y_axis = y_axis1[np.argsort(y_axis1)]  </span></li><li class="alt"><span>  </span></li><li><span><span class="comment">#设置柱状图中x轴范围以及width</span><span>  </span></span></li><li class="alt"><span>pos = np.arange(len(x_axis))  </span></li><li><span>width = <span class="number">1.0</span><span>  </span></span></li><li class="alt"><span>  </span></li><li><span><span class="comment">#将统计的职位信息使用matplotlib生成柱状图</span><span>  </span></span></li><li class="alt"><span><span class="keyword">from</span><span> matplotlib </span><span class="keyword">import</span><span> pyplot as plt  </span></span></li><li><span>ax = plt.axes()  </span></li><li class="alt"><span>ax.set_xticks(pos + (width / <span class="number">2</span><span>))  </span></span></li><li><span>ax.set_xticklabels(x_axis)  </span></li><li class="alt"><span>plt.bar(pos, y_axis, width, color=<span class="string">'lightblue'</span><span>)  </span></span></li><li><span>plt.xticks(rotation=<span class="number">30</span><span>)  </span></span></li><li class="alt"><span>fig = plt.gcf()  </span></li><li><span>fig.set_size_inches(<span class="number">16</span><span>, </span><span class="number">10</span><span>)  </span></span></li><li class="alt"><span>plt.show()  </span></li></ol></div>
<br><p>用户职位信息处理过程：</p>
<p> <img src="https://img-blog.csdn.net/20160423014233956" alt=""></p>
<p> </p>
<p>用户职位信息统计并生成柱状图：</p>
<p> <img src="https://img-blog.csdn.net/20160423014254759" alt=""></p>
<p> </p>
<p>用户职位分布图：</p>
<p> <img src="https://img-blog.csdn.net/20160423014307222" alt=""></p>
<p> </p>
<p><strong><a name="OLE_LINK6"></a>结论：</strong></p>
<p>从最终生成的图表中，我们可以看出电影观众大部分都是student, educator, administrator, engineer和programmer。并且student<span style="font-family:'宋体';">的人数领先其他职位一大截。</span></p>
<p> </p>
<p> </p>
<p><br></p>
<h3><a name="t7"></a><a name="_Toc2233"></a><strong>处理三（电影发布信息统计分析）</strong></h3>
<p>处理三简介：</p>
<ol><li>首先对用户数据处理，获得用户评价的电影发布时间信息。然后以1998<span style="font-family:'宋体';">年为最高年限减去电影发布的年限（数据集统计的时间为</span><span style="font-family:Calibri;">1998</span><span style="font-family:'宋体';">年）得到的值作为</span><span style="font-family:Calibri;">x</span><span style="font-family:'宋体';">轴，接着通过</span><span style="font-family:Calibri;">Python</span><span style="font-family:'宋体';">中的图形框架</span>Matplotlib<span style="font-family:'宋体';">生成柱状图，最后通过柱状图分析当时电影发布时间趋势。</span></li><li>电影信息有一些脏数据，所以需要先作处理。</li></ol><p><br></p>
<p>处理三所有代码：</p>
<div class="dp-highlighter bg_python">
<div class="bar">
<div class="tools"><strong>[python]</strong> <a href="http://blog.csdn.net/u011204847/article/details/51224383#" rel="nofollow" class="ViewSource" title="view plain">
view plain</a><span> <a href="http://blog.csdn.net/u011204847/article/details/51224383#" rel="nofollow" class="CopyToClipboard" title="copy">
copy</a></span><span> </span></div>
</div>
<ol start="1" class="dp-py"><li class="alt"><span><span class="comment">#从HDFS中加载u.item数据</span><span>  </span></span></li><li><span>movie_data = sc.textFile(<span class="string">"hdfs:/input/ml-100k/u.item"</span><span>)  </span></span></li><li class="alt"><span><span class="comment">#打印第一条数据，查看数据格式</span><span>  </span></span></li><li><span><span class="keyword">print</span><span> movie_data.first()  </span></span></li><li class="alt"><span>  </span></li><li><span><span class="comment">#统计电影总数</span><span>  </span></span></li><li class="alt"><span>num_movies = movie_data.count()  </span></li><li><span><span class="keyword">print</span><span> </span><span class="string">"Movies: %d"</span><span> % num_movies  </span></span></li><li class="alt"><span>  </span></li><li><span><span class="comment">#定义函数功能为对电影数据预处理，对于错误的年限，使用1900填补</span><span>  </span></span></li><li class="alt"><span><span class="keyword">def</span><span> convert_year(x):  </span></span></li><li><span>    <span class="keyword">try</span><span>:  </span></span></li><li class="alt"><span>        <span class="keyword">return</span><span> int(x[-</span><span class="number">4</span><span>:])  </span></span></li><li><span>    <span class="keyword">except</span><span>:  </span></span></li><li class="alt"><span>        <span class="keyword">return</span><span> </span><span class="number">1900</span><span> </span><span class="comment"># there is a 'bad' data point with a blank year,which we set to 900 and will filter out later</span><span>  </span></span></li><li><span>  </span></li><li class="alt"><span><span class="comment">#使用"|"分隔符分割每行数据</span><span>  </span></span></li><li><span>movie_fields = movie_data.map(<span class="keyword">lambda</span><span> lines: lines.split(</span><span class="string">"|"</span><span>))  </span></span></li><li class="alt"><span><span class="comment">#提取分割后电影发布年限信息，并做脏数据预处理</span><span>  </span></span></li><li><span>years = movie_fields.map(<span class="keyword">lambda</span><span> fields: fields[</span><span class="number">2</span><span>]).map(</span><span class="keyword">lambda</span><span> x:convert_year(x))  </span></span></li><li class="alt"><span><span class="comment">#获取那些年限为1900的电影（部分为脏数据）</span><span>  </span></span></li><li><span>years_filtered = years.filter(<span class="keyword">lambda</span><span> x: x != </span><span class="number">1900</span><span>)  </span></span></li><li class="alt"><span><span class="comment">#计算出电影发布时间与1998年的年限差</span><span>  </span></span></li><li><span>movie_ages = years_filtered.map(<span class="keyword">lambda</span><span> yr: </span><span class="number">1998</span><span>-yr).countByValue()  </span></span></li><li class="alt"><span>  </span></li><li><span><span class="comment">#将年限差作为x轴，电影数量作为y轴作柱状图</span><span>  </span></span></li><li class="alt"><span>values = movie_ages.values()  </span></li><li><span>bins = movie_ages.keys()  </span></li><li class="alt"><span><span class="keyword">from</span><span> matplotlib </span><span class="keyword">import</span><span> pyplot as plt1  </span></span></li><li><span>plt1.hist(values, bins=bins, color=<span class="string">'lightblue'</span><span>, normed=</span><span class="special">True</span><span>)  </span></span></li><li class="alt"><span>fig = plt1.gcf()  </span></li><li><span>fig.set_size_inches(<span class="number">16</span><span>,</span><span class="number">10</span><span>)  </span></span></li><li class="alt"><span>plt1.show()  </span></li></ol></div>
<p> </p>
<p>从HDFS<span style="font-family:'宋体';">上加载电影数据并打印第一条数据查看数据格式：</span></p>
<p> <img src="https://img-blog.csdn.net/20160423014445333" alt=""></p>
<p> </p>
<p>打印的电影数据格式：</p>
<p> <img src="https://img-blog.csdn.net/20160423014457963" alt=""></p>
<p> </p>
<p>打印的电影总数：</p>
<p> <img src="https://img-blog.csdn.net/20160423014508854" alt=""></p>
<p> </p>
<p><a name="OLE_LINK5"></a>电影发布年限统计并生成柱状图：</p>
<p> <img src="https://img-blog.csdn.net/20160423014521771" alt=""></p>
<p> </p>
<p>电影发布年限分布图：（x<span style="font-family:'宋体';">轴为</span><span style="font-family:Calibri;">1998</span><span style="font-family:'宋体';">减去电影发布年限</span>）</p>
<p> <img src="https://img-blog.csdn.net/20160423014540073" alt=""></p>
<p> </p>
<p><strong>结论：</strong></p>
<p>从最终生成的图表中，我们可以看出绝大多数电影发布时间都在1988-1998<span style="font-family:'宋体';">年之间。</span></p>
<p><br></p>
<p><br></p>
<p> </p>
<h3><a name="t8"></a><a name="_Toc12960"></a><strong>处理四（用户评分统计分析）</strong></h3>
<p>处理四简介：</p>
<p>首先对用户数据处理，获得用户对电影的评分数，然后统计评分1-5<span style="font-family:'宋体';">的每个评分个数，然后绘制图表供分析。</span></p>
<p> </p>
<p>处理四所有代码：</p>
<div class="dp-highlighter bg_python">
<div class="bar">
<div class="tools"><strong>[python]</strong> <a href="http://blog.csdn.net/u011204847/article/details/51224383#" rel="nofollow" class="ViewSource" title="view plain">
view plain</a><span> <a href="http://blog.csdn.net/u011204847/article/details/51224383#" rel="nofollow" class="CopyToClipboard" title="copy">
copy</a></span><span> </span></div>
</div>
<ol start="1" class="dp-py"><li class="alt"><span><span class="comment">#从HDFS上面加载用户评分数据</span><span>  </span></span></li><li><span>rating_data = sc.textFile(<span class="string">"hdfs:/input/ml-100k/u.data"</span><span>)  </span></span></li><li class="alt"><span><span class="keyword">print</span><span> rating_data.first()  </span></span></li><li><span><span class="comment">#统计评分记录总数</span><span>  </span></span></li><li class="alt"><span>num_ratings = rating_data.count()  </span></li><li><span><span class="keyword">print</span><span> </span><span class="string">"Ratings: %d"</span><span> % num_ratings  </span></span></li><li class="alt"><span>  </span></li><li><span><span class="comment">#使用"\t"符分割每行数据</span><span>  </span></span></li><li class="alt"><span>rating_data = rating_data.map(<span class="keyword">lambda</span><span> line: line.split(</span><span class="string">"\t"</span><span>))  </span></span></li><li><span><span class="comment">#获取每条数据中的用户评分数集合</span><span>  </span></span></li><li class="alt"><span>ratings = rating_data.map(<span class="keyword">lambda</span><span> fields: int(fields[</span><span class="number">2</span><span>]))  </span></span></li><li><span><span class="comment">#获取最大评分数</span><span>  </span></span></li><li class="alt"><span>max_rating = ratings.reduce(<span class="keyword">lambda</span><span> x, y: max(x, y))  </span></span></li><li><span><span class="comment">#获取最小评分数</span><span>  </span></span></li><li class="alt"><span>min_rating = ratings.reduce(<span class="keyword">lambda</span><span> x, y: min(x, y))  </span></span></li><li><span><span class="comment">#获取平均评分数</span><span>  </span></span></li><li class="alt"><span>mean_rating = ratings.reduce(<span class="keyword">lambda</span><span> x, y: x + y) / num_ratings  </span></span></li><li><span><span class="comment">#获取评分中位数</span><span>  </span></span></li><li class="alt"><span>median_rating = np.median(ratings.collect())  </span></li><li><span><span class="comment">#每位用户平均评分</span><span>  </span></span></li><li class="alt"><span>ratings_per_user = num_ratings / num_users  </span></li><li><span><span class="comment">#每位用户评了几场电影</span><span>  </span></span></li><li class="alt"><span>ratings_per_movie = num_ratings / num_movies  </span></li><li><span><span class="comment">#打印上面这些信息</span><span>  </span></span></li><li class="alt"><span><span class="keyword">print</span><span> </span><span class="string">"Min rating: %d"</span><span> % min_rating  </span></span></li><li><span><span class="keyword">print</span><span> </span><span class="string">"Max rating: %d"</span><span> % max_rating  </span></span></li><li class="alt"><span><span class="keyword">print</span><span> </span><span class="string">"Average rating: %2.2f"</span><span> % mean_rating  </span></span></li><li><span><span class="keyword">print</span><span> </span><span class="string">"Median rating: %d"</span><span> % median_rating  </span></span></li><li class="alt"><span><span class="keyword">print</span><span> </span><span class="string">"Average # of ratings per user: %2.2f"</span><span> % ratings_per_user  </span></span></li><li><span><span class="keyword">print</span><span> </span><span class="string">"Average # of ratings per movie: %2.2f"</span><span> % ratings_per_movie  </span></span></li><li class="alt"><span>  </span></li><li><span><span class="comment">#获取评分数据</span><span>  </span></span></li><li class="alt"><span>count_by_rating = ratings.countByValue()  </span></li><li><span><span class="keyword">import</span><span> numpy as np  </span></span></li><li class="alt"><span><span class="comment">#x轴的显示每个评分（1-5）</span><span>  </span></span></li><li><span>x_axis = np.array(count_by_rating.keys())  </span></li><li class="alt"><span><span class="comment">#y轴显示每个评分所占概率，总概率和为1</span><span>  </span></span></li><li><span>y_axis = np.array([float(c) <span class="keyword">for</span><span> c </span><span class="keyword">in</span><span> count_by_rating.values()])  </span></span></li><li class="alt"><span>y_axis_normed = y_axis / y_axis.sum()  </span></li><li><span>pos = np.arange(len(x_axis))  </span></li><li class="alt"><span>width = <span class="number">1.0</span><span>  </span></span></li><li><span><span class="comment">#使用matplotlib生成柱状图</span><span>  </span></span></li><li class="alt"><span><span class="keyword">from</span><span> matplotlib </span><span class="keyword">import</span><span> pyplot as plt2  </span></span></li><li><span>ax = plt2.axes()  </span></li><li class="alt"><span>ax.set_xticks(pos + (width / <span class="number">2</span><span>))  </span></span></li><li><span>ax.set_xticklabels(x_axis)  </span></li><li class="alt"><span>plt2.bar(pos, y_axis_normed, width, color=<span class="string">'lightblue'</span><span>)  </span></span></li><li><span>plt2.xticks(rotation=<span class="number">30</span><span>)  </span></span></li><li class="alt"><span>fig = plt2.gcf()  </span></li><li><span>fig.set_size_inches(<span class="number">16</span><span>, </span><span class="number">10</span><span>)  </span></span></li><li class="alt"><span>plt2.show()  </span></li></ol></div>
<br><p>从<span style="font-family:Calibri;">HDFS</span><span style="font-family:'宋体';">加载数据</span></p>
<p> <img src="https://img-blog.csdn.net/20160423014626757" alt=""></p>
<p> </p>
<p>评分记录总数：</p>
<p> <img src="https://img-blog.csdn.net/20160423014637929" alt=""></p>
<p> </p>
<p>评分的一些统计信息;</p>
<p> <img src="https://img-blog.csdn.net/20160423014646980" alt=""></p>
<p> </p>
<p>统计评分信息并生成柱状图：</p>
<p> <img src="https://img-blog.csdn.net/20160423014659195" alt=""></p>
<p> </p>
<p>用户电影评价分布图：</p>
<p> <img src="https://img-blog.csdn.net/20160423014715605" alt=""></p>
<p> </p>
<p><strong>结论：</strong></p>
<p>从图中我们可以看出电影的评分大都在3-5<span style="font-family:'宋体';">分之间。</span></p>
<p> </p>
<p> </p>
<p><br></p>
<h3><a name="t9"></a><a name="_Toc5175"></a><strong>处理五（用户总评分统计分析）</strong></h3>
<p>处理五简介：</p>
<p>首先对用户数据处理，获得用户对电影的总评分数（每位至少评价20<span style="font-family:'宋体';">次，评分在</span><span style="font-family:Calibri;">1-5</span><span style="font-family:'宋体';">之间</span>）然后绘制图表供分析。</p>
<p> </p>
<p>处理四所有代码：</p>
<div class="dp-highlighter bg_python">
<div class="bar">
<div class="tools"><strong>[python]</strong> <a href="http://blog.csdn.net/u011204847/article/details/51224383#" rel="nofollow" class="ViewSource" title="view plain">
view plain</a><span> <a href="http://blog.csdn.net/u011204847/article/details/51224383#" rel="nofollow" class="CopyToClipboard" title="copy">
copy</a></span><span> </span></div>
</div>
<ol start="1" class="dp-py"><li class="alt"><span><span class="comment">#获取用户评分次数和每次评分</span><span>  </span></span></li><li><span>user_ratings_grouped = rating_data.map(<span class="keyword">lambda</span><span> fields: (int(fields[</span><span class="number">0</span><span>]),int(fields[</span><span class="number">2</span><span>]))).groupByKey()  </span></span></li><li class="alt"><span><span class="comment">#用户ID以及该用户评分总数</span><span>  </span></span></li><li><span>user_ratings_byuser = user_ratings_grouped.map(<span class="keyword">lambda</span><span> (k, v): (k,len(v)))  </span></span></li><li class="alt"><span><span class="comment">#打印5条结果</span><span>  </span></span></li><li><span>user_ratings_byuser.take(<span class="number">5</span><span>)  </span></span></li><li class="alt"><span>  </span></li><li><span><span class="comment">#生成柱状图</span><span>  </span></span></li><li class="alt"><span><span class="keyword">from</span><span> matplotlib </span><span class="keyword">import</span><span> pyplot as plt3  </span></span></li><li><span>user_ratings_byuser_local = user_ratings_byuser.map(<span class="keyword">lambda</span><span> (k, v):v).collect()  </span></span></li><li class="alt"><span>plt3.hist(user_ratings_byuser_local, bins=<span class="number">200</span><span>, color=</span><span class="string">'lightblue'</span><span>,normed=</span><span class="special">True</span><span>)  </span></span></li><li><span>fig = plt3.gcf()  </span></li><li class="alt"><span>fig.set_size_inches(<span class="number">16</span><span>,</span><span class="number">10</span><span>)  </span></span></li><li><span>plt3.show()  </span></li></ol></div>
<p> </p>
<p>打印用户5<span style="font-family:'宋体';">条处理后的结果：</span></p>
<p> <img src="https://img-blog.csdn.net/20160423014801683" alt=""></p>
<p> </p>
<p>生成每位用户评分总数分布图：</p>
<p> <img src="https://img-blog.csdn.net/20160423014815634" alt=""></p>
<p> </p>
<p><strong>结论：</strong></p>
<p>从图中可以看出总评分在100<span style="font-family:'宋体';">以内的占了绝大多数。当然，</span><span style="font-family:Calibri;">100</span><span style="font-family:'宋体';">到</span><span style="font-family:Calibri;">300</span><span style="font-family:'宋体';">之间还是有一部分的。</span></p>
<p> </p>
<p> </p>
<h3><a name="t10"></a><a name="_Toc11774"></a><strong>注意事项</strong></h3>
<p>1、要显示Python<span style="font-family:'宋体';">图标，必须要操作系统有图形界面。</span></p>
<p>2、Python<span style="font-family:'宋体';">必要有</span>matplotlib 模块。</p>
<p>3、必须要以root<span style="font-family:'宋体';">用户开启</span><span style="font-family:Consolas;">PySpark</span><span style="font-family:'宋体';">，不然会报以下错误，没有权限连接</span><span style="font-family:Consolas;">x Server</span><span style="font-family:'宋体';">。</span></p>
<p align="justify"> <img src="https://img-blog.csdn.net/20160423014850025" alt=""></p>
            </div>
                </div>