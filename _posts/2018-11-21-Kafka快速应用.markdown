---
layout:     post
title:      Kafka快速应用
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<h2><a id="Kafka_2"></a>Kafka的应用</h2>
<h3><a id="_ApacheKafka_4"></a>理解 ApacheKafka是什么</h3>
<p>​	Apache Kafka 企业级消息队列    ----&gt;是什么？有什么用？怎么用？</p>
<p>是什么？三个定义</p>
<ul>
<li>Apache Kafka 是一个消息队列（生产者消费者模式）</li>
<li>Apache Kafka 目标：构建企业中统一的、高吞吐、低延时的消息平台。</li>
<li>大多的是消息队列（消息中间件）都是基于JMS标准实现的，Apache Kafka 类似于JMS的实现。</li>
</ul>
<p>有什么用？（消息队列有什么用？）</p>
<ul>
<li>
<p>作为缓冲，来异构、解耦系统。</p>
<p><img src="../img/AMQ%E5%92%8Ckafka%E7%9A%84%E5%8C%BA%E5%88%AB.png" alt=""></p>
</li>
</ul>
<h3><a id="ApacheKafka_20"></a>掌握ApacheKafka的基本架构</h3>
<ul>
<li>
<p>Kafka Cluster：由多个服务器组成。每个服务器单独的名字broker（中间人）。</p>
</li>
<li>
<p>Kafka Producer：生产者、负责生产数据。</p>
</li>
<li>
<p>Kafka consumer：消费者、负责消费数据。</p>
</li>
<li>
<p>Kafka Topic: 主题，一类消息的名称。存储数据时将一类数据存放在某个topci下，消费数据也是消费一类数据。</p>
<ul>
<li>订单系统：创建一个topic，叫做order。</li>
<li>用户系统：创建一个topic，叫做user。</li>
<li>商品系统：创建一个topic，叫做product。</li>
</ul>
</li>
<li>
<p>注意：Kafka的元数据（ip，port，topic等节点信息，partition主从信息等）都是存放在zookeeper中。 生产者和消费者都会读取元数据信息</p>
<p><img src="../img/kafka%E6%9E%B6%E6%9E%84.png" alt=""></p>
</li>
</ul>
<h3><a id="Kafka_36"></a>搭建Kafka集群</h3>
<ol>
<li>准备环境
<ol>
<li>安装jdk,安装zookeeper</li>
<li>安装目录规范
<ul>
<li>安装包目录</li>
<li>程序目录</li>
<li>数据目录</li>
<li>日志目录</li>
</ul>
</li>
</ol>
</li>
<li>启动zookeeper集群
<ol>
<li>一键启动脚本—&gt;需要自己编写</li>
<li>手动启动</li>
<li>zookeeper所有节点保存同样的数据，分leader和follower。</li>
</ol>
</li>
<li>部署kafka集群
<ol>
<li>
<p>安装包的下载,解压,重命名</p>
</li>
<li>
<p>修改配置文件</p>
<ol>
<li>server.properties
<ol>
<li>
<p><a href="http://broker.id" rel="nofollow">broker.id</a></p>
</li>
<li>
<p>log.dirs</p>
</li>
<li>
<p>zookeeper.connect</p>
</li>
</ol>
</li>
</ol>
</li>
<li>
<p>分发节点</p>
</li>
</ol>
</li>
<li>使用工具查看kafka集群
<ol>
<li>zooinspector</li>
</ol>
</li>
</ol>
<h3><a id="_63"></a>掌握操作集群的两种方式</h3>
<ol>
<li>
<p>使用控制台操作集群</p>
<p>创建一个topic</p>
<pre><code class="prism language-shell">./kafka-topics.sh  --create --partitions 3 --replication-factor 2 --topic order --zookeeper node01:2181,node02:2181,node03:2181
</code></pre>
<p>生产者生产消息</p>
<pre><code class="prism language-shell">./kafka-console-producer.sh  --broker-list node01:9092,node02:9092,node03:9092 --topic order
</code></pre>
<p>消费者消费消息</p>
<pre><code class="prism language-shell">./kafka-console-consumer.sh  --bootstrap-server node01:9092,node02:9092,node03:9092 --from-beginning --topic order
</code></pre>
</li>
<li>
<p>Kafka 常用操作命令</p>
<pre><code class="prism language-shell">查看当前服务器中的所有topic
bin/kafka-topics.sh --list --zookeeper zk01:2181

删除topic
bin/kafka-topics.sh --delete --zookeeper zk01:2181 --topic <span class="token function">test</span>
需要server.properties 中设置delete.topic.enable<span class="token operator">=</span>true 否则只是标记删除或者直接重启。

查看某个Topic 的详情
bin/kafka-topics.sh --topic <span class="token function">test</span> --describe --zookeeper zk01:2181

对分区数进行修改
bin/kafka-topics.sh --zookeeper zk01 --alter --partitions 2 --topic <span class="token function">test</span>
</code></pre>
</li>
<li>
<p>使用java API操作集群</p>
<p>​	1.1创建maven工程,导入kafka-clients依赖</p>
<pre><code class="prism language-java"><span class="token generics function"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>
    <span class="token generics function"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
    <span class="token generics function"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>kafka<span class="token operator">-</span>clients<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
    <span class="token generics function"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">0.11</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>
</code></pre>
<p>​	1.2生产订单消息</p>
<pre><code>	```java
  import org.apache.kafka.clients.producer.KafkaProducer;
  import org.apache.kafka.clients.producer.ProducerRecord;
	import java.util.Properties;
</code></pre>
<pre><code>
/**
* 订单的生产者代码
*/
public class OrderProducer {
   public static void main(String[] args) throws InterruptedException {
       /* 1、连接集群，通过配置文件的方式
        * 2、发送数据-topic:order，value
        */
       Properties props = new Properties();
       props.put("bootstrap.servers", "node01:9092");
       props.put("acks", "all");
       props.put("retries", 0);
       props.put("batch.size", 16384);
       props.put("linger.ms", 1);
       props.put("buffer.memory", 33554432);
       props.put("key.serializer",
               "org.apache.kafka.common.serialization.StringSerializer");
       props.put("value.serializer",
               "org.apache.kafka.common.serialization.StringSerializer");
       KafkaProducer&lt;String, String&gt; kafkaProducer = new KafkaProducer&lt;String, String&gt;(props);

       for (int i = 0; i &lt; 10000; i++) {
           // 发送数据 ,需要一个producerRecord对象,最少参数 String topic, V value
           ProducerRecord&lt;String, String&gt; partition = new ProducerRecord&lt;String, String&gt;("order", 0, "key", "订单"+i);
           ProducerRecord&lt;String, String&gt; key = new ProducerRecord&lt;String, String&gt;("order", "key", "value"+i);
           ProducerRecord&lt;String, String&gt; value = new ProducerRecord&lt;String, String&gt;("order", "订单信息！"+i);
           kafkaProducer.send(value);
           /**
            * 如果ProducerRecord中制定了数据发送那个partition，就用这个编号
            * 平常一般不指定partition
            */
       }
   }
}
</code></pre>
<p>​	2.消费订单消息</p>
<pre><code class="prism language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>ConsumerRecord<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>ConsumerRecords<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>KafkaConsumer<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span>

<span class="token comment">/**
 * 消费订单数据--- javaben.tojson
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderConsumer</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1、连接集群</span>
        Properties props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"bootstrap.servers"</span><span class="token punctuation">,</span> <span class="token string">"node01:9092"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"group.id"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"enable.auto.commit"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"auto.commit.interval.ms"</span><span class="token punctuation">,</span> <span class="token string">"1000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key.deserializer"</span><span class="token punctuation">,</span>
                <span class="token string">"org.apache.kafka.common.serialization.StringDeserializer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"value.deserializer"</span><span class="token punctuation">,</span>
                <span class="token string">"org.apache.kafka.common.serialization.StringDeserializer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        KafkaConsumer<span class="token generics function"><span class="token punctuation">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">&gt;</span></span> kafkaConsumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaConsumer</span><span class="token generics function"><span class="token punctuation">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2、发送数据 发送数据需要，订阅下要消费的topic。  order</span>
        kafkaConsumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ConsumerRecords<span class="token generics function"><span class="token punctuation">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">&gt;</span></span> consumerRecords <span class="token operator">=</span> kafkaConsumer<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// jdk queue offer插入、poll获取元素。 blockingqueue put插入原生，take获取元素</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>ConsumerRecord<span class="token generics function"><span class="token punctuation">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">&gt;</span></span> record <span class="token operator">:</span> consumerRecords<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费的数据为："</span> <span class="token operator">+</span> record<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
</li>
</ol>
<h2><a id="Kafka_198"></a>Kafka基本原理</h2>
<h3><a id="ApacheKafka_200"></a>熟悉ApacheKafka原理</h3>
<ol>
<li>
<p>Apache Kafka原理-分片与副本机制</p>
<p><strong>分片机制</strong>:针对一个topic中,当数据量非常大的时候，一个服务器存放不了，就将数据分成两个或者多个部分，存放在多台服务器上。每个服务器上的数据，叫做一个partition</p>
<p><strong>副本机制</strong>:当数据只保存一份的时候，有丢失的风险。为了更好的容错和容灾，将数据拷贝几份，保存到不同的机器上。</p>
</li>
<li>
<p>Apache Kafka原理-消息存储及查询机制(稀疏索引)</p>
<ol>
<li>
<p><strong>文件的存储机制</strong>:每个partition中会存在多个segment段文件,默认每个segment文件大小是1G,segment是由两个核心文件.index和.log组成。.index中存放文件的索引,.log中存放数据信息</p>
</li>
<li>
<p>segment段中有两个核心的文件<strong>一个是log,存放真实数据</strong> ; <strong>一个是index,存放索引文件</strong>。</p>
</li>
<li>
<p>演示:当log文件等于1G时，新的会写入到下一个segment中,一个segment段差不多会存储70万条数据。</p>
</li>
<li>
<p>命名规则与查询机制</p>
<p>文件查询时,通过index文件中确定数据索引,每个索引和数据一一对应,在log文件中读取到数据。</p>
</li>
</ol>
</li>
<li>
<p>Apache Kafka原理-生产者数据分发策略</p>
<ol>
<li>
<p>说明:</p>
<ol>
<li>当在构造参数中指定partition时,数据发往指定分区</li>
<li>当在构造参数中没有指定partition时,但是数据有key时,根据key的hash值分区</li>
<li>在使用构造参数中,既没有指定partition,也没有key时,采用轮询调度</li>
</ol>
</li>
<li>
<p>代码演示:</p>
<p>三种机制</p>
</li>
</ol>
</li>
<li>
<p>Apache Kafka原理-消费者的负载均衡机制</p>
<p>一个partition只能被消费组中的一个成员消费。<br>
所以如果消费组中有多于partition数量的消费者，那么一定会有消费者无法消费数据,处于空闲状态</p>
<pre><code class="prism language-shell">./kafka-console-consumer.sh --bootstrap-server node01:9092 --topic myTest03 --consumer.config <span class="token punctuation">..</span>/config/consumer.properties
</code></pre>
</li>
<li>
<p>Apache Kafka原理-消息不丢失机制</p>
<ol>
<li>
<p>生产者端消息不丢失机制:消息生产分为同步模式和异步模式</p>
<p>ack确认有三个状态:0表示只管发送数据,不确认是否发送成功。</p>
<p>​				1表示生产端发送数据会确认partition备份leader是否收到数据。</p>
<p>​				-1表示会确认partition所有备份节点是否都收到数据。</p>
<p>2.1、broker端的数据不丢失机制采用备份机制</p>
<p>2.2、消费者端的数不丢失机制:</p>
<p>在kafka0.8 版本以前,将消息的消费情况保存在zookeeper上,记录offset值,不会丢失消息,但可能会有重复消费。0.8版本以后,消息的消费可以保存在kafka内置topic:consumer_offset上</p>
</li>
</ol>
</li>
</ol>

            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>