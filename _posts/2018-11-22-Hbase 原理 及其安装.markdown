---
layout:     post
title:      Hbase 原理 及其安装
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/tengxing007/article/details/53363156				</div>
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<h1 class="title"><a id="magicparlabel-4734">Hbase 基本原理</a></h1>
<a id="magicparlabel-4736"></a>
<h2 class="section_"><a></a><a id="magicparlabel-4737">Hbase?</a></h2>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4738">HBase – Hadoop Database，是一个高可靠性、高性能、面向列、可伸缩的分布式存储系统，它存储的是松散型数据，具体来说，HBase存储的数据介于映射（key/value）和关系型数据之间。同时利用HBase技术可在廉价PC
 Server上搭建起大规模结构化存储集群.</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4739">Hbase是Google Bigtable的开源实现，类似Google Bigtable利用GFS作为其文件存储系统，HBase利用Hadoop HDFS作为其文件存储系统；Google运行MapReduce来处理Bigtable中的海量数据，HBase同样利用Hadoop
 MapReduce来处理HBase中的海量数据；Google Bigtable利用 Chubby作为协同服务，HBase利用Zookeeper作为对应。</a></div>
<a></a>
<h2 class="section_"><a></a><a id="magicparlabel-4740">安装配置</a></h2>
<a></a>
<h3 class="subsection_"><a></a><a id="magicparlabel-4741">下载：</a></h3>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4745"></a>
<div class="Boxed"><a></a>
<div class="plain_layout"><a></a><a id="magicparlabel-4742">$ wget: https://mirrors.tuna.tsinghua.edu.cn/apache/hbase/1.2.4/hbase-1.2.4-bin.tar.gz</a></div>
<a></a>
<div class="plain_layout"><a></a><a id="magicparlabel-4743">$ tar -xvf hbase-1.2.4-bin.tar.gz</a></div>
<a></a>
<div class="plain_layout"><a></a><a id="magicparlabel-4744">$ mv -R hbase-1.2.4 ~/dev/hbase</a></div>
<a></a></div>
</div>
<a></a>
<h3 class="subsection_"><a></a><a id="magicparlabel-4746">环境变量:</a></h3>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4747">~/.bashrc 添加 export PATH=$PATH:$HOME/dev/hbase/bin</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4749"></a>
<div class="Boxed"><a></a>
<div class="plain_layout"><a></a><a id="magicparlabel-4748">$ source ~/.bashrc</a></div>
<a></a></div>
</div>
<a></a>
<h3 class="subsection_"><a></a><a id="magicparlabel-4750">hbase配置:</a></h3>
<a></a>
<h4 class="subsubsection_"><a></a><a id="magicparlabel-4751">1.单机:</a></h4>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4752">~/dev/hbase/conf/hbase-env.sh 添加 export JAVA_HOME/usr/lib/jvm/jdk1.8.0_101</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4753">~/.bashrc 添加 export HBASE_MANAGES_ZK=true 说明:此配置信息，设置由hbase自己管理zookeeper，不需要单独的zookeeper。</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4755"></a>
<div class="Boxed"><a></a>
<div class="plain_layout"><a></a><a id="magicparlabel-4754">$ source ~/.bashrc</a></div>
<a></a></div>
</div>
<a></a>
<h4 class="subsubsection_"><a></a><a id="magicparlabel-4756">2.伪分布式机:</a></h4>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4757">在单机的基础之上，配置同目录下的hbase-site.xml文件</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4769"></a>
<div class="Boxed"><a></a>
<div class="plain_layout"><a></a><a id="magicparlabel-4758">&lt;configuration&gt;</a></div>
<a></a>
<div class="plain_layout"><a></a><a id="magicparlabel-4759">&lt;property&gt;</a></div>
<a></a>
<div class="plain_layout"><a></a><a id="magicparlabel-4760">&lt;name&gt;hbase.rootdir&lt;/name&gt;</a></div>
<a></a>
<div class="plain_layout"><a></a><a id="magicparlabel-4761">&lt;value&gt;hdfs://192.168.70.130:9000/hbase&lt;/value&gt;</a></div>
<a></a>
<div class="plain_layout"><a></a><a id="magicparlabel-4762">&lt;description&gt;设置 hbase 数据库存放数据的目录,这里是放在hadoop hdfs上,这里要&gt;与hadoop的core-site.xml文件中的fs.default.name中的值一致,然后在后面添加自己的子&gt;目录，我这里定义是hbase&lt;/description&gt;</a></div>
<a></a>
<div class="plain_layout"><a></a><a id="magicparlabel-4763">&lt;/property&gt;</a></div>
<a></a>
<div class="plain_layout"><a></a><a id="magicparlabel-4764">&lt;property&gt;</a></div>
<a></a>
<div class="plain_layout"><a></a><a id="magicparlabel-4765">&lt;name&gt;hbase.cluster.distributed&lt;/name&gt;</a></div>
<a></a>
<div class="plain_layout"><a></a><a id="magicparlabel-4766">&lt;value&gt;true&lt;/value&gt;</a></div>
<a></a>
<div class="plain_layout"><a></a><a id="magicparlabel-4767">&lt;/property&gt;</a></div>
<a></a>
<div class="plain_layout"><a></a><a id="magicparlabel-4768">&lt;/configuration&gt;</a></div>
<a></a></div>
</div>
<a></a>
<h4 class="subsubsection_"><a></a><a id="magicparlabel-4770">3.分布式:</a></h4>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4771">3.1 hbase-site.xml配置</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4772">3.2 regionservices配置</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4773">3.3 ZooKeeper配置</a></div>
<a></a>
<h3 class="subsection_"><a></a><a id="magicparlabel-4774">启动:</a></h3>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4776"></a>
<div class="Boxed"><a></a>
<div class="plain_layout"><a></a><a id="magicparlabel-4775">$ ./start-hbase.sh</a></div>
<a></a></div>
</div>
<a></a>
<h4 class="subsubsection_"><a></a><a id="magicparlabel-4777">启动顺序：</a></h4>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4778">先启动Hadoop——&gt;再启动Hbase。</a></div>
<a></a>
<h4 class="subsubsection_"><a></a><a id="magicparlabel-4779">关闭顺序：</a></h4>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4780">先关闭Hbase——&gt;再关闭Hadoop。</a></div>
<a></a>
<h3 class="subsection_"><a></a><a id="magicparlabel-4781">HBase Shell:</a></h3>
<a></a>
<h4 class="subsubsection_"><a></a><a id="magicparlabel-4782">1.进入hbase shell console</a></h4>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4786"></a>
<div class="Boxed"><a></a>
<div class="plain_layout"><a></a><a id="magicparlabel-4783">$ cd $HBASE_HOME/bin</a></div>
<a></a>
<div class="plain_layout"><a></a><a id="magicparlabel-4784">$ ./hbase shell</a></div>
<a></a>
<div class="plain_layout"><a></a><a id="magicparlabel-4785">hbase(main)&gt;</a></div>
<a></a></div>
</div>
<a></a>
<h4 class="subsubsection_"><a></a><a id="magicparlabel-4787">2.表的管理</a></h4>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4788">列出所有表</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4790"></a>
<div class="Boxed"><a></a>
<div class="plain_layout"><a></a><a id="magicparlabel-4789">hbase(main)&gt; list</a></div>
<a></a></div>
</div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4791">创建表</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4792"># 语法：create &lt;table&gt;, {NAME =&gt; &lt;family&gt;, VERSIONS =&gt; &lt;VERSIONS&gt;}</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4793"># 例如：创建表t1，有两个family name：f1，f2，且版本数均为2 ,下面两种方式都可以</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4796"></a>
<div class="Boxed"><a></a>
<div class="plain_layout"><a></a><a id="magicparlabel-4794">hbase(main)&gt; create 't1',{NAME =&gt; 'f1', VERSIONS =&gt; 2},{NAME =&gt; 'f2', VERSIONS =&gt; 2}</a></div>
<a></a>
<div class="plain_layout"><a></a><a id="magicparlabel-4795">hbase(main)&gt; create 't1','f1','f2','f3'</a></div>
<a></a></div>
</div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4797">删除表</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4798">分两步：首先disable，然后drop</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4799">例如：删除表t1</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4802"></a>
<div class="Boxed"><a></a>
<div class="plain_layout"><a></a><a id="magicparlabel-4800">hbase(main)&gt; disable 't1'</a></div>
<a></a>
<div class="plain_layout"><a></a><a id="magicparlabel-4801">hbase(main)&gt; drop 't1'</a></div>
<a></a></div>
</div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4803">查看表的结构</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4804"># 语法：describe &lt;table&gt;</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4805"># 例如：查看表t1的结构</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4807"></a>
<div class="Boxed"><a></a>
<div class="plain_layout"><a></a><a id="magicparlabel-4806">hbase(main)&gt; describe 't1'</a></div>
<a></a></div>
</div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4808">修改表结构 修改表结构必须先disable</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4809"># 语法：alter 't1', {NAME =&gt; 'f1'}, {NAME =&gt; 'f2', METHOD =&gt; 'delete'}</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4810"># 例如：修改表test1的cf的TTL为180天</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4814"></a>
<div class="Boxed"><a></a>
<div class="plain_layout"><a></a><a id="magicparlabel-4811">hbase(main)&gt; disable 'test1'</a></div>
<a></a>
<div class="plain_layout"><a></a><a id="magicparlabel-4812">hbase(main)&gt; alter 'test1',{NAME=&gt;'body',TTL=&gt;'15552000'},{NAME=&gt;'meta', TTL=&gt;'15552000'}</a></div>
<a></a>
<div class="plain_layout"><a></a><a id="magicparlabel-4813">hbase(main)&gt; enable 'test1'</a></div>
<a></a></div>
</div>
<a></a>
<h4 class="subsubsection_"><a></a><a id="magicparlabel-4815">3.表数据的增删改查</a></h4>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4816">添加数据:</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4817"># 语法：put &lt;table&gt;,&lt;rowkey&gt;,&lt;family:column&gt;,&lt;value&gt;,&lt;timestamp&gt;</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4818"># 例如：给表t1的添加一行记录：rowkey是rowkey001，family name：f1，column name：col1，value：value01，timestamp：系统默认</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4820"></a>
<div class="Boxed"><a></a>
<div class="plain_layout"><a></a><a id="magicparlabel-4819">hbase(main)&gt; put 't1','rowkey001','f1:col1','value01'-</a></div>
<a></a></div>
</div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4821">删除数据:</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4822">删除行中的某个列值</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4823"># 语法：delete &lt;table&gt;, &lt;rowkey&gt;, &lt;family:column&gt; , &lt;timestamp&gt;,必须指定列名</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4824"># 例如：删除表t1，rowkey001中的f1:col1的数据</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4826"></a>
<div class="Boxed"><a></a>
<div class="plain_layout"><a></a><a id="magicparlabel-4825">hbase(main)&gt; delete 't1','rowkey001','f1:col1'</a></div>
<a></a></div>
</div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4827">删除行</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4828"># 语法：deleteall &lt;table&gt;, &lt;rowkey&gt;, &lt;family:column&gt; , &lt;timestamp&gt;，可以不指定列名，删除整行数据</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4829"># 例如：删除表t1，rowk001的数据</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4831"></a>
<div class="Boxed"><a></a>
<div class="plain_layout"><a></a><a id="magicparlabel-4830">hbase(main)&gt; deleteall 't1','rowkey001'</a></div>
<a></a></div>
</div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4832">删除表中的所有数据</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4833"># 语法： truncate &lt;table&gt;</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4834"># 其具体过程是：disable table -&gt; drop table -&gt; create table 就是删除再重建</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4835"># 例如：删除表t1的所有数据</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4837"></a>
<div class="Boxed"><a></a>
<div class="plain_layout"><a></a><a id="magicparlabel-4836">hbase(main)&gt; truncate 't1'</a></div>
<a></a></div>
</div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4838">查询数据:</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4839">查询某行记录</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4841"></a>
<div class="Boxed"><a></a>
<div class="plain_layout"><a></a><a id="magicparlabel-4840">hbase(main)&gt; get 't1','rowkey001', 'f1:col1'</a></div>
<a></a></div>
</div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4842">扫描表</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4843"># 例如：扫描表t1的前5条数据</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4845"></a>
<div class="Boxed"><a></a>
<div class="plain_layout"><a></a><a id="magicparlabel-4844">hbase(main)&gt; scan 't1',{LIMIT=&gt;5}</a></div>
<a></a></div>
</div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4846">查询表中的数据行数</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4847"># 语法：count &lt;table&gt;, {INTERVAL =&gt; intervalNum, CACHE =&gt; cacheNum}</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4848"># INTERVAL设置多少行显示一次及对应的rowkey，默认1000；CACHE每次去取的缓存区大小，默认是10，调整该参数可提高查询速度</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4849"># 例如，查询表t1中的行数，每100条显示一次，缓存区为500</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4851"></a>
<div class="Boxed"><a></a>
<div class="plain_layout"><a></a><a id="magicparlabel-4850">hbase(main)&gt; count 't1', {INTERVAL =&gt; 100, CACHE =&gt; 500}</a></div>
<a></a></div>
</div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4852">修改数据</a></div>
<a></a>
<h3 class="subsection_"><a></a><a id="magicparlabel-4853">4.其他</a></h3>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4854">status 看状态</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4855">exists 是否存在</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4856">exit 离开</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4857">tools 查看所支持的工具</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4858">version 看版本</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4859">shutdown 关闭群集(不是退出)</a></div>
<a></a>
<h2 class="section_"><a></a><a id="magicparlabel-4860">结构体系</a></h2>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4861">HBase的服务器体系结构遵从简单的主从服务器架构，它由HRegion服务器（HRegion Server）和HBase Master服务器（HBase Master Server）构成。HBase Master服务器负责管理所有的HRegion服务器，而HBase中所有的服务器都是通过ZooKeeper来进行协调并处理HBase服务器运行期间可能遇到的错误。HBase
 Master服务器本身并不存储HBase中的任何数据，HBase逻辑上的表可能会被划分成多个HRegion，然后存储在HRegion服务器群中。HBase Master服务器中存储的是从数据到HRegion服务器的映射。因此，HBase体系结构如图2所示。</a></div>
<a></a>
<div class="standard"><a></a><br></div>
<a id="magicparlabel-4862"></a>
<h3 class="subsection_"><a></a><a id="magicparlabel-4863">HRegion:</a></h3>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4864">当表的大小超过设置值的时候， HBase会自动将表划分为不同的区域 ，每个区域包含 所有行的一个子集 。对用户来说，每个表是一堆数据的集合，靠 主键来区分 。从物理上来说，一张 表是被拆分成多块 ，每块就是一个HRegion。我们用
 表名+开始/结束 主键来区分每一个HRegion。一个HRegion会保存一个表里面某段连续的数据，从开始主键到结束主键，一张完整的表格是保存在 多个HRegion 上面的。</a></div>
<a></a>
<h3 class="subsection_"><a></a><a id="magicparlabel-4865">HRegion服务器:</a></h3>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4866">所有数据都保存在Hbase分布式文件系统(HDFS)上面，用户通过一系列HRegion服务器获取这些数据。包括两大部分:HLOG部分(存储数据日志)和HRegion部分(储存数据)。说明:每一个HRegion又由很多的Store组成，
 每一个Store存储的实际上是一个列族（ColumnFamily）下的数据 。每一个Store包含了多个StoreFile，StoreFile负责的是实际的数据存储，为 HBase中最小的存储单元 。</a></div>
<a></a>
<h3 class="subsection_"><a></a><a id="magicparlabel-4867">HBase Master服务器:</a></h3>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4868">每台HRegion服务器都会和HMaster服务器通信，HMaster的主要任务就是 告诉每个HRegion服务器它要维护哪些HRegion 。</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4869">HMaster在功能上主要负责Table和HRegion的管理工作，具体包括：</a></div>
<a></a>
<a></a><a id="magicparlabel-4870"></a>
管理用户对table的增、删、改、查操作；管理HRegion服务器的负载均衡，调整HRegion分布； 在HRegion分裂后，负责新HRegion的分配； 在HRegion服务器停机后，负责失效HRegion服务器上的HRegion迁移<a></a>
<div class="standard"><a></a><a id="magicparlabel-4874">说明:</a></div>
<a></a>
<a></a><a id="magicparlabel-4875"></a>
对于数据操作，HBase中不涉及 数据的直接删除和更新操作 ， 所有的数据均通过追加的方式进行更新 。数据的删除和更新在HBase合并（compact）的时候进行。当Store中StoreFile的数量超过设定的 阀值 时将 触发合并 操作，该操作会把 多个StoreFile文件合并成一个StoreFile 。当用户需要更新数据的时候，数据会被分配到对应的HRegion服务器上提交修改。 数据首先被提交到HLOG文件里面 ，在写入HLOG之后，commit()调用才会将其返回给客户端。HLOG文件用于故障恢复。例如某一台HRegionServer发生故障时，那么它所维护的HRegion会被重新分配到新的机器上。这时HLOG会按照HRegion进行划分。新的机器在加载HRegion的时候可以通过HLOG对数据进行恢复。当一个HRegion变得过于巨大、超过了设定的阀值时，HRegion服务器会调用HRegion.closeAndSplit()，将此HRegion拆分为两个，并且报告主服务器让它决定由哪台HRegion服务器来存放新的HRegion。这个拆分过程十分迅速，因为两个新的HRegion最初只是保留原来HRegionFile文件的引用。这时旧的HRegion会处于停止服务的状态，当新的HRegion拆分完成并且把引用删除了以后，旧的HRegion才会删除。另外，两个HRegion可以通过调用HRegion.closeAndMerge()合并成一个新的HRegion，当前版本下进行此操作需要两台HRegion服务器都停机。<a></a>
<h3 class="subsection_"><a></a><a id="magicparlabel-4879">ROOT表和META表:</a></h3>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4880">HRegion是按照表名和主键范围来区分，由于主键范围是连续的，所以一般用开始主键就可以表示相应的HRegion。一个HRegion的唯一标识为： 表名+开始主键+唯一ID（tableName+startKey+regionId）。</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4881">通过这个标识符来区分不同的HRegion，这些数据就是元数据（META），而元数据本身也是被保存在HRegion里面的， 所以我们称这个表为元数据表（META Table），里面保存的就是HRegion标识符和实际HRegion服务器的映射关系
 。</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4882">ROOT表包含 META表所在的区域列表 ，META表包含所有 用户的空间区域列表 ，以及HRegion服务器地址。客户端能够缓存所有已知的ROOT表和META表，从而提高访问的效率 。</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4883">启动顺序:在HBase启动的时候，HMaster就会扫描ROOT表，因为这个表只会有一个HRegion，所以这个HRegion的名字是被写死的。当然要把ROOT表分配到一个HRegion服务器中需要一定的时间。</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4884">当ROOT表被分配好之后，HMaster就会扫描ROOT表，获取META表的名字和位置，然后把META表分配到不同的HRegion服务器中，最后就是扫描META表，找到所有HRegion区域的信息，把它们分配给不同的HRegion服务器。</a></div>
<a></a>
<h3 class="subsection_"><a></a><a id="magicparlabel-4885">ZooKeeper:</a></h3>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4886">作用:</a></div>
<a></a>
<a></a><a id="magicparlabel-4887"></a>
ZooKeeper存储的是HBase中ROOT表和META表的位置。ZooKeeper还负责监控各个机器的状态（每台机器到ZooKeeper中注册一个实例）当HBase Master发生故障的时候，ZooKeeper还负责HBase Master的恢复工作，能够保证在同一时刻系统中只有一台HBase Master提供服务。<a></a>
<h2 class="section_"><a></a><a id="magicparlabel-4890">数据模型</a></h2>
<div><a><img src="https://img-blog.csdn.net/20161127100100906?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br></a></div>
<a></a>
<div class="standard"><a></a><br></div>
<a id="magicparlabel-4891"></a>
<div class="standard"><a></a><a id="magicparlabel-4892">HBase 数据被建模为多维映射，其中值（表单元）通过 4 个键索引：</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4893">value = Map(TableName, RowKey, ColumnKey, Timestamp)即 [行键，列族，列限定符，时间版本]</a></div>
<a></a>
<div class="standard"><a></a><a id="magicparlabel-4894">再来一张图：</a></div>
<a></a>
<div class="standard"><a></a><img src="https://img-blog.csdn.net/20161127100145955?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br></div>
<a id="magicparlabel-4895"></a>
<div class="standard"><a></a><a id="magicparlabel-4896">说明:这是我上面说的HBase存储的数据介于映射（key/value）和关系型数据之间,于传统的数据库是不同的。当然应用也就不一样</a></div>
<a></a>
            </div>
                </div>