---
layout:     post
title:      技术分享丨关于 Hadoop 的那些事儿
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<div><br><br><p>介绍Hadoop的文章已经很多了，个人感觉这一篇还是写得不错的：</p>
<p>Hadoop以前是，现在仍然是大数据批处理领域的王者。Hadoop逐渐完善的生态体系，也让Hadoop广泛应用于各行业。<br></p>
<p>本文首先介绍Hadoop的架构和原理，侧重于Map-Reduce计算部分。再以简单示例带大家入门。</p>
<h2><strong>一、Hadoop 介绍</strong></h2>
<p><strong><u>Hadoop 是什么</u></strong><br></p>
<p>Hadoop是一个开发和运行大规模数据分析程序的软件平台,是隶属Apache的一个用java语言实现的开源软件框架，在大量普通服务器组成的集群中对海量数据进行分布式计算。<br></p>
<ul><li>
<p>a java based software framework for easily writing applications</p>
</li><li>
<p>which process vast amounts of data (multi-petabyte data-sets)in-parallel on large clusters (thousands of nodes) of commodity hardware</p>
</li><li>
<p>in a reliable, fault-tolerant manner.</p>
</li></ul><p><strong><u>Hadoop 生态圈</u></strong></p>
<img src="https://pic2.zhimg.com/682d941403b4e202e36d70514c8279cd_b.jpg" class="origin_image zh-lightbox-thumb" width="640" alt=""><blockquote>
<p><strong>HDFS</strong>——Hadoop生态圈的基本组成部分是Hadoop分布式文件系统（HDFS）。HDFS是一种数据分布式保存机制，数据被保存在计算机集群上。HDFS为HBase等系统提供了基础。</p>
<p><strong>MapReduce</strong>——Hadoop的主要执行框架是MapReduce，它是一个分布式、并行处理的编程模型。MapReduce把任务分为map(映射)阶段和reduce(化简)。开发人员基于存储在HDFS中数据，编写Hadoop的MapReduce任务。由于MapReduce工作原理的特性， Hadoop能以并行的方式访问数据，从而实现快速访问数据。</p>
<p><strong>Hbase</strong>——HBase是一个建立在HDFS之上，面向列的NoSQL数据库，用于快速读/写大量数据。HBase使用Zookeeper进行管理，确保所有组件都正常运行。</p>
<p><strong>Zookeeper</strong>——用于Hadoop的分布式协调服务。Hadoop的许多组件依赖于Zookeeper，它运行在计算机集群上面，用于管理Hadoop操作。</p>
<p><strong>Oozie</strong>——Oozie是一个可扩展的工作体系，集成于Hadoop的堆栈，用于协调多个MapReduce作业的执行。它能够管理一个复杂的系统，基于外部事件来执行，外部事件包括数据的定时和数据的产出。</p>
<p><strong>Pig</strong>——它是MapReduce编程的复杂性的抽象。Pig平台包括运行环境和用于分析Hadoop数据集的脚本语言(Pig Latin)。其编译器将PigLatin翻译成MapReduce程序序列。</p>
<p><strong>Hive</strong>——Hive类似于SQL高级语言，用于运行基于Hadoop的查询语句，Hive让不熟悉MapReduce开发人员也能编写数据查询语句，然后这些语句被翻译为Hadoop上面的MapReduce任务。像Pig一样，Hive作为一个抽象层工具，吸引了很多熟悉SQL而不是Java编程的数据分析师。</p>
</blockquote>
<p>Hadoop的生态圈还包括以下几个框架，用来与其它企业融合：</p>
<blockquote>
<p><strong>Sqoop</strong>是一个连接工具，用于在关系数据库、数据仓库和Hadoop之间转移数据。Sqoop利用数据库技术描述架构，进行数据的导入/导出；利用MapReduce实现并行化运行和容错技术。</p>
<p><strong>Flume</strong>提供了分布式、可靠、高效的服务，用于收集、汇总大数据，并将单台计算机的大量数据转移到HDFS。它基于一个简单而灵活的架构，并提供了数据流的流。它利用简单的可扩展的数据模型，将企业中多台计算机上的数据转移到Hadoop。</p>
</blockquote>
<p><strong><u>Hadoop历史</u></strong></p>
<p>• Apache社区的开源分布式系统</p>
<p>• 2003, 2004 Google发布GFS/ MapReduce论文</p>
<p>• 2006, Doug Cutting创立Apache Hadoop</p>
<p>• 2008, release 0.19.0</p>
<p>• 2009, release 0.20.0 -&gt; 0.20.20x （生产系统稳定版本）</p>
<p>• 201111, release 0.23.0 alpha -&gt; 20120523 2.0.0 alpha</p>
<p>• 201112, 0.20.20x -&gt; release 1.0.0</p>
<p>• 商业公司支持：Cloudera &amp; Hortonworks</p>
<p><strong><u>Who use Hadoop</u></strong></p>
<img src="https://pic3.zhimg.com/cceb854d823166d00336b6861149bdc2_b.jpg" class="origin_image zh-lightbox-thumb" width="640" alt=""><p><strong><u>Hadoop程序的研发流程</u></strong></p>
<p><img src="https://pic3.zhimg.com/b8d55dc302166c224db403592121dfe2_b.jpg" class="origin_image zh-lightbox-thumb" width="640" alt=""><strong><u>Hadoop的构架</u></strong><br></p>
<p>第一代Hadoop架构如下：<br></p>
<img src="https://pic2.zhimg.com/f3ae72bdd4e94d34fc85579d62450581_b.jpg" class="origin_image zh-lightbox-thumb" width="640" alt=""><p><strong><u>HDFS介绍</u></strong></p>
<img src="https://pic3.zhimg.com/9cc6522e2221aadeb1781baab07f04fa_b.jpg" class="origin_image zh-lightbox-thumb" width="640" alt=""><p><strong><u>HDFS基本操作</u></strong></p>
<blockquote>
<p>hadoop fs –ls /user/ <br></p>
<p>显示hdfs指定路径下的文件和文件夹</p>
<p>hadoop fs –putmy_file /data/</p>
<p>将本地文件上传到hdfs</p>
<p>hadoop fs –get/tmp /data/my_file</p>
<p>将hdfs上的文件下载到本地<br>
hadoop fs –cat /tmp /data/my_file</p>
<p>查看dfs中的文本文件内容</p>
<p>hadoop fs –text /tmp /data/my_sequence_file</p>
<p>查看dfs中的sequence文件内容</p>
<p>hadoop fs –rm /tmp/data/my_file</p>
<p>将hdfs上的文件删除</p>
</blockquote>
<h2><strong>二、MapReduce 原理</strong></h2>
<p><strong><u>MapReduce – 模型原理</u></strong></p>
<img src="https://pic1.zhimg.com/340b8be38b47151be13603751c536d20_b.jpg" class="origin_image zh-lightbox-thumb" width="640" alt=""><p>原理是分治思想，把一件事情先分解处理，然后再把处理后的结果合并。Map阶段就是分解处理，reduce阶段合并：</p>
<p><strong>分治思想</strong><br></p>
<ul><li>
<p>分解、求解</p>
</li><li>
<p>合并</p>
</li></ul><p><strong>MapReduce映射</strong><br></p>
<ul><li>
<p>分：map</p>
</li><li>
<p>合：reduce</p>
</li></ul><p>举个例子，有一堆的商品，共M种，需要数一下每种商品的个数。<br></p>
<p>传统的做法是，找一个人，数所有的商品，得出结果，如果觉得不够快，那就换一个数的更快的人（分布式计算出现以前的思路）。随着商品数量的增加，单个人数商品的做法，已不太可行。<br></p>
<p>基于MR计算模型，可以采用的方案是：找N个人，每人分一堆商品，每人都各自统计自己的商品，M种中每种有多少；然后再找M个人，每个人负责一种商品，把前面N个人的统计结果进行汇总。<br></p>
<p>总之，数据可以切割的计算，都可以用 Hadoop 实现。<br></p>
<p><strong><u>MapReduce – 调度框架</u></strong><br></p>
<img src="https://pic1.zhimg.com/830271410c9de26bf240afc3ecbff6f8_b.jpg" class="origin_image zh-lightbox-thumb" width="640" alt=""><p>这张图展示了MapReduce的调度框架，主要有这几个角色：JobClient、JobTracker、TaskTracker，这里面的JT是一个单Master节点，TT是部署在每台计算节点上的一个Service。</p>
<p>其中JobClient负责根据用户指定的参数，生成一个MapReduce作业，然后把作业提交到JobTracker，JT负责把Job所有的Task调度到TT上。<br></p>
<p><strong><u>MapReduce – 执行层</u></strong><br></p>
<img src="https://pic1.zhimg.com/073bcd96e7d57955c980b6c17df7fd28_b.jpg" class="origin_image zh-lightbox-thumb" width="640" alt=""><p>这个图展示了一个Mapreduce的执行过程，是一个具体的执行单元内（Task）发生的事情。左边是Map Task，map task的输入是一个数据分片，叫一个split。</p>
<p>输入数据由 MapReduce 框架解析成一条条记录，这是一个按照用户指定的规则（或者是默认规则）读取数据的过程。</p>
<p>读取出的数据，将他们一条条的传给map处理，就是大家写的mapper函数</p>
<p>经过mapper 处理后，又生成一条新记录，写在mapper所在机器的本地磁盘，分Partition写入，不同Partition数据会交由不同reduce处理；</p>
<p>右边是Reduce Task，Rt运行起来后先做的事情就是把属于自己的那一份份数据给拉到自己本地来，这个过程叫shuffle，shuffle的具体过程很复杂，其中包括各种异常处理，性能优化点也比较多。</p>
<p>数据shuffle到reduce本地之后，和map类似，一条条交给reduce函数处理，然后按照用户指定的格式写到HDFS指定目录。</p>
<p><strong><u>MapReduce – 开发方式</u></strong></p>
<p>1.基于java开发<br></p>
<p>--优势：原生接口，功能完备，性能较高</p>
<p>2.Streaming开发</p>
<p>--优势：不限语言，实现简单</p>
<h2><strong>三、Streaming 作业举例</strong></h2>
<p><strong><u>Streaming 原理</u></strong></p>
<img src="https://pic2.zhimg.com/80cec6c4a8d0da8a61b0a18bf7277981_b.jpg" class="origin_image zh-lightbox-thumb" width="640" alt=""><p>Hadoop Streaming通过标准输入将数据传递给用户实现的map/reduce程序，map/reduce程序使用标准输出将数据返回给Hadoop框架。<br></p>
<p><strong>词<u>频统计 – 示例</u></strong></p>
<img src="https://pic4.zhimg.com/9c5f76d93951cddd7d854ef68d33e94f_b.jpg" class="origin_image zh-lightbox-thumb" width="640" alt=""><p><strong><u>词频统计 – Shell实现</u></strong></p>
<img src="https://pic4.zhimg.com/4a8a3884f1564eebc39a8c84d4974da7_b.jpg" class="origin_image zh-lightbox-thumb" width="628" alt=""><img src="https://pic4.zhimg.com/aab3b2855280ec5595603021168938d7_b.jpg" class="content_image" width="338" alt=""><img src="https://pic3.zhimg.com/8d8489812ce13b6101d09d541bf23e82_b.jpg" class="origin_image zh-lightbox-thumb" width="516" alt=""><p><strong><u>Streaming - 本地调试</u></strong></p>
<p>Streaming最大的优点就是写起来方便，Streaming作业的本地调试的方法如下：<br></p>
<p>把输入数据用cat命令送到管道，管道另一头接mapper程序，输出重定向到文件，用sort命令把输出数据排序。然后再把以排过序的数据通过管道送给reducer程序，最后保存结果得到输出数据。</p>
<blockquote>
<p>map</p>
<ul><li>
<p>cat input | sh mapper.sh &gt; map.out</p>
</li></ul><p>sort</p>
<ul><li>
<p>sort map.out &gt; map.sort</p>
</li></ul><p>reduce</p>
<ul><li>
<p>cat map.sort | sh reducer.sh &gt; reduce.out</p>
</li></ul></blockquote>
<h2><strong>四、第二代 Hadoop 架构</strong></h2>
<p><strong><u>Hadoop1 存在的问题</u></strong></p>
<p>Hadoop1存在的问题，主要有这么几方面：<br></p>
<p>1、可用性，JobTracker是单点，升级中断服务，正在运行的作业会失败；<br></p>
<p>2、扩展性，因为JobTracker单点性能瓶颈，单机群最大规模也就是几千台</p>
<p>3、按槽位分task，集群整体资源利用率不高，因为每台机器上运行多少个Task是固定的，但是每个Task消耗的资源，其实差异很大。</p>
<p><strong><u>Hadoop2与Hadoop1的对比 </u></strong></p>
<img src="https://pic2.zhimg.com/3f28596fc3c84f7e07b978495d97ef31_b.jpg" class="origin_image zh-lightbox-thumb" width="640" alt=""><p><strong><u>Hadoop2 计算架构 </u></strong></p>
<img src="https://pic4.zhimg.com/956771ddebab2b1621ae2df8051e7eb7_b.jpg" class="origin_image zh-lightbox-thumb" width="640" alt=""><p>Hadoop1计算部分，主要有两个角色，JT和TT，其中JT是单点。</p>
<p>Hadoop2把单点的JT角色做了分布式化：</p>
<p>分布式化成包括RM 和AM两个角色，其中RM是单点，而AM是每个job一个，不同job之间是独立的AM。</p>
<p>这样，作业级别的调度在RM，Task级别的调度在AM，大大减轻了RM的压力：</p>
<p><strong>RM</strong>：资源管理</p>
<p><strong>AM</strong>：负责具体某一个作业的运行，申请Task资源，调度Task调度</p>
<p><strong>AS</strong>：相当于之前的TT，但是每个机器上可以同时运行多个AS，每个AS同时只运行一个Task，理解为一个槽位。</p>
<p>Hadoo2的主要优势有：</p>
<p>1、支持热升级</p>
<ul><li>
<p>中断时间很短，对用户基本透明</p>
</li></ul><p>2、支持更大规模的集群</p>
<ul><li>
<p>集群规模可超过万台</p>
</li></ul><p>3、更高的集群资源利用率</p>
<ul><li>
<p>淡化槽位概念，更细粒度资源&lt;cpu, memory&gt;</p>
</li></ul><div><br></div>
</div>
<div>作者：馨宁<br>
链接：https://zhuanlan.zhihu.com/p/20953323<br>
来源：知乎<br></div>
            </div>
                </div>