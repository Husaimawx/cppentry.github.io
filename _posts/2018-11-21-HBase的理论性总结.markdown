---
layout:     post
title:      HBase的理论性总结
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/bingdongguke/article/details/14101565				</div>
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<p><span style="font-size:18px;color:#FF6600;"><strong>1.HBase的体系结构</strong></span></p>
<p><span style="font-size:14px;"><strong><span style="color:#6666CC;">主从服务器架构，有HReginon群和HBase Master服务器构成。HBase Master负责管理所有的HRegion服务器，所有的HRegion服务器通过Zookeeper来进行协调处理HBase 服务器运行期间的错误。HBase Master 不保存HBase中的任何数据，HBase 逻辑上表会被划分为多个HRgion，然后存储在HRgion服务器群。HBase
 Master存储的是从数据到HRegion 服务器的映射。</span></strong></span></p>
<p><img src="https://img-blog.csdn.net/20131103104031781?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemN3ZmVuZ2Jpbmdkb25nZ3VrZQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p><span style="font-size:14px;color:#6666CC;"><strong>HBase表超设置值得大小时，会自动划分不同的区域，每个区域包含所有行的一个子集。从物理上来说，一张表被分成了多个块，每个块就是一个HRegion。用 表明+开始/结束主键来区分HRegion。一个HRegion会保存一个表里面的某段连续的数据，从开始主键到结束主键。一张完整的表示存在多个HRegion上面的。</strong></span></p>
<p><span style="font-size:14px;color:#6666CC;"><strong>一台机器一般只运行一个HRegion服务器，每一个区段的HRegion只会被一个HRegion服务器维护。</strong></span></p>
<p><span style="font-size:14px;color:#6666CC;"><strong>HRegion包含HLOG和HRegion。HLOG用来存储数据日志，采用先写日志的方式。HRegion存储实际的数据。HRegion由很多Store和MemStore组成，每个Store存储一个列簇数据（ColumnFamily）。数据来时先到达MemStore，超过阈值就会存储到相应的StoreFile（HFile）中。StoreFile（Hfile）为HBase中最小的单元。</strong></span></p>
<p><span style="font-size:14px;color:#6666CC;"><strong>HLOG 控制提交和恢复</strong></span></p>
<p><span style="font-size:14px;color:#6666CC;"><strong>HBase Master服务器的职责：</strong></span></p>
<p><span style="font-size:14px;color:#6666CC;"><strong>管理用户对Table的增删改查操作</strong></span></p>
<p><span style="font-size:14px;color:#6666CC;"><strong>管理HRegion服务器的负载均衡，调整HRegion分布</strong></span></p>
<p><span style="font-size:14px;color:#6666CC;"><strong>在HRegion分裂后，给新<span style="font-size:14px;color:#6666CC;"><strong>HRegion</strong></span>分配</strong></span></p>
<p><span style="font-size:14px;color:#6666CC;"><strong>在HRegion服务器停机后，负责失效HRegion服务器上的HRegion迁移</strong></span></p>
<p><span style="font-size:14px;color:#6666CC;"><strong>ROOT表和Meta表</strong></span></p>
<p><span style="font-size:14px;color:#6666CC;"><strong>主键范围是连续的，一般开始主键就可以表示相应的HRegion，每个HRegion有一个‘hregionId’，HRegion表示：表明+开始主键+ID 这就是元数据Meta。HRegion里面保存的这系列元素叫Meta表。</strong></span></p>
<p><span style="font-size:14px;color:#6666CC;"><strong>Root table保存了所有元数据的位置，Root 表不能被分割，永远只存在一个HRegion</strong></span></p>
<p><span style="font-size:14px;color:#6666CC;"><strong>元数据和跟数据表每行都保存了一个列簇：</strong></span></p>
<p><span style="font-size:14px;color:#6666CC;"><strong>    info:regioninfo(一个串行化的HRegionInfo对象)</strong></span></p>
<p><span style="font-size:14px;color:#6666CC;"><strong>    info:server(服务器地址字符串HServerAddress.toString())</strong></span></p>
<p><span style="font-size:14px;color:#6666CC;"><strong>    info:startcode(用来给主服务器判断，HRegion服务器信息是否更改)</strong></span></p>
<p><span style="font-size:14px;color:#6666CC;"><strong>客户端根据Root表地址，就没必要连接主服务器，只处理超时HRegion服务器，再重启时候返回HRegion地址</strong></span></p>
<p><span style="font-size:18px;color:#FF6600;"><strong>2，HBase数据模型</strong></span></p>
<p><span style="font-size:14px;color:#6666CC;"><strong>数据模型----&gt;(java类)<br></strong></span></p>
<p><span style="font-size:14px;color:#6666CC;"><strong>他是稀疏存储。索引是，行关键字、列关键字和时间戳。HBase里的数据都是字符串没有类型</strong></span></p>
<p><span style="font-size:14px;color:#6666CC;"><strong>列名字的格式 family:qualifier</strong></span></p>
<p><span style="font-size:14px;color:#6666CC;"><strong>Hbase的操作是琐行的</strong></span></p>
<p><span style="font-size:14px;color:#6666CC;"><strong>HBase说有数据库的更新都有一个时间戳标记。HBase根据这个作为版本保留依据。</strong></span></p>
<p><span style="font-size:14px;color:#6666CC;"><strong>概念视图</strong></span></p>
<p><span style="font-size:14px;color:#6666CC;"><strong><img src="https://img-blog.csdn.net/20131103112003078?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemN3ZmVuZ2Jpbmdkb25nZ3VrZQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></strong></span></p>
<p><span style="font-size:18px;color:#FF6600;"><strong>3.HBase 与RDBMS</strong></span></p>
<p><span style="font-size:14px;color:#6666CC;"><strong>数据类型：Hbase只有字符串类型，所有类型都交由用户自己处理。关系型数据库有丰富的类型选择和存储方式</strong></span></p>
<p><span style="font-size:14px;color:#6666CC;"><strong>数据操作：HBase只是简单地插入，查询，删除，清空等操作。表和表之间是分离的。</strong></span></p>
<p><span style="font-size:14px;color:#6666CC;"><strong>存储模式：HBase是基于列存储的，每个列簇有几个文件保存。传统数据库是基于表格和行模式存储</strong></span></p>
<p><span style="font-size:14px;color:#6666CC;"><strong>数据维护：HBase的更新，是添加新版本的数据，而不是关系数据库的替换更改</strong></span></p>
<p><span style="font-size:14px;color:#6666CC;"><strong>可伸缩性：可以比较轻松的增加删除硬件容错性比较高，关系型数据库可能要靠中间件</strong></span></p>
<p><span style="font-size:14px;color:#6666CC;"><strong>HBase更适合的是互联网应用需求和海量数据存储。比较适合开发wiki,archiveorg 类型的服务</strong></span></p>
<p><br></p>
<p><span style="font-size:18px;color:#FF6600;"><strong>4.与客户端的交互模式</strong></span></p>
<p><span style="font-size:14px;color:#6666CC;"><strong>分别是java API，Rest和Thrift接口<br></strong></span></p>
<p><span style="font-size:14px;color:#6666CC;"><strong><br></strong></span></p>
            </div>
                </div>