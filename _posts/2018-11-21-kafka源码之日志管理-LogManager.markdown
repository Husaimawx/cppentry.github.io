---
layout:     post
title:      kafka源码之日志管理-LogManager
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/u014393917/article/details/52042966				</div>
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<h1><strong>LogManager</strong></h1>
<p>说明<span style="font-family:Times New Roman">,LogManager</span><span style="font-family:SimSun">实例的生成依赖于</span><span style="font-family:Times New Roman">KafkaScheduler</span><span style="font-family:SimSun">的后台调度管理组件</span><span style="font-family:Times New Roman">,</span><span style="font-family:SimSun">这个组件用于管理各</span><span style="font-family:Times New Roman">partition</span><span style="font-family:SimSun">的消息记录下</span><span style="font-family:Times New Roman">index</span><span style="font-family:SimSun">的信息，包含每个</span><span style="font-family:Times New Roman">Partition</span><span style="font-family:SimSun">的</span><span style="font-family:Times New Roman">Log,segment</span><span style="font-family:SimSun">等的管理。</span></p>
<h2><strong><em>实例创建与启动</em></strong></h2>
<p>在<span style="font-family:Times New Roman">KafkaServer</span><span style="font-family:SimSun">的</span><span style="font-family:Times New Roman">startup</span><span style="font-family:SimSun">函数中通过调用</span><span style="color:#000000; background:rgb(255,255,255)">createLogManager函数来完成实例的函数,</span></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0080; background:rgb(255,255,255)">private def </span></strong><span style="color:#000000; background:rgb(255,255,255)">createLogManager(zkClient: ZkClient</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">brokerState: BrokerState)</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">: LogManager = {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">defaultProps = KafkaServer.</span><em><span style="color:#000000; background:rgb(255,255,255)">copyKafkaConfigToLog</span></em><span style="color:#000000; background:rgb(255,255,255)">(config)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">defaultLogConfig = </span><em><span style="color:#000000; background:rgb(255,255,255)">LogConfig</span></em><span style="color:#000000; background:rgb(255,255,255)">(defaultProps)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">从zk中/config/topics找对应的topic的特殊配置的配置信息,如果没有,直接使用默认的配置.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">configs = AdminUtils.</span><em><span style="color:#000000; background:rgb(255,255,255)">fetchAllTopicConfigs</span></em><span style="color:#000000; background:rgb(255,255,255)">(</span><em><span style="color:#66e7a; background:rgb(255,255,255)">zkUtils</span></em><span style="color:#000000; background:rgb(255,255,255)">).mapValues(</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">         LogConfig.</span><em><span style="color:#000000; background:rgb(255,255,255)">fromProps</span></em><span style="color:#000000; background:rgb(255,255,255)">(defaultProps</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">_))</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里需要的配置项:</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">配置项</span><strong><span style="color:#0800; background:rgb(255,255,255)">log.cleaner.threads</span></strong><span style="color:#000000; background:rgb(255,255,255)">,默认值1.用于配置清理过期日志的线程个数(用于日志合并).</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">配置项</span><strong><span style="color:#0800; background:rgb(255,255,255)">log.cleaner.dedupe.buffer.size</span></strong><span style="color:#000000; background:rgb(255,255,255)">,默认值128MB,用于配置清理过期数据的内存缓冲区,这个用于数据清理时,选择的压缩方式时,用于对重复数据的清理排序内存,用于日志合并.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">配置项</span><strong><span style="color:#0800; background:rgb(255,255,255)">log.cleaner.io.buffer.load.factor</span></strong><span style="color:#000000; background:rgb(255,255,255)">,默认值0.9,用于配置清理内存缓冲区的数据装载因子,主要是用于hash,这个因子越小,对桶的重复可能越小,但内存占用越大,用于日志合并.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">配置项</span><strong><span style="color:#0800; background:rgb(255,255,255)">log.cleaner.io.buffer.size</span></strong><span style="color:#000000; background:rgb(255,255,255)">,默认值512KB,用于清理过期数据的IO缓冲区大小,用于日志合并.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">配置项</span><strong><span style="color:#0800; background:rgb(255,255,255)">message.max.bytes</span></strong><span style="color:#000000; background:rgb(255,255,255)">,默认值</span><span style="color:#00ff; background:rgb(255,255,255)">1000012字节</span><span style="color:#000000; background:rgb(255,255,255)">,用于设置单条数据的最大大小.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">配置项</span><strong><span style="color:#0800; background:rgb(255,255,255)">log.cleaner.io.max.bytes.per.second</span></strong><span style="color:#000000; background:rgb(255,255,255)">,用于控制过期数据清理时的IO速度限制,默认不限制速度,用于日志合并.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">配置项</span><strong><span style="color:#0800; background:rgb(255,255,255)">log.cleaner.backoff.ms</span></strong><span style="color:#000000; background:rgb(255,255,255)">,用于定时检查日志是否需要清理的时间间隔(这个主要是在日志合并时使用),默认是15秒.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">配置项</span><strong><span style="color:#0800; background:rgb(228,228,255)">log.cleaner.enable</span></strong><span style="color:#000000; background:rgb(255,255,255)">,是否启用日志的定时清理,默认是启用.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">配置项</span><strong><span style="color:#0800; background:rgb(228,228,255)">num.recovery.threads.per.data.dir</span></strong><span style="color:#000000; background:rgb(255,255,255)">,用于在启动时,用于日志恢复的线程个数,默认是1.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">配置项</span><strong><span style="color:#0800; background:rgb(255,255,255)">log.flush.scheduler.interval.ms</span></strong><span style="color:#000000; background:rgb(255,255,255)">,用于检查日志是否被flush到磁盘,默认不检查.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">配置项</span><strong><span style="color:#0800; background:rgb(255,255,255)">log.flush.offset.checkpoint.interval.ms</span></strong><span style="color:#000000; background:rgb(255,255,255)">,用于定时对partition的offset进行保存的时间间隔,默认值60000ms.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">配置项</span><strong><span style="color:#0800; background:rgb(228,228,255)">log.retention.check.interval.ms</span></strong><span style="color:#000000; background:rgb(255,255,255)">,定期检查保留日志的时间间隔,默认值5分钟.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><em><span style="color:#808080; background:rgb(255,255,255)">// read the log configurations from zookeeper</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">  </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">cleanerConfig = </span><em><span style="color:#000000; background:rgb(255,255,255)">CleanerConfig</span></em><span style="color:#000000; background:rgb(255,255,255)">(numThreads = config.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">logCleanerThreads</span></em><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                   </span><span style="color:#000000; background:rgb(255,255,255)">dedupeBufferSize = config.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">logCleanerDedupeBufferSize</span></em><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                   </span><span style="color:#000000; background:rgb(255,255,255)">dedupeBufferLoadFactor = config.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">logCleanerDedupeBufferLoadFactor</span></em><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                   </span><span style="color:#000000; background:rgb(255,255,255)">ioBufferSize = config.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">logCleanerIoBufferSize</span></em><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                   </span><span style="color:#000000; background:rgb(255,255,255)">maxMessageSize = config.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">messageMaxBytes</span></em><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                   </span><span style="color:#000000; background:rgb(255,255,255)">maxIoBytesPerSecond = config.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">logCleanerIoMaxBytesPerSecond</span></em><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                   </span><span style="color:#000000; background:rgb(255,255,255)">backOffMs = config.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">logCleanerBackoffMs</span></em><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                   </span><span style="color:#000000; background:rgb(255,255,255)">enableCleaner = config.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">logCleanerEnable</span></em><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">LogManager(logDirs = config.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">logDirs</span></em><span style="color:#000000; background:rgb(255,255,255)">.map(</span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">File(_)).toArray</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                 </span><span style="color:#000000; background:rgb(255,255,255)">topicConfigs = configs</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                 </span><span style="color:#000000; background:rgb(255,255,255)">defaultConfig = defaultLogConfig</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                 </span><span style="color:#000000; background:rgb(255,255,255)">cleanerConfig = cleanerConfig</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                 </span><span style="color:#000000; background:rgb(255,255,255)">ioThreads = config.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">numRecoveryThreadsPerDataDir</span></em><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                 </span><span style="color:#000000; background:rgb(255,255,255)">flushCheckMs = config.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">logFlushSchedulerIntervalMs</span></em><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                 </span><span style="color:#000000; background:rgb(255,255,255)">flushCheckpointMs = config.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">logFlushOffsetCheckpointIntervalMs</span></em><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                 </span><span style="color:#000000; background:rgb(255,255,255)">retentionCheckMs = config.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">logCleanupIntervalMs</span></em><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                 </span><span style="color:#000000; background:rgb(255,255,255)">scheduler = </span><em><span style="color:#66e7a; background:rgb(255,255,255)">kafkaScheduler</span></em><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                 </span><span style="color:#000000; background:rgb(255,255,255)">brokerState = brokerState</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                 </span><span style="color:#000000; background:rgb(255,255,255)">time = time)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<h3><strong>实例初始化时的默认运行流程<span style="font-family:Arial">:</span></strong></h3>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><em><span style="color:#66e7a; background:rgb(255,255,255)">RecoveryPointCheckpointFile </span></em><span style="color:#000000; background:rgb(255,255,255)">= </span><strong><span style="color:#0800; background:rgb(255,255,255)">"recovery-point-offset-checkpoint"</span><span style="color:#0800; background:rgb(255,255,255)"><br>
</span><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><em><span style="color:#66e7a; background:rgb(255,255,255)">LockFile </span></em><span style="color:#000000; background:rgb(255,255,255)">= </span><strong><span style="color:#0800; background:rgb(255,255,255)">".lock"</span><span style="color:#0800; background:rgb(255,255,255)"><br>
</span><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><em><span style="color:#66e7a; background:rgb(255,255,255)">InitialTaskDelayMs </span></em><span style="color:#000000; background:rgb(255,255,255)">= </span><span style="color:#00ff; background:rgb(255,255,255)">30</span><span style="color:#000000; background:rgb(255,255,255)">*</span><span style="color:#00ff; background:rgb(255,255,255)">1000</span><span style="color:#00ff; background:rgb(255,255,255)"><br>
</span><strong><span style="color:#0080; background:rgb(255,255,255)">private val </span></strong><em><span style="color:#66e7a; background:rgb(255,255,255)">logCreationOrDeletionLock </span></em><span style="color:#000000; background:rgb(255,255,255)">= </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">Object</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><strong><span style="color:#0080; background:rgb(255,255,255)">private val </span></strong><em><span style="color:#66e7a; background:rgb(255,255,255)">logs </span></em><span style="color:#000000; background:rgb(255,255,255)">= </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">Pool[TopicAndPartition</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">Log]()</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">检查日志目录是否被创建,如果没有创建目录,同时检查目录是否有读写的权限.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">createAndValidateLogDirs(logDirs)</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">生成每个目录的.lock文件,并通过这个文件锁定这个目录.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><strong><span style="color:#0080; background:rgb(255,255,255)">private val </span></strong><em><span style="color:#66e7a; background:rgb(255,255,255)">dirLocks </span></em><span style="color:#000000; background:rgb(255,255,255)">= lockLogDirs(logDirs)</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">根据每个目录下的</span><strong><span style="color:#0800; background:rgb(255,255,255)">recovery-point-offset-checkpoint</span></strong><span style="color:#000000; background:rgb(255,255,255)">文件,生成出checkpoints的集合.这个用于定期更新每个partition的offset记录.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><strong><span style="color:#0080; background:rgb(255,255,255)">private val </span></strong><em><span style="color:#66e7a; background:rgb(255,255,255)">recoveryPointCheckpoints </span></em><span style="color:#000000; background:rgb(255,255,255)">= logDirs.map(</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">  dir =&gt; (dir</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">OffsetCheckpoint(</span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">File(dir</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><em><span style="color:#66e7a; background:rgb(255,255,255)">RecoveryPointCheckpointFile</span></em><span style="color:#000000; background:rgb(255,255,255)">)))</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">).toMap</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">根据每一个目录,生成一个线程池,线程池的大小是</span><strong><span style="color:#0800; background:rgb(228,228,255)">num.recovery.threads.per.data.dir</span></strong><span style="color:#000000; background:rgb(255,255,255)">配置的值,</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">加载每个目录下的offset-checkpoint的文件内容.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">读取每个目录下的topic-partitionid的目录,并根据zk中针对此topic的配置文件(或者默认的配置文件),通过offset-checkpoint中记录的此partition对应的offset,生成Log实例.并通过线程池来执行Log实例的加载,也就是日志的恢复.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">loadLogs()</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">如果启用了日志定时清理,生成LogCleaner实例,并根据配置的清理线程个数,生成对应个数的清理线程.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><em><span style="color:#808080; background:rgb(255,255,255)">// public, so we can access this from kafka.admin.DeleteTopicTest</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span></em><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><em><span style="color:#66e7a; background:rgb(255,255,255)">cleaner</span></em><span style="color:#000000; background:rgb(255,255,255)">: LogCleaner =</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">if</span></strong><span style="color:#000000; background:rgb(255,255,255)">(cleanerConfig.enableCleaner)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">LogCleaner(cleanerConfig</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">logDirs</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><em><span style="color:#66e7a; background:rgb(255,255,255)">logs</span></em><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">time = time)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">else</span><span style="color:#0080; background:rgb(255,255,255)"><br>
</span><span style="color:#0080; background:rgb(255,255,255)">    null</span></strong></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<h3><strong>加载<span style="font-family:Arial">partition</span><span style="font-family:SimSun">的日志的</span><span style="font-family:Arial">segment</span><span style="font-family:SimSun">的处理流程</span><span style="font-family:Arial">:</span></strong></h3>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">在LogManager实例生成时,会读取每个目录下的topic-partition的目录,并生成Log实例,Log实例初始化时,会读取segment的信息.</span></p>
<p style="background:rgb(255,255,255)"><em><span style="color:#808080; background:rgb(255,255,255)">/* the actual segments of the log */</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span></em><strong><span style="color:#0080; background:rgb(255,255,255)">private val </span></strong><em><span style="color:#66e7a; background:rgb(255,255,255)">segments</span></em><span style="color:#000000; background:rgb(255,255,255)">: ConcurrentNavigableMap[java.lang.Long</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">LogSegment] =</span></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">ConcurrentSkipListMap[java.lang.Long</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">LogSegment]</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里开始去加载对应的Partition的segments的信息.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">loadSegments()</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><em><span style="color:#808080; background:rgb(255,255,255)">/* Calculate the offset of the next message */</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span></em><span style="color:#80800; background:rgb(255,255,255)">@volatile </span><strong><span style="color:#0080; background:rgb(255,255,255)">var </span></strong><em><span style="color:#66e7a; background:rgb(255,255,255)">nextOffsetMetadata </span></em><span style="color:#000000; background:rgb(255,255,255)">= </span></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">LogOffsetMetadata(activeSegment.nextOffset()</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">activeSegment.baseOffset</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">    activeSegment.size.toInt)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><em><span style="color:#66e7a; background:rgb(255,255,255)">topicAndPartition</span></em><span style="color:#000000; background:rgb(255,255,255)">: TopicAndPartition = Log.</span><em><span style="color:#000000; background:rgb(255,255,255)">parseTopicPartitionName</span></em><span style="color:#000000; background:rgb(255,255,255)">(dir)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">info(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Completed load of log %s with log end offset %d"</span></strong><span style="color:#000000; background:rgb(255,255,255)">.format(name</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">logEndOffset))</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><em><span style="color:#66e7a; background:rgb(255,255,255)">tags </span></em><span style="color:#000000; background:rgb(255,255,255)">= </span><em><span style="color:#66e7a; background:rgb(255,255,255)">Map</span></em><span style="color:#000000; background:rgb(255,255,255)">(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"topic" </span></strong><span style="color:#000000; background:rgb(255,255,255)">-&gt; </span><em><span style="color:#66e7a; background:rgb(255,255,255)">topicAndPartition</span></em><span style="color:#000000; background:rgb(255,255,255)">.topic</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0800; background:rgb(255,255,255)">              "partition" </span></strong><span style="color:#000000; background:rgb(255,255,255)">-&gt; </span><em><span style="color:#66e7a; background:rgb(255,255,255)">topicAndPartition</span></em><span style="color:#000000; background:rgb(255,255,255)">.partition.toString)</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p><span style="color:#000000; background:rgb(255,255,255)">接下来看看Log.loadSegments的函数如何加载segment的流程:</span></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0080; background:rgb(255,255,255)">private def </span></strong><span style="color:#000000; background:rgb(255,255,255)">loadSegments() {</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">首先检查,如果partition的目录还没有创建,先创建这个目录.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><em><span style="color:#808080; background:rgb(255,255,255)">// create the log directory if it doesn't exist</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">  </span></em><span style="color:#000000; background:rgb(255,255,255)">dir.mkdirs()</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">var </span></strong><span style="color:#000000; background:rgb(255,255,255)">swapFiles = </span><em><span style="color:#66e7a; background:rgb(255,255,255)">Set</span></em><span style="color:#000000; background:rgb(255,255,255)">[File]()</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">  </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">for</span></strong><span style="color:#000000; background:rgb(255,255,255)">(file &lt;- dir.listFiles </span><strong><span style="color:#0080; background:rgb(255,255,255)">if </span></strong><span style="color:#000000; background:rgb(255,255,255)">file.isFile) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">if</span></strong><span style="color:#000000; background:rgb(255,255,255)">(!file.canRead)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><strong><span style="color:#0080; background:rgb(255,255,255)">throw new </span></strong><span style="color:#000000; background:rgb(255,255,255)">IOException(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Could not read file " </span></strong><span style="color:#000000; background:rgb(255,255,255)">+ file)</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里读取这个partition目录下的所有的文件,同时这个文件是具有可读权限的.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">filename = file.getName</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">如果文件是.deleted或者是.cleaned结尾的文件时,直接删除这个文件.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">if</span></strong><span style="color:#000000; background:rgb(255,255,255)">(filename.endsWith(</span><em><span style="color:#66e7a; background:rgb(255,255,255)">DeletedFileSuffix</span></em><span style="color:#000000; background:rgb(255,255,255)">) ||  </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">           filename.endsWith(</span><em><span style="color:#66e7a; background:rgb(255,255,255)">CleanedFileSuffix</span></em><span style="color:#000000; background:rgb(255,255,255)">)) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><em><span style="color:#808080; background:rgb(255,255,255)">// if the file ends in .deleted or .cleaned, delete it</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">      </span></em><span style="color:#000000; background:rgb(255,255,255)">file.delete()</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    } </span><strong><span style="color:#0080; background:rgb(255,255,255)">else if</span></strong><span style="color:#000000; background:rgb(255,255,255)">(filename.endsWith(</span><em><span style="color:#66e7a; background:rgb(255,255,255)">SwapFileSuffix</span></em><span style="color:#000000; background:rgb(255,255,255)">)) {</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里的部分检查文件是否是.swap文件,如果是,把后缀的.swap去掉,然后检查文件名是.index的文件还是.log的文件,如果是.index的文件,直接删除这个文件这是一个对log的索引文件,</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">如果文件是.log文件,把这个文件添加到swapFiles的文件集合列表中,同时删除这个log文件对应的索引文件.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><em><span style="color:#808080; background:rgb(255,255,255)">// we crashed in the middle of a swap operation, to recover:</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">      // if a log, delete the .index file, complete the swap operation later</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">      // if an index just delete it, it will be rebuilt</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">      </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">baseName = </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">File(CoreUtils.</span><em><span style="color:#000000; background:rgb(255,255,255)">replaceSuffix</span></em><span style="color:#000000; background:rgb(255,255,255)">(file.getPath</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">            </span><em><span style="color:#66e7a; background:rgb(255,255,255)">SwapFileSuffix</span></em><span style="color:#cc7832; background:rgb(255,255,255)">, </span><strong><span style="color:#0800; background:rgb(255,255,255)">""</span></strong><span style="color:#000000; background:rgb(255,255,255)">))</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><strong><span style="color:#0080; background:rgb(255,255,255)">if</span></strong><span style="color:#000000; background:rgb(255,255,255)">(baseName.getPath.endsWith(</span><em><span style="color:#66e7a; background:rgb(255,255,255)">IndexFileSuffix</span></em><span style="color:#000000; background:rgb(255,255,255)">)) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        file.delete()</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      } </span><strong><span style="color:#0080; background:rgb(255,255,255)">else if</span></strong><span style="color:#000000; background:rgb(255,255,255)">(baseName.getPath.endsWith(</span><em><span style="color:#66e7a; background:rgb(255,255,255)">LogFileSuffix</span></em><span style="color:#000000; background:rgb(255,255,255)">)){</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><em><span style="color:#808080; background:rgb(255,255,255)">// delete the index</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">        </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">index = </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">File(CoreUtils.</span><em><span style="color:#000000; background:rgb(255,255,255)">replaceSuffix</span></em><span style="color:#000000; background:rgb(255,255,255)">(baseName.getPath</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">            </span><em><span style="color:#66e7a; background:rgb(255,255,255)">LogFileSuffix</span></em><span style="color:#cc7832; background:rgb(255,255,255)">, </span><em><span style="color:#66e7a; background:rgb(255,255,255)">IndexFileSuffix</span></em><span style="color:#000000; background:rgb(255,255,255)">))</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        index.delete()</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        swapFiles += file</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">下面开始对.index与.log文件进行迭代处理.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">在执行对log的恢复操作时,需要使用到配置项</span><strong><span style="color:#0800; background:rgb(255,255,255)">message.max.bytes</span></strong><span style="color:#000000; background:rgb(255,255,255)">,默认值1000012的字节,用于配置每条消息的最大大小.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><em><span style="color:#808080; background:rgb(255,255,255)">// now do a second pass and load all the .log and .index files</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">  </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">for</span></strong><span style="color:#000000; background:rgb(255,255,255)">(file &lt;- dir.listFiles </span><strong><span style="color:#0080; background:rgb(255,255,255)">if </span></strong><span style="color:#000000; background:rgb(255,255,255)">file.isFile) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">filename = file.getName</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">if</span></strong><span style="color:#000000; background:rgb(255,255,255)">(filename.endsWith(</span><em><span style="color:#66e7a; background:rgb(255,255,255)">IndexFileSuffix</span></em><span style="color:#000000; background:rgb(255,255,255)">)) {</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">如果是一个.index的文件,检查这个index对应的log文件是否存在,如果log文件不存在,直接删除这个index文件.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><em><span style="color:#808080; background:rgb(255,255,255)">// if it is an index file, make sure it has a corresponding .log file</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">      </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">logFile = </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">File(file.getAbsolutePath.replace(</span><em><span style="color:#66e7a; background:rgb(255,255,255)">IndexFileSuffix</span></em><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">            </span><em><span style="color:#66e7a; background:rgb(255,255,255)">LogFileSuffix</span></em><span style="color:#000000; background:rgb(255,255,255)">))</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><strong><span style="color:#0080; background:rgb(255,255,255)">if</span></strong><span style="color:#000000; background:rgb(255,255,255)">(!logFile.exists) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        warn(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Found an orphaned index file, %s, with no corresponding log </span></strong></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0800; background:rgb(255,255,255)">             file."</span></strong><span style="color:#000000; background:rgb(255,255,255)">.format(file.getAbsolutePath))</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        file.delete()</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    } </span><strong><span style="color:#0080; background:rgb(255,255,255)">else if</span></strong><span style="color:#000000; background:rgb(255,255,255)">(filename.endsWith(</span><em><span style="color:#66e7a; background:rgb(255,255,255)">LogFileSuffix</span></em><span style="color:#000000; background:rgb(255,255,255)">)) {</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">如果这个文件是一个.log文件,找到这个文件对应的index文件,也就是这个log文件的文件,</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><em><span style="color:#808080; background:rgb(255,255,255)">// if its a log file, load the corresponding log segment</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">      </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">start = filename.substring(</span><span style="color:#00ff; background:rgb(255,255,255)">0</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">           </span><span style="color:#000000; background:rgb(255,255,255)">filename.length - </span><em><span style="color:#66e7a; background:rgb(255,255,255)">LogFileSuffix</span></em><span style="color:#000000; background:rgb(255,255,255)">.length).toLong</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">indexFile = Log.</span><em><span style="color:#000000; background:rgb(255,255,255)">indexFilename</span></em><span style="color:#000000; background:rgb(255,255,255)">(dir</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">start)</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">根据logFile中第一条offset的值生成LogSegment的实例.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">生成LogSegment的实例时,需要用到两个配置项:</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">1,配置项</span><strong><span style="color:#0800; background:rgb(255,255,255)">log.index.interval.bytes</span></strong><span style="color:#000000; background:rgb(255,255,255)">,默认值4096,当向log文件中写入的消息的大小达到这个配置的字节大小后,会向index文件中写入一个offset对应log的位置的记录.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">2,配置项</span><strong><span style="color:#0800; background:rgb(255,255,255)">log.index.size.max.bytes</span></strong><span style="color:#000000; background:rgb(255,255,255)">,默认值10MB,这个用于控制index文件的最大大小.这个值取配置值中8的倍数中最接近这个配置值的值,原则上这个值小于或等于配置的值.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">segment = </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">LogSegment(dir = dir</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                                   </span><span style="color:#000000; background:rgb(255,255,255)">startOffset = start</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                                   </span><span style="color:#000000; background:rgb(255,255,255)">indexIntervalBytes = config.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">indexInterval</span></em><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                                   </span><span style="color:#000000; background:rgb(255,255,255)">maxIndexSize = config.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">maxIndexSize</span></em><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                                   </span><span style="color:#000000; background:rgb(255,255,255)">rollJitterMs = config.randomSegmentJitter</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                                   </span><span style="color:#000000; background:rgb(255,255,255)">time = time</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                                   </span><span style="color:#000000; background:rgb(255,255,255)">fileAlreadyExists = </span><strong><span style="color:#0080; background:rgb(255,255,255)">true</span></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><strong><span style="color:#0080; background:rgb(255,255,255)">if</span></strong><span style="color:#000000; background:rgb(255,255,255)">(indexFile.exists()) {</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">如果这个log文件对应的index文件存在,执行这个segment的检查,如果检查失败,删除index文件,并执行segment的恢复操作.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">try </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">在一个index file中,index file的大小必须是8的整数倍,这个文件中每次记录存储8个字节,前4个字节是log文件中对应的offset,后4个字节对应log文件的位置 .</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">如果这个index文件的entity的个数大于0,同时index的最后一个offset是一个小于log文件的开始位置的offset,这个文件的检查会出错.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">            segment.index.sanityCheck()</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        } </span><strong><span style="color:#0080; background:rgb(255,255,255)">catch </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">检查index file文件失败,表示这个index文件有错误,删除这个index文件,执行对log文件的恢复操作.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">          </span><strong><span style="color:#0080; background:rgb(255,255,255)">case </span></strong><span style="color:#000000; background:rgb(255,255,255)">e: java.lang.IllegalArgumentException =&gt;</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">            warn(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Found a corrupted index file, %s, deleting and rebuilding</span></strong></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0800; background:rgb(255,255,255)">                index..."</span></strong><span style="color:#000000; background:rgb(255,255,255)">.format(indexFile.getAbsolutePath))</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">            indexFile.delete()</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">            segment.recover(config.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">maxMessageSize</span></em><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      }</span><strong><span style="color:#0080; background:rgb(255,255,255)">else </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这种情况下,表示log文件没有找到对应的index文件,直接执行这个segment的恢复操作.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        error(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Could not find index file corresponding to log file %s,</span></strong></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0800; background:rgb(255,255,255)">            rebuilding index..."</span></strong><span style="color:#000000; background:rgb(255,255,255)">.format(segment.log.file.getAbsolutePath))</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        segment.recover(config.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">maxMessageSize</span></em><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><em><span style="color:#66e7a; background:rgb(255,255,255)">segments</span></em><span style="color:#000000; background:rgb(255,255,255)">.put(start</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">segment)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这个部分,把上次正在执行恢复操作的swap文件(这部分只有log文件)进行恢复.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><em><span style="color:#808080; background:rgb(255,255,255)">// Finally, complete any interrupted swap operations. To be crash-safe,</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">  // log files that are replaced by the swap segment should be renamed to .deleted</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">  // before the swap file is restored as the new segment file.</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">  </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">for </span></strong><span style="color:#000000; background:rgb(255,255,255)">(swapFile &lt;- swapFiles) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">logFile = </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">File(CoreUtils.</span><em><span style="color:#000000; background:rgb(255,255,255)">replaceSuffix</span></em><span style="color:#000000; background:rgb(255,255,255)">(swapFile.getPath</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">         </span><em><span style="color:#66e7a; background:rgb(255,255,255)">SwapFileSuffix</span></em><span style="color:#cc7832; background:rgb(255,255,255)">, </span><strong><span style="color:#0800; background:rgb(255,255,255)">""</span></strong><span style="color:#000000; background:rgb(255,255,255)">))</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">fileName = logFile.getName</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">startOffset = fileName.substring(</span><span style="color:#00ff; background:rgb(255,255,255)">0</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">           </span><span style="color:#000000; background:rgb(255,255,255)">fileName.length - </span><em><span style="color:#66e7a; background:rgb(255,255,255)">LogFileSuffix</span></em><span style="color:#000000; background:rgb(255,255,255)">.length).toLong</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">indexFile = </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">File(CoreUtils.</span><em><span style="color:#000000; background:rgb(255,255,255)">replaceSuffix</span></em><span style="color:#000000; background:rgb(255,255,255)">(logFile.getPath</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">           </span><em><span style="color:#66e7a; background:rgb(255,255,255)">LogFileSuffix</span></em><span style="color:#cc7832; background:rgb(255,255,255)">, </span><em><span style="color:#66e7a; background:rgb(255,255,255)">IndexFileSuffix</span></em><span style="color:#000000; background:rgb(255,255,255)">) + </span><em><span style="color:#66e7a; background:rgb(255,255,255)">SwapFileSuffix</span></em><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">index =  </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">OffsetIndex(file = indexFile</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">baseOffset = startOffset</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">         </span><span style="color:#000000; background:rgb(255,255,255)">maxIndexSize = config.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">maxIndexSize</span></em><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">swapSegment = </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">LogSegment(</span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">FileMessageSet(file = swapFile)</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                                     </span><span style="color:#000000; background:rgb(255,255,255)">index = index</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                                     </span><span style="color:#000000; background:rgb(255,255,255)">baseOffset = startOffset</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                                     </span><span style="color:#000000; background:rgb(255,255,255)">indexIntervalBytes = config.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">indexInterval</span></em><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                                     </span><span style="color:#000000; background:rgb(255,255,255)">rollJitterMs = config.randomSegmentJitter</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                                     </span><span style="color:#000000; background:rgb(255,255,255)">time = time)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    info(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Found log file %s from interrupted swap operation, </span></strong></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0800; background:rgb(255,255,255)">        repairing."</span></strong><span style="color:#000000; background:rgb(255,255,255)">.format(swapFile.getPath))</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">执行对logsegment的恢复操作,这个是对上次正在进行恢复的swap文件进行恢复,</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    swapSegment.recover(config.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">maxMessageSize</span></em><span style="color:#000000; background:rgb(255,255,255)">)</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里找到对应此恢复文件的offset的所有的老的segment的logsegment.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">oldSegments = logSegments(swapSegment.baseOffset</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">swapSegment.nextOffset)</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">从segments的集合中(对应此partition log)移出老的segments,并删除对应的文件.这里移出的是上面通过baseOffset与swapSegment中新的offset之间的原来的所有的segments.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    replaceSegments(swapSegment</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">oldSegments.toSeq</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">isRecoveredSwapFile = </span><strong><span style="color:#0080; background:rgb(255,255,255)">true</span></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">if</span></strong><span style="color:#000000; background:rgb(255,255,255)">(logSegments.size == </span><span style="color:#00ff; background:rgb(255,255,255)">0</span><span style="color:#000000; background:rgb(255,255,255)">) {</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">如果当前的partition中没有segment时,创建一个新的LogSegment实例,这里需要注意的一个配置,</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">配置项</span><strong><span style="color:#0800; background:rgb(255,255,255)">log.preallocate</span></strong><span style="color:#000000; background:rgb(255,255,255)">,默认值false,用于配置是否在创建LogFile时提前预分配空间.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">配置项</span><strong><span style="color:#0800; background:rgb(228,228,255)">log.segment.bytes</span></strong><span style="color:#000000; background:rgb(255,255,255)">,默认值1GB,用于配置LogSegment的大小.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">最后一个参数传入的preallocate表示是否提前预分配磁盘空间.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><em><span style="color:#808080; background:rgb(255,255,255)">// no existing segments, create a new mutable segment beginning at offset 0</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    </span><span style="color:#66e7a; background:rgb(255,255,255)">segments</span></em><span style="color:#000000; background:rgb(255,255,255)">.put(</span><span style="color:#00ff; background:rgb(255,255,255)">0L</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">LogSegment(dir = dir</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                                   </span><span style="color:#000000; background:rgb(255,255,255)">startOffset = </span><span style="color:#00ff; background:rgb(255,255,255)">0</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                                   </span><span style="color:#000000; background:rgb(255,255,255)">indexIntervalBytes = config.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">indexInterval</span></em><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                                   </span><span style="color:#000000; background:rgb(255,255,255)">maxIndexSize = config.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">maxIndexSize</span></em><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                                   </span><span style="color:#000000; background:rgb(255,255,255)">rollJitterMs = config.randomSegmentJitter</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                                   </span><span style="color:#000000; background:rgb(255,255,255)">time = time</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                                   </span><span style="color:#000000; background:rgb(255,255,255)">fileAlreadyExists = </span><strong><span style="color:#0080; background:rgb(255,255,255)">false</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                                   </span><span style="color:#000000; background:rgb(255,255,255)">initFileSize = </span><strong><span style="color:#0080; background:rgb(255,255,255)">this</span></strong><span style="color:#000000; background:rgb(255,255,255)">.initFileSize()</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                                   </span><span style="color:#000000; background:rgb(255,255,255)">preallocate = config.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">preallocate</span></em><span style="color:#000000; background:rgb(255,255,255)">))</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  } </span><strong><span style="color:#0080; background:rgb(255,255,255)">else </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里通过最后一个对partition的checkpoint的offset,读取所有比这个offset后的logSegment,并执行对这些segments的恢复操作.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    recoverLog()</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><em><span style="color:#808080; background:rgb(255,255,255)">// reset the index size of the currently active log segment to allow more entries</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    </span></em><span style="color:#000000; background:rgb(255,255,255)">activeSegment.index.resize(config.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">maxIndexSize</span></em><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000"> </span></p>
<h3><strong>LogSegment<span style="font-family:SimSun">中对</span><span style="font-family:Arial">log</span><span style="font-family:SimSun">的恢复处理流程</span><span style="font-family:Arial">:</span></strong></h3>
<p style="background:rgb(255,255,255)"><span style="color:#000000">对一个segment的恢复主要是index file错误或者index file不存在的情况下,或者说是上次正在执行恢复但进程被关闭的情况下,会执行恢复处理,通过LogSegment中的</span><span style="color:#000000; background:rgb(228,228,255)">recover</span><span style="color:#000000">函数.</span></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0080; background:rgb(228,228,255)">def</span><span style="color:#0080; background:rgb(255,255,255)"> </span></strong><span style="color:#000000; background:rgb(255,255,255)">recover(maxMessageSize: </span><span style="color:#cc7832; background:rgb(255,255,255)">Int</span><span style="color:#000000; background:rgb(255,255,255)">): </span><span style="color:#cc7832; background:rgb(255,255,255)">Int </span><span style="color:#000000; background:rgb(255,255,255)">= {</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里把index file文件进行截断,说白了就是清空,</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  index.truncate()</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">重新生成index文件的大小,</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  index.resize(index.maxIndexSize)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">var </span></strong><span style="color:#000000; background:rgb(255,255,255)">validBytes = </span><span style="color:#00ff; background:rgb(255,255,255)">0</span><span style="color:#00ff; background:rgb(255,255,255)"><br>
</span><span style="color:#00ff; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">var </span></strong><span style="color:#000000; background:rgb(255,255,255)">lastIndexEntry = </span><span style="color:#00ff; background:rgb(255,255,255)">0</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#00ff; background:rgb(255,255,255)">这里读取log文件的每一条记录,根据文件生成一个iterator,这个iterator每next一下,读取一条消息.</span><span style="color:#00ff; background:rgb(255,255,255)"><br>
</span><span style="color:#00ff; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">iter = log.iterator(maxMessageSize)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">try </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">while</span></strong><span style="color:#000000; background:rgb(255,255,255)">(iter.hasNext) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">entry = iter.next</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      entry.message.ensureValid()</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里检查读取log中消息的大小是否达到了记录index的大小,如果已经达到,把当前读取到的消息的offset与对应log文件中的位置记录到index文件中.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><strong><span style="color:#0080; background:rgb(255,255,255)">if</span></strong><span style="color:#000000; background:rgb(255,255,255)">(validBytes - lastIndexEntry &gt; indexIntervalBytes) {</span><em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">        </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">startOffset =</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">          entry.message.compressionCodec </span><strong><span style="color:#0080; background:rgb(255,255,255)">match </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">            </span><strong><span style="color:#0080; background:rgb(255,255,255)">case </span></strong><span style="color:#000000; background:rgb(255,255,255)">NoCompressionCodec =&gt;</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">              entry.offset</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">            </span><strong><span style="color:#0080; background:rgb(255,255,255)">case </span></strong><span style="color:#000000; background:rgb(255,255,255)">_ =&gt;</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">              ByteBufferMessageSet.</span><em><span style="color:#000000; background:rgb(255,255,255)">deepIterator</span></em><span style="color:#000000; background:rgb(255,255,255)">(entry.message).next().offset</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        index.append(startOffset</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">validBytes)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        lastIndexEntry = validBytes</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      validBytes += MessageSet.</span><em><span style="color:#000000; background:rgb(255,255,255)">entrySize</span></em><span style="color:#000000; background:rgb(255,255,255)">(entry.message)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  } </span><strong><span style="color:#0080; background:rgb(255,255,255)">catch </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">case </span></strong><span style="color:#000000; background:rgb(255,255,255)">e: InvalidMessageException =&gt; </span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><em><span style="color:#66e7a; background:rgb(255,255,255)">logger</span></em><span style="color:#000000; background:rgb(255,255,255)">.warn(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Found invalid messages in log segment %s at byte offset %d: </span></strong></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0800; background:rgb(255,255,255)">         %s."</span></strong><span style="color:#000000; background:rgb(255,255,255)">.format(log.file.getAbsolutePath</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">validBytes</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">e.getMessage))</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  }</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里通过原来log文件的大小,减去log中消息被认证完成后的大小,得到这个log文件中需要被切断的大小,也就是说log文件中,后面的部分消息格式可能不对,对文件进行截断.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">truncated = log.sizeInBytes - validBytes</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  log.truncateTo(validBytes)</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">根据新的LOG文件的大小,对index file中超过log的offset的记录部分的记录进行清理.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  index.trimToValidSize()</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><span style="color:#000000; background:rgb(228,228,255)">truncated</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000"> </span></p>
<h3><strong>通过执行<span style="font-family:Arial">LogManager</span><span style="font-family:SimSun">实例中的</span><span style="font-family:Arial">startup</span><span style="font-family:SimSun">函数来进行启动</span><span style="font-family:Arial">:</span></strong></h3>
<p>这里根据后台调度器<span style="font-family:Times New Roman">,</span><span style="font-family:SimSun">启动对日志回滚</span><span style="font-family:Times New Roman">,</span><span style="font-family:SimSun">清理</span><span style="font-family:Times New Roman">,checkpoint</span><span style="font-family:SimSun">的后台处理线程</span><span style="font-family:Times New Roman">.</span></p>
<p>待分析<span style="font-family:Times New Roman">...</span></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0080; background:rgb(228,228,255)">def</span><span style="color:#0080; background:rgb(255,255,255)"> </span></strong><span style="color:#000000; background:rgb(255,255,255)">startup() {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><em><span style="color:#808080; background:rgb(255,255,255)">/* Schedule the cleanup task to delete old logs */</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">  </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">if</span></strong><span style="color:#000000; background:rgb(255,255,255)">(scheduler != </span><strong><span style="color:#0080; background:rgb(255,255,255)">null</span></strong><span style="color:#000000; background:rgb(255,255,255)">) {</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">通过</span><strong><span style="color:#0800; background:rgb(228,228,255)">log.retention.check.interval.ms</span></strong><span style="color:#000000; background:rgb(255,255,255)">配置的执行间隔,读取定时删除过期日志的线程,执行函数为cleanupLogs,</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    info(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Starting log cleanup with a period of %d ms."</span></strong><span style="color:#000000; background:rgb(255,255,255)">.format(retentionCheckMs))</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    scheduler.schedule(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"kafka-log-retention"</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                       </span><span style="color:#000000; background:rgb(255,255,255)">cleanupLogs</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                       </span><span style="color:#000000; background:rgb(255,255,255)">delay = </span><em><span style="color:#66e7a; background:rgb(255,255,255)">InitialTaskDelayMs</span></em><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                       </span><span style="color:#000000; background:rgb(255,255,255)">period = retentionCheckMs</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                       </span><span style="color:#000000; background:rgb(255,255,255)">TimeUnit.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">MILLISECONDS</span></em><span style="color:#000000; background:rgb(255,255,255)">)</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">通过</span><strong><span style="color:#0800; background:rgb(255,255,255)">log.flush.scheduler.interval.ms</span></strong><span style="color:#000000; background:rgb(255,255,255)">配置的执行间隔,定期对partition的segment的磁盘缓冲区进行flush操作,这个默认不启用,执行函数为flushDirtyLogs.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    info(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Starting log flusher with a default period of %d ms."</span></strong><span style="color:#000000; background:rgb(255,255,255)">.format(flushCheckMs))</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    scheduler.schedule(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"kafka-log-flusher"</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                       </span><span style="color:#000000; background:rgb(255,255,255)">flushDirtyLogs</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                       </span><span style="color:#000000; background:rgb(255,255,255)">delay = </span><em><span style="color:#66e7a; background:rgb(255,255,255)">InitialTaskDelayMs</span></em><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                       </span><span style="color:#000000; background:rgb(255,255,255)">period = flushCheckMs</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                       </span><span style="color:#000000; background:rgb(255,255,255)">TimeUnit.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">MILLISECONDS</span></em><span style="color:#000000; background:rgb(255,255,255)">)</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">通过</span><strong><span style="color:#0800; background:rgb(255,255,255)">log.flush.offset.checkpoint.interval.ms</span></strong><span style="color:#000000; background:rgb(255,255,255)">配置的时间间隔,定期对各partition中当前的offset进行checkpoint的操作,通过执行函数checkpointRecoveryPointOffsets.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    scheduler.schedule(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"kafka-recovery-point-checkpoint"</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                       </span><span style="color:#000000; background:rgb(255,255,255)">checkpointRecoveryPointOffsets</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                       </span><span style="color:#000000; background:rgb(255,255,255)">delay = </span><em><span style="color:#66e7a; background:rgb(255,255,255)">InitialTaskDelayMs</span></em><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                       </span><span style="color:#000000; background:rgb(255,255,255)">period = flushCheckpointMs</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                       </span><span style="color:#000000; background:rgb(255,255,255)">TimeUnit.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">MILLISECONDS</span></em><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  }</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里主要启动LogCleaner中的CleanerThread的线程,</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(228,228,255)">if</span></strong><span style="color:#000000; background:rgb(228,228,255)">(cleanerConfig.enableCleaner)</span><span style="color:#000000; background:rgb(228,228,255)"><br>
</span><span style="color:#000000; background:rgb(228,228,255)">    cleaner.startup()</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p> </p>
<h3><strong>定期删除过期的日志<span style="font-family:Arial">:</span></strong></h3>
<p>这个通过后台的调度组件定期去执行<span style="font-family:Times New Roman">LogManager</span><span style="font-family:SimSun">中的</span><span style="font-family:Times New Roman">cleanupLogs</span><span style="font-family:SimSun">的函数</span><span style="font-family:Times New Roman">,</span></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0080; background:rgb(228,228,255)">def</span><span style="color:#0080; background:rgb(255,255,255)"> </span></strong><span style="color:#000000; background:rgb(255,255,255)">cleanupLogs() {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  debug(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Beginning log cleanup..."</span></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">var </span></strong><span style="color:#000000; background:rgb(255,255,255)">total = </span><span style="color:#00ff; background:rgb(255,255,255)">0</span><span style="color:#00ff; background:rgb(255,255,255)"><br>
</span><span style="color:#00ff; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">startMs = time.milliseconds</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里找到所有的partition的log,同时log的配置的清理模式不是compact的模式时,</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">for</span></strong><span style="color:#000000; background:rgb(255,255,255)">(log &lt;- allLogs</span><span style="color:#cc7832; background:rgb(255,255,255)">; </span><strong><span style="color:#0080; background:rgb(255,255,255)">if </span></strong><span style="color:#000000; background:rgb(255,255,255)">!log.config.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">compact</span></em><span style="color:#000000; background:rgb(255,255,255)">) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    debug(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Garbage collecting '" </span></strong><span style="color:#000000; background:rgb(255,255,255)">+ log.name + </span><strong><span style="color:#0800; background:rgb(255,255,255)">"'"</span></strong><span style="color:#000000; background:rgb(255,255,255)">)</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">在cleanupExpiredSegments函数中,计算出所有的segment中(不包含最后一个)最后一次修改的时间加上过期的删除时间当于当前时间的segments的集合,并把对应的segment的log文件与index文件添加后缀为.deleted的文件,同时通过调度线程,在</span><strong><span style="color:#0800; background:rgb(255,255,255)">log.segment.delete.delay.ms</span></strong><span style="color:#000000; background:rgb(255,255,255)">配置的间隔后,删除这些对应的文件.默认是60秒.这个函数根据segment的保留时间进行删除,</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">     保留时间通过</span><strong><span style="color:#0800; background:rgb(255,255,255)">log.retention.{hour,minutes,ms}</span></strong><span style="color:#000000; background:rgb(255,255,255)">进行配置.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">在cleanupSegmentsToMaintainSize函数中,通过计算log中所有的segment中,总共保留的数据的总大小进行删除,保留总大小通过</span><strong><span style="color:#0800; background:rgb(255,255,255)">log.retention.bytes</span></strong><span style="color:#000000; background:rgb(255,255,255)">配置.这里计算所有的segment中,从log的第一个segment开始,对每一个segment的大小进行相减,直到减至保留大小时的segment停止,删除超过保留大小的所有的segment.这个操作不包含对当前活动的segment进行删除.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    total += cleanupExpiredSegments(log) + cleanupSegmentsToMaintainSize(log)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><span style="color:#000000; background:rgb(228,228,255)">debug(</span><strong><span style="color:#0800; background:rgb(228,228,255)">"Log cleanup completed. " </span></strong><span style="color:#000000; background:rgb(228,228,255)">+ total + </span><strong><span style="color:#0800; background:rgb(228,228,255)">" files deleted in " </span></strong><span style="color:#000000; background:rgb(228,228,255)">+</span><span style="color:#000000; background:rgb(228,228,255)"><br>
</span><span style="color:#000000; background:rgb(228,228,255)">                (time.milliseconds - startMs) / </span><span style="color:#00ff; background:rgb(228,228,255)">1000 </span><span style="color:#000000; background:rgb(228,228,255)">+ </span><strong><span style="color:#0800; background:rgb(228,228,255)">" seconds"</span></strong><span style="color:#000000; background:rgb(228,228,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p> </p>
<h3><strong>定期对<span style="font-family:Arial">log</span><span style="font-family:SimSun">的磁盘缓冲区进行</span><span style="font-family:Arial">flush:</span></strong></h3>
<p>这个通过后台的调度组件定期去执行<span style="font-family:Times New Roman">LogManager</span><span style="font-family:SimSun">中的</span><span style="color:#000000; background:rgb(255,255,255)">flushDirtyLogs</span>的函数<span style="font-family:Times New Roman">,</span></p>
<p>这个函数中迭代所有的<span style="font-family:Times New Roman">partition</span><span style="font-family:SimSun">的</span><span style="font-family:Times New Roman">log,</span><span style="font-family:SimSun">并执行</span><span style="font-family:Times New Roman">flush</span><span style="font-family:SimSun">的操作</span><span style="font-family:Times New Roman">,</span><span style="font-family:SimSun">这个操作中通过当前最后一个</span><span style="font-family:Times New Roman">offset</span><span style="font-family:SimSun">找到上一次进行</span><span style="font-family:Times New Roman">checkpoint</span><span style="font-family:SimSun">的</span><span style="font-family:Times New Roman">offset</span><span style="font-family:SimSun">与当前的</span><span style="font-family:Times New Roman">offset</span><span style="font-family:SimSun">中间的</span><span style="font-family:Times New Roman">segment,</span><span style="font-family:SimSun">并执行</span><span style="font-family:Times New Roman">segment</span><span style="font-family:SimSun">中</span><span style="font-family:Times New Roman">log</span><span style="font-family:SimSun">与</span><span style="font-family:Times New Roman">index</span><span style="font-family:SimSun">的</span><span style="font-family:Times New Roman">flush</span><span style="font-family:SimSun">操作</span><span style="font-family:Times New Roman">.</span><span style="font-family:SimSun">对应</span><span style="font-family:Times New Roman">log</span><span style="font-family:SimSun">文件执行文件管道的</span><span style="font-family:Times New Roman">force</span><span style="font-family:SimSun">函数</span><span style="font-family:Times New Roman">,</span><span style="font-family:SimSun">对于</span><span style="font-family:Times New Roman">index</span><span style="font-family:SimSun">文件</span><span style="font-family:Times New Roman">,</span><span style="font-family:SimSun">执行文件管道</span><span style="font-family:Times New Roman">map</span><span style="font-family:SimSun">的</span><span style="font-family:Times New Roman">force</span><span style="font-family:SimSun">函数</span><span style="font-family:Times New Roman">.</span></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0080; background:rgb(255,255,255)">private def </span></strong><span style="color:#000000; background:rgb(255,255,255)">flushDirtyLogs() = {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  debug(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Checking for dirty logs to flush..."</span></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">for </span></strong><span style="color:#000000; background:rgb(255,255,255)">((topicAndPartition</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">log) &lt;- </span><em><span style="color:#66e7a; background:rgb(255,255,255)">logs</span></em><span style="color:#000000; background:rgb(255,255,255)">) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">try </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">timeSinceLastFlush = time.milliseconds - log.lastFlushTime</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      debug(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Checking if flush is needed on " </span></strong><span style="color:#000000; background:rgb(255,255,255)">+ topicAndPartition.topic </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">           + </span><strong><span style="color:#0800; background:rgb(255,255,255)">" flush interval  " </span></strong><span style="color:#000000; background:rgb(255,255,255)">+ log.config.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">flushMs </span></em><span style="color:#000000; background:rgb(255,255,255)">+</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">            </span><strong><span style="color:#0800; background:rgb(255,255,255)">" last flushed " </span></strong><span style="color:#000000; background:rgb(255,255,255)">+ log.lastFlushTime + </span><strong><span style="color:#0800; background:rgb(255,255,255)">" time since last flush: " </span></strong></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0800; background:rgb(255,255,255)">           </span></strong><span style="color:#000000; background:rgb(255,255,255)">+ timeSinceLastFlush)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><strong><span style="color:#0080; background:rgb(255,255,255)">if</span></strong><span style="color:#000000; background:rgb(255,255,255)">(timeSinceLastFlush &gt;= log.config.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">flushMs</span></em><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        log.flush</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    } </span><strong><span style="color:#0080; background:rgb(255,255,255)">catch </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><strong><span style="color:#0080; background:rgb(255,255,255)">case </span></strong><span style="color:#000000; background:rgb(255,255,255)">e: </span><span style="color:#20999d; background:rgb(255,255,255)">Throwable </span><span style="color:#000000; background:rgb(255,255,255)">=&gt;</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        error(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Error flushing topic " </span></strong><span style="color:#000000; background:rgb(255,255,255)">+ topicAndPartition.topic</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">e)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<h3><strong>定期对<span style="font-family:Arial">partition</span><span style="font-family:SimSun">的</span><span style="font-family:Arial">offset</span><span style="font-family:SimSun">进行</span><span style="font-family:Arial">checkpoint</span><span style="font-family:SimSun">操作</span><span style="font-family:Arial">:</span></strong></h3>
<p style="background:rgb(255,255,255)">这个通过后台的调度组件定期去</p>
<p style="background:rgb(255,255,255)">   执行LogManager中的<span style="color:#000000; background:rgb(255,255,255)">checkpointRecoveryPointOffsets</span>的函数,</p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0080; background:rgb(255,255,255)">def </span></strong><span style="color:#000000; background:rgb(255,255,255)">checkpointRecoveryPointOffsets() {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">this</span></strong><span style="color:#000000; background:rgb(255,255,255)">.logDirs.foreach(checkpointLogsInDir)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里对每个dir中存储的partition的最后一个offset进行checkpoint的操作.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">在这个函数中,迭代每个dir中对应的partition的offset记录到对应目录下的checkpoint文件中.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">第一行写入一个0,表示是checkpoint文件的版本.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">第二行写入的是partition的个数,当前checkpoint时,这个dir已经存在数据的partition的个数.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">后面对应第二个的值个数的条数的数据,每条数据写入topic partition offset的值.</span></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0080; background:rgb(255,255,255)">private def </span></strong><span style="color:#000000; background:rgb(255,255,255)">checkpointLogsInDir(dir: File): </span><span style="color:#cc7832; background:rgb(255,255,255)">Unit </span><span style="color:#000000; background:rgb(255,255,255)">= {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">recoveryPoints = </span><strong><span style="color:#0080; background:rgb(255,255,255)">this</span></strong><span style="color:#000000; background:rgb(255,255,255)">.logsByDir.get(dir.toString)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">if </span></strong><span style="color:#000000; background:rgb(255,255,255)">(recoveryPoints.isDefined) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">this</span></strong><span style="color:#000000; background:rgb(255,255,255)">.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">recoveryPointCheckpoints</span></em><span style="color:#000000; background:rgb(255,255,255)">(dir).write(recoveryPoints.get.mapValues(</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">        _.recoveryPoint))</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<h3><strong>LogCleaner<span style="font-family:SimSun">实例中</span><span style="font-family:Arial">,</span><span style="font-family:SimSun">定期执行的日志压缩</span><span style="font-family:Arial">:</span></strong></h3>
<p>这个实例中<span style="font-family:Times New Roman">,</span><span style="font-family:SimSun">通过</span><span style="font-family:Times New Roman">CleanerThread</span><span style="font-family:SimSun">的线程进行处理</span><span style="font-family:Times New Roman">:</span></p>
<p style="background:rgb(255,255,255)">配置项<strong><span style="color:#0800; background:rgb(255,255,255)">log.cleaner.io.max.bytes.per.second</span></strong>,用于控制这个线程操作的IO速度,默认不控制速度</p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">配置项</span><strong><span style="color:#0800; background:rgb(255,255,255)">log.cleaner.dedupe.buffer.size</span></strong><span style="color:#000000; background:rgb(255,255,255)">,默认值128MB,用于配置清理过期数据的内存缓冲区,这个用于数据清理时,选择的压缩方式时,用于对重复数据的清理排序内存.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">配置项</span><strong><span style="color:#0800; background:rgb(255,255,255)">log.cleaner.threads</span></strong><span style="color:#000000; background:rgb(255,255,255)">,默认值1.用于配置清理过期日志的线程个数.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">配置项</span><strong><span style="color:#0800; background:rgb(255,255,255)">log.cleaner.backoff.ms</span></strong><span style="color:#000000; background:rgb(255,255,255)">,用于定时检查日志是否需要清理的时间间隔,默认是15秒.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0080; background:rgb(255,255,255)">private def </span></strong><span style="color:#000000; background:rgb(255,255,255)">cleanOrSleep() {</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">通过cleanerManager中找到log的清理配置是compact的所有的partition,并读取每个dir下partition对应的</span><strong><span style="color:#0800; background:rgb(255,255,255)">cleaner-offset-checkpoint</span></strong><span style="color:#000000; background:rgb(255,255,255)">文件中上次进行清理的offset.如果partition没有在文件中,offset取当前log中第一个segment的开始offset.得到满足条件的所有的partition的Log实例,并排序正在进行合并操作的Log.并取出未进行清理的bytes最大的一个Log(partition),同时这个未进行清理的bytes占总Log大小的占比大于</span><strong><span style="color:#0800; background:rgb(255,255,255)">log.cleaner.min.cleanable.ratio</span></strong><span style="color:#000000; background:rgb(255,255,255)">配置的值(默认值是0.5).如果这个函数返回的是一个非None的值时,表示找到一个要清理的log.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">把这个Log同时添加到</span><span style="color:#000000; background:rgb(228,228,255)">inProgress</span><span style="color:#000000; background:rgb(255,255,255)">集合中,表示这个Log正在执行清理操作,下次线程再次执行时,这个Log会被排除掉.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><em><span style="color:#66e7a; background:rgb(255,255,255)">cleanerManager</span></em><span style="color:#000000; background:rgb(255,255,255)">.grabFilthiestLog() </span><strong><span style="color:#0080; background:rgb(255,255,255)">match </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">case </span></strong><span style="color:#000000; background:rgb(255,255,255)">None =&gt;</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">如果没有找到需要进行清理的log,通过</span><strong><span style="color:#0800; background:rgb(255,255,255)">log.cleaner.backoff.ms</span></strong><span style="color:#000000; background:rgb(255,255,255)">配置的时间,等待下一次的触发.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><em><span style="color:#808080; background:rgb(255,255,255)">// there are no cleanable logs, sleep a while</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">      </span><span style="color:#66e7a; background:rgb(255,255,255)">backOffWaitLatch</span></em><span style="color:#000000; background:rgb(255,255,255)">.await(config.backOffMs</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">TimeUnit.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">MILLISECONDS</span></em><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">case </span></strong><em><span style="color:#000000; background:rgb(255,255,255)">Some</span></em><span style="color:#000000; background:rgb(255,255,255)">(cleanable) =&gt;</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">首先先取出上一次进行清理的offset(如果是第一次,找到最小的segment的开始的offset)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><em><span style="color:#808080; background:rgb(255,255,255)">// there's a log, clean it</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">      </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">var </span></strong><span style="color:#000000; background:rgb(255,255,255)">endOffset = cleanable.firstDirtyOffset</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><strong><span style="color:#0080; background:rgb(255,255,255)">try </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">通过Cleaner实例执行clean操作.这个函数返回的offset是map中可存储的最大到log中的那一个segment的最后的一个offset的值.也就是清理到的结束的这个segment的最大的offset的值.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        endOffset = </span><em><span style="color:#66e7a; background:rgb(255,255,255)">cleaner</span></em><span style="color:#000000; background:rgb(255,255,255)">.clean(cleanable)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        recordStats(</span><em><span style="color:#66e7a; background:rgb(255,255,255)">cleaner</span></em><span style="color:#000000; background:rgb(255,255,255)">.id</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">cleanable.log.name</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">cleanable.firstDirtyOffset</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">             </span><span style="color:#000000; background:rgb(255,255,255)">endOffset</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><em><span style="color:#66e7a; background:rgb(255,255,255)">cleaner</span></em><span style="color:#000000; background:rgb(255,255,255)">.stats)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      } </span><strong><span style="color:#0080; background:rgb(255,255,255)">catch </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">case </span></strong><span style="color:#000000; background:rgb(255,255,255)">pe: LogCleaningAbortedException =&gt; </span><em><span style="color:#808080; background:rgb(255,255,255)">// task can be aborted, let it go.</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">      </span></em><span style="color:#000000; background:rgb(255,255,255)">} </span><strong><span style="color:#0080; background:rgb(255,255,255)">finally </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">从</span><span style="color:#000000; background:rgb(228,228,255)">inProgress</span><span style="color:#000000; background:rgb(255,255,255)">集合中移出这个被Clear后的Log处理,同时更新这个cleaner-offset-checkpoint中对应此partition的offset.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">        </span><em><span style="color:#66e7a; background:rgb(255,255,255)">cleanerManager</span></em><span style="color:#000000; background:rgb(255,255,255)">.doneCleaning(cleanable.topicPartition</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">             </span><span style="color:#000000; background:rgb(255,255,255)">cleanable.log.dir.getParentFile</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">endOffset)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#00ff; background:rgb(255,255,255)">Cleaner中的clean函数,处理对过期日志的合并操作</span><span style="color:#000000; background:rgb(255,255,255)">:</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">Cleaner实例生成时,需要如下几个配置项:</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">配置项</span><strong><span style="color:#0800; background:rgb(255,255,255)">log.cleaner.dedupe.buffer.size</span></strong><span style="color:#000000; background:rgb(255,255,255)">,默认值128MB,用于配置清理过期数据的内存缓冲区,这个用于数据清理时,选择的压缩方式时,用于对重复数据的清理排序内存.每一个Cleaner实例的buffer大小是这个配置大小/总的cleaner的线程个数.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">配置项</span><strong><span style="color:#0800; background:rgb(255,255,255)">log.cleaner.io.buffer.load.factor</span></strong><span style="color:#000000; background:rgb(255,255,255)">,默认值0.9,用于配置清理内存缓冲区的数据装载因子,主要是用于hash(默认使用MD5hash算法),这个因子越小,对桶的重复可能越小,但内存占用越大,用于日志合并.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">配置项</span><strong><span style="color:#0800; background:rgb(255,255,255)">log.cleaner.io.buffer.size</span></strong><span style="color:#000000; background:rgb(255,255,255)">,默认值512KB,用于清理过期数据的IO缓冲区大小,用于日志合并.每一个Cleaner实例的iobuffer大小是这个配置大小/总的cleaner的线程个数/2(输入与输出).</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这个函数返回的offset就是处理到的segment的最后的一个offset.</span></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0080; background:rgb(255,255,255)">private</span></strong><span style="color:#000000; background:rgb(255,255,255)">[log] </span><strong><span style="color:#0080; background:rgb(255,255,255)">def </span></strong><span style="color:#000000; background:rgb(255,255,255)">clean(cleanable: LogToClean): </span><span style="color:#cc7832; background:rgb(255,255,255)">Long </span><span style="color:#000000; background:rgb(255,255,255)">= {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  stats.clear()</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  info(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Beginning cleaning of log %s."</span></strong><span style="color:#000000; background:rgb(255,255,255)">.format(cleanable.log.name))</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">log = cleanable.log</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><em><span style="color:#808080; background:rgb(255,255,255)">// build the offset map</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">  </span></em><span style="color:#000000; background:rgb(255,255,255)">info(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Building offset map for %s..."</span></strong><span style="color:#000000; background:rgb(255,255,255)">.format(cleanable.log.name))</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">先得到当前最后一个segment的offset的开始位置,这个segment是当前活动的segment</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">upperBoundOffset = log.activeSegment.baseOffset</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里使用到的offsetMap是一个存储key对应的offset的一个Map实例,由SkimpyOffsetMap实现.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">Hash算法是MD5算法,内存大小就是上面说到的dedupe的大小.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">在这个函数中,根据startoffset与endoffset找到对应的segments,根据map的大小,计算出map可存储的消息条数,这个Offsetmap的key是消息的bytebuffer的hash码,value是对应此消息的key的offset.把segment中,可以通过map存储的segment加载到内存中,直接map不能存储更多的消息时,停止这个offsetMap的build操作,这时返回的endOffset就是能够加载到map里面的最后一个segment的最后一个offset的值.</span><span style="color:#ff00; background:rgb(255,255,255)">注意:这个map中并不存储key值,而是存储的key值的hash码</span><span style="color:#000000; background:rgb(255,255,255)">.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">endOffset = buildOffsetMap(log</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">cleanable.firstDirtyOffset</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">upperBoundOffset</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">       </span><span style="color:#000000; background:rgb(255,255,255)">offsetMap) + </span><span style="color:#00ff; background:rgb(255,255,255)">1</span><span style="color:#00ff; background:rgb(255,255,255)"><br>
</span><span style="color:#00ff; background:rgb(255,255,255)">  </span><span style="color:#000000; background:rgb(255,255,255)">stats.indexDone()</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  这里通过0到上次计算清理的firstDirtyOffset得到的segments其实就是得到已经进行清理后的所有的segments,下面的这段语句就是得到最近一次执行清理的时间,减少保留的时间,得到这个segment应该执行清理操作的时间.这个值用于检查老的segment中,如果最后的修改时间小于或等于这个值的segment应该被排除掉,不会在进行压缩.</span><em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">  </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">deleteHorizonMs = </span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    log.logSegments(</span><span style="color:#00ff; background:rgb(255,255,255)">0</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">cleanable.firstDirtyOffset).lastOption </span><strong><span style="color:#0080; background:rgb(255,255,255)">match </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><strong><span style="color:#0080; background:rgb(255,255,255)">case </span></strong><span style="color:#000000; background:rgb(255,255,255)">None =&gt; </span><span style="color:#00ff; background:rgb(255,255,255)">0L</span><span style="color:#00ff; background:rgb(255,255,255)"><br>
</span><span style="color:#00ff; background:rgb(255,255,255)">      </span><strong><span style="color:#0080; background:rgb(255,255,255)">case </span></strong><em><span style="color:#000000; background:rgb(255,255,255)">Some</span></em><span style="color:#000000; background:rgb(255,255,255)">(seg) =&gt; seg.lastModified - log.config.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">deleteRetentionMs</span><span style="color:#66e7a; background:rgb(255,255,255)"><br>
</span><span style="color:#66e7a; background:rgb(255,255,255)">  </span></em><span style="color:#000000; background:rgb(255,255,255)">}</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><em><span style="color:#808080; background:rgb(255,255,255)">// group the segments and clean the groups</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">  </span></em><span style="color:#000000; background:rgb(255,255,255)">info(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Cleaning log %s (discarding tombstones prior to %s)..."</span></strong><span style="color:#000000; background:rgb(255,255,255)">.format(log.name</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">        </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">Date(deleteHorizonMs)))</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里读取到上面计算出来的endOffset部分的所有的segment,根据segmentsize,indexsize进行分组,这个分组是每一组的segmentsize不能超过segmentSize的配置大小,indexfile不能超过配置的最大indexsize的大小,同时条数不能超过int.maxvalue.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">迭代计算出来需要进行清理的所有的segments通过调用cleanSegments函数进行清理操作.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">for </span></strong><span style="color:#000000; background:rgb(255,255,255)">(group &lt;- groupSegmentsBySize(log.logSegments(</span><span style="color:#00ff; background:rgb(255,255,255)">0</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">endOffset)</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">            </span><span style="color:#000000; background:rgb(255,255,255)">log.config.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">segmentSize</span></em><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">log.config.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">maxIndexSize</span></em><span style="color:#000000; background:rgb(255,255,255)">))</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    cleanSegments(log</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">group</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">offsetMap</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">deleteHorizonMs)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><em><span style="color:#808080; background:rgb(255,255,255)">// record buffer utilization</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">  </span></em><span style="color:#000000; background:rgb(255,255,255)">stats.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">bufferUtilization </span></em><span style="color:#000000; background:rgb(255,255,255)">= offsetMap.utilization</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  stats.allDone()</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  endOffset</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">执行对segment的清理操作:</span></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0080; background:rgb(255,255,255)">private</span></strong><span style="color:#000000; background:rgb(255,255,255)">[log] </span><strong><span style="color:#0080; background:rgb(255,255,255)">def </span></strong><span style="color:#000000; background:rgb(255,255,255)">cleanSegments(log: Log</span><span style="color:#cc7832; background:rgb(255,255,255)">,</span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                               </span><span style="color:#000000; background:rgb(255,255,255)">segments: Seq[LogSegment]</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                               </span><span style="color:#000000; background:rgb(255,255,255)">map: OffsetMap</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#cc7832; background:rgb(255,255,255)"><br>
</span><span style="color:#cc7832; background:rgb(255,255,255)">                               </span><span style="color:#000000; background:rgb(255,255,255)">deleteHorizonMs: </span><span style="color:#cc7832; background:rgb(255,255,255)">Long</span><span style="color:#000000; background:rgb(255,255,255)">) {</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">根据要执行合并操作的所有的segments中取出第一个segment通过这个文件或名称,生成一个log与index文件的.cleaned的文件,用于把所有的segments添加到这一个segment中.</span><em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">  </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">logFile = </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">File(segments.head.log.file.getPath + Log.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">CleanedFileSuffix</span></em><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  logFile.delete()</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">indexFile = </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">File(segments.head.index.file.getPath + Log.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">CleanedFileSuffix</span></em><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  indexFile.delete()</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">messages = </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">FileMessageSet(logFile</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">fileAlreadyExists = </span><strong><span style="color:#0080; background:rgb(255,255,255)">false</span></strong><span style="color:#cc7832; background:rgb(255,255,255)">,</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">        </span><span style="color:#000000; background:rgb(255,255,255)">initFileSize = log.initFileSize()</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">preallocate = log.config.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">preallocate</span></em><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">index = </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">OffsetIndex(indexFile</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">segments.head.baseOffset</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">        </span><span style="color:#000000; background:rgb(255,255,255)">segments.head.index.maxIndexSize)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">cleaned = </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">LogSegment(messages</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">index</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">segments.head.baseOffset</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">        </span><span style="color:#000000; background:rgb(255,255,255)">segments.head.indexIntervalBytes</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">log.config.randomSegmentJitter</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">time)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  </span><strong><span style="color:#0080; background:rgb(255,255,255)">try </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><em><span style="color:#808080; background:rgb(255,255,255)">// clean segments into the new destination segment</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">for </span></strong><span style="color:#000000; background:rgb(255,255,255)">(old &lt;- segments) {</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">retainDeletes = old.lastModified &gt; deleteHorizonMs</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      info(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Cleaning segment %s in log %s (last modified %s) into %s, %s deletes."</span><span style="color:#0800; background:rgb(255,255,255)"><br>
</span><span style="color:#0800; background:rgb(255,255,255)">          </span></strong><span style="color:#000000; background:rgb(255,255,255)">.format(old.baseOffset</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">log.name</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><strong><span style="color:#0080; background:rgb(255,255,255)">new </span></strong><span style="color:#000000; background:rgb(255,255,255)">Date(old.lastModified)</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span></p>
<p style="background:rgb(255,255,255)"><span style="color:#cc7832; background:rgb(255,255,255)">          </span><span style="color:#000000; background:rgb(255,255,255)">cleaned.baseOffset</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><strong><span style="color:#0080; background:rgb(255,255,255)">if</span></strong><span style="color:#000000; background:rgb(255,255,255)">(retainDeletes) </span><strong><span style="color:#0800; background:rgb(255,255,255)">"retaining" </span><span style="color:#0080; background:rgb(255,255,255)">else </span><span style="color:#0800; background:rgb(255,255,255)">"discarding"</span></strong><span style="color:#000000; background:rgb(255,255,255)">))</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">这里迭代所有的segment进行合并操作,合并流程:</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">1,首先迭代这个segment中的所有的message,如果message的key在OffsetMap中能找到对应的offset,同时当前的message的offset不小于offsetMap中存储的offset.</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">2,检查这个segment的最后修改时间是否大于最大的保留时间,如果大于,同时这个消息的value是一个是一个有效的value</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      cleanInto(log.</span><em><span style="color:#66e7a; background:rgb(255,255,255)">topicAndPartition</span></em><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">old</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">cleaned</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">map</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">retainDeletes)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><em><span style="color:#808080; background:rgb(255,255,255)">// trim excess index</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    </span></em><span style="color:#000000; background:rgb(255,255,255)">index.trimToValidSize()</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><em><span style="color:#808080; background:rgb(255,255,255)">// flush new segment to disk before swap</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    </span></em><span style="color:#000000; background:rgb(255,255,255)">cleaned.flush()</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><em><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    </span></em><strong><span style="color:#0080; background:rgb(255,255,255)">val </span></strong><span style="color:#000000; background:rgb(255,255,255)">modified = segments.last.lastModified</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    cleaned.lastModified = modified</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><em><span style="color:#808080; background:rgb(255,255,255)">// swap in new segment</span><span style="color:#808080; background:rgb(255,255,255)"><br>
</span><span style="color:#808080; background:rgb(255,255,255)">    </span></em><span style="color:#000000; background:rgb(255,255,255)">info(</span><strong><span style="color:#0800; background:rgb(255,255,255)">"Swapping in cleaned segment %d for segment(s) %s in log %s."</span></strong></p>
<p style="background:rgb(255,255,255)"><strong><span style="color:#0800; background:rgb(255,255,255)">        </span></strong><span style="color:#000000; background:rgb(255,255,255)">.format(cleaned.baseOffset</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">segments.map(_.baseOffset)</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">        .mkString(</span><strong><span style="color:#0800; background:rgb(255,255,255)">","</span></strong><span style="color:#000000; background:rgb(255,255,255)">)</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">log.name))</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)">最后,删除老的segments并删除对应的文件,把.cleared的segment更新为正常的segment,并添加到log的segments中.</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    log.replaceSegments(cleaned</span><span style="color:#cc7832; background:rgb(255,255,255)">, </span><span style="color:#000000; background:rgb(255,255,255)">segments)</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  } </span><strong><span style="color:#0080; background:rgb(255,255,255)">catch </span></strong><span style="color:#000000; background:rgb(255,255,255)">{</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">    </span><strong><span style="color:#0080; background:rgb(255,255,255)">case </span></strong><span style="color:#000000; background:rgb(255,255,255)">e: LogCleaningAbortedException =&gt;</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      cleaned.delete()</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">      </span><strong><span style="color:#0080; background:rgb(255,255,255)">throw </span></strong><span style="color:#000000; background:rgb(255,255,255)">e</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">  }</span><span style="color:#000000; background:rgb(255,255,255)"><br>
</span><span style="color:#000000; background:rgb(255,255,255)">}</span></p>
<p style="background:rgb(255,255,255)"><span style="color:#000000; background:rgb(255,255,255)"> </span></p>
            </div>
                </div>