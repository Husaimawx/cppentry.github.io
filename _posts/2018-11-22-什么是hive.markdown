---
layout:     post
title:      什么是hive
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                <h1 style="margin-left:0cm;">一 Hive基本概念</h1>

<h2 style="margin-left:0cm;">1.1 什么是Hive</h2>

<p style="margin-left:0cm;">Hive：由Facebook开源用于解决海量结构化日志的数据统计。</p>

<p style="margin-left:0cm;">Hive是基于Hadoop的一个<span style="color:#ff0000;">数据仓库工具</span>，可以将<span style="color:#ff0000;">结构化的数据文件映射为一张表</span>，并提供类SQL查询功能。</p>

<p style="margin-left:0cm;"><span style="color:#ff0000;">本质是：将</span><span style="color:#ff0000;">HQL</span><span style="color:#ff0000;">转化成</span><span style="color:#ff0000;">MapReduce</span><span style="color:#ff0000;">程序</span></p>

<p style="margin-left:0cm;">1）Hive处理的数据存储在HDFS</p>

<p style="margin-left:0cm;">2）Hive分析数据底层的实现是MapReduce</p>

<p style="margin-left:0cm;">3）执行程序运行在Yarn上</p>

<h2 style="margin-left:0cm;">1.2 Hive的优缺点</h2>

<h3 style="margin-left:0cm;">1.2.1 优点</h3>

<p style="margin-left:0cm;">1）操作接口采用类SQL语法，提供快速开发的能力（简单、容易上手）</p>

<p style="margin-left:0cm;">2）避免了去写MapReduce，减少开发人员的学习成本。</p>

<p style="margin-left:0cm;">3）Hive的执行延迟比较高，<span style="color:#ff0000;">因此</span><span style="color:#ff0000;">Hive</span><span style="color:#ff0000;">常用于数据分析，对实时性要求不高的场合；</span></p>

<p style="margin-left:0cm;">4）Hive优势在于处理大数据<span style="color:#ff0000;">，对于处理小数据没有优势，因为</span><span style="color:#ff0000;">Hive</span><span style="color:#ff0000;">的执行延迟比较高。</span></p>

<p style="margin-left:0cm;">5）Hive支持用户自定义函数，用户可以根据自己的需求来实现自己的函数。</p>

<h3 style="margin-left:0cm;">1.2.2 缺点</h3>

<p style="margin-left:0cm;">1）Hive的HQL表达能力有限</p>

<p style="margin-left:0cm;">（1）迭代式算法无法表达</p>

<p style="margin-left:0cm;">（2）数据挖掘方面不擅长</p>

<p style="margin-left:0cm;">2）Hive的效率比较低</p>

<p style="margin-left:0cm;">（1）Hive自动生成的MapReduce作业，通常情况下不够智能化</p>

<p style="margin-left:0cm;">（2）Hive调优比较困难，粒度较粗</p>

<h2 style="margin-left:0cm;">1.3 Hive架构原理</h2>

<p style="margin-left:0cm;"> </p>

<p style="margin-left:0cm;"><span style="color:#000000;">如图中所示，</span><span style="color:#000000;">Hive</span><span style="color:#000000;">通过给用户提供的一系列交互接口，接收到用户的指令</span><span style="color:#000000;">(SQL)</span><span style="color:#000000;">，使用自己的</span><span style="color:#000000;">Driver</span><span style="color:#000000;">，结合元数据</span><span style="color:#000000;">(MetaStore)</span><span style="color:#000000;">，将这些指令翻译成</span><span style="color:#000000;">MapReduce</span><span style="color:#000000;">，提交到</span><span style="color:#000000;">Hadoop</span><span style="color:#000000;">中执行，最后，将执行返回的结果输出到用户交互接口。</span></p>

<p style="margin-left:0cm;">1）用户接口：Client</p>

<p style="margin-left:0cm;">CLI（hive shell）、JDBC/ODBC(java访问hive)、WEBUI（浏览器访问hive）</p>

<p style="margin-left:0cm;">2）元数据：Metastore</p>

<p style="margin-left:0cm;">元数据包括：表名、表所属的数据库（默认是default）、表的拥有者、列/分区字段、表的类型（是否是外部表）、表的数据所在目录等；</p>

<p style="margin-left:0cm;"><span style="color:#ff0000;">默认存储在自带的</span><span style="color:#ff0000;">derby</span><span style="color:#ff0000;">数据库中，推荐使用</span><span style="color:#ff0000;">MySQL</span><span style="color:#ff0000;">存储</span><span style="color:#ff0000;">Metastore</span></p>

<p style="margin-left:0cm;">3）Hadoop</p>

<p style="margin-left:0cm;">使用HDFS进行存储，使用MapReduce进行计算。</p>

<p style="margin-left:0cm;">4）驱动器：Driver</p>

<p style="margin-left:0cm;">（1）解析器（SQL Parser）：将SQL字符串转换成抽象语法树AST，这一步一般都用第三方工具库完成，比如antlr；对AST进行语法分析，比如表是否存在、字段是否存在、SQL语义是否有误。</p>

<p style="margin-left:0cm;">（2）编译器（Physical Plan）：将AST编译生成逻辑执行计划。</p>

<p style="margin-left:0cm;">（3）优化器（Query Optimizer）：对逻辑执行计划进行优化。</p>

<p style="margin-left:0cm;">（4）执行器（Execution）：把逻辑执行计划转换成可以运行的物理计划。对于Hive来说，就是MR/Spark。</p>

<h2 style="margin-left:0cm;">1.4 Hive和数据库比较</h2>

<p style="margin-left:0cm;"><span style="color:#000000;">由于</span><span style="color:#000000;"> Hive </span><span style="color:#000000;">采用了类似</span><span style="color:#000000;">SQL </span><span style="color:#000000;">的查询语言</span><span style="color:#000000;"> HQL(Hive Query Language)</span><span style="color:#000000;">，因此很容易将</span><span style="color:#000000;"> Hive </span><span style="color:#000000;">理解为数据库。其实从结构上来看，</span><span style="color:#000000;">Hive </span><span style="color:#000000;">和数据库除了拥有类似的查询语言，再无类似之处。本文将从多个方面来阐述</span><span style="color:#000000;"> Hive </span><span style="color:#000000;">和数据库的差异。数据库可以用在</span><span style="color:#000000;"> Online </span><span style="color:#000000;">的应用中，但是</span><span style="color:#000000;">Hive </span><span style="color:#000000;">是为数据仓库而设计的，清楚这一点，有助于从应用角度理解</span><span style="color:#000000;"> Hive </span><span style="color:#000000;">的特性。</span></p>

<h3 style="margin-left:0cm;">1.4.1 查询语言</h3>

<p style="margin-left:0cm;"><span style="color:#000000;">由于</span><span style="color:#000000;">SQL</span><span style="color:#000000;">被广泛的应用在数据仓库中，因此，专门针对</span><span style="color:#000000;">Hive</span><span style="color:#000000;">的特性设计了类</span><span style="color:#000000;">SQL</span><span style="color:#000000;">的查询语言</span><span style="color:#000000;">HQL</span><span style="color:#000000;">。熟悉</span><span style="color:#000000;">SQL</span><span style="color:#000000;">开发的开发者可以很方便的使用</span><span style="color:#000000;">Hive</span><span style="color:#000000;">进行开发。</span></p>

<h3 style="margin-left:0cm;">1.4.2 数据存储位置</h3>

<p style="margin-left:0cm;"><span style="color:#000000;">Hive </span><span style="color:#000000;">是建立在</span><span style="color:#000000;"> Hadoop </span><span style="color:#000000;">之上的，所有</span><span style="color:#000000;"> Hive </span><span style="color:#000000;">的数据都是存储在</span><span style="color:#000000;"> HDFS </span><span style="color:#000000;">中的。而数据库则可以将数据保存在块设备或者本地文件系统中。</span></p>

<h3 style="margin-left:0cm;">1.4.3 数据更新</h3>

<p style="margin-left:0cm;"><span style="color:#000000;">由于</span><span style="color:#000000;">Hive</span><span style="color:#000000;">是针对数据仓库应用设计的，而</span><span style="color:#ff0000;">数据仓库的内容是读多写少的。</span><span style="color:#000000;">因此，</span><span style="color:#ff0000;">Hive</span><span style="color:#ff0000;">中不支持对数据的改写和添加，所有的数据都是在加载的时候确定好的。</span><span style="color:#000000;">而数据库中的数据通常是需要经常进行修改的，因此可以使用</span><span style="color:#000000;"> INSERT INTO …  VALUES </span><span style="color:#000000;">添加数据，使用</span><span style="color:#000000;"> UPDATE … SET</span><span style="color:#000000;">修改数据。</span></p>

<h3 style="margin-left:0cm;">1.4.4 索引</h3>

<p style="margin-left:0cm;"><span style="color:#000000;">Hive</span><span style="color:#000000;">在加载数据的过程中不会对数据进行任何处理，甚至不会对数据进行扫描，因此也没有对数据中的某些</span><span style="color:#000000;">Key</span><span style="color:#000000;">建立索引。</span><span style="color:#000000;">Hive</span><span style="color:#000000;">要访问数据中满足条件的特定值时，需要暴力扫描整个数据，因此访问延迟较高。由于</span><span style="color:#000000;"> MapReduce </span><span style="color:#000000;">的引入，</span><span style="color:#000000;"> Hive </span><span style="color:#000000;">可以并行访问数据，因此即使没有索引，对于</span><span style="color:#000000;"><a href="http://lib.csdn.net/base/hadoop" rel="nofollow"><span style="color:#000000;">大数据</span></a></span><span style="color:#000000;">量的访问，</span><span style="color:#000000;">Hive </span><span style="color:#000000;">仍然可以体现出优势。数据库中，通常会针对一个或者几个列建立索引，因此对于少量的特定条件的数据的访问，数据库可以有很高的效率，较低的延迟。由于数据的访问延迟较高，决定了</span><span style="color:#000000;"> Hive </span><span style="color:#000000;">不适合在线数据查询。</span></p>

<h3 style="margin-left:0cm;">1.4.5 执行</h3>

<p style="margin-left:0cm;"><span style="color:#000000;">Hive</span><span style="color:#000000;">中大多数查询的执行是通过</span><span style="color:#000000;"> Hadoop </span><span style="color:#000000;">提供的</span><span style="color:#000000;"> MapReduce </span><span style="color:#000000;">来实现的。而数据库通常有自己的执行引擎。</span></p>

<h3 style="margin-left:0cm;">1.4.6 执行延迟</h3>

<p style="margin-left:0cm;"><span style="color:#000000;">Hive </span><span style="color:#000000;">在查询数据的时候，由于没有索引，需要扫描整个表，因此延迟较高。另外一个导致</span><span style="color:#000000;"> Hive </span><span style="color:#000000;">执行延迟高的因素是</span><span style="color:#000000;"> MapReduce</span><span style="color:#000000;">框架。由于</span><span style="color:#000000;">MapReduce </span><span style="color:#000000;">本身具有较高的延迟，因此在利用</span><span style="color:#000000;">MapReduce </span><span style="color:#000000;">执行</span><span style="color:#000000;">Hive</span><span style="color:#000000;">查询时，也会有较高的延迟。相对的，数据库的执行延迟较低。当然，这个低是有条件的，即数据规模较小，当数据规模大到超过数据库的处理能力的时候，</span><span style="color:#000000;">Hive</span><span style="color:#000000;">的并行计算显然能体现出优势。</span></p>

<h3 style="margin-left:0cm;">1.4.7 可扩展性</h3>

<p style="margin-left:0cm;"><span style="color:#000000;">由于</span><span style="color:#000000;">Hive</span><span style="color:#000000;">是建立在</span><span style="color:#000000;">Hadoop</span><span style="color:#000000;">之上的，因此</span><span style="color:#000000;">Hive</span><span style="color:#000000;">的可扩展性是和</span><span style="color:#000000;">Hadoop</span><span style="color:#000000;">的可扩展性是一致的（世界上最大的</span><span style="color:#000000;">Hadoop </span><span style="color:#000000;">集群在</span><span style="color:#000000;"> Yahoo!</span><span style="color:#000000;">，</span><span style="color:#000000;">2009</span><span style="color:#000000;">年的规模在</span><span style="color:#000000;">4000 </span><span style="color:#000000;">台节点左右）。而数据库由于</span><span style="color:#000000;"> ACID </span><span style="color:#000000;">语义的严格限制，扩展行非常有限。目前最先进的并行数据库</span><span style="color:#000000;"> <a href="http://lib.csdn.net/base/oracle" rel="nofollow"><span style="color:#000000;">Oracle</span></a> </span><span style="color:#000000;">在理论上的扩展能力也只有</span><span style="color:#000000;">100</span><span style="color:#000000;">台左右。</span></p>

<h3 style="margin-left:0cm;">1.4.8 数据规模</h3>

<p style="margin-left:0cm;">由于Hive建立在集群上并可以利用MapReduce进行并行计算，因此可以支持很大规模的数据；对应的，数据库可以支持的数据规模较小。</p>            </div>
                </div>