---
layout:     post
title:      深入浅出学Hive：Hive内建操作符与函数开发
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                <p>目录：</p>

<p><a href="http://blog.csdn.net/guohecang/article/details/51576755" rel="nofollow">初始Hive</a></p>

<p><a href="http://blog.csdn.net/guohecang/article/details/51576829" rel="nofollow">Hive安装与配置</a></p>

<p><a href="http://blog.csdn.net/guohecang/article/details/51576891" rel="nofollow">Hive内建操作符与函数开发</a></p>

<p><a href="http://blog.csdn.net/guohecang/article/details/51576917" rel="nofollow">Hive JDBC</a></p>

<p><a href="http://blog.csdn.net/guohecang/article/details/51576933" rel="nofollow">Hive参数</a></p>

<p><a href="http://blog.csdn.net/guohecang/article/details/51576957" rel="nofollow">Hive高级编程</a></p>

<p><a href="http://blog.csdn.net/guohecang/article/details/51576975" rel="nofollow">Hive QL</a></p>

<p><a href="http://blog.csdn.net/guohecang/article/details/51576993" rel="nofollow">Hive Shell基本操作</a></p>

<p><a href="http://blog.csdn.net/guohecang/article/details/51577027" rel="nofollow">Hive优化</a></p>

<p><a href="http://blog.csdn.net/guohecang/article/details/51577040" rel="nofollow">Hive体系结构</a></p>

<p><a href="http://blog.csdn.net/guohecang/article/details/51577052" rel="nofollow">Hive原理</a></p>

<p> </p>

<p> </p>

<p> </p>

<p>第一部分：关系运算</p>

<p>Hive支持的关系运算符</p>

<p>•常见的关系运算符</p>

<p>•等值比较: =</p>

<p>•不等值比较: &lt;&gt;</p>

<p>•小于比较: &lt;</p>

<p>•小于等于比较: &lt;=</p>

<p>•大于比较: &gt;</p>

<p>•大于等于比较: &gt;=</p>

<p>•空值判断: IS NULL</p>

<p>•非空判断: IS NOT NULL</p>

<p>•LIKE比较: LIKE</p>

<p>•JAVA的LIKE操作: RLIKE</p>

<p>•REGEXP操作: REGEXP</p>

<p>•等值比较: =</p>

<p>   语法：A=B</p>

<p>操作类型：所有基本类型</p>

<p>描述: 如果表达式A与表达式B相等，则为TRUE；否则为FALSE</p>

<p>举例：</p>

<p>hive&gt; select 1 from dual where 1=1;</p>

<p>•不等值比较: &lt;&gt;</p>

<p>语法: A &lt;&gt; B</p>

<p>操作类型: 所有基本类型</p>

<p>描述: 如果表达式A为NULL，或者表达式B为NULL，返回NULL；如果表达式A与表达式B不相等，则为TRUE；否则为FALSE</p>

<p>举例：</p>

<p>hive&gt; select 1 from dual where 1 &lt;&gt; 2;</p>

<p>•小于比较: &lt;</p>

<p>语法: A &lt; B</p>

<p>操作类型: 所有基本类型</p>

<p>描述: 如果表达式A为NULL，或者表达式B为NULL，返回NULL；如果表达式A小于表达式B，则为TRUE；否则为FALSE</p>

<p>举例：</p>

<p>hive&gt; select 1 from dual where 1 &lt; 2;</p>

<p>•小于等于比较: &lt;=</p>

<p>语法: A &lt;= B</p>

<p>操作类型: 所有基本类型</p>

<p>描述: 如果表达式A为NULL，或者表达式B为NULL，返回NULL；如果表达式A小于或者等于表达式B，则为TRUE；否则为FALSE</p>

<p>举例：</p>

<p>hive&gt; select 1 from dual where 1 &lt;= 1;</p>

<p>•大于等于比较: &gt;=</p>

<p>语法: A &gt;= B</p>

<p>操作类型: 所有基本类型</p>

<p>描述: 如果表达式A为NULL，或者表达式B为NULL，返回NULL；如果表达式A大于或者等于表达式B，则为TRUE；否则为FALSE</p>

<p>举例：</p>

<p>hive&gt; select 1 from dual where 1 &gt;= 1;</p>

<p>•空值判断: IS NULL</p>

<p>语法: A IS NULL</p>

<p>操作类型: 所有类型</p>

<p>描述: 如果表达式A的值为NULL，则为TRUE；否则为FALSE</p>

<p>举例：</p>

<p>hive&gt; select 1 from dual where null is null;</p>

<p> </p>

<p>•非空判断: IS NOT NULL</p>

<p>语法: A IS NOT NULL</p>

<p>操作类型: 所有类型</p>

<p>描述: 如果表达式A的值为NULL，则为FALSE；否则为TRUE</p>

<p>举例：</p>

<p>hive&gt; select 1 from dual where 1 is not null;</p>

<p> </p>

<p>•LIKE比较: LIKE</p>

<p>语法: A LIKE B</p>

<p>操作类型: strings</p>

<p>描述: 如果字符串A或者字符串B为NULL，则返回NULL；如果字符串A符合表达式B   的正则语法，则为TRUE；否则为FALSE。B中字符”_”表示任意单个字符，而字符”%”表示任意数量的字符。</p>

<p>举例：</p>

<p>hive&gt; select 1 from dual where ‘key' like 'foot%';</p>

<p>1</p>

<p>hive&gt; select 1 from dual where ‘key ' like 'foot____';</p>

<p>1</p>

<p>注意：否定比较时候用 NOT A LIKE B</p>

<p>hive&gt; select 1 from dual where NOT ‘key ' like 'fff%';</p>

<p>•JAVA的LIKE操作: RLIKE</p>

<p>语法: A RLIKE B</p>

<p>操作类型: strings</p>

<p>描述: 如果字符串A或者字符串B为NULL，则返回NULL；如果字符串A符合JAVA正则表达式B的正则语法，则为TRUE；否则为FALSE。</p>

<p>举例：</p>

<p>hive&gt; select 1 from dual where 'footbar’ rlike '^f.*r$’;</p>

<p>1</p>

<p>注意：判断一个字符串是否全为数字：</p>

<p>hive&gt;select 1 from dual where '123456' rlike '^\\d+$';</p>

<p>1</p>

<p>hive&gt; select 1 from dual where '123456aa' rlike '^\\d+$';</p>

<p>1</p>

<p>•REGEXP操作: REGEXP</p>

<p>语法: A REGEXP B</p>

<p>操作类型: strings</p>

<p>描述: 功能与RLIKE相同</p>

<p>举例：</p>

<p>hive&gt; select 1 from dual where ‘key' REGEXP '^f.*r$';</p>

<p>1</p>

<p> </p>

<p>第二部分：逻辑运算与数学运算</p>

<p>Hive数学运算</p>

<p>•加法操作: +</p>

<p>•减法操作: -</p>

<p>•乘法操作: *</p>

<p>•除法操作: /</p>

<p>•取余操作: %</p>

<p>•位与操作: &amp;</p>

<p>•位或操作: |</p>

<p>•位异或操作: ^</p>

<p>•位取反操作: ~</p>

<p>•加法操作: +</p>

<p>语法: A + B</p>

<p>操作类型：所有数值类型</p>

<p>说明：返回A与B相加的结果。结果的数值类型等于A的类型和B的类型的最小父类型（详见数据类型的继承关系）。比如，int + int 一般结果为int类型，而int + double 一般结果为double类型</p>

<p>举例：</p>

<p>hive&gt; select 1 + 9 from dual;</p>

<p>10</p>

<p>•减法操作: -</p>

<p>语法: A – B</p>

<p>操作类型：所有数值类型</p>

<p>说明：返回A与B相减的结果。结果的数值类型等于A的类型和B的类型的最小父类型（详见数据类型的继承关系）。比如，int – int 一般结果为int类型，而int – double 一般结果为double类型</p>

<p>举例：</p>

<p>hive&gt; select 10 – 5 from dual;</p>

<p>5</p>

<p> </p>

<p>• 乘法操作 : *</p>

<p>语法: A * B</p>

<p>操作类型：所有数值类型</p>

<p>说明：返回A与B相乘的结果。结果的数值类型等于A的类型和B的类型的最小父类型（详见数据类型的继承关系）。注意，如果A乘以B的结果超过默认结果类型的数值范围，则需要通过cast将结果转换成范围更大的数值类型</p>

<p>举例：</p>

<p>hive&gt; select 40 * 5 from dual;</p>

<p>200</p>

<p>• 除法操作 : /</p>

<p>语法: A / B</p>

<p>操作类型：所有数值类型</p>

<p>说明：返回A除以B的结果。结果的数值类型为double</p>

<p>举例：</p>

<p>hive&gt; select 40 / 5 from dual;</p>

<p>8.0</p>

<p> </p>

<p>注意： hive 中最高精度的数据类型是 double, 只精确到小数点后 16 位，在做除法运算的时候要 特别注意</p>

<p>hive&gt;select ceil(28.0/6.999999999999999999999) from dual limit 1;   </p>

<p>结果为4</p>

<p>hive&gt;select ceil(28.0/6.99999999999999) from dual limit 1;          </p>

<p>结果为5</p>

<p> </p>

<p>• 取余操作 : %</p>

<p>语法: A % B</p>

<p>操作类型：所有数值类型</p>

<p>说明：返回A除以B的余数。结果的数值类型等于A的类型和B的类型的最小父类型（详见数据类型的继承关系）。</p>

<p>举例：</p>

<p>hive&gt; select 41 % 5 from dual;</p>

<p>1</p>

<p>hive&gt; select 8.4 % 4 from dual;</p>

<p>0.40000000000000036</p>

<p>注意：精度在 hive 中是个很大的问题，类似这样的操作最好通过 round 指定精度</p>

<p>hive&gt; select round(8.4 % 4 , 2) from dual;</p>

<p>0.4</p>

<p> </p>

<p>• 位与操作 : &amp;</p>

<p>语法: A &amp; B</p>

<p>操作类型：所有数值类型</p>

<p>说明：返回A和B按位进行与操作的结果。结果的数值类型等于A的类型和B的类型的最小父类型（详见数据类型的继承关系）。</p>

<p>举例：</p>

<p>hive&gt; select 4 &amp; 8 from dual;</p>

<p>0</p>

<p>hive&gt; select 6 &amp; 4 from dual;</p>

<p>4</p>

<p>• 位或操作 : |</p>

<p>语法: A | B</p>

<p>操作类型：所有数值类型</p>

<p>说明：返回A和B按位进行或操作的结果。结果的数值类型等于A的类型和B的类型的最小父类型（详见数据类型的继承关系）。</p>

<p>举例：</p>

<p>hive&gt; select 4 | 8 from dual;</p>

<p>12</p>

<p>hive&gt; select 6 | 8 from dual;</p>

<p>14</p>

<p>• 位异或操作 : ^</p>

<p>语法: A ^ B</p>

<p>操作类型：所有数值类型</p>

<p>说明：返回A和B按位进行异或操作的结果。结果的数值类型等于A的类型和B的类型的最小父类型（详见数据类型的继承关系）。</p>

<p>举例：</p>

<p>hive&gt; select 4 ^ 8 from dual;</p>

<p>12</p>

<p>hive&gt; select 6 ^ 4 from dual;</p>

<p>2</p>

<p>• 位取反操作 : ~</p>

<p>语法: ~A</p>

<p>操作类型：所有数值类型</p>

<p>说明：返回A按位取反操作的结果。结果的数值类型等于A的类型。</p>

<p>举例：</p>

<p>hive&gt; select ~6 from dual;</p>

<p>-7</p>

<p>hive&gt; select ~4 from dual;</p>

<p>-5</p>

<p>Hive逻辑运算</p>

<p>•逻辑与操作: AND</p>

<p>•逻辑或操作: OR</p>

<p>•逻辑非操作: NOT</p>

<p> </p>

<p>• 逻辑与操作 : AND</p>

<p>语法: A AND B</p>

<p>操作类型：boolean</p>

<p>说明：如果A和B均为TRUE，则为TRUE；否则为FALSE。如果A为NULL或B为NULL，则为NULL</p>

<p>举例：</p>

<p>hive&gt; select 1 from dual where 1=1 and 2=2;</p>

<p>1</p>

<p>• 逻辑或操作 : OR</p>

<p>语法: A OR B</p>

<p>操作类型：boolean</p>

<p>说明：如果A为TRUE，或者B为TRUE，或者A和B均为TRUE，则为TRUE；否则为FALSE</p>

<p>举例：</p>

<p>hive&gt; select 1 from dual where 1=2 or 2=2;</p>

<p>1</p>

<p>• 逻辑非操作 : NOT</p>

<p>语法: NOT A</p>

<p>操作类型：boolean</p>

<p>说明：如果A为FALSE，或者A为NULL，则为TRUE；否则为FALSE</p>

<p>举例：</p>

<p>hive&gt; select 1 from dual where not 1=2;</p>

<p>• 逻辑非操作 : NOT</p>

<p>语法: NOT A</p>

<p>操作类型：boolean</p>

<p>说明：如果A为FALSE，或者A为NULL，则为TRUE；否则为FALSE</p>

<p>举例：</p>

<p>hive&gt; select 1 from dual where  not 1=2 ;</p>

<p> </p>

<p>第三部分：数值运算</p>

<p>•取整函数: round</p>

<p>•指定精度取整函数: round</p>

<p>•向下取整函数: floor</p>

<p>•向上取整函数: ceil</p>

<p>•向上取整函数: ceiling</p>

<p>•取随机数函数: rand</p>

<p>•自然指数函数: exp</p>

<p>•以10为底对数函数: log10</p>

<p>•以2为底对数函数: log2</p>

<p>• 对数函数: log</p>

<p>•幂运算函数: pow</p>

<p>•幂运算函数: power</p>

<p>•开平方函数: sqrt</p>

<p>•二进制函数: bin</p>

<p>•十六进制函数: hex</p>

<p>•反转十六进制函数: unhex</p>

<p>•进制转换函数: conv</p>

<p>•绝对值函数: abs</p>

<p>•正取余函数: pmod</p>

<p>•正弦函数: sin</p>

<p>•反正弦函数: asin</p>

<p>•余弦函数: cos</p>

<p>•反余弦函数: acos</p>

<p>•positive函数: positive</p>

<p>•negative函数: negative</p>

<p>• 取整函数 : round</p>

<p>语法: round(double a)</p>

<p>返回值: BIGINT</p>

<p>说明: 返回double类型的整数值部分 （遵循四舍五入）</p>

<p>举例：</p>

<p>hive&gt; select round(3.1415926) from dual;</p>

<p>3</p>

<p>hive&gt; select round(3.5) from dual;</p>

<p>4</p>

<p>hive&gt; create table dual as select round(9542.158) from dual;</p>

<p>hive&gt; describe dual;</p>

<p>_c0     bigint</p>

<p> </p>

<p>• 指定精度取整函数 : round</p>

<p>语法: round(double a, int d)</p>

<p>返回值: DOUBLE</p>

<p>说明: 返回指定精度d的double类型</p>

<p>举例：</p>

<p>hive&gt; select round(3.1415926,4) from dual;</p>

<p>3.1416</p>

<p> </p>

<p>• 向下取整函数 : floor</p>

<p>语法: floor(double a)</p>

<p>返回值: BIGINT</p>

<p>说明: 返回等于或者小于该double变量的最大的整数</p>

<p>举例：</p>

<p>hive&gt; select floor(3.1415926) from dual;</p>

<p>3</p>

<p>hive&gt; select floor(25) from dual;</p>

<p>25</p>

<p> </p>

<p>• 向上取整函数 : ceil</p>

<p>语法: ceil(double a)</p>

<p>返回值: BIGINT</p>

<p>说明: 返回等于或者大于该double变量的最小的整数</p>

<p>举例：</p>

<p>hive&gt; select ceil(3.1415926) from dual;</p>

<p>4</p>

<p>hive&gt; select ceil(46) from dual;</p>

<p>46</p>

<p>• 向上取整函数 : ceiling</p>

<p>语法: ceiling(double a)</p>

<p>返回值: BIGINT</p>

<p>说明: 与ceil功能相同</p>

<p>举例：</p>

<p>hive&gt; select ceiling(3.1415926) from dual;</p>

<p>4</p>

<p>hive&gt; select ceiling(46) from dual;</p>

<p>46</p>

<p> </p>

<p>• 取随机数函数 : rand</p>

<p>语法: rand(),rand(int seed)</p>

<p>返回值: double</p>

<p>说明: 返回一个0到1范围内的随机数。如果指定种子seed，则会等到一个稳定的随机数序列</p>

<p>举例：</p>

<p>hive&gt; select rand() from dual;</p>

<p>0.5577432776034763</p>

<p> </p>

<p>• 自然指数函数 : exp</p>

<p>语法: exp(double a)</p>

<p>返回值: double</p>

<p>说明: 返回自然对数e的a次方</p>

<p>举例：</p>

<p>hive&gt; select exp(2) from dual;</p>

<p>7.38905609893065</p>

<p>自然对数函数: ln</p>

<p>语法: ln(double a)</p>

<p>返回值: double</p>

<p>说明: 返回a的自然对数</p>

<p>• 以 10 为底对数函数 : log10</p>

<p>语法: log10(double a)</p>

<p>返回值: double</p>

<p>说明: 返回以10为底的a的对数</p>

<p>举例：</p>

<p>hive&gt; select log10(100) from dual;</p>

<p>2.0</p>

<p>• 以 2 为底对数函数 : log2</p>

<p>语法: log2(double a)</p>

<p>返回值: double</p>

<p>说明: 返回以2为底的a的对数</p>

<p>举例：</p>

<p>hive&gt; select log2(8) from dual;</p>

<p>3.0</p>

<p>• 对数函数 : log</p>

<p>语法: log(double base, double a)</p>

<p>返回值: double</p>

<p>说明: 返回以base为底的a的对数</p>

<p>举例：</p>

<p>hive&gt; select log(4,256) from dual;</p>

<p>4.0</p>

<p>• 幂运算函数 : pow</p>

<p>语法: pow(double a, double p)</p>

<p>返回值: double</p>

<p>说明: 返回a的p次幂</p>

<p>举例：</p>

<p>hive&gt; select pow(2,4) from dual;</p>

<p>16.0</p>

<p>• 幂运算函数 : power</p>

<p>语法: power(double a, double p)</p>

<p>返回值: double</p>

<p>说明: 返回a的p次幂,与pow功能相同</p>

<p>举例：</p>

<p>hive&gt; select power(2,4) from dual;</p>

<p>16.0</p>

<p>• 开平方函数 : sqrt</p>

<p>语法: sqrt(double a)</p>

<p>返回值: double</p>

<p>说明: 返回a的平方根</p>

<p>举例：</p>

<p>hive&gt; select sqrt(16) from dual;</p>

<p>4.0</p>

<p>• 二进制函数 : bin</p>

<p>语法: bin(BIGINT a)</p>

<p>返回值: string</p>

<p>说明: 返回a的二进制代码表示</p>

<p>举例：</p>

<p>hive&gt; select bin(7) from dual;</p>

<p>111</p>

<p>• 十六进制函数 : hex</p>

<p>语法: hex(BIGINT a)</p>

<p>返回值: string</p>

<p>说明: 如果变量是int类型，那么返回a的十六进制表示；如果变量是string类型，则返回该字符串的十六进制表示</p>

<p>举例：</p>

<p>hive&gt; select hex(17) from dual;</p>

<p>11</p>

<p>hive&gt; select hex(‘abc’) from dual;</p>

<p>616263</p>

<p>• 反转十六进制函数 : unhex</p>

<p>语法: unhex(string a)</p>

<p>返回值: string</p>

<p>说明: 返回该十六进制字符串所代码的字符串</p>

<p>举例：</p>

<p>hive&gt; select unhex(‘616263’) from dual;</p>

<p>abc</p>

<p>hive&gt; select unhex(‘11’) from dual;</p>

<p>-</p>

<p>hive&gt; select unhex(616263) from dual;</p>

<p>abc</p>

<p>• 进制转换函数 : conv</p>

<p>语法: conv(BIGINT num, int from_base, int to_base)</p>

<p>返回值: string</p>

<p>说明: 将数值num从from_base进制转化到to_base进制</p>

<p>举例：</p>

<p>hive&gt; select conv(17,10,16) from dual;</p>

<p>11</p>

<p>hive&gt; select conv(17,10,2) from dual;</p>

<p>10001</p>

<p>• 绝对值函数 : abs</p>

<p>语法: abs(double a)   abs(int a)</p>

<p>返回值: double        int</p>

<p>说明: 返回数值a的绝对值</p>

<p>举例：</p>

<p>hive&gt; select abs(-3.9) from dual;</p>

<p>3.9</p>

<p>hive&gt; select abs(10.9) from dual;</p>

<p>10.9</p>

<p>• 正取余函数 : pmod</p>

<p>语法: pmod(int a, int b),pmod(double a, double b)</p>

<p>返回值: int double</p>

<p>说明: 返回正的a除以b的余数</p>

<p>举例：</p>

<p>hive&gt; select pmod(9,4) from dual;</p>

<p>1</p>

<p>hive&gt; select pmod(-9,4) from dual;</p>

<p>3</p>

<p>• 正弦函数 : sin</p>

<p>语法: sin(double a)</p>

<p>返回值: double</p>

<p>说明: 返回a的正弦值</p>

<p>举例：</p>

<p>hive&gt; select sin(0.8) from dual;</p>

<p>0.7173560908995228</p>

<p>• 反正弦函数 : asin</p>

<p>语法: asin(double a)</p>

<p>返回值: double</p>

<p>说明: 返回a的反正弦值</p>

<p>举例：</p>

<p>hive&gt; select asin(0.7173560908995228) from dual;</p>

<p>0.8</p>

<p>• 余弦函数 : cos</p>

<p>语法: cos(double a)</p>

<p>返回值: double</p>

<p>说明: 返回a的余弦值</p>

<p>举例：</p>

<p>hive&gt; select cos(0.9) from dual;</p>

<p>0.6216099682706644</p>

<p>• 反余弦函数 : acos</p>

<p>语法: acos(double a)</p>

<p>返回值: double</p>

<p>说明: 返回a的反余弦值</p>

<p>举例：</p>

<p>hive&gt; select acos(0.6216099682706644) from dual;</p>

<p>0.9</p>

<p>• positive 函数 : positive</p>

<p>语法: positive(int a), positive(double a)</p>

<p>返回值: int double</p>

<p>说明: 返回a</p>

<p>举例：</p>

<p>hive&gt; select positive(-10) from dual;</p>

<p>-10</p>

<p>hive&gt; select positive(12) from dual;</p>

<p>12</p>

<p>• negative 函数 : negative</p>

<p>语法: negative(int a), negative(double a)</p>

<p>返回值: int double</p>

<p>说明: 返回-a</p>

<p>举例：</p>

<p>hive&gt; select negative(-5) from dual;</p>

<p>5</p>

<p>hive&gt; select negative(8) from dual;</p>

<p>-8</p>

<p> </p>

<p>第四部分：日期函数</p>

<p>• UNIX时间戳转日期函数: from_unixtime</p>

<p>• 获取当前UNIX时间戳函数: unix_timestamp</p>

<p>• 日期转UNIX时间戳函数: unix_timestamp</p>

<p>• 指定格式日期转UNIX时间戳函数: unix_timestamp</p>

<p>• 日期时间转日期函数: to_date</p>

<p>• 日期转年函数: year</p>

<p>• 日期转月函数: month</p>

<p>• 日期转天函数: day</p>

<p>• 日期转小时函数: hour</p>

<p>• 日期转分钟函数: minute</p>

<p>• 日期转秒函数: second</p>

<p>• 日期转周函数: weekofyear</p>

<p>• 日期比较函数: datediff</p>

<p>• 日期增加函数: date_add</p>

<p>• 日期减少函数: date_sub</p>

<p>• UNIX 时间戳转日期函数 : from_unixtime</p>

<p>语法: from_unixtime(bigint unixtime[, string format])</p>

<p>返回值: string</p>

<p>说明: 转化UNIX时间戳（从1970-01-01 00:00:00 UTC到指定时间的秒数）到当前时区的时间格式</p>

<p>举例：</p>

<p>hive&gt; select from_unixtime(1323308943,'yyyyMMdd') from dual;</p>

<p>20111208</p>

<p>• 获取当前 UNIX 时间戳函数 : unix_timestamp</p>

<p>语法: unix_timestamp()</p>

<p>返回值: bigint</p>

<p>说明: 获得当前时区的UNIX时间戳</p>

<p>举例：</p>

<p>hive&gt; select unix_timestamp() from dual;</p>

<p>1323309615</p>

<p>• 日期转 UNIX 时间戳函数 : unix_timestamp</p>

<p>语法: unix_timestamp(string date)</p>

<p>返回值: bigint</p>

<p>说明: 转换格式为"yyyy-MM-dd HH:mm:ss"的日期到UNIX时间戳。如果转化失败，则返回0。</p>

<p>举例：</p>

<p>hive&gt; select unix_timestamp('2011-12-07 13:01:03') from dual;</p>

<p>1323234063</p>

<p>• 指定格式日期转 UNIX 时间戳函数 : unix_timestamp</p>

<p>语法: unix_timestamp(string date, string pattern)</p>

<p>返回值: bigint</p>

<p>说明: 转换pattern格式的日期到UNIX时间戳。如果转化失败，则返回0。</p>

<p>举例：</p>

<p>hive&gt; select unix_timestamp('20111207 13:01:03','yyyyMMdd HH:mm:ss') from dual;</p>

<p>1323234063</p>

<p>• 日期时间转日期函数 : to_date</p>

<p>语法: to_date(string timestamp)</p>

<p>返回值: string</p>

<p>说明: 返回日期时间字段中的日期部分。</p>

<p>举例：</p>

<p>hive&gt; select to_date('2011-12-08 10:03:01') from dual;</p>

<p>2011-12-08</p>

<p>• 日期转年函数 : year</p>

<p>语法: year(string date)</p>

<p>返回值: int</p>

<p>说明: 返回日期中的年。</p>

<p>举例：</p>

<p>hive&gt; select year('2011-12-08 10:03:01') from dual;</p>

<p>2011</p>

<p>hive&gt; select year('2012-12-08') from dual;</p>

<p>2012</p>

<p>• 日期转月函数 : month</p>

<p>语法: month (string date)</p>

<p>返回值: int</p>

<p>说明: 返回日期中的月份。</p>

<p>举例：</p>

<p>hive&gt; select month('2011-12-08 10:03:01') from dual;</p>

<p>12</p>

<p>hive&gt; select month('2011-08-08') from dual;</p>

<p>8</p>

<p>• 日期转天函数 : day</p>

<p>语法: day (string date)</p>

<p>返回值: int</p>

<p>说明: 返回日期中的天。</p>

<p>举例：</p>

<p>hive&gt; select day('2011-12-08 10:03:01') from dual;</p>

<p>8</p>

<p>hive&gt; select day('2011-12-24') from dual;</p>

<p>24</p>

<p>• 日期转小时函数 : hour</p>

<p>语法: hour (string date)</p>

<p>返回值: int</p>

<p>说明: 返回日期中的小时。</p>

<p>举例：</p>

<p>hive&gt; select hour('2011-12-08 10:03:01') from dual;</p>

<p>10</p>

<p>• 日期转分钟函数 : minute</p>

<p>语法: minute (string date)</p>

<p>返回值: int</p>

<p>说明: 返回日期中的分钟。</p>

<p>举例：</p>

<p>hive&gt; select minute('2011-12-08 10:03:01') from dual;</p>

<p>3</p>

<p>• 日期转秒函数 : second</p>

<p>语法: second (string date)</p>

<p>返回值: int</p>

<p>说明: 返回日期中的秒。</p>

<p>举例：</p>

<p>hive&gt; select second('2011-12-08 10:03:01') from dual;</p>

<p>1</p>

<p> </p>

<p>• 日期转周函数 : weekofyear</p>

<p>语法: weekofyear (string date)</p>

<p>返回值: int</p>

<p>说明: 返回日期在当前的周数。</p>

<p>举例：</p>

<p>hive&gt; select weekofyear('2011-12-08 10:03:01') from dual;</p>

<p>49</p>

<p> </p>

<p>• 日期比较函数 : datediff</p>

<p>语法: datediff(string enddate, string startdate)</p>

<p>返回值: int</p>

<p>说明: 返回结束日期减去开始日期的天数。</p>

<p>举例：</p>

<p>hive&gt; select datediff('2012-12-08','2012-05-09') from dual;</p>

<p>213</p>

<p>• 日期增加函数 : date_add</p>

<p>语法: date_add(string startdate, int days)</p>

<p>返回值: string</p>

<p>说明: 返回开始日期startdate增加days天后的日期。</p>

<p>举例：</p>

<p>hive&gt; select date_add('2012-12-08',10) from dual;</p>

<p>2012-12-18</p>

<p> </p>

<p>• 日期减少函数 : date_sub</p>

<p>语法: date_sub (string startdate, int days)</p>

<p>返回值: string</p>

<p>说明: 返回开始日期startdate减少days天后的日期。</p>

<p>举例：</p>

<p>hive&gt; select date_sub('2012-12-08',10) from dual;</p>

<p>2012-11-28</p>

<p> </p>

<p>第五部分：条件函数</p>

<p>•If函数: if</p>

<p>•非空查找函数: COALESCE</p>

<p>•条件判断函数：CASE</p>

<p>• If 函数 : if</p>

<p>语法: if(boolean testCondition, T valueTrue, T valueFalseOrNull)</p>

<p>返回值: T</p>

<p>说明:  当条件testCondition为TRUE时，返回valueTrue；否则返回valueFalseOrNull</p>

<p>举例：</p>

<p>hive&gt; select if(1=2,100,200) from dual;</p>

<p>200</p>

<p>hive&gt; select if(1=1,100,200) from dual;</p>

<p>100</p>

<p>• 非空查找函数 : COALESCE</p>

<p>语法: COALESCE(T v1, T v2, …)</p>

<p>返回值: T</p>

<p>说明:  返回参数中的第一个非空值；如果所有值都为NULL，那么返回NULL</p>

<p>举例：</p>

<p>hive&gt; select COALESCE(null,'100','50′) from dual;</p>

<p>100</p>

<p>条件判断函数： CASE</p>

<p>语法 : CASE a WHEN b THEN c [WHEN d THEN e]* [ELSE f] END</p>

<p>返回值 : T</p>

<p>说明：如果 a 等于 b ，那么返回 c ；如果 a 等于 d ，那么返回 e ；否则返回 f</p>

<p>举例：</p>

<p>hive&gt; Select case 100 when 50 then 'tom' when 100 then 'mary' else 'tim' end from dual;</p>

<p>mary</p>

<p> </p>

<p> </p>

<p>第六部分：字符串函数</p>

<p>•字符串长度函数：length</p>

<p>•字符串反转函数：reverse</p>

<p>•字符串连接函数：concat</p>

<p>• 带分隔符字符串连接函数：concat_ws</p>

<p>• 字符串截取函数：substr,substring</p>

<p>• 字符串截取函数：substr,substring</p>

<p>• 字符串转大写函数：upper,ucase</p>

<p>• 字符串转小写函数：lower,lcase</p>

<p>• 去空格函数：trim</p>

<p>• 左边去空格函数：ltrim</p>

<p>• 右边去空格函数：rtrim</p>

<p>•正则表达式替换函数：regexp_replace</p>

<p>•正则表达式解析函数：regexp_extract</p>

<p>•URL解析函数：parse_url</p>

<p>•json解析函数：get_json_object</p>

<p>•空格字符串函数：space</p>

<p>•重复字符串函数：repeat</p>

<p>•首字符ascii函数：ascii</p>

<p>•左补足函数：lpad</p>

<p>•右补足函数：rpad</p>

<p>•分割字符串函数: split</p>

<p>•集合查找函数: find_in_set</p>

<p>• 字符串长度函数： length</p>

<p>语法: length(string A)</p>

<p>返回值: int</p>

<p>说明：返回字符串A的长度</p>

<p>举例：</p>

<p>hive&gt; select length('abcedfg') from dual;</p>

<p>7</p>

<p>• 字符串反转函数： reverse</p>

<p>语法: reverse(string A)</p>

<p>返回值: string</p>

<p>说明：返回字符串A的反转结果</p>

<p>举例：</p>

<p>hive&gt; select reverse(abcedfg’) from dual;</p>

<p>gfdecba</p>

<p>• 字符串连接函数： concat</p>

<p>语法: concat(string A, string B…)</p>

<p>返回值: string</p>

<p>说明：返回输入字符串连接后的结果，支持任意个输入字符串</p>

<p>举例：</p>

<p>hive&gt; select concat(‘abc’,'def’,'gh’) from dual;</p>

<p>abcdefgh</p>

<p>• 带分隔符字符串连接函数： concat_ws</p>

<p>语法: concat_ws(string SEP, string A, string B…)</p>

<p>返回值: string</p>

<p>说明：返回输入字符串连接后的结果，SEP表示各个字符串间的分隔符</p>

<p>举例：</p>

<p>hive&gt; select concat_ws(',','abc','def','gh') from dual;</p>

<p>abc,def,gh</p>

<p>• 字符串截取函数： substr,substring</p>

<p>语法: substr(string A, int start),substring(string A, int start)</p>

<p>返回值: string</p>

<p>说明：返回字符串A从start位置到结尾的字符串</p>

<p>举例：</p>

<p>hive&gt; select substr('abcde',3) from dual;</p>

<p>cde</p>

<p>hive&gt; select substring('abcde',3) from dual;</p>

<p>cde</p>

<p>hive&gt;  select substr('abcde',-1) from dual;  （和ORACLE相同）</p>

<p>e</p>

<p>• 字符串截取函数： substr,substring</p>

<p>语法: substr(string A, int start, int len),substring(string A, int start, int len)</p>

<p>返回值: string</p>

<p>说明：返回字符串A从start位置开始，长度为len的字符串</p>

<p>举例：</p>

<p>hive&gt; select substr('abcde',3,2) from dual;</p>

<p>cd</p>

<p>hive&gt; select substring('abcde',3,2) from dual;</p>

<p>cd</p>

<p>hive&gt;select substring('abcde',-2,2) from dual;</p>

<p>de</p>

<p>• 字符串转大写函数： upper,ucase</p>

<p>语法: upper(string A) ucase(string A)</p>

<p>返回值: string</p>

<p>说明：返回字符串A的大写格式</p>

<p>举例：</p>

<p>hive&gt; select upper('abSEd') from dual;</p>

<p>ABSED</p>

<p>hive&gt; select ucase('abSEd') from dual;</p>

<p>ABSED</p>

<p>• 字符串转小写函数： lower,lcase</p>

<p>语法: lower(string A) lcase(string A)</p>

<p>返回值: string</p>

<p>说明：返回字符串A的小写格式</p>

<p>举例：</p>

<p>hive&gt; select lower('abSEd') from dual;</p>

<p>absed</p>

<p>hive&gt; select lcase('abSEd') from dual;</p>

<p>absed</p>

<p>• 去空格函数： trim</p>

<p>语法: trim(string A)</p>

<p>返回值: string</p>

<p>说明：去除字符串两边的空格</p>

<p>举例：</p>

<p>hive&gt; select trim(' abc ') from dual;</p>

<p>abc</p>

<p>• 左边去空格函数： ltrim</p>

<p>语法: ltrim(string A)</p>

<p>返回值: string</p>

<p>说明：去除字符串左边的空格</p>

<p>举例：</p>

<p>hive&gt; select ltrim(' abc ') from dual;</p>

<p>abc</p>

<p>• 右边去空格函数： rtrim</p>

<p>语法: rtrim(string A)</p>

<p>返回值: string</p>

<p>说明：去除字符串右边的空格</p>

<p>举例：</p>

<p>hive&gt; select rtrim(' abc ') from dual;</p>

<p>abc</p>

<p>• 正则表达式替换函数： regexp_replace</p>

<p>语法: regexp_replace(string A, string B, string C)</p>

<p>返回值: string</p>

<p>说明：将字符串A中的符合java正则表达式B的部分替换为C。注意，在有些情况下要使用转义字符,类似oracle中的regexp_replace函数。</p>

<p>举例：</p>

<p>hive&gt; select regexp_replace('foobar', 'oo|ar', '') from dual;</p>

<p>fb</p>

<p>• 正则表达式解析函数： regexp_extract</p>

<p>语法: regexp_extract(string subject, string pattern, int index)</p>

<p>返回值: string</p>

<p>说明：将字符串subject按照pattern正则表达式的规则拆分，返回index指定的字符。</p>

<p>举例：</p>

<p>hive&gt; select regexp_extract('foothebar', 'foo(.*?)(bar)', 1) from dual;</p>

<p>the</p>

<p>hive&gt; select regexp_extract('foothebar', 'foo(.*?)(bar)', 2) from dual;</p>

<p>bar</p>

<p>hive&gt; select regexp_extract('foothebar', 'foo(.*?)(bar)', 0) from dual;</p>

<p>foothebar</p>

<p>注意，在有些情况下要使用转义字符，下面的等号要用双竖线转 义，这是 java 正则表达式的规则。</p>

<p>select data_field,</p>

<p>regexp_extract(data_field,'.*?bgStart\\=([^&amp;]+)',1) as aaa,</p>

<p>regexp_extract(data_field,'.*?contentLoaded_headStart\\=([^&amp;]+)',1) as bbb,</p>

<p>regexp_extract(data_field,'.*?AppLoad2Req\\=([^&amp;]+)',1) as ccc</p>

<p>from pt_nginx_loginlog_st</p>

<p>where pt = '2012-03-26' limit 2;</p>

<p>• URL 解析函数： parse_url</p>

<p>语法: parse_url(string urlString, string partToExtract [, string keyToExtract])</p>

<p>返回值: string</p>

<p>说明：返回URL中指定的部分。partToExtract的有效值为：HOST, PATH, QUERY, REF, PROTOCOL, AUTHORITY, FILE, and USERINFO.</p>

<p>举例：</p>

<p>hive&gt; select parse_url('http://facebook.com/path1/p.php?k1=v1&amp;k2=v2#Ref1', 'HOST') from dual;</p>

<p>facebook.com</p>

<p>hive&gt; select parse_url('http://facebook.com/path1/p.php?k1=v1&amp;k2=v2#Ref1', 'QUERY', 'k1') from dual;</p>

<p>v1</p>

<p>• json 解析函数： get_json_object</p>

<p>语法: get_json_object(string json_string, string path)</p>

<p>返回值: string</p>

<p>说明：解析json的字符串json_string,返回path指定的内容。如果输入的json字符串无效，那么返回NULL。</p>

<p>举例：</p>

<p>hive&gt; select  get_json_object('{"store":</p>

<p>&gt;   {"fruit":\[{"weight":8,"type":"apple"},{"weight":9,"type":"pear"}],</p>

<p>&gt;    "bicycle":{"price":19.95,"color":"red"}</p>

<p>&gt;   },</p>

<p>&gt;  "email":"amy@only_for_json_udf_test.net",</p>

<p>&gt;  "owner":"amy"</p>

<p>&gt; }</p>

<p>&gt; ','$.owner') from dual;</p>

<p>amy</p>

<p>• 空格字符串函数： space</p>

<p>语法: space(int n)</p>

<p>返回值: string</p>

<p>说明：返回长度为n的字符串</p>

<p>举例：</p>

<p>hive&gt; select space(10) from dual;</p>

<p>hive&gt; select length(space(10)) from dual;</p>

<p>10</p>

<p>• 重复字符串函数： repeat</p>

<p>语法: repeat(string str, int n)</p>

<p>返回值: string</p>

<p>说明：返回重复n次后的str字符串</p>

<p>举例：</p>

<p>hive&gt; select repeat('abc',5) from dual;</p>

<p>abcabcabcabcabc</p>

<p>• 首字符 ascii 函数： ascii</p>

<p>语法: ascii(string str)</p>

<p>返回值: int</p>

<p>说明：返回字符串str第一个字符的ascii码</p>

<p>举例：</p>

<p>hive&gt; select ascii('abcde') from dual;</p>

<p>97</p>

<p>• 左补足函数： lpad</p>

<p>语法: lpad(string str, int len, string pad)</p>

<p>返回值: string</p>

<p>说明：将str进行用pad进行左补足到len位</p>

<p>举例：</p>

<p>hive&gt; select lpad('abc',10,'td') from dual;</p>

<p>tdtdtdtabc</p>

<p>注意：与 GP ， ORACLE 不同， pad 不能默认</p>

<p>• 右补足函数： rpad</p>

<p>语法: rpad(string str, int len, string pad)</p>

<p>返回值: string</p>

<p>说明：将str进行用pad进行右补足到len位</p>

<p>举例：</p>

<p>hive&gt; select rpad('abc',10,'td') from dual;</p>

<p>abctdtdtdt</p>

<p>• 分割字符串函数 : split</p>

<p>语法:  split(string str, string pat)</p>

<p>返回值:  array</p>

<p>说明: 按照pat字符串分割str，会返回分割后的字符串数组</p>

<p>举例：</p>

<p>hive&gt; select split('abtcdtef','t') from dual;</p>

<p>["ab","cd","ef"]</p>

<p>• 集合查找函数 : find_in_set</p>

<p>语法: find_in_set(string str, string strList)</p>

<p>返回值: int</p>

<p>说明: 返回str在strlist第一次出现的位置，strlist是用逗号分割的字符串。如果没有找该str字符，则返回0</p>

<p>举例：</p>

<p>hive&gt; select find_in_set('ab','ef,ab,de') from dual;</p>

<p>2</p>

<p>hive&gt; select find_in_set('at','ef,ab,de') from dual;</p>

<p>0</p>

<p> </p>

<p>第七部分：集合统计函数</p>

<p>•个数统计函数: count</p>

<p>•总和统计函数: sum</p>

<p>•平均值统计函数: avg</p>

<p>• 最小值统计函数: min</p>

<p>•最大值统计函数: max</p>

<p>• 个数统计函数 : count</p>

<p>语法: count(*), count(expr), count(DISTINCT expr[, expr_.])</p>

<p>返回值: int</p>

<p>说明: count(*)统计检索出的行的个数，包括NULL值的行；count(expr)返回指定字段的非空值的个数；count(DISTINCT expr[, expr_.])返回指定字段的不同的非空值的个数</p>

<p>举例：</p>

<p>hive&gt; select count(*) from dual;</p>

<p>20</p>

<p>hive&gt; select count(distinct t) from dual;</p>

<p>10</p>

<p>• 总和统计函数 : sum</p>

<p>语法: sum(col), sum(DISTINCT col)</p>

<p>返回值: double</p>

<p>说明: sum(col)统计结果集中col的相加的结果；sum(DISTINCT col)统计结果中col不同值相加的结果</p>

<p>举例：</p>

<p>hive&gt; select sum(t) from dual;</p>

<p>100</p>

<p>hive&gt; select sum(distinct t) from dual;</p>

<p>70</p>

<p>• 平均值统计函数 : avg</p>

<p>语法: avg(col), avg(DISTINCT col)</p>

<p>返回值: double</p>

<p>说明: avg(col)统计结果集中col的平均值；avg(DISTINCT col)统计结果中col不同值相加的平均值</p>

<p>举例：</p>

<p>hive&gt; select avg(t) from dual;</p>

<p>50</p>

<p>hive&gt; select avg (distinct t) from dual;</p>

<p>30</p>

<p>• 最小值统计函数 : min</p>

<p>语法: min(col)</p>

<p>返回值: double</p>

<p>说明: 统计结果集中col字段的最小值</p>

<p>举例：</p>

<p>hive&gt; select min(t) from dual;</p>

<p>20</p>

<p>• 最大值统计函数 : max</p>

<p>语法: maxcol)</p>

<p>返回值: double</p>

<p>说明: 统计结果集中col字段的最大值</p>

<p>举例：</p>

<p>hive&gt; select max(t) from dual;</p>

<p>120</p>

<p> </p>

<p>第八部分：符合类型构建操作</p>

<p>•Map类型构建: map</p>

<p>•Struct类型构建: struct</p>

<p>•array类型构建: array</p>

<p>• Map 类型构建 : map</p>

<p>语法: map (key1, value1, key2, value2, …)</p>

<p>说明：根据输入的key和value对构建map类型</p>

<p>举例：</p>

<p>hive&gt; Create table alex_test as select map('100','tom','200','mary') as t from dual;</p>

<p>hive&gt; describe alex_test;</p>

<p>t       map&lt;string,string&gt;</p>

<p>hive&gt; select t from alex_test;</p>

<p>{"100":"tom","200":"mary"}</p>

<p>• Struct 类型构建 : struct</p>

<p>语法: struct(val1, val2, val3, …)</p>

<p>说明：根据输入的参数构建结构体struct类型</p>

<p>举例：</p>

<p>hive&gt; create table alex_test as select struct('tom','mary','tim') as t from dual;</p>

<p>hive&gt; describe alex_test;</p>

<p>t       struct&lt;col1:string,col2:string,col3:string&gt;</p>

<p>hive&gt; select t from alex_test;</p>

<p>{"col1":"tom","col2":"mary","col3":"tim"}</p>

<p>• array 类型构建 : array</p>

<p>语法: array(val1, val2, …)</p>

<p>说明：根据输入的参数构建数组array类型</p>

<p>举例：</p>

<p>hive&gt; create table alex_test as select array("tom","mary","tim") as t from dual;</p>

<p>hive&gt; describe alex_test;</p>

<p>t       array&lt;string&gt;</p>

<p>hive&gt; select t from alex_test;</p>

<p>["tom","mary","tim"]</p>

<p> </p>

<p> </p>

<p>第九部分：复杂类型访问操作</p>

<p>•array类型访问: A[n]</p>

<p>•map类型访问: M[key]</p>

<p>•struct类型访问: S.x</p>

<p>• array 类型访问 : A[n]</p>

<p>语法: A[n]</p>

<p>操作类型: A为array类型，n为int类型</p>

<p>说明：返回数组A中的第n个变量值。数组的起始下标为0。比如，A是个值为['foo', 'bar']的数组类型，那么A[0]将返回'foo',而A[1]将返回'bar'</p>

<p>举例：</p>

<p>hive&gt; create table alex_test as select array("tom","mary","tim") as t from dual;</p>

<p>hive&gt; select t[0],t[1],t[2] from alex_test;</p>

<p>tom     mary    tim</p>

<p>• map 类型访问 : M[key]</p>

<p>语法: M[key]</p>

<p>操作类型: M为map类型，key为map中的key值</p>

<p>说明：返回map类型M中，key值为指定值的value值。比如，M是值为{'f' -&gt; 'foo', 'b' -&gt; 'bar', 'all' -&gt; 'foobar'}的map类型，那么M['all']将会返回'foobar'</p>

<p>举例：</p>

<p>hive&gt; Create table alex_test as select map('100','tom','200','mary') as t from dual;</p>

<p>hive&gt; select t['200'],t['100'] from alex_test;</p>

<p>mary    tom</p>

<p>• struct 类型访问 : S.x</p>

<p>语法: S.x</p>

<p>操作类型: S为struct类型</p>

<p>说明：返回结构体S中的x字段。比如，对于结构体struct foobar {int foo, int bar}，foobar.foo返回结构体中的foo字段</p>

<p>举例：</p>

<p>hive&gt; create table alex_test as select struct('tom','mary','tim') as t from dual;</p>

<p>hive&gt; describe alex_test;</p>

<p>t       struct&lt;col1:string,col2:string,col3:string&gt;</p>

<p>hive&gt; select t.col1,t.col3 from alex_test;</p>

<p>tom     tim</p>

<p>第十部分：复杂类型长度统计函数</p>

<p>•Map类型长度函数: size(Map&lt;K.V&gt;)</p>

<p>•array类型长度函数: size(Array&lt;T&gt;)</p>

<p>•类型转换函数</p>

<p>  </p>

<p> </p>

<p>• Map 类型长度函数 : size(Map&lt;K.V&gt;)</p>

<p>语法: size(Map&lt;K.V&gt;)</p>

<p>返回值: int</p>

<p>说明: 返回map类型的长度</p>

<p>举例：</p>

<p>hive&gt; select size(map('100','tom','101','mary')) from dual;</p>

<p>2</p>

<p> </p>

<p>• array 类型长度函数 : size(Array&lt;T&gt;)</p>

<p>语法: size(Array&lt;T&gt;)</p>

<p>返回值: int</p>

<p>说明: 返回array类型的长度</p>

<p>举例：</p>

<p>hive&gt; select size(array('100','101','102','103')) from dual;</p>

<p>4</p>

<p> </p>

<p>• 类型转换函数</p>

<p>类型转换函数: cast</p>

<p>语法: cast(expr as &lt;type&gt;)</p>

<p>返回值: Expected "=" to follow "type"</p>

<p>说明: 返回array类型的长度</p>

<p>举例：</p>

<p>hive&gt; select cast(1 as bigint) from dual;</p>

<p>1</p>

<p> </p>

<p>转载请注明【 <a href="http://sishuok.com/forum/blogPost/list/6222.html" rel="nofollow">http://sishuok.com/forum/blogPost/list/6222.html</a>】</p>            </div>
                </div>