---
layout:     post
title:      spark sql基本使用方法介绍
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<span style="font-family:Tahoma;font-size:14px;line-height:24px;">spark sql基本使用方法介绍</span><br style="font-family:Tahoma;font-size:14px;line-height:24px;"><div class="iteye-blog-content-contain" style="font-family:Tahoma;font-size:14px;line-height:24px;">
<p style="vertical-align:baseline;">
spark中可以通过spark sql 直接查询hive或impala中的数据，</p>
<p style="vertical-align:baseline;">
 </p>
<p style="vertical-align:baseline;">
一、启动方法</p>
<p style="vertical-align:baseline;">
/data/spark-1.4.0-bin-cdh4/bin/spark-sql --master spark://master:7077 --total-executor-cores 10  --executor-memory 1g --executor-cores  2</p>
<p style="vertical-align:baseline;">
 </p>
<p style="vertical-align:baseline;">
注：/data/spark-1.4.0-bin-cdh4/为spark的安装路径</p>
<p style="vertical-align:baseline;">
 </p>
<p style="vertical-align:baseline;">
/data/spark-1.4.0-bin-cdh4/bin/spark-sql –help 查看启动选项</p>
<p style="vertical-align:baseline;">
 </p>
<p style="vertical-align:baseline;">
--master MASTER_URL           指定master url</p>
<p style="vertical-align:baseline;">
--executor-memory MEM          每个executor的内存，默认为1G</p>
<p style="vertical-align:baseline;">
--total-executor-cores NUM       所有executor的总核数</p>
<p style="vertical-align:baseline;">
-e &lt;quoted-query-string&gt;           直接执行查询SQL</p>
<p>
 </p>
<p style="vertical-align:baseline;">
-f &lt;filename&gt;                              以文件方式批量执行SQL</p>
<p style="vertical-align:baseline;">
 </p>
<p style="vertical-align:baseline;">
二、Spark sql对hive支持的功能</p>
<p style="vertical-align:baseline;">
 </p>
<p style="line-height:21px;vertical-align:baseline;">
1、查询语句：SELECT GROUP BY ORDER BY CLUSTER BY SORT BY</p>
<p style="line-height:21px;vertical-align:baseline;">
2、hive操作运算：</p>
<p style="line-height:21px;vertical-align:baseline;">
     1) 关系运算：= ==, &lt;&gt;, &lt;, &gt;, &gt;=, &lt;=</p>
<p style="line-height:21px;vertical-align:baseline;">
     2) 算术运算：+, -, *, /, %</p>
<p style="line-height:21px;vertical-align:baseline;">
     3) 逻辑运算：AND, &amp;&amp;, OR, ||</p>
<p style="line-height:21px;vertical-align:baseline;">
     4) 复杂的数据结构</p>
<p style="line-height:21px;vertical-align:baseline;">
     5) 数学函数：(sign, ln, cos, etc)</p>
<p style="line-height:21px;vertical-align:baseline;">
     6) 字符串函数：</p>
<p style="line-height:21px;vertical-align:baseline;">
3、 UDF</p>
<p style="line-height:21px;vertical-align:baseline;">
4、 UDAF</p>
<p style="vertical-align:baseline;">
 </p>
<p style="line-height:21px;vertical-align:baseline;">
5、 用户定义的序列化格式</p>
<p style="line-height:21px;vertical-align:baseline;">
6、join操作：JOIN     {LEFT|RIGHT|FULL} OUTER JOIN     LEFT SEMI JOIN    CROSS JOIN</p>
<p style="line-height:21px;vertical-align:baseline;">
7、 unions操作：</p>
<p style="margin-left:0in;line-height:21px;vertical-align:baseline;">
8、 子查询： SELECT col FROM ( SELECT a + b AS col from t1) t2</p>
<p style="line-height:21px;vertical-align:baseline;">
9、Sampling </p>
<p style="margin-left:0in;line-height:21px;vertical-align:baseline;">
10、 Explain</p>
<p style="margin-left:0in;line-height:21px;vertical-align:baseline;">
11、  分区表</p>
<p style="margin-left:0in;line-height:21px;vertical-align:baseline;">
12、 视图</p>
<p style="margin-left:0in;line-height:21px;vertical-align:baseline;">
13、  hive ddl功能：CREATE TABLE、CREATE TABLE AS SELECT、ALTER TABLE     </p>
<p style="line-height:21px;vertical-align:baseline;">
 </p>
<p style="margin-left:0in;line-height:21px;vertical-align:baseline;">
14、 支持的数据类型：TINYINT  SMALLINT INT BIGINT BOOLEAN FLOAT DOUBLE STRING BINARY TIMESTAMPDATE  ARRAY MAP STRUCT</p>
<p style="margin-left:0in;line-height:21px;vertical-align:baseline;">
 </p>
<p style="margin-left:0in;line-height:21px;vertical-align:baseline;">
 </p>
<p style="line-height:21px;vertical-align:baseline;">
三、Spark sql 在客户端编程方式进行查询数据</p>
<p style="line-height:21px;vertical-align:baseline;">
1、启动spark-shell</p>
<p style="line-height:21px;vertical-align:baseline;">
./spark-shell --master spark://master:7077 --total-executor-cores 10  --executor-memory 1g  --executor-cores  2</p>
<p style="line-height:21px;vertical-align:baseline;">
2、编写程序</p>
<p style="line-height:21px;vertical-align:baseline;">
val sqlContext = new org.apache.spark.sql.SQLContext(sc)</p>
<p style="line-height:21px;vertical-align:baseline;">
val df = sqlContext.read.json("../examples/src/main/resources/people.json")</p>
<p style="line-height:21px;vertical-align:baseline;">
查看所有数据：df.show()</p>
<p style="line-height:21px;vertical-align:baseline;">
查看表结构：df.printSchema()</p>
<p style="line-height:21px;vertical-align:baseline;">
只看name列：df.select("name").show()</p>
<p style="line-height:21px;vertical-align:baseline;">
对数据运算：df.select(df("name"), df("age") + 1).show()</p>
<p style="line-height:21px;vertical-align:baseline;">
过滤数据：df.filter(df("age") &gt; 21).show()</p>
<p style="margin-left:0in;line-height:21px;vertical-align:baseline;">
 </p>
<p style="line-height:21px;vertical-align:baseline;">
分组统计：df.groupBy("age").count().show()</p>
<p style="line-height:21px;vertical-align:baseline;">
 </p>
<p style="line-height:21px;vertical-align:baseline;">
1、查询txt数据</p>
<p style="line-height:21px;vertical-align:baseline;">
import sqlContext.implicits._</p>
<p style="line-height:21px;vertical-align:baseline;">
case class Person(name: String, age: Int)</p>
<p style="line-height:21px;vertical-align:baseline;">
val people = sc.textFile("../examples/src/main/resources/people.txt").map(_.split(",")).map(p =&gt; Person(p(0), p(1).trim.toInt)).toDF()</p>
<p style="line-height:21px;vertical-align:baseline;">
people.registerTempTable("people")</p>
<p style="line-height:21px;vertical-align:baseline;">
val teenagers = sqlContext.sql("SELECT name, age FROM people WHERE age &gt;= 13 AND age &lt;= 19")</p>
<p style="line-height:21px;vertical-align:baseline;">
2、parquet文件</p>
<p style="line-height:21px;vertical-align:baseline;">
val df = sqlContext.read.load("../examples/src/main/resources/users.parquet")</p>
<p style="line-height:21px;vertical-align:baseline;">
3、hdfs文件</p>
<p style="line-height:21px;vertical-align:baseline;">
 </p>
<p style="line-height:21px;vertical-align:baseline;">
val df = sqlContext.read.load("hdfs://namenode.hadoop:9000/user/hive/warehouse/spark_test.db/test_parquet/part-r-00001.gz.parquet")</p>
<p style="line-height:21px;vertical-align:baseline;">
４、保存查询结果数据</p>
<p style="line-height:21px;vertical-align:baseline;">
val df = sqlContext.read.load("../examples/src/main/resources/users.parquet")</p>
<p style="line-height:21px;vertical-align:baseline;">
 </p>
<p style="line-height:21px;vertical-align:baseline;">
df.select("name", "favorite_color").write.save("namesAndFavColors.parquet“)</p>
<p style="line-height:21px;vertical-align:baseline;">
 </p>
<p style="line-height:21px;vertical-align:baseline;">
四、Spark sql性能调优</p>
<p style="line-height:21px;vertical-align:baseline;">
 </p>
<p style="line-height:21px;vertical-align:baseline;">
缓存数据表：sqlContext.cacheTable("tableName")</p>
<p style="line-height:21px;vertical-align:baseline;">
 </p>
<p style="line-height:21px;vertical-align:baseline;">
取消缓存表：sqlContext.uncacheTable("tableName")</p>
<p style="line-height:21px;vertical-align:baseline;">
 </p>
<p style="line-height:21px;vertical-align:baseline;">
 </p>
<p style="line-height:21px;vertical-align:baseline;">
spark.sql.inMemoryColumnarStorage.compressedtrue　当设置为true时，Spark SQL将为基于数据统计信息的每列自动选择一个压缩算法。</p>
<p style="line-height:21px;vertical-align:baseline;">
spark.sql.inMemoryColumnarStorage.batchSize　10000　柱状缓存的批数据大小。更大的批数据可以提高内存的利用率以及压缩效率，但有OOMs的风险</p>
</div>
            </div>
                </div>