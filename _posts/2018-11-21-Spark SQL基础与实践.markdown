---
layout:     post
title:      Spark SQL基础与实践
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                <h1>（一）Spark SQL基础简介</h1>• Spark SQL是Apache Spark大数据框架一部分，主要用于处理结构化数据和对spark数据执行类sql的查询<br>• Spark为其提供了一个称为DataFrame的编程抽象，充当分布式SQL查询引擎<br>• Spark SQL功能：<br><p>    – 集成：无缝将SQL查询与Spark程序混合</p><p><img src="https://img-blog.csdn.net/20180330230922174" alt=""><br></p><p>    – 统一数据访问：加载来自各种来源的数据</p><p><img src="https://img-blog.csdn.net/20180330230931640" alt=""><br></p><p>    – 兼容性：Spark SQL重用Hive前端和MetaStore，与现有Hive数据、查询和UDF的安全兼容，只需要和Hive一起安装即可</p><p><img src="https://img-blog.csdn.net/2018033023094488" alt=""><br></p><p>    – 标准连接：JDBC和ODBC</p><p><img src="https://img-blog.csdn.net/20180330230953214" alt=""><br></p><p>    – 扩展性：对交互式查询和长查询使用相同的引擎，Spark SQL利用RDD模型来支持查询容错，使其扩展大大型作业</p><h1>（二）Spark SQL框架</h1><p>– 把数据读入到SparkSQL中，SparkSQL进行数据处理或算法实现，然后再把处理后的数据输出到相应的输出源<br></p><p><img src="https://img-blog.csdn.net/20180330231154758" alt=""><br></p><p>– Input：<br>    • 数据源丰富：Hive、json、txt、JDBC等<br>    • Spark SQL存在两个类进行对接：HiveContext和SQLContext，其中HiveContext继承了SQLContext的所有方法，同时又进行扩展<br>    • SQLContext用于对接绝大多类型数据源， HiveContext是SQLContext的超集<br>    • Spark SQL处理读入的数据，采用的是DataFrame中提供的方法<br></p><h1>（三）DataFrame</h1><h2>1  什么是DataFrames</h2><p><span style="color:#333333;background:#FFFFFF;">与RDD</span>类似，DataFrame也是一个分布式数据容器。然而DataFrame更像传统数据库的二维表格，除了数据以外，还<span style="color:#333333;background:#FFFFFF;">记录</span><span style="color:#333333;background:#FFFFFF;">数据的结构信息，即schema</span>。同时，与Hive类似，DataFrame也支持嵌套数据类型（struct、array和map）。从API易用性的角度上 看，DataFrame API提供的是一套高层的关系操作，比函数式的RDD API要更加友好，门槛更低。由于与R和Pandas的DataFrame类似，SparkDataFrame很好地继承了传统单机数据分析的开发体验。</p>• 作为2014–2015年Spark最大的API改动，DataFrame能够使得大数据更为简单<br>• 之前Spark SQL API的SchemaRDD已经更名为DataFrame<br>• 分布式的数据集合，按照命名列的形式组织数据<br>• 通过调用将DataFrame的内容作为行RDD（RDD of Rows）返回的rdd方法，可以将DataFrame转换成RDD<br>• 通过如下方式创建DataFrame：<br>    – 已有RDD<br>    – 结构化数据文件<br>    – Json数据<br>    – Hive表<br>    – 外部数据库<br>• RDD以record为单位，spark优化时无法洞悉record内部的细节，无法深度优化，限制sparkSQL性能的提升；DataFrame包含了每个record的metadata元数据信息，DataFrame的优化可以对列内部优化<br><p>• DataFrame是一个以命名列方式组织的分布式数据集，等同于关系型数据库中的一个表</p><p><img src="https://img-blog.csdn.net/20180330231745419" alt=""><br></p><p>• DataFrame是基于RDD的抽象<br>• DataFrame的底层结构是RDD. Spark在你使用DataFrame时会优化你的代码<br></p><p><img src="https://img-blog.csdn.net/20180330231904511" alt=""><br></p><p>• Spark对于DataFrame在执行时间和内存使用上对于RDD有极大的优化<br>    – Catalyst优化引擎：使得执行时间减少75%<br>    – Project Tungsten Off-heap内存管理：是内存使用量减少75%，无垃圾回收器<br>• 使用python及scala执行RDD的速度明显比DataFrame慢<br>• 但同样对于DataFrame，两种语言没有区别，两者性能均优于普通Python RDD实现的4倍，也达到了Scala RDD实现的两倍</p><h2>2、优化引擎 Catalyst</h2>• SQL优化器核心执行策略两个方向：规则和代价<br>• 基于规则：经验式、启发式地优化思路，更多地依靠前辈总结出来的优化规则，简单易行且能够覆盖到大部分优化逻辑<br>• 基于代价：核心算子优化<br><p>    两个表执行Join应该使用BroadcastHashJoin还是SortMergeJoin？</p><p><img src="https://img-blog.csdn.net/20180330232059870" alt=""><br></p><h2>3、实现分析 Parser（解析器）</h2>SqlParser生成LogicPlan Tree<br>– 主要先进行词法分析，再进行语法分析<br>• 词法分析：讲输入的sql语句串解析为一个一个的token<br>• 语法分析：再词法分析基础上，将单词序列组合成各类语法短语，组成各个LogicPlan<br>– 例子：将生成如图所示的解析树<br>    • SELECT sum(v)<br>    • FROM(<br>    • SELECT score.id,<br>    • 100+80+score.math_score+score.english_score AS v<br>    • FROM people JOIN score<br>    • WHERE people.id=score.id<br>    • AND people.age&gt;10<br>    • )tmp<br><p><img src="https://img-blog.csdn.net/20180330232239132" alt=""><br></p><h2>4、实现分析• Analyzer</h2>遍历整个语法树，对树上的每个节点进行数据类型绑定以及函数绑定<p>– 根据元数据表解析为包含必要列的表，并且相应字段解析为相应的数据类型，相应的计算逻辑解析为对应的函数</p><p><img src="https://img-blog.csdn.net/20180330232441948" alt=""><br></p><h2>5 、实 现 分 析• Optimizer</h2>是Catalyst的核心<br>– 基于规则优化实际上对语法树再做一次遍历，模式匹配能够满足特定细节的节点，再进行相应的等价变变换<p>– 经典规则：谓词下推（Predicate Pushdown）、常量累加（Constant Folding）和列值裁剪（Column Pruning）</p><p><img src="https://img-blog.csdn.net/20180330234507496?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0ZvcmdldFRoYXROaWdodA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""><br></p><p><img src="https://img-blog.csdn.net/20180330234552719?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0ZvcmdldFRoYXROaWdodA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""><br></p><h2>6、实 现 分 析• Physical Planning</h2>物理计划层<p>    – 用物理操作算子产生一个或者多个物理计划。然后用cost模型选择一个物理计划。目前基于cost-based的优化仅仅用于选择join算法：对已知的很小的relations，sparksql会选择使用spark的提供的点对点的广播功能实现Broadcastjoin</p><p><img src="https://img-blog.csdn.net/20180330234737868?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0ZvcmdldFRoYXROaWdodA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""><br></p><h2>7、实 现 分 析• Spark SQL执行计划</h2><p>• 使用queryExecution方法查看</p><p><img src="https://img-blog.csdn.net/20180330234840654?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0ZvcmdldFRoYXROaWdodA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""><br></p><p><img src="https://img-blog.csdn.net/20180330234855702?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0ZvcmdldFRoYXROaWdodA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""><br></p><h2>8、创建DataFrame</h2><p> 在Spark SQL中SQLContext是创建DataFrames和执行SQL的入口<br></p><p><img src="https://img-blog.csdn.net/2018033023512253" alt=""><br></p><blockquote style="border:none;"></blockquote>1.在本地创建一个文件，有三列，分别是id、name、age，用空格分隔，然后上传到hdfs上<br><span style="background-color:rgb(240,240,240);color:rgb(0,0,0);font-family:Consolas, Inconsolata, Courier, monospace;font-size:12px;">hdfs dfs -putperson.txt /</span><br><blockquote style="border:none;"></blockquote>2.在spark shell执行下面命令，读取数据，将每一行的数据使用列分隔符分割<br><span style="background-color:rgb(240,240,240);color:rgb(0,0,0);font-family:Consolas, Inconsolata, Courier, monospace;font-size:12px;">val lineRDD =sc.textFile("hdfs://node1.itcast.cn:9000/person.txt").map(_.split(""))</span><br><blockquote style="border:none;"></blockquote>3.定义case class（相当于表的schema）<br><span style="background-color:rgb(240,240,240);color:rgb(0,0,0);font-family:Consolas, Inconsolata, Courier, monospace;font-size:12px;">case classPerson(id:Int, name:String, age:Int)</span><br><blockquote style="border:none;"></blockquote>4.将RDD和case class关联<br><span style="background-color:rgb(240,240,240);color:rgb(0,0,0);font-family:Consolas, Inconsolata, Courier, monospace;font-size:12px;">val personRDD =lineRDD.map(x =&gt; Person(x(0).toInt, x(1), x(2).toInt))</span><br><blockquote style="border:none;"></blockquote>5.将RDD转换成DataFrame<br><span style="background-color:rgb(240,240,240);color:rgb(0,0,0);font-family:Consolas, Inconsolata, Courier, monospace;font-size:12px;">val personDF =personRDD.toDF</span><br><blockquote style="border:none;"></blockquote>6.对DataFrame进行处理<pre><code class="language-java">personDF.show</code></pre><p><img src="https://img-blog.csdn.net/2018033023534054" alt=""><br></p><h2>9<span style="font-size:24px;"><strong>  DataFrame常用操作</strong></span></h2><h3>9.1.  DSL风格语法</h3><p>//查看DataFrame中的内容</p><pre><code class="language-java">personDF.show</code></pre><p>//查看DataFrame部分列中的内容</p><pre><code class="language-java">personDF.select(personDF.col("name")).show
personDF.select(col("name"),col("age")).show
personDF.select("name").show</code></pre><p>//打印DataFrame的Schema信息</p><pre><code class="language-java">personDF.printSchema</code></pre><p>//查询所有的name和age，并将age+1</p><pre><code class="language-java">personDF.select(col("id"),col("name"), col("age") + 1).show
personDF.select(personDF("id"),personDF("name"), personDF("age") + 1).show</code></pre><p><img src="https://img-blog.csdn.net/20180330235549127" alt=""><br></p><p>//过滤age大于等于18的</p><pre><code class="language-java">personDF.filter(col("age")&gt;= 18).show</code></pre><img src="https://img-blog.csdn.net/20180330235737374" alt=""><br><p>//按年龄进行分组并统计相同年龄的人数</p><pre><code class="language-java">personDF.groupBy("age").count().show()</code></pre><img src="https://img-blog.csdn.net/20180330235811116" alt=""><br><h3><span style="font-size:18px;">9.2.  SQL风格语法</span></h3><blockquote style="border:none;"></blockquote>如果想使用SQL风格的语法，需要将DataFrame注册成表<br><blockquote style="border:none;"></blockquote><pre><code class="language-java">personDF.registerTempTable("t_person")</code></pre><blockquote style="border:none;"></blockquote>//查询年龄最大的前两名<br><pre><code class="language-java">sqlContext.sql("select* from t_person order by age desc limit 2").show</code></pre><p><img src="https://img-blog.csdn.net/20180331092457600" alt=""><br></p><p>//显示表的Schema信息</p><pre><code class="language-java">sqlContext.sql("desct_person").show</code></pre><img src="https://img-blog.csdn.net/20180331092507888" alt=""><br><h1>（四）<span style="font-size:28px;font-weight:bold;"> 以编程方式执行Spark SQL查询</span></h1><h2>1.  编写Spark SQL查询程序</h2><p>前面我们学习了如何在Spark Shell中使用SQL完成查询，现在我们来实现在自定义的程序中编写Spark SQL查询程序。首先在maven项目的pom.xml中添加Spark SQL的依赖</p><pre><code class="language-html">&lt;dependency&gt;
    &lt;groupId&gt;org.apache.spark&lt;/groupId&gt;
    &lt;artifactId&gt;spark-sql_2.10&lt;/artifactId&gt;
    &lt;version&gt;1.5.2&lt;/version&gt;
&lt;/dependency&gt;
</code></pre><h3>1.1.  通过反射推断Schema</h3><p>创建一个object为cn.itcast.spark.sql.InferringSchema</p><pre><code class="language-python">package cn.itcast.spark.sql

import org.apache.spark.{SparkConf, SparkContext}
import org.apache.spark.sql.SQLContext

object InferringSchema {
  def main(args: Array[String]) {

    //创建SparkConf()并设置App名称
    val conf = new SparkConf().setAppName("SQL-1")
    //SQLContext要依赖SparkContext
    val sc = new SparkContext(conf)
    //创建SQLContext
    val sqlContext = new SQLContext(sc)

    //从指定的地址创建RDD
    val lineRDD = sc.textFile(args(0)).map(_.split(" "))

    //创建case class
    //将RDD和case class关联
    val personRDD = lineRDD.map(x =&gt; Person(x(0).toInt, x(1), x(2).toInt))
    //导入隐式转换，如果不到人无法将RDD转换成DataFrame
    //将RDD转换成DataFrame
    import sqlContext.implicits._
    val personDF = personRDD.toDF
    //注册表
    personDF.registerTempTable("t_person")
    //传入SQL
    val df = sqlContext.sql("select * from t_person order by age desc limit 2")
    //将结果以JSON的方式存储到指定位置
    df.write.json(args(1))
    //停止Spark Context
    sc.stop()
  }
}
//case class一定要放到外面
case class Person(id: Int, name: String, age: Int)
</code></pre>将程序打成jar包，上传到spark集群，提交Spark任务<br><pre><code class="language-html">/usr/local/spark-1.5.2-bin-hadoop2.6/bin/spark-submit \
--class cn.itcast.spark.sql.InferringSchema \
--master spark://node1.itcast.cn:7077 \
/root/spark-mvn-1.0-SNAPSHOT.jar \
hdfs://node1.itcast.cn:9000/person.txt \
hdfs://node1.itcast.cn:9000/out 
</code></pre>查看运行结果<br><pre><code class="language-html">hdfs dfs -cat  hdfs://node1.itcast.cn:9000/out/part-r-*</code></pre><img src="https://img-blog.csdn.net/20180331093010746" alt=""><br><h3>1.2.  通过StructType直接指定Schema</h3><p>创建一个object为cn.itcast.spark.sql.SpecifyingSchema</p><pre><code class="language-python">package cn.itcast.spark.sql

import org.apache.spark.sql.{Row, SQLContext}
import org.apache.spark.sql.types._
import org.apache.spark.{SparkContext, SparkConf}

/**
  * Created by ZX on 2015/12/11.
  */
object SpecifyingSchema {
  def main(args: Array[String]) {
    //创建SparkConf()并设置App名称
    val conf = new SparkConf().setAppName("SQL-2")
    //SQLContext要依赖SparkContext
    val sc = new SparkContext(conf)
    //创建SQLContext
    val sqlContext = new SQLContext(sc)
    //从指定的地址创建RDD
    val personRDD = sc.textFile(args(0)).map(_.split(" "))
    //通过StructType直接指定每个字段的schema
    val schema = StructType(
      List(
        StructField("id", IntegerType, true),
        StructField("name", StringType, true),
        StructField("age", IntegerType, true)
      )
    )
    //将RDD映射到rowRDD
    val rowRDD = personRDD.map(p =&gt; Row(p(0).toInt, p(1).trim, p(2).toInt))
    //将schema信息应用到rowRDD上
    val personDataFrame = sqlContext.createDataFrame(rowRDD, schema)
    //注册表
    personDataFrame.registerTempTable("t_person")
    //执行SQL
    val df = sqlContext.sql("select * from t_person order by age desc limit 4")
    //将结果以JSON的方式存储到指定位置
    df.write.json(args(1))
    //停止Spark Context
    sc.stop()
  }
}
</code></pre><p>将程序打成jar包，上传到spark集群，提交Spark任务</p><pre><code class="language-html">/usr/local/spark-1.5.2-bin-hadoop2.6/bin/spark-submit \
--class cn.itcast.spark.sql.InferringSchema \
--master spark://node1.itcast.cn:7077 \
/root/spark-mvn-1.0-SNAPSHOT.jar \
hdfs://node1.itcast.cn:9000/person.txt \
hdfs://node1.itcast.cn:9000/out1 
</code></pre><p>查看结果</p><pre><code class="language-html">hdfs dfs -cat  hdfs://node1.itcast.cn:9000/out1/part-r-*</code></pre><img src="https://img-blog.csdn.net/20180331093256429" alt=""><br><h1>（五）数据源</h1><h2>1.  JDBC</h2><p>Spark SQL可以通过JDBC从关系型数据库中读取数据的方式创建DataFrame，通过对DataFrame一系列的计算后，还可以将数据再写回关系型数据库中。</p><h3><span style="font-size:16px;">1.1.  从MySQL中加载数据（Spark Shell方式）</span></h3>1.启动Spark Shell，必须指定mysql连接驱动jar包<br><pre><code class="language-html">/usr/local/spark-1.5.2-bin-hadoop2.6/bin/spark-shell\
--masterspark://node1.itcast.cn:7077 \
--jars/usr/local/spark-1.5.2-bin-hadoop2.6/mysql-connector-java-5.1.35-bin.jar \
--driver-class-path/usr/local/spark-1.5.2-bin-hadoop2.6/mysql-connector-java-5.1.35-bin.jar</code></pre>2.从mysql中加载数据<br><pre><code class="language-html">val jdbcDF = sqlContext.read.format("jdbc").options(Map("url"-&gt; "jdbc:mysql://192.168.10.1:3306/bigdata", "driver"-&gt; "com.mysql.jdbc.Driver", "dbtable" -&gt;"person", "user" -&gt; "root","password" -&gt; "123456")).load()</code></pre>3.执行查询<br><pre><code class="language-html">jdbcDF.show()</code></pre><img src="https://img-blog.csdn.net/20180331093554128" alt=""><br><h3>1.2.  将数据写入到MySQL中（打jar包方式）</h3><p>1.编写Spark SQL程序</p><pre><code class="language-python">package cn.itcast.spark.sql

import java.util.Properties
import org.apache.spark.sql.{SQLContext, Row}
import org.apache.spark.sql.types.{StringType, IntegerType, StructField, StructType}
import org.apache.spark.{SparkConf, SparkContext}

object JdbcRDD {
  def main(args: Array[String]) {
    val conf = new SparkConf().setAppName("MySQL-Demo")
    val sc = new SparkContext(conf)
    val sqlContext = new SQLContext(sc)
    //通过并行化创建RDD
    val personRDD = sc.parallelize(Array("1 tom 5", "2 jerry 3", "3 kitty 6")).map(_.split(" "))
    //通过StructType直接指定每个字段的schema
    val schema = StructType(
      List(
        StructField("id", IntegerType, true),
        StructField("name", StringType, true),
        StructField("age", IntegerType, true)
      )
    )
    //将RDD映射到rowRDD
    val rowRDD = personRDD.map(p =&gt; Row(p(0).toInt, p(1).trim, p(2).toInt))
    //将schema信息应用到rowRDD上
    val personDataFrame = sqlContext.createDataFrame(rowRDD, schema)
    //创建Properties存储数据库相关属性
    val prop = new Properties()
    prop.put("user", "root")
    prop.put("password", "123456")
    //将数据追加到数据库
    personDataFrame.write.mode("append").jdbc("jdbc:mysql://192.168.10.1:3306/bigdata", "bigdata.person", prop)
    //停止SparkContext
    sc.stop()
  }
}
</code></pre><p>2.用maven将程序打包</p><p>3.将Jar包提交到spark集群</p><pre><code class="language-python">/usr/local/spark-1.5.2-bin-hadoop2.6/bin/spark-submit\
--classcn.itcast.spark.sql.JdbcRDD \
--masterspark://node1.itcast.cn:7077 \
--jars/usr/local/spark-1.5.2-bin-hadoop2.6/mysql-connector-java-5.1.35-bin.jar \
--driver-class-path /usr/local/spark-1.5.2-bin-hadoop2.6/mysql-connector-java-5.1.35-bin.jar\
/root/spark-mvn-1.0-SNAPSHOT.jar</code></pre>            </div>
                </div>