---
layout:     post
title:      Flume 配置文件概述
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/ziwenCSDN/article/details/78374631				</div>
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<h1 id="flume-overview">flume Overview</h1>



<h2 id="alias-conventions">Alias Conventions</h2>

<table>
<thead>
<tr>
  <th>Alias Name</th>
  <th>Alias Type</th>
</tr>
</thead>
<tbody><tr>
  <td>a</td>
  <td>agent</td>
</tr>
<tr>
  <td>c</td>
  <td>channel</td>
</tr>
<tr>
  <td>r</td>
  <td>source</td>
</tr>
<tr>
  <td>k</td>
  <td>sink</td>
</tr>
<tr>
  <td>g</td>
  <td>sink group</td>
</tr>
<tr>
  <td>i</td>
  <td>interceptor</td>
</tr>
<tr>
  <td>y</td>
  <td>key</td>
</tr>
<tr>
  <td>h</td>
  <td>host</td>
</tr>
<tr>
  <td>s</td>
  <td>serializer</td>
</tr>
</tbody></table>




<h2 id="component-summary">Component Summary</h2>

<table>
<thead>
<tr>
  <th>Component Interface</th>
  <th>Type Alias</th>
  <th>Implementation Class</th>
</tr>
</thead>
<tbody><tr>
  <td>org.apache.flume.Source</td>
  <td>avro</td>
  <td>org.apache.flume.source.AvroSource</td>
</tr>
<tr>
  <td>org.apache.flume.Source</td>
  <td>netcat</td>
  <td>org.apache.flume.source.NetcatSource</td>
</tr>
<tr>
  <td>org.apache.flume.Source</td>
  <td>seq</td>
  <td>org.apache.flume.source.SequenceGeneratorSource</td>
</tr>
<tr>
  <td>org.apache.flume.Source</td>
  <td>exec</td>
  <td>org.apache.flume.source.ExecSource</td>
</tr>
<tr>
  <td>org.apache.flume.Source</td>
  <td>syslogtcp</td>
  <td>org.apache.flume.source.SyslogTcpSource</td>
</tr>
<tr>
  <td>org.apache.flume.Source</td>
  <td>multiport_syslogtcp</td>
  <td>org.apache.flume.source.MultiportSyslogTCPSource</td>
</tr>
<tr>
  <td>org.apache.flume.Source</td>
  <td>syslogudp</td>
  <td>org.apache.flume.source.SyslogUDPSource</td>
</tr>
<tr>
  <td>org.apache.flume.Source</td>
  <td>spooldir</td>
  <td>org.apache.flume.source.SpoolDirectorySource</td>
</tr>
<tr>
  <td>org.apache.flume.Source</td>
  <td>http</td>
  <td>org.apache.flume.source.http.HTTPSource</td>
</tr>
<tr>
  <td>org.apache.flume.Source</td>
  <td>thrift</td>
  <td>org.apache.flume.source.ThriftSource</td>
</tr>
<tr>
  <td>org.apache.flume.Source</td>
  <td>jms</td>
  <td>org.apache.flume.source.jms.JMSSource</td>
</tr>
<tr>
  <td>org.apache.flume.Source</td>
  <td>custom</td>
  <td>org.example.MySource</td>
</tr>
<tr>
  <td>org.apache.flume.Channel</td>
  <td>memory</td>
  <td>org.apache.flume.channel.MemoryChannel</td>
</tr>
<tr>
  <td>org.apache.flume.Channel</td>
  <td>jdbc</td>
  <td>org.apache.flume.channel.jdbc.JdbcChannel</td>
</tr>
<tr>
  <td>org.apache.flume.Channel</td>
  <td>file</td>
  <td>org.apache.flume.channel.file.FileChannel</td>
</tr>
<tr>
  <td>org.apache.flume.Channel</td>
  <td>custom-class</td>
  <td>org.example.MyChannel</td>
</tr>
<tr>
  <td>org.apache.flume.Sink</td>
  <td>null</td>
  <td>org.apache.flume.sink.NullSink</td>
</tr>
<tr>
  <td>org.apache.flume.Sink</td>
  <td>logger</td>
  <td>org.apache.flume.sink.LoggerSink</td>
</tr>
<tr>
  <td>org.apache.flume.Sink</td>
  <td>avro</td>
  <td>org.apache.flume.sink.AvroSink</td>
</tr>
<tr>
  <td>org.apache.flume.Sink</td>
  <td>hdfs</td>
  <td>org.apache.flume.sink.hdfs.HDFSEventSink</td>
</tr>
<tr>
  <td>org.apache.flume.Sink</td>
  <td>hbase</td>
  <td>org.apache.flume.sink.hbase.HBaseSink</td>
</tr>
<tr>
  <td>org.apache.flume.Sink</td>
  <td>asynchbase</td>
  <td>org.apache.flume.sink.hbase.AsyncHBaseSink</td>
</tr>
<tr>
  <td>org.apache.flume.Sink</td>
  <td>elasticsearch</td>
  <td>org.apache.flume.sink.elasticsearch.ElasticSearchSink</td>
</tr>
<tr>
  <td>org.apache.flume.Sink</td>
  <td>file_roll</td>
  <td>org.apache.flume.sink.RollingFileSink</td>
</tr>
<tr>
  <td>org.apache.flume.Sink</td>
  <td>irc</td>
  <td>org.apache.flume.sink.irc.IRCSink</td>
</tr>
<tr>
  <td>org.apache.flume.Sink</td>
  <td>thrift</td>
  <td>org.apache.flume.sink.ThriftSink</td>
</tr>
<tr>
  <td>org.apache.flume.Sink</td>
  <td>custom-class</td>
  <td>org.example.MySink</td>
</tr>
<tr>
  <td>org.apache.flume.interceptor.Interceptor</td>
  <td>timestamp</td>
  <td>org.apache.flume.interceptor.TimestampInterceptor$Builder</td>
</tr>
<tr>
  <td>org.apache.flume.interceptor.Interceptor</td>
  <td>host</td>
  <td>org.apache.flume.interceptor.HostInterceptor$Builder</td>
</tr>
<tr>
  <td>org.apache.flume.interceptor.Interceptor</td>
  <td>static</td>
  <td>org.apache.flume.interceptor.StaticInterceptor$Builder</td>
</tr>
<tr>
  <td>org.apache.flume.interceptor.Interceptor</td>
  <td>regex_filter</td>
  <td>org.apache.flume.interceptor.RegexFilteringInterceptor$Builder</td>
</tr>
<tr>
  <td>org.apache.flume.interceptor.Interceptor</td>
  <td>regex_extractor</td>
  <td>org.apache.flume.interceptor.RegexFilteringInterceptor$Builder</td>
</tr>
<tr>
  <td>org.apache.flume.ChannelSelector</td>
  <td>replicating</td>
  <td>org.apache.flume.channel.ReplicatingChannelSelector</td>
</tr>
<tr>
  <td>org.apache.flume.ChannelSelector</td>
  <td>multiplexing</td>
  <td>org.apache.flume.channel.MultiplexingChannelSelector</td>
</tr>
<tr>
  <td>org.apache.flume.ChannelSelector</td>
  <td>custom-class</td>
  <td>org.example.MyChannelSelector</td>
</tr>
<tr>
  <td>org.apache.flume.SinkProcessor</td>
  <td>default</td>
  <td>org.apache.flume.sink.DefaultSinkProcessor</td>
</tr>
<tr>
  <td>org.apache.flume.SinkProcessor</td>
  <td>failover</td>
  <td>org.apache.flume.sink.FailoverSinkProcessor</td>
</tr>
<tr>
  <td>org.apache.flume.SinkProcessor</td>
  <td>load_balance</td>
  <td>org.apache.flume.sink.LoadBalancingSinkProcessor</td>
</tr>
<tr>
  <td>org.apache.flume.SinkProcessor</td>
  <td>custom-class</td>
  <td></td>
</tr>
</tbody></table>




<h2 id="sources">Sources</h2>

<ul>
<li>avro source</li>
</ul>



<pre class="prettyprint"><code class="language-json hljs ">a<span class="hljs-number">1</span>.sources = r<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.channels = c<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.type = avro
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.channels = c<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.bind = <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.port = <span class="hljs-number">4141</span></code></pre>

<ul>
<li>Thrift source</li>
</ul>



<pre class="prettyprint"><code class="language-json hljs ">a<span class="hljs-number">1</span>.sources = r<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.channels = c<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.type = thrift
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.channels = c<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.bind = <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.port = <span class="hljs-number">4141</span></code></pre>

<ul>
<li>Exec Source</li>
</ul>



<pre class="prettyprint"><code class="language-json hljs ">a<span class="hljs-number">1</span>.sources = r<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.channels = c<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.type = exec
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.command = tail -F /var/log/secure
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.channels = c<span class="hljs-number">1</span></code></pre>

<ul>
<li>JMS Source</li>
</ul>



<pre class="prettyprint"><code class="language-json hljs ">a<span class="hljs-number">1</span>.sources = r<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.channels = c<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.type = jms
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.channels = c<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.initialContextFactory = org.apache.activemq.jndi.ActiveMQInitialContextFactory
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.connectionFactory = GenericConnectionFactory
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.providerURL = tcp://mqserver:<span class="hljs-number">61616</span>
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.destinationName = BUSINESS_DATA
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.destinationType = QUEUE</code></pre>

<ul>
<li>Spooling Directory Source</li>
</ul>



<pre class="prettyprint"><code class="language-json hljs ">a<span class="hljs-number">1</span>.channels = ch-<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sources = src-<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sources.src-<span class="hljs-number">1.</span>type = spooldir
a<span class="hljs-number">1</span>.sources.src-<span class="hljs-number">1.</span>channels = ch-<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sources.src-<span class="hljs-number">1.</span>spoolDir = /var/log/apache/flumeSpool
a<span class="hljs-number">1</span>.sources.src-<span class="hljs-number">1.</span>fileHeader = <span class="hljs-literal">true</span></code></pre>

<ul>
<li>Kafka Source</li>
</ul>



<pre class="prettyprint"><code class="language-json hljs ">tier<span class="hljs-number">1</span>.sources.source<span class="hljs-number">1</span>.type = org.apache.flume.source.kafka.KafkaSource
tier<span class="hljs-number">1</span>.sources.source<span class="hljs-number">1</span>.channels = channel<span class="hljs-number">1</span>
tier<span class="hljs-number">1</span>.sources.source<span class="hljs-number">1</span>.batchSize = <span class="hljs-number">5000</span>
tier<span class="hljs-number">1</span>.sources.source<span class="hljs-number">1</span>.batchDurationMillis = <span class="hljs-number">2000</span>
tier<span class="hljs-number">1</span>.sources.source<span class="hljs-number">1</span>.kafka.bootstrap.servers = localhost:<span class="hljs-number">9092</span>
tier<span class="hljs-number">1</span>.sources.source<span class="hljs-number">1</span>.kafka.topics = test<span class="hljs-number">1</span>, test<span class="hljs-number">2</span>
tier<span class="hljs-number">1</span>.sources.source<span class="hljs-number">1</span>.kafka.consumer.group.id = custom.g.id

or

tier<span class="hljs-number">1</span>.sources.source<span class="hljs-number">1</span>.type = org.apache.flume.source.kafka.KafkaSource
tier<span class="hljs-number">1</span>.sources.source<span class="hljs-number">1</span>.channels = channel<span class="hljs-number">1</span>
tier<span class="hljs-number">1</span>.sources.source<span class="hljs-number">1</span>.kafka.bootstrap.servers = localhost:<span class="hljs-number">9092</span>
tier<span class="hljs-number">1</span>.sources.source<span class="hljs-number">1</span>.kafka.topics.regex = ^topic[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]$
# the default kafka.consumer.group.id=flume is used
</code></pre>

<ul>
<li>NetCat UDP Source</li>
</ul>



<pre class="prettyprint"><code class="language-json hljs ">a<span class="hljs-number">1</span>.sources = r<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.channels = c<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.type = netcatudp
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.bind = <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.port = <span class="hljs-number">6666</span>
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.channels = c<span class="hljs-number">1</span></code></pre>

<ul>
<li>Sequence Generator Source</li>
</ul>



<pre class="prettyprint"><code class="language-json hljs ">a<span class="hljs-number">1</span>.sources = r<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.channels = c<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.type = seq
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.channels = c<span class="hljs-number">1</span></code></pre>

<ul>
<li>Syslog TCP Source</li>
</ul>



<pre class="prettyprint"><code class="language-json hljs ">a<span class="hljs-number">1</span>.sources = r<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.channels = c<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.type = syslogtcp
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.port = <span class="hljs-number">5140</span>
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.host = localhost
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.channels = c<span class="hljs-number">1</span></code></pre>

<ul>
<li>Custom Source</li>
</ul>



<pre class="prettyprint"><code class="language-json hljs ">a<span class="hljs-number">1</span>.sources = r<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.channels = c<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.type = org.example.MySource
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.channels = c<span class="hljs-number">1</span></code></pre>



<h2 id="sinks">Sinks</h2>

<ul>
<li>HDFS Sink</li>
</ul>



<pre class="prettyprint"><code class="language-json hljs ">a<span class="hljs-number">1</span>.channels = c<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sinks = k<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.type = hdfs
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.channel = c<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.hdfs.path = /flume/events/%y-%m-%d/%H%M/%S
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.hdfs.filePrefix = events-
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.hdfs.round = <span class="hljs-literal">true</span>
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.hdfs.roundValue = <span class="hljs-number">10</span>
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.hdfs.roundUnit = minute

# an event with timestamp <span class="hljs-number">11</span>:<span class="hljs-number">54</span>:<span class="hljs-number">34</span> AM, June <span class="hljs-number">12</span>, <span class="hljs-number">2012</span> will cause the hdfs path to become /flume/events/<span class="hljs-number">2012</span>-<span class="hljs-number">06</span>-<span class="hljs-number">12</span>/<span class="hljs-number">1150</span>/<span class="hljs-number">00.</span>
</code></pre>

<ul>
<li>Hive Sink</li>
</ul>



<pre class="prettyprint"><code class="language-json hljs ">a<span class="hljs-number">1</span>.channels = c<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.channels.c<span class="hljs-number">1</span>.type = memory
a<span class="hljs-number">1</span>.sinks = k<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.type = hive
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.channel = c<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.hive.metastore = thrift://<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">9083</span>
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.hive.database = logsdb
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.hive.table = weblogs
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.hive.partition = asia,%{country},%y-%m-%d-%H-%M
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.useLocalTimeStamp = <span class="hljs-literal">false</span>
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.round = <span class="hljs-literal">true</span>
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.roundValue = <span class="hljs-number">10</span>
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.roundUnit = minute
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.serializer = DELIMITED
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.serializer.delimiter = <span class="hljs-string">"\t"</span>
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.serializer.serdeSeparator = '\t'
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.serializer.fieldnames =id,,msg</code></pre>

<ul>
<li>Logger Sink</li>
</ul>



<pre class="prettyprint"><code class="language-json hljs ">a<span class="hljs-number">1</span>.channels = c<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sinks = k<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.type = logger
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.channel = c<span class="hljs-number">1</span></code></pre>

<ul>
<li>Avro Sink</li>
</ul>



<pre class="prettyprint"><code class="language-json hljs ">a<span class="hljs-number">1</span>.channels = c<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sinks = k<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.type = avro
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.channel = c<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.hostname = <span class="hljs-number">10.10</span><span class="hljs-number">.10</span><span class="hljs-number">.10</span>
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.port = <span class="hljs-number">4545</span></code></pre>

<ul>
<li>Thrift Sink</li>
</ul>



<pre class="prettyprint"><code class="language-json hljs ">a<span class="hljs-number">1</span>.channels = c<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sinks = k<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.type = thrift
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.channel = c<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.hostname = <span class="hljs-number">10.10</span><span class="hljs-number">.10</span><span class="hljs-number">.10</span>
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.port = <span class="hljs-number">4545</span></code></pre>

<ul>
<li>HBaseSink</li>
</ul>



<pre class="prettyprint"><code class="language-json hljs ">a<span class="hljs-number">1</span>.channels = c<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sinks = k<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.type = hbase
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.table = foo_table
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.columnFamily = bar_cf
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.serializer = org.apache.flume.sink.hbase.RegexHbaseEventSerializer
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.channel = c<span class="hljs-number">1</span></code></pre>

<ul>
<li>KafkaSink</li>
</ul>



<pre class="prettyprint"><code class="language-json hljs ">a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.channel = c<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.type = org.apache.flume.sink.kafka.KafkaSink
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.kafka.topic = mytopic
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.kafka.bootstrap.servers = localhost:<span class="hljs-number">9092</span>
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.kafka.flumeBatchSize = <span class="hljs-number">20</span>
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.kafka.producer.acks = <span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.kafka.producer.linger.ms = <span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.kafka.producer.compression.type = snappy</code></pre>

<ul>
<li>HTTP Sink</li>
</ul>



<pre class="prettyprint"><code class="language-json hljs ">a<span class="hljs-number">1</span>.channels = c<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sinks = k<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.type = http
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.channel = c<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.endpoint = http://localhost:<span class="hljs-number">8080</span>/someuri
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.connectTimeout = <span class="hljs-number">2000</span>
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.requestTimeout = <span class="hljs-number">2000</span>
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.acceptHeader = application/json
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.contentTypeHeader = application/json
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.defaultBackoff = <span class="hljs-literal">true</span>
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.defaultRollback = <span class="hljs-literal">true</span>
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.defaultIncrementMetrics = <span class="hljs-literal">false</span>
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.backoff<span class="hljs-number">.4</span>XX = <span class="hljs-literal">false</span>
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.rollback<span class="hljs-number">.4</span>XX = <span class="hljs-literal">false</span>
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.incrementMetrics<span class="hljs-number">.4</span>XX = <span class="hljs-literal">true</span>
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.backoff<span class="hljs-number">.200</span> = <span class="hljs-literal">false</span>
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.rollback<span class="hljs-number">.200</span> = <span class="hljs-literal">false</span>
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.incrementMetrics<span class="hljs-number">.200</span> = <span class="hljs-literal">true</span></code></pre>

<ul>
<li>Custom Sink</li>
</ul>



<pre class="prettyprint"><code class="language-json hljs ">a<span class="hljs-number">1</span>.channels = c<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sinks = k<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.type = org.example.MySink
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.channel = c<span class="hljs-number">1</span></code></pre>



<h2 id="flume-channels">Flume Channels</h2>

<blockquote>
  <p>Channels are the repositories where the events are staged on a agent. Source adds the events and Sink removes it.</p>
</blockquote>

<ul>
<li>Memory Channel</li>
</ul>



<pre class="prettyprint"><code class="language-json hljs ">a<span class="hljs-number">1</span>.channels = c<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.channels.c<span class="hljs-number">1</span>.type = memory
a<span class="hljs-number">1</span>.channels.c<span class="hljs-number">1</span>.capacity = <span class="hljs-number">10000</span>
a<span class="hljs-number">1</span>.channels.c<span class="hljs-number">1</span>.transactionCapacity = <span class="hljs-number">10000</span>
a<span class="hljs-number">1</span>.channels.c<span class="hljs-number">1</span>.byteCapacityBufferPercentage = <span class="hljs-number">20</span>
a<span class="hljs-number">1</span>.channels.c<span class="hljs-number">1</span>.byteCapacity = <span class="hljs-number">800000</span>
</code></pre>

<ul>
<li>JDBC Channel</li>
</ul>



<pre class="prettyprint"><code class="language-json hljs ">a<span class="hljs-number">1</span>.channels = c<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.channels.c<span class="hljs-number">1</span>.type = jdbc</code></pre>

<ul>
<li>Kafka Channel</li>
</ul>



<pre class="prettyprint"><code class="language-json hljs ">a<span class="hljs-number">1</span>.channels.channel<span class="hljs-number">1</span>.type = org.apache.flume.channel.kafka.KafkaChannel
a<span class="hljs-number">1</span>.channels.channel<span class="hljs-number">1</span>.kafka.bootstrap.servers = kafka-<span class="hljs-number">1</span>:<span class="hljs-number">9092</span>,kafka-<span class="hljs-number">2</span>:<span class="hljs-number">9092</span>,kafka-<span class="hljs-number">3</span>:<span class="hljs-number">9092</span>
a<span class="hljs-number">1</span>.channels.channel<span class="hljs-number">1</span>.kafka.topic = channel<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.channels.channel<span class="hljs-number">1</span>.kafka.consumer.group.id = flume-consumer</code></pre>

<ul>
<li>File Channel</li>
</ul>



<pre class="prettyprint"><code class="language-json hljs ">a<span class="hljs-number">1</span>.channels = c<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.channels.c<span class="hljs-number">1</span>.type = file
a<span class="hljs-number">1</span>.channels.c<span class="hljs-number">1</span>.checkpointDir = /mnt/flume/checkpoint
a<span class="hljs-number">1</span>.channels.c<span class="hljs-number">1</span>.dataDirs = /mnt/flume/data
</code></pre>



<h2 id="flume-channel-selectors">Flume Channel Selectors</h2>

<blockquote>
  <p>If the type is not specified, then defaults to “replicating”.</p>
</blockquote>

<ul>
<li>Replicating Channel Selector (default)</li>
</ul>



<pre class="prettyprint"><code class="language-json hljs ">a<span class="hljs-number">1</span>.sources = r<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.channels = c<span class="hljs-number">1</span> c<span class="hljs-number">2</span> c<span class="hljs-number">3</span>
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.selector.type = replicating
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.channels = c<span class="hljs-number">1</span> c<span class="hljs-number">2</span> c<span class="hljs-number">3</span>
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.selector.optional = c<span class="hljs-number">3</span>

tips:
In the above configuration, c<span class="hljs-number">3</span> is an optional channel. Failure to write to c<span class="hljs-number">3</span> is simply ignored. Since c<span class="hljs-number">1</span> and c<span class="hljs-number">2</span> are not marked optional, failure to write to those channels will cause the transaction to fail.

</code></pre>

<ul>
<li>Multiplexing Channel Selector</li>
</ul>



<pre class="prettyprint"><code class="language-json hljs ">a<span class="hljs-number">1</span>.sources = r<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.channels = c<span class="hljs-number">1</span> c<span class="hljs-number">2</span> c<span class="hljs-number">3</span> c<span class="hljs-number">4</span>
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.selector.type = multiplexing
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.selector.header = state
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.selector.mapping.CZ = c<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.selector.mapping.US = c<span class="hljs-number">2</span> c<span class="hljs-number">3</span>
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.selector.default = c<span class="hljs-number">4</span>
</code></pre>

<ul>
<li>Custom Channel Selector</li>
</ul>

<blockquote>
  <p>A custom channel selector is your own implementation of the ChannelSelector interface. A custom channel selector’s class and its dependencies must be included in the agent’s classpath when starting the Flume agent. The type of the custom channel selector is its FQCN.</p>
</blockquote>



<pre class="prettyprint"><code class="language-json hljs ">a<span class="hljs-number">1</span>.sources = r<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.channels = c<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.selector.type = org.example.MyChannelSelector</code></pre>



<h2 id="flume-sink-processors">Flume Sink Processors</h2>

<blockquote>
  <p>Sink groups allow users to group multiple sinks into one entity. Sink processors can be used to provide load balancing capabilities over all sinks inside the group or to achieve fail over from one sink to another in case of temporal failure.</p>
</blockquote>



<pre class="prettyprint"><code class="language-json hljs ">a<span class="hljs-number">1</span>.sinkgroups = g<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sinkgroups.g<span class="hljs-number">1</span>.sinks = k<span class="hljs-number">1</span> k<span class="hljs-number">2</span>
a<span class="hljs-number">1</span>.sinkgroups.g<span class="hljs-number">1</span>.processor.type = load_balance
</code></pre>

<ul>
<li>Default Sink Processor</li>
</ul>

<blockquote>
  <p>Default sink processor accepts only a single sink. User is not forced to create processor (sink group) for single sinks. Instead user can follow the source - channel - sink pattern that was explained above in this user guide.</p>
</blockquote>

<ul>
<li>Failover Sink Processor</li>
</ul>



<pre class="prettyprint"><code class="language-json hljs ">a<span class="hljs-number">1</span>.sinkgroups = g<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sinkgroups.g<span class="hljs-number">1</span>.sinks = k<span class="hljs-number">1</span> k<span class="hljs-number">2</span>
a<span class="hljs-number">1</span>.sinkgroups.g<span class="hljs-number">1</span>.processor.type = failover
a<span class="hljs-number">1</span>.sinkgroups.g<span class="hljs-number">1</span>.processor.priority.k<span class="hljs-number">1</span> = <span class="hljs-number">5</span>
a<span class="hljs-number">1</span>.sinkgroups.g<span class="hljs-number">1</span>.processor.priority.k<span class="hljs-number">2</span> = <span class="hljs-number">10</span>
a<span class="hljs-number">1</span>.sinkgroups.g<span class="hljs-number">1</span>.processor.maxpenalty = <span class="hljs-number">10000</span></code></pre>

<ul>
<li>Load balancing Sink Processor</li>
</ul>



<pre class="prettyprint"><code class="language-json hljs ">a<span class="hljs-number">1</span>.sinkgroups = g<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sinkgroups.g<span class="hljs-number">1</span>.sinks = k<span class="hljs-number">1</span> k<span class="hljs-number">2</span>
a<span class="hljs-number">1</span>.sinkgroups.g<span class="hljs-number">1</span>.processor.type = load_balance
a<span class="hljs-number">1</span>.sinkgroups.g<span class="hljs-number">1</span>.processor.backoff = <span class="hljs-literal">true</span>
a<span class="hljs-number">1</span>.sinkgroups.g<span class="hljs-number">1</span>.processor.selector = random</code></pre>

<ul>
<li>Custom Sink Processor</li>
</ul>

<blockquote>
  <p>Custom sink processors are not supported at the moment.</p>
</blockquote>



<h2 id="event-serializers">Event Serializers</h2>

<blockquote>
  <p>The file_roll sink and the hdfs sink both support the EventSerializer interface. Details of the EventSerializers that ship with Flume are provided below.</p>
</blockquote>

<ul>
<li>Body Text Serializer</li>
</ul>



<pre class="prettyprint"><code class="language-json hljs ">a<span class="hljs-number">1</span>.sinks = k<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.type = file_roll
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.channel = c<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.sink.directory = /var/log/flume
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.sink.serializer = text
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.sink.serializer.appendNewline = <span class="hljs-literal">false</span>
</code></pre>

<ul>
<li>“Flume Event” Avro Event Serializer</li>
</ul>



<pre class="prettyprint"><code class="language-json hljs ">a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.type = hdfs
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.channel = c<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.hdfs.path = /flume/events/%y-%m-%d/%H%M/%S
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.serializer = avro_event
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.serializer.compressionCodec = snappy</code></pre>

<ul>
<li>Avro Event Serializer</li>
</ul>



<pre class="prettyprint"><code class="language-json hljs ">a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.type = hdfs
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.channel = c<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.hdfs.path = /flume/events/%y-%m-%d/%H%M/%S
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.serializer = org.apache.flume.sink.hdfs.AvroEventSerializer$Builder
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.serializer.compressionCodec = snappy
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.serializer.schemaURL = hdfs://namenode/path/to/schema.avsc</code></pre>



<h2 id="flume-interceptors">Flume Interceptors</h2>



<pre class="prettyprint"><code class="language-json hljs ">a<span class="hljs-number">1</span>.sources = r<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sinks = k<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.channels = c<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.interceptors = i<span class="hljs-number">1</span> i<span class="hljs-number">2</span>
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.interceptors.i<span class="hljs-number">1</span>.type = org.apache.flume.interceptor.HostInterceptor$Builder
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.interceptors.i<span class="hljs-number">1</span>.preserveExisting = <span class="hljs-literal">false</span>
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.interceptors.i<span class="hljs-number">1</span>.hostHeader = hostname
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.interceptors.i<span class="hljs-number">2</span>.type = org.apache.flume.interceptor.TimestampInterceptor$Builder
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.filePrefix = FlumeData.%{CollectorHost}.%Y-%m-%d
a<span class="hljs-number">1</span>.sinks.k<span class="hljs-number">1</span>.channel = c<span class="hljs-number">1</span></code></pre>

<ul>
<li>Timestamp Interceptor</li>
</ul>

<blockquote>
  <p>This interceptor inserts into the event headers, the time in millis at which it processes the event. This interceptor inserts a header with key timestamp (or as specified by the header property) whose value is the relevant timestamp. This interceptor can preserve an existing timestamp if it is already present in the configuration.</p>
</blockquote>



<pre class="prettyprint"><code class="language-json hljs ">a<span class="hljs-number">1</span>.sources = r<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.channels = c<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.channels =  c<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.type = seq
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.interceptors = i<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.interceptors.i<span class="hljs-number">1</span>.type = timestamp</code></pre>

<ul>
<li>Host Interceptor</li>
</ul>

<blockquote>
  <p>This interceptor inserts the hostname or IP address of the host that this agent is running on. It inserts a header with key host or a configured key whose value is the hostname or IP address of the host, based on configuration.</p>
</blockquote>



<pre class="prettyprint"><code class="language-json hljs ">a<span class="hljs-number">1</span>.sources = r<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.channels = c<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.interceptors = i<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.interceptors.i<span class="hljs-number">1</span>.type = host</code></pre>

<ul>
<li>Static Interceptor</li>
</ul>



<pre class="prettyprint"><code class="language-json hljs ">a<span class="hljs-number">1</span>.sources = r<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.channels = c<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.channels =  c<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.type = seq
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.interceptors = i<span class="hljs-number">1</span>
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.interceptors.i<span class="hljs-number">1</span>.type = static
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.interceptors.i<span class="hljs-number">1</span>.key = datacenter
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.interceptors.i<span class="hljs-number">1</span>.value = NEW_YORK</code></pre>

<ul>
<li>Remove Header Interceptor</li>
</ul>

<blockquote>
  <p>This interceptor manipulates Flume event headers, by removing one or many headers. It can remove a statically defined header, headers based on a regular expression or headers in a list. If none of these is defined, or if no header matches the criteria, the Flume events are not modified.</p>
</blockquote>

<ul>
<li>UUID Interceptor</li>
</ul>

<blockquote>
  <p>This interceptor sets a universally unique identifier on all events that are intercepted. An example UUID is b5755073-77a9-43c1-8fad-b7a586fc1b97, which represents a 128-bit value.</p>
</blockquote>

<ul>
<li>Regex Filtering Interceptor</li>
</ul>

<blockquote>
  <p>This interceptor filters events selectively by interpreting the event body as text and matching the text against a configured regular expression. The supplied regular expression can be used to include events or exclude events.</p>
</blockquote>

<ul>
<li>Regex Extractor Interceptor</li>
</ul>

<blockquote>
  <p>If the Flume event body contained 1:2:3.4foobar5 and the following configuration was used:</p>
</blockquote>



<pre class="prettyprint"><code class="language-json hljs ">a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.interceptors.i<span class="hljs-number">1</span>.regex = (\\d):(\\d):(\\d)
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.interceptors.i<span class="hljs-number">1</span>.serializers = s<span class="hljs-number">1</span> s<span class="hljs-number">2</span> s<span class="hljs-number">3</span>
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.interceptors.i<span class="hljs-number">1</span>.serializers.s<span class="hljs-number">1</span>.name = one
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.interceptors.i<span class="hljs-number">1</span>.serializers.s<span class="hljs-number">2</span>.name = two
a<span class="hljs-number">1</span>.sources.r<span class="hljs-number">1</span>.interceptors.i<span class="hljs-number">1</span>.serializers.s<span class="hljs-number">3</span>.name = three</code></pre>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>