---
layout:     post
title:      Flume日志采集
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/zuochang_liu/article/details/81507743				</div>
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                <p id="main-toc"><strong>目录</strong></p>

<p id="-toc" style="margin-left:0px;"> </p>

<p id="%E4%B8%80%20%E5%89%8D%E8%A8%80-toc" style="margin-left:0px;"><a href="#%E4%B8%80%20%E5%89%8D%E8%A8%80" rel="nofollow">一 前言</a></p>

<p id="%E4%BA%8C%20%E6%A6%82%E8%BF%B0-toc" style="margin-left:0px;"><a href="#%E4%BA%8C%20%E6%A6%82%E8%BF%B0" rel="nofollow">二 概述</a></p>

<p id="2.1%20%E4%BB%80%E4%B9%88%E6%98%AFFlume-toc" style="margin-left:40px;"><a href="#2.1%20%E4%BB%80%E4%B9%88%E6%98%AFFlume" rel="nofollow">2.1 什么是Flume</a></p>

<p id="2.2%20Flume%E7%89%B9%E6%80%A7-toc" style="margin-left:40px;"><a href="#2.2%20Flume%E7%89%B9%E6%80%A7" rel="nofollow">2.2 Flume特性</a></p>

<p id="%E4%B8%89%20Flume%E5%8E%9F%E7%90%86-toc" style="margin-left:0px;"><a href="#%E4%B8%89%20Flume%E5%8E%9F%E7%90%86" rel="nofollow">三 Flume原理</a></p>

<p id="3.1%20Flume%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3-toc" style="margin-left:40px;"><a href="#3.1%20Flume%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3" rel="nofollow">3.1 Flume组件详解</a></p>

<p id="3.2%20Flume%E9%87%87%E9%9B%86%E7%BB%93%E6%9E%84%E5%9B%BE-toc" style="margin-left:40px;"><a href="#3.2%20Flume%E9%87%87%E9%9B%86%E7%BB%93%E6%9E%84%E5%9B%BE" rel="nofollow">3.2 Flume采集结构图</a></p>

<p id="3.2.1%20%E7%AE%80%E5%8D%95%E7%BB%93%E6%9E%84-toc" style="margin-left:80px;"><a href="#3.2.1%20%E7%AE%80%E5%8D%95%E7%BB%93%E6%9E%84" rel="nofollow">3.2.1 简单结构</a></p>

<p id="3.2.2%20%E5%A4%8D%E6%9D%82%E7%BB%93%E6%9E%84-toc" style="margin-left:80px;"><a href="#3.2.2%20%E5%A4%8D%E6%9D%82%E7%BB%93%E6%9E%84" rel="nofollow">3.2.2 复杂结构</a></p>

<p id="4%20Flume%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8B-toc" style="margin-left:0px;"><a href="#4%20Flume%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8B" rel="nofollow">4 Flume实战案例</a></p>

<p id="4.1%20Flume%E7%9A%84%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2-toc" style="margin-left:40px;"><a href="#4.1%20Flume%E7%9A%84%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2" rel="nofollow">4.1 Flume的安装部署</a></p>

<p id="4.2%20%E9%87%87%E9%9B%86%E6%A1%88%E4%BE%8B-toc" style="margin-left:40px;"><a href="#4.2%20%E9%87%87%E9%9B%86%E6%A1%88%E4%BE%8B" rel="nofollow">4.2 采集案例</a></p>

<p id="4.2.1%20%E9%87%87%E9%9B%86%E7%9B%AE%E5%BD%95%E5%88%B0HDFS-toc" style="margin-left:80px;"><a href="#4.2.1%20%E9%87%87%E9%9B%86%E7%9B%AE%E5%BD%95%E5%88%B0HDFS" rel="nofollow">4.2.1 采集目录到HDFS</a></p>

<p id="4.2.2%20%E9%87%87%E9%9B%86%E6%96%87%E4%BB%B6%E5%88%B0HDFS-toc" style="margin-left:80px;"><a href="#4.2.2%20%E9%87%87%E9%9B%86%E6%96%87%E4%BB%B6%E5%88%B0HDFS" rel="nofollow">4.2.2 采集文件到HDFS</a></p>

<p id="4.3%20%E6%9B%B4%E5%A4%9Asource%E5%92%8Csink%E7%BB%84%E4%BB%B6-toc" style="margin-left:40px;"><a href="#4.3%20%E6%9B%B4%E5%A4%9Asource%E5%92%8Csink%E7%BB%84%E4%BB%B6" rel="nofollow">4.3 更多source和sink组件</a></p>

<p id="4.4%20HA%20Flume%E9%85%8D%E7%BD%AE%E6%A1%88%E4%BE%8B-toc" style="margin-left:40px;"><a href="#4.4%20HA%20Flume%E9%85%8D%E7%BD%AE%E6%A1%88%E4%BE%8B" rel="nofollow">4.4 HA Flume配置案例</a></p>

<p id="4.4.1%20%E8%A7%92%E8%89%B2%E5%88%86%E9%85%8D-toc" style="margin-left:80px;"><a href="#4.4.1%20%E8%A7%92%E8%89%B2%E5%88%86%E9%85%8D" rel="nofollow">4.4.1 角色分配</a></p>

<p id="4.4.2%20%E9%85%8D%E7%BD%AE-toc" style="margin-left:80px;"><a href="#4.4.2%20%E9%85%8D%E7%BD%AE" rel="nofollow">4.4.2 配置</a></p>

<p id="4.4.3%20FAILOVER%E6%B5%8B%E8%AF%95-toc" style="margin-left:80px;"><a href="#4.4.3%20FAILOVER%E6%B5%8B%E8%AF%95" rel="nofollow">4.4.3 FAILOVER测试</a></p>

<hr id="hr-toc"><h1 id="%E4%B8%80%20%E5%89%8D%E8%A8%80">一 前言</h1>

<p style="margin-left:0pt;">在一个完整的大数据处理系统中，除了hdfs+mapreduce+hive组成分析系统的核心之外，还需要数据采集、结果数据导出、任务调度等不可或缺的辅助系统，而这些辅助工具在hadoop生态体系中都有便捷的开源框架，如图所示：</p>

<p style="margin-left:0pt;"><img alt="" class="has" height="311" src="https://img-blog.csdn.net/20180808143505410?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3p1b2NoYW5nX2xpdQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="693"></p>

<blockquote>
<p style="margin-left:0pt;">flume是由cloudera软件公司产出的可分布式日志收集系统，后与2009年被捐赠了apache软件基金会，为hadoop相关组件之一。尤其近几年随着flume的不断被完善以及升级版本的逐一推出，特别是flume-ng;同时flume内部的各种组件不断丰富，用户在开发的过程中使用的便利性得到很大的改善，现已成为apache top项目之一.</p>
</blockquote>

<h1 id="%E4%BA%8C%20%E6%A6%82%E8%BF%B0" style="margin-left:0pt;">二 概述</h1>

<h2 id="2.1%20%E4%BB%80%E4%B9%88%E6%98%AFFlume">2.1 什么是Flume</h2>

<p style="margin-left:0pt;">  Apache Flume 是一个从可以收集例如日志，事件等数据资源，并将这些数量庞大的数据从各项数据资源中集中起来存储的工具/服务，或者数集中机制。flume具有高可用，分布式，配置工具，其设计的原理也是基于将数据流，如日志数据从各种网站服务器上汇集起来存储到HDFS，HBase等集中存储器中。其结构如下图所示：</p>

<p style="margin-left:0pt;"><img alt="" class="has" height="283" src="https://img-blog.csdn.net/20180808144000772?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3p1b2NoYW5nX2xpdQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="750"></p>

<h2 id="2.2%20Flume%E7%89%B9%E6%80%A7" style="margin-left:0pt;">2.2 Flume特性</h2>

<ol><li>Flume是一个分布式、可靠、和高可用的海量日志采集、聚合和传输的系统。</li>
	<li>Flume可以采集文件，socket数据包等各种形式源数据，又可以将采集到的数据输出到HDFS、hbase、hive、kafka等众多外部存储系统中</li>
	<li>一般的采集需求，通过对flume的简单配置即可实现</li>
	<li>Flume针对特殊场景也具备良好的自定义扩展能力，因此，flume可以适用于大部分的日常数据采集场景</li>
</ol><h1 id="%E4%B8%89%20Flume%E5%8E%9F%E7%90%86">三 Flume原理</h1>

<h2 id="3.1%20Flume%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3">3.1 Flume组件详解</h2>

<p style="margin-left:0pt;">对于每一个Agent来说,它就是一共独立的守护进程(JVM),它从客户端接收数据，如下图所示flume的基本模型</p>

<p style="margin-left:0pt;"><img alt="" class="has" height="347" src="https://img-blog.csdn.net/20180808144156457?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3p1b2NoYW5nX2xpdQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="313"></p>

<ol><li>Flume分布式系统中最<strong><strong>核心的角色是agent</strong></strong>，flume采集系统就是由一个个agent所连接起来形成</li>
	<li><strong><strong>每一个agent相当于一个数据</strong></strong><strong><strong>(被封装成Event对象)</strong></strong><strong><strong>传递员，内部有三个组件：</strong></strong>
	<ol><li>
		<ol><li>Source：采集组件，用于跟数据源对接，以获取数据</li>
			<li>Sink：下沉组件，用于往下一级agent传递数据或者往最终存储系统传递数据</li>
			<li>Channel：传输通道组件，用于从source将数据传递到sink</li>
		</ol></li>
	</ol></li>
</ol><p><img alt="" class="has" height="215" src="https://img-blog.csdn.net/20180808144930623?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3p1b2NoYW5nX2xpdQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="552"></p>

<table cellspacing="0" style="width:426.1pt;"><tbody><tr><td style="background-color:#e2efda;width:426.1pt;">
			<p style="margin-left:0pt;">首先来看一下flume官网中对Event的定义</p>

			<p style="margin-left:0pt;"><img alt="" class="has" height="147" src="https://img-blog.csdn.net/20180808144948822?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3p1b2NoYW5nX2xpdQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="691"></p>

			<p style="margin-left:0pt;"> </p>

			<p style="margin-left:0pt;">一行文本内容会被反序列化成一个event<em><em>(序列化是将对象状态转换为可保持或传输的格式的过程。与序列化相对的是反序列化，它将流转换为对象。这两个过程结合起来，可以轻松地存储和传输数据)</em></em>，event的最大定义为2048字节，超过，则会切割，剩下的会被放到下一个event中，默认编码是UTF-8。</p>
			</td>
		</tr></tbody></table><h2 id="3.2%20Flume%E9%87%87%E9%9B%86%E7%BB%93%E6%9E%84%E5%9B%BE">3.2 Flume采集结构图</h2>

<h3 id="3.2.1%20%E7%AE%80%E5%8D%95%E7%BB%93%E6%9E%84">3.2.1 简单结构</h3>

<p style="margin-left:0pt;">单个agent采集数据</p>

<p style="margin-left:0pt;"><img alt="" class="has" height="265" src="https://img-blog.csdn.net/20180808145041609?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3p1b2NoYW5nX2xpdQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="695"></p>

<h3 id="3.2.2%20%E5%A4%8D%E6%9D%82%E7%BB%93%E6%9E%84" style="margin-left:0pt;">3.2.2 复杂结构</h3>

<p style="margin-left:0pt;">多级agent之间串联</p>

<p style="margin-left:0pt;"><img alt="" class="has" height="405" src="https://img-blog.csdn.net/2018080814511485?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3p1b2NoYW5nX2xpdQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="602"></p>

<h1 id="4%20Flume%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8B" style="margin-left:0pt;">4 Flume实战案例</h1>

<h2 id="4.1%20Flume%E7%9A%84%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2">4.1 Flume的安装部署</h2>

<p>1.Flume的安装非常简单，只需要解压即可，当然，前提是已有hadoop环境</p>

<p style="margin-left:0pt;">上传安装包到数据源所在节点上</p>

<p style="margin-left:0pt;">然后解压  tar -zxvf apache-flume-1.6.0-bin.tar.gz</p>

<p style="margin-left:0pt;">然后进入flume的目录，修改conf下的flume-env.sh，在里面配置JAVA_HOME</p>

<p style="margin-left:0pt;">2.根据数据采集的需求<strong><strong>配置采集方案</strong></strong>，描述在配置文件中(文件名可任意自定义)</p>

<p style="margin-left:0pt;">3.<strong>指定采集方案配置文件</strong>，在相应的节点上启动flume agent</p>

<p style="margin-left:0pt;">先用一个最简单的例子来测试一下程序环境是否正常</p>

<p style="margin-left:0pt;"><img alt="" class="has" height="290" src="https://img-blog.csdn.net/2018080814542285?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3p1b2NoYW5nX2xpdQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="541"></p>

<p style="margin-left:0pt;">1.先在flume的conf目录下新建一个文件</p>

<p style="margin-left:0pt;">vi netcat-logger.conf</p>

<blockquote>
<p style="margin-left:0pt;"># 定义这个agent中各组件的名字</p>

<p style="margin-left:0pt;">a1.sources = r1</p>

<p style="margin-left:0pt;">a1.sinks = k1</p>

<p style="margin-left:0pt;">a1.channels = c1</p>

<p style="margin-left:0pt;"> </p>

<p style="margin-left:0pt;"># 描述和配置source组件：r1</p>

<p style="margin-left:0pt;">a1.sources.r1.type = netcat</p>

<p style="margin-left:0pt;">a1.sources.r1.bind = localhost</p>

<p style="margin-left:0pt;">a1.sources.r1.port = 44444</p>

<p style="margin-left:0pt;"> </p>

<p style="margin-left:0pt;"># 描述和配置sink组件：k1</p>

<p style="margin-left:0pt;">a1.sinks.k1.type = logger</p>

<p style="margin-left:0pt;"> </p>

<p style="margin-left:0pt;"># 描述和配置channel组件，此处使用是内存缓存的方式</p>

<p style="margin-left:0pt;">a1.channels.c1.type = memory</p>

<p style="margin-left:0pt;">a1.channels.c1.capacity = 1000</p>

<p style="margin-left:0pt;">a1.channels.c1.transactionCapacity = 100</p>

<p style="margin-left:0pt;"> </p>

<p style="margin-left:0pt;"># 描述和配置source  channel   sink之间的连接关系</p>

<p style="margin-left:0pt;">a1.sources.r1.channels = c1</p>

<p style="margin-left:0pt;">a1.sinks.k1.channel = c1</p>
</blockquote>

<p style="margin-left:0pt;">2.启动agent去采集数据</p>

<blockquote>
<p style="margin-left:0pt;">bin/flume-ng agent -c conf -f conf/netcat-logger.conf -n a1  -Dflume.root.logger=INFO,console</p>
</blockquote>

<p style="margin-left:0pt;">-c conf   指定flume自身的配置文件所在目录</p>

<p style="margin-left:0pt;">-f conf/netcat-logger.conf  指定我们所描述的采集方案</p>

<p style="margin-left:0pt;">-n a1  指定我们这个agent的名字</p>

<p style="margin-left:0pt;">3.测试</p>

<p style="margin-left:0pt;">先要往agent的source所监听的端口上发送数据，让agent有数据可采</p>

<p style="margin-left:0pt;">随便在一个能跟agent节点联网的机器上</p>

<p style="margin-left:0pt;">telnet anget-hostname  port   （telnet localhost 44444）</p>

<p style="margin-left:0pt;"><img alt="" class="has" height="137" src="https://img-blog.csdn.net/20180808145900814?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3p1b2NoYW5nX2xpdQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="466"></p>

<p style="margin-left:0pt;"> </p>

<h2 id="4.2%20%E9%87%87%E9%9B%86%E6%A1%88%E4%BE%8B" style="margin-left:0pt;">4.2 采集案例</h2>

<h3 id="4.2.1%20%E9%87%87%E9%9B%86%E7%9B%AE%E5%BD%95%E5%88%B0HDFS">4.2.1 采集目录到HDFS</h3>

<p style="margin-left:0pt;">结构示意图：</p>

<p style="margin-left:0pt;"><img alt="" class="has" height="320" src="https://img-blog.csdn.net/20180808150055302?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3p1b2NoYW5nX2xpdQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="694"></p>

<p style="margin-left:0pt;">采集需求：某服务器的某特定目录下，会不断产生新的文件，每当有新文件出现，就需要把文件采集到HDFS中去</p>

<p style="margin-left:0pt;">根据需求，首先定义以下3大要素</p>

<ul><li>数据源组件，即source ——监控文件目录 :  spooldir</li>
</ul><p>      spooldir特性：</p>

<ol><li>               监视一个目录，只要目录中出现新文件，就会采集文件中的内容</li>
	<li>               采集完成的文件，会被agent自动添加一个后缀：COMPLETED</li>
	<li>                所监视的目录中不允许重复出现相同文件名的文件</li>
</ol><ul><li>下沉组件，即sink——HDFS文件系统  :  hdfs sink</li>
	<li>通道组件，即channel——可用file channel 也可以用内存channel</li>
</ul><p>配置文件编写：</p>

<blockquote>
<p style="margin-left:0pt;">#定义三大组件的名称</p>

<p style="margin-left:0pt;">agent1.sources = source1</p>

<p style="margin-left:0pt;">agent1.sinks = sink1</p>

<p style="margin-left:0pt;">agent1.channels = channel1</p>

<p style="margin-left:0pt;"> </p>

<p style="margin-left:0pt;"># 配置source组件</p>

<p style="margin-left:0pt;">agent1.sources.source1.<span style="color:#ff0000;">type = spooldir</span></p>

<p style="margin-left:0pt;">agent1.sources.source1.<span style="color:#ff0000;">spoolDir = /home/hadoop/logs/</span></p>

<p style="margin-left:0pt;">agent1.sources.source1.fileHeader = false</p>

<p style="margin-left:0pt;"> </p>

<p style="margin-left:0pt;">#配置拦截器</p>

<p style="margin-left:0pt;">agent1.sources.source1.interceptors = i1</p>

<p style="margin-left:0pt;">agent1.sources.source1.interceptors.i1.type = host</p>

<p style="margin-left:0pt;">agent1.sources.source1.interceptors.i1.hostHeader = hostname</p>

<p style="margin-left:0pt;"> </p>

<p style="margin-left:0pt;"># 配置sink组件</p>

<p style="margin-left:0pt;">agent1.sinks.sink1.type = hdfs</p>

<p style="margin-left:0pt;">agent1.sinks.sink1.hdfs.path =hdfs://hdp-node-01:9000/weblog/flume-collection/%y-%m-%d/%H-%M</p>

<p style="margin-left:0pt;">agent1.sinks.sink1.hdfs.filePrefix = access_log</p>

<p style="margin-left:0pt;">agent1.sinks.sink1.hdfs.maxOpenFiles = 5000</p>

<p style="margin-left:0pt;">agent1.sinks.sink1.hdfs.batchSize= 100</p>

<p style="margin-left:0pt;">agent1.sinks.sink1.hdfs.fileType = DataStream</p>

<p style="margin-left:0pt;">agent1.sinks.sink1.hdfs.writeFormat =Text</p>

<p style="margin-left:0pt;">agent1.sinks.sink1.hdfs.rollSize = 102400</p>

<p style="margin-left:0pt;">agent1.sinks.sink1.hdfs.rollCount = 1000000</p>

<p style="margin-left:0pt;">agent1.sinks.sink1.hdfs.rollInterval = 60</p>

<p style="margin-left:0pt;">#agent1.sinks.sink1.hdfs.round = true</p>

<p style="margin-left:0pt;">#agent1.sinks.sink1.hdfs.roundValue = 10</p>

<p style="margin-left:0pt;">#agent1.sinks.sink1.hdfs.roundUnit = minute</p>

<p style="margin-left:0pt;">agent1.sinks.sink1.hdfs.useLocalTimeStamp = true</p>

<p style="margin-left:0pt;"># Use a channel which buffers events in memory</p>

<p style="margin-left:0pt;">agent1.channels.channel1.type = memory</p>

<p style="margin-left:0pt;">agent1.channels.channel1.keep-alive = 120</p>

<p style="margin-left:0pt;">agent1.channels.channel1.capacity = 500000</p>

<p style="margin-left:0pt;">agent1.channels.channel1.transactionCapacity = 600</p>

<p style="margin-left:0pt;"> </p>

<p style="margin-left:0pt;"># Bind the source and sink to the channel</p>

<p style="margin-left:0pt;">agent1.sources.source1.channels = channel1</p>

<p style="margin-left:0pt;">agent1.sinks.sink1.channel = channel1</p>
</blockquote>

<p style="margin-left:0pt;">Channel参数解释：</p>

<p style="margin-left:0pt;">capacity：默认该通道中最大的可以存储的event数量</p>

<p style="margin-left:0pt;">trasactionCapacity：每次最大可以从source中拿到或者送到sink中的event数量</p>

<p style="margin-left:0pt;">keep-alive：event添加到通道中或者移出的允许时间</p>

<p style="margin-left:0pt;"> </p>

<h3 id="4.2.2%20%E9%87%87%E9%9B%86%E6%96%87%E4%BB%B6%E5%88%B0HDFS" style="margin-left:0pt;">4.2.2 采集文件到HDFS</h3>

<p style="margin-left:0pt;">采集需求：比如业务系统使用log4j生成的日志，日志内容不断增加，需要把追加到日志文件中的数据<strong><strong>实时</strong></strong>采集到hdfs</p>

<p style="margin-left:0pt;">根据需求，首先定义以下3大要素</p>

<ol><li>采集源，即source——监控文件内容更新 :  exec  ‘tail -F file’</li>
	<li>下沉目标，即sink——HDFS文件系统  :  hdfs sink</li>
	<li>Source和sink之间的传递通道——channel，可用file channel 也可以用 内存channel</li>
</ol><p>配置文件编写：</p>

<blockquote>
<p style="margin-left:0pt;">agent1.sources = source1</p>

<p style="margin-left:0pt;">agent1.sinks = sink1</p>

<p style="margin-left:0pt;">agent1.channels = channel1</p>

<p style="margin-left:0pt;"> </p>

<p style="margin-left:0pt;"># Describe/configure tail -F source1</p>

<p style="margin-left:0pt;">agent1.sources.source1.type = exec</p>

<p style="margin-left:0pt;">agent1.sources.source1.command = tail -F /home/hadoop/logs/access_log</p>

<p style="margin-left:0pt;">agent1.sources.source1.channels = channel1</p>

<p style="margin-left:0pt;"> </p>

<p style="margin-left:0pt;">#configure host for source</p>

<p style="margin-left:0pt;">agent1.sources.source1.interceptors = i1</p>

<p style="margin-left:0pt;">agent1.sources.source1.interceptors.i1.type = host</p>

<p style="margin-left:0pt;">agent1.sources.source1.interceptors.i1.hostHeader = hostname</p>

<p style="margin-left:0pt;"> </p>

<p style="margin-left:0pt;"># Describe sink1</p>

<p style="margin-left:0pt;">agent1.sinks.sink1.type = hdfs</p>

<p style="margin-left:0pt;">#a1.sinks.k1.channel = c1</p>

<p style="margin-left:0pt;">agent1.sinks.sink1.hdfs.path =hdfs://hdp-node-01:9000/weblog/flume-collection/%y-%m-%d/%H-%M</p>

<p style="margin-left:0pt;">agent1.sinks.sink1.hdfs.filePrefix = access_log</p>

<p style="margin-left:0pt;">agent1.sinks.sink1.hdfs.maxOpenFiles = 5000</p>

<p style="margin-left:0pt;">agent1.sinks.sink1.hdfs.batchSize= 100</p>

<p style="margin-left:0pt;">agent1.sinks.sink1.hdfs.fileType = DataStream</p>

<p style="margin-left:0pt;">agent1.sinks.sink1.hdfs.writeFormat =Text</p>

<p style="margin-left:0pt;">agent1.sinks.sink1.hdfs.rollSize = 102400</p>

<p style="margin-left:0pt;">agent1.sinks.sink1.hdfs.rollCount = 1000000</p>

<p style="margin-left:0pt;">agent1.sinks.sink1.hdfs.rollInterval = 60</p>

<p style="margin-left:0pt;">agent1.sinks.sink1.hdfs.round = true</p>

<p style="margin-left:0pt;">agent1.sinks.sink1.hdfs.roundValue = 10</p>

<p style="margin-left:0pt;">agent1.sinks.sink1.hdfs.roundUnit = minute</p>

<p style="margin-left:0pt;">agent1.sinks.sink1.hdfs.useLocalTimeStamp = true</p>

<p style="margin-left:0pt;"> </p>

<p style="margin-left:0pt;"># Use a channel which buffers events in memory</p>

<p style="margin-left:0pt;">agent1.channels.channel1.type = memory</p>

<p style="margin-left:0pt;">agent1.channels.channel1.keep-alive = 120</p>

<p style="margin-left:0pt;">agent1.channels.channel1.capacity = 500000</p>

<p style="margin-left:0pt;">agent1.channels.channel1.transactionCapacity = 600</p>

<p style="margin-left:0pt;"> </p>

<p style="margin-left:0pt;"># Bind the source and sink to the channel</p>

<p style="margin-left:0pt;">agent1.sources.source1.channels = channel1</p>

<p style="margin-left:0pt;">agent1.sinks.sink1.channel = channel1</p>
</blockquote>

<p style="margin-left:0pt;">3.两个agent级联</p>

<p style="margin-left:0pt;"><img alt="" class="has" height="390" src="https://img-blog.csdn.net/20180808150811949?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3p1b2NoYW5nX2xpdQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="695"></p>

<h2 id="4.3%20%E6%9B%B4%E5%A4%9Asource%E5%92%8Csink%E7%BB%84%E4%BB%B6" style="margin-left:0pt;">4.3 更多source和sink组件</h2>

<p style="margin-left:0pt;">Flume支持众多的source和sink类型，详细手册可参考官方文档</p>

<p style="margin-left:0pt;"><a href="http://flume.apache.org/FlumeUserGuide.html" rel="nofollow"><u><span style="color:#800080;"><u>http://flume.apache.org/FlumeUserGuide.html</u></span></u></a></p>

<h2 id="4.4%20HA%20Flume%E9%85%8D%E7%BD%AE%E6%A1%88%E4%BE%8B" style="margin-left:0pt;">4.4 HA Flume配置案例</h2>

<p style="margin-left:0pt;">在完成单点的Flume NG搭建后，下面我们搭建一个高可用的Flume NG集群，架构图如下所示：</p>

<p style="margin-left:0pt;"><img alt="" class="has" height="493" src="https://img-blog.csdn.net/20180808151108685?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3p1b2NoYW5nX2xpdQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="649">　</p>

<p style="margin-left:0pt;">图中，我们可以看出，Flume的存储可以支持多种，这里只列举了HDFS和Kafka（如：存储最新的一周日志，并给Spark Streaming系统提供实时日志流。</p>

<h3 id="4.4.1%20%E8%A7%92%E8%89%B2%E5%88%86%E9%85%8D" style="margin-left:0pt;">4.4.1 角色分配</h3>

<p style="margin-left:0pt;">Flume的Agent和Collector分布如下表所示：</p>

<table border="1" cellspacing="0" style="margin-left:6.75pt;width:172.25pt;"><tbody><tr><td style="background-color:#ffffff;width:61.6pt;">
			<p style="margin-left:0pt;">名称　</p>
			</td>
			<td style="background-color:#ffffff;width:42.05pt;">
			<p style="margin-left:0pt;">HOST</p>
			</td>
			<td style="background-color:#ffffff;width:68.6pt;">
			<p style="margin-left:0pt;">角色</p>
			</td>
		</tr><tr><td style="background-color:#ffffff;width:61.6pt;">
			<p style="margin-left:0pt;">Agent1</p>
			</td>
			<td style="background-color:#ffffff;width:42.05pt;">
			<p style="margin-left:0pt;">mini1</p>
			</td>
			<td style="background-color:#ffffff;width:68.6pt;">
			<p style="margin-left:0pt;">Web Server</p>
			</td>
		</tr><tr><td style="background-color:#ffffff;width:61.6pt;">
			<p style="margin-left:0pt;">Agent2</p>
			</td>
			<td style="background-color:#ffffff;width:42.05pt;">
			<p style="margin-left:0pt;">mini2</p>
			</td>
			<td style="background-color:#ffffff;width:68.6pt;">
			<p style="margin-left:0pt;">Web Server</p>
			</td>
		</tr><tr><td style="background-color:#ffffff;width:61.6pt;">
			<p style="margin-left:0pt;">Agent3</p>
			</td>
			<td style="background-color:#ffffff;width:42.05pt;">
			<p style="margin-left:0pt;">mini3</p>
			</td>
			<td style="background-color:#ffffff;width:68.6pt;">
			<p style="margin-left:0pt;">Web Server</p>
			</td>
		</tr><tr><td style="background-color:#ffffff;width:61.6pt;">
			<p style="margin-left:0pt;">Collector1</p>
			</td>
			<td style="background-color:#ffffff;width:42.05pt;">
			<p style="margin-left:0pt;">mini4</p>
			</td>
			<td style="background-color:#ffffff;width:68.6pt;">
			<p style="margin-left:0pt;">AgentMstr1</p>
			</td>
		</tr><tr><td style="background-color:#ffffff;width:61.6pt;">
			<p style="margin-left:0pt;">Collector2</p>
			</td>
			<td style="background-color:#ffffff;width:42.05pt;">
			<p style="margin-left:0pt;">mini5</p>
			</td>
			<td style="background-color:#ffffff;width:68.6pt;">
			<p style="margin-left:0pt;">AgentMstr2</p>
			</td>
		</tr></tbody></table><p style="margin-left:0pt;">图中所示，Agent1，Agent2，Agent3数据分别流入到Collector1和Collector2，Flume NG本身提供了Failover机制，可以自动切换和恢复。在上图中，有3个产生日志服务器分布在不同的机房，要把所有的日志都收集到一个集群中存储。下面我们开发配置Flume NG集群。</p>

<h3 id="4.4.2%20%E9%85%8D%E7%BD%AE" style="margin-left:0pt;">4.4.2 配置</h3>

<p style="margin-left:0pt;">在下面单点Flume中，基本配置都完成了，我们只需要新添加两个配置文件，它们是agent.properties和collector.properties，其配置内容如下所示：</p>

<p style="margin-left:0pt;">1、agent配置</p>

<blockquote>
<p style="margin-left:0pt;">[root@mini1 apache-flume-1.6.0-bin]# vi conf/agent.properties</p>

<p style="margin-left:0pt;">#agent1 name</p>

<p style="margin-left:0pt;">agent1.channels = c1</p>

<p style="margin-left:0pt;">agent1.sources = r1</p>

<p style="margin-left:0pt;">agent1.sinks = k1 k2</p>

<p style="margin-left:0pt;"> </p>

<p style="margin-left:0pt;">#set gruop</p>

<p style="margin-left:0pt;">agent1.sinkgroups = g1</p>

<p style="margin-left:0pt;"> </p>

<p style="margin-left:0pt;">#set channel</p>

<p style="margin-left:0pt;">agent1.channels.c1.type = memory</p>

<p style="margin-left:0pt;">agent1.channels.c1.capacity = 1000</p>

<p style="margin-left:0pt;">agent1.channels.c1.transactionCapacity = 100</p>

<p style="margin-left:0pt;"> </p>

<p style="margin-left:0pt;">agent1.sources.r1.channels = c1</p>

<p style="margin-left:0pt;">agent1.sources.r1.type = exec</p>

<p style="margin-left:0pt;">agent1.sources.r1.command = tail -F /root/log/test.log</p>

<p style="margin-left:0pt;"> </p>

<p style="margin-left:0pt;">agent1.sources.r1.interceptors = i1 i2</p>

<p style="margin-left:0pt;">agent1.sources.r1.interceptors.i1.type = static</p>

<p style="margin-left:0pt;">agent1.sources.r1.interceptors.i1.key = Type</p>

<p style="margin-left:0pt;">agent1.sources.r1.interceptors.i1.value = LOGIN</p>

<p style="margin-left:0pt;">agent1.sources.r1.interceptors.i2.type = timestamp</p>

<p style="margin-left:0pt;"> </p>

<p style="margin-left:0pt;"># set sink1</p>

<p style="margin-left:0pt;">agent1.sinks.k1.channel = c1</p>

<p style="margin-left:0pt;">agent1.sinks.k1.type = avro</p>

<p style="margin-left:0pt;">agent1.sinks.k1.hostname = mini2</p>

<p style="margin-left:0pt;">agent1.sinks.k1.port = 52020</p>

<p style="margin-left:0pt;"> </p>

<p style="margin-left:0pt;"># set sink2</p>

<p style="margin-left:0pt;">agent1.sinks.k2.channel = c1</p>

<p style="margin-left:0pt;">agent1.sinks.k2.type = avro</p>

<p style="margin-left:0pt;">agent1.sinks.k2.hostname = mini3</p>

<p style="margin-left:0pt;">agent1.sinks.k2.port = 52020</p>

<p style="margin-left:0pt;"> </p>

<p style="margin-left:0pt;">#set sink group</p>

<p style="margin-left:0pt;">agent1.sinkgroups.g1.sinks = k1 k2</p>

<p style="margin-left:0pt;"> </p>

<p style="margin-left:0pt;">#set failover</p>

<p style="margin-left:0pt;">agent1.sinkgroups.g1.processor.type = failover</p>

<p style="margin-left:0pt;">agent1.sinkgroups.g1.processor.priority.k1 = 10</p>

<p style="margin-left:0pt;">agent1.sinkgroups.g1.processor.priority.k2 = 1</p>

<p style="margin-left:0pt;">agent1.sinkgroups.g1.processor.maxpenalty = 10000</p>
</blockquote>

<p style="margin-left:0pt;">启动命令</p>

<blockquote>
<p style="margin-left:0pt;">bin/flume-ng agent -n agent1 -c conf -f conf/agent.properties -Dflume.root.logger=DEBUG,console</p>
</blockquote>

<p style="margin-left:0pt;">2.collector配置</p>

<blockquote>
<p style="margin-left:0pt;">[root@mini2 conf]# vi collector.properties</p>

<p style="margin-left:0pt;">#set Agent name</p>

<p style="margin-left:0pt;">a1.sources = r1</p>

<p style="margin-left:0pt;">a1.channels = c1</p>

<p style="margin-left:0pt;">a1.sinks = k1</p>

<p style="margin-left:0pt;"> </p>

<p style="margin-left:0pt;">#set channel</p>

<p style="margin-left:0pt;">a1.channels.c1.type = memory</p>

<p style="margin-left:0pt;">a1.channels.c1.capacity = 1000</p>

<p style="margin-left:0pt;">a1.channels.c1.transactionCapacity = 100</p>

<p style="margin-left:0pt;"> </p>

<p style="margin-left:0pt;"># other node,nna to nns</p>

<p style="margin-left:0pt;">a1.sources.r1.type = avro</p>

<p style="margin-left:0pt;">a1.sources.r1.bind = <span style="color:#ff0000;">mini2</span></p>

<p style="margin-left:0pt;">a1.sources.r1.port = 52020</p>

<p style="margin-left:0pt;">a1.sources.r1.interceptors = i1</p>

<p style="margin-left:0pt;">a1.sources.r1.interceptors.i1.type = static</p>

<p style="margin-left:0pt;">a1.sources.r1.interceptors.i1.key = Collector</p>

<p style="margin-left:0pt;">a1.sources.r1.interceptors.i1.value = <span style="color:#ff0000;">mini2</span></p>

<p style="margin-left:0pt;">a1.sources.r1.channels = c1</p>

<p style="margin-left:0pt;"> </p>

<p style="margin-left:0pt;">#set sink to hdfs</p>

<p style="margin-left:0pt;">a1.sinks.k1.type=hdfs</p>

<p style="margin-left:0pt;">a1.sinks.k1.hdfs.path=/home/hdfs/flume/logdfs</p>

<p style="margin-left:0pt;">a1.sinks.k1.hdfs.fileType=DataStream</p>

<p style="margin-left:0pt;">a1.sinks.k1.hdfs.writeFormat=TEXT</p>

<p style="margin-left:0pt;">a1.sinks.k1.hdfs.rollInterval=10</p>

<p style="margin-left:0pt;">a1.sinks.k1.channel=c1</p>

<p style="margin-left:0pt;">a1.sinks.k1.hdfs.filePrefix=%Y-%m-%d</p>
</blockquote>

<p style="margin-left:0pt;">在mini3上，需要修改上述配置中的红色字体主机名为mini3</p>

<p style="margin-left:0pt;">启动命令：</p>

<blockquote>
<p style="margin-left:0pt;">bin/flume-ng agent -n a1 -c conf -f conf/collector.properties -Dflume.root.logger=DEBUG,console</p>
</blockquote>

<h3 id="4.4.3%20FAILOVER%E6%B5%8B%E8%AF%95" style="margin-left:0pt;">4.4.3 FAILOVER测试</h3>

<p style="margin-left:0pt;">下面我们来测试下Flume NG集群的高可用（故障转移）。场景如下：我们在Agent1节点上传文件，由于我们配置Collector1的权重比Collector2大，所以 Collector1优先采集并上传到存储系统。然后我们kill掉Collector1，此时有Collector2负责日志的采集上传工作，之后，我 们手动恢复Collector1节点的Flume服务，再次在Agent1上次文件，发现Collector1恢复优先级别的采集工作。具体截图如下所 示：</p>

<p style="margin-left:0pt;">Collector1优先上传</p>

<p style="margin-left:0pt;"><img alt="" class="has" height="178" src="https://img-blog.csdn.net/20180808151917210?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3p1b2NoYW5nX2xpdQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="693"></p>

<p style="margin-left:0pt;">HDFS集群中上传的log内容预览</p>

<p style="margin-left:0pt;"><img alt="" class="has" height="139" src="https://img-blog.csdn.net/2018080815194432?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3p1b2NoYW5nX2xpdQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="693"></p>

<p style="margin-left:0pt;">Collector1宕机，Collector2获取优先上传权限</p>

<p style="margin-left:0pt;"><img alt="" class="has" height="137" src="https://img-blog.csdn.net/20180808152009579?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3p1b2NoYW5nX2xpdQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="693"></p>

<p style="margin-left:0pt;">重启Collector1服务，Collector1重新获得优先上传的权限</p>            </div>
                </div>