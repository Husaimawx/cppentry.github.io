---
layout:     post
title:      hbase配置
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/Volcano3511/article/details/78674111				</div>
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<p></p><div class="toc">
<ul>
<li><ul>
<li><a href="#%E5%AE%89%E8%A3%85%E7%8E%AF%E5%A2%83" rel="nofollow" target="_blank">安装环境</a></li>
<li><a href="#%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B" rel="nofollow" target="_blank">安装过程</a><ul>
<li><a href="#%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E5%8C%85" rel="nofollow" target="_blank">下载安装包</a></li>
<li><a href="#%E9%85%8D%E7%BD%AEhbase%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6" rel="nofollow" target="_blank">配置hbase配置文件</a></li>
<li><a href="#%E5%90%AF%E5%8A%A8hbase" rel="nofollow" target="_blank">启动hbase</a></li>
<li><a href="#%E6%9D%A5%E4%B8%80%E7%82%B9%E5%B0%8F%E6%B5%8B%E8%AF%95" rel="nofollow" target="_blank">来一点小测试</a></li>
<li><a href="#%E4%BA%A7%E7%94%9F%E9%97%AE%E9%A2%98" rel="nofollow" target="_blank">产生问题</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>




<h2 id="安装环境">安装环境</h2>

<blockquote>
  <p>Hadoop：hadoop2.7.4 <br>
  Hbase:hbase.1.2.6 <br>
  JDK: jdk1.8</p>
</blockquote>

<p><strong>注意：hbase版本需要支持原来安装的hadoop版本</strong></p>

<table>
<thead>
<tr>
  <th align="center">HBase-0.92.x</th>
  <th align="center">HBase-0.94.x</th>
  <th align="center">HBase-0.96.x</th>
</tr>
</thead>
<tbody><tr>
  <td align="center">Hadoop-0.20.205</td>
  <td align="center">S</td>
  <td align="center">X</td>
</tr>
<tr>
  <td align="center">Hadoop-0.22.x</td>
  <td align="center">S</td>
  <td align="center">X</td>
</tr>
<tr>
  <td align="center">Hadoop-1.0.x</td>
  <td align="center">S</td>
  <td align="center">S</td>
</tr>
<tr>
  <td align="center">Hadoop-1.1.x</td>
  <td align="center">NT</td>
  <td align="center">S</td>
</tr>
<tr>
  <td align="center">Hadoop-0.23.x</td>
  <td align="center">X</td>
  <td align="center">S</td>
</tr>
<tr>
  <td align="center">Hadoop-2.x</td>
  <td align="center">X</td>
  <td align="center">S</td>
</tr>
</tbody></table>


<blockquote>
  <p>S = supported and tested,支持 <br>
  X = not supported,不支持 <br>
  NT = not tested enough.可以运行但测试不充分</p>
</blockquote>



<h2 id="安装过程">安装过程</h2>



<h3 id="下载安装包">下载安装包</h3>

<p>选择的是最新的稳定版本 1.2.6</p>

<p>解压到<code>/ur/hadoop/app/hbase</code></p>

<p>然后在<code>/etc/profile</code>中，将Hbase的路径添加到Path中</p>

<p><img src="index_files/d44d0ede-5996-47c9-88ba-361ee2ec9097.png" alt="" title=""></p>

<p>然后source一下</p>



<h3 id="配置hbase配置文件">配置hbase配置文件</h3>

<ul>
<li>conf/hbase-env.sh <br>
主要是添加JAVA的路径，hadoop路径，修改zookeeper为另外配置的（之前已经配置）</li>
</ul>

<p><img src="index_files/ae592485-4e45-4857-b3c0-f14e760027b5.png" alt="" title=""></p>

<ul>
<li>conf/hbase-site.xml <br>
这个配置比较复杂，是参考网上的 <br>
下面的代码中也有详细的说明 <br>
注意要把配置改成自己的配置</li>
</ul>



<pre class="prettyprint"><code class=" hljs xml"><span class="hljs-tag">&lt;<span class="hljs-title">configuration</span>&gt;</span>  
    <span class="hljs-tag">&lt;<span class="hljs-title">property</span>&gt;</span>  
        <span class="hljs-tag">&lt;<span class="hljs-title">name</span>&gt;</span>hbase.rootdir<span class="hljs-tag">&lt;/<span class="hljs-title">name</span>&gt;</span>  
        <span class="hljs-tag">&lt;<span class="hljs-title">value</span>&gt;</span>hdfs://cluster1<span class="hljs-tag">&lt;/<span class="hljs-title">value</span>&gt;</span><span class="hljs-comment">&lt;!--这里必须跟core-site.xml中的fs.defaultFS键配置一样--&gt;</span>  
    <span class="hljs-tag">&lt;/<span class="hljs-title">property</span>&gt;</span>  
    <span class="hljs-comment">&lt;!-- 开启分布式模式 --&gt;</span>  
    <span class="hljs-tag">&lt;<span class="hljs-title">property</span>&gt;</span>  
        <span class="hljs-tag">&lt;<span class="hljs-title">name</span>&gt;</span>hbase.cluster.distributed<span class="hljs-tag">&lt;/<span class="hljs-title">name</span>&gt;</span>  
        <span class="hljs-tag">&lt;<span class="hljs-title">value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-title">value</span>&gt;</span>  
    <span class="hljs-tag">&lt;/<span class="hljs-title">property</span>&gt;</span>  
    <span class="hljs-comment">&lt;!--只配置端口，为了配置多个HMaster --&gt;</span>  
    <span class="hljs-tag">&lt;<span class="hljs-title">property</span>&gt;</span>  
        <span class="hljs-tag">&lt;<span class="hljs-title">name</span>&gt;</span>hbase.master<span class="hljs-tag">&lt;/<span class="hljs-title">name</span>&gt;</span>  
        <span class="hljs-tag">&lt;<span class="hljs-title">value</span>&gt;</span>lk:60000<span class="hljs-tag">&lt;/<span class="hljs-title">value</span>&gt;</span>  
    <span class="hljs-tag">&lt;/<span class="hljs-title">property</span>&gt;</span>  
    <span class="hljs-tag">&lt;<span class="hljs-title">property</span>&gt;</span>  
        <span class="hljs-tag">&lt;<span class="hljs-title">name</span>&gt;</span>hbase.tmp.dir<span class="hljs-tag">&lt;/<span class="hljs-title">name</span>&gt;</span>  
        <span class="hljs-tag">&lt;<span class="hljs-title">value</span>&gt;</span>/tmp/hbase/tmp<span class="hljs-tag">&lt;/<span class="hljs-title">value</span>&gt;</span>  
    <span class="hljs-tag">&lt;/<span class="hljs-title">property</span>&gt;</span>  

    <span class="hljs-comment">&lt;!--这里设置hbase API客户端侧缓存值，大于此值就进行一次提交，/opt/hbase-1.2.1/conf/hbase-site.xml统一配置为5M，对所有HTable都生效，那么客户端API就可不设置--&gt;</span>  
    <span class="hljs-comment">&lt;!--htable.setWriteBufferSize(5242880);//5M --&gt;</span>  
    <span class="hljs-tag">&lt;<span class="hljs-title">property</span>&gt;</span>  
        <span class="hljs-tag">&lt;<span class="hljs-title">name</span>&gt;</span>hbase.client.write.buffer<span class="hljs-tag">&lt;/<span class="hljs-title">name</span>&gt;</span>  
        <span class="hljs-tag">&lt;<span class="hljs-title">value</span>&gt;</span>5242880<span class="hljs-tag">&lt;/<span class="hljs-title">value</span>&gt;</span>  
    <span class="hljs-tag">&lt;/<span class="hljs-title">property</span>&gt;</span>  
    <span class="hljs-comment">&lt;!--这里设置Master并发最大线程数，经常有人设为300左右--&gt;</span>  
    <span class="hljs-tag">&lt;<span class="hljs-title">property</span>&gt;</span>  
        <span class="hljs-tag">&lt;<span class="hljs-title">name</span>&gt;</span>hbase.regionserver.handler.count<span class="hljs-tag">&lt;/<span class="hljs-title">name</span>&gt;</span>  
        <span class="hljs-tag">&lt;<span class="hljs-title">value</span>&gt;</span>300<span class="hljs-tag">&lt;/<span class="hljs-title">value</span>&gt;</span>  
    <span class="hljs-tag">&lt;/<span class="hljs-title">property</span>&gt;</span>  
    <span class="hljs-comment">&lt;!--  
    默认值 ：256M  
    说明      ：在当前ReigonServer上单个Reigon的最大存储空间，单个Region超过该值时，这个Region会被自动split成更小的region。  
    数据表创建时会预分区，每个预分区最大大小这里设置为10G，防止频繁的split阻塞数据读写，  
    只有当预分区超过10G时才会进行split，正式环境应该首先预测数据存储时间内的大致数据量，  
    然后如果每个预分区为10G，计算出分区数，建表时指定分区设置，防止后期频繁split  
    写法，如果你想设为128兆，但绝不可以写成128M这样，最安全的写法是128*1024*1024的数值，如下  
    --&gt;</span>  
    <span class="hljs-tag">&lt;<span class="hljs-title">property</span>&gt;</span>  
        <span class="hljs-tag">&lt;<span class="hljs-title">name</span>&gt;</span>hbase.hregion.max.filesize<span class="hljs-tag">&lt;/<span class="hljs-title">name</span>&gt;</span>  
        <span class="hljs-tag">&lt;<span class="hljs-title">value</span>&gt;</span>134217728<span class="hljs-tag">&lt;/<span class="hljs-title">value</span>&gt;</span>  
    <span class="hljs-tag">&lt;/<span class="hljs-title">property</span>&gt;</span>  
    <span class="hljs-comment">&lt;!--  
    默认hbase每24小时会进行一次major_compact，major_compact会阻塞读写，这里先禁用，但不代表这个操作不做，  
    可以后期指定linux shell加入到cron定时任务在hbase集群空闲情况下执行  
    --&gt;</span>    
    <span class="hljs-tag">&lt;<span class="hljs-title">property</span>&gt;</span>  
        <span class="hljs-tag">&lt;<span class="hljs-title">name</span>&gt;</span>hbase.hregion.majorcompaction<span class="hljs-tag">&lt;/<span class="hljs-title">name</span>&gt;</span>  
        <span class="hljs-tag">&lt;<span class="hljs-title">value</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-title">value</span>&gt;</span>  
    <span class="hljs-tag">&lt;/<span class="hljs-title">property</span>&gt;</span>  
    <span class="hljs-comment">&lt;!--  
    hbase本质上可以说是HADOOP HDFS的客户端，虽然Hadoop的core-site.xml里设置了文件副本数，但是仍然是客户端传值优先，这里设置为2，  
    意思是一个文件，最终在Hadoop上总个数为2，正式环境最好设置为3，目前发现此值小于3时，  
    在遇到All datanodes xxx.xxx.xxx.xxx:port are bad. Aborting...错误信息时，如果某个DataNode宕机，原则上hbase调用的DFSClient会去其他Datanode    
    上重试写，但发现配置的值低于3就不会去尝试  
    --&gt;</span>    
    <span class="hljs-tag">&lt;<span class="hljs-title">property</span>&gt;</span>  
        <span class="hljs-tag">&lt;<span class="hljs-title">name</span>&gt;</span>dfs.replication<span class="hljs-tag">&lt;/<span class="hljs-title">name</span>&gt;</span>  
        <span class="hljs-tag">&lt;<span class="hljs-title">value</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-title">value</span>&gt;</span>  
    <span class="hljs-tag">&lt;/<span class="hljs-title">property</span>&gt;</span>  
    <span class="hljs-comment">&lt;!--  
    IncreasingToUpperBoundRegionSplitPolicy策略的意思是，数据表如果预分区为2，配置的memstore flush size=128M，那么下一次分裂大小是2的平方然后乘以128MB，即2*2*128M=512MB;  
    ConstantSizeRegionSplitPolicy策略的意思是按照上面指定的region大小超过30G才做分裂  
    --&gt;</span>  
    <span class="hljs-tag">&lt;<span class="hljs-title">property</span>&gt;</span>  
        <span class="hljs-tag">&lt;<span class="hljs-title">name</span>&gt;</span>hbase.regionserver.region.split.policy<span class="hljs-tag">&lt;/<span class="hljs-title">name</span>&gt;</span>  
        <span class="hljs-tag">&lt;<span class="hljs-title">value</span>&gt;</span>org.apache.hadoop.hbase.regionserver.ConstantSizeRegionSplitPolicy<span class="hljs-tag">&lt;/<span class="hljs-title">value</span>&gt;</span>  
    <span class="hljs-tag">&lt;/<span class="hljs-title">property</span>&gt;</span>  
    <span class="hljs-comment">&lt;!--一个edit版本在内存中的cache时长，默认3600000毫秒--&gt;</span>  
    <span class="hljs-tag">&lt;<span class="hljs-title">property</span>&gt;</span>  
        <span class="hljs-tag">&lt;<span class="hljs-title">name</span>&gt;</span>hbase.regionserver.optionalcacheflushinterval<span class="hljs-tag">&lt;/<span class="hljs-title">name</span>&gt;</span>  
        <span class="hljs-tag">&lt;<span class="hljs-title">value</span>&gt;</span>7200000<span class="hljs-tag">&lt;/<span class="hljs-title">value</span>&gt;</span>  
    <span class="hljs-tag">&lt;/<span class="hljs-title">property</span>&gt;</span>  
    <span class="hljs-comment">&lt;!--分配给HFile/StoreFile的block cache占最大堆(-Xmx setting)的比例。默认0.3意思是分配30%，设置为0就是禁用，但不推荐。--&gt;</span>  
    <span class="hljs-tag">&lt;<span class="hljs-title">property</span>&gt;</span>  
        <span class="hljs-tag">&lt;<span class="hljs-title">name</span>&gt;</span>hfile.block.cache.size<span class="hljs-tag">&lt;/<span class="hljs-title">name</span>&gt;</span>  
        <span class="hljs-tag">&lt;<span class="hljs-title">value</span>&gt;</span>0.3<span class="hljs-tag">&lt;/<span class="hljs-title">value</span>&gt;</span>  
    <span class="hljs-tag">&lt;/<span class="hljs-title">property</span>&gt;</span>  
    <span class="hljs-comment">&lt;!--当memstore的大小超过这个值的时候，会flush到磁盘。这个值被一个线程每隔hbase.server.thread.wakefrequency检查一下。--&gt;</span>  
    <span class="hljs-tag">&lt;<span class="hljs-title">property</span>&gt;</span>  
        <span class="hljs-tag">&lt;<span class="hljs-title">name</span>&gt;</span>hbase.hregion.memstore.flush.size<span class="hljs-tag">&lt;/<span class="hljs-title">name</span>&gt;</span>  
        <span class="hljs-tag">&lt;<span class="hljs-title">value</span>&gt;</span>52428800<span class="hljs-tag">&lt;/<span class="hljs-title">value</span>&gt;</span>  
    <span class="hljs-tag">&lt;/<span class="hljs-title">property</span>&gt;</span>  
    <span class="hljs-comment">&lt;!--  
    默认值 ：0.4/0.35  
    说明      ：hbase.hregion.memstore.flush.size 这个参数的作用是当单个Region内所有的memstore大小总和超过指定值时，flush该region的所有memstore  
    单个region server的全部memtores的最大值。超过这个值，一个新的update操作会被挂起，强制执行flush操作。  
    以前版本中是通过hbase.regionserver.global.memstore.upperLimit设置，老版本中含义是在hbase-env.sh中配置的HEAP_SIZE比如4G，  
    那么以该值4G乘以配置的0.5就是2G，意思是所有memstore总和达到2G值时，阻塞所有读写，现在1.2.1版本hbase中被hbase.regionserver.global.memstore.size替代，  
    计算方法仍然是HEAP_SIZE乘以配置的百分比比如下面的0.5，那么阻塞读写的阀值就为2G  
    --&gt;</span>    
    <span class="hljs-tag">&lt;<span class="hljs-title">property</span>&gt;</span>  
        <span class="hljs-tag">&lt;<span class="hljs-title">name</span>&gt;</span>hbase.regionserver.global.memstore.size<span class="hljs-tag">&lt;/<span class="hljs-title">name</span>&gt;</span>  
        <span class="hljs-tag">&lt;<span class="hljs-title">value</span>&gt;</span>0.5<span class="hljs-tag">&lt;/<span class="hljs-title">value</span>&gt;</span>  
    <span class="hljs-tag">&lt;/<span class="hljs-title">property</span>&gt;</span>  
    <span class="hljs-comment">&lt;!--  
    当强制执行flush操作的时候，当低于这个值的时候，flush会停止。  
    默认是堆大小的 35% . 如果这个值和 hbase.regionserver.global.memstore.upperLimit 相同就意味着当update操作因为内存限制被挂起时，  
    会尽量少的执行flush(译者注:一旦执行flush，值就会比下限要低，不再执行)。    
    在老版本中该值是通过hbase.regionserver.global.memstore.size.lower.limit设置，  
    计算方法是以hbase-env.sh的HEAP_SIZE乘以配置的百分比比如0.3就是HEAP_SIZE4G乘以0.3=1.2G，达到这个值的话就在所有memstore中选择最大的那个做flush动作，  
    新版本则完全不同了，首先是通过hbase.regionserver.global.memstore.lowerLimit设置，而且不是以HEAP_SIZE作为参考，  
    二是以配置的hbase.regionserver.global.memstore.size的值再乘以配置的比例比如0.5，如果HEAP_SIZE=4G，  
    hbase.regionserver.global.memstore.size配置为0.5，hbase.regionserver.global.memstore.size.lower.limit配置的为0.5，  
    则计算出来的值为4G乘以0.5再乘以0.5就是1G了，达到1G就先找最大的memstore触发flush  
    --&gt;</span>    
    <span class="hljs-tag">&lt;<span class="hljs-title">property</span>&gt;</span>  
        <span class="hljs-tag">&lt;<span class="hljs-title">name</span>&gt;</span>hbase.regionserver.global.memstore.size.lower.limit<span class="hljs-tag">&lt;/<span class="hljs-title">name</span>&gt;</span>  
        <span class="hljs-tag">&lt;<span class="hljs-title">value</span>&gt;</span>0.5<span class="hljs-tag">&lt;/<span class="hljs-title">value</span>&gt;</span>  
    <span class="hljs-tag">&lt;/<span class="hljs-title">property</span>&gt;</span>  
    <span class="hljs-comment">&lt;!--这里设置HDFS客户端最大超时时间，尽量改大，后期hbase经常会因为该问题频繁宕机--&gt;</span>  
    <span class="hljs-tag">&lt;<span class="hljs-title">property</span>&gt;</span>  
        <span class="hljs-tag">&lt;<span class="hljs-title">name</span>&gt;</span>dfs.client.socket-timeout<span class="hljs-tag">&lt;/<span class="hljs-title">name</span>&gt;</span>  
        <span class="hljs-tag">&lt;<span class="hljs-title">value</span>&gt;</span>600000<span class="hljs-tag">&lt;/<span class="hljs-title">value</span>&gt;</span>  
    <span class="hljs-tag">&lt;/<span class="hljs-title">property</span>&gt;</span>  

    <span class="hljs-comment">&lt;!--  
    hbase.table.sanity.checks是一个开关，主要用于hbase各种参数检查，当为true时候，检查步骤如下  
    1.check max file size，hbase.hregion.max.filesize，最小为2MB  
    2.check flush size，hbase.hregion.memstore.flush.size，最小为1MB  
    3.check that coprocessors and other specified plugin classes can be loaded  
    4.check compression can be loaded  
    5.check encryption can be loaded  
    6.Verify compaction policy  
    7.check that we have at least 1 CF  
    8.check blockSize  
    9.check versions  
    10.check minVersions &lt;= maxVerions  
    11.check replication scope  
    12.check data replication factor, it can be 0(default value) when user has not explicitly set the value, in this case we use default replication factor set in the file system.  
    详细情况可以去查看源代码org.apache.hadoop.hbase.master.HMaster的方法sanityCheckTableDescriptor，  
    该代码位于hbase源码的模块hbase-server下  
    --&gt;</span>  
    <span class="hljs-tag">&lt;<span class="hljs-title">property</span>&gt;</span>  
        <span class="hljs-tag">&lt;<span class="hljs-title">name</span>&gt;</span>hbase.table.sanity.checks<span class="hljs-tag">&lt;/<span class="hljs-title">name</span>&gt;</span>  
        <span class="hljs-tag">&lt;<span class="hljs-title">value</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-title">value</span>&gt;</span>  
    <span class="hljs-tag">&lt;/<span class="hljs-title">property</span>&gt;</span>  
    <span class="hljs-comment">&lt;!--ZooKeeper 会话超时.HBase把这个值传递改zk集群，向他推荐一个会话的最大超时时间--&gt;</span>  
    <span class="hljs-tag">&lt;<span class="hljs-title">property</span>&gt;</span>  
    <span class="hljs-comment">&lt;!--every 30s,the master will check regionser is working --&gt;</span>  
        <span class="hljs-tag">&lt;<span class="hljs-title">name</span>&gt;</span>zookeeper.session.timeout<span class="hljs-tag">&lt;/<span class="hljs-title">name</span>&gt;</span>  
        <span class="hljs-tag">&lt;<span class="hljs-title">value</span>&gt;</span>30000<span class="hljs-tag">&lt;/<span class="hljs-title">value</span>&gt;</span>  
    <span class="hljs-tag">&lt;/<span class="hljs-title">property</span>&gt;</span>  
    <span class="hljs-comment">&lt;!--     Hbase的外置zk集群时，使用下面的zk端口。因为我这5台机子打算都安装hbase，所以都指定zookeeper。  
                有个问题就是，hbase和hadoop使用同一个zookeeper，是否可以，这样如果某台服务器上的某个应用挂了，zookeeper会不会认错。  
                把这个机子上挂的A应用误会成B应用呢  
     --&gt;</span>  
    <span class="hljs-tag">&lt;<span class="hljs-title">property</span>&gt;</span>  
        <span class="hljs-tag">&lt;<span class="hljs-title">name</span>&gt;</span>hbase.zookeeper.quorum<span class="hljs-tag">&lt;/<span class="hljs-title">name</span>&gt;</span>  
        <span class="hljs-tag">&lt;<span class="hljs-title">value</span>&gt;</span>lk:2181,slave2:2181,slave3:2181,slave4:2181,slave5:2181<span class="hljs-tag">&lt;/<span class="hljs-title">value</span>&gt;</span>  
    <span class="hljs-tag">&lt;/<span class="hljs-title">property</span>&gt;</span>  
    <span class="hljs-tag">&lt;<span class="hljs-title">property</span>&gt;</span>  
        <span class="hljs-tag">&lt;<span class="hljs-title">name</span>&gt;</span>hbase.zookeeper.property.dataDir<span class="hljs-tag">&lt;/<span class="hljs-title">name</span>&gt;</span>  
        <span class="hljs-tag">&lt;<span class="hljs-title">value</span>&gt;</span>/tmp/zookeeper/data<span class="hljs-tag">&lt;/<span class="hljs-title">value</span>&gt;</span>  
    <span class="hljs-tag">&lt;/<span class="hljs-title">property</span>&gt;</span>  
<span class="hljs-tag">&lt;/<span class="hljs-title">configuration</span>&gt;</span></code></pre>

<p>上面的文件中，只是设置的lk（10.113.10.1）为master，应该还要设置slave2为备用（下面的backup-masters）</p>

<ul>
<li>conf/backup-masters</li>
</ul>

<p>添加slave2为备用master <br>
新建文件backup-masters</p>



<pre class="prettyprint"><code class=" hljs erlang"><span class="hljs-function"><span class="hljs-title">slave2</span><span class="hljs-params">(或者是<span class="hljs-variable">IP</span>地址)</span></span></code></pre>

<p>保存退出即可</p>

<ul>
<li>conf/regionservers</li>
</ul>



<pre class="prettyprint"><code class=" hljs ">slave3
slave4
slave5</code></pre>



<h3 id="启动hbase">启动hbase</h3>



<pre class="prettyprint"><code class=" hljs sql"><span class="hljs-operator"><span class="hljs-keyword">start</span>-hbase.sh</span></code></pre>

<p><img src="index_files/0d80008f-d189-44dd-b464-4359e073cc78.png" alt="" title=""></p>

<p>然后在各个机器上看进程   <code>jps</code></p>

<ul>
<li><p>master <br>
<img src="index_files/2323e635-0de4-4286-bb9f-2a37d1be97f8.png" alt="" title=""></p></li>
<li><p>regionserver <br>
<img src="index_files/bb1fcd0a-873a-4cbc-b6c6-7ff27daa8522.png" alt="" title=""></p></li>
<li><p>网页查看</p></li>
</ul>

<p><img src="index_files/12288c06-4a1e-4a5e-8737-48bc0acb86bb.png" alt="" title=""></p>

<p>此时lk成了backup，slave2成了master</p>

<p>在网页上可以查看所有任务，日志，软件信息等等数据 <br>
<img src="index_files/3de4a986-78f1-4d9d-a50a-971342c3881e.png" alt="" title=""></p>



<h3 id="来一点小测试">来一点小测试</h3>

<ul>
<li>连接hbase shell</li>
</ul>

<p><code>hbase shell</code></p>

<p><img src="index_files/c43aca42-023b-4ee2-a806-b004411b3735.png" alt="" title=""></p>

<ul>
<li>创建一个表和一个列 <br>
<code>create 'test2', 'cf2'</code></li>
</ul>

<p><img src="index_files/3b00d3b0-8784-4ffc-89cf-e23586f6b09a.png" alt="" title=""></p>

<ul>
<li>插入数据</li>
</ul>



<pre class="prettyprint"><code class=" hljs livecodeserver"><span class="hljs-built_in">put</span> <span class="hljs-string">'test2'</span>, <span class="hljs-string">'row1'</span>, <span class="hljs-string">'cf2:a'</span>, <span class="hljs-string">'value1'</span>
<span class="hljs-built_in">put</span> <span class="hljs-string">'test2'</span>, <span class="hljs-string">'row2'</span>, <span class="hljs-string">'cf2:b'</span>, <span class="hljs-string">'value2'</span>
<span class="hljs-built_in">put</span> <span class="hljs-string">'test2'</span>, <span class="hljs-string">'row3'</span>, <span class="hljs-string">'cf2:c'</span>, <span class="hljs-string">'value3'</span></code></pre>

<p><img src="index_files/4357b198-5295-4090-9597-191bb12f8250.png" alt="" title=""></p>

<ul>
<li>查看 <br>
<code>scan 'test2'</code></li>
</ul>

<p><img src="index_files/20baa6a2-c122-4549-ba4d-0cf9589d7aa7.png" alt="" title=""></p>

<ul>
<li><p>获取一行数据 <br>
<code>get 'test2', 'row1'</code> <br>
<img src="index_files/3a7ecea4-78e2-4994-9740-e0a66afe81bd.png" alt="" title=""></p></li>
<li><p>删除表格 <br>
先disable然后drop</p></li>
</ul>



<pre class="prettyprint"><code class=" hljs rust">disable <span class="hljs-string">'test2'</span>
<span class="hljs-keyword">drop</span> <span class="hljs-string">'test2'</span></code></pre>

<p><img src="index_files/ac5ae4c3-bed8-4f42-9503-de954ca76804.png" alt="" title=""></p>

<ul>
<li><p>退出 <br>
<code>exit</code></p></li>
<li><p>停止hbase <br>
<code>stop-hbase.sh</code></p></li>
</ul>



<h3 id="产生问题">产生问题</h3>

<ul>
<li>重复SLF4J</li>
</ul>



<pre class="prettyprint"><code class=" hljs avrasm"><span class="hljs-label">SLF4J:</span> Class path contains multiple SLF4J bindings.
<span class="hljs-label">SLF4J:</span> Found binding <span class="hljs-keyword">in</span> [jar:file:/usr/hadoop/app/hbase/lib/slf4j-log4j12-<span class="hljs-number">1.7</span><span class="hljs-number">.5</span><span class="hljs-preprocessor">.jar</span>!/org/slf4j/impl/StaticLoggerBinder<span class="hljs-preprocessor">.class</span>]
<span class="hljs-label">SLF4J:</span> Found binding <span class="hljs-keyword">in</span> [jar:file:/usr/hadoop/share/hadoop/common/lib/slf4j-log4j12-<span class="hljs-number">1.7</span><span class="hljs-number">.10</span><span class="hljs-preprocessor">.jar</span>!/org/slf4j/impl/StaticLoggerBinder<span class="hljs-preprocessor">.class</span>]</code></pre>

<p>发生jar包的冲突，删除一个就行</p>

<ul>
<li>显示不能加载本地hadoop库</li>
</ul>



<pre class="prettyprint"><code class=" hljs livecodeserver"><span class="hljs-number">2017</span>-<span class="hljs-number">11</span>-<span class="hljs-number">09</span> <span class="hljs-number">07</span>:<span class="hljs-number">58</span>:<span class="hljs-number">06</span>,<span class="hljs-number">282</span> WARN  [main] util.NativeCodeLoader: Unable <span class="hljs-built_in">to</span> <span class="hljs-built_in">load</span> native-hadoop library <span class="hljs-keyword">for</span> your <span class="hljs-built_in">platform</span>... <span class="hljs-keyword">using</span> builtin-java classes where applicable
HBase Shell; enter <span class="hljs-string">'help&lt;RETURN&gt;'</span> <span class="hljs-keyword">for</span> list <span class="hljs-operator">of</span> supported commands.
Type <span class="hljs-string">"exit&lt;RETURN&gt;"</span> <span class="hljs-built_in">to</span> leave <span class="hljs-operator">the</span> HBase Shell
Version <span class="hljs-number">1.2</span><span class="hljs-number">.6</span>, rUnknown, Mon May <span class="hljs-number">29</span> <span class="hljs-number">02</span>:<span class="hljs-number">25</span>:<span class="hljs-number">32</span> CDT <span class="hljs-number">2017</span></code></pre>

<p>显示不能加载本地hadoop库</p>

<p>通过上网查找资料 <br>
在/etc/profile中添加<code>JAVA_LIBRARY_PATH</code></p>

<p><code>export JAVA_LIBRARY_PATH=/usr/hadoop/app/hadoop/lib/native</code></p>

<p><img src="index_files/aa440609-52a6-431a-882f-38b26af0dcb2.png" alt="" title=""> <br>
问题解决</p>

<ul>
<li>要把hadoop的hdfs-site.xml和core-site.xml 放到hbase/conf下 <br>
具体会报什么错不记得了</li>
</ul>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>