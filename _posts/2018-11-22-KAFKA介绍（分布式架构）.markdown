---
layout:     post
title:      KAFKA介绍（分布式架构）
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<h4 style="font-size:14px;color:rgb(94,94,94);font-family:Verdana, Helvetica, Arial;text-align:justify;">
介绍</h4>
<p style="color:rgb(94,94,94);font-family:Verdana, Helvetica, Arial;font-size:13px;text-align:justify;">
Kafka是一个分布式的、可分区的、可复制的消息系统。它提供了普通消息系统的功能，但具有自己独特的设计。这个独特的设计是什么样的呢？</p>
<p style="color:rgb(94,94,94);font-family:Verdana, Helvetica, Arial;font-size:13px;text-align:justify;">
首先让我们看几个基本的消息系统术语：</p>
<ul style="list-style:none;margin-left:30px;color:rgb(94,94,94);font-family:Verdana, Helvetica, Arial;font-size:13px;text-align:justify;"><li style="list-style-type:disc;">
<p>Kafka将消息以<strong>topic</strong>为单位进行归纳。</p>
</li><li style="list-style-type:disc;">
<p>将向Kafka topic发布消息的程序成为<strong>producers</strong>.</p>
</li><li style="list-style-type:disc;">
<p>将预订topics并消费消息的程序成为<strong>consumer</strong>.</p>
</li><li style="list-style-type:disc;">
<p>Kafka以集群的方式运行，可以由一个或多个服务组成，每个服务叫做一个<strong>broker</strong>.</p>
</li></ul><p style="color:rgb(94,94,94);font-family:Verdana, Helvetica, Arial;font-size:13px;text-align:justify;">
producers通过网络将消息发送到Kafka集群，集群向消费者提供消息，如下图所示：</p>
<p style="color:rgb(94,94,94);font-family:Verdana, Helvetica, Arial;font-size:13px;text-align:justify;">
<a href="http://static.oschina.net/uploads/img/201603/21201436_wFSE.png" rel="nofollow" style="color:rgb(141,140,140);"></a></p>
<p style="color:rgb(94,94,94);font-family:Verdana, Helvetica, Arial;font-size:13px;text-align:justify;">
客户端和服务端通过TCP协议通信。Kafka提供了Java客户端，并且对多种语言都提供了支持。</p>
<p style="color:rgb(94,94,94);font-family:Verdana, Helvetica, Arial;font-size:13px;text-align:justify;">
<strong> Topics 和Logs</strong></p>
<p style="color:rgb(94,94,94);font-family:Verdana, Helvetica, Arial;font-size:13px;text-align:justify;">
先来看一下Kafka提供的一个抽象概念:topic.</p>
<p style="color:rgb(94,94,94);font-family:Verdana, Helvetica, Arial;font-size:13px;text-align:justify;">
一个topic是对一组消息的归纳。对每个topic，Kafka 对它的日志进行了分区，如下图所示：</p>
<p style="color:rgb(94,94,94);font-family:Verdana, Helvetica, Arial;font-size:13px;text-align:justify;">
<a href="http://static.oschina.net/uploads/img/201603/21201436_wT7x.png" rel="nofollow" style="color:rgb(141,140,140);"></a></p>
<p style="color:rgb(94,94,94);font-family:Verdana, Helvetica, Arial;font-size:13px;text-align:justify;">
每个分区都由一系列有序的、不可变的消息组成，这些消息被连续的追加到分区中。分区中的每个消息都有一个连续的序列号叫做offset,用来在分区中唯一的标识这个消息。</p>
<p style="color:rgb(94,94,94);font-family:Verdana, Helvetica, Arial;font-size:13px;text-align:justify;">
 </p>
<p style="color:rgb(94,94,94);font-family:Verdana, Helvetica, Arial;font-size:13px;text-align:justify;">
在一个可配置的时间段内，Kafka集群保留所有发布的消息，不管这些消息有没有被消费。比如，如果消息的保存策略被设置为2天，那么在一个消 息被发布的两天时间内，它都是可以被消费的。之后它将被丢弃以释放空间。Kafka的性能是和数据量无关的常量级的，所以保留太多的数据并不是问题。</p>
<p style="color:rgb(94,94,94);font-family:Verdana, Helvetica, Arial;font-size:13px;text-align:justify;">
 </p>
<p style="color:rgb(94,94,94);font-family:Verdana, Helvetica, Arial;font-size:13px;text-align:justify;">
实际上每个consumer唯一需要维护的数据是消息在日志中的位置，也就是offset.这个offset有consumer来维护：一般情 况下随着consumer不断的读取消息，这offset的值不断增加，但其实consumer可以以任意的顺序读取消息，比如它可以将offset设置 成为一个旧的值来重读之前的消息。</p>
<p style="color:rgb(94,94,94);font-family:Verdana, Helvetica, Arial;font-size:13px;text-align:justify;">
 </p>
<p style="color:rgb(94,94,94);font-family:Verdana, Helvetica, Arial;font-size:13px;text-align:justify;">
以上特点的结合，使Kafka consumers非常的轻量级：它们可以在不对集群和其他consumer造成影响的情况下读取消息。你可以使用命令行来"tail"消息而不会对其他正在消费消息的consumer造成影响。</p>
<p style="color:rgb(94,94,94);font-family:Verdana, Helvetica, Arial;font-size:13px;text-align:justify;">
 </p>
<p style="color:rgb(94,94,94);font-family:Verdana, Helvetica, Arial;font-size:13px;text-align:justify;">
将日志分区可以达到以下目的：首先这使得每个日志的数量不会太大，可以在单个服务上保存。另外每个分区可以单独发布和消费，为并发操作topic提供了一种可能。</p>
<h4 style="font-size:14px;color:rgb(94,94,94);font-family:Verdana, Helvetica, Arial;text-align:justify;">
分布式</h4>
<p style="color:rgb(94,94,94);font-family:Verdana, Helvetica, Arial;font-size:13px;text-align:justify;">
每个分区在Kafka集群的若干服务中都有副本，这样这些持有副本的服务可以共同处理数据和请求，副本数量是可以配置的。副本使Kafka具备了容错能力。</p>
<p style="color:rgb(94,94,94);font-family:Verdana, Helvetica, Arial;font-size:13px;text-align:justify;">
每个分区都由一个服务器作为“leader”，零或若干服务器作为“followers”,leader负责处理消息的读和 写，followers则去复制leader.如果leader down了，followers中的一台则会自动成为leader。集群中的每个服务都会同时扮演两个角色：作为它所持有的一部分分区的leader，同 时作为其他分区的followers，这样集群就会据有较好的负载均衡。</p>
<h4 style="font-size:14px;color:rgb(94,94,94);font-family:Verdana, Helvetica, Arial;text-align:justify;">
Producers</h4>
<h4 style="font-size:14px;color:rgb(94,94,94);font-family:Verdana, Helvetica, Arial;text-align:justify;">
Producer将消息发布到它指定的topic中,并负责决定发布到哪个分区。通常简单的由负载均衡机制随机选择分区，但也可以通过特定的分区函数选择分区。使用的更多的是第二种。</h4>
<h4 style="font-size:14px;color:rgb(94,94,94);font-family:Verdana, Helvetica, Arial;text-align:justify;">
<a>Consumers</a></h4>
<h4 style="font-size:14px;color:rgb(94,94,94);font-family:Verdana, Helvetica, Arial;text-align:justify;">
发布消息通常有两种模式：队列模式和发布-订阅模式。队列模式中，consumers可以同时从服务端读取消息，每个消息只被其中一个consumer读到；发布-订阅模式中消息被广播到所有的consumer中。</h4>
<h4 style="font-size:14px;color:rgb(94,94,94);font-family:Verdana, Helvetica, Arial;text-align:justify;">
Consumers可以加入一个consumer 组，共同竞争一个topic，topic中的消息将被分发到组中的一个成员中。同一组中的consumer可以在不同的程序中，也可以在不同的机器上。如果所有的consumer都在一个组中，这就成为了传统的队列模式，在各consumer中实现负载均衡。</h4>
<h4 style="font-size:14px;color:rgb(94,94,94);font-family:Verdana, Helvetica, Arial;text-align:justify;">
如果所有的consumer都不在不同的组中，这就成为了发布-订阅模式，所有的消息都被分发到所有的consumer中。</h4>
<p style="color:rgb(94,94,94);font-family:Verdana, Helvetica, Arial;font-size:13px;text-align:justify;">
更常见的是，每个topic都有若干数量的consumer组，每个组都是一个逻辑上的“订阅者”，为了容错和更好的稳定性，每个组由若干consumer组成。这其实就是一个发布-订阅模式，只不过订阅者是个组而不是单个consumer。</p>
<p style="color:rgb(94,94,94);font-family:Verdana, Helvetica, Arial;font-size:13px;text-align:justify;">
<a href="http://static.oschina.net/uploads/img/201603/21201436_zHio.png" rel="nofollow" style="color:rgb(141,140,140);"></a></p>
<p style="color:rgb(94,94,94);font-family:Verdana, Helvetica, Arial;font-size:13px;text-align:justify;">
由两个机器组成的集群拥有4个分区 (P0-P3) 2个consumer组. A组有两个consumerB组有4个</p>
<p style="color:rgb(94,94,94);font-family:Verdana, Helvetica, Arial;font-size:13px;text-align:justify;">
 </p>
<p style="color:rgb(94,94,94);font-family:Verdana, Helvetica, Arial;font-size:13px;text-align:justify;">
相比传统的消息系统，Kafka可以很好的保证有序性。</p>
<p style="color:rgb(94,94,94);font-family:Verdana, Helvetica, Arial;font-size:13px;text-align:justify;">
传统的队列在服务器上保存有序的消息，如果多个consumers同时从这个服务器消费消息，服务器就会以消息存储的顺序向consumer分 发消息。虽然服务器按顺序发布消息，但是消息是被异步的分发到各consumer上，所以当消息到达时可能已经失去了原来的顺序，这意味着并发消费将导致 顺序错乱。为了避免故障，这样的消息系统通常使用“专用consumer”的概念，其实就是只允许一个消费者消费消息，当然这就意味着失去了并发性。</p>
<p style="color:rgb(94,94,94);font-family:Verdana, Helvetica, Arial;font-size:13px;text-align:justify;">
 </p>
<p style="color:rgb(94,94,94);font-family:Verdana, Helvetica, Arial;font-size:13px;text-align:justify;">
在这方面Kafka做的更好，通过分区的概念，Kafka可以在多个consumer组并发的情况下提供较好的有序性和负载均衡。将每个分区分 只分发给一个consumer组，这样一个分区就只被这个组的一个consumer消费，就可以顺序的消费这个分区的消息。因为有多个分区，依然可以在多 个consumer组之间进行负载均衡。注意consumer组的数量不能多于分区的数量，也就是有多少分区就允许多少并发消费。</p>
<p style="color:rgb(94,94,94);font-family:Verdana, Helvetica, Arial;font-size:13px;text-align:justify;">
 </p>
<p style="color:rgb(94,94,94);font-family:Verdana, Helvetica, Arial;font-size:13px;text-align:justify;">
Kafka只能保证一个分区之内消息的有序性，在不同的分区之间是不可以的，这已经可以满足大部分应用的需求。如果需要topic中所有消息的有序性，那就只能让这个topic只有一个分区，当然也就只有一个consumer组消费它。</p>
<p style="color:rgb(94,94,94);font-family:Verdana, Helvetica, Arial;font-size:13px;text-align:justify;">
<br></p>
<p style="color:rgb(94,94,94);font-family:Verdana, Helvetica, Arial;font-size:13px;text-align:justify;">
<span style="color:rgb(94,94,94);font-family:Verdana, Helvetica, Arial;font-size:13px;text-align:justify;"> </span><a href="http://www.cnblogs.com/dreamworldhuhu/tag/kafka/" rel="nofollow" style="color:rgb(141,140,140);font-family:Verdana, Helvetica, Arial;font-size:13px;text-align:justify;">kafka</a><span style="color:rgb(94,94,94);font-family:Verdana, Helvetica, Arial;font-size:13px;text-align:justify;">, </span><a href="http://www.cnblogs.com/dreamworldhuhu/tag/Kafka%E5%88%86%E5%B8%83%E5%BC%8F%E6%B6%88%E6%81%AF/" rel="nofollow" style="color:rgb(141,140,140);font-family:Verdana, Helvetica, Arial;font-size:13px;text-align:justify;">Kafka分布式消息</a><span style="color:rgb(94,94,94);font-family:Verdana, Helvetica, Arial;font-size:13px;text-align:justify;">, </span><a href="http://www.cnblogs.com/dreamworldhuhu/tag/Kafka%E5%88%86%E5%B8%83%E5%BC%8F%E6%B6%88%E6%81%AF%E7%B3%BB%E7%BB%9F/" rel="nofollow" style="color:rgb(141,140,140);font-family:Verdana, Helvetica, Arial;font-size:13px;text-align:justify;">Kafka分布式消息系统</a><span style="color:rgb(94,94,94);font-family:Verdana, Helvetica, Arial;font-size:13px;text-align:justify;">, </span><a href="http://www.cnblogs.com/dreamworldhuhu/tag/Kafka%E9%9B%86%E7%BE%A4/" rel="nofollow" style="color:rgb(141,140,140);font-family:Verdana, Helvetica, Arial;font-size:13px;text-align:justify;">Kafka集群</a><span style="color:rgb(94,94,94);font-family:Verdana, Helvetica, Arial;font-size:13px;text-align:justify;">, </span><a href="http://www.cnblogs.com/dreamworldhuhu/tag/SpringMVC%2BMybatis/" rel="nofollow" style="color:rgb(141,140,140);font-family:Verdana, Helvetica, Arial;font-size:13px;text-align:justify;">SpringMVC+Mybatis</a><span style="color:rgb(94,94,94);font-family:Verdana, Helvetica, Arial;font-size:13px;text-align:justify;">, </span><a href="http://www.cnblogs.com/dreamworldhuhu/tag/dubbo%2Bzookeeper/" rel="nofollow" style="color:rgb(141,140,140);font-family:Verdana, Helvetica, Arial;font-size:13px;text-align:justify;">dubbo+zookeeper</a><span style="color:rgb(94,94,94);font-family:Verdana, Helvetica, Arial;font-size:13px;text-align:justify;">, </span><a href="http://www.cnblogs.com/dreamworldhuhu/tag/java%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84/" rel="nofollow" style="color:rgb(141,140,140);font-family:Verdana, Helvetica, Arial;font-size:13px;text-align:justify;">java分布式架构</a><br></p>
            </div>
                </div>