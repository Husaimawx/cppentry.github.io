---
layout:     post
title:      大数据学习[10]:Kafka新手入门
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<p></p><center><img src="https://img-blog.csdn.net/20170927225112589?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGQzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title=""></center> <br>
摘要：主要是学习Kafka文档，对Kafka官网的Quickstart进行了阅读并试着翻译。 <br>
来源：<a href="http://kafka.apache.org/quickstart" rel="nofollow" target="_blank">http://kafka.apache.org/quickstart</a><p></p>



<h3 id="quickstart">Quickstart</h3>



<h3 id="快速入门">快速入门</h3>

<p>This tutorial assumes you are starting fresh and have no existing Kafka or ZooKeeper data. Since Kafka console scripts are different for Unix-based and Windows platforms, on Windows platforms use bin\windows\ instead of bin/, and change the script extension to .bat. <br>
这个教程假设你是刚开始学习的新手，没有Kafka或Zookeeper数据。由于Kafka的控制台脚本对于Unix与Windows平台是不同的，在Windows平台上采用bin\windows目录下而不是bin/目录，要把脚本换成.bat的扩展名。</p>



<h4 id="step-1-download-the-code">Step 1: Download the code</h4>

<p>Download the 0.11.0.1 release and un-tar it.</p>



<h4 id="第一步下载代码">第一步：下载代码</h4>

<p>下载0.11.1.1版本与解压</p>



<pre class="prettyprint"><code class=" hljs markdown"><span class="hljs-blockquote">&gt; tar -xzf kafka_2.11-0.11.0.1.tgz</span>
<span class="hljs-blockquote">&gt; cd kafka_2.11-0.11.0.1</span></code></pre>



<h4 id="step-2-start-the-server">Step 2: Start the server</h4>

<p>Kafka uses ZooKeeper so you need to first start a ZooKeeper server if you don’t already have one. You can use the convenience script packaged with kafka to get a quick-and-dirty single-node ZooKeeper instance.</p>



<h4 id="第二步启动服务">第二步：启动服务</h4>

<p>因为Kafka运行需要Zookeeper,所以如果你没有启动ZooKeeper服务，首先要启动它。也可以使用kafka的简便脚本去获得一个临时凑合的单节点ZooKeeper 实例。</p>



<pre class="prettyprint"><code class=" hljs r"> &gt; bin/zookeeper-server-start.sh config/zookeeper.properties[<span class="hljs-number">2013</span>-<span class="hljs-number">04</span>-<span class="hljs-number">22</span> <span class="hljs-number">15</span>:<span class="hljs-number">01</span>:<span class="hljs-number">37</span>,<span class="hljs-number">495</span>] INFO Reading configuration from: config/zookeeper.properties (org.apache.zookeeper.server.quorum.QuorumPeerConfig)<span class="hljs-keyword">...</span></code></pre>

<p>Now start the Kafka server: <br>
现在开启Kafaka服务：</p>



<pre class="prettyprint"><code class=" hljs r"><span class="hljs-number">1234</span> &gt; bin/kafka-server-start.sh config/server.properties[<span class="hljs-number">2013</span>-<span class="hljs-number">04</span>-<span class="hljs-number">22</span> <span class="hljs-number">15</span>:<span class="hljs-number">01</span>:<span class="hljs-number">47</span>,<span class="hljs-number">028</span>] INFO Verifying properties (kafka.utils.VerifiableProperties)[<span class="hljs-number">2013</span>-<span class="hljs-number">04</span>-<span class="hljs-number">22</span> <span class="hljs-number">15</span>:<span class="hljs-number">01</span>:<span class="hljs-number">47</span>,<span class="hljs-number">051</span>] INFO Property socket.send.buffer.bytes is overridden to <span class="hljs-number">1048576</span> (kafka.utils.VerifiableProperties)<span class="hljs-keyword">...</span></code></pre>



<h4 id="step-3-create-a-topic">Step 3: Create a topic</h4>

<p>Let’s create a topic named “test” with a single partition and only one replica:</p>



<h4 id="第三步创建一个主题">第三步：创建一个主题</h4>

<p>创建一个名为test的主题，只有一个分区与一个副本：</p>



<pre class="prettyprint"><code class=" hljs brainfuck">&gt; <span class="hljs-comment">bin/kafka</span><span class="hljs-literal">-</span><span class="hljs-comment">topics</span><span class="hljs-string">.</span><span class="hljs-comment">sh</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">create</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">zookeeper</span> <span class="hljs-comment">localhost:2181</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">replication</span><span class="hljs-literal">-</span><span class="hljs-comment">factor</span> <span class="hljs-comment">1</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">partitions</span> <span class="hljs-comment">1</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">topic</span> <span class="hljs-comment">test</span></code></pre>

<p>We can now see that topic if we run the list topic command: <br>
如果运行列出主题命令，可以看到这个主题：</p>



<pre class="prettyprint"><code class=" hljs brainfuck">&gt; <span class="hljs-comment">bin/kafka</span><span class="hljs-literal">-</span><span class="hljs-comment">topics</span><span class="hljs-string">.</span><span class="hljs-comment">sh</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">list</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">zookeeper</span> <span class="hljs-comment">localhost:2181</span>
<span class="hljs-comment">test</span>
</code></pre>

<p>Alternatively, instead of manually creating topics you can also configure your brokers to auto-create topics when a non-existent topic is published to. <br>
或者，不是想手动去创建主题，也可以通过配置kafka的broker来实现，当主题没有发布时，会自动创建主题；</p>



<h4 id="step-4-send-some-messages">Step 4: Send some messages</h4>

<p>Kafka comes with a command line client that will take input from a file or from standard input and send it out as messages to the Kafka cluster. By default, each line will be sent as a separate message. <br>
Run the producer and then type a few messages into the console to send to the server.</p>



<h4 id="第四步发送信息">第四步：发送信息</h4>

<p>Kafka自带一个命令行客户端，可以接受来自文件和标准输入，并将接收到的内容作为信息发送到Kafka集群中。在默认的情况下，一行作为一条单独信息发送。 <br>
运行生产者然后在控制台输入几条信息信息发送给服务.</p>



<pre class="prettyprint"><code class=" hljs vhdl">&gt; bin/kafka-console-producer.sh <span class="hljs-comment">--broker-list localhost:9092 --topic test</span>
This <span class="hljs-keyword">is</span> a message
This <span class="hljs-keyword">is</span> another message</code></pre>



<h4 id="step-5-start-a-consumer">Step 5: Start a consumer</h4>

<p>Kafka also has a command line consumer that will dump out messages to standard output.</p>



<h4 id="第五步启动消费者">第五步：启动消费者</h4>

<p>Kafka也有一个命令的消费者，当启动消费者，信息将会从标准输出显示出来。</p>



<pre class="prettyprint"><code class=" hljs lasso"><span class="hljs-subst">&gt;</span> bin/kafka<span class="hljs-attribute">-console</span><span class="hljs-attribute">-consumer</span><span class="hljs-built_in">.</span>sh <span class="hljs-subst">--</span>bootstrap<span class="hljs-attribute">-server</span> localhost:<span class="hljs-number">9092</span> <span class="hljs-subst">--</span>topic test <span class="hljs-subst">--</span>from<span class="hljs-attribute">-beginning</span>
This is a message
This is another message</code></pre>

<p>If you have each of the above commands running in a different terminal then you should now be able to type messages into the producer terminal and see them appear in the consumer terminal. <br>
All of the command line tools have additional options; running the command with no arguments will display usage information documenting them in more detail. <br>
如果以上的生产者命令与消费者命令分别运行在不同的终端上，那么你可以在生产者终端上输入信息同时可以看到在消息者终端上出现。 <br>
所有的命令行工具都有其它的选项，运行不带参数的命令时，将会显示使用信息文档。</p>



<h4 id="step-6-setting-up-a-multi-broker-cluster">Step 6: Setting up a multi-broker cluster</h4>

<p>So far we have been running against a single broker, but that’s  get feel for . For Kafka, a single broker is just a cluster of size one, so nothing much changes other than starting a few more broker instances. But just to get feel for it, let’s expand our cluster to three nodes (still all on our local machine). <br>
First we make a config file for each of the brokers (on Windows use the copy command instead):</p>



<h4 id="第六步配置多broker集群">第六步：配置多broker集群</h4>

<p>现在已经可以运行单broker，但没劲。对于Kafka，单个broker只不过是节点数据为1的集群，与运行多节点没有太大的差别。当我们意识到这个的时候，让我们去扩展集群到三个节点。</p>



<pre class="prettyprint"><code class=" hljs axapta">&gt; cp config/<span class="hljs-keyword">server</span>.properties config/<span class="hljs-keyword">server</span>-<span class="hljs-number">1.</span>properties
&gt; cp config/<span class="hljs-keyword">server</span>.properties config/<span class="hljs-keyword">server</span>-<span class="hljs-number">2.</span>properties</code></pre>

<p>Now edit these new files and set the following properties: <br>
现在编辑这些新文件如下属性设置：</p>



<pre class="prettyprint"><code class=" hljs ruby">config/server-<span class="hljs-number">1</span>.<span class="hljs-symbol">properties:</span>    
    broker.id=<span class="hljs-number">1</span>    
    listeners=<span class="hljs-constant">PLAINTEXT</span><span class="hljs-symbol">://</span><span class="hljs-symbol">:</span><span class="hljs-number">9093</span>    
    log.dir=<span class="hljs-regexp">/tmp/kafka</span>-logs-<span class="hljs-number">1</span> 
config/server-<span class="hljs-number">2</span>.<span class="hljs-symbol">properties:</span>    
    broker.id=<span class="hljs-number">2</span>    
    listeners=<span class="hljs-constant">PLAINTEXT</span><span class="hljs-symbol">://</span><span class="hljs-symbol">:</span><span class="hljs-number">9094</span>    
    log.dir=<span class="hljs-regexp">/tmp/kafka</span>-logs-<span class="hljs-number">2</span></code></pre>

<p>The broker.id property is the unique and permanent name of each node in the cluster. We have to override the port and log directory only because we are running these all on the same machine and we want to keep the brokers from all trying to register on the same port or overwrite each other’s data. <br>
We already have Zookeeper and our single node started, so we just need to start the two new nodes: <br>
broker.id是集群中每个节点唯一的不变的名字。覆盖默认[这里指上面运行的单节点设置]，设置端口与日志路径，因为要在一台机器上运行这些，这样设置可以防止所有节点试着去注册同一商品或覆盖数据。 <br>
已经有Zookeeper与一个节点已经运行了，现在只需要开两个新节点就可以了。</p>



<pre class="prettyprint"><code class=" hljs r">&gt; bin/kafka-server-start.sh config/server-<span class="hljs-number">1.</span>properties &amp;
<span class="hljs-keyword">...</span>
&gt; bin/kafka-server-start.sh config/server-<span class="hljs-number">2.</span>properties &amp;
&gt;<span class="hljs-keyword">...</span></code></pre>

<p>Now create a new topic with a replication factor of three: <br>
现在创建一个带有三份副本的新主题：</p>



<pre class="prettyprint"><code class=" hljs brainfuck">&gt; <span class="hljs-comment">bin/kafka</span><span class="hljs-literal">-</span><span class="hljs-comment">topics</span><span class="hljs-string">.</span><span class="hljs-comment">sh</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">create</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">zookeeper</span> <span class="hljs-comment">localhost:2181</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">replication</span><span class="hljs-literal">-</span><span class="hljs-comment">factor</span> <span class="hljs-comment">3</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">partitions</span> <span class="hljs-comment">1</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">topic</span> <span class="hljs-comment">my</span><span class="hljs-literal">-</span><span class="hljs-comment">replicated</span><span class="hljs-literal">-</span><span class="hljs-comment">topic</span></code></pre>

<p>Okay but now that we have a cluster how can we know which broker is doing what? To see that run the “describe topics” command: <br>
好了，现在我们有了一个集群，可是我们怎么broker是怎样工作的和正在做什么呢？运行行describe topics命令去查看：</p>



<pre class="prettyprint"><code class=" hljs lasso"><span class="hljs-subst">&gt;</span> bin/kafka<span class="hljs-attribute">-topics</span><span class="hljs-built_in">.</span>sh <span class="hljs-subst">--</span>describe <span class="hljs-subst">--</span>zookeeper localhost:<span class="hljs-number">2181</span> <span class="hljs-subst">--</span>topic my<span class="hljs-attribute">-replicated</span><span class="hljs-attribute">-topicTopic</span>:my<span class="hljs-attribute">-replicated</span><span class="hljs-attribute">-topic</span>   PartitionCount:<span class="hljs-number">1</span>    ReplicationFactor:<span class="hljs-number">3</span> Configs:    Topic: my<span class="hljs-attribute">-replicated</span><span class="hljs-attribute">-topic</span>  Partition: <span class="hljs-number">0</span>    Leader: <span class="hljs-number">1</span>   Replicas: <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span> Isr: <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span></code></pre>

<p>Here is an explanation of output. The first line gives a summary of all the partitions, each additional line gives information about one partition. Since we have only one partition for this topic there is only one line. <br>
  ● “leader” is the node responsible for all reads and writes for the given partition. Each node will be the leader for a randomly selected portion of the partitions. <br>
  ● “replicas” is the list of nodes that replicate the log for this partition regardless of whether they are the leader or even if they are currently alive. <br>
  ● “isr” is the set of “in-sync” replicas. This is the subset of the replicas list that is currently alive and caught-up to the leader. <br>
Note that in my example node 1 is the leader for the only partition of the topic. <br>
这里对输出解释一下，第一行给出了所有分区的汇总，下面的每一行表示一个分区的信息。由于我们对于这个topic只有一个分区，所于只有一行数据。 <br>
leader 是负责所有分区的读写的节点，在分区中随机选举成为leader. <br>
replicas是一系列节点，这些节点复制了些分区日志，不管它们是leader或还活动状态的。 <br>
isr是‘in-sync’副本的服务器集合，这样集合中的服务器目前处于活动状态，并与leader数据一致。 <br>
注意到在我们的例子中，对于主题分区节点1是leader。 <br>
We can run the same command on the original topic we created to see where it is: <br>
我们可以在创建原主题运行同样的命令，看看是不是这样：</p>



<pre class="prettyprint"><code class=" hljs brainfuck">&gt; <span class="hljs-comment">bin/kafka</span><span class="hljs-literal">-</span><span class="hljs-comment">topics</span><span class="hljs-string">.</span><span class="hljs-comment">sh</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">describe</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">zookeeper</span> <span class="hljs-comment">localhost:2181</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">topic</span> <span class="hljs-comment">testTopic:test</span>  <span class="hljs-comment">PartitionCount:1</span>    <span class="hljs-comment">ReplicationFactor:1</span> <span class="hljs-comment">Configs:</span>    <span class="hljs-comment">Topic:</span> <span class="hljs-comment">test</span> <span class="hljs-comment">Partition:</span> <span class="hljs-comment">0</span>    <span class="hljs-comment">Leader:</span> <span class="hljs-comment">0</span>   <span class="hljs-comment">Replicas:</span> <span class="hljs-comment">0</span> <span class="hljs-comment">Isr:</span> <span class="hljs-comment">0</span></code></pre>

<p>So there is no surprise there—the original topic has no replicas and is on server 0, the only server in our cluster when we created it. <br>
毫不惊讶，这个主题没有副本，在服务0上，在我们集群中唯一的一个服务。 <br>
Let’s publish a few messages to our new topic: <br>
让我们发布几条信息到我们新主题：</p>



<pre class="prettyprint"><code class=" hljs r">&gt; bin/kafka-console-producer.sh --broker-list localhost:<span class="hljs-number">9092</span> --topic my-replicated-topic
<span class="hljs-keyword">...</span>
my test message <span class="hljs-number">1</span>
my test message <span class="hljs-number">2</span>
^C</code></pre>

<p>Now let’s consume these messages: <br>
现在让我们消费这些信息：</p>



<pre class="prettyprint"><code class=" hljs r">&gt; bin/kafka-console-consumer.sh --bootstrap-server localhost:<span class="hljs-number">9092</span> --from-beginning --topic my-replicated-topic
&gt; <span class="hljs-keyword">...</span>
&gt; my test message <span class="hljs-number">1</span>
&gt; my test message <span class="hljs-number">2</span>
&gt; ^C</code></pre>

<p>Now let’s test out fault-tolerance. Broker 1 was acting as the leader so let’s kill it: <br>
现在让我们测试一下容错情况。Broker1充当着leader角色，所以把这个节点杀掉。</p>



<pre class="prettyprint"><code class=" hljs markdown"><span class="hljs-blockquote">&gt; ps aux | grep server-1.properties7564 ttys002    0:15.91 /System/Library/Frameworks/JavaVM.framework/Versions/1.8/Home/bin/java...</span>
<span class="hljs-blockquote">&gt; &gt; kill -9 7564</span></code></pre>

<p>On Windows use: <br>
在Windows系统使用：</p>



<pre class="prettyprint"><code class=" hljs r">&gt; wmic process get processid,caption,commandline | find <span class="hljs-string">"java.exe"</span> | find <span class="hljs-string">"server-1.properties"</span>java.exe    java  -Xmx1G -Xms1G -server -XX:+UseG1GC <span class="hljs-keyword">...</span> build\libs\kafka_2.11-<span class="hljs-number">0.11</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>.jar<span class="hljs-string">"  kafka.Kafka config\server-1.properties    644
&gt; taskkill /pid 644 /f</span></code></pre>

<p>Leadership has switched to one of the slaves and node 1 is no longer in the in-sync replica set: <br>
领导权已转向了slave节点中的其中一个了，节点1不在在in-sync的副本集合中了：</p>



<pre class="prettyprint"><code class=" hljs lasso"><span class="hljs-subst">&gt;</span> bin/kafka<span class="hljs-attribute">-topics</span><span class="hljs-built_in">.</span>sh <span class="hljs-subst">--</span>describe <span class="hljs-subst">--</span>zookeeper localhost:<span class="hljs-number">2181</span> <span class="hljs-subst">--</span>topic my<span class="hljs-attribute">-replicated</span><span class="hljs-attribute">-topicTopic</span>:my<span class="hljs-attribute">-replicated</span><span class="hljs-attribute">-topic</span>   PartitionCount:<span class="hljs-number">1</span>    ReplicationFactor:<span class="hljs-number">3</span> Configs:    Topic: my<span class="hljs-attribute">-replicated</span><span class="hljs-attribute">-topic</span>  Partition: <span class="hljs-number">0</span>    Leader: <span class="hljs-number">2</span>   Replicas: <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span> Isr: <span class="hljs-number">2</span>,<span class="hljs-number">0</span></code></pre>

<p>But the messages are still available for consumption even though the leader that took the writes originally is down: <br>
但这些信息仍然可被消费掉的，即使leader宕机了。</p>



<pre class="prettyprint"><code class=" hljs r">&gt; bin/kafka-console-consumer.sh --bootstrap-server localhost:<span class="hljs-number">9092</span> --from-beginning --topic my-replicated-topic
<span class="hljs-keyword">...</span>
my test message <span class="hljs-number">1</span>
my test message <span class="hljs-number">2</span>
^C</code></pre>



<h4 id="step-7-use-kafka-connect-to-importexport-data">Step 7: Use Kafka Connect to import/export data</h4>

<p>Writing data from the console and writing it back to the console is a convenient place to start, but you’ll probably want to use data from other sources or export data from Kafka to other systems. For many systems, instead of writing custom integration code you can use Kafka Connect to import or export data. <br>
Kafka Connect is a tool included with Kafka that imports and exports data to Kafka. It is an extensible tool that runs connectors, which implement the custom logic for interacting with an external system. In this quickstart we’ll see how to run Kafka Connect with simple connectors that import data from a file to a Kafka topic and export data from a Kafka topic to a file.</p>



<h4 id="第七步使用kafka连接导入导出数据">第七步：使用Kafka连接导入/导出数据</h4>

<p>从控制台输入数据和把数据写回控制台比较方便，但你可能想让数据从其它源导入进来或从Kafka把数据导出到其它系统中去。对于很多系统，你可以使用Kafka连接导入导出数据，而不是自己写代码来集成。Kafka连接是一个使用Kafka去导入导出工具，它是运行连接器的扩展工具，可以实现自定义的逻辑进行与外部系统交互。在这个入门教程中，我们将会看到怎样使用Kafka简单的连接器从文件中导入数据并从Kafka主题中导出数据到文件中。 <br>
First, we’ll start by creating some seed data to test with: <br>
首先，我们创建一些测试数据：</p>



<pre class="prettyprint"><code class=" hljs bash">&gt; <span class="hljs-built_in">echo</span> <span class="hljs-operator">-e</span> <span class="hljs-string">"foo\nbar"</span> &gt; test.txt</code></pre>

<p>Next, we’ll start two connectors running in standalone mode, which means they run in a single, local, dedicated process. We provide three configuration files as parameters. The first is always the configuration for the Kafka Connect process, containing common configuration such as the Kafka brokers to connect to and the serialization format for data. The remaining configuration files each specify a connector to create. These files include a unique connector name, the connector class to instantiate, and any other configuration required by the connector. <br>
然后，我们用standalone模式开启两个连接器，这意味着运行在单机本地的专用进程。我们提供三个配置文件作为参数。第一个依然是对于Kafka连接进程的配置，包含一些公共的配置例如broker的连接与数据可序列化形式。剩下来的两个参数分别指定一个连接的创建。这些文件包含着一个唯一连接名，这个连接类型的实例，和一些这些连接器所需的其它配置。</p>



<pre class="prettyprint"><code class=" hljs lasso">bin/connect<span class="hljs-attribute">-standalone</span><span class="hljs-built_in">.</span>sh config/connect<span class="hljs-attribute">-standalone</span><span class="hljs-built_in">.</span>properties config/connect<span class="hljs-attribute">-file</span><span class="hljs-attribute">-source</span><span class="hljs-built_in">.</span>properties config/connect<span class="hljs-attribute">-file</span><span class="hljs-attribute">-sink</span><span class="hljs-built_in">.</span>properties</code></pre>

<p>These sample configuration files, included with Kafka, use the default local cluster configuration you started earlier and create two connectors: the first is a source connector that reads lines from an input file and produces each to a Kafka topic and the second is a sink connector that reads messages from a Kafka topic and produces each as a line in an output file. <br>
During startup you’ll see a number of log messages, including some indicating that the connectors are being instantiated. Once the Kafka Connect process has started, the source connector should start reading lines from test.txt and producing them to the topic connect-test, and the sink connector should start reading messages from the topic connect-test and write them to the file test.sink.txt. We can verify the data has been delivered through the entire pipeline by examining the contents of the output file: <br>
这些样例配置文件，包含使用Kafka, 使用了刚开始时的默认本地集群配置，并创建了两个连接器：第一个是源连接器，从输入文件读取行数据和产生主题；第二个是一个sink连接器，从Kafka主题读取信息和将每一行输出到文件中。 <br>
在启动期间，你可以看到大量的日志信息，包括这些连接器被实现化的提示信息。一旦Kafka连接进程启动，这个源连接器就开始从test.txt文件中读取数据，并生成主题connect-test; 在sink连接器开始从connect-test主题中读取信息并把信息写到文件test.sink.txt中。我可以通过检查输出文件内容来验证这些数据是否已经通过整个管道发送传输。</p>



<pre class="prettyprint"><code class=" hljs markdown"><span class="hljs-blockquote">&gt; cat test.sink.txt</span>
<span class="hljs-blockquote">&gt; foo</span>
<span class="hljs-blockquote">&gt; bar</span></code></pre>

<p>Note that the data is being stored in the Kafka topic connect-test, so we can also run a console consumer to see the data in the topic (or use custom consumer code to process it): <br>
注意这样数据被储存在Kafka主题connect-test中，所以我们也可以运行一个控制台消费者去查看这些在主题中的数据（或使用自定义代码来处理它）：</p>



<pre class="prettyprint"><code class=" hljs r">&gt; bin/kafka-console-consumer.sh --bootstrap-server localhost:<span class="hljs-number">9092</span> --topic connect-test --from-beginning
{<span class="hljs-string">"schema"</span>:{<span class="hljs-string">"type"</span>:<span class="hljs-string">"string"</span>,<span class="hljs-string">"optional"</span>:false},<span class="hljs-string">"payload"</span>:<span class="hljs-string">"foo"</span>}{<span class="hljs-string">"schema"</span>:{<span class="hljs-string">"type"</span>:<span class="hljs-string">"string"</span>,<span class="hljs-string">"optional"</span>:false},<span class="hljs-string">"payload"</span>:<span class="hljs-string">"bar"</span>}
<span class="hljs-keyword">...</span></code></pre>

<p>The connectors continue to process data, so we can add data to the file and see it move through the pipeline: <br>
这些连接器一直在处理数据，因此可以向文件增加数据并通过管道可以看到数据的传输：</p>



<pre class="prettyprint"><code class=" hljs bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">"Another line"</span> &gt;&gt; test.txt</code></pre>

<p>You should see the line appear in the console consumer output and in the sink file. <br>
你可看到这行数据显示在控制台与sink文件中。</p>



<h4 id="step-8-use-kafka-streams-to-process-data">Step 8: Use Kafka Streams to process data</h4>

<p>Kafka Streams is a client library for building mission-critical real-time applications and microservices, where the input and/or output data is stored in Kafka clusters. Kafka Streams combines the simplicity of writing and deploying standard Java and Scala applications on the client side with the benefits of Kafka’s server-side cluster technology to make these applications highly scalable, elastic, fault-tolerant, distributed, and much more. This quickstart example will demonstrate how to run a streaming application coded in this library.</p>



<h4 id="第八步使用kafka流去处理数据">第八步：使用Kafka流去处理数据</h4>

<p>Kafka流是一个创建关键性实时应用与微服务库，输入或输出数据都被储存在Kafka的集群中。 <br>
Kafka流组合写与布署标准JAVA和Scala在客户端利用Kafka服务集群技术的高弹性，容错，分布式等等应用的简单性。这个快速教程例子（<a href="http://kafka.apache.org/0110/documentation/streams/quickstart" rel="nofollow">http://kafka.apache.org/0110/documentation/streams/quickstart</a>）将演示了使用这个包怎么运行一个流用。</p>

<p>【作者：happyprince, <a href="http://blog.csdn.net/ld326/article/details/78118441" rel="nofollow">http://blog.csdn.net/ld326/article/details/78118441</a> 】</p>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>