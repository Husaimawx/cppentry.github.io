---
layout:     post
title:      征服flume之一——flume-NG的编译
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                [b]关于flume NG[/b]<br>Flume是Cloudera提供的一个高可用的，高可靠的，分布式的海量日志采集、聚合和传输的系统，Flume支持在日志系统中定制各类数据发送方，用于收集数据；同时，Flume提供对数据进行简单处理，并写到各种数据接受方（可定制）的能力。<br>当前Flume有两个版本Flume 0.9X版本的统称Flume-og，Flume1.X版本的统称Flume-ng。由于Flume-ng经过重大重构，与Flume-og有很大不同，使用时请注意区分。<br><br>[b]flume的特点[/b]<br>　　flume是一个分布式、可靠、和高可用的海量日志采集、聚合和传输的系统。支持在日志系统中定制各类数据发送方，用于收集数据;同时，Flume提供对数据进行简单处理，并写到各种数据接受方(比如文本、HDFS、Hbase等)的能力 。<br>　　flume的数据流由事件(Event)贯穿始终。事件是Flume的基本数据单位，它携带日志数据(字节数组形式)并且携带有头信息，这些Event由Agent外部的Source生成，当Source捕获事件后会进行特定的格式化，然后Source会把事件推入(单个或多个)Channel中。你可以把Channel看作是一个缓冲区，它将保存事件直到Sink处理完该事件。Sink负责持久化日志或者把事件推向另一个Source。<br><br>[b]flume的可靠性 [/b]<br>　　当节点出现故障时，日志能够被传送到其他节点上而不会丢失。Flume提供了三种级别的可靠性保障，从强到弱依次分别为：end-to-end（收到数据agent首先将event写到磁盘上，当数据传送成功后，再删除；如果数据发送失败，可以重新发送。），Store on failure（这也是scribe采用的策略，当数据接收方crash时，将数据写到本地，待恢复后，继续发送），Besteffort（数据发送到接收方后，不会进行确认）。<br><br>[b]flume的可恢复性[/b]<br>　　还是靠Channel。推荐使用FileChannel，事件持久化在本地文件系统里(性能较差)。 <br><br>　　flume的一些核心概念：<br>Agent        使用JVM 运行Flume。每台机器运行一个agent，但是可以在一个agent中包含多个sources和sinks。<br>Client        生产数据，运行在一个独立的线程。<br>Source        从Client收集数据，传递给Channel。<br>Sink        从Channel收集数据，运行在一个独立线程。<br>Channel        连接 sources 和 sinks ，这个有点像一个队列。<br>Events        可以是日志记录、 avro 对象等。<br><br><br>本文是征服flume系列文章的第一篇，编译flume-NG。<br>[b]一、下载flume-ng源码[/b]<br><pre><code class="language-java">git clone git://git.apache.org/flume.git</code></pre><br>或者到[url=https://github.com/apache/flume]官网[/url]通过http方式下载zip包<br><br>[b]二、编译过程中可能遇到的问题[/b]<br>1、Missing artifact jdk.tools:jdk.tools:<br>flume-hdfs-sink等包中可能会报该异常，只需要在pom.xml中添加一下依赖即可<br><br><pre><code class="language-java"><br>		&lt;dependency&gt;<br>			&lt;groupId&gt;jdk.tools&lt;/groupId&gt;<br>			&lt;artifactId&gt;jdk.tools&lt;/artifactId&gt;<br>			&lt;version&gt;1.7&lt;/version&gt;<br>			&lt;scope&gt;system&lt;/scope&gt;<br>			&lt;systemPath&gt;${JAVA_HOME}/lib/tools.jar&lt;/systemPath&gt;<br>		&lt;/dependency&gt;<br></code></pre><br>2、ua-parser-1.3.0.jar<br>这个jar包我尝试了几个不同的地址，均未能正常下载，遂自己下载了一份源码打了jar包<br>https://github.com/tobie/ua-parser/<br>当然，大家也可以尝试一下一下地址<br><pre><code class="language-java"><br>&lt;repository&gt;<br>  &lt;id&gt;maven.tempo-db.com&lt;/id&gt;<br>  &lt;url&gt;http://maven.tempo-db.com/artiferactory/list/twitter/&lt;/url&gt;<br>&lt;/repository&gt;<br></code></pre><br>3、其他jar包<br>之后的编译过程中，还遇到了其他jar包无法正常加载的情况，主要有org.restlet.ext.servlet-2.1.1.jar、pentaho-aggdesigner-algorithm-5.1.3-jhyde.jar等，这些jar包都可以从一下地址找到！<br>http://conjars.org/repo/<br>http://repository.pentaho.org/artifactory/repo/<br>4、缺少class文件的问题<br>如果你使用eclipse或者其他ide打开flume项目，你会发现有几个类找不到，例如:<br>org.apache.flume.source.avro.AvroFlumeEvent<br>com.cloudera.flume.handlers.avro.FlumeOGEventAvroServer<br>com.cloudera.flume.handlers.avro.AvroFlumeOGEvent<br>等等，这些class其实是通过src路径下的avdl文件生成的。（具体生成过程我还没研究）<br><br>[b]三、执行编译命令[/b]<br><pre><code class="language-java">mvn clean install -DskipTests</code></pre><br>由于受环境和配置参数影响，需要跳过测试，不然部分测试代码执行不成功。<br><br>[b]四、执行结果[/b]<br>[img]http://dl2.iteye.com/upload/attachment/0115/2375/de45b27b-43c4-31a2-bfb3-17661766f615.png[/img]<br>执行完成后，将在flume-ng-dist文件夹的target目录下生成apache-flume-1.7.0-SNAPSHOT-bin等文件夹，apache-flume-1.7.0-SNAPSHOT-bin文件夹下的文件即可直接拿来使用            </div>
                </div>