---
layout:     post
title:      大数据系列第一课：scala基础
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<p><strong><span style="font-size:14px;">第一阶段：<span style="font-family:Calibri;">Spark streaming</span><span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">spark sql</span><span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">kafka</span><span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">spark</span><span style="font-family:'宋体';">内核原理（必须有一个大型项目经验）；</span></span></strong></p>
<p><strong><span style="font-size:14px;">第二阶段：<span style="font-family:Calibri;">spark</span><span style="font-family:'宋体';">运行的各种环境，各种故障的解决，性能优化（精通</span><span style="font-family:Calibri;">spark</span><span style="font-family:'宋体';">内核、运行原理）；</span></span></strong></p>
<p><strong><span style="font-size:14px;">第三阶段：流处理、机器学习为鳌头，需要首先掌握前两个阶段的内容；</span><span style="font-size:14px;"><span>
</span></span></strong></p>
<p><span style="font-size:14px;"><span></span></span></p>
<p style="font-weight:bold;"><span style="color:rgb(255,0,0);"><span></span>跟随王家林老师的零基础讲解，注重动手实战，成为<span style="font-family:Calibri;">spark</span><span style="font-family:'宋体';">高数，笑傲大数据之林！</span></span></p>
<p><span style="font-family:'宋体';"></span></p>
<p style="font-weight:bold;color:rgb(255,0,0);"><span style="color:rgb(255,0,0);">第一部分：学习笔记</span></p>
<strong>内容：</strong>
<p><span style="font-weight:bold;"></span>1 Scala<span style="font-family:'宋体';">的重大价值</span></p>
<p><span></span>2 Scala<span style="font-family:'宋体';">基础语法入门实战</span></p>
<p><span></span>3 Scala<span style="font-family:'宋体';">函数入门实战</span></p>
<p><span></span>4 Scala<span style="font-family:'宋体';">中</span><span style="font-family:Calibri;">Array</span><span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">Map</span><span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">Tuple</span><span style="font-family:'宋体';">实战</span></p>
<p><span></span>5 <span style="font-family:'宋体';">综合案例及</span><span style="font-family:Calibri;">Spark</span><span style="font-family:'宋体';">源码解析</span></p>
<p><span style="font-family:'宋体';"></span></p>
<p><strong>一、scala价值</strong></p>
<p><span></span>Scala可伸缩的语言的英语翻译是：Scalable Language。它是一门多范式的编程语言，一种类似java的编程语言，集成面向对象编程和函数式编程的各种特性并完美结合，熟练掌握scala对于学习spark来说至关重要。</p>
<p><strong>二、Scala函数定义：</strong></p>
<p>（scala函数定义时候默认会导入包）</p>
<p>有参数的函数定义</p>
<p><strong><span></span>def 函数名（参数列表，...)：返回结果类型={...}</strong></p>
<p><span></span>①　有时函数必须制定返回结果类型，如函数时递归，就必须明确制定返回结果类型；</p>
<p><span></span>②　如果函数仅一个语句，连花括号都可以不写。如是max函数就成了这样,作用功能仍然没有变化；</p>
<p><span></span>③　Scala语言在进行函数调用时可不加（）；</p>
<p><span></span>④　Scala语言在编写的时候亦可以不用加“；”</p>
<p><span></span>⑤　Scala中，i++或者++i都不能其作用，只能使用i=i+1</p>
<p><span></span>⑥　foreach与函数字面量</p>
<p><span></span>函数字面量格式：参数列表 =&gt; 函数体</p>
<p><span></span>(x: Int, y:Int) =&gt; x + y</p>
<p><span></span>⑦　for循环中是val类型，因此在for表达式中不能重新对其赋值,&lt;-可以理解为其中的意思for(arg&lt;-args)函数调用。</p>
<div style="text-align:center;"><img src="https://img-blog.csdn.net/20160102012254129?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></div>
<p><span></span></p>
<p></p><pre><code class="language-java">//可以使用sum( 1 to 100 _*)求和
 val arr= Array(10,11,2,4,123,2)
 val hello = for(i&lt;- 0 until(arr.length,2))println(arr(i)) 
//注：Scala 三元符表达示例：
 var file=if（!args.isEmpty）args(0) else scala.xml</code></pre>
<p><span></span>使用scala解释器REPL中的黏贴模式，将代码块黏贴进去方便执行分析。</p>
<div style="text-align:center;"><img src="https://img-blog.csdn.net/20160102012420090?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></div>
<div style="text-align:left;"><pre><code class="language-java">  //Scala输入输出形式较丰富
  print("\n I'm a Student!")
  printf("%s the future of BigDate computation framework:\n","Spark")</code></pre>
<p><strong>三、字段定义</strong></p>
<p>（1）val:类似java中final类型的变量（常量）</p>
<p><span></span>1，基本格式：val 变量名：变量类型 = 值</p>
<p><span></span>2，其中有时变量类型可以省略，可以自动识别</p>
<p><span></span>3，常量不能赋值，修改</p>
<p>（2）var:等同于java中的非final型变量</p>
<p><strong>四、scala中的Array、Map、Tuple实战</strong></p>
<p><strong>（1）map</strong></p>
<p>Map就是键值对的集合。在Scala中，Map是对偶（键值对的另一个说法）的集合。-&gt;操作符用来创建对偶，即key和values。</p>
<pre><code class="language-java">  /*
   * Map:映射，把值和集合中的元素联系起来，使用任意类型的键
   */
  val map1 = Map{"hadoop"-&gt;1 }
  map1 + ("spark"-&gt;2)
  map1（("spark"）=3          //更改已有的值 
  map1.contains("scala")     //检查是否包含
  map1.keySet                //返回key集合
  //添加多个对偶，使用“+=”操作符：
  map1+=("Flink"-&gt;3,"Hbase"-&gt;5)
  //移除某个对偶，使用“-=”操作符： 
  map1-="hadoop"
  import scala.collection.mutable._
  val map2 = mutable.Map.empty[String,Int]//创建空map</code></pre>
<p><strong>（2）List</strong></p>
<p>List列表（不可变）</p>
<p><span></span>1，类型都是相同的</p>
<p><span></span>2，不可变的，（Array虽然长度固定，但是元素之使可变的）</p>
<p><span></span>3，(：：：)实现叠加List,(::)cons:将新元素组合到列表的最前端</p>
<pre><code class="language-java">  /*
   * List:支持头部的快速删除和添加,不可变，列表的所有元素都具有相同类型，类似于数组Array
   */
  val color =  List("yellow","blue")
  val list2 = (1,2,3)
  var list3 = 4
  def list4:Int = 5
  /*
 * listBuffer：可以更加高效的通过添加元素的方式构建列表
 * 元素的添加使用+=操作符
 * 元素的前缀使用+:操作符     
 */
  import scala.collection.mutable.ListBuffer
     val li= new ListBuffer[Int]
     li+= 1
     li +=2
     3+:li
     li.toList
     println(li(2))</code></pre>
<p><strong>（3）Array数组</strong></p>
<pre><code class="language-java"> /*/
   * Array:使用基于0的索引高效访问任意位置的元素
   */
  val array1 = Array[Int](1,2,3,4,54,5,5)
  val array3 =  new Array[Int](3) //创建长度已知，内容未知
  println(array3(2))
  array1.clone()
  array1.length
  var array = array1 
  /*
   * ArrayBuffer：类似于数组，可以在序列的结束和开始的地方添加元素
  * 创建ArrayBuffer的时候必须指定它的类型参数，可以不指定数组的长度
  * ArrayBuffer也使用+=添加元素
  */
    import scala.collection.mutable.ArrayBuffer
    val ar= new ArrayBuffer[String]()  
    ar += "hadoop"
    ar += "Spark"
    ar +: "scala"
    li.length
 li(2)
 Ar.remove(2,1)</code></pre>
<p><strong>（4）Tuple<span style="font-family:'宋体';">元组（不可变）</span></strong></p>
<p>在<span style="font-family:Consolas;">Scala</span><span style="font-family:'宋体';">中，元组是</span><span style="font-family:Consolas;">n</span><span style="font-family:'宋体';">个对象的一个聚集（</span><span style="font-family:Consolas;">Map</span><span style="font-family:'宋体';">是</span><span style="font-family:Consolas;">n=2</span><span style="font-family:'宋体';">个对象的聚集），元组可以包含不同类型的元素。</span></p>
<p><span></span>1<span style="font-family:'宋体';">，元组也是不可变的，但是元组可以是不同类型的数据</span></p>
<p><span></span>2<span style="font-family:'宋体';">，实例化：</span><span style="font-family:Consolas;">var a = </span><span style="font-family:'宋体';">（，）</span></p>
<p><span></span>3,<span style="font-family:'宋体';">可以通过点号，下划线，</span><span style="font-family:Consolas;">-N</span><span style="font-family:'宋体';">（</span><span style="font-family:Consolas;">N</span><span style="font-family:'宋体';">从</span><span style="font-family:Consolas;">1</span><span style="font-family:'宋体';">开始）的索引访问元素</span></p>
<pre><code class="language-java">  /*
   * Tuple:元组，把固定数量的条木组合在一起整体传送，可以包含不同	   *的类型
   */
  val tuple = (1,"spark",true)
  tuple._1
  tuple._2
  tuple.-&gt;(1)</code></pre>
<p><span style="color:rgb(255,0,0);">第二部分：作业完成</span></p>
<p>1、移除一个数组中第一个负数后的所有负数；（效率）</p>
<p></p><pre><code class="language-java">  import Array._
  import scala.collection.mutable._
  val myArray = new ArrayBuffer[Int]()
  while(myArray!=null){
  val arr:Array[Int] ={for(i &lt;- 0 until myArray.length if myArray(i)&lt;0) concat(myArray.filter ( _&gt;0),myArray.filter (_ &lt;0)(0))else myArray.toArray}
  println(arr)
    //concat()方法来连接两个数组</code></pre><br><br><br><br><br><br><br><br></div>
            </div>
                </div>