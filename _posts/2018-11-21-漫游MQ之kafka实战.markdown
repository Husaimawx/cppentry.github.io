---
layout:     post
title:      漫游MQ之kafka实战
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<h4><span style="background-color:rgb(255,255,255);">从接触kafka到现在已经两个多月了，期间利用kafka也实现了一部分功能，对kafka也有了一部分自己的见解，下面简要介绍一下这段时间使用kafka的心得。</span></h4>
<p></p>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;">
<span style="font-family:'宋体', SimSun;background-color:rgb(255,255,255);"><br></span></p>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;">
<span style="font-family:'宋体', SimSun;background-color:rgb(255,255,255);">很多话题都是围绕着how,what,why来完成的，这篇帖子也不例外，ok，let's we go!</span></p>
<h4 style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';font-weight:500;line-height:1.1;color:rgb(102,102,102);font-size:18px;">
<span style="background-color:rgb(255,255,255);">一 ，什么是kafka    </span></h4>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;">
<span style="background-color:rgb(255,255,255);">Kafka是由LinkedIn开发的一个分布式基于发布/订阅的消息系统；<span style="font-family:arial, '宋体', sans-serif;color:rgb(51,51,51);text-indent:28px;">它可以处理消费者规模的网站中的所有动作流数据。其中在官网上kafka号称“<span>非常普通的硬件Kafka也可以支持每秒数百万数据</span>”，是不是很牛，虽然我没尝试过，不过既然这么说，肯定是在一定基础上考究过的；下面我们看一下kafka的基本概念；</span><span style="font-family:arial, '宋体', sans-serif;color:rgb(51,51,51);text-indent:28px;"></span></span></p>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;">
<span style="background-color:rgb(255,255,255);">1）Broker</span></p>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;">
<span style="background-color:rgb(255,255,255);">Kafka集群包含一个或多个服务器，这种服务器被称为broker。broker端不维护数据的消费状态，提升了性能。直接使用磁盘进行存储，线性读写，速度快：避免了数据在JVM内存和系统内存之间的复制，减少耗性能的创建对象和垃圾回收。 </span></p>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;">
<span style="background-color:rgb(255,255,255);">2）Producer</span></p>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;">
<span style="background-color:rgb(255,255,255);">负责发布消息到Kafka broke，也就是消息的生产者</span></p>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;">
<span style="background-color:rgb(255,255,255);">3）Consumer</span></p>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;">
<span style="background-color:rgb(255,255,255);">消息消费者，向Kafka broker读取消息的客户端，consumer从broker拉取(pull)数据并进行处理。可以通过commit来决定是自动提交还是手动提交消费的记录</span></p>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;">
<span style="background-color:rgb(255,255,255);">4）Topic</span></p>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;">
<span style="background-color:rgb(255,255,255);">每条发布到Kafka集群的消息都有一个类别，这个类别被称为Topic,所有的消息是以topic作为载体存在的；</span></p>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;">
<span style="background-color:rgb(255,255,255);">5）Partition</span></p>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;">
<span style="background-color:rgb(255,255,255);">Parition是物理上的概念，每个Topic包含一个或多个Partition.</span></p>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;">
<span style="background-color:rgb(255,255,255);">6）Consumer Group</span></p>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;">
<span style="background-color:rgb(255,255,255);">每个Consumer属于一个特定的Consumer Group（可为每个Consumer指定group name，若不指定group name则属于默认的group）</span></p>
<h4 style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';font-weight:500;line-height:1.1;color:rgb(102,102,102);font-size:18px;">
<span style="background-color:rgb(255,255,255);">二，什么场景下适合用kafka</span></h4>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;">
<span style="background-color:rgb(255,255,255);">这是一个很宽泛的问题，答案也是有很多种，下面简要介绍下个人的观点，到底什么场景下该用消息队列，什么场景下不用消息队列；</span></p>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;">
<span style="background-color:rgb(255,255,255);">首先阐述下MQ（Message Queue）是做什么的</span></p>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;">
<span style="background-color:rgb(255,255,255);">MQ是一种夸进程的通信机制，主要是用于上下游消息的的传递；说白了就是一个中间体，用于上游和下游之间消息的调度；MQ是一种很常见的逻辑+物理解耦的组件；它不依赖于业务服务，在说完全的前提下也保持着千丝万缕的联系；</span></p>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;text-align:center;">
<br></p>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;">
<span style="background-color:rgb(255,255,255);">那么什么时候使用MQ呢？</span></p>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;">
<span style="background-color:rgb(255,255,255);">1）项目中的业务依赖</span></p>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;">
<span style="background-color:rgb(255,255,255);">这个是一个很绕的概念，还是举个例子来说明吧，比如业务1依赖于业务2，业务2又依赖于业务3，也就是要执行业务1，那么就要保证业务2先执行；考虑下这种该如何实现呢？我们来分析一下，上面的相互依赖说明其有时差性，先后性，业务3在所有的之前进行，然后是业务2,1；写三个方法，方法之间调用，当上个方法有返回值的时候再执行下个方法？可行是绝对的，当并发量比较高的时候又该如何去调度呢？异步肯定是不可行的。</span></p>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;">
<span style="background-color:rgb(255,255,255);">使用job，分别设置corn是是一点，两点，三点，错开时间来执行；方案可行，但是这种方案又存在什么问题呢？</span></p>
<ol class="list-paddingleft-2" style="color:rgb(102,102,102);font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';font-size:14px;"><li>
<p><span style="background-color:rgb(255,255,255);">后置任务无法确保前置任务是否成功；</span></p>
</li><li>
<p><span style="background-color:rgb(255,255,255);">总的任务周期时间特别长(总的时间=任务一+任务二+任务三+闲置）；</span></p>
</li><li>
<p><span style="background-color:rgb(255,255,255);">容易出错（出错的原因有很多）</span></p>
</li><li>
<p><span style="background-color:rgb(255,255,255);">这里只是三个任务，若存在更多的依赖呢？</span></p>
</li></ol><p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;">
<span style="background-color:rgb(255,255,255);">使用这种方案是不是有一种痛但是说不出的感觉<img src="https://dev.zte.com.cn/vender/ueditor/dialogs/emotion/images/face/i_f07.gif" alt="" style="vertical-align:middle;border:0px;">；有就对了</span></p>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;">
<span style="background-color:rgb(255,255,255);">2）生产者不关心自己生产的数据的结果性</span></p>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;">
<span style="background-color:rgb(255,255,255);">在消息队列中生产者和消费者几乎是隔离的，生产者可以不关心消费者而大批量的向MQ中扔消息进来，怎么处理，如何处理那就不是生产者的任务了，当生产者不关心自己生产的数据是不是被消费，如何被消费，消费的失败还是成功的时候，那么这时候果断选择用消息MQ，恭喜您，选择对了；</span></p>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;">
<span style="background-color:rgb(255,255,255);">是不是生产者关心自己生产的消息最终的结果的时候是不是就不能用了，答案是否定的，可以用，只是当发现自己生产的消息一直是失败的时候，这时候会发现kafka（这里是以kafka为例）中的offset是一直背着一个锅，锅中装的就是消费者的消息；后面会以代码来说明...</span></p>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;">
<span style="background-color:rgb(255,255,255);">3）大批量消息处理</span></p>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;">
<span style="background-color:rgb(255,255,255);">我个人感觉大批量消息的处理最适合用MQ了；当大批量的业务需要处理的时候，若是不使用MQ，那么如洪水一般的涌入到系统中来，一不小心，系统就GG了；即使硬件配置的很牛，系统代码写的很好，能够处理完这些消息，还存在一个问题，消息请求了，这里还没处理的时候或者处理中的时候，因为这些或者那么原因系统挂了，怎么办？怎么办？服务器背这个锅，它是不会答应的。</span></p>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;">
<span style="background-color:rgb(255,255,255);">这时候kafka华丽的出场，ok，没错，就是它......</span></p>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;">
<span style="background-color:rgb(255,255,255);">消息如洪水一般的涌过来吧，kafka可以纳百川，生产者接收到消息提供生产的数据到kafka服务中来，即使这时候系统挂了，那么在下次服务启动的时候还是不耽误它消费的，消息依旧会在队列中排着队一点点的投向消费者的怀抱；</span></p>
<h4 style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';font-weight:500;line-height:1.1;color:rgb(102,102,102);font-size:18px;">
<span style="background-color:rgb(255,255,255);">三，kafka的工作流程<br></span></h4>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;">
<span style="background-color:rgb(255,255,255);">以一张图来说明kafka的工作流程吧</span></p>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;text-align:center;">
<br></p>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;text-align:center;">
<br></p>
<h4 style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';font-weight:500;line-height:1.1;color:rgb(102,102,102);font-size:18px;">
<span style="background-color:rgb(255,255,255);">四，kafka的应用实战</span></h4>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;">
<span style="background-color:rgb(255,255,255);">这里以kafka作为任务调度器来简要的分析下其用法</span></p>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;">
<span style="background-color:rgb(255,255,255);">springboot 1.5以上的版本已经集成了kafka，不用自己再去写properties了，配置即可；<br></span></p>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;">
<span style="background-color:rgb(255,255,255);">下面看一下kafka的参数配置信息：</span></p>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;">
<span style="background-color:rgb(255,255,255);"></span></p>
<pre><code class="language-html">spring: 
    kafka:
        #kafak服务器
        bootstrapServers:
            - 10.63.xxx.xxx:9092
        #连接到kafka服务器的客户端标识
        clientId: xxxx-mq
        producer:
            #同步到follower的数量,all的话就是所有的follower都同步成功了才返回给客户端
            acks: all
            #发送失败后的重试次数
            retries: 3
            #每批次发送的字节大小
            batchSize: 6144
            #划分给生产者使用的内存空间,指定的内存空间塞满后，发送方法会阻塞等待
            bufferMemory: 33554432
            #消息压缩格式
            compressionType: gzip
            key-serializer: org.apache.kafka.common.serialization.StringSerializer
            value-serializer: org.apache.kafka.common.serialization.StringSerializer
            
        consumer:
            #消费组id,按微服务名规范
            groupId: xxxxx-mq
            #当Kafka中没有初始offset或如果当前的offset不存在时,自动将偏移重置为最新偏移
            autoOffsetReset: latest
            #设置手动提交
            enableAutoCommit: true
            #如果enable.auto.commit设置为true，则消费者偏移量自动提交给Kafka的频率（以毫秒为单位）
            autoCommitInterval: 5000
            #如果没有足够的数据满足fetch.min.bytes，服务器将在接收到提取请求之前阻止的最大时间
            fetchMaxWait: 500
            #kafka服务器拉取请求返回的最小数据量，如果数据不足，请求将等待数据积累.
            fetchMinSize: 1
            #当使用Kafka的分组管理功能时，心跳到消费者协调器之间的预计时间。
            #心跳用于确保消费者的会话保持活动状态，并当有新消费者加入或离开组时方便重新平衡。
            #该值必须必比session.timeout.ms小，通常不高于1/3。
            #它可以调整的更低，以控制正常重新平衡的预期时间。
            heartbeatInterval: 3000
            #在单次调用poll()中返回的最大记录数
            maxPollRecords: 100
          #  key-deserializer: org.apache.kafka.common.serialization.StringSerializer
          #  value-deserializer: org.apache.kafka.common.serialization.StringSerializer
            
        template:
            #默认使用的Topic
            defaultTopic: xxxxx-mq-default-topic</code></pre><br><br><p></p>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;">
<span style="background-color:rgb(255,255,255);">主要讲一下enableAutoCommit这个参数，是否自动提交的标识，有时候业务处理是同时处理一批的数据，那么这时候可以采用手动提交的方式；或者是牵涉到了业务逻辑处理的部分，需要保证业务逻辑处理成功之后才提交给kafka服务器是该项消息已经消费成功了；<br></span></p>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;">
<span style="background-color:rgb(255,255,255);">下面看下kafka是如何生产消息</span></p>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;">
<span style="background-color:rgb(255,255,255);"></span></p>
<pre><code class="language-java">public ResultApi sendMsg(@RequestParam(value="msg")String msg,
               @RequestParam("notifyUrl")String notifyUrl,@RequestParam(value="topic")String topic){
try {
String key=UUIDUtils.getUUID32();    
   HashOperations&lt;String, String, String&gt; hashOperations=redisTemplate.opsForHash();
   //以hash的方式存储
   hashOperations.put(key, "notifyurl", notifyUrl);
   hashOperations.put(key, "topic", topic);
   hashOperations.put(key, "msg", msg);
kafkaTemplate.send(topic,key, msg);
logger.info("成功收到信息:"+msg);
/*try {
KafkaProducerListener kafkaProducerListener=SpringBeanUtils.getBean("kafkaProducerListener", KafkaProducerListener.class);
kafkaTemplate.setProducerListener(kafkaProducerListener);
} catch (Exception e) {
e.printStackTrace();
}*/
return new ResultApi(null, Result.RECEIVE_SUCCESS.getCode(),Result.RECEIVE_SUCCESS.getMsg());
} catch (Exception e) {
e.printStackTrace();
return new ResultApi(null,Result.NOT_PROCEDURE.getCode(),Result.NOT_PROCEDURE.getMsg());
}
}</code></pre><br><br><p></p>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;">
<span style="background-color:rgb(255,255,255);">kafkaTemplate是整个生产者的生产消息的入口<br></span></p>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;">
<span style="background-color:rgb(255,255,255);">其中生产消息有监听的入口 ，即：kafkaProducerListener，它监听消息的成功和失败以及是否监听的开关，用户只需要实现ProducerListener接口重写方法即可；</span></p>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;">
<span style="background-color:rgb(255,255,255);">kafka消息的produce是比较简单的过程，简单的可以理解成是往容器中填东西；<br></span></p>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;">
<span style="background-color:rgb(255,255,255);">东西已经填到容器中了，如何去消费呢？</span></p>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;">
<span style="background-color:rgb(255,255,255);">我在使用的过程中使用了两种方法<br></span></p>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;">
<span style="background-color:rgb(255,255,255);">一是用listener的方式，去listener对应的topic的produce的消息，获取到去处理；</span></p>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;">
<span style="background-color:rgb(255,255,255);">一是用线程池实现，通过consumer的方式poll在单位时间内拉去对已ing配置中设置的拉去条数；</span></p>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;">
<span style="background-color:rgb(255,255,255);">实现方式分别如下：</span></p>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;">
<span style="background-color:rgb(255,255,255);"></span></p>
<pre><code class="language-java">@KafkaListener(topics={"xxx-mq","xxx-xxx","xxx-xxxx"})
public void receiveMsg(String msg){
    logger.info("consumer current msg is:"+msg);
}</code></pre><br><br><p></p>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;">
<span style="background-color:rgb(255,255,255);">该方法，简单，粗暴，好实现，简单的consumer消费的不二选择；</span></p>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;">
<span style="background-color:rgb(255,255,255);"></span></p>
<pre><code class="language-java">public ResultApi consumerMsg(){
    ExecutorService service = Executors.newFixedThreadPool(5);
    Consumer&lt;String, String&gt; consumer=initConsumer();
    consumer.subscribe(Arrays.asList(topics.split("\\,")));
    service.execute(new ConsumerRunable(consumer,redisTemplate,timeInterval));
    service.shutdown();
    logger.info("consumer is starting..........");
    return new ResultApi("success", 200);
}
private synchronized Consumer&lt;String, String&gt; initConsumer(){
    if (consumer != null) {
    return consumer;
    }
    return (Consumer&lt;String, String&gt;) springKafkaBeans.kafkaConsumerFactory(kafkaProperties).createConsumer();
}
public ConsumerRunable(Consumer&lt;String, String&gt; consumer,RedisTemplate&lt;String, String&gt; redisTemplate,long timeInterval) {
    this.consumer=consumer;
    this.redisTemplate=redisTemplate;
    this.timeInterval=timeInterval;
}
@Override
public void run() {
    while(true){
    ConsumerRecords&lt;String, String&gt; records = consumer.poll(timeInterval);
    for (ConsumerRecord&lt;String, String&gt; consumerRecord : records) {//默认的是一个分区的情况下，若是多分区，请加一层for遍历
    logger.info("消息key:"+consumerRecord.key()+"消息分区："+consumerRecord.partition()+"消息offset:"+consumerRecord.offset());
    callBackMsg=new KafkaCallBack();
    ResultApi resultApi=null;
    HashOperations&lt;String, String, String&gt; hashOperations=redisTemplate.opsForHash();
    try{
    resultApi=callBackMsg.callBack(consumerRecord.key(), consumerRecord.value(), hashOperations.get(consumerRecord.key(), "notifyurl"));
    }catch(Exception e){//請求超時  工具類中設置了超時時間  後面再優化
    logger.info(e.toString());
    }finally {
    if ("success".equals(resultApi.getErrMsg())) {
    hashOperations.delete(consumerRecord.key(), "notifyurl","topic","msg");
    logger.info("key="+consumerRecord.key()+"已成功消费");
    }else{
    logger.info("key="+consumerRecord.key()+"消费失败");
}
}
}
}
}</code></pre><br><br><p></p>
<p style="font-family:'Microsoft YaHei Regular', 'Microsoft YaHei';color:rgb(102,102,102);font-size:14px;">
<span style="background-color:rgb(255,255,255);">线程池的实现方式，适合大批量消息推送并消费，同时可以自己来控制commit是手动还是自动的，应对上面讲的consumer背的那个锅的问题。缺点，零星消息消费的时候就不适合了，同时还有一个问题就是一个runtimeException就跳出去了，是不是一千点的伤害瞬间砸到了身上。</span></p>
<br>            </div>
                </div>