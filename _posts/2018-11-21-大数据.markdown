---
layout:     post
title:      大数据
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<h4>                               一 hdfs架构</h4>
<h5>hdfs的概念：</h5>
<div><span style="color:rgb(46,46,46);font-family:'Microsoft YaHei', '宋体', 'Myriad Pro', Lato, 'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:15px;background-color:rgb(255,255,255);">HDFS(Hadoop Distributed File System)作为</span><a href="http://hadoop.apache.org/" rel="nofollow" style="border:0px;font-size:15px;color:rgb(0,153,204);font-family:'Microsoft YaHei', '宋体', 'Myriad Pro', Lato, 'Helvetica Neue', Helvetica, Arial, sans-serif;background-color:rgb(255,255,255);">Hadoop</a><span style="color:rgb(46,46,46);font-family:'Microsoft YaHei', '宋体', 'Myriad Pro', Lato, 'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:15px;background-color:rgb(255,255,255);">下的一个子项目，是目前使用极为广泛的分布式文件系统</span><br></div>
<div>
<p style="color:rgb(0,0,0);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">
<span style="font-size:14pt;">1、<a></a>HDFS 是做什么的</span></p>
<p style="color:rgb(0,0,0);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">
<span style="font-size:14pt;">　　</span><span style="font-size:10pt;">HDFS（Hadoop Distributed File System）是Hadoop项目的核心子项目，是分布式计算中数据存储管理的基础，是基于流数据模式访问和处理超大文件的需求而开发的，可以运行于廉价的商用服务器上。它所具有的高容错、高可靠性、高可扩展性、高获得性、高吞吐率等特征为海量数据提供了不怕故障的存储，为超大数据集（Large
 Data Set）的应用处理带来了很多便利</span>。</p>
<p style="color:rgb(0,0,0);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">
<span style="font-size:14pt;">2、<a></a>HDFS 从何而来</span></p>
<p style="color:rgb(0,0,0);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">
　　HDFS 源于 Google 在2003年10月份发表的GFS（Google File System） 论文。 它其实就是 GFS 的一个克隆版本</p>
<p style="color:rgb(0,0,0);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">
<span style="font-size:14pt;">3、<a></a>为什么选择 HDFS 存储数据</span></p>
<p style="color:rgb(0,0,0);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">
<span style="font-size:14pt;">　  </span><span style="font-size:10pt;">之所以选择 HDFS 存储数据，因为 HDFS 具有以下优点：</span></p>
<p style="color:rgb(0,0,0);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">
　　1、<span style="font-size:10pt;">高容错性</span></p>
<ul style="color:rgb(0,0,0);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:rgb(255,255,255);"><li style="list-style:disc;">
<div style="text-align:justify;">数据自动保存多个副本。它通过增加副本的形式，提高容错性。</div>
</li><li style="list-style:disc;">
<div style="text-align:justify;">某一个副本丢失以后，它可以自动恢复，这是由 HDFS 内部机制实现的，我们不必关心。</div>
</li></ul><p style="color:rgb(0,0,0);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">
<span style="font-size:10pt;">　　2、适合批处理</span></p>
<ul style="color:rgb(0,0,0);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:rgb(255,255,255);"><li style="list-style:disc;">
<div style="text-align:justify;">它是通过移动计算而不是移动数据。</div>
</li><li style="list-style:disc;">
<div style="text-align:justify;">它会把数据位置暴露给计算框架。</div>
</li></ul><p style="color:rgb(0,0,0);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">
<span style="font-size:10pt;">　　3、适合大数据处理</span></p>
<ul style="color:rgb(0,0,0);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:rgb(255,255,255);"><li style="list-style:disc;">
<div style="text-align:justify;">处理数据达到 GB、TB、甚至PB级别的数据。</div>
</li><li style="list-style:disc;">
<div style="text-align:justify;">能够处理百万规模以上的文件数量，数量相当之大。</div>
</li><li style="list-style:disc;">
<div style="text-align:justify;">能够处理10K节点的规模。</div>
</li></ul><p style="color:rgb(0,0,0);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">
<span style="font-size:10pt;">　　4、流式文件访问</span></p>
<ul style="color:rgb(0,0,0);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:rgb(255,255,255);"><li style="list-style:disc;">
<div style="text-align:justify;">一次写入，多次读取。文件一旦写入不能修改，只能追加。</div>
</li><li style="list-style:disc;">
<div style="text-align:justify;">它能保证数据的一致性。</div>
</li></ul><p style="color:rgb(0,0,0);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">
<span style="font-size:10pt;">　　5、可构建在廉价机器上</span></p>
<ul style="color:rgb(0,0,0);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:rgb(255,255,255);"><li style="list-style:disc;">
<div style="text-align:justify;">它通过多副本机制，提高可靠性。</div>
</li><li style="list-style:disc;">
<div style="text-align:justify;">它提供了容错和恢复机制。比如某一个副本丢失，可以通过其它副本来恢复。</div>
</li></ul><p style="color:rgb(0,0,0);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">
<span style="font-size:10pt;">　　当然 HDFS 也有它的劣势，并不适合所有的场合：</span></p>
<p style="color:rgb(0,0,0);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">
<span style="font-size:10pt;">　　1、低延时数据访问</span></p>
<ul style="color:rgb(0,0,0);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:rgb(255,255,255);"><li style="list-style:disc;">
<div style="text-align:justify;">比如毫秒级的来存储数据，这是不行的，它做不到。</div>
</li><li style="list-style:disc;">
<div style="text-align:justify;">它适合高吞吐率的场景，就是在某一时间内写入大量的数据。但是它在低延时的情况下是不行的，比如毫秒级以内读取数据，这样它是很难做到的。</div>
</li></ul><p style="color:rgb(0,0,0);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">
<span style="font-size:10pt;">　　2、小文件存储</span></p>
<ul style="color:rgb(0,0,0);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:rgb(255,255,255);"><li style="list-style:disc;">
<div style="text-align:justify;">存储大量小文件(这里的小文件是指小于HDFS系统的Block大小的文件（默认64M）)的话，它会占用 NameNode大量的内存来存储文件、目录和块信息。这样是不可取的，因为NameNode的内存总是有限的。</div>
</li><li style="list-style:disc;">
<div style="text-align:justify;">小文件存储的寻道时间会超过读取时间，它违反了HDFS的设计目标。</div>
</li></ul><p style="color:rgb(0,0,0);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">
<span style="font-size:10pt;">　　3、并发写入、文件随机修改</span></p>
<ul style="color:rgb(0,0,0);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:rgb(255,255,255);"><li style="list-style:disc;">
<div style="text-align:justify;">一个文件只能有一个写，不允许多个线程同时写。</div>
</li><li style="list-style:disc;">
<div style="text-align:justify;">仅支持数据 append（追加），不支持文件的随机修改。</div>
</li></ul><br></div>
<div>
<p style="color:rgb(0,0,0);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">
<br></p>
<ul style="color:rgb(0,0,0);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:rgb(255,255,255);"><li style="list-style:disc;">
<div style="text-align:justify;">
<p style="color:rgb(0,0,0);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">
<span style="font-size:14pt;">4、<a></a>HDFS 如何存储数据</span></p>
<p style="color:rgb(0,0,0);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">
<span style="font-size:14pt;">　　<img src="https://images2015.cnblogs.com/blog/615800/201604/615800-20160410194709656-653161719.jpg" alt="" style="margin-left:0px;border:0px;"></span></p>
<p style="color:rgb(0,0,0);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">
　　　　　　　　　　　　　　　　　　HDFS的架构图</p>
<p style="color:rgb(0,0,0);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">
　　HDFS 采用Master/Slave的架构来存储数据，这种架构主要由四个部分组成，分别为HDFS Client、NameNode、DataNode和Secondary NameNode。下面我们分别介绍这四个组成部分   </p>
<p style="color:rgb(0,0,0);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">
　　1、Client：就是客户端。</p>
<ul style="color:rgb(0,0,0);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:rgb(255,255,255);"><li style="list-style:disc;">文件切分。文件上传 HDFS 的时候，Client 将文件切分成 一个一个的Block，然后进行存储。</li><li style="list-style:disc;">与 NameNode 交互，获取文件的位置信息。</li><li style="list-style:disc;">与 DataNode 交互，读取或者写入数据。</li><li style="list-style:disc;">Client 提供一些命令来管理 HDFS，比如启动或者关闭HDFS。</li><li style="list-style:disc;">Client 可以通过一些命令来访问 HDFS。</li></ul><p style="color:rgb(0,0,0);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">
　　2、NameNode：就是 master，它是一个主管、管理者。</p>
<ul style="color:rgb(0,0,0);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:rgb(255,255,255);"><li style="list-style:disc;">管理 HDFS 的名称空间</li><li style="list-style:disc;">管理数据块（Block）映射信息</li><li style="list-style:disc;">配置副本策略</li><li style="list-style:disc;">处理客户端读写请求。</li></ul><p style="color:rgb(0,0,0);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">
　　3、DataNode：就是Slave。NameNode 下达命令，DataNode 执行实际的操作。</p>
<ul style="color:rgb(0,0,0);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:rgb(255,255,255);"><li style="list-style:disc;">存储实际的数据块。</li><li style="list-style:disc;">执行数据块的读/写操作。</li></ul><p style="color:rgb(0,0,0);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">
　　4、Secondary NameNode：并非 NameNode 的热备。当NameNode 挂掉的时候，它并不能马上替换 NameNode 并提供服务。</p>
<ul style="color:rgb(0,0,0);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:rgb(255,255,255);"><li style="list-style:disc;">辅助 NameNode，分担其工作量。</li><li style="list-style:disc;">定期合并 fsimage和fsedits，并推送给NameNode。</li><li style="list-style:disc;">在紧急情况下，可辅助恢复 NameNode。</li></ul><p style="color:rgb(0,0,0);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">
<span style="font-size:14pt;">5、<a></a>HDFS 如何读取文件</span></p>
<p style="color:rgb(0,0,0);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">
<img src="https://images2015.cnblogs.com/blog/615800/201604/615800-20160410194710625-1654660549.png" alt="" style="margin-left:0px;border:0px;"></p>
<p style="color:rgb(0,0,0);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">
HDFS的文件读取原理，主要包括以下几个步骤：</p>
<ul style="color:rgb(0,0,0);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:rgb(255,255,255);"><li style="list-style:disc;">首先调用FileSystem对象的open方法，其实获取的是一个DistributedFileSystem的实例。</li><li style="list-style:disc;">DistributedFileSystem通过RPC(远程过程调用)获得文件的第一批block的locations，同一block按照重复数会返回多个locations，这些locations按照hadoop拓扑结构排序，距离客户端近的排在前面。</li><li style="list-style:disc;">前两步会返回一个FSDataInputStream对象，该对象会被封装成 DFSInputStream对象，DFSInputStream可以方便的管理datanode和namenode数据流。客户端调用read方法，DFSInputStream就会找出离客户端最近的datanode并连接datanode。</li><li style="list-style:disc;">数据从datanode源源不断的流向客户端。</li><li style="list-style:disc;">如果第一个block块的数据读完了，就会关闭指向第一个block块的datanode连接，接着读取下一个block块。这些操作对客户端来说是透明的，从客户端的角度来看只是读一个持续不断的流。</li><li style="list-style:disc;">如果第一批block都读完了，DFSInputStream就会去namenode拿下一批blocks的location，然后继续读，如果所有的block块都读完，这时就会关闭掉所有的流。</li></ul><p style="color:rgb(0,0,0);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">
<span style="font-size:14pt;">6、<a></a>HDFS 如何写入文件</span></p>
<p style="color:rgb(0,0,0);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">
<img src="https://images2015.cnblogs.com/blog/615800/201604/615800-20160410194711468-990406077.png" alt="" style="margin-left:0px;border:0px;"></p>
<p style="color:rgb(0,0,0);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">
<span style="font-size:10pt;">HDFS的文件写入原理，主要包括以下几个步骤：</span></p>
<ul style="color:rgb(0,0,0);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:rgb(255,255,255);"><li style="list-style:disc;"><span style="font-size:10pt;">客户端通过调用 DistributedFileSystem 的create方法，创建一个新的文件。</span></li><li style="list-style:disc;"><span style="font-size:10pt;">DistributedFileSystem 通过 RPC（远程过程调用）调用 NameNode，去创建一个没有blocks关联的新文件。创建前，NameNode 会做各种校验，比如文件是否存在，客户端有无权限去创建等。如果校验通过，NameNode 就会记录下新文件，否则就会抛出IO异常。</span></li><li style="list-style:disc;"><span style="font-size:10pt;">前两步结束后会返回 FSDataOutputStream 的对象，和读文件的时候相似，FSDataOutputStream 被封装成 DFSOutputStream，DFSOutputStream 可以协调 NameNode和 DataNode。客户端开始写数据到DFSOutputStream,DFSOutputStream会把数据切成一个个小packet，然后排成队列
 data queue。</span></li><li style="list-style:disc;"><span style="font-size:10pt;">DataStreamer 会去处理接受 data queue，它先问询 NameNode 这个新的 block 最适合存储的在哪几个DataNode里，比如重复数是3，那么就找到3个最适合的 DataNode，把它们排成一个 pipeline。DataStreamer 把 packet
 按队列输出到管道的第一个 DataNode 中，第一个 DataNode又把 packet 输出到第二个 DataNode 中，以此类推。</span></li><li style="list-style:disc;"><span style="font-size:10pt;">DFSOutputStream 还有一个队列叫 ack queue，也是由 packet 组成，等待DataNode的收到响应，当pipeline中的所有DataNode都表示已经收到的时候，这时akc queue才会把对应的packet包移除掉。</span></li><li style="list-style:disc;"><span style="font-size:10pt;">客户端完成写数据后，调用close方法关闭写入流。</span></li><li style="list-style:disc;"><span style="font-size:10pt;">DataStreamer 把剩余的包都刷到 pipeline 里，然后等待 ack 信息，收到最后一个 ack 后，通知 DataNode 把文件标示为已完成。</span></li></ul><h4></h4>
<h3></h3>
<h2></h2>
<h3></h3>
<h1></h1>
<ul style="color:rgb(0,0,0);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:rgb(255,255,255);"><li style="list-style:disc;">                                  二 元数据块</li></ul>
            1什么是元数据：</div>
</li></ul>
                               
<pre id="best-content-309016872" class="best-text mb-10" style="font-family:'PingFang SC', 'Lantinghei SC', 'Microsoft YaHei', arial, '宋体', sans-serif, tahoma;font-size:16px;line-height:29px;color:rgb(51,51,51);background-color:rgb(255,255,255);min-height:55px;">                 元数据就是用来定义数据的数据，或者 <span style="color:rgb(51,51,51);font-family:'PingFang SC', 'Lantinghei SC', 'Microsoft YaHei', arial, '宋体', sans-serif, tahoma;font-size:14px;background-color:rgb(255,255,255);">元数据是关于信息的信息，</span><span style="color:rgb(69,69,69);font-family:'微软雅黑';font-size:14px;background-color:rgb(255,255,255);">任何文件系统中的数据分为数据和元数据。数据是指普通文件中的实际数据，而元数据指用来描述一个文件的特征的系统数据，诸如访问权限、文件拥有者以及文件数据块的分布信息(inode...)等等。</span></pre>
<pre class="best-text mb-10" style="line-height:29px;background-color:rgb(255,255,255);min-height:55px;"><span style="font-family:'微软雅黑';color:#454545;">                               2 <span style="color:rgb(69,69,69);font-family:'微软雅黑';font-size:14px;background-color:rgb(255,255,255);">元数据管理方式</span><br style="color:rgb(69,69,69);font-family:'微软雅黑';font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(69,69,69);font-family:'微软雅黑';font-size:14px;background-color:rgb(255,255,255);">       元数据管理有两种方式。集中式管理和分布式管理。集中式管理是指在系统中有一个节点专门司职元数据管理，所有元数据都存储在该节点的存储设备上。所有客户端对文件的请求前，都要先对该元数据管理器请求元数据。分布式管理是指将元数据存放在系统的任意节点并且能动态的迁移。对元数据管理的职责也分布到各个不同的节点上。大多数集群文件系统都采用集中式的元数据管理。因为集中式管理实现简单，一致性维护容易，在一定的操作频繁度内可以提供较满意的性能。缺点是单一失效点问题，若该服务器失效，整个系统将无法正常工作。而且，当对元数据的操作过于频繁时，集中的元数据管理成为整个系统的性能瓶颈。</span><br style="color:rgb(69,69,69);font-family:'微软雅黑';font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(69,69,69);font-family:'微软雅黑';font-size:14px;background-color:rgb(255,255,255);">       分布式元数据管理的好处是解决了集中式管理的单一失效点问题， 而且性能不会随着操作频繁而出现瓶颈。其缺点是，实现复杂，一致性维护复杂，对性能有一定影响。</span></span></pre>
<pre class="best-text mb-10" style="line-height:29px;background-color:rgb(255,255,255);min-height:55px;"><span style="font-family:'微软雅黑';color:#454545;"><span style="color:rgb(69,69,69);font-family:'微软雅黑';font-size:14px;background-color:rgb(255,255,255);">                        3主要功能</span></span></pre>
<pre class="best-text mb-10" style="line-height:29px;background-color:rgb(255,255,255);min-height:55px;"><span style="font-family:'微软雅黑';color:#454545;"><span style="color:rgb(69,69,69);font-family:'微软雅黑';font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-family:'PingFang SC', 'Lantinghei SC', 'Microsoft YaHei', arial, '宋体', sans-serif, tahoma;font-size:14px;background-color:rgb(255,255,255);">（1）管理：通过元数据可以管理信息，比如著作权追踪，获得途径和要求，信息的位置，版本情况等。</span></span></span></pre>
<pre class="best-text mb-10" style="line-height:29px;background-color:rgb(255,255,255);min-height:55px;"><span style="font-family:'微软雅黑';color:#454545;"><span style="color:rgb(69,69,69);font-family:'微软雅黑';font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-family:'PingFang SC', 'Lantinghei SC', 'Microsoft YaHei', arial, '宋体', sans-serif, tahoma;font-size:14px;background-color:rgb(255,255,255);">（2）描述：通过元数据可以描述信息，比如目录记录，索引，注解等</span></span></span></pre>
<pre class="best-text mb-10" style="line-height:29px;background-color:rgb(255,255,255);min-height:55px;"><span style="font-family:'微软雅黑';color:#454545;"><span style="color:rgb(69,69,69);font-family:'微软雅黑';font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-family:'PingFang SC', 'Lantinghei SC', 'Microsoft YaHei', arial, '宋体', sans-serif, tahoma;font-size:14px;background-color:rgb(255,255,255);">（3）保存：通过元数据可以保护信息管理，比如对资源的物理状态的记录，它们的保存方法等。</span></span></span></pre>
<pre class="best-text mb-10" style="line-height:29px;background-color:rgb(255,255,255);min-height:55px;"><span style="font-family:'微软雅黑';color:#454545;"><span style="color:rgb(69,69,69);font-family:'微软雅黑';font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-family:'PingFang SC', 'Lantinghei SC', 'Microsoft YaHei', arial, '宋体', sans-serif, tahoma;font-size:14px;background-color:rgb(255,255,255);">（4）技术：指的是元数据如何在某个系统中运行，比如需要的软件和硬件记录，追踪和认证情况等。</span></span></span></pre>
<pre class="best-text mb-10" style="line-height:29px;background-color:rgb(255,255,255);min-height:55px;"><span style="font-family:'微软雅黑';color:#454545;"><span style="color:rgb(69,69,69);font-family:'微软雅黑';font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-family:'PingFang SC', 'Lantinghei SC', 'Microsoft YaHei', arial, '宋体', sans-serif, tahoma;font-size:14px;background-color:rgb(255,255,255);">（5）应用：元数据可以记录信息的类型和适用层次。</span>
</span></span></pre>
<h1 style="line-height:29px;background-color:rgb(255,255,255);min-height:55px;">
<span style="font-family:'微软雅黑';color:#454545;"><span style="color:rgb(69,69,69);font-family:'微软雅黑';font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-family:'PingFang SC', 'Lantinghei SC', 'Microsoft YaHei', arial, '宋体', sans-serif, tahoma;font-size:14px;background-color:rgb(255,255,255);"> 
                                                                    三数据块</span></span></span></h1>
<div><span style="font-family:'微软雅黑';color:#454545;"><span style="color:rgb(69,69,69);font-family:'微软雅黑';font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-family:'PingFang SC', 'Lantinghei SC', 'Microsoft YaHei', arial, '宋体', sans-serif, tahoma;font-size:14px;background-color:rgb(255,255,255);"> 
      1 概念</span></span></span></div>
<div><span style="font-family:'微软雅黑';color:#454545;"><span style="color:rgb(69,69,69);font-family:'微软雅黑';font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-family:'PingFang SC', 'Lantinghei SC', 'Microsoft YaHei', arial, '宋体', sans-serif, tahoma;font-size:14px;background-color:rgb(255,255,255);"><br></span></span></span></div>
<div><span style="font-family:'微软雅黑';color:#454545;"><span style="color:rgb(69,69,69);font-family:'微软雅黑';font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-family:'PingFang SC', 'Lantinghei SC', 'Microsoft YaHei', arial, '宋体', sans-serif, tahoma;font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-family:arial, '宋体', sans-serif;font-size:14px;text-indent:28px;background-color:rgb(255,255,255);"><span style="color:rgb(68,68,68);font-family:Tahoma, Helvetica, SimSun, sans-serif;font-size:14px;background-color:rgb(255,255,255);">Data
 Block</span>数据块是一组或几组按顺序连续排列在一起的记录，是</span><a href="https://baike.baidu.com/item/%E4%B8%BB%E5%AD%98%E5%82%A8%E5%99%A8" rel="nofollow" style="color:rgb(19,110,194);font-family:arial, '宋体', sans-serif;font-size:14px;text-indent:28px;background-color:rgb(255,255,255);">主存储器</a><span style="color:rgb(51,51,51);font-family:arial, '宋体', sans-serif;font-size:14px;text-indent:28px;background-color:rgb(255,255,255);">与</span><a href="https://baike.baidu.com/item/%E8%BE%93%E5%85%A5%E8%AE%BE%E5%A4%87" rel="nofollow" style="color:rgb(19,110,194);font-family:arial, '宋体', sans-serif;font-size:14px;text-indent:28px;background-color:rgb(255,255,255);">输入设备</a><span style="color:rgb(51,51,51);font-family:arial, '宋体', sans-serif;font-size:14px;text-indent:28px;background-color:rgb(255,255,255);">、</span><a href="https://baike.baidu.com/item/%E8%BE%93%E5%87%BA%E8%AE%BE%E5%A4%87" rel="nofollow" style="color:rgb(19,110,194);font-family:arial, '宋体', sans-serif;font-size:14px;text-indent:28px;background-color:rgb(255,255,255);">输出设备</a><span style="color:rgb(51,51,51);font-family:arial, '宋体', sans-serif;font-size:14px;text-indent:28px;background-color:rgb(255,255,255);">或</span><a href="https://baike.baidu.com/item/%E5%A4%96%E5%AD%98%E5%82%A8%E5%99%A8" rel="nofollow" style="color:rgb(19,110,194);font-family:arial, '宋体', sans-serif;font-size:14px;text-indent:28px;background-color:rgb(255,255,255);">外存储器</a><span style="color:rgb(51,51,51);font-family:arial, '宋体', sans-serif;font-size:14px;text-indent:28px;background-color:rgb(255,255,255);">之间进行传输的数据单位。</span><br></span></span></span></div>
<div><span style="font-family:'微软雅黑';color:#454545;"><span style="color:rgb(69,69,69);font-family:'微软雅黑';font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-family:'PingFang SC', 'Lantinghei SC', 'Microsoft YaHei', arial, '宋体', sans-serif, tahoma;font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-family:arial, '宋体', sans-serif;font-size:14px;text-indent:28px;background-color:rgb(255,255,255);"></span></span></span></span>
<p style="color:rgb(51,51,51);font-family:'Hiragino Sans GB W3', 'Hiragino Sans GB', Arial, Helvetica, simsun, u5b8bu4f53;text-align:left;background-color:rgb(255,255,255);">
2 块结构组成</p>
<p style="color:rgb(51,51,51);font-family:'Hiragino Sans GB W3', 'Hiragino Sans GB', Arial, Helvetica, simsun, u5b8bu4f53;text-align:left;background-color:rgb(255,255,255);">
在块中可以存储各种类型的数据，如表数据，索引数据，簇数据等。无论块中存放何种类型数据，块都具有相同的结构。</p>
<p style="color:rgb(51,51,51);font-family:'Hiragino Sans GB W3', 'Hiragino Sans GB', Arial, Helvetica, simsun, u5b8bu4f53;text-align:left;background-color:rgb(255,255,255);">
块头部： 包含块的一般属性信息，如块的物理地址、块所属的段的类型（如数据段、索引段、回退段等）。</p>
<p style="color:rgb(51,51,51);font-family:'Hiragino Sans GB W3', 'Hiragino Sans GB', Arial, Helvetica, simsun, u5b8bu4f53;text-align:left;background-color:rgb(255,255,255);">
表目录： 如果块中存储的数据是表数据（表中的一行或多行记录），则在表目录中保存关于这个表的相关信息。</p>
<p style="color:rgb(51,51,51);font-family:'Hiragino Sans GB W3', 'Hiragino Sans GB', Arial, Helvetica, simsun, u5b8bu4f53;text-align:left;background-color:rgb(255,255,255);">
行目录： 如果块中存储的数据是表数据（表中的一行或多行记录），则在行目录中保存这些记录的相关信息，比如<strong>ROWID</strong>等。</p>
<p style="color:rgb(51,51,51);font-family:'Hiragino Sans GB W3', 'Hiragino Sans GB', Arial, Helvetica, simsun, u5b8bu4f53;text-align:left;background-color:rgb(255,255,255);">
块头部、表目录和行目录共同组成的块头部信息区（Overhead）。块头部信息区中并不存放实际的数据库数据，它的地位类似于硬盘逻辑分区中的文件分配表（FAT）。</p>
<p style="color:rgb(51,51,51);font-family:'Hiragino Sans GB W3', 'Hiragino Sans GB', Arial, Helvetica, simsun, u5b8bu4f53;text-align:left;background-color:rgb(255,255,255);">
如果头部信息区损坏，整个块将失效，块中的存储数据将丢失。头部信息区中某些部分的大小是固定的，某些部分大小是变化的，它的总大小介于84-107KB之间。</p>
<p style="color:rgb(51,51,51);font-family:'Hiragino Sans GB W3', 'Hiragino Sans GB', Arial, Helvetica, simsun, u5b8bu4f53;text-align:left;background-color:rgb(255,255,255);">
创建表时，设置<strong>INITRANS</strong>与<strong>MAXTRANS</strong>两个存储参数，功能是指定所允许的并发操作这个表的事务数目。每当一个事务访问表中某个数据块时，事务将会在相应的数据块头部信息区中保存一个条目，用于标记该事务正在使用这个数据块。当头部信息区用于存储事务条目的空间用尽后，在当前使用这个数据块的事务终止之前，<a href="http://ailandle.blog.163.com/blog/static/6566817020089100145616/;" rel="nofollow" style="line-height:28px;color:rgb(85,108,136);"><span style="line-height:28px;"><strong><span style="color:#000000;line-height:28px;">其他</span></strong></span></a>事务再访问这个数据块。</p>
<p style="color:rgb(51,51,51);font-family:'Hiragino Sans GB W3', 'Hiragino Sans GB', Arial, Helvetica, simsun, u5b8bu4f53;text-align:left;background-color:rgb(255,255,255);">
 </p>
<p style="color:rgb(51,51,51);font-family:'Hiragino Sans GB W3', 'Hiragino Sans GB', Arial, Helvetica, simsun, u5b8bu4f53;text-align:left;background-color:rgb(255,255,255);">
3 块的存储区</p>
<p style="color:rgb(51,51,51);font-family:'Hiragino Sans GB W3', 'Hiragino Sans GB', Arial, Helvetica, simsun, u5b8bu4f53;text-align:left;background-color:rgb(255,255,255);">
空间空间：块中尚未使用的存储空间。向块中写入数据会减少块空闲时间，另外，修改块中已有的数据也有可能会减少空间空间。</p>
<p style="color:rgb(51,51,51);font-family:'Hiragino Sans GB W3', 'Hiragino Sans GB', Arial, Helvetica, simsun, u5b8bu4f53;text-align:left;background-color:rgb(255,255,255);">
Note：当执行Update操作时，若快中有足够空间空间，则记录会完整保存一个块中；否则会申请使用新的块，从而导致一条记录被存放在多个不相邻的块中，产生记录链接想象。降低数据库查询性能。</p>
<p style="color:rgb(51,51,51);font-family:'Hiragino Sans GB W3', 'Hiragino Sans GB', Arial, Helvetica, simsun, u5b8bu4f53;text-align:left;background-color:rgb(255,255,255);">
行空间：块中已使用的空间。行空间中保存数据库对象中的数据，比如表中的一行或多行记录，索引中的多个索引条目等。</p>
<p style="color:rgb(51,51,51);font-family:'Hiragino Sans GB W3', 'Hiragino Sans GB', Arial, Helvetica, simsun, u5b8bu4f53;text-align:left;background-color:rgb(255,255,255);">
空闲空间和行空间共同构成块的存储区，空闲空间和行空间的总和即是块的总容量。</p>
<p style="color:rgb(51,51,51);font-family:'Hiragino Sans GB W3', 'Hiragino Sans GB', Arial, Helvetica, simsun, u5b8bu4f53;text-align:left;background-color:rgb(255,255,255);">
 </p>
<p style="color:rgb(51,51,51);font-family:'Hiragino Sans GB W3', 'Hiragino Sans GB', Arial, Helvetica, simsun, u5b8bu4f53;text-align:left;background-color:rgb(255,255,255);">
3 .数据块的管理：</p>
<p style="color:rgb(51,51,51);font-family:'Hiragino Sans GB W3', 'Hiragino Sans GB', Arial, Helvetica, simsun, u5b8bu4f53;text-align:left;background-color:rgb(255,255,255);">
<span style="color:rgb(51,51,51);font-family:'Hiragino Sans GB W3', 'Hiragino Sans GB', Arial, Helvetica, simsun, u5b8bu4f53;background-color:rgb(255,255,255);">为避免记录产生记录链接现象，</span><span style="line-height:28px;"><strong><span style="color:#000000;line-height:28px;">DBA</span></strong></span><span style="color:rgb(51,51,51);font-family:'Hiragino Sans GB W3', 'Hiragino Sans GB', Arial, Helvetica, simsun, u5b8bu4f53;background-color:rgb(255,255,255);"> 可通过设置</span><span style="color:rgb(51,51,51);font-family:'Hiragino Sans GB W3', 'Hiragino Sans GB', Arial, Helvetica, simsun, u5b8bu4f53;text-align:left;background-color:rgb(255,255,255);">PCTFREE</span><span style="color:rgb(51,51,51);font-family:'Hiragino Sans GB W3', 'Hiragino Sans GB', Arial, Helvetica, simsun, u5b8bu4f53;background-color:rgb(255,255,255);">和</span><span style="color:rgb(51,51,51);font-family:'Hiragino Sans GB W3', 'Hiragino Sans GB', Arial, Helvetica, simsun, u5b8bu4f53;text-align:left;background-color:rgb(255,255,255);">PCTUSED</span><span style="color:rgb(51,51,51);font-family:'Hiragino Sans GB W3', 'Hiragino Sans GB', Arial, Helvetica, simsun, u5b8bu4f53;background-color:rgb(255,255,255);">两个存储参数，通过手工方式来管理块的空闲存储空间。</span><br></p>
<p style="color:rgb(51,51,51);font-family:'Hiragino Sans GB W3', 'Hiragino Sans GB', Arial, Helvetica, simsun, u5b8bu4f53;text-align:left;background-color:rgb(255,255,255);">
</p>
<p style="color:rgb(51,51,51);font-family:'Hiragino Sans GB W3', 'Hiragino Sans GB', Arial, Helvetica, simsun, u5b8bu4f53;text-align:left;background-color:rgb(255,255,255);">
<strong>PCTFREE</strong>最小空间比例（百分数）</p>
<span style="color:rgb(51,51,51);font-family:'Hiragino Sans GB W3', 'Hiragino Sans GB', Arial, Helvetica, simsun, u5b8bu4f53;text-align:left;background-color:rgb(255,255,255);">PCTUSED</span><span style="color:rgb(51,51,51);font-family:'Hiragino Sans GB W3', 'Hiragino Sans GB', Arial, Helvetica, simsun, u5b8bu4f53;background-color:rgb(255,255,255);">制定标记可用比例（百分比）</span>
<p style="color:rgb(51,51,51);font-family:'Hiragino Sans GB W3', 'Hiragino Sans GB', Arial, Helvetica, simsun, u5b8bu4f53;text-align:left;background-color:rgb(255,255,255);">
两个参数和不能超过100</p>
<h2>                              四 读写策略</h2>
<div>
<div class="postTitle" style="font-size:14.7px;font-weight:bold;color:rgb(75,75,75);font-family:verdana, Arial, helvetica, 'sans-seriff';">
<a id="cb_post_title_url" class="postTitle2" href="http://www.cnblogs.com/SleepyLemon/p/8343291.html" rel="nofollow" style="color:rgb(100,100,100);">HDFS读写策略</a></div>
<div id="cnblogs_post_body" class="blogpost-body" style="color:rgb(75,75,75);font-family:verdana, Arial, helvetica, 'sans-seriff';font-size:12px;">
<p><span style="line-height:1.5;">数据的读取过程：</span></p>
<p><span style="line-height:1.5;"> <img src="https://images2017.cnblogs.com/blog/1323420/201801/1323420-20180124195522194-2074294129.png" alt="" style="border:0px;"></span></p>
<p> </p>
<p><span style="line-height:1.5;">数据读取：</span></p>
<ol><li style="list-style-type:decimal;"><span style="line-height:1.5;font-size:16px;">客户端调用FileSystem 实例的open 方法，获得这个文件对应的输入流InputStream。</span></li><li style="list-style-type:decimal;"><span style="line-height:1.5;font-size:16px;">通过RPC 远程调用NameNode ，获得NameNode 中此文件对应的数据块保存位置，包括这个文件的副本的保存位置( 主要是各DataNode的地址) 。</span></li><li style="list-style-type:decimal;"><span style="line-height:1.5;font-size:16px;">获得输入流之后，客户端调用read 方法读取数据。选择最近的DataNode 建立连接并读取数据。</span></li><li style="list-style-type:decimal;"><span style="line-height:1.5;font-size:16px;">如果客户端和其中一个DataNode 位于同一机器(比如MapReduce 过程中的mapper 和reducer)，那么就会直接从本地读取数据。</span></li><li style="list-style-type:decimal;"><span style="line-height:1.5;font-size:16px;">到达数据块末端，关闭与这个DataNode 的连接，然后重新查找下一个数据块。</span></li><li style="list-style-type:decimal;"><span style="line-height:1.5;font-size:16px;">不断执行第2 - 5 步直到数据全部读完。</span></li><li style="list-style-type:decimal;"><span style="line-height:1.5;font-size:16px;">客户端调用close ，关闭输入流DF S InputStream。</span></li></ol><p><span style="line-height:1.5;"> </span></p>
<p><span style="line-height:1.5;">数据的写入过程：</span></p>
<p><span style="line-height:1.5;"> <img src="https://images2017.cnblogs.com/blog/1323420/201801/1323420-20180124195532022-1830937191.png" alt="" style="border:0px;"></span></p>
<p> </p>
<p><span style="line-height:1.5;">数据的写入：</span></p>
<ol><li style="list-style-type:decimal;"><span style="line-height:1.5;font-size:16px;">客户端调用FileSystem实例的create方法，创建文件。NameNode通过一些检查，比如文件是否存在，客户端是否拥有创建权限等;通过检查之后，在NameNode添加文件信息。注意，因为此时文件没有数据，所以NameNode上也没有文件数据块的信息。</span></li><li style="list-style-type:decimal;"><span style="line-height:1.5;font-size:16px;">创建结束之后，HDFS会返回一个输出流DFSDataOutputStream给客户端。</span></li><li style="list-style-type:decimal;"><span style="line-height:1.5;font-size:16px;">客户端调用输出流DFSDataOutputStream的write方法向HDFS中对应的文件写入数据。</span></li><li style="list-style-type:decimal;"><span style="line-height:1.5;font-size:16px;">数据首先会被分包，这些分包会写人一个输出流的内部队列Data队列中，接收完数据分包，输出流DFSDataOutputStream会向NameNode申请保存文件和副本数据块的若干个DataNode，这若干个DataNode会形成一个数据传输管道。DFSDataOutputStream将数据传输给距离上最短的DataNode，这个DataNode接收到数据包之后会传给下一个DataNode。数据在各DataNode之间通过管道流动，而不是全部由输出流分发，以减少传输开销。</span></li><li style="list-style-type:decimal;"><span style="line-height:1.5;font-size:16px;">因为各DataNode位于不同机器上，数据需要通过网络发送，所以，为了保证所有DataNode的数据都是准确的，接收到数据的DataNode要向发送者发送确认包(ACK Packet ) 。对于某个数据块，只有当DFSDataOutputStream收到了所有DataNode的正确ACK，才能确认传输结束。DFSDataOutputStream内部专门维护了一个等待ACK
 队列，这一队列保存已经进入管道传输数据、但是并未被完全确认的数据包。</span></li><li style="list-style-type:decimal;"><span style="line-height:1.5;font-size:16px;">不断执行第3 - 5 步直到数据全部写完，客户端调用close 关闭文件。</span></li><li style="list-style-type:decimal;"><span style="line-height:1.5;font-size:16px;">DFSDataInputStream 继续等待直到所有数据写人完毕并被确认，调用complete 方法通知NameNode 文件写入完成。NameNode 接收到complete 消息之后，等待相应数量的副本写入完毕后，告知客户端。</span></li></ol></div>
<div class="clear" style="clear:both;color:rgb(75,75,75);font-family:verdana, Arial, helvetica, 'sans-seriff';font-size:12px;">
</div>
<div id="blog_post_info_block" style="color:rgb(75,75,75);font-family:verdana, Arial, helvetica, 'sans-seriff';font-size:12px;">
<div id="BlogPostCategory"></div>
<div id="EntryTag"></div>
<div id="blog_post_info">
<div id="green_channel" style="border:1px dashed #C0C0C0;text-align:center;">
<a id="green_channel_digg" style="display:inline-block;font-weight:bold;vertical-align:middle;color:rgb(255,255,255) !important;border:none !important;">好文要顶</a> <a id="green_channel_follow" style="display:inline-block;font-weight:bold;vertical-align:middle;color:rgb(255,255,255) !important;border:none !important;">关注我</a> <a id="green_channel_favorite" style="display:inline-block;font-weight:bold;vertical-align:middle;color:rgb(255,255,255) !important;border:none !important;">收藏该文</a> <a id="green_channel_weibo" title="分享至新浪微博" style="display:inline-block;font-weight:bold;vertical-align:middle;color:rgb(255,255,255) !important;border:none !important;"><img src="https://common.cnblogs.com/images/icon_weibo_24.png" alt="" style="border:none;vertical-align:middle;margin-left:5px;"></a> <a id="green_channel_wechat" title="分享至微信" style="display:inline-block;font-weight:bold;vertical-align:middle;color:rgb(255,255,255) !important;border:none !important;"><img src="https://common.cnblogs.com/images/wechat.png" alt="" style="border:medium none;margin-left:5px;vertical-align:middle;"></a></div>
</div>
</div>
<br></div>
<br></div>
 </div>
<div><br></div>
            </div>
                </div>