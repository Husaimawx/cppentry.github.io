---
layout:     post
title:      Kafka快速上手教程  2
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<h1 id="kafka-" style="font-size:2.25em;margin-left:0px;line-height:1.2;color:rgb(51,51,51);border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(238,238,238);">
使用 Java 操作 Kafka</h1>
<h3 id="1-1-" style="line-height:1.43;color:rgb(51,51,51);font-size:1.5em;">
1.1 实验内容</h3>
<p style="font-size:15px;color:rgb(51,51,51);">
前面一个课程讲解了 Kafka 的一些入门知识，本节课将介绍如何使用 Java 语言进行 Kafka 生产者和消费者代码的编写，毕竟大家使用 Kafka 集群是想发送消息到 Kafka ，然后从 Kafka 取出消息。学习完本课程，你将对 kafka 有深入的了解，很快上手。</p>
<h3 id="1-2-" style="line-height:1.43;color:rgb(51,51,51);font-size:1.5em;">
1.2 课程来源</h3>
<p style="font-size:15px;color:rgb(51,51,51);">
参考资料：<a href="http://blog.sina.com.cn/s/blog_67196ddc0102w80o.html" rel="nofollow" style="color:rgb(64,120,192);text-decoration:none;background-color:transparent;">http://blog.sina.com.cn/s/blog_67196ddc0102w80o.html</a></p>
<h3 id="1-3-" style="line-height:1.43;color:rgb(51,51,51);font-size:1.5em;">
1.3. 实验知识点</h3>
<ul style="color:rgb(51,51,51);font-size:16px;line-height:25.6px;"><li style="font-size:15px;">生产者</li><li style="font-size:15px;">消费者</li><li style="font-size:15px;">java代码编写</li></ul><h3 id="1-4-" style="line-height:1.43;color:rgb(51,51,51);font-size:1.5em;">
1.4 实验环境</h3>
<ul style="color:rgb(51,51,51);font-size:16px;line-height:25.6px;"><li style="font-size:15px;">hadoop 2.6.1</li><li style="font-size:15px;">kafka_2.10-0.8.1.1</li><li style="font-size:15px;">Xfce 终端</li></ul><h3 id="1-5-" style="line-height:1.43;color:rgb(51,51,51);font-size:1.5em;">
1.5 适合人群</h3>
<p style="font-size:15px;color:rgb(51,51,51);">
本课程属于中等难度级别，适合对大数据开发有兴趣，需要进行大量日志传输，并且有 Kafka 基础的人群。</p>
<h2 id="-" style="line-height:1.225;color:rgb(51,51,51);font-size:1.75em;border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(238,238,238);">
二、实验步骤</h2>
<h3 id="2-1-" style="line-height:1.43;color:rgb(51,51,51);font-size:1.5em;">
2.1　准备工作</h3>
<p style="font-size:15px;color:rgb(51,51,51);">
我们已经在实验楼环境里下载并配置启动 hadoop-2.6.1 所需的文件，免除您配置文件的麻烦，您可以在 <code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.5px;color:rgb(199,37,78);background-color:rgb(249,242,244);">/opt</code> 找到，只需格式化并启动
 hadoop 进程即可。</p>
<p style="font-size:15px;color:rgb(51,51,51);">
双击打开桌面上的 Xfce 终端，用 <code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.5px;color:rgb(199,37,78);background-color:rgb(249,242,244);">sudo</code> 命令切换到 hadoop 用户，hadoop 用户密码为 hadoop，用 <code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.5px;color:rgb(199,37,78);background-color:rgb(249,242,244);">cd</code> 命令进入 <code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.5px;color:rgb(199,37,78);background-color:rgb(249,242,244);">/opt</code>目录。</p>
<pre style="overflow:auto;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;line-height:1.42857;color:rgb(51,51,51);border:1px solid rgb(204,204,204);background-color:rgb(245,245,245);"><code class="hljs ruby" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(248,248,242);display:block;background:rgb(35,36,31);">$ su hadoop
$ cd /opt/
</code></pre>
<p style="font-size:15px;color:rgb(51,51,51);">
<img src="https://dn-anything-about-doc.qbox.me/document-uid214292labid2657timestamp1491894012889.png/wm" alt="此处输入图片的描述" style="border:0px none;vertical-align:middle;"></p>
<p style="font-size:15px;color:rgb(51,51,51);">
在 <code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.5px;color:rgb(199,37,78);background-color:rgb(249,242,244);">/opt</code> 目录下格式化 hadoop。</p>
<pre style="overflow:auto;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;line-height:1.42857;color:rgb(51,51,51);border:1px solid rgb(204,204,204);background-color:rgb(245,245,245);"><code class="hljs perl" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(248,248,242);display:block;background:rgb(35,36,31);">$ hadoop-<span class="hljs-number" style="color:rgb(174,129,255);font-size:15px;">2.6</span>.<span class="hljs-number" style="color:rgb(174,129,255);font-size:15px;">1</span>/bin/hdfs namenode -<span class="hljs-keyword" style="color:rgb(249,38,114);font-size:15px;">format</span>
</code></pre>
<p style="font-size:15px;color:rgb(51,51,51);">
<img src="https://dn-anything-about-doc.qbox.me/document-uid214292labid2657timestamp1491894114007.png/wm" alt="此处输入图片的描述" style="border:0px none;vertical-align:middle;"></p>
<p style="font-size:15px;color:rgb(51,51,51);">
在 <code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.5px;color:rgb(199,37,78);background-color:rgb(249,242,244);">/opt</code> 目录下启动 hadoop 进程。</p>
<pre style="overflow:auto;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;line-height:1.42857;color:rgb(51,51,51);border:1px solid rgb(204,204,204);background-color:rgb(245,245,245);"><code class="hljs ruby" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(248,248,242);display:block;background:rgb(35,36,31);">$ hadoop-<span class="hljs-number" style="color:rgb(174,129,255);font-size:15px;">2.6</span>.<span class="hljs-number" style="color:rgb(174,129,255);font-size:15px;">1</span>/sbin/start-all.sh
</code></pre>
<p style="font-size:15px;color:rgb(51,51,51);">
<img src="https://dn-anything-about-doc.qbox.me/document-uid214292labid2657timestamp1491894286864.png/wm" alt="此处输入图片的描述" style="border:0px none;vertical-align:middle;"></p>
<p style="font-size:15px;color:rgb(51,51,51);">
用 <code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.5px;color:rgb(199,37,78);background-color:rgb(249,242,244);">jps</code> 查看 hadoop 进程是否启动。</p>
<p style="font-size:15px;color:rgb(51,51,51);">
<img src="https://dn-anything-about-doc.qbox.me/document-uid214292labid2657timestamp1491894495396.png/wm" alt="此处输入图片的描述" style="border:0px none;vertical-align:middle;"></p>
<p style="font-size:15px;color:rgb(51,51,51);">
在 /opt/ 目录下，用 <code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.5px;color:rgb(199,37,78);background-color:rgb(249,242,244);">wget</code> 命令下载 <code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.5px;color:rgb(199,37,78);background-color:rgb(249,242,244);">slf4j-1.7.22.zip</code> 并解压。</p>
<pre style="overflow:auto;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;line-height:1.42857;color:rgb(51,51,51);border:1px solid rgb(204,204,204);background-color:rgb(245,245,245);"><code class="lang-bash hljs" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(248,248,242);display:block;background:rgb(35,36,31);">$ sudo wget http://labfile.oss.aliyuncs.com/courses/785/slf4j-1.7.22.zip
$ sudo  unzip slf4j-1.7.22.zip
</code></pre>
<p style="font-size:15px;color:rgb(51,51,51);">
<img src="https://dn-anything-about-doc.qbox.me/document-uid214292labid2666timestamp1489654711102.png/wm" alt="此处输入图片的描述" style="border:0px none;vertical-align:middle;"></p>
<p style="font-size:15px;color:rgb(51,51,51);">
<img src="https://dn-anything-about-doc.qbox.me/document-uid214292labid2666timestamp1489654722816.png/wm" alt="此处输入图片的描述" style="border:0px none;vertical-align:middle;"></p>
<p style="font-size:15px;color:rgb(51,51,51);">
复制 <code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.5px;color:rgb(199,37,78);background-color:rgb(249,242,244);">slf4j-nop-1.7.22.jar</code> 到Kafka 解压包的 <code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.5px;color:rgb(199,37,78);background-color:rgb(249,242,244);">lib</code> 目录下。</p>
<pre style="overflow:auto;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;line-height:1.42857;color:rgb(51,51,51);border:1px solid rgb(204,204,204);background-color:rgb(245,245,245);"><code class="lang-bash hljs" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(248,248,242);display:block;background:rgb(35,36,31);">$ sudo cp slf4j-1.7.22/slf4j-nop-1.7.22.jar kafka_2.10-0.8.1.1/libs
</code></pre>
<p style="font-size:15px;color:rgb(51,51,51);">
<img src="https://dn-anything-about-doc.qbox.me/document-uid214292labid2666timestamp1489654938606.png/wm" alt="此处输入图片的描述" style="border:0px none;vertical-align:middle;"></p>
<p style="font-size:15px;color:rgb(51,51,51);">
双击打开 eclipse -&gt; file -&gt; New -&gt; Java Project</p>
<p style="font-size:15px;color:rgb(51,51,51);">
<img src="https://dn-anything-about-doc.qbox.me/document-uid214292labid2666timestamp1489652263621.png/wm" alt="此处输入图片的描述" style="border:0px none;vertical-align:middle;"></p>
<p style="font-size:15px;color:rgb(51,51,51);">
输入 Project name -&gt; 选择 javaSe-1.7-&gt; Finish</p>
<p style="font-size:15px;color:rgb(51,51,51);">
<img src="https://dn-anything-about-doc.qbox.me/document-uid214292labid2666timestamp1489652474962.png/wm" alt="此处输入图片的描述" style="border:0px none;vertical-align:middle;"></p>
<p style="font-size:15px;color:rgb(51,51,51);">
右键 src -&gt; New -&gt; Package</p>
<p style="font-size:15px;color:rgb(51,51,51);">
<img src="https://dn-anything-about-doc.qbox.me/document-uid214292labid2666timestamp1489652636477.png/wm" alt="此处输入图片的描述" style="border:0px none;vertical-align:middle;"></p>
<p style="font-size:15px;color:rgb(51,51,51);">
输入包名 -&gt; Finish</p>
<p style="font-size:15px;color:rgb(51,51,51);">
<img src="https://dn-anything-about-doc.qbox.me/document-uid214292labid2666timestamp1489652833817.png/wm" alt="此处输入图片的描述" style="border:0px none;vertical-align:middle;"></p>
<p style="font-size:15px;color:rgb(51,51,51);">
添加 kafka jar</p>
<p style="font-size:15px;color:rgb(51,51,51);">
<img src="https://dn-anything-about-doc.qbox.me/document-uid214292labid2666timestamp1489653007972.png/wm" alt="此处输入图片的描述" style="border:0px none;vertical-align:middle;"></p>
<p style="font-size:15px;color:rgb(51,51,51);">
点击 Libraries-&gt;Add External JARs...-&gt;选中已经下载的 kafka libs目录下的jar-&gt;确定</p>
<p style="font-size:15px;color:rgb(51,51,51);">
<img src="https://dn-anything-about-doc.qbox.me/document-uid214292labid2666timestamp1489655157340.png/wm" alt="此处输入图片的描述" style="border:0px none;vertical-align:middle;"></p>
<p style="font-size:15px;color:rgb(51,51,51);">
点击 OK</p>
<p style="font-size:15px;color:rgb(51,51,51);">
<img src="https://dn-anything-about-doc.qbox.me/document-uid214292labid2666timestamp1489655201163.png/wm" alt="此处输入图片的描述" style="border:0px none;vertical-align:middle;"></p>
<h3 id="2-2-produce" style="line-height:1.43;color:rgb(51,51,51);font-size:1.5em;">
2.2 编写 Produce</h3>
<p style="font-size:15px;color:rgb(51,51,51);">
右键 sys.kafka -&gt; New -&gt; Class</p>
<p style="font-size:15px;color:rgb(51,51,51);">
<img src="https://dn-anything-about-doc.qbox.me/document-uid214292labid2666timestamp1489655638125.png/wm" alt="此处输入图片的描述" style="border:0px none;vertical-align:middle;"></p>
<p style="font-size:15px;color:rgb(51,51,51);">
输入类名 -&gt; 确认</p>
<p style="font-size:15px;color:rgb(51,51,51);">
<img src="https://dn-anything-about-doc.qbox.me/document-uid214292labid2666timestamp1489655725004.png/wm" alt="此处输入图片的描述" style="border:0px none;vertical-align:middle;"></p>
<p style="font-size:15px;color:rgb(51,51,51);">
<code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.5px;color:rgb(199,37,78);background-color:rgb(249,242,244);">ProducerDemo.java</code>如下。</p>
<pre style="overflow:auto;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;line-height:1.42857;color:rgb(51,51,51);border:1px solid rgb(204,204,204);background-color:rgb(245,245,245);"><code class="lang-bash hljs" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(248,248,242);display:block;background:rgb(35,36,31);">package syl.kafka;
import java.util.Properties;
import kafka.javaapi.producer.Producer;
import kafka.producer.KeyedMessage;
import kafka.producer.ProducerConfig;

public class ProducerDemo {
    public static void main(String[] args) throws Exception {
        Properties props = new Properties();
        //zk
        props.put(<span class="hljs-string" style="color:rgb(230,219,116);font-size:15px;">"zk.connect"</span>, <span class="hljs-string" style="color:rgb(230,219,116);font-size:15px;">"localhost:2181"</span>);
        //kafka broker
        props.put(<span class="hljs-string" style="color:rgb(230,219,116);font-size:15px;">"metadata.broker.list"</span>,<span class="hljs-string" style="color:rgb(230,219,116);font-size:15px;">"localhost:9092"</span>);

        //serialize
        props.put(<span class="hljs-string" style="color:rgb(230,219,116);font-size:15px;">"serializer.class"</span>, <span class="hljs-string" style="color:rgb(230,219,116);font-size:15px;">"kafka.serializer.StringEncoder"</span>);
        ProducerConfig config = new ProducerConfig(props);
        Producer&lt;String, String&gt; producer = new Producer&lt;String, String&gt;(config);

        // <span class="hljs-built_in" style="color:rgb(230,219,116);font-size:15px;">read</span> socket
        <span class="hljs-keyword" style="color:rgb(249,38,114);font-size:15px;">for</span> (int i = 1; i &lt;= 100000; i++) {
            //Thread.sleep(50);
            producer.send(new KeyedMessage&lt;String, String&gt;(<span class="hljs-string" style="color:rgb(230,219,116);font-size:15px;">"test"</span>,
                    <span class="hljs-string" style="color:rgb(230,219,116);font-size:15px;">"message: "</span> + i ));
        }

    }
}
</code></pre>
<h3 id="2-3-consumer" style="line-height:1.43;color:rgb(51,51,51);font-size:1.5em;">
2.3 编写 Consumer</h3>
<p style="font-size:15px;color:rgb(51,51,51);">
右键点击 syl.kafka -&gt; New -&gt; Class</p>
<p style="font-size:15px;color:rgb(51,51,51);">
<img src="https://dn-anything-about-doc.qbox.me/document-uid214292labid2666timestamp1489655638125.png/wm" alt="此处输入图片的描述" style="border:0px none;vertical-align:middle;"></p>
<p style="font-size:15px;color:rgb(51,51,51);">
输入类名 -&gt; 确认</p>
<p style="font-size:15px;color:rgb(51,51,51);">
<img src="https://dn-anything-about-doc.qbox.me/document-uid214292labid2666timestamp1489657971307.png/wm" alt="此处输入图片的描述" style="border:0px none;vertical-align:middle;"></p>
<p style="font-size:15px;color:rgb(51,51,51);">
<code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.5px;color:rgb(199,37,78);background-color:rgb(249,242,244);">ConsumerDemo.java</code>如下。</p>
<pre style="overflow:auto;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;line-height:1.42857;color:rgb(51,51,51);border:1px solid rgb(204,204,204);background-color:rgb(245,245,245);"><code class="lang-bash hljs" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(248,248,242);display:block;background:rgb(35,36,31);">package syl.kafka;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import kafka.consumer.Consumer;
import kafka.consumer.ConsumerConfig;
import kafka.consumer.ConsumerIterator;
import kafka.consumer.KafkaStream;
import kafka.javaapi.consumer.ConsumerConnector;
import kafka.message.MessageAndMetadata;

public class ConsumerDemo {
    private static final String topic = <span class="hljs-string" style="color:rgb(230,219,116);font-size:15px;">"test"</span>;
    private static final Integer threads = 1;
    public static void main(String[] args) {
        Properties props = new Properties();
        //zk
        props.put(<span class="hljs-string" style="color:rgb(230,219,116);font-size:15px;">"zookeeper.connect"</span>, <span class="hljs-string" style="color:rgb(230,219,116);font-size:15px;">"localhost:2181"</span>);
        //group
        props.put(<span class="hljs-string" style="color:rgb(230,219,116);font-size:15px;">"group.id"</span>, <span class="hljs-string" style="color:rgb(230,219,116);font-size:15px;">"group1"</span>);
        //offset
        props.put(<span class="hljs-string" style="color:rgb(230,219,116);font-size:15px;">"auto.offset.reset"</span>, <span class="hljs-string" style="color:rgb(230,219,116);font-size:15px;">"smallest"</span>);
        ConsumerConfig config = new ConsumerConfig(props);
        ConsumerConnector consumer = Consumer.createJavaConsumerConnector(config);
        Map&lt;String, Integer&gt; topicCountMap = new HashMap&lt;String, Integer&gt;();
        topicCountMap.put(topic, 1);
        Map&lt;String, List&lt;KafkaStream&lt;byte[], byte[]&gt;&gt;&gt; consumerMap = consumer.createMessageStreams(topicCountMap);
        List&lt;KafkaStream&lt;byte[], byte[]&gt;&gt; streams = consumerMap.get(topic);

        <span class="hljs-keyword" style="color:rgb(249,38,114);font-size:15px;">for</span>(final KafkaStream&lt;byte[], byte[]&gt; kafkaStream : streams){
            new Thread(new <span class="hljs-function" style="font-size:15px;"><span class="hljs-title" style="color:rgb(166,226,46);">Runnable</span></span>() {
                @Override
                public void <span class="hljs-function" style="font-size:15px;"><span class="hljs-title" style="color:rgb(166,226,46);">run</span></span>() {
                    <span class="hljs-keyword" style="color:rgb(249,38,114);font-size:15px;">for</span>(MessageAndMetadata&lt;byte[], byte[]&gt; mm : kafkaStream){
                        String msg = new String(mm.message());
                        System.out.println(msg);
                    }
                }

            }).start();

        }
    }
}
</code></pre>
<p style="font-size:15px;color:rgb(51,51,51);">
启动 ZooKeeper 服务器。</p>
<pre style="overflow:auto;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;line-height:1.42857;color:rgb(51,51,51);border:1px solid rgb(204,204,204);background-color:rgb(245,245,245);"><code class="lang-bash hljs" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(248,248,242);display:block;background:rgb(35,36,31);">$ /bin/zookeeper-server-start.sh config/zookeeper.properties &amp;
</code></pre>
<p style="font-size:15px;color:rgb(51,51,51);">
<img src="https://dn-anything-about-doc.qbox.me/document-uid214292labid2666timestamp1489721411456.png/wm" alt="此处输入图片的描述" style="border:0px none;vertical-align:middle;"></p>
<p style="font-size:15px;color:rgb(51,51,51);">
接下来，启动 kafka 服务器。</p>
<pre style="overflow:auto;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;line-height:1.42857;color:rgb(51,51,51);border:1px solid rgb(204,204,204);background-color:rgb(245,245,245);"><code class="lang-bash hljs" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(248,248,242);display:block;background:rgb(35,36,31);"><span class="hljs-variable" style="color:rgb(230,219,116);font-size:15px;">$bin</span>/kafka-server-start.sh config/server.properties &amp;
</code></pre>
<p style="font-size:15px;color:rgb(51,51,51);">
<img src="https://dn-anything-about-doc.qbox.me/document-uid214292labid2666timestamp1489721570739.png/wm" alt="此处输入图片的描述" style="border:0px none;vertical-align:middle;"></p>
<p style="font-size:15px;color:rgb(51,51,51);">
上节课我们创建了 test 主题，并且 <code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.5px;color:rgb(199,37,78);background-color:rgb(249,242,244);">ProducerDemo.java</code> 里指定了主题 test，所以可以直接使用。</p>
<p style="font-size:15px;color:rgb(51,51,51);">
<img src="https://dn-anything-about-doc.qbox.me/document-uid214292labid2666timestamp1489721817899.png/wm" alt="此处输入图片的描述" style="border:0px none;vertical-align:middle;"></p>
<p style="font-size:15px;color:rgb(51,51,51);">
若没有 test 主题，可以使用以下方式创建(若存在主题，跳过此步)。</p>
<pre style="overflow:auto;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;line-height:1.42857;color:rgb(51,51,51);border:1px solid rgb(204,204,204);background-color:rgb(245,245,245);"><code class="lang-bash hljs" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(248,248,242);display:block;background:rgb(35,36,31);">$ bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic <span class="hljs-built_in" style="color:rgb(230,219,116);font-size:15px;">test</span>
</code></pre>
<h3 id="2-4-" style="line-height:1.43;color:rgb(51,51,51);font-size:1.5em;">
2.4 测试</h3>
<p style="font-size:15px;color:rgb(51,51,51);">
用一个 comsumer 从 test 主题中读取信息</p>
<pre style="overflow:auto;font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13px;line-height:1.42857;color:rgb(51,51,51);border:1px solid rgb(204,204,204);background-color:rgb(245,245,245);"><code class="lang-bash hljs" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;color:rgb(248,248,242);display:block;background:rgb(35,36,31);">$ bin/kafka-console-consumer.sh --zookeeper localhost:2181 --from-beginning --topic <span class="hljs-built_in" style="color:rgb(230,219,116);font-size:15px;">test</span>
</code></pre>
<p style="font-size:15px;color:rgb(51,51,51);">
<img src="https://dn-anything-about-doc.qbox.me/document-uid214292labid2666timestamp1489722522209.png/wm" alt="此处输入图片的描述" style="border:0px none;vertical-align:middle;"></p>
<p style="font-size:15px;color:rgb(51,51,51);">
运行写好的 <code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.5px;color:rgb(199,37,78);background-color:rgb(249,242,244);">ProducerDemo.java</code>，同时观察消费者端的变化。</p>
<p style="font-size:15px;color:rgb(51,51,51);">
<img src="https://dn-anything-about-doc.qbox.me/document-uid214292labid2666timestamp1489722902625.png/wm" alt="此处输入图片的描述" style="border:0px none;vertical-align:middle;"></p>
<p style="font-size:15px;color:rgb(51,51,51);">
消费者 Xfce 终端不断消费消息。</p>
<p style="font-size:15px;color:rgb(51,51,51);">
<img src="https://dn-anything-about-doc.qbox.me/document-uid214292labid2666timestamp1489723053470.png/wm" alt="此处输入图片的描述" style="border:0px none;vertical-align:middle;"></p>
<p style="font-size:15px;color:rgb(51,51,51);">
停掉<code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.5px;color:rgb(199,37,78);background-color:rgb(249,242,244);">ProducerDemo.java</code>，先运行<code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.5px;color:rgb(199,37,78);background-color:rgb(249,242,244);">ConsumerDemo.java</code>。</p>
<p style="font-size:15px;color:rgb(51,51,51);">
<img src="https://dn-anything-about-doc.qbox.me/document-uid214292labid2666timestamp1489723434744.png/wm" alt="此处输入图片的描述" style="border:0px none;vertical-align:middle;"></p>
<p style="font-size:15px;color:rgb(51,51,51);">
等待接收信息。</p>
<p style="font-size:15px;color:rgb(51,51,51);">
<img src="https://dn-anything-about-doc.qbox.me/document-uid214292labid2666timestamp1489723880395.png/wm" alt="此处输入图片的描述" style="border:0px none;vertical-align:middle;"></p>
<p style="font-size:15px;color:rgb(51,51,51);">
查看 Eclipse 的 ConsumerDemo 的 Console 及消费者 Xfce 终端</p>
<p style="font-size:15px;color:rgb(51,51,51);">
再次运行 <code style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.5px;color:rgb(199,37,78);background-color:rgb(249,242,244);">ProducerDemo.java</code>。</p>
<p style="font-size:15px;color:rgb(51,51,51);">
<img src="https://dn-anything-about-doc.qbox.me/document-uid214292labid2666timestamp1489723951086.png/wm" alt="此处输入图片的描述" style="border:0px none;vertical-align:middle;"></p>
<p style="font-size:15px;color:rgb(51,51,51);">
观察结果。</p>
<p style="font-size:15px;color:rgb(51,51,51);">
<img src="https://dn-anything-about-doc.qbox.me/document-uid214292labid2666timestamp1489726530551.png/wm" alt="此处输入图片的描述" style="border:0px none;vertical-align:middle;"></p>
<h2 style="line-height:1.225;color:rgb(51,51,51);font-size:1.75em;border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(238,238,238);">
三、实验总结</h2>
<p style="font-size:15px;color:rgb(51,51,51);">
本节课程介绍了如何使用 java 编写生产者消费者并实践操作，对深入学习 kafka 有很大帮助。</p>
<h2 style="line-height:1.225;color:rgb(51,51,51);font-size:1.75em;border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(238,238,238);">
四、参考文献</h2>
<ul style="color:rgb(51,51,51);font-size:16px;line-height:25.6px;"><li style="font-size:15px;"><a href="http://kafka.apache.org/documentation.html%E3%80%82" rel="nofollow" style="color:rgb(64,120,192);text-decoration:none;background-color:transparent;">http://kafka.apache.org/documentation.html。</a></li></ul>            </div>
                </div>