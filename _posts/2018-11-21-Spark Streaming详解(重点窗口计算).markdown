---
layout:     post
title:      Spark Streaming详解(重点窗口计算)
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                <div class="iteye-blog-content-contain" style="color:rgb(0,0,0);font-family:Helvetica, Tahoma, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);"><p style="margin-bottom:0px;">前面有几篇关于Spark Streaming的博客，那会只是作为Spark入门，快速体验Spark之用，只是照着葫芦画瓢。本文结合Spark官网上Spark Streaming的编程指南对Spark Streaming进行介绍</p><h1 style="font-size:2em;line-height:1.5em;margin-top:0px;margin-bottom:.5em;padding:0px;color:#000000;">StreamingContext</h1><p style="margin-bottom:0px;">如同SparkContext一样，StreamingContext也是Spark Streaming应用程序通往Spark集群的通道，它的定义如下：</p><div class="dp-highlighter" style="font-family:Monaco, 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', Consolas, 'Courier New', monospace;font-size:12px;background-color:transparent;width:679px;margin-left:9px;padding:1px;"><div class="bar"><div class="tools" style="padding:3px;margin:0px;font-weight:bold;">Java代码  <a title="收藏这段代码" style="color:rgb(233,101,14);"><img class="star" src="http://bit1129.iteye.com/images/icon_star.png" alt="收藏代码" style="border:0px;"></a></div></div><ol start="1" class="dp-j" style="font-size:1em;line-height:1.4em;margin-bottom:1px;padding-top:2px;padding-bottom:2px;border:1px solid rgb(209,215,220);color:rgb(43,145,175);"><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;">/**</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> * Main entry point for Spark Streaming functionality. It provides methods used to create</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> * [[org.apache.spark.streaming.dstream.DStream]]s from various input sources. It can be either</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> * created by providing a Spark master URL and an appName, or from a org.apache.spark.SparkConf</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> * configuration (see core Spark documentation), or from an existing org.apache.spark.SparkContext.</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> * The associated SparkContext can be accessed using `context.sparkContext`. After</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> * creating and transforming DStreams, the streaming computation can be started and stopped</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> * using `context.start()` and `context.stop()`, respectively.</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> * `context.awaitTermination()` allows the current thread to wait for the termination</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> * of the context by `stop()` or by an exception.</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> */</span>  </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="keyword" style="color:rgb(127,0,85);font-weight:bold;">class</span> StreamingContext <span class="keyword" style="color:rgb(127,0,85);font-weight:bold;">private</span>[streaming] (  </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;">    sc_ : SparkContext,  </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;">    cp_ : Checkpoint,  </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;">    batchDur_ : Duration  </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;">  ) <span class="keyword" style="color:rgb(127,0,85);font-weight:bold;">extends</span> Logging {  </span></li></ol></div><p style="margin-bottom:0px;"> 通过类的文档注释，我们看到：</p><p style="margin-bottom:0px;">1. 提供了从各种输入数据源创建DStream的方法</p><p style="margin-bottom:0px;">2，参数中的batchDur_是Duration类型的对象，比如Second（10），这个参数的含义是the time interval at which streaming data will be divided into batches，也就是说，假如batchDur_为Second（10)表示Spark Streaming会把每10秒钟的数据作为一个Batch，而一个Batch就是一个RDD？<strong><span style="color:rgb(255,0,0);">是的，一个RDD的数据对应一个batchInterval累加读取到的数据</span></strong></p><p style="margin-bottom:0px;"> </p><h1 style="font-size:2em;line-height:1.5em;margin-top:0px;margin-bottom:.5em;padding:0px;color:#000000;">DStream</h1><div class="dp-highlighter" style="font-family:Monaco, 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', Consolas, 'Courier New', monospace;font-size:12px;background-color:transparent;width:679px;margin-left:9px;padding:1px;"><div class="bar"><div class="tools" style="padding:3px;margin:0px;font-weight:bold;">Java代码  <a title="收藏这段代码" style="color:rgb(233,101,14);"><img class="star" src="http://bit1129.iteye.com/images/icon_star.png" alt="收藏代码" style="border:0px;"></a></div></div><ol start="1" class="dp-j" style="font-size:1em;line-height:1.4em;margin-bottom:1px;padding-top:2px;padding-bottom:2px;border:1px solid rgb(209,215,220);color:rgb(43,145,175);"><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;">/**</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> * A Discretized Stream (DStream), the basic abstraction in Spark Streaming, is a continuous</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> * sequence of RDDs (of the same type) representing a continuous stream of data (see</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> * org.apache.spark.rdd.RDD in the Spark core documentation for more details on RDDs).</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> * DStreams can either be created from live data (such as, data from TCP sockets, Kafka, Flume,</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> * etc.) using a [[org.apache.spark.streaming.StreamingContext]] or it can be generated by</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> * transforming existing DStreams using operations such as `map`,</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> * `window` and `reduceByKeyAndWindow`. While a Spark Streaming program is running, each DStream</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> * periodically generates a RDD, either from live data or by transforming the RDD generated by a</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> * parent DStream.</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> *</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> * This class contains the basic operations available on all DStreams, such as `map`, `filter` and</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> * `window`. In addition, [[org.apache.spark.streaming.dstream.PairDStreamFunctions]] contains</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> * operations available only on DStreams of key-value pairs, such as `groupByKeyAndWindow` and</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> * `join`. These operations are automatically available on any DStream of pairs</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> * (e.g., DStream[(Int, Int)] through implicit conversions when</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> * `org.apache.spark.streaming.StreamingContext._` is imported.</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> *</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> * DStreams internally is characterized by a few basic properties:</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> *  - A list of other DStreams that the DStream depends on</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> *  - A time interval at which the DStream generates an RDD</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> *  - A function that is used to generate an RDD after each time interval</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> */</span>  </span></li></ol></div><p style="margin-bottom:0px;"> 从文档中，我们可以看到如下几点：</p><p style="margin-bottom:0px;">1. 对DStream实施map操作，会转换成另外一个DStream</p><p style="margin-bottom:0px;">2. DStream是一组连续的RDD序列，这些RDD中的元素的类型是一样的。<strong><span style="color:rgb(255,0,0);">DStream是一个时间上连续接收数据但是接受到的数据按照指定的时间（</span><span style="color:rgb(255,0,0);">batchInterval</span><span style="color:rgb(255,0,0);">）间隔切片，每个batchInterval都会构造一个RDD，因此，Spark Streaming实质上是根据batchInterval切分出来的RDD串，想象成糖葫芦，每个山楂就是一个batchInterval形成的RDD</span></strong></p><p style="margin-bottom:0px;">3. 对DStream实施windows或者reduceByKeyAndWindow操作，也是转换成另外一个DStream（window操作是stateful DStream Transformation）</p><p style="margin-bottom:0px;">4. DStream同RDD一样，也定义了map,filter,window等操作，同时，对于元素类型为(K,V)的pair DStream，Spark Streaming提供了一个隐式转换的类，PairStreamFunctions</p><p style="margin-bottom:0px;">5. DStream内部有如下三个特性：</p><p style="margin-bottom:0px;">-DStream也有依赖关系，一个DStream可能依赖于其它的DStream(依赖关系的产生，同RDD是一样的)</p><p style="margin-bottom:0px;">-DStream创建RDD的时间间隔，这个时间间隔是不是就是构造StreamingContext传入的第三个参数？<span style="color:rgb(255,0,0);"><strong>是的！</strong></span></p><p style="margin-bottom:0px;">-在时间间隔到达后，DStream创建RDD的方法</p><p style="margin-bottom:0px;"><br><img alt="" src="http://dl2.iteye.com/upload/attachment/0106/0678/3d80a2c6-bb16-3cf1-b463-b7bf622d599b.png" title="点击查看原始大小图片" class="magplus" width="700" height="153" style="border:0px;"></p><p style="margin-bottom:0px;"> 在DStream内部，DStream表现为一系列的RDD的序列，针对DStream的操作（比如map，filter）会转换到它底层的RDD的操 作，由这个图中可以看出来，0-1这段时间的数据累积构成了RDD@time1，1-2这段时间的数据累积构成了RDD@time2,。。。也就是说，在 Spark Streaming中，DStream中的每个RDD的数据是一个时间窗口的累计。</p><p style="margin-bottom:0px;"> </p><p style="margin-bottom:0px;"> </p><p style="margin-bottom:0px;">下图展示了对DStream实施转换算子flatMap操作。需要指出的是，RDD的转换操作是由Spark Engine来实现的，原因是Spark Engine接受了原始的RDD以及作用于RDD上的算子，在计算结果时才真正的对RDD实施算子操作</p><p style="margin-bottom:0px;"> <br><img alt="" src="http://dl2.iteye.com/upload/attachment/0106/0680/90654540-7997-3757-a962-361b9f8f6193.png" title="点击查看原始大小图片" class="magplus" width="700" height="248" style="border:0px;"><br> </p><p style="margin-bottom:0px;"> </p><p style="margin-bottom:0px;"> </p><p style="margin-bottom:0px;"> </p><p style="margin-bottom:0px;">按照下面这幅图所呈现出来的含义是，Spark Streaming用于将输入的数据进行分解成一个一个的RDD，每个RDD交由Spark Engine进行处理以得到最后的处理数据？<strong><span style="color:rgb(255,0,0);">是的！</span></strong></p><p style="margin-bottom:0px;"> </p><p style="margin-bottom:0px;"><img alt="" src="http://dl2.iteye.com/upload/attachment/0106/0676/3a4df688-1353-3c01-8a83-dd4684d2071a.png" title="点击查看原始大小图片" class="magplus" width="700" height="472" style="border:0px;"><br><strong><span style="color:rgb(255,0,0);">上图中，Spark Streaming模块用于将接受到数据定时的切分成RDD（上图中定义为batch of input data），这些RDD交由Spark Engine进行计算。Spark Streaming模块负责数据接收并定时转换成一系列RDD，Spark Engine对Spark Streaming送过来的RDD进行计算</span></strong></p><p style="margin-bottom:0px;"> </p><h1 style="font-size:2em;line-height:1.5em;margin-top:0px;margin-bottom:.5em;padding:0px;color:#000000;">DStream层次关系</h1><p style="margin-bottom:0px;"> </p><p style="margin-bottom:0px;"> </p><h1 style="font-size:2em;line-height:1.5em;margin-top:0px;margin-bottom:.5em;padding:0px;color:#000000;">DStream的window操作</h1><div class="dp-highlighter" style="font-family:Monaco, 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', Consolas, 'Courier New', monospace;font-size:12px;background-color:transparent;width:679px;margin-left:9px;padding:1px;"><div class="bar"><div class="tools" style="padding:3px;margin:0px;font-weight:bold;">Java代码  <a title="收藏这段代码" style="color:rgb(233,101,14);"><img class="star" src="http://bit1129.iteye.com/images/icon_star.png" alt="收藏代码" style="border:0px;"></a></div></div><ol start="1" class="dp-j" style="font-size:1em;line-height:1.4em;margin-bottom:1px;padding-top:2px;padding-bottom:2px;border:1px solid rgb(209,215,220);color:rgb(43,145,175);"><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;">/**</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> * Return a new DStream in which each RDD contains all the elements in seen in a</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> * sliding window of time over this DStream.</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> * @param windowDuration width of the window; must be a multiple of this DStream's</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> *                       batching interval</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> * @param slideDuration  sliding interval of the window (i.e., the interval after which</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> *                       the new DStream will generate RDDs); must be a multiple of this</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> *                       DStream's batching interval</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> */</span>  </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;">def window(windowDuration: Duration, slideDuration: Duration): DStream[T] = {  </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;">  <span class="keyword" style="color:rgb(127,0,85);font-weight:bold;">new</span> WindowedDStream(<span class="keyword" style="color:rgb(127,0,85);font-weight:bold;">this</span>, windowDuration, slideDuration)  </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;">}  </span></li></ol></div><p style="margin-bottom:0px;">DStream与window相关的两个参数是windowDuration和slideDuration，这两个参数究竟表示什么含义。通过window操作，DStream转换为了WindowedDStream</p><p style="margin-bottom:0px;"><strong><span style="color:rgb(255,0,0);">windowDuration表示的是对过去的一个windowDuration时间间隔的数据进行统计计算， windowDuration是intervalBatch的整数倍，也就是说，假如windowDuration=n*intervalBatch， 那么window操作就是对过去的n个RDD进行统计计算</span></strong><br>如下内容来自于Spark Streaming的官方文档：http://spark.apache.org/docs/latest/streaming-programming-guide.html</p><p style="margin-bottom:0px;"> </p><p style="margin-bottom:0px;"><strong><span style="color:rgb(255,0,0);">Spark Streaming也提供了窗口计算(window computations)的功能，允许我们每隔一段时间(sliding duration)对过去一个时间段内(window duration)的数据进行转换操作(tranformation).</span></strong></p><p style="margin-bottom:0px;"><strong><span style="color:rgb(255,0,0);">slideDruation控制着窗口计算的频度，windowDuration控制着窗口计算的时间跨度。</span><span style="color:rgb(255,0,0);">slideDruation和windowDuration都必须是batchInterval的整数倍</span><span style="color:rgb(255,0,0);">。假想如下一种场景：</span></strong></p><p style="margin-bottom:0px;"><strong><span style="color:rgb(255,0,0);">windowDuration=3*batchInterval，</span></strong></p><p style="margin-bottom:0px;"><strong><span style="color:rgb(255,0,0);">slideDuration=10*batchInterval,</span></strong></p><p style="margin-bottom:0px;"><strong><span style="color:rgb(255,0,0);">表示的含义是每个10个时间间隔对之前的3个RDD进行统计计算，也意味着有7个RDD没在window窗口的统计范围内。slideDuration的默认值是batchInterval</span></strong></p><p style="margin-bottom:0px;"> </p><p style="margin-bottom:0px;"> </p><p style="margin-bottom:0px;"><br>下图展示了滑动窗口的概念<br> </p><p style="margin-bottom:0px;"> </p><p style="margin-bottom:0px;"> <br><img alt="" src="http://dl2.iteye.com/upload/attachment/0106/0682/66f4f996-42ce-346f-aec9-6e607003b786.png" title="点击查看原始大小图片" class="magplus" width="700" height="273" style="border:0px;"><br>如上图所示，一个滑动窗口时间段（(sliding window length)内的所有RDD会进行合并以创建windowed DStream所对应的RDDD。每个窗口操作有两个参数：</p><p style="margin-bottom:0px;"> </p><ul style="margin-bottom:1.5em;"><li style="margin-top:0px;margin-bottom:.25em;margin-left:30px;padding:0px;">window length - The duration of the window (3 in the figure)，滑动窗口的时间跨度，指本次window操作所包含的过去的时间间隔（图中包含3个batch interval，可以理解时间单位）</li><li style="margin-top:0px;margin-bottom:.25em;margin-left:30px;padding:0px;">sliding interval - The interval at which the window operation is performed (2 in the figure).（窗口操作执行的频率，即每隔多少时间计算一次）</li></ul><p style="margin-bottom:0px;">These two parameters must be multiples of the batch interval of the source DStream (1 in the figure). 这表示，sliding window length的时间长度以及sliding interval都要是batch interval的整数倍。<br>batch interval是在构造StreamingContext时传入的(1 in the figure)<br><br></p><p style="margin-bottom:0px;">说明：</p><p style="margin-bottom:0px;">window length为什么是3？如椭圆形框，它是从第三秒开始算起(包括第三秒），第五秒结束，即包含3,4,5三个1秒，因此是3</p><p style="margin-bottom:0px;">sliding interval为什么是2？主要是看圆角矩形框的右边线，虚线的圆角矩形框的右边线在time 3结束， 实线的圆角矩形框的右边线在time 5结束，所以跨度是2。也就是看时间的最右侧即可，以右边线为基准，每个窗口操作(window length）占用了3个时间片。</p><p style="margin-bottom:0px;"><br><br>// Reduce last 30 seconds of data, every 10 seconds<br>val windowedWordCounts = pairs.reduceByKeyAndWindow((a:Int,b:Int) =&gt; (a + b), Seconds(30), Seconds(10))<br>表示每隔10秒钟对过去30秒钟产生的单词进行计数。这个方法有个不合理的地方，既然要求sliding window length和sliding interval都是batch interval的整数倍，那么此处为什么不用时间单位，而使用绝对的时间长度呢？</p><p style="margin-bottom:0px;"> </p><p style="margin-bottom:0px;"> </p><p style="margin-bottom:0px;"> </p><h1 style="font-size:2em;line-height:1.5em;margin-top:0px;margin-bottom:.5em;padding:0px;color:#000000;">Spark Streaming Sources</h1><p style="margin-bottom:0px;">这是Spark Streaming的数据输入源，包括两类：基本数据源和高级数据源</p><p style="margin-bottom:0px;"> </p><h3 style="font-size:1.2em;line-height:1.5em;margin-top:0px;margin-bottom:.5em;padding:0px;color:#000000;">基本数据源</h3></div><div class="iteye-blog-content-contain" style="color:rgb(0,0,0);font-family:Helvetica, Tahoma, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);"><ul style="margin-bottom:1.5em;"><li style="margin-top:0px;margin-bottom:.25em;margin-left:30px;padding:0px;">file systems</li><li style="margin-top:0px;margin-bottom:.25em;margin-left:30px;padding:0px;">socket connections</li><li style="margin-top:0px;margin-bottom:.25em;margin-left:30px;padding:0px;">Akka actors</li></ul><p style="margin-bottom:0px;">以上数据源，StreamingContext的API直接提供，</p><ul style="margin-bottom:1.5em;"><li style="margin-top:0px;margin-bottom:.25em;margin-left:30px;padding:0px;">fileStream，</li></ul><p style="margin-bottom:0px;">监听HDFS文件系统的新文件的创建，读取其中内容。如果文件已存在而内容有变化，是不会被监听到的，因此只能将文件内容在某个位置写好后，然后移动到Spark Streaming监听的目录,如果文件在这个目录下内容发生变化，则Spark Streaming无法监听到</p><p style="margin-bottom:0px;"> </p><p style="margin-bottom:0px;"><strong><span style="color:rgb(255,0,0);">另外需要注意的是，Spark Streaming启动后，Spark Streaming通过文件的最后修改时间(modify time)来判断一个新加入到监听目录的文件是否有效。如果一个较长时间没有更新的文件move到监听目录，Spark Streaming也不会对它进行读取进而计算</span></strong></p><p style="margin-bottom:0px;"> </p><div class="dp-highlighter" style="font-family:Monaco, 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', Consolas, 'Courier New', monospace;font-size:12px;background-color:transparent;width:679px;margin-left:9px;padding:1px;"><div class="bar"><div class="tools" style="padding:3px;margin:0px;font-weight:bold;">Java代码  <a title="收藏这段代码" style="color:rgb(233,101,14);"><img class="star" src="http://bit1129.iteye.com/images/icon_star.png" alt="收藏代码" style="border:0px;"></a></div></div><ol start="1" class="dp-j" style="font-size:1em;line-height:1.4em;margin-bottom:1px;padding-top:2px;padding-bottom:2px;border:1px solid rgb(209,215,220);color:rgb(43,145,175);"><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;">/**</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> * Create a input stream that monitors a Hadoop-compatible filesystem</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> * for new files and reads them using the given key-value types and input format.</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> * Files must be written to the monitored directory by "moving" them from another</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> * location within the same file system. File names starting with . are ignored.</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> * @param directory HDFS directory to monitor for new file</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> * @tparam K Key type for reading HDFS file</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> * @tparam V Value type for reading HDFS file</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> * @tparam F Input format for reading HDFS file</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> */</span>  </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;">def fileStream[  </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;">  K: ClassTag,  </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;">  V: ClassTag,  </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;">  F &lt;: NewInputFormat[K, V]: ClassTag  </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;">] (directory: String): InputDStream[(K, V)] = {  </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;">  <span class="keyword" style="color:rgb(127,0,85);font-weight:bold;">new</span> FileInputDStream[K, V, F](<span class="keyword" style="color:rgb(127,0,85);font-weight:bold;">this</span>, directory)  </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;">}  </span></li></ol></div><p style="margin-bottom:0px;"> </p><ul style="margin-bottom:1.5em;"><li style="margin-top:0px;margin-bottom:.25em;margin-left:30px;padding:0px;">socket connections</li></ul><p style="margin-bottom:0px;"> </p><div class="dp-highlighter" style="font-family:Monaco, 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', Consolas, 'Courier New', monospace;font-size:12px;background-color:transparent;width:679px;margin-left:9px;padding:1px;"><div class="bar"><div class="tools" style="padding:3px;margin:0px;font-weight:bold;">Java代码  <a title="收藏这段代码" style="color:rgb(233,101,14);"><img class="star" src="http://bit1129.iteye.com/images/icon_star.png" alt="收藏代码" style="border:0px;"></a></div></div><ol start="1" class="dp-j" style="font-size:1em;line-height:1.4em;margin-bottom:1px;padding-top:2px;padding-bottom:2px;border:1px solid rgb(209,215,220);color:rgb(43,145,175);"><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;">/**</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> * Create an input stream from TCP source hostname:port. Data is received using</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> * a TCP socket and the receive bytes it interepreted as object using the given</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> * converter.</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> * @param hostname      Hostname to connect to for receiving data</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> * @param port          Port to connect to for receiving data</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> * @param converter     Function to convert the byte stream to objects</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> * @param storageLevel  Storage level to use for storing the received objects</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> * @tparam T            Type of the objects received (after converting bytes to objects)</span> </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;"><span class="comment" style="color:rgb(0,130,0);padding:0px;margin:0px;width:auto;border:0px;"> */</span>  </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;">def socketStream[T: ClassTag](  </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;">    hostname: String,  </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;">    port: Int,  </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;">    converter: (InputStream) =&gt; Iterator[T],  </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;">    storageLevel: StorageLevel  </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;">  ): ReceiverInputDStream[T] = {  </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;">  <span class="keyword" style="color:rgb(127,0,85);font-weight:bold;">new</span> SocketInputDStream[T](<span class="keyword" style="color:rgb(127,0,85);font-weight:bold;">this</span>, hostname, port, converter, storageLevel)  </span></li><li style="font-size:1em;margin:0px 0px 0px 38px;padding:0px 0px 0px 10px;border-left:1px solid rgb(209,215,220);background-color:rgb(250,250,250);line-height:18px;"><span style="color:#000000;">}  </span></li></ol></div><p style="margin-bottom:0px;"> 问题： converter怎么使用？把InputStream转换为Iterator[T]集合</p><p style="margin-bottom:0px;"> </p><h3 style="font-size:1.2em;line-height:1.5em;margin-top:0px;margin-bottom:.5em;padding:0px;color:#000000;"> 高级数据源</h3><p style="margin-bottom:0px;"> </p>Source Artifact<table class="table"><tbody><tr><td style="font-size:1em;">Kafka</td><td style="font-size:1em;">spark-streaming-kafka_2.10</td></tr><tr><td style="font-size:1em;">Flume</td><td style="font-size:1em;">spark-streaming-flume_2.10</td></tr><tr><td style="font-size:1em;">Kinesis</td><td style="font-size:1em;">spark-streaming-kinesis-asl_2.10 [Amazon Software License]</td></tr><tr><td style="font-size:1em;">Twitter</td><td style="font-size:1em;">spark-streaming-twitter_2.10</td></tr><tr><td style="font-size:1em;">ZeroMQ</td><td style="font-size:1em;">spark-streaming-zeromq_2.10</td></tr><tr><td style="font-size:1em;">MQTT</td><td style="font-size:1em;">spark-streaming-mqtt_2.10</td></tr></tbody></table><h1 style="font-size:2em;line-height:1.5em;margin-top:0px;margin-bottom:.5em;padding:0px;color:#000000;"> </h1><h1 style="font-size:2em;line-height:1.5em;margin-top:0px;margin-bottom:.5em;padding:0px;color:#000000;">Spark Streaming注意点：</h1><p style="margin-bottom:0px;"> 1. When running a Spark Streaming program locally, do not use “local” or “local[1]” as the master URL. Either of these means that only one thread will be used for running tasks locally. If you are using a input DStream based on a receiver (e.g. sockets, Kafka, Flume, etc.), then the single thread will be used to run the receiver, leaving no thread for processing the received data. Hence, when running locally, always use “local[<em>n</em>]” as the master URL where <em>n</em> &gt; number of receivers to run (see <a href="http://spark.apache.org/docs/latest/configuration.html#spark-properties.html" rel="nofollow" style="color:rgb(233,101,14);">Spark Properties</a> for information on how to set the master).Extending the logic to running on a cluster, the number of cores allocated to the Spark Streaming application must be more than the number of receivers. Otherwise the system will receive data, but not be able to process them.</p></div>            </div>
                </div>