---
layout:     post
title:      kafka之二 文件存储
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/lisi1129/article/details/54707170				</div>
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<h3>一：kafka文件存储机制</h3>
<p>存储分为以下4个层次步骤：</p>
<ul style="color:rgb(51,51,51);font-family:'Lucida Grande', helvetica, arial, sans-serif;font-size:14px;line-height:21px;"><li style="list-style:disc outside;">topic中partition存储分布</li><li style="list-style:disc outside;">partiton中文件存储方式</li><li style="list-style:disc outside;">partiton中segment文件存储结构</li><li style="list-style:disc outside;">在partition中如何通过offset查找message  <br></li></ul><span style="font-size:12px;">1.1  topic 的存储</span>
<p></p>
<p><span style="font-size:12px;">       Kafka broker设置server.properties文件配置(参数log.dirs=/log/message)；日志保存在此目录下；比如建设一个topic名称为kafka-test,partitions为3；则在/log/message文件下面会生产三个partitions文件,名称为</span></p>
<p><span style="font-size:12px;">     |—kafka-test-0</span></p>
<p><span style="font-size:12px;">     |—kafka-test-1</span><span style="font-size:12px;"><br></span></p>
<p><span style="font-size:12px;">     |—kafka-test-2</span></p>
<p><span style="font-size:12px;"><br><span><span>日志文件中保存了一序列"log entries"(日志条目),每个log entry格式为"4个字节的数字N表示消息的长度" + "N个字节的消息内容";每个日志都有一个offset来唯一的标记一条消息,offset的值为8个字节的数字,表示此消息在此partition中所处的起始位置..每个partition在物理存储层面,有多个log file组成(称为segment).segmentfile的命名为"最小offset".kafka.例如"00000000000.kafka";其中"最小offset"表示此segment中起始消息的offset.</span></span></span></p>
<p><span><span><span></span></span></span><span><span></span></span></p>
<p><span>Partition中的每条Message由offset来表示它在这个partition中的偏移量，这个offset不是该Message在partition数据文件中的实际存储位置，而是逻辑上一个值，它唯一确定了partition中的一条Message。因此，可以认为offset是partition中Message的id。partition中的每条Message包含了以下三个属性：</span></p>
<span><span></span></span><span><span></span></span><span><span></span></span>
<ul><li><span>offset</span></li><li><span>MessageSize</span></li><li><span>data</span></li></ul><p><span>其中offset为long型，MessageSize为int32，表示data有多大，data为message的具体内容。它的格式和<a href="http://blog.csdn.net/jewes/article/details/42744855" rel="nofollow" title="Kafka通讯协议" style="color:rgb(51,102,153);text-decoration:none;">Kafka通讯协议</a>中介绍的MessageSet格式是一致。</span></p>
<p><span></span></p>
<h3 id="-" style="font-weight:bold;font-size:1.3em;">
<span style="font-size:12px;">kafka 数据文件分段</span><br></h3>
<p></p>
<p>Kafka解决查询效率的手段之一是将数据文件分段，比如有100条Message，它们的offset是从0到99。假设将数据文件分成5段，第一段为0-19，第二段为20-39，以此类推，每段放在一个单独的数据文件里面，数据文件以该段中最小的offset命名。这样在查找指定offset的Message的时候，用二分查找就可以定位到该Message在哪个段中。</p>
<h3 style="font-weight:bold;font-size:1.3em;">
<span style="font-size:12px;">数据文件建索引</span></h3>
<p>数据文件分段使得可以在一个较小的数据文件中查找对应offset的Message了，但是这依然需要顺序扫描才能找到对应offset的Message。为了进一步提高查找的效率，Kafka为每个分段后的数据文件建立了索引文件，文件名与数据文件的名字是一样的，只是文件扩展名为.index。<br>
索引文件中包含若干个索引条目，每个条目表示数据文件中一条Message的索引。索引包含两个部分（均为4个字节的数字），分别为相对offset和position。</p>
<ul><li>相对offset：因为数据文件分段以后，每个数据文件的起始offset不为0，相对offset表示这条Message相对于其所属数据文件中最小的offset的大小。举例，分段后的一个数据文件的offset是从20开始，那么offset为25的Message在index文件中的相对offset就是25-20 = 5。存储相对offset可以减小索引文件占用的空间。</li><li>position，表示该条Message在数据文件中的绝对位置。只要打开文件并移动文件指针到这个position就可以读取对应的Message了。</li></ul><p>index文件中并没有为数据文件中的每条Message建立索引，而是采用了稀疏存储的方式，每隔一定字节的数据建立一条索引。这样避免了索引文件占用过多的空间，从而可以将索引文件保留在内存中。但缺点是没有建立索引的Message也不能一次定位到其在数据文件的位置，从而需要做一次顺序扫描，但是这次顺序扫描的范围就很小了。</p>
<br><p><span><br></span></p>
<br>            </div>
                </div>