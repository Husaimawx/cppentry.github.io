---
layout:     post
title:      kfaka
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                <h1><a href="https://www.cnblogs.com/wangbin/p/8192372.html" rel="nofollow" id="cb_post_title_url">c语言使用librdkafka库实现kafka的生产和消费实例(转)</a></h1>

<p>关于librdkafka库的介绍，可以参考<a href="http://blog.csdn.net/lijinqi1987/article/details/76571757" rel="nofollow">kafka的c/c++高性能客户端librdkafka简介</a>，本文使用librdkafka库来进行kafka的简单的生产、消费</p>

<p> </p>

<h1><a name="t0"></a>一、producer</h1>

<p>librdkafka进行kafka生产操作的大致步骤如下：</p>

<h3><a name="t1"></a>1、创建kafka配置</h3>

<p> </p>

<p><strong>[cpp]</strong> <a href="http://blog.csdn.net/lijinqi1987/article/details/76582067#" rel="nofollow">view plain</a> <a href="http://blog.csdn.net/lijinqi1987/article/details/76582067#" rel="nofollow">copy</a></p>

<p> </p>

<ol><li>rd_kafka_conf_t *rd_kafka_conf_new (void)  </li>
</ol><p> </p>

<h3><a name="t2"></a>2、配置kafka各项参数</h3>

<p><strong>[cpp]</strong> <a href="http://blog.csdn.net/lijinqi1987/article/details/76582067#" rel="nofollow">view plain</a> <a href="http://blog.csdn.net/lijinqi1987/article/details/76582067#" rel="nofollow">copy</a></p>

<p> </p>

<ol><li>rd_kafka_conf_res_t rd_kafka_conf_set (rd_kafka_conf_t *conf,  </li>
	<li>                                       const char *name,  </li>
	<li>                                       const char *value,  </li>
	<li>                                       char *errstr, size_t errstr_size)  </li>
</ol><p> </p>

<h3><a name="t3"></a>3、设置发送回调函数</h3>

<p> </p>

<p><strong>[cpp]</strong> <a href="http://blog.csdn.net/lijinqi1987/article/details/76582067#" rel="nofollow">view plain</a> <a href="http://blog.csdn.net/lijinqi1987/article/details/76582067#" rel="nofollow">copy</a></p>

<p> </p>

<ol><li>void rd_kafka_conf_set_dr_msg_cb (rd_kafka_conf_t *conf,  </li>
	<li>                                  void (*dr_msg_cb) (rd_kafka_t *rk,  </li>
	<li>                                  const rd_kafka_message_t *  </li>
	<li>                                  rkmessage,  </li>
	<li>                                  void *opaque))  </li>
</ol><p> </p>

<h3><a name="t4"></a>4、创建producer实例</h3>

<p> </p>

<p><strong>[cpp]</strong> <a href="http://blog.csdn.net/lijinqi1987/article/details/76582067#" rel="nofollow">view plain</a> <a href="http://blog.csdn.net/lijinqi1987/article/details/76582067#" rel="nofollow">copy</a></p>

<p> </p>

<ol><li>rd_kafka_t *rd_kafka_new (rd_kafka_type_t type, rd_kafka_conf_t *conf,char *errstr, size_t errstr_size)  </li>
</ol><p> </p>

<h3><a name="t5"></a>5、实例化topic</h3>

<p><strong>[cpp]</strong> <a href="http://blog.csdn.net/lijinqi1987/article/details/76582067#" rel="nofollow">view plain</a> <a href="http://blog.csdn.net/lijinqi1987/article/details/76582067#" rel="nofollow">copy</a></p>

<p> </p>

<ol><li>rd_kafka_topic_t *rd_kafka_topic_new (rd_kafka_t *rk, const char *topic, rd_kafka_topic_conf_t *conf)  </li>
</ol><p> </p>

<h3><a name="t6"></a>6、异步调用将消息发送到指定的topic</h3>

<p><strong>[cpp]</strong> <a href="http://blog.csdn.net/lijinqi1987/article/details/76582067#" rel="nofollow">view plain</a> <a href="http://blog.csdn.net/lijinqi1987/article/details/76582067#" rel="nofollow">copy</a></p>

<p> </p>

<ol><li>int rd_kafka_produce (rd_kafka_topic_t *rkt, int32_t partition,  </li>
	<li>              int msgflags,  </li>
	<li>              void *payload, size_t len,  </li>
	<li>              const void *key, size_t keylen,  </li>
	<li>              void *msg_opaque)  </li>
</ol><p> </p>

<h3><a name="t7"></a>7、阻塞等待消息发送完成</h3>

<p><strong>[cpp]</strong> <a href="http://blog.csdn.net/lijinqi1987/article/details/76582067#" rel="nofollow">view plain</a> <a href="http://blog.csdn.net/lijinqi1987/article/details/76582067#" rel="nofollow">copy</a></p>

<p> </p>

<ol><li>int rd_kafka_poll (rd_kafka_t *rk, int timeout_ms)  </li>
</ol><p> </p>

<h3><a name="t8"></a>8、等待完成producer请求完成</h3>

<p><strong>[cpp]</strong> <a href="http://blog.csdn.net/lijinqi1987/article/details/76582067#" rel="nofollow">view plain</a> <a href="http://blog.csdn.net/lijinqi1987/article/details/76582067#" rel="nofollow">copy</a></p>

<p> </p>

<ol><li>rd_kafka_resp_err_t rd_kafka_flush (rd_kafka_t *rk, int timeout_ms)  </li>
</ol><p> </p>

<h3><a name="t9"></a>9、销毁topic</h3>

<p><strong>[cpp]</strong> <a href="http://blog.csdn.net/lijinqi1987/article/details/76582067#" rel="nofollow">view plain</a> <a href="http://blog.csdn.net/lijinqi1987/article/details/76582067#" rel="nofollow">copy</a></p>

<p> </p>

<ol><li>void rd_kafka_topic_destroy (rd_kafka_topic_t *app_rkt)  </li>
</ol><p> </p>

<h3><a name="t10"></a>10、销毁producer实例</h3>

<p><strong>[cpp]</strong> <a href="http://blog.csdn.net/lijinqi1987/article/details/76582067#" rel="nofollow">view plain</a> <a href="http://blog.csdn.net/lijinqi1987/article/details/76582067#" rel="nofollow">copy</a></p>

<p> </p>

<ol><li>void rd_kafka_destroy (rd_kafka_t *rk)  </li>
</ol><p><br>
完整代码如下my_producer.c：</p>

<p> </p>

<p> </p>

<p><strong>[cpp]</strong> <a href="http://blog.csdn.net/lijinqi1987/article/details/76582067#" rel="nofollow">view plain</a> <a href="http://blog.csdn.net/lijinqi1987/article/details/76582067#" rel="nofollow">copy</a></p>

<p> </p>

<ol><li>#include &lt;stdio.h&gt;  </li>
	<li>#include &lt;signal.h&gt;  </li>
	<li>#include &lt;string.h&gt;  </li>
	<li>  </li>
	<li>#include "../src/rdkafka.h"  </li>
	<li>  </li>
	<li>static int run = 1;  </li>
	<li>  </li>
	<li>static void stop(int sig){  </li>
	<li>    run = 0;  </li>
	<li>    fclose(stdin);  </li>
	<li>}  </li>
	<li>  </li>
	<li>/* </li>
	<li>    每条消息调用一次该回调函数，说明消息是传递成功(rkmessage-&gt;err == RD_KAFKA_RESP_ERR_NO_ERROR) </li>
	<li>    还是传递失败(rkmessage-&gt;err != RD_KAFKA_RESP_ERR_NO_ERROR) </li>
	<li>    该回调函数由rd_kafka_poll()触发，在应用程序的线程上执行 </li>
	<li> */  </li>
	<li>static void dr_msg_cb(rd_kafka_t *rk,  </li>
	<li>                      const rd_kafka_message_t *rkmessage, void *opaque){  </li>
	<li>        if(rkmessage-&gt;err)  </li>
	<li>            fprintf(stderr, "%% Message delivery failed: %s\n",   </li>
	<li>                    rd_kafka_err2str(rkmessage-&gt;err));  </li>
	<li>        else  </li>
	<li>            fprintf(stderr,  </li>
	<li>                        "%% Message delivered (%zd bytes, "  </li>
	<li>                        "partition %"PRId32")\n",  </li>
	<li>                        rkmessage-&gt;len, rkmessage-&gt;partition);  </li>
	<li>        /* rkmessage被librdkafka自动销毁*/  </li>
	<li>}  </li>
	<li>  </li>
	<li>int main(int argc, char **argv){  </li>
	<li>    rd_kafka_t *rk;            /*Producer instance handle*/  </li>
	<li>    rd_kafka_topic_t *rkt;     /*topic对象*/  </li>
	<li>    rd_kafka_conf_t *conf;     /*临时配置对象*/  </li>
	<li>    char errstr[512];            </li>
	<li>    char buf[512];               </li>
	<li>    const char *brokers;         </li>
	<li>    const char *topic;           </li>
	<li>  </li>
	<li>    if(argc != 3){  </li>
	<li>        fprintf(stderr, "%% Usage: %s &lt;broker&gt; &lt;topic&gt;\n", argv[0]);  </li>
	<li>        return 1;  </li>
	<li>    }  </li>
	<li>  </li>
	<li>    brokers = argv[1];  </li>
	<li>    topic = argv[2];  </li>
	<li>  </li>
	<li>    /* 创建一个kafka配置占位 */  </li>
	<li>    conf = rd_kafka_conf_new();  </li>
	<li>  </li>
	<li>    /*创建broker集群*/  </li>
	<li>    if (rd_kafka_conf_set(conf, "bootstrap.servers", brokers, errstr,  </li>
	<li>                sizeof(errstr)) != RD_KAFKA_CONF_OK){  </li>
	<li>        fprintf(stderr, "%s\n", errstr);  </li>
	<li>        return 1;  </li>
	<li>    }  </li>
	<li>  </li>
	<li>    /*设置发送报告回调函数，rd_kafka_produce()接收的每条消息都会调用一次该回调函数 </li>
	<li>     *应用程序需要定期调用rd_kafka_poll()来服务排队的发送报告回调函数*/  </li>
	<li>    rd_kafka_conf_set_dr_msg_cb(conf, dr_msg_cb);  </li>
	<li>  </li>
	<li>    /*创建producer实例 </li>
	<li>      rd_kafka_new()获取conf对象的所有权,应用程序在此调用之后不得再次引用它*/  </li>
	<li>    rk = rd_kafka_new(RD_KAFKA_PRODUCER, conf, errstr, sizeof(errstr));  </li>
	<li>    if(!rk){  </li>
	<li>        fprintf(stderr, "%% Failed to create new producer:%s\n", errstr);  </li>
	<li>        return 1;  </li>
	<li>    }  </li>
	<li>  </li>
	<li>    /*实例化一个或多个topics(`rd_kafka_topic_t`)来提供生产或消费，topic </li>
	<li>    对象保存topic特定的配置，并在内部填充所有可用分区和leader brokers，*/  </li>
	<li>    rkt = rd_kafka_topic_new(rk, topic, NULL);  </li>
	<li>    if (!rkt){  </li>
	<li>        fprintf(stderr, "%% Failed to create topic object: %s\n",   </li>
	<li>                rd_kafka_err2str(rd_kafka_last_error()));  </li>
	<li>        rd_kafka_destroy(rk);  </li>
	<li>        return 1;  </li>
	<li>    }  </li>
	<li>  </li>
	<li>    /*用于中断的信号*/  </li>
	<li>    signal(SIGINT, stop);  </li>
	<li>  </li>
	<li>    fprintf(stderr,  </li>
	<li>                "%% Type some text and hit enter to produce message\n"  </li>
	<li>                "%% Or just hit enter to only serve delivery reports\n"  </li>
	<li>                "%% Press Ctrl-C or Ctrl-D to exit\n");  </li>
	<li>  </li>
	<li>     while(run &amp;&amp; fgets(buf, sizeof(buf), stdin)){  </li>
	<li>        size_t len = strlen(buf);  </li>
	<li>  </li>
	<li>        if(buf[len-1] == '\n')  </li>
	<li>            buf[--len] = '\0';  </li>
	<li>  </li>
	<li>        if(len == 0){  </li>
	<li>            /*轮询用于事件的kafka handle， </li>
	<li>            事件将导致应用程序提供的回调函数被调用 </li>
	<li>            第二个参数是最大阻塞时间，如果设为0，将会是非阻塞的调用*/  </li>
	<li>            rd_kafka_poll(rk, 0);  </li>
	<li>            continue;  </li>
	<li>        }  </li>
	<li>  </li>
	<li>     retry:  </li>
	<li>         /*Send/Produce message. </li>
	<li>           这是一个异步调用，在成功的情况下，只会将消息排入内部producer队列， </li>
	<li>           对broker的实际传递尝试由后台线程处理，之前注册的传递回调函数(dr_msg_cb) </li>
	<li>           用于在消息传递成功或失败时向应用程序发回信号*/  </li>
	<li>        if (rd_kafka_produce(  </li>
	<li>                    /* Topic object */  </li>
	<li>                    rkt,  </li>
	<li>                    /*使用内置的分区来选择分区*/  </li>
	<li>                    RD_KAFKA_PARTITION_UA,  </li>
	<li>                    /*生成payload的副本*/  </li>
	<li>                    RD_KAFKA_MSG_F_COPY,  </li>
	<li>                    /*消息体和长度*/  </li>
	<li>                    buf, len,  </li>
	<li>                    /*可选键及其长度*/  </li>
	<li>                    NULL, 0,  </li>
	<li>                    NULL) == -1){  </li>
	<li>            fprintf(stderr,   </li>
	<li>                "%% Failed to produce to topic %s: %s\n",   </li>
	<li>                rd_kafka_topic_name(rkt),  </li>
	<li>                rd_kafka_err2str(rd_kafka_last_error()));  </li>
	<li>  </li>
	<li>            if (rd_kafka_last_error() == RD_KAFKA_RESP_ERR__QUEUE_FULL){  </li>
	<li>                /*如果内部队列满，等待消息传输完成并retry, </li>
	<li>                内部队列表示要发送的消息和已发送或失败的消息， </li>
	<li>                内部队列受限于queue.buffering.max.messages配置项*/  </li>
	<li>                rd_kafka_poll(rk, 1000);  </li>
	<li>                goto retry;  </li>
	<li>            }     </li>
	<li>        }else{  </li>
	<li>            fprintf(stderr, "%% Enqueued message (%zd bytes) for topic %s\n",   </li>
	<li>                len, rd_kafka_topic_name(rkt));  </li>
	<li>        }  </li>
	<li>  </li>
	<li>        /*producer应用程序应不断地通过以频繁的间隔调用rd_kafka_poll()来为 </li>
	<li>        传送报告队列提供服务。在没有生成消息以确定先前生成的消息已发送了其 </li>
	<li>        发送报告回调函数(和其他注册过的回调函数)期间，要确保rd_kafka_poll() </li>
	<li>        仍然被调用*/  </li>
	<li>        rd_kafka_poll(rk, 0);  </li>
	<li>     }  </li>
	<li>  </li>
	<li>     fprintf(stderr, "%% Flushing final message.. \n");  </li>
	<li>     /*rd_kafka_flush是rd_kafka_poll()的抽象化， </li>
	<li>     等待所有未完成的produce请求完成，通常在销毁producer实例前完成 </li>
	<li>     以确保所有排列中和正在传输的produce请求在销毁前完成*/  </li>
	<li>     rd_kafka_flush(rk, 10*1000);  </li>
	<li>  </li>
	<li>     /* Destroy topic object */  </li>
	<li>     rd_kafka_topic_destroy(rkt);  </li>
	<li>  </li>
	<li>     /* Destroy the producer instance */  </li>
	<li>     rd_kafka_destroy(rk);  </li>
	<li>  </li>
	<li>     return 0;  </li>
	<li>}  </li>
</ol><p><br>
 </p>

<p> </p>

<h1><a name="t11"></a>二、consumer</h1>

<p>librdkafka进行kafka消费操作的大致步骤如下：</p>

<p> </p>

<h3><a name="t12"></a>1、创建kafka配置</h3>

<p><strong>[cpp]</strong> <a href="http://blog.csdn.net/lijinqi1987/article/details/76582067#" rel="nofollow">view plain</a> <a href="http://blog.csdn.net/lijinqi1987/article/details/76582067#" rel="nofollow">copy</a></p>

<p> </p>

<ol><li>rd_kafka_conf_t *rd_kafka_conf_new (void)  </li>
</ol><p> </p>

<h3><a name="t13"></a>2、创建kafka topic的配置</h3>

<p><strong>[cpp]</strong> <a href="http://blog.csdn.net/lijinqi1987/article/details/76582067#" rel="nofollow">view plain</a> <a href="http://blog.csdn.net/lijinqi1987/article/details/76582067#" rel="nofollow">copy</a></p>

<p> </p>

<ol><li>rd_kafka_topic_conf_t *rd_kafka_topic_conf_new (void)   </li>
</ol><p> </p>

<h3><a name="t14"></a>3、配置kafka各项参数</h3>

<p><strong>[cpp]</strong> <a href="http://blog.csdn.net/lijinqi1987/article/details/76582067#" rel="nofollow">view plain</a> <a href="http://blog.csdn.net/lijinqi1987/article/details/76582067#" rel="nofollow">copy</a></p>

<p> </p>

<ol><li>rd_kafka_conf_res_t rd_kafka_conf_set (rd_kafka_conf_t *conf,  </li>
	<li>                                       const char *name,  </li>
	<li>                                       const char *value,  </li>
	<li>                                       char *errstr, size_t errstr_size)  </li>
</ol><p> </p>

<h3><a name="t15"></a>4、配置kafka topic各项参数</h3>

<p><strong>[cpp]</strong> <a href="http://blog.csdn.net/lijinqi1987/article/details/76582067#" rel="nofollow">view plain</a> <a href="http://blog.csdn.net/lijinqi1987/article/details/76582067#" rel="nofollow">copy</a></p>

<p> </p>

<ol><li>rd_kafka_conf_res_t rd_kafka_topic_conf_set (rd_kafka_topic_conf_t *conf,  </li>
	<li>                         const char *name,  </li>
	<li>                         const char *value,  </li>
	<li>                         char *errstr, size_t errstr_size)  </li>
</ol><p> </p>

<h3><a name="t16"></a>5、创建consumer实例</h3>

<p><strong>[cpp]</strong> <a href="http://blog.csdn.net/lijinqi1987/article/details/76582067#" rel="nofollow">view plain</a> <a href="http://blog.csdn.net/lijinqi1987/article/details/76582067#" rel="nofollow">copy</a></p>

<p> </p>

<ol><li>rd_kafka_t *rd_kafka_new (rd_kafka_type_t type, rd_kafka_conf_t *conf, char *errstr, size_t errstr_size)  </li>
</ol><p> </p>

<h3><a name="t17"></a>6、为consumer实例添加brokerlist</h3>

<p><strong>[cpp]</strong> <a href="http://blog.csdn.net/lijinqi1987/article/details/76582067#" rel="nofollow">view plain</a> <a href="http://blog.csdn.net/lijinqi1987/article/details/76582067#" rel="nofollow">copy</a></p>

<p> </p>

<ol><li>int rd_kafka_brokers_add (rd_kafka_t *rk, const char *brokerlist)  </li>
</ol><p> </p>

<h3><a name="t18"></a>7、开启consumer订阅</h3>

<p><strong>[cpp]</strong> <a href="http://blog.csdn.net/lijinqi1987/article/details/76582067#" rel="nofollow">view plain</a> <a href="http://blog.csdn.net/lijinqi1987/article/details/76582067#" rel="nofollow">copy</a></p>

<p> </p>

<ol><li>rd_kafka_subscribe (rd_kafka_t *rk, const rd_kafka_topic_partition_list_t *topics)  </li>
</ol><p> </p>

<h3><a name="t19"></a>8、轮询消息或事件，并调用回调函数</h3>

<p><strong>[cpp]</strong> <a href="http://blog.csdn.net/lijinqi1987/article/details/76582067#" rel="nofollow">view plain</a> <a href="http://blog.csdn.net/lijinqi1987/article/details/76582067#" rel="nofollow">copy</a></p>

<p> </p>

<ol><li>rd_kafka_message_t *rd_kafka_consumer_poll (rd_kafka_t *rk,int timeout_ms)  </li>
</ol><p> </p>

<h3><a name="t20"></a>9、关闭consumer实例</h3>

<p><strong>[cpp]</strong> <a href="http://blog.csdn.net/lijinqi1987/article/details/76582067#" rel="nofollow">view plain</a> <a href="http://blog.csdn.net/lijinqi1987/article/details/76582067#" rel="nofollow">copy</a></p>

<p> </p>

<ol><li>rd_kafka_resp_err_t rd_kafka_consumer_close (rd_kafka_t *rk)  </li>
</ol><p> </p>

<h3><a name="t21"></a>10、释放topic list资源</h3>

<p><strong>[cpp]</strong> <a href="http://blog.csdn.net/lijinqi1987/article/details/76582067#" rel="nofollow">view plain</a> <a href="http://blog.csdn.net/lijinqi1987/article/details/76582067#" rel="nofollow">copy</a></p>

<p> </p>

<ol><li>rd_kafka_topic_partition_list_destroy (rd_kafka_topic_partition_list_t *rktparlist)  </li>
</ol><p> </p>

<h3><a name="t22"></a>11、销毁consumer实例</h3>

<p><strong>[cpp]</strong> <a href="http://blog.csdn.net/lijinqi1987/article/details/76582067#" rel="nofollow">view plain</a> <a href="http://blog.csdn.net/lijinqi1987/article/details/76582067#" rel="nofollow">copy</a></p>

<p> </p>

<ol><li>void rd_kafka_destroy (rd_kafka_t *rk)   </li>
</ol><p> </p>

<h3><a name="t23"></a>12、等待consumer对象的销毁</h3>

<p><strong>[cpp]</strong> <a href="http://blog.csdn.net/lijinqi1987/article/details/76582067#" rel="nofollow">view plain</a> <a href="http://blog.csdn.net/lijinqi1987/article/details/76582067#" rel="nofollow">copy</a></p>

<p> </p>

<ol><li>int rd_kafka_wait_destroyed (int timeout_ms)  </li>
</ol><p> </p>

<p> </p>

<p>完整代码如下my_consumer.c</p>

<p><strong>[cpp]</strong> <a href="http://blog.csdn.net/lijinqi1987/article/details/76582067#" rel="nofollow">view plain</a> <a href="http://blog.csdn.net/lijinqi1987/article/details/76582067#" rel="nofollow">copy</a></p>

<p> </p>

<ol><li>#include &lt;string.h&gt;  </li>
	<li>#include &lt;stdlib.h&gt;  </li>
	<li>#include &lt;syslog.h&gt;  </li>
	<li>#include &lt;signal.h&gt;  </li>
	<li>#include &lt;error.h&gt;  </li>
	<li>#include &lt;getopt.h&gt;  </li>
	<li>  </li>
	<li>#include "../src/rdkafka.h"  </li>
	<li>  </li>
	<li>static int run = 1;  </li>
	<li>//`rd_kafka_t`自带一个可选的配置API，如果没有调用API，Librdkafka将会使用CONFIGURATION.md中的默认配置。  </li>
	<li>static rd_kafka_t *rk;  </li>
	<li>static rd_kafka_topic_partition_list_t *topics;  </li>
	<li>  </li>
	<li>static void stop (int sig) {  </li>
	<li>  if (!run)  </li>
	<li>    exit(1);  </li>
	<li>  run = 0;  </li>
	<li>  fclose(stdin); /* abort fgets() */  </li>
	<li>}  </li>
	<li>  </li>
	<li>static void sig_usr1 (int sig) {  </li>
	<li>  rd_kafka_dump(stdout, rk);  </li>
	<li>}  </li>
	<li>  </li>
	<li>/** </li>
	<li> * 处理并打印已消费的消息 </li>
	<li> */  </li>
	<li>static void msg_consume (rd_kafka_message_t *rkmessage,  </li>
	<li>       void *opaque) {  </li>
	<li>  if (rkmessage-&gt;err) {  </li>
	<li>    if (rkmessage-&gt;err == RD_KAFKA_RESP_ERR__PARTITION_EOF) {  </li>
	<li>      fprintf(stderr,  </li>
	<li>        "%% Consumer reached end of %s [%"PRId32"] "  </li>
	<li>             "message queue at offset %"PRId64"\n",  </li>
	<li>             rd_kafka_topic_name(rkmessage-&gt;rkt),  </li>
	<li>             rkmessage-&gt;partition, rkmessage-&gt;offset);  </li>
	<li>  </li>
	<li>      return;  </li>
	<li>    }  </li>
	<li>  </li>
	<li>    if (rkmessage-&gt;rkt)  </li>
	<li>            fprintf(stderr, "%% Consume error for "  </li>
	<li>                    "topic \"%s\" [%"PRId32"] "  </li>
	<li>                    "offset %"PRId64": %s\n",  </li>
	<li>                    rd_kafka_topic_name(rkmessage-&gt;rkt),  </li>
	<li>                    rkmessage-&gt;partition,  </li>
	<li>                    rkmessage-&gt;offset,  </li>
	<li>                    rd_kafka_message_errstr(rkmessage));  </li>
	<li>    else  </li>
	<li>            fprintf(stderr, "%% Consumer error: %s: %s\n",  </li>
	<li>                    rd_kafka_err2str(rkmessage-&gt;err),  </li>
	<li>                    rd_kafka_message_errstr(rkmessage));  </li>
	<li>  </li>
	<li>    if (rkmessage-&gt;err == RD_KAFKA_RESP_ERR__UNKNOWN_PARTITION ||  </li>
	<li>        rkmessage-&gt;err == RD_KAFKA_RESP_ERR__UNKNOWN_TOPIC)  </li>
	<li>          run = 0;  </li>
	<li>    return;  </li>
	<li>  }  </li>
	<li>  </li>
	<li>  fprintf(stdout, "%% Message (topic %s [%"PRId32"], "  </li>
	<li>                      "offset %"PRId64", %zd bytes):\n",  </li>
	<li>                      rd_kafka_topic_name(rkmessage-&gt;rkt),  </li>
	<li>                      rkmessage-&gt;partition,  </li>
	<li>    rkmessage-&gt;offset, rkmessage-&gt;len);  </li>
	<li>  </li>
	<li>  if (rkmessage-&gt;key_len) {  </li>
	<li>    printf("Key: %.*s\n",  </li>
	<li>             (int)rkmessage-&gt;key_len, (char *)rkmessage-&gt;key);  </li>
	<li>  }  </li>
	<li>  </li>
	<li>  printf("%.*s\n",  </li>
	<li>           (int)rkmessage-&gt;len, (char *)rkmessage-&gt;payload);  </li>
	<li>    </li>
	<li>}  </li>
	<li>  </li>
	<li>/* </li>
	<li>  init all configuration of kafka </li>
	<li> */  </li>
	<li>int initKafka(char *brokers, char *group,char *topic){  </li>
	<li>  rd_kafka_conf_t *conf;  </li>
	<li>  rd_kafka_topic_conf_t *topic_conf;  </li>
	<li>  rd_kafka_resp_err_t err;  </li>
	<li>  char tmp[16];  </li>
	<li>  char errstr[512];  </li>
	<li>  </li>
	<li>  /* Kafka configuration */  </li>
	<li>  conf = rd_kafka_conf_new();  </li>
	<li>  </li>
	<li>  //quick termination  </li>
	<li>  snprintf(tmp, sizeof(tmp), "%i", SIGIO);  </li>
	<li>  rd_kafka_conf_set(conf, "internal.termination.signal", tmp, NULL, 0);  </li>
	<li>  </li>
	<li>  //topic configuration  </li>
	<li>  topic_conf = rd_kafka_topic_conf_new();  </li>
	<li>  </li>
	<li>  /* Consumer groups require a group id */  </li>
	<li>  if (!group)  </li>
	<li>          group = "rdkafka_consumer_example";  </li>
	<li>  if (rd_kafka_conf_set(conf, "group.id", group,  </li>
	<li>                        errstr, sizeof(errstr)) !=  </li>
	<li>      RD_KAFKA_CONF_OK) {  </li>
	<li>          fprintf(stderr, "%% %s\n", errstr);  </li>
	<li>          return -1;  </li>
	<li>  }  </li>
	<li>  </li>
	<li>  /* Consumer groups always use broker based offset storage */  </li>
	<li>  if (rd_kafka_topic_conf_set(topic_conf, "offset.store.method",  </li>
	<li>                              "broker",  </li>
	<li>                              errstr, sizeof(errstr)) !=  </li>
	<li>      RD_KAFKA_CONF_OK) {  </li>
	<li>          fprintf(stderr, "%% %s\n", errstr);  </li>
	<li>          return -1;  </li>
	<li>  }  </li>
	<li>  </li>
	<li>  /* Set default topic config for pattern-matched topics. */  </li>
	<li>  rd_kafka_conf_set_default_topic_conf(conf, topic_conf);  </li>
	<li>  </li>
	<li>  //实例化一个顶级对象rd_kafka_t作为基础容器，提供全局配置和共享状态  </li>
	<li>  rk = rd_kafka_new(RD_KAFKA_CONSUMER, conf, errstr, sizeof(errstr));  </li>
	<li>  if(!rk){  </li>
	<li>    fprintf(stderr, "%% Failed to create new consumer:%s\n", errstr);  </li>
	<li>    return -1;  </li>
	<li>  }  </li>
	<li>  </li>
	<li>  //Librdkafka需要至少一个brokers的初始化list  </li>
	<li>  if (rd_kafka_brokers_add(rk, brokers) == 0){  </li>
	<li>    fprintf(stderr, "%% No valid brokers specified\n");  </li>
	<li>    return -1;  </li>
	<li>  }  </li>
	<li>  </li>
	<li>  //重定向 rd_kafka_poll()队列到consumer_poll()队列  </li>
	<li>  rd_kafka_poll_set_consumer(rk);  </li>
	<li>  </li>
	<li>  //创建一个Topic+Partition的存储空间(list/vector)  </li>
	<li>  topics = rd_kafka_topic_partition_list_new(1);  </li>
	<li>  //把Topic+Partition加入list  </li>
	<li>  rd_kafka_topic_partition_list_add(topics, topic, -1);  </li>
	<li>  //开启consumer订阅，匹配的topic将被添加到订阅列表中  </li>
	<li>  if((err = rd_kafka_subscribe(rk, topics))){  </li>
	<li>      fprintf(stderr, "%% Failed to start consuming topics: %s\n", rd_kafka_err2str(err));  </li>
	<li>      return -1;  </li>
	<li>  }  </li>
	<li>  </li>
	<li>  return 1;  </li>
	<li>}  </li>
	<li>  </li>
	<li>int main(int argc, char **argv){  </li>
	<li>  char *brokers = "localhost:9092";  </li>
	<li>  char *group = NULL;  </li>
	<li>  char *topic = NULL;  </li>
	<li>    </li>
	<li>  int opt;  </li>
	<li>  rd_kafka_resp_err_t err;  </li>
	<li>  </li>
	<li>  while ((opt = getopt(argc, argv, "g:b:t:qd:eX:As:DO")) != -1){  </li>
	<li>    switch (opt) {  </li>
	<li>      case 'b':  </li>
	<li>        brokers = optarg;  </li>
	<li>        break;  </li>
	<li>      case 'g':  </li>
	<li>        group = optarg;  </li>
	<li>        break;  </li>
	<li>      case 't':  </li>
	<li>        topic = optarg;  </li>
	<li>        break;  </li>
	<li>      default:  </li>
	<li>        break;  </li>
	<li>    }  </li>
	<li>  }   </li>
	<li>  </li>
	<li>  signal(SIGINT, stop);  </li>
	<li>  signal(SIGUSR1, sig_usr1);  </li>
	<li>  </li>
	<li>  if(!initKafka(brokers, group, topic)){  </li>
	<li>    fprintf(stderr, "kafka server initialize error\n");  </li>
	<li>  }else{  </li>
	<li>    while(run){  </li>
	<li>      rd_kafka_message_t *rkmessage;  </li>
	<li>      /*-轮询消费者的消息或事件，最多阻塞timeout_ms </li>
	<li>        -应用程序应该定期调用consumer_poll()，即使没有预期的消息，以服务 </li>
	<li>        所有排队等待的回调函数，当注册过rebalance_cb，该操作尤为重要， </li>
	<li>        因为它需要被正确地调用和处理以同步内部消费者状态 */  </li>
	<li>      rkmessage = rd_kafka_consumer_poll(rk, 1000);  </li>
	<li>      if(rkmessage){  </li>
	<li>        msg_consume(rkmessage, NULL);  </li>
	<li>        /*释放rkmessage的资源，并把所有权还给rdkafka*/  </li>
	<li>        rd_kafka_message_destroy(rkmessage);  </li>
	<li>      }  </li>
	<li>    }  </li>
	<li>  }  </li>
	<li>  </li>
	<li>done:  </li>
	<li>    /*此调用将会阻塞，直到consumer撤销其分配，调用rebalance_cb(如果已设置)， </li>
	<li>    commit offset到broker,并离开consumer group </li>
	<li>    最大阻塞时间被设置为session.timeout.ms </li>
	<li>    */  </li>
	<li>    err = rd_kafka_consumer_close(rk);  </li>
	<li>    if(err){  </li>
	<li>      fprintf(stderr, "%% Failed to close consumer: %s\n", rd_kafka_err2str(err));  </li>
	<li>    }else{  </li>
	<li>      fprintf(stderr, "%% Consumer closed\n");  </li>
	<li>    }  </li>
	<li>  </li>
	<li>    //释放topics list使用的所有资源和它自己  </li>
	<li>    rd_kafka_topic_partition_list_destroy(topics);  </li>
	<li>  </li>
	<li>    //destroy kafka handle  </li>
	<li>    rd_kafka_destroy(rk);  </li>
	<li>    </li>
	<li>    run = 5;  </li>
	<li>    //等待所有rd_kafka_t对象销毁，所有kafka对象被销毁，返回0，超时返回-1  </li>
	<li>    while(run-- &gt; 0 &amp;&amp; rd_kafka_wait_destroyed(1000) == -1){  </li>
	<li>      printf("Waiting for librdkafka to decommission\n");  </li>
	<li>    }  </li>
	<li>    if(run &lt;= 0){  </li>
	<li>      //dump rdkafka内部状态到stdout流  </li>
	<li>      rd_kafka_dump(stdout, rk);  </li>
	<li>    }  </li>
	<li>  </li>
	<li>    return 0;  </li>
	<li>}  </li>
</ol><p><br>
在linux下编译producer和consumer的代码：</p>

<p><strong>[cpp]</strong> <a href="http://blog.csdn.net/lijinqi1987/article/details/76582067#" rel="nofollow">view plain</a> <a href="http://blog.csdn.net/lijinqi1987/article/details/76582067#" rel="nofollow">copy</a></p>

<p> </p>

<ol><li>gcc my_producer.c -o my_producer  -lrdkafka -lz -lpthread -lrt  </li>
	<li>gcc my_consumer.c -o my_consumer  -lrdkafka -lz -lpthread -lrt  </li>
</ol><p>在运行my_producer或my_consumer时可能会报错"error while loading shared libraries xxx.so", 此时需要在/etc/ld.so.conf中加入xxx.so所在的目录</p>

<p><br>
在本地启动一个简单的kafka服务，设置broker集群为localhost：9092并创建一个叫“test_topic”的topic<br>
启动方式可参考 <a href="http://blog.csdn.net/lijinqi1987/article/details/75126081" rel="nofollow">kafka0.8.2集群的环境搭建并实现基本的生产消费</a><br><br>
启动consumer：</p>

<p><img alt="" class="has" src="https://img-blog.csdn.net/20170802173452579?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlqaW5xaTE5ODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center"></p>

<p> </p>

<p>启动producer，并发送一条数据“hello world”：</p>

<p><img alt="" class="has" src="https://img-blog.csdn.net/20170802173512693?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlqaW5xaTE5ODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center"></p>

<p><br>
consumer处成功收到producer发送的“hello world”：</p>

<p><img alt="" class="has" src="https://img-blog.csdn.net/20170802173522214?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlqaW5xaTE5ODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center"></p>

<p> </p>

<p>http://orchome.com/5</p>

<p>https://github.com/edenhill/librdkafka</p>

<p>https://github.com/mfontanini/cppkafka</p>

<p>https://github.com/zengyuxing007/kafka_test_cpp</p>

<p> </p>

<p>====================================</p>

<p>==============================================</p>

<p>=========================================================</p>

<p>1，初始化<br>
rd_kafka_new //创建一个top-level的对象rd_kfaka_t, 这个对象是基本的容器，它提供了全局性配置属性以及共享状态信息，它由rd_kafka_new()函数创建。</p>

<p>同时也需要创建一个或者多个topics对象rd_kafka_topic_t，给produer以及consumer使用。 topic对象具有topic特定的配置属性，同时还包含了所有可用partitions与leader  brokers映射关系。它通过调用rd_kafka_topic_new()函数创建。</p>

<p>在使用RD_KAFKA_PRODUCER设置完rd_kafka_t对象后，就可以创建一个或者多个rd_kafka_topic_t对象了，用来接受信息或者发送信息。</p>

<p><br>
一个以轮询为基础的API用来给实际应用提供信号反馈，实际应用应当按照固定时间间隔调用rd_kafka_poll()函数。</p>

<p>2，Brokers<br>
librdkafka只需要一份最初的brokers列表。<br>
它将连接rd_kafka_brokers_add函数添加的brokers,<br>
然后向每个brokers申请一些元数据信息：包含brokers的完整列表、topic、partitions以及它们在Kafka 集群中的leaders broker信息。</p>

<p><br>
Brokers名字的形式为：host：port； 其中port是可选的，默认是9092，host是任何一个可以解析的hostname或者ipv4或者ipv6地址。如果host是多个地址，librdkafka将会在每一次连接尝试中循环连接这些地址。包含所有broker 地址的DNS记录可以用来提供可靠的bootstrap broker。</p>

<p>3，Producer API<br>
rd_kafka_produce()是非阻塞的API， 它将使消息存储在内部队列中并立即返回。如果入队的消息数目超过了配置的“queue.buffering.max.messages"属性，则rd_kafka_produce()函数将会返回-1并将errno设置为ENOBUFS， 这样就提供了应对压力的机制。</p>

<p>4,Consumer API</p>

<p><br>
3,<br>
rd_kafka_topic_new<br>
rd_kafka_metadata</p>            </div>
                </div>