---
layout:     post
title:      Hive学习笔记(3)
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<p></p><div class="toc"><div class="toc">
<ul>
<li><a href="#hive%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0" rel="nofollow">Hive学习笔记</a><ul>
<li><a href="#hiveql%E6%9F%A5%E8%AF%A2" rel="nofollow">HiveQL:查询</a><ul>
<li><a href="#selectfrom%E8%AF%AD%E5%8F%A5" rel="nofollow">SELECT…FROM语句</a><ul>
<li><a href="#%E7%AE%97%E6%95%B0%E8%BF%90%E7%AE%97%E7%AC%A6" rel="nofollow">算数运算符</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8%E5%87%BD%E6%95%B0" rel="nofollow">使用函数</a><ul>
<li><a href="#%E6%95%B0%E5%AD%A6%E5%87%BD%E6%95%B0" rel="nofollow">数学函数</a></li>
<li><a href="#%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0" rel="nofollow">聚合函数</a></li>
<li><a href="#%E8%A1%A8%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0" rel="nofollow">表生成函数</a></li>
<li><a href="#%E5%85%B6%E4%BB%96%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0" rel="nofollow">其他内置函数</a></li>
<li><a href="#limit-%E8%AF%AD%E5%8F%A5" rel="nofollow">LIMIT 语句</a></li>
<li><a href="#%E5%88%97%E5%88%AB%E5%90%8D" rel="nofollow">列别名</a></li>
<li><a href="#%E5%B5%8C%E5%A5%97-select-%E8%AF%AD%E5%8F%A5" rel="nofollow">嵌套 SELECT 语句</a></li>
<li><a href="#casewhenthen-%E5%8F%A5%E5%BC%8F" rel="nofollow">CASE…WHEN…THEN 句式</a></li>
<li><a href="#%E4%BB%80%E4%B9%88%E6%83%85%E5%86%B5%E4%B8%8B-hive-%E5%8F%AF%E4%BB%A5%E9%81%BF%E5%85%8D%E8%BF%9B%E8%A1%8Cmapreduce" rel="nofollow">什么情况下 Hive 可以避免进行MapReduce</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#where-%E8%AF%AD%E5%8F%A5" rel="nofollow">WHERE 语句</a><ul>
<li><a href="#%E8%B0%93%E8%AF%8D%E6%93%8D%E4%BD%9C%E7%AC%A6" rel="nofollow">谓词操作符</a></li>
<li><a href="#%E5%85%B3%E4%BA%8E%E6%B5%AE%E7%82%B9%E6%95%B0%E7%9A%84%E6%AF%94%E8%BE%83" rel="nofollow">关于浮点数的比较</a></li>
<li><a href="#like%E5%92%8Crlike" rel="nofollow">LIKE和RLIKE</a></li>
<li><a href="#group-by-%E8%AF%AD%E5%8F%A5" rel="nofollow">GROUP BY 语句</a></li>
<li><a href="#join-%E8%AF%AD%E5%8F%A5" rel="nofollow">JOIN 语句</a><ul>
<li><a href="#inner-join" rel="nofollow">INNER JOIN</a></li>
<li><a href="#join-%E4%BC%98%E5%8C%96" rel="nofollow">JOIN 优化</a></li>
<li><a href="#left-outer-join" rel="nofollow">LEFT OUTER JOIN</a></li>
<li><a href="#outer-join" rel="nofollow">OUTER JOIN</a></li>
<li><a href="#right-outer-join" rel="nofollow">RIGHT OUTER JOIN</a></li>
<li><a href="#full-outer-join" rel="nofollow">FULL OUTER JOIN</a></li>
<li><a href="#left-semi-join" rel="nofollow">LEFT SEMI-JOIN</a></li>
<li><a href="#%E7%AC%9B%E5%8D%A1%E5%B0%94%E7%A7%AF-join" rel="nofollow">笛卡尔积 JOIN</a></li>
<li><a href="#map-side-join" rel="nofollow">map-side JOIN</a></li>
</ul>
</li>
<li><a href="#order-by-%E5%92%8C-sort-by" rel="nofollow">ORDER BY 和 SORT BY</a></li>
<li><a href="#%E5%90%AB%E6%9C%89-sort-by-%E7%9A%84-distribute-by" rel="nofollow">含有 SORT BY 的 DISTRIBUTE BY</a></li>
<li><a href="#cluster-by" rel="nofollow">CLUSTER BY</a></li>
<li><a href="#%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2" rel="nofollow">类型转换</a></li>
<li><a href="#%E6%8A%BD%E6%A0%B7%E6%9F%A5%E8%AF%A2" rel="nofollow">抽样查询</a></li>
<li><a href="#union-all" rel="nofollow">UNION ALL</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>




<h1 id="hive学习笔记">Hive学习笔记</h1>

<p>笔记内容主要来自<a href="https://download.csdn.net/download/bbirdsky/8300267" rel="nofollow">Hive编程指南</a></p>



<h2 id="hiveql查询">HiveQL:查询</h2>



<h3 id="selectfrom语句">SELECT…FROM语句</h3>

<blockquote>
  <p>SELECT 是 SQL中的射影算子。FROM子句标识了从哪个表、视图或嵌套查询中选择记录。</p>
</blockquote>



<pre class="prettyprint"><code class="language-sql hljs "><span class="hljs-comment">--分区 employees 表</span>
<span class="hljs-operator"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> employees(
    name            STRING,
    salary          <span class="hljs-keyword">FLOAT</span>,
    subordinates    ARRAY&lt;STRING&gt;,
    deductions      MAP&lt;STRING, <span class="hljs-keyword">FLOAT</span>&gt;,
    address         STRUCT&lt;street:STRING, city:STRING, state STRING&gt;
)
PARTITIONED <span class="hljs-keyword">BY</span> (country STRING, state STRING);</span></code></pre>

<blockquote>
  <p>用户选择的列是集合数据类型时，Hive会使用JSON语法应用于输出</p>
</blockquote>



<pre class="prettyprint"><code class="language-sql hljs "><span class="hljs-comment">-- 选取 ARRAY&lt;STRING&gt; 类型</span>
<span class="hljs-operator"><span class="hljs-keyword">SELECT</span> name, subordinates <span class="hljs-keyword">FROM</span> employees;</span></code></pre>

<p><img src="https://img-blog.csdn.net/20180606223436823?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmVzc2U=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="Array类型" title=""></p>



<pre class="prettyprint"><code class="language-sql hljs "><span class="hljs-comment">-- 选取 MAP&lt;STRING, FLOAT&gt; 类型</span>
<span class="hljs-operator"><span class="hljs-keyword">SELECT</span> name, deductions <span class="hljs-keyword">FROM</span> employees;</span></code></pre>

<p><img src="https://img-blog.csdn.net/20180606223813406?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmVzc2U=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="Map类型" title=""></p>



<pre class="prettyprint"><code class="language-sql hljs "><span class="hljs-comment">-- 选取 STRUCT 类型</span>
<span class="hljs-operator"><span class="hljs-keyword">SELECT</span> name, address <span class="hljs-keyword">FROM</span> employees;</span></code></pre>

<p><img src="https://img-blog.csdn.net/20180606223943691?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmVzc2U=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="Struct类型" title=""></p>



<pre class="prettyprint"><code class="language-sql hljs "><span class="hljs-comment">-- 选取 ARRAY 类型的第 N 个元素</span>
<span class="hljs-comment">-- 引用一个不存在的元素将返回NULL</span>
<span class="hljs-operator"><span class="hljs-keyword">SELECT</span> name, subordinates[<span class="hljs-number">0</span>] <span class="hljs-keyword">FROM</span> employees;</span></code></pre>

<p><img src="https://img-blog.csdn.net/20180606224240551?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmVzc2U=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="获取数组元素" title=""></p>



<pre class="prettyprint"><code class="language-sql hljs "><span class="hljs-comment">-- 选取 MAP 类型</span>
<span class="hljs-operator"><span class="hljs-keyword">SELECT</span> name, deductions[<span class="hljs-string">"State Taxes"</span>] <span class="hljs-keyword">FROM</span> employees;</span></code></pre>

<p><img src="https://img-blog.csdn.net/201806062245114?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmVzc2U=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="map类型" title=""></p>



<pre class="prettyprint"><code class="language-sql hljs "><span class="hljs-comment">-- 选取 MAP 类型</span>
<span class="hljs-operator"><span class="hljs-keyword">SELECT</span> name, address.city <span class="hljs-keyword">FROM</span> employees;</span></code></pre>

<p><img src="https://img-blog.csdn.net/20180606225222417?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmVzc2U=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="Struct类型" title=""></p>



<pre class="prettyprint"><code class="language-sql hljs "><span class="hljs-comment">-- 使用正则表达式来指定列</span>
<span class="hljs-operator"><span class="hljs-keyword">SELECT</span> symbol,<span class="hljs-string">'price.*'</span> <span class="hljs-keyword">FROM</span> stocks;</span>

<span class="hljs-comment">--使用列值进行计算</span>
<span class="hljs-operator"><span class="hljs-keyword">SELECT</span> upper(name), salary, deductions[<span class="hljs-string">"Federal Taxes"</span>], round(salary*(<span class="hljs-number">1</span>-deductions[<span class="hljs-string">"Federal Taxes"</span>])) <span class="hljs-keyword">FROM</span> employees;</span></code></pre>



<h4 id="算数运算符">算数运算符</h4>

<p><img src="https://img-blog.csdn.net/20180606230212827?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmVzc2U=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="算数运算符" title=""></p>



<h4 id="使用函数">使用函数</h4>



<h5 id="数学函数">数学函数</h5>

<p><img src="https://img-blog.csdn.net/2018061208115111?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmVzc2U=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="数学函数表1" title=""> <br>
<img src="https://img-blog.csdn.net/20180612081216582?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmVzc2U=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="数学函数表2" title=""> <br>
<img src="https://img-blog.csdn.net/20180612081233197?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmVzc2U=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="数学函数表3" title=""></p>



<h5 id="聚合函数">聚合函数</h5>

<p><img src="https://img-blog.csdn.net/20180612081548947?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmVzc2U=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="聚合函数1" title=""> <br>
<img src="https://img-blog.csdn.net/20180612081602726?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmVzc2U=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="聚合函数2" title=""></p>



<pre class="prettyprint"><code class="language-sql hljs "><span class="hljs-comment">-- 设置属性值为true来提高聚合的性能</span>
<span class="hljs-operator"><span class="hljs-keyword">SET</span> hive.map.aggr=<span class="hljs-keyword">true</span>;</span> 

<span class="hljs-comment">-- HIVE中 不允许在一个查询语句中使用多于一个的函数(DISTINCT...)</span>
<span class="hljs-operator"><span class="hljs-keyword">SELECT</span> <span class="hljs-aggregate">count</span>(<span class="hljs-keyword">DISTINCT</span> ymd),<span class="hljs-aggregate">count</span>(<span class="hljs-keyword">DISTINCT</span> volume) <span class="hljs-keyword">FROM</span> stocks;</span>
</code></pre>



<h5 id="表生成函数">表生成函数</h5>



<pre class="prettyprint"><code class="language-sql hljs "><span class="hljs-comment">-- 数组拆分</span>
<span class="hljs-operator"><span class="hljs-keyword">SELECT</span> explode(subordinates) <span class="hljs-keyword">AS</span> sub <span class="hljs-keyword">FROM</span> employees;</span>
</code></pre>

<p><img src="https://img-blog.csdn.net/20180612083515173?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmVzc2U=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="表生成函数" title=""></p>



<h5 id="其他内置函数">其他内置函数</h5>

<p><img src="https://img-blog.csdn.net/20180612083754765?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmVzc2U=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="内置函数表1" title=""> <br>
<img src="https://img-blog.csdn.net/20180612083813795?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmVzc2U=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="内置函数表2" title=""> <br>
<img src="https://img-blog.csdn.net/20180612083826740?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmVzc2U=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="内置函数表3" title=""> <br>
<img src="https://img-blog.csdn.net/20180612083839880?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmVzc2U=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="内置函数表4" title=""> <br>
<img src="https://img-blog.csdn.net/20180612083853494?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmVzc2U=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="内置函数表5" title=""></p>



<h5 id="limit-语句">LIMIT 语句</h5>



<pre class="prettyprint"><code class="language-sql hljs "><span class="hljs-comment">-- LIMIT...</span>
<span class="hljs-operator"><span class="hljs-keyword">SELECT</span> upper(name), salary, deduction[<span class="hljs-string">"Federal Taxes"</span>], round(salary * (<span class="hljs-number">1</span> - deduction[<span class="hljs-string">"Federal Taxes"</span>]) <span class="hljs-keyword">FROM</span> employees LIMIT <span class="hljs-number">2</span>;</span>
</code></pre>



<h5 id="列别名">列别名</h5>



<pre class="prettyprint"><code class="language-sql hljs "><span class="hljs-comment">-- 列别名 使用 AS 关键字</span>
<span class="hljs-operator"><span class="hljs-keyword">SELECT</span> upper(name), salary, deduction[<span class="hljs-string">"Federal Taxes"</span>] <span class="hljs-keyword">as</span> fed_taxes, round(salary * (<span class="hljs-number">1</span> - deduction[<span class="hljs-string">"Federal Taxes"</span>]) <span class="hljs-keyword">as</span> salary_minus_fed_taxes 
<span class="hljs-keyword">FROM</span> employees 
LIMIT <span class="hljs-number">2</span>;</span>
</code></pre>



<h5 id="嵌套-select-语句">嵌套 SELECT 语句</h5>



<pre class="prettyprint"><code class="language-sql hljs "><span class="hljs-comment">-- 嵌套查询</span>
FROM (
    <span class="hljs-operator"><span class="hljs-keyword">SELECT</span> upper(name), salary, deduction[<span class="hljs-string">"Federal Taxes"</span>] <span class="hljs-keyword">as</span> fed_taxes, round(salary * (<span class="hljs-number">1</span> - deduction[<span class="hljs-string">"Federal Taxes"</span>]) <span class="hljs-keyword">as</span> salary_minus_fed_taxes 
    <span class="hljs-keyword">FROM</span> employee
) e 
<span class="hljs-keyword">SELECT</span> e.name, e.salary minus_fed_taxes
<span class="hljs-keyword">WHERE</span> e.salary_minus_fed_taxes &gt; <span class="hljs-number">70000</span>;</span>
</code></pre>



<h5 id="casewhenthen-句式">CASE…WHEN…THEN 句式</h5>



<pre class="prettyprint"><code class="language-sql hljs "><span class="hljs-comment">-- 用于处理单个列的查询结果</span>
<span class="hljs-operator"><span class="hljs-keyword">SELECT</span> name, salary,
    <span class="hljs-keyword">CASE</span>
        <span class="hljs-keyword">WHEN</span> salary &lt; <span class="hljs-number">50000.0</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">'low'</span>
        <span class="hljs-keyword">WHEN</span> salary &gt;=<span class="hljs-number">50000.0</span> <span class="hljs-keyword">AND</span> salary &lt; <span class="hljs-number">70000.0</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">'middle'</span>
        <span class="hljs-keyword">WHEN</span> salary &gt;=<span class="hljs-number">70000.0</span> <span class="hljs-keyword">AND</span> salary &lt;<span class="hljs-number">100000.0</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">'high'</span>
        <span class="hljs-keyword">ELSE</span> <span class="hljs-string">'very high'</span>
    <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> bracket <span class="hljs-keyword">FROM</span> employees;</span>
</code></pre>



<h5 id="什么情况下-hive-可以避免进行mapreduce">什么情况下 Hive 可以避免进行MapReduce</h5>



<pre class="prettyprint"><code class="language-sql hljs "><span class="hljs-comment">-- 本地模式不需要mr过程</span>
<span class="hljs-operator"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> employees;</span>

<span class="hljs-comment">-- 对于WHERE 语句中过滤条件只是分区字段这种情况(无论是否使用LIMIT语句限制输出记录条数)，无需MapReduce过程</span>
<span class="hljs-operator"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> employees
<span class="hljs-keyword">WHERE</span> country=<span class="hljs-string">'US'</span> <span class="hljs-keyword">AND</span> state=<span class="hljs-string">'CA'</span>
LIMIT <span class="hljs-number">100</span>;</span>

<span class="hljs-comment">-- 如果属性hive.exec.mode.local.auto 的值为true，Hive还会尝试使用本地模式执行其他操作。</span>
</code></pre>



<h3 id="where-语句">WHERE 语句</h3>

<blockquote>
  <p>SELECT 语句用于选取字段， WHERE 语句用于过滤字段</p>
</blockquote>



<h4 id="谓词操作符">谓词操作符</h4>

<p><img src="https://img-blog.csdn.net/20180614081815813?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmVzc2U=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="谓词操作符" title=""></p>



<h4 id="关于浮点数的比较">关于浮点数的比较</h4>

<blockquote>
  <p>对浮点数进行比较时，需要保持极端谨慎的态度。要避免任何从窄类型隐式转换到更广泛类型的操作。</p>
</blockquote>



<h4 id="like和rlike">LIKE和RLIKE</h4>



<pre class="prettyprint"><code class="language-sql hljs "><span class="hljs-comment">-- LIKE 标准SQL操作符。</span>
<span class="hljs-operator"><span class="hljs-keyword">SELECT</span> name, address.street 
<span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> address.city <span class="hljs-keyword">LIKE</span> <span class="hljs-string">'O%'</span>;</span>

<span class="hljs-comment">-- RLIKE 子句是 Hive 中这个功能的一个扩展，可以通过Java的正则表达式来指定匹配条件</span>
<span class="hljs-operator"><span class="hljs-keyword">SELECT</span> name, address.street 
<span class="hljs-keyword">FROM</span> employees 
<span class="hljs-keyword">WHERE</span> address.street RLIKE <span class="hljs-string">'.*(Chicago|Ontario).*'</span>;</span>
</code></pre>



<h4 id="group-by-语句">GROUP BY 语句</h4>



<pre class="prettyprint"><code class="language-sql hljs "><span class="hljs-comment">-- GROUP BY 分组语句</span>
<span class="hljs-operator"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">year</span>(ymd), <span class="hljs-aggregate">avg</span>(price_close) <span class="hljs-keyword">FROM</span> stocks
<span class="hljs-keyword">WHERE</span> exchange = <span class="hljs-string">'NASDAQ'</span> <span class="hljs-keyword">AND</span> symbol = <span class="hljs-string">'AAPL'</span>
<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">year</span>(ymd);</span>

<span class="hljs-comment">-- HAVING 分组后，条件过滤子句。</span>
<span class="hljs-operator"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">year</span>(ymd), <span class="hljs-aggregate">avg</span>(price_close) <span class="hljs-keyword">FROM</span> stocks
<span class="hljs-keyword">WHERE</span> exchange = <span class="hljs-string">'NASDAQ'</span> <span class="hljs-keyword">AND</span> symbol = <span class="hljs-string">'AAPL'</span>
<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">year</span>(ymd)
<span class="hljs-keyword">HAVING</span> <span class="hljs-aggregate">avg</span>(price_close) &gt;<span class="hljs-number">50.0</span>;</span></code></pre>



<h4 id="join-语句">JOIN 语句</h4>



<h5 id="inner-join">INNER JOIN</h5>



<pre class="prettyprint"><code class="language-sql hljs "><span class="hljs-comment">-- 内连接(INNER JOIN)中，只有进行连接的两个表中都存在与连接标准相匹配的数据才会被保留下来。</span>

<span class="hljs-operator"><span class="hljs-keyword">SELECT</span> a.ymd, a.price_close, b.price_close
<span class="hljs-keyword">FROM</span> stocks a <span class="hljs-keyword">JOIN</span> stocks b <span class="hljs-keyword">ON</span> a.ymd = b.ymd
<span class="hljs-keyword">WHERE</span> a.symbol = <span class="hljs-string">'AAPL'</span> <span class="hljs-keyword">AND</span>  b.symbol = <span class="hljs-string">'IBM'</span>;</span>

<span class="hljs-comment">-- ON a.ymd &lt;= b.ymd 这种标准SQL支持的非等值连接，在Hive中是非法的，主要原因是通过MapReduce 很难实现这种类型的连接</span>
<span class="hljs-comment">-- Hive 目前还不支持在 ON 子句中的谓词间使用 OR</span>
<span class="hljs-comment">-- Hive 总是按照从左到右的顺序执行的</span></code></pre>



<h5 id="join-优化">JOIN 优化</h5>

<blockquote>
  <p>当对3个或更多个表进行JOIN连接时，如果每个ON子句都使用相同的连接键的话，那么只会产生一个 MapReduce job</p>
</blockquote>



<pre class="prettyprint"><code class="language-sql hljs "><span class="hljs-comment">-- Hive 同时假定查询中最后一个表是最大的那个表。在对每行记录进行连接操作时，它会尝试将其他表缓存起来，然后扫描最后的那个表进行计算。因此，用户需要保证连续查询中的表的大小从左到右是依次增加的</span>

<span class="hljs-comment">-- 错误地将最小的表dividends放在了最后面(假定stocks是大表)</span>
<span class="hljs-operator"><span class="hljs-keyword">SELECT</span> s.ymd, s.symbol, s.price_close, d.dividend
<span class="hljs-keyword">FROM</span> stocks s <span class="hljs-keyword">JOIN</span> dividends d <span class="hljs-keyword">ON</span> s.ymd = d.ymd <span class="hljs-keyword">AND</span> s.symbol = d.symbol
<span class="hljs-keyword">WHERE</span> s.symbol = <span class="hljs-string">'AAPL'</span>;</span>

<span class="hljs-comment">-- 应该交换下表stocks和表dividends的位置</span>
<span class="hljs-operator"><span class="hljs-keyword">SELECT</span> s.ymd, s.symbol, s.price_close, d.dividend
<span class="hljs-keyword">FROM</span> dividends d <span class="hljs-keyword">JOIN</span> stocks s <span class="hljs-keyword">ON</span> s.ymd = d.ymd <span class="hljs-keyword">AND</span> s.symbol = d.symbol
<span class="hljs-keyword">WHERE</span> s.symbol = <span class="hljs-string">'AAPL'</span>;</span>

<span class="hljs-comment">-- Hive 提供了一个 "标记" 机制来显示地告知查询优化器哪张表是大表</span>
<span class="hljs-operator"><span class="hljs-keyword">SELECT</span> /*+STREAMTABLE(s) */ s.ymd, s.price_close, d.dividend
<span class="hljs-keyword">FROM</span> stocks s <span class="hljs-keyword">JOIN</span> dividends d <span class="hljs-keyword">ON</span> s.ymd = d.ymd <span class="hljs-keyword">AND</span> s.symbol = d.symbol
<span class="hljs-keyword">WHERE</span> s.symbol = <span class="hljs-string">'AAPL'</span>;</span>
</code></pre>



<h5 id="left-outer-join">LEFT OUTER JOIN</h5>



<pre class="prettyprint"><code class="language-sql hljs "><span class="hljs-comment">-- 左外连接通过关键字 LEFT OUTER 进行标识</span>
<span class="hljs-comment">-- JOIN 操作符左边表中符合 WHERE 子句的所有记录将会被返回</span>
<span class="hljs-comment">-- JOIN 操作符右边表中如果没有符合 ON 后面连接条件的记录时， 那么从右边表指定选择的列的值将会是NULL</span>

<span class="hljs-operator"><span class="hljs-keyword">SELECT</span> s.ymd, s.symbol, s.price_close, d.dividend
<span class="hljs-keyword">FROM</span> stocks s <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> dividends d <span class="hljs-keyword">ON</span> s.ymd = d.ymd <span class="hljs-keyword">AND</span> s.symbol = d.symbol
<span class="hljs-keyword">WHERE</span> s.symbol = <span class="hljs-string">'AAPL'</span>;</span>
</code></pre>



<h5 id="outer-join">OUTER JOIN</h5>

<blockquote>
  <p>OUTER JOIN 语句 先执行 JOIN 语句，然后再将结果通过WHERE 语句进行过滤。 <br>
  WHERE 语句在连接操作执行后才会执行，因此WHERE 语句应该只用于过滤那些非NULL值的列值。同时，和Hive的文档说明中相反的是，ON语句中的分区过滤条件外连接(OUTER JOIN)中是无效的，不过在内连接(INNTER JOIN) 中是有效的。</p>
</blockquote>



<h5 id="right-outer-join">RIGHT OUTER JOIN</h5>



<pre class="prettyprint"><code class="language-sql hljs "><span class="hljs-comment">-- 右外连接(RIGHT OUTER JOIN)会返回右边表所有符合WHERE语句的记录。左表中匹配不上的字段值用NULL代替。</span>
<span class="hljs-operator"><span class="hljs-keyword">SELECT</span> a.ymd, s.symbol, s.price_close, d.dividend
<span class="hljs-keyword">FROM</span> dividends d <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> stocks s <span class="hljs-keyword">ON</span> d.ymd = s.ymd  <span class="hljs-keyword">AND</span> d.symbol = s.symbol
<span class="hljs-keyword">WHERE</span> s.symbol = <span class="hljs-string">'AAPL'</span>;</span></code></pre>



<h5 id="full-outer-join">FULL OUTER JOIN</h5>



<pre class="prettyprint"><code class="language-sql hljs "><span class="hljs-comment">-- 完全外连接(FULL OUTER JOIN)将会返回所有表中符合WHERE语句条件的所有记录。如果任一表的指定字段没有符合条件的值的话，那么就使用NULL值替代</span>
<span class="hljs-operator"><span class="hljs-keyword">SELECT</span> s.ymd, s.symbol, s.price_close, d.dividend 
<span class="hljs-keyword">FROM</span> dividends d <span class="hljs-keyword">FULL</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> stocks s <span class="hljs-keyword">ON</span> d.ymd = s.ymd <span class="hljs-keyword">AND</span> d.symbol = s.symbol
<span class="hljs-keyword">WHERE</span> s.symbol = <span class="hljs-string">'AAPL'</span>;</span></code></pre>



<h5 id="left-semi-join">LEFT SEMI-JOIN</h5>



<pre class="prettyprint"><code class="language-sql hljs "><span class="hljs-comment">-- 左半开连接(LEFT SEMI-JOIN)会返回左边表的记录，前提是其记录对于右边表满足 ON 语句中的判断条件。</span>
<span class="hljs-operator"><span class="hljs-keyword">SELECT</span> s.ymd, s.symbol, s.price_close 
<span class="hljs-keyword">FROM</span> stocks s <span class="hljs-keyword">LEFT</span> SEMI <span class="hljs-keyword">JOIN</span> dividends d <span class="hljs-keyword">ON</span> s.ymd = d.ymd <span class="hljs-keyword">AND</span> s.symbol = d.symbol;</span>

<span class="hljs-comment">-- SELECT 和 WHERE 语句中不能引用到右边表中的字段</span>
<span class="hljs-comment">-- Hive 不支持右半开连接</span></code></pre>



<h5 id="笛卡尔积-join">笛卡尔积 JOIN</h5>

<blockquote>
  <p>笛卡尔积在一些情况下是很有用的。例如，假设有一个表表示用户偏好，另有一个表表示新闻文章，同时有一个算法会推测出用户可能会喜欢读哪些文章。这个时候就需要使用笛卡尔积生成所有用户和所有网页的对应关系和集合。</p>
</blockquote>



<pre class="prettyprint"><code class="language-sql hljs "><span class="hljs-comment">-- 笛卡尔积是一种连接，表示左边表的行数乘以右边表的行数等于笛卡尔积结果集的大小</span>
<span class="hljs-operator"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> stocks <span class="hljs-keyword">JOIN</span> dividends;</span></code></pre>



<h5 id="map-side-join">map-side JOIN</h5>

<blockquote>
  <p>所有表中只有一张表是小表，那么可以在最大的表通过 mapper的时候将小表完全放到内存中。Hive可以在map端执行连接过程(称为 map-side JOIN)，这是因为Hive可以和内存中的小表进行逐一匹配，从而省略掉常规连接操作所需要的reduce过程。</p>
</blockquote>



<pre class="prettyprint"><code class="language-sql hljs "><span class="hljs-comment">-- 设置属性</span>
<span class="hljs-comment">-- 也可以将属性 设置在 $HOME/.hiverc 文件中</span>
<span class="hljs-operator"><span class="hljs-keyword">set</span> hive.auto.convert.<span class="hljs-keyword">join</span>=<span class="hljs-keyword">true</span>;</span>
<span class="hljs-operator"><span class="hljs-keyword">set</span> hive.mapjoin.smalltable.filesize=<span class="hljs-number">25000000</span>;</span>

<span class="hljs-comment">-- Hive对右外连接(RIGHT OUTER JOIN) 和全外连接 (FULL OUTER JOIN)不支持这个优化</span>
<span class="hljs-comment">-- 如果所有表中的数据是分桶的，那么对于大表，在特定的情况下同样可以使用这个优化。</span>
<span class="hljs-comment">-- 分桶优化设置参数</span>
<span class="hljs-operator"><span class="hljs-keyword">set</span> hive.optimize.bucketmapJOIN=<span class="hljs-keyword">true</span>

-- 如果所涉及的分桶表都具有相同的分桶数，而且数据是按照连接键或桶的键进行排序的。那么这时Hive可以执行一个更狂的分类-合并连接(sort-<span class="hljs-keyword">merge</span> <span class="hljs-keyword">JOIN</span>)。
<span class="hljs-keyword">set</span> hive.<span class="hljs-keyword">input</span>.format=org.apache.hadoop.hive.ql.io.BucketizedHiveInputFormat;</span>
<span class="hljs-operator"><span class="hljs-keyword">set</span> hive.optimize.bucketmapjoin=<span class="hljs-keyword">true</span>;</span>
<span class="hljs-operator"><span class="hljs-keyword">set</span> hive.optimize.bucketmapjoin.sortedmerge=<span class="hljs-keyword">true</span>;</span>
</code></pre>



<h4 id="order-by-和-sort-by">ORDER BY 和 SORT BY</h4>

<blockquote>
  <p>Hive找那个 ORDER BY 语句会对查询结果集执行一个全局排序。 <br>
  SORT BY 只会咋每个reducer中对数据进行排序，也就是执行一个局部排序过程。</p>
</blockquote>



<pre class="prettyprint"><code class="language-sql hljs "><span class="hljs-comment">-- ORDER BY</span>
<span class="hljs-operator"><span class="hljs-keyword">SELECT</span> s.ymd, s.symbol,s.price_close
<span class="hljs-keyword">FROM</span> stocks s
<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> s.ymd <span class="hljs-keyword">ASC</span>, s.symbol <span class="hljs-keyword">DESC</span>;</span>

<span class="hljs-comment">-- SORT BY</span>
<span class="hljs-operator"><span class="hljs-keyword">SELECT</span> s.ymd, s.symbol,s.price_close
<span class="hljs-keyword">FROM</span> stocks s
SORT <span class="hljs-keyword">BY</span> s.ymd <span class="hljs-keyword">ASC</span>, s.symbol <span class="hljs-keyword">DESC</span>;</span></code></pre>



<h4 id="含有-sort-by-的-distribute-by">含有 SORT BY 的 DISTRIBUTE BY</h4>



<pre class="prettyprint"><code class="language-sql hljs "><span class="hljs-comment">-- DISTRIBUTE BY 控制 map的输出在reducer中是如何划分，相同的Key 会分发到同一个 reducer 当中</span>
<span class="hljs-comment">-- DISTRIBUTE BY 语句要写在 SORT BY 语句之前</span>

<span class="hljs-operator"><span class="hljs-keyword">SELECT</span> s.ymd, s.symbol, s.price_close
<span class="hljs-keyword">FROM</span> stocks s
DISTRIBUTE <span class="hljs-keyword">BY</span> s.symbol
SORT <span class="hljs-keyword">BY</span> s.symbol <span class="hljs-keyword">ASC</span>, s.ymd <span class="hljs-keyword">ASC</span>;</span>
</code></pre>



<h4 id="cluster-by">CLUSTER BY</h4>

<pre class="prettyprint"><code class="language-sql hljs "><span class="hljs-comment">-- CLUSTER BY 等价于 DISTRIBUTE BY...SORT BY... ASC</span>
<span class="hljs-operator"><span class="hljs-keyword">SELECT</span> s.ymd, s.symbol, s.price_close 
<span class="hljs-keyword">FROM</span> stocks s
CLUSTER <span class="hljs-keyword">BY</span> s.symbol;</span>

<span class="hljs-comment">-- 使用 DISTRIBUTE BY...SORT BY 语句或其简化版的CLUSTER BY 语句会剥夺 SORT BY的并行性，然后这样可以实现输出文件的数据是全局排序</span></code></pre>



<h4 id="类型转换">类型转换</h4>

<pre class="prettyprint"><code class="language-sql hljs "><span class="hljs-comment">--cast()函数，用户可以使用这个函数对指定的值进行显式的类型转换</span>
<span class="hljs-operator"><span class="hljs-keyword">SELECT</span> name, salary <span class="hljs-keyword">FROM</span> employees
<span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">cast</span>(salary <span class="hljs-keyword">AS</span> <span class="hljs-keyword">FLOAT</span>) &lt;<span class="hljs-number">100000.0</span>;</span>

<span class="hljs-comment">-- 将浮点数转换成整数的推荐方式是 使用表中列举的 round() 或者 floor()函数，而不是使用类型转换操作符 cast</span>

<span class="hljs-comment">-- BINARY类型只支持 BINARY类型转换为STRING类型</span>
<span class="hljs-comment">-- 用户同样可以将STRING 类型转换为 BINARY类型</span>
<span class="hljs-operator"><span class="hljs-keyword">SELECT</span> (<span class="hljs-number">2.0</span>*<span class="hljs-keyword">cast</span>(<span class="hljs-keyword">cast</span>(b <span class="hljs-keyword">as</span> string) <span class="hljs-keyword">as</span> <span class="hljs-keyword">double</span>)) <span class="hljs-keyword">from</span> src;</span>
</code></pre>



<h4 id="抽样查询">抽样查询</h4>

<pre class="prettyprint"><code class="language-sql hljs "><span class="hljs-comment">--使用rand()函数进行抽样</span>
<span class="hljs-operator"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> numbers TABLESAMPLE(BUCKET <span class="hljs-number">3</span> OUT <span class="hljs-keyword">OF</span> <span class="hljs-number">10</span> <span class="hljs-keyword">ON</span> rand()) s;</span>
<span class="hljs-comment">-- 有可能是 2 4 有可能是 7 10 有可能没有值</span>


<span class="hljs-comment">-- 按照指定的列而非 rand()函数进行分桶，那么同一语句多次执行的返回值是相同的</span>
<span class="hljs-operator"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> numbers TABLESAMPLE(BUCKET <span class="hljs-number">3</span> OUT <span class="hljs-keyword">OF</span> <span class="hljs-number">10</span> <span class="hljs-keyword">ON</span> <span class="hljs-keyword">number</span>) s;</span>
<span class="hljs-comment">-- result 2</span>
<span class="hljs-operator"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> numbers TABLESAMPLE(BUCKET <span class="hljs-number">5</span> OUT <span class="hljs-keyword">OF</span> <span class="hljs-number">10</span> <span class="hljs-keyword">ON</span> <span class="hljs-keyword">number</span>) s;</span>
<span class="hljs-comment">-- result 4</span>

<span class="hljs-comment">-- 分桶语句转给你的分母表示的是数据将会散列的桶的个数，而分子表示将会选择的桶的个数。</span>


<span class="hljs-comment">-- 数据块抽样</span>
<span class="hljs-comment">-- Hive提供按照百分比进行抽样的方式，这种是基于行数的，按照输入路径下的数据块百分比进行的抽样</span>
<span class="hljs-operator"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> numbersflat TABLESAMPLE(<span class="hljs-number">0.1</span> PERCENT) s;</span>

<span class="hljs-comment">-- 这种抽样方式不一定适用于所有的文件格式。另外，这种抽样的最小抽样单元是一个 HDFS数据块。因此，如果表的数据大小小于普通的块大小128MB的话，那么将放回所有行</span>
</code></pre>

<h4 id="union-all">UNION ALL</h4>

<pre class="prettyprint"><code class="language-sql hljs "><span class="hljs-comment">--UNION ALL 可以将2个或多个表进行合并</span>
<span class="hljs-operator"><span class="hljs-keyword">SELECT</span> log.ymd, log.<span class="hljs-keyword">level</span>, log.message
    <span class="hljs-keyword">FROM</span>(
        <span class="hljs-keyword">SELECT</span> <span class="hljs-number">11.</span>ymd, <span class="hljs-number">11.</span><span class="hljs-keyword">level</span>, <span class="hljs-number">11.</span>message, <span class="hljs-string">'Log1'</span> <span class="hljs-keyword">AS</span> source
        <span class="hljs-keyword">FROM</span> log1 <span class="hljs-number">11</span>
    <span class="hljs-keyword">UNION</span> <span class="hljs-keyword">ALL</span>
        <span class="hljs-keyword">SELECT</span> <span class="hljs-number">12.</span>ymd, <span class="hljs-number">12.</span><span class="hljs-keyword">level</span>, <span class="hljs-number">12.</span>message, <span class="hljs-string">'Log2'</span> <span class="hljs-keyword">AS</span> source
        <span class="hljs-keyword">FROM</span> log1 <span class="hljs-number">12</span>
    ) log
SORT <span class="hljs-keyword">BY</span> log.ymd <span class="hljs-keyword">ASC</span>;</span>


</code></pre>

<hr>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>