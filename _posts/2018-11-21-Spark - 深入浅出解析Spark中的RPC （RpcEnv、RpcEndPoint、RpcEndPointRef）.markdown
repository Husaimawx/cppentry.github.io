---
layout:     post
title:      Spark - 深入浅出解析Spark中的RPC （RpcEnv、RpcEndPoint、RpcEndPointRef）
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                <p>转载作者：知乎 -  <a class="UserLink-link" href="https://www.zhihu.com/people/neoremind" rel="nofollow" style="color:inherit;font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;font-size:15px;font-weight:600;white-space:nowrap;">neoReMinD</a></p><p></p><h2 style="margin-top:1em;margin-bottom:1em;font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;font-size:18px;line-height:inherit;color:rgb(26,26,26);white-space:pre-wrap;">前言</h2><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">Spark是一个快速的、通用的分布式计算系统，而分布式的特性就意味着，必然存在节点间的通信，本文主要介绍不同的Spark组件之间是如何通过RPC（Remote Procedure Call) 进行点对点通信的。分为3个章节，</p><ol style="padding-left:2em;margin-top:1em;margin-bottom:1em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;"><li style="list-style-position:outside;">Spark RPC的简单示例和实际应用</li><li style="list-style-position:outside;">Spark RPC模块的设计原理</li><li style="list-style-position:outside;">Spark RPC核心技术总结</li></ol><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;"><br></p><h2 style="margin-top:1em;margin-bottom:1em;font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;font-size:18px;line-height:inherit;color:rgb(26,26,26);white-space:pre-wrap;">1. Spark RPC的简单示例和实际应用</h2><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">Spark的RPC主要在两个模块中，</p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">1）在Spark-core中，主要承载了更好的封装server和client的作用，以及和scala语言的融合，它依赖于模块org.apache.spark.spark-network-common。</p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">2）在org.apache.spark.spark-network-common中，该模块是java语言编写的，最新版本是基于netty4开发的，提供全双工、多路复用I/O模型的Socket I/O能力，Spark的传输协议结构（wire protocol）也是自定义的。</p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">为了更好的了解Spark RPC的内部实现细节，我基于Spark 2.1版本抽离了RPC通信的部分，单独启了一个项目<a href="https://link.zhihu.com/?target=https%3A//github.com/neoremind/kraps-rpc" rel="nofollow" class="external" style="color:inherit;border-bottom:1px solid rgba(68,68,68,.72);"><span class="invisible" style="font-size:0px;line-height:0;font-family:a;">https://</span><span class="visible">github.com/neoremind/kr</span><span class="invisible" style="font-size:0px;line-height:0;font-family:a;">aps-rpc</span><span class="ellipsis"></span></a>，放到了github以及发布到Maven中央仓库做学习使用，提供了比较好的上手文档、参数设置和性能评估。下面就通过这个模块对Spark RPC先做一个感性的认识。</p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">以下的代码均可以在<a href="https://link.zhihu.com/?target=https%3A//github.com/neoremind/kraps-rpc" rel="nofollow" class="wrap external" style="color:inherit;border-bottom:1px solid rgba(68,68,68,.72);">kraps-rpc</a>找到。</p><h2 style="margin-top:1em;margin-bottom:1em;font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;font-size:18px;line-height:inherit;color:rgb(26,26,26);white-space:pre-wrap;">1.1 简单示例</h2><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">假设我们要开发一个Hello服务，客户端可以传输string，服务端响应hi或者bye，并echo回去输入的string。</p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">第一步，定义一个HelloEndpoint继承自RpcEndpoint表明可以并发的调用该服务，如果继承自ThreadSafeRpcEndpoint则表明该Endpoint不允许并发。</p><div class="highlight" style="color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;"><pre style="margin-top:1em;margin-bottom:1em;padding:10px;font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;font-size:14px;background-color:rgb(246,246,246);"><code class="language-scala" style="margin:0px;font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;background-color:rgb(246,246,246);"><span class="k" style="font-weight:600;">class</span> <span class="nc" style="font-weight:600;color:rgb(23,81,153);">HelloEndpoint</span><span class="o" style="font-weight:600;">(</span><span class="k" style="font-weight:600;">override</span> <span class="k" style="font-weight:600;">val</span> <span class="n">rpcEnv</span><span class="k" style="font-weight:600;">:</span> <span class="kt" style="font-weight:600;color:rgb(23,81,153);">RpcEnv</span><span class="o" style="font-weight:600;">)</span> <span class="k" style="font-weight:600;">extends</span> <span class="nc" style="font-weight:600;color:rgb(23,81,153);">RpcEndpoint</span> <span class="o" style="font-weight:600;">{</span>
  <span class="k" style="font-weight:600;">override</span> <span class="k" style="font-weight:600;">def</span> <span class="n">onStart</span><span class="o" style="font-weight:600;">()</span><span class="k" style="font-weight:600;">:</span> <span class="kt" style="font-weight:600;color:rgb(23,81,153);">Unit</span> <span class="o" style="font-weight:600;">=</span> <span class="o" style="font-weight:600;">{</span>
    <span class="n">println</span><span class="o" style="font-weight:600;">(</span><span class="s" style="color:rgb(241,64,60);">"start hello endpoint"</span><span class="o" style="font-weight:600;">)</span>
  <span class="o" style="font-weight:600;">}</span>

  <span class="k" style="font-weight:600;">override</span> <span class="k" style="font-weight:600;">def</span> <span class="n">receiveAndReply</span><span class="o" style="font-weight:600;">(</span><span class="n">context</span><span class="k" style="font-weight:600;">:</span> <span class="kt" style="font-weight:600;color:rgb(23,81,153);">RpcCallContext</span><span class="o" style="font-weight:600;">)</span><span class="k" style="font-weight:600;">:</span> <span class="kt" style="font-weight:600;color:rgb(23,81,153);">PartialFunction</span><span class="o" style="font-weight:600;">[</span><span class="kt" style="font-weight:600;color:rgb(23,81,153);">Any</span>, <span class="kt" style="font-weight:600;color:rgb(23,81,153);">Unit</span><span class="o" style="font-weight:600;">]</span> <span class="k" style="font-weight:600;">=</span> <span class="o" style="font-weight:600;">{</span>
    <span class="k" style="font-weight:600;">case</span> <span class="nc" style="font-weight:600;color:rgb(23,81,153);">SayHi</span><span class="o" style="font-weight:600;">(</span><span class="n">msg</span><span class="o" style="font-weight:600;">)</span> <span class="k" style="font-weight:600;">=&gt;</span> <span class="o" style="font-weight:600;">{</span>
      <span class="n">println</span><span class="o" style="font-weight:600;">(</span><span class="s" style="color:rgb(241,64,60);">s"receive </span><span class="si" style="color:rgb(241,64,60);">$msg</span><span class="s" style="color:rgb(241,64,60);">"</span><span class="o" style="font-weight:600;">)</span>
      <span class="n">context</span><span class="o" style="font-weight:600;">.</span><span class="n">reply</span><span class="o" style="font-weight:600;">(</span><span class="s" style="color:rgb(241,64,60);">s"hi, </span><span class="si" style="color:rgb(241,64,60);">$msg</span><span class="s" style="color:rgb(241,64,60);">"</span><span class="o" style="font-weight:600;">)</span>
    <span class="o" style="font-weight:600;">}</span>
    <span class="k" style="font-weight:600;">case</span> <span class="nc" style="font-weight:600;color:rgb(23,81,153);">SayBye</span><span class="o" style="font-weight:600;">(</span><span class="n">msg</span><span class="o" style="font-weight:600;">)</span> <span class="k" style="font-weight:600;">=&gt;</span> <span class="o" style="font-weight:600;">{</span>
      <span class="n">println</span><span class="o" style="font-weight:600;">(</span><span class="s" style="color:rgb(241,64,60);">s"receive </span><span class="si" style="color:rgb(241,64,60);">$msg</span><span class="s" style="color:rgb(241,64,60);">"</span><span class="o" style="font-weight:600;">)</span>
      <span class="n">context</span><span class="o" style="font-weight:600;">.</span><span class="n">reply</span><span class="o" style="font-weight:600;">(</span><span class="s" style="color:rgb(241,64,60);">s"bye, </span><span class="si" style="color:rgb(241,64,60);">$msg</span><span class="s" style="color:rgb(241,64,60);">"</span><span class="o" style="font-weight:600;">)</span>
    <span class="o" style="font-weight:600;">}</span>
  <span class="o" style="font-weight:600;">}</span>

  <span class="k" style="font-weight:600;">override</span> <span class="k" style="font-weight:600;">def</span> <span class="n">onStop</span><span class="o" style="font-weight:600;">()</span><span class="k" style="font-weight:600;">:</span> <span class="kt" style="font-weight:600;color:rgb(23,81,153);">Unit</span> <span class="o" style="font-weight:600;">=</span> <span class="o" style="font-weight:600;">{</span>
    <span class="n">println</span><span class="o" style="font-weight:600;">(</span><span class="s" style="color:rgb(241,64,60);">"stop hello endpoint"</span><span class="o" style="font-weight:600;">)</span>
  <span class="o" style="font-weight:600;">}</span>
<span class="o" style="font-weight:600;">}</span>

<span class="k" style="font-weight:600;">case</span> <span class="k" style="font-weight:600;">class</span> <span class="nc" style="font-weight:600;color:rgb(23,81,153);">SayHi</span><span class="o" style="font-weight:600;">(</span><span class="n">msg</span><span class="k" style="font-weight:600;">:</span> <span class="kt" style="font-weight:600;color:rgb(23,81,153);">String</span><span class="o" style="font-weight:600;">)</span>
<span class="k" style="font-weight:600;">case</span> <span class="k" style="font-weight:600;">class</span> <span class="nc" style="font-weight:600;color:rgb(23,81,153);">SayBye</span><span class="o" style="font-weight:600;">(</span><span class="n">msg</span><span class="k" style="font-weight:600;">:</span> <span class="kt" style="font-weight:600;color:rgb(23,81,153);">String</span><span class="o" style="font-weight:600;">)</span>
</code></pre></div><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">和Java传统的RPC解决方案对比，可以看出这里不用定义接口或者方法标示（比如通常的id或者name），使用scala的模式匹配进行方法的路由。虽然点对点通信的契约交换受制于语言，这里就是SayHi和SayBye两个case class，但是Spark RPC定位于内部组件通信，所以无伤大雅。</p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;"><br></p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">第二步，把刚刚开发好的Endpoint交给Spark RPC管理其生命周期，用于响应外部请求。RpcEnvServerConfig可以定义一些参数、server名称（仅仅是一个标识）、bind地址和端口。通过NettyRpcEnvFactory这个工厂方法，生成RpcEnv，RpcEnv是整个Spark RPC的核心所在，后文会详细展开，通过setupEndpoint将"hello-service"这个名字和第一步定义的Endpoint绑定，后续client调用路由到这个Endpoint就需要"hello-service"这个名字。调用awaitTermination来阻塞服务端监听请求并且处理。</p><div class="highlight" style="color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;"><pre style="margin-top:1em;margin-bottom:1em;padding:10px;font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;font-size:14px;background-color:rgb(246,246,246);"><code class="language-scala" style="margin:0px;font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;background-color:rgb(246,246,246);"><span class="k" style="font-weight:600;">val</span> <span class="n">config</span> <span class="k" style="font-weight:600;">=</span> <span class="nc" style="font-weight:600;color:rgb(23,81,153);">RpcEnvServerConfig</span><span class="o" style="font-weight:600;">(</span><span class="k" style="font-weight:600;">new</span> <span class="nc" style="font-weight:600;color:rgb(23,81,153);">RpcConf</span><span class="o" style="font-weight:600;">(),</span> <span class="s" style="color:rgb(241,64,60);">"hello-server"</span><span class="o" style="font-weight:600;">,</span> <span class="s" style="color:rgb(241,64,60);">"localhost"</span><span class="o" style="font-weight:600;">,</span> <span class="mi" style="color:rgb(0,132,255);">52345</span><span class="o" style="font-weight:600;">)</span>
<span class="k" style="font-weight:600;">val</span> <span class="n">rpcEnv</span><span class="k" style="font-weight:600;">:</span> <span class="kt" style="font-weight:600;color:rgb(23,81,153);">RpcEnv</span> <span class="o" style="font-weight:600;">=</span> <span class="nc" style="font-weight:600;color:rgb(23,81,153);">NettyRpcEnvFactory</span><span class="o" style="font-weight:600;">.</span><span class="n">create</span><span class="o" style="font-weight:600;">(</span><span class="n">config</span><span class="o" style="font-weight:600;">)</span>
<span class="k" style="font-weight:600;">val</span> <span class="n">helloEndpoint</span><span class="k" style="font-weight:600;">:</span> <span class="kt" style="font-weight:600;color:rgb(23,81,153);">RpcEndpoint</span> <span class="o" style="font-weight:600;">=</span> <span class="k" style="font-weight:600;">new</span> <span class="nc" style="font-weight:600;color:rgb(23,81,153);">HelloEndpoint</span><span class="o" style="font-weight:600;">(</span><span class="n">rpcEnv</span><span class="o" style="font-weight:600;">)</span>
<span class="n">rpcEnv</span><span class="o" style="font-weight:600;">.</span><span class="n">setupEndpoint</span><span class="o" style="font-weight:600;">(</span><span class="s" style="color:rgb(241,64,60);">"hello-service"</span><span class="o" style="font-weight:600;">,</span> <span class="n">helloEndpoint</span><span class="o" style="font-weight:600;">)</span>
<span class="n">rpcEnv</span><span class="o" style="font-weight:600;">.</span><span class="n">awaitTermination</span><span class="o" style="font-weight:600;">()</span>
</code></pre></div><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;"><br></p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">第三步，开发一个client调用刚刚启动的server，首先RpcEnvClientConfig和RpcEnv都是必须的，然后通过刚刚提到的"hello-service"名字新建一个远程Endpoint的引用（Ref），可以看做是stub，用于调用，这里首先展示通过异步的方式来做请求。</p><div class="highlight" style="color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;"><pre style="margin-top:1em;margin-bottom:1em;padding:10px;font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;font-size:14px;background-color:rgb(246,246,246);"><code class="language-scala" style="margin:0px;font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;background-color:rgb(246,246,246);"><span class="k" style="font-weight:600;">val</span> <span class="n">rpcConf</span> <span class="k" style="font-weight:600;">=</span> <span class="k" style="font-weight:600;">new</span> <span class="nc" style="font-weight:600;color:rgb(23,81,153);">RpcConf</span><span class="o" style="font-weight:600;">()</span>
<span class="k" style="font-weight:600;">val</span> <span class="n">config</span> <span class="k" style="font-weight:600;">=</span> <span class="nc" style="font-weight:600;color:rgb(23,81,153);">RpcEnvClientConfig</span><span class="o" style="font-weight:600;">(</span><span class="n">rpcConf</span><span class="o" style="font-weight:600;">,</span> <span class="s" style="color:rgb(241,64,60);">"hello-client"</span><span class="o" style="font-weight:600;">)</span>
<span class="k" style="font-weight:600;">val</span> <span class="n">rpcEnv</span><span class="k" style="font-weight:600;">:</span> <span class="kt" style="font-weight:600;color:rgb(23,81,153);">RpcEnv</span> <span class="o" style="font-weight:600;">=</span> <span class="nc" style="font-weight:600;color:rgb(23,81,153);">NettyRpcEnvFactory</span><span class="o" style="font-weight:600;">.</span><span class="n">create</span><span class="o" style="font-weight:600;">(</span><span class="n">config</span><span class="o" style="font-weight:600;">)</span>
<span class="k" style="font-weight:600;">val</span> <span class="n">endPointRef</span><span class="k" style="font-weight:600;">:</span> <span class="kt" style="font-weight:600;color:rgb(23,81,153);">RpcEndpointRef</span> <span class="o" style="font-weight:600;">=</span> <span class="n">rpcEnv</span><span class="o" style="font-weight:600;">.</span><span class="n">setupEndpointRef</span><span class="o" style="font-weight:600;">(</span><span class="nc" style="font-weight:600;color:rgb(23,81,153);">RpcAddress</span><span class="o" style="font-weight:600;">(</span><span class="s" style="color:rgb(241,64,60);">"localhost"</span><span class="o" style="font-weight:600;">,</span> <span class="mi" style="color:rgb(0,132,255);">52345</span><span class="o" style="font-weight:600;">),</span> <span class="s" style="color:rgb(241,64,60);">"hell-service"</span><span class="o" style="font-weight:600;">)</span>
<span class="k" style="font-weight:600;">val</span> <span class="n">future</span><span class="k" style="font-weight:600;">:</span> <span class="kt" style="font-weight:600;color:rgb(23,81,153);">Future</span><span class="o" style="font-weight:600;">[</span><span class="kt" style="font-weight:600;color:rgb(23,81,153);">String</span><span class="o" style="font-weight:600;">]</span> <span class="k" style="font-weight:600;">=</span> <span class="n">endPointRef</span><span class="o" style="font-weight:600;">.</span><span class="n">ask</span><span class="o" style="font-weight:600;">[</span><span class="kt" style="font-weight:600;color:rgb(23,81,153);">String</span><span class="o" style="font-weight:600;">](</span><span class="nc" style="font-weight:600;color:rgb(23,81,153);">SayHi</span><span class="o" style="font-weight:600;">(</span><span class="s" style="color:rgb(241,64,60);">"neo"</span><span class="o" style="font-weight:600;">))</span>
<span class="n">future</span><span class="o" style="font-weight:600;">.</span><span class="n">onComplete</span> <span class="o" style="font-weight:600;">{</span>
    <span class="k" style="font-weight:600;">case</span> <span class="n">scala</span><span class="o" style="font-weight:600;">.</span><span class="n">util</span><span class="o" style="font-weight:600;">.</span><span class="nc" style="font-weight:600;color:rgb(23,81,153);">Success</span><span class="o" style="font-weight:600;">(</span><span class="n">value</span><span class="o" style="font-weight:600;">)</span> <span class="k" style="font-weight:600;">=&gt;</span> <span class="n">println</span><span class="o" style="font-weight:600;">(</span><span class="s" style="color:rgb(241,64,60);">s"Got the result = </span><span class="si" style="color:rgb(241,64,60);">$value</span><span class="s" style="color:rgb(241,64,60);">"</span><span class="o" style="font-weight:600;">)</span>
    <span class="k" style="font-weight:600;">case</span> <span class="n">scala</span><span class="o" style="font-weight:600;">.</span><span class="n">util</span><span class="o" style="font-weight:600;">.</span><span class="nc" style="font-weight:600;color:rgb(23,81,153);">Failure</span><span class="o" style="font-weight:600;">(</span><span class="n">e</span><span class="o" style="font-weight:600;">)</span> <span class="k" style="font-weight:600;">=&gt;</span> <span class="n">println</span><span class="o" style="font-weight:600;">(</span><span class="s" style="color:rgb(241,64,60);">s"Got error: </span><span class="si" style="color:rgb(241,64,60);">$e</span><span class="s" style="color:rgb(241,64,60);">"</span><span class="o" style="font-weight:600;">)</span>
<span class="o" style="font-weight:600;">}</span>
<span class="nc" style="font-weight:600;color:rgb(23,81,153);">Await</span><span class="o" style="font-weight:600;">.</span><span class="n">result</span><span class="o" style="font-weight:600;">(</span><span class="n">future</span><span class="o" style="font-weight:600;">,</span> <span class="nc" style="font-weight:600;color:rgb(23,81,153);">Duration</span><span class="o" style="font-weight:600;">.</span><span class="n">apply</span><span class="o" style="font-weight:600;">(</span><span class="s" style="color:rgb(241,64,60);">"30s"</span><span class="o" style="font-weight:600;">))</span>
</code></pre></div><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">也可以通过同步的方式，在最新的Spark中askWithRetry实际已更名为askSync。</p><div class="highlight" style="color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;"><pre style="margin-top:1em;margin-bottom:1em;padding:10px;font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;font-size:14px;background-color:rgb(246,246,246);"><code class="language-scala" style="margin:0px;font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;background-color:rgb(246,246,246);"><span class="k" style="font-weight:600;">val</span> <span class="n">result</span> <span class="k" style="font-weight:600;">=</span> <span class="n">endPointRef</span><span class="o" style="font-weight:600;">.</span><span class="n">askWithRetry</span><span class="o" style="font-weight:600;">[</span><span class="kt" style="font-weight:600;color:rgb(23,81,153);">String</span><span class="o" style="font-weight:600;">](</span><span class="nc" style="font-weight:600;color:rgb(23,81,153);">SayBye</span><span class="o" style="font-weight:600;">(</span><span class="s" style="color:rgb(241,64,60);">"neo"</span><span class="o" style="font-weight:600;">))</span>
</code></pre></div><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;"><br></p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">这就是Spark RPC的通信过程，使用起来易用性可想而知，非常简单，RPC框架屏蔽了Socket I/O模型、线程模型、序列化/反序列化过程、使用netty做了包识别，长连接，网络重连重试等机制。</p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;"><br></p><h2 style="margin-top:1em;margin-bottom:1em;font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;font-size:18px;line-height:inherit;color:rgb(26,26,26);white-space:pre-wrap;">1.2 实际应用</h2><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">在Spark内部，很多的Endpoint以及EndpointRef与之通信都是通过这种形式的，举例来说比如driver和executor之间的交互用到了心跳机制，使用<a href="https://link.zhihu.com/?target=https%3A//github.com/apache/spark/blob/branch-2.1/core/src/main/scala/org/apache/spark/HeartbeatReceiver.scala" rel="nofollow" class="wrap external" style="color:inherit;border-bottom:1px solid rgba(68,68,68,.72);">HeartbeatReceiver</a>来实现，这也是一个Endpoint，它的注册在SparkContext初始化的时候做的，代码如下：</p><div class="highlight" style="color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;"><pre style="margin-top:1em;margin-bottom:1em;padding:10px;font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;font-size:14px;background-color:rgb(246,246,246);"><code class="language-scala" style="margin:0px;font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;background-color:rgb(246,246,246);"><span class="nc" style="font-weight:600;color:rgb(23,81,153);">_heartbeatReceiver</span> <span class="k" style="font-weight:600;">=</span> <span class="n">env</span><span class="o" style="font-weight:600;">.</span><span class="n">rpcEnv</span><span class="o" style="font-weight:600;">.</span><span class="n">setupEndpoint</span><span class="o" style="font-weight:600;">(</span><span class="nc" style="font-weight:600;color:rgb(23,81,153);">HeartbeatReceiver</span><span class="o" style="font-weight:600;">.</span><span class="nc" style="font-weight:600;color:rgb(23,81,153);">ENDPOINT_NAME</span><span class="o" style="font-weight:600;">,</span> <span class="k" style="font-weight:600;">new</span> <span class="nc" style="font-weight:600;color:rgb(23,81,153);">HeartbeatReceiver</span><span class="o" style="font-weight:600;">(</span><span class="k" style="font-weight:600;">this</span><span class="o" style="font-weight:600;">))</span>
</code></pre></div><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">而它的调用在<a href="https://link.zhihu.com/?target=https%3A//github.com/apache/spark/blob/branch-2.1/core/src/main/scala/org/apache/spark/executor/Executor.scala" rel="nofollow" class="wrap external" style="color:inherit;border-bottom:1px solid rgba(68,68,68,.72);">Executor</a>内的方式如下：</p><div class="highlight" style="color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;"><pre style="margin-top:1em;margin-bottom:1em;padding:10px;font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;font-size:14px;background-color:rgb(246,246,246);"><code class="language-scala" style="margin:0px;font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;background-color:rgb(246,246,246);"><span class="k" style="font-weight:600;">val</span> <span class="n">message</span> <span class="k" style="font-weight:600;">=</span> <span class="nc" style="font-weight:600;color:rgb(23,81,153);">Heartbeat</span><span class="o" style="font-weight:600;">(</span><span class="n">executorId</span><span class="o" style="font-weight:600;">,</span> <span class="n">accumUpdates</span><span class="o" style="font-weight:600;">.</span><span class="n">toArray</span><span class="o" style="font-weight:600;">,</span> <span class="n">env</span><span class="o" style="font-weight:600;">.</span><span class="n">blockManager</span><span class="o" style="font-weight:600;">.</span><span class="n">blockManagerId</span><span class="o" style="font-weight:600;">)</span>
<span class="k" style="font-weight:600;">val</span> <span class="n">response</span> <span class="k" style="font-weight:600;">=</span> <span class="n">heartbeatReceiverRef</span><span class="o" style="font-weight:600;">.</span><span class="n">askWithRetry</span><span class="o" style="font-weight:600;">[</span><span class="kt" style="font-weight:600;color:rgb(23,81,153);">HeartbeatResponse</span><span class="o" style="font-weight:600;">](</span><span class="n">message</span><span class="o" style="font-weight:600;">,</span> <span class="nc" style="font-weight:600;color:rgb(23,81,153);">RpcTimeout</span><span class="o" style="font-weight:600;">(</span><span class="n">conf</span><span class="o" style="font-weight:600;">,</span> <span class="s" style="color:rgb(241,64,60);">"spark.executor.heartbeatInterval"</span><span class="o" style="font-weight:600;">,</span> <span class="s" style="color:rgb(241,64,60);">"10s"</span><span class="o" style="font-weight:600;">))</span> 
</code></pre></div><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;"><br></p><h2 style="margin-top:1em;margin-bottom:1em;font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;font-size:18px;line-height:inherit;color:rgb(26,26,26);white-space:pre-wrap;">2. Spark RPC模块的设计原理</h2><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">首先说明下，自Spark 2.0后已经把Akka这个RPC框架剥离出去了（详细见<a href="https://link.zhihu.com/?target=https%3A//issues.apache.org/jira/browse/SPARK-5293" rel="nofollow" class="wrap external" style="color:inherit;border-bottom:1px solid rgba(68,68,68,.72);">SPARK-5293</a>），原因很简单，因为很多用户会使用Akka做消息传递，那么就会和Spark内嵌的版本产生冲突，而Spark也仅仅用了Akka做RPC，所以2.0之后，基于底层的org.apache.spark.spark-network-common模块实现了一个类似Akka Actor消息传递模式的scala模块，封装在了core里面，<a href="https://link.zhihu.com/?target=https%3A//github.com/neoremind/kraps-rpc" rel="nofollow" class="wrap external" style="color:inherit;border-bottom:1px solid rgba(68,68,68,.72);">kraps-rpc</a>也就是把这个部分从core里面剥离出来独立了一个项目。</p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">虽然剥离了Akka，但是还是沿袭了Actor模式中的一些概念，在现在的Spark RPC中有如下映射关系。</p><div class="highlight" style="color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;"><pre style="margin-top:1em;margin-bottom:1em;padding:10px;font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;font-size:14px;background-color:rgb(246,246,246);"><code class="language-scala" style="margin:0px;font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;background-color:rgb(246,246,246);"><span class="nc" style="font-weight:600;color:rgb(23,81,153);">RpcEndpoint</span> <span class="k" style="font-weight:600;">=&gt;</span> <span class="nc" style="font-weight:600;color:rgb(23,81,153);">Actor</span>
<span class="nc" style="font-weight:600;color:rgb(23,81,153);">RpcEndpointRef</span> <span class="k" style="font-weight:600;">=&gt;</span> <span class="nc" style="font-weight:600;color:rgb(23,81,153);">ActorRef</span>
<span class="nc" style="font-weight:600;color:rgb(23,81,153);">RpcEnv</span> <span class="k" style="font-weight:600;">=&gt;</span> <span class="nc" style="font-weight:600;color:rgb(23,81,153);">ActorSystem</span>
</code></pre></div><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">底层通信全部使用netty进行了替换，使用的是org.apache.spark.spark-network-common这个内部lib。</p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;"><br></p><h2 style="margin-top:1em;margin-bottom:1em;font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;font-size:18px;line-height:inherit;color:rgb(26,26,26);white-space:pre-wrap;">2.1 类图分析</h2><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">这里先上一个UML图展示了Spark RPC模块内的类关系，白色的是Spark-core中的scala类，黄色的是org.apache.spark.spark-network-common中的java类。</p><img src="https://img-blog.csdn.net/20180510213834647?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTM1NjA5MjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""><br><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">不要被这张图所吓倒，经过下面的解释分析，相信读者可以领会其内涵，不用细究其设计的合理度，Spark是一个发展很快、不断演进的项目，代码不是一成不变的，持续变化是一定的。</p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;"><br></p><h2 style="margin-top:1em;margin-bottom:1em;font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;font-size:18px;line-height:inherit;color:rgb(26,26,26);white-space:pre-wrap;">RpcEndpoint和RpcCallContext</h2><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">先看最左侧的RpcEndpoint，RpcEndpoint是一个可以响应请求的服务，和Akka中的Actor类似，从它的提供的方法签名（如下）可以看出，receive方法是单向方式的，可以比作UDP，而receiveAndReply是应答方式的，可以比作TCP。它的子类实现可以选择性的覆盖这两个函数，我们第一章实现的HelloEndpoint以及Spark中的HeartbeatReceiver都是它的子类。</p><div class="highlight" style="color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;"><pre style="margin-top:1em;margin-bottom:1em;padding:10px;font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;font-size:14px;background-color:rgb(246,246,246);"><code class="language-scala" style="margin:0px;font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;background-color:rgb(246,246,246);"><span class="k" style="font-weight:600;">def</span> <span class="n">receive</span><span class="k" style="font-weight:600;">:</span> <span class="kt" style="font-weight:600;color:rgb(23,81,153);">PartialFunction</span><span class="o" style="font-weight:600;">[</span><span class="kt" style="font-weight:600;color:rgb(23,81,153);">Any</span>, <span class="kt" style="font-weight:600;color:rgb(23,81,153);">Unit</span><span class="o" style="font-weight:600;">]</span> <span class="k" style="font-weight:600;">=</span> <span class="o" style="font-weight:600;">{</span>
    <span class="k" style="font-weight:600;">case</span> <span class="k" style="font-weight:600;">_</span> <span class="k" style="font-weight:600;">=&gt;</span> <span class="k" style="font-weight:600;">throw</span> <span class="k" style="font-weight:600;">new</span> <span class="nc" style="font-weight:600;color:rgb(23,81,153);">RpcException</span><span class="o" style="font-weight:600;">(</span><span class="n">self</span> <span class="o" style="font-weight:600;">+</span> <span class="s" style="color:rgb(241,64,60);">" does not implement 'receive'"</span><span class="o" style="font-weight:600;">)</span>
<span class="o" style="font-weight:600;">}</span>

<span class="k" style="font-weight:600;">def</span> <span class="n">receiveAndReply</span><span class="o" style="font-weight:600;">(</span><span class="n">context</span><span class="k" style="font-weight:600;">:</span> <span class="kt" style="font-weight:600;color:rgb(23,81,153);">RpcCallContext</span><span class="o" style="font-weight:600;">)</span><span class="k" style="font-weight:600;">:</span> <span class="kt" style="font-weight:600;color:rgb(23,81,153);">PartialFunction</span><span class="o" style="font-weight:600;">[</span><span class="kt" style="font-weight:600;color:rgb(23,81,153);">Any</span>, <span class="kt" style="font-weight:600;color:rgb(23,81,153);">Unit</span><span class="o" style="font-weight:600;">]</span> <span class="k" style="font-weight:600;">=</span> <span class="o" style="font-weight:600;">{</span>
    <span class="k" style="font-weight:600;">case</span> <span class="k" style="font-weight:600;">_</span> <span class="k" style="font-weight:600;">=&gt;</span> <span class="n">context</span><span class="o" style="font-weight:600;">.</span><span class="n">sendFailure</span><span class="o" style="font-weight:600;">(</span><span class="k" style="font-weight:600;">new</span> <span class="nc" style="font-weight:600;color:rgb(23,81,153);">RpcException</span><span class="o" style="font-weight:600;">(</span><span class="n">self</span> <span class="o" style="font-weight:600;">+</span> <span class="s" style="color:rgb(241,64,60);">" won't reply anything"</span><span class="o" style="font-weight:600;">))</span>
<span class="o" style="font-weight:600;">}</span>
</code></pre></div><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">其中RpcCallContext是用于分离核心业务逻辑和底层传输的桥接方法，这也可以看出Spark RPC多用组合，聚合以及回调callback的设计模式来做OO抽象，这样可以剥离业务逻辑-&gt;RPC封装（Spark-core模块内）-&gt;底层通信（spark-network-common）三者。RpcCallContext可以用于回复正常的响应以及错误异常，例如：</p><div class="highlight" style="color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;"><pre style="margin-top:1em;margin-bottom:1em;padding:10px;font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;font-size:14px;background-color:rgb(246,246,246);"><code class="language-scala" style="margin:0px;font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;background-color:rgb(246,246,246);"><span class="n">reply</span><span class="o" style="font-weight:600;">(</span><span class="n">response</span><span class="k" style="font-weight:600;">:</span> <span class="kt" style="font-weight:600;color:rgb(23,81,153);">Any</span><span class="o" style="font-weight:600;">)</span> <span class="c1" style="font-style:italic;color:rgb(153,153,153);">// 回复一个message，可以是一个case class。</span>
<span class="n">sendFailure</span><span class="o" style="font-weight:600;">(</span><span class="n">e</span><span class="k" style="font-weight:600;">:</span> <span class="kt" style="font-weight:600;color:rgb(23,81,153);">Throwable</span><span class="o" style="font-weight:600;">)</span> <span class="c1" style="font-style:italic;color:rgb(153,153,153);">// 回复一个异常，可以是Exception的子类，由于Spark RPC默认采用Java序列化方式，所以异常可以完整的在客户端还原并且作为cause re-throw出去。</span>
</code></pre></div><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">RpcCallContext也分为了两个子类，分别是LocalNettyRpcCallContext和RemoteNettyRpcCallContext，这个主要是框架内部使用，如果是本地就走LocalNettyRpcCallContext直接调用Endpoint即可，否则就走RemoteNettyRpcCallContext需要通过RPC和远程交互，这点也体现了RPC的核心概念，就是如何执行另外一个地址空间上的函数、方法，就仿佛在本地调用一样。</p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">另外，RpcEndpoint还提供了一系列回调函数覆盖。</p><div class="highlight" style="color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;"><pre style="margin-top:1em;margin-bottom:1em;padding:10px;font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;font-size:14px;background-color:rgb(246,246,246);"><code class="language-scala" style="margin:0px;font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;background-color:rgb(246,246,246);"><span class="o" style="font-weight:600;">-</span> <span class="n">onError</span>
<span class="o" style="font-weight:600;">-</span> <span class="n">onConnected</span>
<span class="o" style="font-weight:600;">-</span> <span class="n">onDisconnected</span>
<span class="o" style="font-weight:600;">-</span> <span class="n">onNetworkError</span>
<span class="o" style="font-weight:600;">-</span> <span class="n">onStart</span>
<span class="o" style="font-weight:600;">-</span> <span class="n">onStop</span>
<span class="o" style="font-weight:600;">-</span> <span class="n">stop</span>
</code></pre></div><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">另外需要注意下，它的一个子类是ThreadSafeRpcEndpoint，很多Spark中的Endpoint继承了这个类，Spark RPC框架对这种Endpoint不做并发处理，也就是同一时间只允许一个线程在做调用。</p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">还有一个默认的RpcEndpoint叫做RpcEndpointVerifier，每一个RpcEnv初始化的时候都会注册上这个Endpoint，因为客户端的调用每次都需要先询问服务端是否存在某一个Endpoint。</p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;"><br></p><h2 style="margin-top:1em;margin-bottom:1em;font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;font-size:18px;line-height:inherit;color:rgb(26,26,26);white-space:pre-wrap;">RpcEndpointRef</h2><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">RpcEndpointRef类似于Akka中ActorRef，顾名思义，它是RpcEndpoint的引用，提供的方法send等同于!, ask方法等同于?，send用于单向发送请求（RpcEndpoint中的receive响应它），提供fire-and-forget语义，而ask提供请求响应的语义（RpcEndpoint中的receiveAndReply响应它），默认是需要返回response的，带有超时机制，可以同步阻塞等待，也可以返回一个Future句柄，不阻塞发起请求的工作线程。</p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">RpcEndpointRef是客户端发起请求的入口，它可以从RpcEnv中获取，并且聪明的做本地调用或者RPC。</p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;"><br></p><h2 style="margin-top:1em;margin-bottom:1em;font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;font-size:18px;line-height:inherit;color:rgb(26,26,26);white-space:pre-wrap;">RpcEnv和NettyRpcEnv</h2><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">类库中最核心的就是RpcEnv，刚刚提到了这就是ActorSystem，服务端和客户端都可以使用它来做通信。</p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">对于server side来说，RpcEnv是RpcEndpoint的运行环境，负责RpcEndpoint的整个生命周期管理，它可以注册或者销毁Endpoint，解析TCP层的数据包并反序列化，封装成RpcMessage，并且路由请求到指定的Endpoint，调用业务逻辑代码，如果Endpoint需要响应，把返回的对象序列化后通过TCP层再传输到远程对端，如果Endpoint发生异常，那么调用RpcCallContext.sendFailure来把异常发送回去。</p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">对client side来说，通过RpcEnv可以获取RpcEndpoint引用，也就是RpcEndpointRef的。</p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">RpcEnv是和具体的底层通信模块交互的负责人，它的伴生对象包含创建RpcEnv的方法，签名如下：</p><div class="highlight" style="color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;"><pre style="margin-top:1em;margin-bottom:1em;padding:10px;font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;font-size:14px;background-color:rgb(246,246,246);"><code class="language-scala" style="margin:0px;font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;background-color:rgb(246,246,246);"><span class="k" style="font-weight:600;">def</span> <span class="n">create</span><span class="o" style="font-weight:600;">(</span>
      <span class="n">name</span><span class="k" style="font-weight:600;">:</span> <span class="kt" style="font-weight:600;color:rgb(23,81,153);">String</span><span class="o" style="font-weight:600;">,</span>
      <span class="n">bindAddress</span><span class="k" style="font-weight:600;">:</span> <span class="kt" style="font-weight:600;color:rgb(23,81,153);">String</span><span class="o" style="font-weight:600;">,</span>
      <span class="n">advertiseAddress</span><span class="k" style="font-weight:600;">:</span> <span class="kt" style="font-weight:600;color:rgb(23,81,153);">String</span><span class="o" style="font-weight:600;">,</span>
      <span class="n">port</span><span class="k" style="font-weight:600;">:</span> <span class="kt" style="font-weight:600;color:rgb(23,81,153);">Int</span><span class="o" style="font-weight:600;">,</span>
      <span class="n">conf</span><span class="k" style="font-weight:600;">:</span> <span class="kt" style="font-weight:600;color:rgb(23,81,153);">SparkConf</span><span class="o" style="font-weight:600;">,</span>
      <span class="n">securityManager</span><span class="k" style="font-weight:600;">:</span> <span class="kt" style="font-weight:600;color:rgb(23,81,153);">SecurityManager</span><span class="o" style="font-weight:600;">,</span>
      <span class="n">numUsableCores</span><span class="k" style="font-weight:600;">:</span> <span class="kt" style="font-weight:600;color:rgb(23,81,153);">Int</span><span class="o" style="font-weight:600;">,</span>
      <span class="n">clientMode</span><span class="k" style="font-weight:600;">:</span> <span class="kt" style="font-weight:600;color:rgb(23,81,153);">Boolean</span><span class="o" style="font-weight:600;">)</span><span class="k" style="font-weight:600;">:</span> <span class="kt" style="font-weight:600;color:rgb(23,81,153);">RpcEnv</span> <span class="o" style="font-weight:600;">=</span> <span class="o" style="font-weight:600;">{</span>
    <span class="k" style="font-weight:600;">val</span> <span class="n">config</span> <span class="k" style="font-weight:600;">=</span> <span class="nc" style="font-weight:600;color:rgb(23,81,153);">RpcEnvConfig</span><span class="o" style="font-weight:600;">(</span><span class="n">conf</span><span class="o" style="font-weight:600;">,</span> <span class="n">name</span><span class="o" style="font-weight:600;">,</span> <span class="n">bindAddress</span><span class="o" style="font-weight:600;">,</span> <span class="n">advertiseAddress</span><span class="o" style="font-weight:600;">,</span> <span class="n">port</span><span class="o" style="font-weight:600;">,</span> <span class="n">securityManager</span><span class="o" style="font-weight:600;">,</span>
      <span class="n">numUsableCores</span><span class="o" style="font-weight:600;">,</span> <span class="n">clientMode</span><span class="o" style="font-weight:600;">)</span>
    <span class="k" style="font-weight:600;">new</span> <span class="nc" style="font-weight:600;color:rgb(23,81,153);">NettyRpcEnvFactory</span><span class="o" style="font-weight:600;">().</span><span class="n">create</span><span class="o" style="font-weight:600;">(</span><span class="n">config</span><span class="o" style="font-weight:600;">)</span>
  <span class="o" style="font-weight:600;">}</span>
</code></pre></div><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">RpcEnv的创建由RpcEnvFactory负责，RpcEnvFactory目前只有一个子类是NettyRpcEnvFactory，原来还有AkkaRpcEnvFactory。NettyRpcEnvFactory.create方法一旦调用就会立即在bind的address和port上启动server。</p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">它依赖的RpcEnvConfig就是一个包含了SparkConf以及一些参数（kraps-rpc中更名为RpcConf）。RpcEnv的参数都需要从RpcEnvConfig中拿，最基本的hostname和port，还有高级些的连接超时、重试次数、Reactor线程池大小等等。</p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">下面看看RpcEnv最常用的两个方法：</p><div class="highlight" style="color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;"><pre style="margin-top:1em;margin-bottom:1em;padding:10px;font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;font-size:14px;background-color:rgb(246,246,246);"><code class="language-scala" style="margin:0px;font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;background-color:rgb(246,246,246);"><span class="c1" style="font-style:italic;color:rgb(153,153,153);">// 注册endpoint，必须指定名称，客户端路由就靠这个名称来找endpoint</span>
<span class="k" style="font-weight:600;">def</span> <span class="n">setupEndpoint</span><span class="o" style="font-weight:600;">(</span><span class="n">name</span><span class="k" style="font-weight:600;">:</span> <span class="kt" style="font-weight:600;color:rgb(23,81,153);">String</span><span class="o" style="font-weight:600;">,</span> <span class="n">endpoint</span><span class="k" style="font-weight:600;">:</span> <span class="kt" style="font-weight:600;color:rgb(23,81,153);">RpcEndpoint</span><span class="o" style="font-weight:600;">)</span><span class="k" style="font-weight:600;">:</span> <span class="kt" style="font-weight:600;color:rgb(23,81,153);">RpcEndpointRef</span> 

<span class="c1" style="font-style:italic;color:rgb(153,153,153);">// 拿到一个endpoint的引用</span>
<span class="k" style="font-weight:600;">def</span> <span class="n">setupEndpointRef</span><span class="o" style="font-weight:600;">(</span><span class="n">address</span><span class="k" style="font-weight:600;">:</span> <span class="kt" style="font-weight:600;color:rgb(23,81,153);">RpcAddress</span><span class="o" style="font-weight:600;">,</span> <span class="n">endpointName</span><span class="k" style="font-weight:600;">:</span> <span class="kt" style="font-weight:600;color:rgb(23,81,153);">String</span><span class="o" style="font-weight:600;">)</span><span class="k" style="font-weight:600;">:</span> <span class="kt" style="font-weight:600;color:rgb(23,81,153);">RpcEndpointRef</span>
</code></pre></div><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">NettyRpcEnv由NettyRpcEnvFactory.create创建，这是整个Spark core和org.apache.spark.spark-network-common的桥梁，内部leverage底层提供的通信能力，同时包装了一个类Actor的语义。上面两个核心的方法，setupEndpoint会在Dispatcher中注册Endpoint，setupEndpointRef会先去调用RpcEndpointVerifier尝试验证本地或者远程是否存在某个endpoint，然后再创建RpcEndpointRef。更多关于服务端、客户端调用的细节将在时序图中阐述，这里不再展开。</p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;"><br></p><h2 style="margin-top:1em;margin-bottom:1em;font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;font-size:18px;line-height:inherit;color:rgb(26,26,26);white-space:pre-wrap;">Dispatcher和Inbox</h2><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">NettyRpcEnv中包含Dispatcher，主要针对服务端，帮助路由到正确的RpcEndpoint，并且调用其业务逻辑。</p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">这里需要先阐述下Reactor模型，Spark RPC的Socket I/O一个典型的Reactor模型的，但是结合了Actor pattern中的mailbox，可谓是一种混合的实现方式。</p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">使用Reactor模型，由底层netty创建的EventLoop做I/O多路复用，这里使用Multiple Reactors这种形式，如下图所示，从netty的角度而言，Main Reactor和Sub Reactor对应BossGroup和WorkerGroup的概念，前者负责监听TCP连接、建立和断开，后者负责真正的I/O读写，而图中的ThreadPool就是的Dispatcher中的线程池，它来解耦开来耗时的业务逻辑和I/O操作，这样就可以更scalabe，只需要少数的线程就可以处理成千上万的连接，这种思想是标准的分治策略，offload非I/O操作到另外的线程池。</p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">真正处理RpcEndpoint的业务逻辑在ThreadPool里面，中间靠Reactor线程中的handler处理decode成RpcMessage，然后投递到Inbox中，所以compute的过程在另外的下面介绍的Dispatcher线程池里面做。</p>    <img src="https://img-blog.csdn.net/20180510213857999?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTM1NjA5MjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""><br><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;"><br></p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">刚刚还提到了Actor pattern中mailbox模式，Spark RPC最早起源于Akka，所以进化到现在，仍然了使用了这个模式。这里就介绍Inbox，每个Endpoint都有一个Inbox，Inbox里面有一个InboxMessage的链表，InboxMessage有很多子类，可以是远程调用过来的RpcMessage，可以是远程调用过来的fire-and-forget的单向消息OneWayMessage，还可以是各种服务启动，链路建立断开等Message，这些Message都会在Inbox内部的方法内做模式匹配，调用相应的RpcEndpoint的函数（都是一一对应的）。</p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">Dispatcher中包含一个MessageLoop，它读取LinkedBlockingQueue中的投递RpcMessage，根据客户端指定的Endpoint标识，找到Endpoint的Inbox，然后投递进去，由于是阻塞队列，当没有消息的时候自然阻塞，一旦有消息，就开始工作。Dispatcher的ThreadPool负责消费这些Message。</p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">Dispatcher的ThreadPool它使用参数spark.rpc.netty.dispatcher.numThreads来控制数量，如果kill -3 &lt;PID&gt;每个Spark driver或者executor进程，都会看到N个dispatcher线程：</p><div class="highlight" style="color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;"><pre style="margin-top:1em;margin-bottom:1em;padding:10px;font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;font-size:14px;background-color:rgb(246,246,246);"><code class="language-scala" style="margin:0px;font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;background-color:rgb(246,246,246);"><span class="s" style="color:rgb(241,64,60);">"dispatcher-event-loop-0"</span> <span class="k" style="font-weight:600;">#</span><span class="mi" style="color:rgb(0,132,255);">26</span> <span class="n">daemon</span> <span class="n">prio</span><span class="k" style="font-weight:600;">=</span><span class="mi" style="color:rgb(0,132,255);">5</span> <span class="n">os_prio</span><span class="k" style="font-weight:600;">=</span><span class="mi" style="color:rgb(0,132,255);">31</span> <span class="n">tid</span><span class="k" style="font-weight:600;">=</span><span class="mh" style="color:rgb(0,132,255);">0x00007f8877153800</span> <span class="n">nid</span><span class="k" style="font-weight:600;">=</span><span class="mh" style="color:rgb(0,132,255);">0x7103</span> <span class="n">waiting</span> <span class="n">on</span> <span class="n">condition</span> <span class="o" style="font-weight:600;">[</span><span class="err" style="color:rgb(241,64,60);">0</span><span class="kt" style="font-weight:600;color:rgb(23,81,153);">x000000011f78b000</span><span class="o" style="font-weight:600;">]</span>
</code></pre></div><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">那么另外的问题是谁会调用Dispatcher分发Message的方法呢？答案是RpcHandler的子类NettyRpcHandler，这就是Reactor中的线程做的事情。RpcHandler是底层org.apache.spark.spark-network-common提供的handler，当远程的数据包解析成功后，会调用这个handler做处理。</p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">这样就完成了一个完全异步的流程，Network IO通信由底层负责，然后由Dispatcher分发，只要Dispatcher中的InboxMessage的链表足够大，那么就可以让Dispatcher中的ThreadPool慢慢消化消息，和底层的IO解耦开来，完全在独立的线程中完成，一旦完成Endpoint内部业务逻辑，利用RpcCallContext回调来做消息的返回。</p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;"><br></p><h2 style="margin-top:1em;margin-bottom:1em;font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;font-size:18px;line-height:inherit;color:rgb(26,26,26);white-space:pre-wrap;">Outbox</h2><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">NettyRpcEnv中包含一个ConcurrentHashMap[RpcAddress, Outbox]，每个远程Endpoint都对应一个Outbox，这和上面Inbox遥相呼应，是一个mailbox似的实现方式。</p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">和Inbox类似，Outbox内部包含一个OutboxMessage的链表，OutboxMessage有两个子类，OneWayOutboxMessage和RpcOutboxMessage，分别对应调用RpcEndpoint的receive和receiveAndReply方法。</p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">NettyRpcEnv中的send和ask方法会调用指定地址Outbox中的send方法，当远程连接未建立时，会先建立连接，然后去消化OutboxMessage。</p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">同样，一个问题是Outbox中的send方法如何将消息通过Network IO发送出去，如果是ask方法又是如何读取远程响应的呢？答案是send方法通过org.apache.spark.spark-network-common创建的TransportClient发送出去消息，由Reactor线程负责序列化并且发送出去，每个Message都会返回一个UUID，由底层来维护一个发送出去消息与其Callback的HashMap，当Netty收到完整的远程RpcResponse时候，回调响应的Callback，做反序列化，进而回调Spark core中的业务逻辑，做Promise/Future的done，上层退出阻塞。</p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">这也是一个异步的过程，发送消息到Outbox后，直接返回，Network IO通信由底层负责，一旦RPC调用成功或者失败，都会回调上层的函数，做相应的处理。</p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;"><br></p><h2 style="margin-top:1em;margin-bottom:1em;font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;font-size:18px;line-height:inherit;color:rgb(26,26,26);white-space:pre-wrap;">spark-network-common中的类</h2><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">这里暂不做过多的展开，都是基于Netty的封装，有兴趣的读者可以自行阅读源码，当然还可以参考我之前开源的<a href="https://link.zhihu.com/?target=https%3A//github.com/neoremind/navi-pbrpc/wiki/Tutorials" rel="nofollow" class="wrap external" style="color:inherit;border-bottom:1px solid rgba(68,68,68,.72);">Navi-pbrpc</a>框架的代码，其原理是基本相同的。</p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;"><br></p><h2 style="margin-top:1em;margin-bottom:1em;font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;font-size:18px;line-height:inherit;color:rgb(26,26,26);white-space:pre-wrap;">2.2 时序图分析</h2><h2 style="margin-top:1em;margin-bottom:1em;font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;font-size:18px;line-height:inherit;color:rgb(26,26,26);white-space:pre-wrap;">服务启动</h2><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">话不多述，直接上图。</p><img src="https://img-blog.csdn.net/20180510213917313?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTM1NjA5MjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""><br><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;"><br></p><h2 style="margin-top:1em;margin-bottom:1em;font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;font-size:18px;line-height:inherit;color:rgb(26,26,26);white-space:pre-wrap;">服务端响应</h2><img src="https://img-blog.csdn.net/20180510213924140?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTM1NjA5MjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""><br><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">第一阶段，IO接收。TransportRequestHandler是netty的回调handler，它会根据wire format（下文会介绍）解析好一个完整的数据包，交给NettyRpcEnv做反序列化，如果是RPC调用会构造RpcMessage，然后回调RpcHandler的方法处理RpcMessage，内部会调用Dispatcher做RpcMessage的投递，放到Inbox中，到此结束。</p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">第二阶段，IO响应。MessageLoop获取带处理的RpcMessage，交给Dispatcher中的ThreadPool做处理，实际就是调用RpcEndpoint的业务逻辑，通过RpcCallContext将消息序列化，通过回调函数，告诉TransportRequestHandler这有一个消息处理完毕，响应回去。</p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">这里请重点体会异步处理带来的便利，使用Reactor和Actor mailbox的结合的模式，解耦了消息的获取以及处理逻辑。</p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;"><br></p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">客户端请求</p><img src="https://img-blog.csdn.net/20180510213931957?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTM1NjA5MjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""><br><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">客户端一般需要先建立RpcEnv，然后获取RpcEndpointRef。</p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">第一阶段，IO发送。利用RpcEndpointRef做send或者ask动作，这里以send为例，send会先进行消息的序列化，然后投递到指定地址的Outbox中，Outbox如果发现连接未建立则先尝试建立连接，然后调用底层的TransportClient发送数据，直接通过该netty的API完成，完成后即可返回，这里返回了UUID作为消息的标识，用于下一个阶段的回调，使用的角度来说可以返回一个Future，客户端可以阻塞或者继续做其他操作。</p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">第二，IO接收。TransportResponseHandler接收到远程的响应后，会先做反序列号，然后回调第一阶段的Future，完成调用，这个过程全部在Reactor线程中完成的，通过Future做线程间的通知。</p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;"><br></p><h2 style="margin-top:1em;margin-bottom:1em;font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;font-size:18px;line-height:inherit;color:rgb(26,26,26);white-space:pre-wrap;">3. Spark RPC核心技术总结</h2><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">Spark RPC作为RPC传输层选择TCP协议，做可靠的、全双工的binary stream通道。</p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">做一个高性能/scalable的RPC，需要能够满足第一，服务端尽可能多的处理并发请求，第二，同时尽可能短的处理完毕。CPU和I/O之前天然存在着差异，网络传输的延时不可控，CPU资源宝贵，系统进程/线程资源宝贵，为了尽可能避免Socket I/O阻塞服务端和客户端调用，有一些模式（pattern）是可以应用的。Spark RPC的I/O Model由于采用了<a href="https://link.zhihu.com/?target=http%3A//netty.io/" rel="nofollow" class="wrap external" style="color:inherit;border-bottom:1px solid rgba(68,68,68,.72);">Netty</a>，因此使用的底层的I/O多路复用（I/O Multiplexing）机制，这里可以通过spark.rpc.io.mode参数设置，不同的平台使用的技术不同，例如linux使用epoll。</p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">线程模型采用Multi-Reactors + mailbox的异步方式来处理，在上文中已经介绍过。</p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">Schema Declaration和序列化方面，Spark RPC默认采用Java native serialization方案，主要从兼容性和JVM平台内部组件通信，以及scala语言的融合考虑，所以不具备跨语言通信的能力，性能上也不是追求极致，目前还没有使用Kyro等更好序列化性能和数据大小的方案。</p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">协议结构，Spark RPC采用私有的wire format如下，采用headr+payload的组织方式，header中包括整个frame的长度，message的类型，请求UUID。为解决TCP粘包和半包问题，以及组织成完整的Message的逻辑都在org.apache.spark.network.protocol.MessageEncoder中。</p><img src="https://img-blog.csdn.net/20180510213942506?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTM1NjA5MjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""><br><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;"><br></p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">使用<a href="https://link.zhihu.com/?target=https%3A//www.wireshark.org/" rel="nofollow" class="wrap external" style="color:inherit;border-bottom:1px solid rgba(68,68,68,.72);">wireshake</a>具体分析一下。</p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">首先看一个RPC请求，就是调用第一章说的HelloEndpoint，客户端调用分两个TCP Segment传输，这是因为Spark使用netty的时候header和body分别writeAndFlush出去。</p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">下图是第一个TCP segment：</p><img src="https://img-blog.csdn.net/20180510213950398?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTM1NjA5MjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""><br><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">例子中蓝色的部分是header，头中的字节解析如下：</p><div class="highlight" style="color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;"><pre style="margin-top:1em;margin-bottom:1em;padding:10px;font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;font-size:14px;background-color:rgb(246,246,246);"><code class="language-scala" style="margin:0px;font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;background-color:rgb(246,246,246);"><span class="mi" style="color:rgb(0,132,255);">00</span> <span class="mi" style="color:rgb(0,132,255);">00</span> <span class="mi" style="color:rgb(0,132,255);">00</span> <span class="mi" style="color:rgb(0,132,255);">00</span> <span class="mi" style="color:rgb(0,132,255);">00</span> <span class="mi" style="color:rgb(0,132,255);">00</span> <span class="mi" style="color:rgb(0,132,255);">05</span> <span class="n">d2</span> <span class="c1" style="font-style:italic;color:rgb(153,153,153);">// 十进制1490，是整个frame的长度</span>
</code></pre></div><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">03一个字节表示的是RpcRequest，枚举定义如下，</p><div class="highlight" style="color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;"><pre style="margin-top:1em;margin-bottom:1em;padding:10px;font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;font-size:14px;background-color:rgb(246,246,246);"><code class="language-scala" style="margin:0px;font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;background-color:rgb(246,246,246);"><span class="nc" style="font-weight:600;color:rgb(23,81,153);">RpcRequest</span><span class="o" style="font-weight:600;">(</span><span class="mi" style="color:rgb(0,132,255);">3</span><span class="o" style="font-weight:600;">)</span>
<span class="nc" style="font-weight:600;color:rgb(23,81,153);">RpcResponse</span><span class="o" style="font-weight:600;">(</span><span class="mi" style="color:rgb(0,132,255);">4</span><span class="o" style="font-weight:600;">)</span>
<span class="nc" style="font-weight:600;color:rgb(23,81,153);">RpcFailure</span><span class="o" style="font-weight:600;">(</span><span class="mi" style="color:rgb(0,132,255);">5</span><span class="o" style="font-weight:600;">)</span>
<span class="nc" style="font-weight:600;color:rgb(23,81,153);">StreamRequest</span><span class="o" style="font-weight:600;">(</span><span class="mi" style="color:rgb(0,132,255);">6</span><span class="o" style="font-weight:600;">)</span>
<span class="nc" style="font-weight:600;color:rgb(23,81,153);">StreamResponse</span><span class="o" style="font-weight:600;">(</span><span class="mi" style="color:rgb(0,132,255);">7</span><span class="o" style="font-weight:600;">)</span>
<span class="nc" style="font-weight:600;color:rgb(23,81,153);">StreamFailure</span><span class="o" style="font-weight:600;">(</span><span class="mi" style="color:rgb(0,132,255);">8</span><span class="o" style="font-weight:600;">),</span>
<span class="nc" style="font-weight:600;color:rgb(23,81,153);">OneWayMessage</span><span class="o" style="font-weight:600;">(</span><span class="mi" style="color:rgb(0,132,255);">9</span><span class="o" style="font-weight:600;">)</span>
<span class="nc" style="font-weight:600;color:rgb(23,81,153);">User</span><span class="o" style="font-weight:600;">(-</span><span class="mi" style="color:rgb(0,132,255);">1</span><span class="o" style="font-weight:600;">)</span>
</code></pre></div><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">每个字节的意义如下</p><div class="highlight" style="color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;"><pre style="margin-top:1em;margin-bottom:1em;padding:10px;font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;font-size:14px;background-color:rgb(246,246,246);"><code class="language-scala" style="margin:0px;font-family:Menlo, Monaco, Consolas, 'Andale Mono', 'lucida console', 'Courier New', monospace;background-color:rgb(246,246,246);"><span class="mi" style="color:rgb(0,132,255);">4</span><span class="n">b</span> <span class="n">ac</span> <span class="n">a6</span> <span class="mi" style="color:rgb(0,132,255);">9</span><span class="n">f</span> <span class="mi" style="color:rgb(0,132,255);">83</span> <span class="mi" style="color:rgb(0,132,255);">5</span><span class="n">d</span> <span class="mi" style="color:rgb(0,132,255);">17</span> <span class="n">a9</span>  <span class="c1" style="font-style:italic;color:rgb(153,153,153);">// 8个字节是UUID</span>
<span class="mi" style="color:rgb(0,132,255);">05</span> <span class="n">bd</span> <span class="c1" style="font-style:italic;color:rgb(153,153,153);">// 十进制1469，payload长度</span>
</code></pre></div><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">具体的Payload就长下面这个样子，可以看出使用Java native serialization，一个简单的Echo请求就有1469个字节，还是很大的，序列化的效率不高。但是Spark RPC定位内部通信，不是一个通用的RPC框架，并且使用的量非常小，所以这点消耗也就可以忽略了，还有Spark Structured Streaming使用该序列化方式，其性能还是可以满足要求的。</p><img src="https://img-blog.csdn.net/20180510214002533?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTM1NjA5MjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""><br><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">另外，作者在<a href="https://link.zhihu.com/?target=https%3A//github.com/neoremind/kraps-rpc%234-performance-test" rel="nofollow" class="wrap external" style="color:inherit;border-bottom:1px solid rgba(68,68,68,.72);">kraps-rpc</a>中还给Spark-rpc做了一次性能测试，具体可以参考<a href="https://link.zhihu.com/?target=https%3A//github.com/neoremind/kraps-rpc%234-performance-test" rel="nofollow" class="wrap external" style="color:inherit;border-bottom:1px solid rgba(68,68,68,.72);">github</a>。</p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;"><br></p><h2 style="margin-top:1em;margin-bottom:1em;font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;font-size:18px;line-height:inherit;color:rgb(26,26,26);white-space:pre-wrap;">总结</h2><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">作者从好奇的角度来深度挖掘了下Spark RPC的内幕，并且从2.1版本的Spark core中独立出了一个专门的项目<a href="https://link.zhihu.com/?target=https%3A//github.com/neoremind/kraps-rpc" rel="nofollow" class="wrap external" style="color:inherit;border-bottom:1px solid rgba(68,68,68,.72);">Kraps-rpc</a>，放到了github以及发布到Maven中央仓库做学习使用，提供了比较好的上手文档、参数设置和性能评估，在整合kraps-rpc还发现了一个小的改进点，给Spark提了一个PR——[<a href="https://link.zhihu.com/?target=https%3A//github.com/apache/spark/pull/18964" rel="nofollow" class="wrap external" style="color:inherit;border-bottom:1px solid rgba(68,68,68,.72);">SPARK-21701</a>]，已经被merge到了主干，算是contribute社区了（10086个开心）。</p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">接着深入剖析了Spark RPC模块内的类组织关系，使用UML类图和时序图帮助读者更好的理解一些核心的概念，包括RpcEnv，RpcEndpoint，RpcEndpointRef等，以及I/O的设计模式，包括I/O多路复用，Reactor和Actor mailbox等，这里还是重点提下Spark RPC的设计哲学，利用netty强大的Socket I/O能力，构建一个异步的通信框架。最后，从TCP层的segment二进制角度分析了wire protocol。</p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;"><br></p><p style="margin-bottom:.72em;color:rgb(26,26,26);font-family:'-apple-system', BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Microsoft YaHei', 'Source Han Sans SC', 'Noto Sans CJK SC', 'WenQuanYi Micro Hei', sans-serif;white-space:pre-wrap;">原文地址：https://zhuanlan.zhihu.com/p/28893155</p><br>            </div>
                </div>