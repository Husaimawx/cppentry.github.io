---
layout:     post
title:      0083.使用Scala和Java实战Spark Streaming开发第二讲Spark Streaming
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<div>import org.apache.spark.SparkConf;</div>
<div>import org.apache.spark.api.java.function.FlatMapFunction;</div>
<div>import org.apache.spark.api.java.function.Function2;</div>
<div>import org.apache.spark.api.java.function.PairFunction;</div>
<div>import org.apache.spark.streaming.Durations;</div>
<div>import org.apache.spark.streaming.api.java.JavaDStream;</div>
<div>import org.apache.spark.streaming.api.java.JavaPairDStream;</div>
<div>import org.apache.spark.streaming.api.java.JavaReceiverInputDStream;</div>
<div>import org.apache.spark.streaming.api.java.JavaStreamingContext;</div>
<div>import scala.Tuple2;</div>
<div>import scala.collection.parallel.ParIterableLike;</div>
<div><br></div>
<div>import java.util.Arrays;</div>
<div><br></div>
<div>/**</div>
<div> * Created by root on 16-4-19.</div>
<div> */</div>
<div>public class WordCountOnline {</div>
<div>    public static void main(String[] args){</div>
<div>        /**第一步创建SparkConf</div>
<div>         * 1.至少有两个线程，一个线程用于接收数据，一个线程用于处理数据</div>
<div>         * 否则内存和磁盘都会无法承受</div>
<div>         * 2.对于集群而言每个Executor,肯定不只有一个线程，对于处理Spark Streaming</div>
<div>         * 的应用程序而言，一般分配几个Core比较合适，5个左右的Core比较合适</div>
<div>         */</div>
<div>        SparkConf conf = new SparkConf().setMaster("local").setAppName("WordCountOnline");</div>
<div>        JavaStreamingContext jsc = new JavaStreamingContext(conf, Durations.seconds(5));</div>
<div>        /**</div>
<div>         * 第三步创建Spark Streaming输入来源， input Stream</div>
<div>         * 1.数据输入来源可以是：File,HDFS,Flume,Kafka,Socket等</div>
<div>         * 2.该端口服务首先必须存在，不断产生数据</div>
<div>         * 3.在生产环境中首先要判断是否有数据，如果没有数据，就不进行提交Job</div>
<div>         */</div>
<div>//        JavaReceiverInputDStream lines = jsc.socketTextStream("local", 9999);</div>
<div>        JavaDStream lines = jsc.textFileStream("/tmp/spark/");</div>
<div>        /**</div>
<div>         * 接下来就像基于RDD一样进行处理，基于DStream进行处理，DStream是RDD产生的模板或者说类，</div>
<div>         * 在Spark Streaming发生计算前，其实际是把每个DStream翻译成RDD的操作</div>
<div>         */</div>
<div>        JavaDStream words = lines.flatMap(new FlatMapFunction&lt;String, String&gt;() {</div>
<div>            @Override</div>
<div>            public Iterable call(String line) throws Exception {</div>
<div>                return Arrays.asList(line.split(" "));</div>
<div>            }</div>
<div>        });</div>
<div><br></div>
<div>        JavaPairDStream&lt;String,Integer&gt; pairs = words.mapToPair(new PairFunction&lt;String, String, Integer&gt;() {</div>
<div>            @Override</div>
<div>            public Tuple2 call(String word) throws Exception {</div>
<div>                return new Tuple2&lt;String, Integer&gt;(word, 1);</div>
<div>            }</div>
<div>        });</div>
<div><br></div>
<div>        JavaPairDStream&lt;String,Integer&gt; wordCounts = pairs.reduceByKey(new Function2&lt;Integer, Integer, Integer&gt;() {</div>
<div>            @Override</div>
<div>            public Integer call(Integer integer, Integer integer2) throws Exception {</div>
<div>                return integer + integer2;</div>
<div>            }</div>
<div>        });</div>
<div>        wordCounts.print();</div>
<div>        jsc.start();</div>
<div>        jsc.awaitTermination();</div>
<div><br></div>
<div>    }</div>
<div>}</div>
<div><br></div>
<div><br></div>
<div><br></div>
<div>1.启动服务</div>
<div>2.进入目录：/tmp/spark/</div>
<div>3.创建文件：echo "A B B C" &gt;&gt; test1.txt</div>
<div>4.出现结果</div>
<div>-------------------------------------------</div>
<div>Time: 1461059835000 ms</div>
<div>-------------------------------------------</div>
<div>(B,2)</div>
<div>(A,1)</div>
<div>(C,1)</div>
            </div>
                </div>