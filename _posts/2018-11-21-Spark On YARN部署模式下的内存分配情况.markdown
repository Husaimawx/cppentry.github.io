---
layout:     post
title:      Spark On YARN部署模式下的内存分配情况
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/u011192458/article/details/76573676				</div>
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
本文主要了解Spark On YARN部署模式下的内存分配情况，因为没有深入研究Spark的源代码，所以只能根据日志去看相关的源代码，从而了解“为什么会这样，为什么会那样”。</p>
<h1 id="section" style="font-size:24px;font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-weight:500;line-height:1.1;color:rgb(51,51,51);">
说明</h1>
<p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
按照Spark应用程序中的driver分布方式不同，Spark on YARN有两种模式： <code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(254,251,243);">yarn-client</code>模式、<code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(254,251,243);">yarn-cluster</code>模式。</p>
<p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
当在YARN上运行Spark作业，每个Spark executor作为一个YARN容器运行。Spark可以使得多个Tasks在同一个容器里面运行。</p>
<p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
<span style="line-height:26.1px;">关于Spark On YARN相关的配置参数，请参考</span><a href="http://blog.javachen.com/2015/06/07/spark-configuration.html" rel="nofollow" style="line-height:26.1px;color:rgb(37,97,194);text-decoration:none;background-color:transparent;">Spark配置参数</a><span style="line-height:26.1px;">。本文主要讨论内存分配情况，所以只需要关注以下几个内心相关的参数：</span></p>
<ul style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;"><li><code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(249,242,244);">spark.driver.memory</code>：默认值512m</li><li><code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(249,242,244);">spark.executor.memory</code>：默认值512m</li><li><code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(249,242,244);">spark.yarn.am.memory</code>：默认值512m</li><li><code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(249,242,244);">spark.yarn.executor.memoryOverhead</code>：值为<code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(249,242,244);">executorMemory
 * 0.07, with minimum of 384</code></li><li><code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(249,242,244);">spark.yarn.driver.memoryOverhead</code>：值为<code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(249,242,244);">driverMemory
 * 0.07, with minimum of 384</code></li><li><code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(249,242,244);">spark.yarn.am.memoryOverhead</code>：值为<code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(249,242,244);">AM
 memory * 0.07, with minimum of 384</code></li></ul><p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
注意：</p>
<ul style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;"><li><code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(249,242,244);">--executor-memory/spark.executor.memory</code> 控制 executor
 的堆的大小，但是 JVM 本身也会占用一定的堆空间，比如内部的 String 或者直接 byte buffer，<code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(249,242,244);">spark.yarn.XXX.memoryOverhead</code>属性决定向
 YARN 请求的每个 executor 或dirver或am 的额外堆内存大小，默认值为 <code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(249,242,244);">max(384, 0.07 * spark.executor.memory</code>)</li><li>在 executor 执行的时候配置过大的 memory 经常会导致过长的GC延时，64G是推荐的一个 executor 内存大小的上限。</li><li>HDFS client 在大量并发线程时存在性能问题。大概的估计是每个 executor 中最多5个并行的 task 就可以占满写入带宽。</li></ul><p style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;">
另外，因为任务是提交到YARN上运行的，所以YARN中有几个关键参数，参考<a href="http://blog.javachen.com/2015/06/05/yarn-memory-and-cpu-configuration.html" rel="nofollow" style="color:rgb(37,97,194);text-decoration:none;background-color:transparent;">YARN的内存和CPU配置</a>：</p>
<ul style="color:rgb(51,51,51);font-family:Consolas, monaco, 'Helvetica Neue', Helvetica, Arial, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', STHeiti, 'WenQuanYi Micro Hei', sans-serif;font-size:14.5px;line-height:26.1px;"><li><code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(249,242,244);">yarn.app.mapreduce.am.resource.mb</code>：AM能够申请的最大内存，默认值为1536MB</li><li><code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(249,242,244);">yarn.nodemanager.resource.memory-mb</code>：nodemanager能够申请的最大内存，默认值为8192MB</li><li><code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(249,242,244);">yarn.scheduler.minimum-allocation-mb</code>：调度时一个container能够申请的最小资源，默认值为1024MB</li><li><code class="highlighter-rouge" style="font-family:Menlo, Monaco, Consolas, 'Courier New', monospace;font-size:13.05px;color:rgb(199,37,78);background-color:rgb(249,242,244);">yarn.scheduler.maximum-allocation-mb</code>：调度时一个container能够申请的最大资源，默认值为8192MB</li></ul>            </div>
                </div>