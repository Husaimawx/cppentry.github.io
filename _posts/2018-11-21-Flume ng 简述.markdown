---
layout:     post
title:      Flume ng 简述
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/wk022/article/details/52154082				</div>
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<p><span style="line-height:24px;text-align:justify;"><span style="font-family:'Microsoft YaHei';color:#ff0000;">简介</span></span></p>
<p><span style="line-height:24px;text-align:justify;"><span style="font-family:'Microsoft YaHei';">Apache flume是一个日志收集系统</span></span></p>
<p></p>
<ul><li><span style="line-height:24px;text-align:justify;"><span style="font-family:'Microsoft YaHei';">可以部署到一台机子上，也可以部署到多台机子上</span></span></li><li><span style="line-height:24px;"><span style="font-family:'Microsoft YaHei';">可以从多个来源获取数据，也可以将数据发往多个地方</span></span></li></ul><span style="line-height:24px;"><span style="font-family:'Microsoft YaHei';">我们这里主要讲一下flume ng，是flume og的下一个版本，更灵活，更稳定</span></span>
<p></p>
<p><span style="line-height:24px;"><span style="font-family:'Microsoft YaHei';color:#ff6666;">架构</span></span></p>
<p><span style="line-height:24px;"><span style="font-family:'Microsoft YaHei';">flume ng架构图如下</span></span></p>
<p><span style="line-height:24px;"><span style="font-family:'Microsoft YaHei';"><img src="http://flume.apache.org/_images/UserGuide_image00.png" alt="Agent component diagram"><br></span><br></span></p>
<p>每个flume实例称为agent，是一个java进程</p>
<p>agent中包含Source，channel，Sink</p>
<p></p>
<ul><li>source用来从数据源获取数据，并保存到channel中</li><li>channel用于缓存数据，协调source与sink的不同处理速率</li><li>sink从channel中取出数据，将数据发往目标位置，如：HDFS</li></ul><p></p>
<p><span style="color:#ff0000;">应用场景</span></p>
通过source，channel，sink的不同组合，可以满足各种各样的应用场景
<p>1，一个数据源对应一个目标源</p>
<p><span></span>一个或多个source<span style="color:#ff6666;background-color:rgb(255,255,255);">----&gt;</span>一个channel<span style="color:#ff6666;">----&gt;</span>一个或一组sink（不论是一个或多个，同一时间只用一个sink在起作用，每组sink只能写入一个目标源）</p>
<p>2，一个数据源对应多个目标源</p>
<p><span></span>一个source<span style="color:#ff6666;">-----&gt;</span>多个channel<span style="color:#ff6666;">-------&gt;</span>多组sink（每组sink对应一个channel，且每组sink只能写入一个目标源），数据是在source到channel的过程中复制成多份的</p>
<p>3，多个数据源对应一个目标源</p>
<p>      多个source<span style="color:#ff6666;">----&gt;</span>一个或多个channel<span style="color:#ff6666;">----&gt;</span>一组或多组sink（所有sink都指向同一个目标源）</p>
<p>4，多个数据源对应多个目标源</p>
<p>      以上3种情况混合使用</p>
<p><span style="color:#ff0000;">其它</span></p>
<p></p>
<ul><li>系统已经提供了多种source，channel，sink的实现</li><li>channel是事务性的</li><li>拦截器位于source和channel之间，用于过滤数据，可以配置多个，系统提供多个默认实现</li><li>channel选择器包括复制channel选择器和多路复用channel选择器，在source和channel之间使用，是<span style="color:#ff0000;">应用场景2的关键技术</span></li><li>sink组和sink处理器是用来保证系统负载均衡和故障转移的，并不能提高输出效率</li><li>sink处理器包括3种：默认处理器，负载均衡处理器，故障转移处理器</li><li>如果没有配置sink处理器，采用默认处理器，默认处理器会<span style="color:#ff0000;">使用sink列表中的第一个，列表中的其他sink都无效</span></li></ul><p></p>
            </div>
                </div>