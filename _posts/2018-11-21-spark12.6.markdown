---
layout:     post
title:      spark12.6
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<p><strong><span style="font-family:'宋体';">什么是</span>spark</strong></p>
<p>spark<span style="font-family:'宋体';">是一种通用的大数据计算框架</span></p>
<p><strong>spark<span style="font-family:'宋体';">包含了</span></strong></p>
<p>spark core<span style="font-family:'宋体';">用于离线计算</span></p>
<p>spark sql<span style="font-family:'宋体';">用于交互式查询</span></p>
<p>spark streaming<span style="font-family:'宋体';">用于实时流式计算</span></p>
<p>spark mllib<span style="font-family:'宋体';">机器学习</span></p>
<p>spark graphx<span style="font-family:'宋体';">用于图计算</span></p>
<p><strong>Spark<span style="font-family:'宋体';">基本工作原理</span></strong></p>
<p>1<span style="font-family:'宋体';">分布式 </span><span style="font-family:Calibri;">2 </span>
<span style="font-family:'宋体';">主要基于内存</span><span style="font-family:Calibri;">(</span><span style="font-family:'宋体';">少数情况基于磁盘</span><span style="font-family:Calibri;">)3</span><span style="font-family:'宋体';">迭代时计算</span></p>
<p><strong><span style="font-family:'宋体';">说明：</span>spark on yarn <span style="font-family:'宋体';">
这种模式需要注意点：</span></strong></p>
<p>1<span style="font-family:'宋体';">，</span><span style="font-family:Calibri;">spark</span><span style="font-family:'宋体';">任务运行在</span><span style="font-family:Calibri;">yarn</span><span style="font-family:'宋体';">之上，有</span><span style="font-family:Calibri;">yarn</span><span style="font-family:'宋体';">进行资源管理和调度，</span><span style="font-family:Calibri;">spark</span><span style="font-family:'宋体';">只负责任务调度和计算</span></p>
<p>2<span style="font-family:'宋体';">，不需要配置和启动</span><span style="font-family:Calibri;">spark</span><span style="font-family:'宋体';">集群</span></p>
<p>3<span style="font-family:'宋体';">，只需要在提交任务的节点上安装并配置</span><span style="font-family:Calibri;">spark on yarn
</span><span style="font-family:'宋体';">模式。</span></p>
<p><strong><span style="font-family:'宋体';">说明：</span>standalone <span style="font-family:'宋体';">
这种模式需要注意点：</span></strong></p>
<p>1<span style="font-family:'宋体';">，</span><span style="font-family:Calibri;">spark</span><span style="font-family:'宋体';">任务运行在</span><span style="font-family:Calibri;">spark</span><span style="font-family:'宋体';">集群之上，由</span><span style="font-family:Calibri;">spark</span><span style="font-family:'宋体';">来进行资源调度管理，同时还负责任务的计算和调度</span></p>
<p>2<span style="font-family:'宋体';">，需要配置和启动</span><span style="font-family:Calibri;">spark</span><span style="font-family:'宋体';">集群</span></p>
<p><strong>spark<span style="font-family:'宋体';">特点</span></strong></p>
<p>快 易用 通用 兼容性</p>
<p><strong>Spark<span style="font-family:'宋体';">计算模型</span><span style="font-family:Calibri;">VS MapReduce</span><span style="font-family:'宋体';">计算模式对比</span><span style="font-family:Calibri;">:</span></strong></p>
<p>Mr<span style="font-family:'宋体';">这种计算模型比较固定</span><span style="font-family:Calibri;">,</span><span style="font-family:'宋体';">只有两个阶段</span><span style="font-family:Calibri;">,map</span><span style="font-family:'宋体';">阶段和</span><span style="font-family:Calibri;">reduce</span><span style="font-family:'宋体';">阶段</span><span style="font-family:Calibri;">,</span><span style="font-family:'宋体';">这两个阶段结束后</span><span style="font-family:Calibri;">,</span><span style="font-family:'宋体';">任务就结束了</span><span style="font-family:Calibri;">.</span><span style="font-family:'宋体';">意味着我们的操作有限</span><span style="font-family:Calibri;">,</span><span style="font-family:'宋体';">只有</span><span style="font-family:Calibri;">map</span><span style="font-family:'宋体';">阶段和</span><span style="font-family:Calibri;">reduce</span><span style="font-family:'宋体';">阶段</span><span style="font-family:Calibri;">,</span><span style="font-family:'宋体';">也同时意味着可能需要多个</span><span style="font-family:Calibri;">mr</span><span style="font-family:'宋体';">任务才能处理完</span><span style="font-family:Calibri;">job
</span></p>
<p>Spark<span style="font-family:'宋体';">他是迭代式计算</span><span style="font-family:Calibri;">,</span><span style="font-family:'宋体';">一个阶段结束后</span><span style="font-family:Calibri;">,</span><span style="font-family:'宋体';">后面可以有</span><span style="font-family:Calibri;">N</span><span style="font-family:'宋体';">个阶段</span><span style="font-family:Calibri;">,</span><span style="font-family:'宋体';">直到计算任务完成</span><span style="font-family:Calibri;">,</span><span style="font-family:'宋体';">也就意味着我们可以做更多的操作</span><span style="font-family:Calibri;">,</span><span style="font-family:'宋体';">这就是</span><span style="font-family:Calibri;">spark</span><span style="font-family:'宋体';">比计算模式比</span><span style="font-family:Calibri;">Mr</span><span style="font-family:'宋体';">强大的地方
</span><strong></strong></p>
<p><strong>RDD:<span style="font-family:'宋体';">弹性的</span><span style="font-family:Calibri;">,</span><span style="font-family:'宋体';">分布式的</span><span style="font-family:Calibri;">,</span><span style="font-family:'宋体';">数据集
</span></strong></p>
<p><strong>Rdd<span style="font-family:'宋体';">在逻辑上可以看出是代表一个</span><span style="font-family:Calibri;">HDFS</span><span style="font-family:'宋体';">上的文件</span><span style="font-family:Calibri;">,</span><span style="font-family:'宋体';">它分为多个分区</span><span style="font-family:Calibri;">,</span><span style="font-family:'宋体';">散落在</span><span style="font-family:Calibri;">spark</span><span style="font-family:'宋体';">的多个节点上</span></strong></p>
<p>Spark<span style="font-family:'宋体';">有选择性的在内存和硬盘之间的这种权衡机制就是</span><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">的弹性特点所在</span></p>
<p><strong> </strong></p>
<p><strong>Spark<span style="font-family:'宋体';">的</span><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">以及其特点</span></strong></p>
<p>1<span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">是</span><span style="font-family:Calibri;">Spark</span><span style="font-family:'宋体';">提供的核心抽象，即弹性分布式数据集。</span></p>
<p>2<span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">在抽象上来说是一种元素集合，包含了数据。它是被分区的，分为多个分区，每个分区分布在集群中的不同节点上，从而让</span><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">中的数据可以被并行操作。（分布式数据集）</span></p>
<p>3<span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">通常通过</span><span style="font-family:Calibri;">Hadoop</span><span style="font-family:'宋体';">上的文件，即</span><span style="font-family:Calibri;">HDFS</span><span style="font-family:'宋体';">文件或者</span><span style="font-family:Calibri;">Hive</span><span style="font-family:'宋体';">表，来进行创建；有时也可以通过应用程序中的集合来创建。</span></p>
<p>4<span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">最重要的特性就是，提供了容错性，可以自动从节点失败中恢复过来。即如果某个节点上的</span><span style="font-family:Calibri;">RDD partition</span><span style="font-family:'宋体';">，因为节点故障，导致数据丢了，那么</span><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">会自动通过自己的数据来源重新计算该</span><span style="font-family:Calibri;">partition</span><span style="font-family:'宋体';">。这一切对使用者是透明的。</span></p>
<p>5<span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">的数据默认情况下存放在内存中的，但是在内存资源不足时，</span><span style="font-family:Calibri;">Spark</span><span style="font-family:'宋体';">会自动将</span><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">数据写入磁盘。（弹性）</span></p>
<p><strong><span style="font-family:'宋体';">什么是</span>Spark<span style="font-family:'宋体';">开发</span></strong></p>
<p>1<span style="font-family:'宋体';">、核心开发：离线批处理 </span><span style="font-family:Calibri;">/
</span><span style="font-family:'宋体';">延迟性的交互式数据处理</span></p>
<p>2<span style="font-family:'宋体';">、</span><span style="font-family:Calibri;">SQL</span><span style="font-family:'宋体';">查询：底层都是</span><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">和计算操作</span></p>
<p>3<span style="font-family:'宋体';">、实时计算：底层都是</span><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">和计算操作</span></p>
<p>4 <span style="font-family:'宋体';">机器学习 </span><span style="font-family:Calibri;">5</span><span style="font-family:'宋体';">图计算</span></p>
<p><strong>（核心编程原理）</strong></p>
<p>1<span style="font-family:'宋体';">创建初始化</span><span style="font-family:Calibri;">RDD,
</span></p>
<p>2,<span style="font-family:'宋体';">对初始的</span><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">进行转换操作形成新的</span><span style="font-family:Calibri;">RDD,</span><span style="font-family:'宋体';">然后在对新的</span><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">再次进行操作</span><span style="font-family:Calibri;">,</span><span style="font-family:'宋体';">直至操作计算完成
</span></p>
<p>3 <span style="font-family:'宋体';">将最后的</span><span style="font-family:Calibri;">RDD</span><span style="font-family:'宋体';">的数据保存到某种介质中</span><span style="font-family:Calibri;">(hdfs,hive,mysql)</span></p>
            </div>
                </div>