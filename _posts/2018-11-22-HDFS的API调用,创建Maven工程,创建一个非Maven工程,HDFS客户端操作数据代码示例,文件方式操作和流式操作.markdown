---
layout:     post
title:      HDFS的API调用,创建Maven工程,创建一个非Maven工程,HDFS客户端操作数据代码示例,文件方式操作和流式操作
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/toto1297488504/article/details/72810539				</div>
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                <h1>１. HDFS的java操作</h1><p>hdfs在生产应用中主要是客户端的开发，其核心步骤是从hdfs提供的api中构造一个HDFS的访问客户端对象，然后通过该客户端对象操作（增删改查）HDFS上的文件</p><h2><a name="_Toc439077234">１.1 </a>搭建开发环境                   </h2><h3>１.1.1创建Maven工程</h3><p>快速创建一个Maven工程和目录结构的方式是执行下面的命令：</p><table border="1" cellspacing="0" cellpadding="0"><tbody><tr><td valign="top"><p align="left">mvn archetype:generate -DgroupId=com.toto.hadoop  -DartifactId=hadoop -DarchetypeArtifactId=maven-archetype-quickstart  -DinteractiveMode=false</p></td> </tr><tr><td valign="top"><p align="left">接着执行下面的命令：</p>  <p align="left"><u>mvn</u> -Pall eclipse:eclipse</p>  <p align="left"><u>mvn</u> clean</p>  <p align="left"><u>mvn</u> compile -Dmaven.test.skip=true</p>  <p align="left"><u>mvn</u> install -Dmaven.test.skip=true</p>  <p align="left"><u>mvn</u> package  -Dmaven.test.skip=true</p></td> </tr><tr><td valign="top"><p align="left">最后将工程导入到Eclipse中：</p></td> </tr></tbody></table><p> </p><p>1、配置pom文件，引入下面的jar之后，其它相关的maven依赖的jar包，它会自动引入：</p><table border="1" cellspacing="0" cellpadding="0"><tbody><tr><td valign="top"><p align="left"><span style="color:#008080;">&lt;</span><span style="color:#3F7F7F;">project</span> <span style="color:#7F007F;">xmlns</span>=<em><span style="color:#2A00FF;">"http://maven.apache.org/POM/4.0.0"</span></em>  <span style="color:#7F007F;">xmlns:xsi</span>=<em><span style="color:#2A00FF;">"http://www.w3.org/2001/XMLSchema-instance"</span></em></p>  <p align="left">  <span style="color:#7F007F;">xsi:schemaLocation</span>=<em><span style="color:#2A00FF;">"http://maven.apache.org/POM/4.0.0  http://maven.apache.org/maven-v4_0_0.xsd"</span></em><span style="color:#008080;">&gt;</span></p>  <p align="left">  <span style="color:#008080;">&lt;</span><span style="color:#3F7F7F;">modelVersion</span><span style="color:#008080;">&gt;</span>4.0.0<span style="color:#008080;">&lt;/</span><span style="color:#3F7F7F;">modelVersion</span><span style="color:#008080;">&gt;</span></p>  <p align="left">  <span style="color:#008080;">&lt;</span><span style="color:#3F7F7F;">groupId</span><span style="color:#008080;">&gt;</span>com.toto.hadoop<span style="color:#008080;">&lt;/</span><span style="color:#3F7F7F;">groupId</span><span style="color:#008080;">&gt;</span></p>  <p align="left">  <span style="color:#008080;">&lt;</span><span style="color:#3F7F7F;">artifactId</span><span style="color:#008080;">&gt;</span><u>hadoop</u><span style="color:#008080;">&lt;/</span><span style="color:#3F7F7F;">artifactId</span><span style="color:#008080;">&gt;</span></p>  <p align="left">  <span style="color:#008080;">&lt;</span><span style="color:#3F7F7F;">packaging</span><span style="color:#008080;">&gt;</span>jar<span style="color:#008080;">&lt;/</span><span style="color:#3F7F7F;">packaging</span><span style="color:#008080;">&gt;</span></p>  <p align="left">  <span style="color:#008080;">&lt;</span><span style="color:#3F7F7F;">version</span><span style="color:#008080;">&gt;</span>1.0-SNAPSHOT<span style="color:#008080;">&lt;/</span><span style="color:#3F7F7F;">version</span><span style="color:#008080;">&gt;</span></p>  <p align="left">  <span style="color:#008080;">&lt;</span><span style="color:#3F7F7F;">name</span><span style="color:#008080;">&gt;</span><u>hadoop</u><span style="color:#008080;">&lt;/</span><span style="color:#3F7F7F;">name</span><span style="color:#008080;">&gt;</span></p>  <p align="left">  <span style="color:#008080;">&lt;</span><span style="color:#3F7F7F;">url</span><span style="color:#008080;">&gt;</span>http://maven.apache.org<span style="color:#008080;">&lt;/</span><span style="color:#3F7F7F;">url</span><span style="color:#008080;">&gt;</span></p>  <p align="left">  <span style="color:#008080;">&lt;</span><span style="color:#3F7F7F;">dependencies</span><span style="color:#008080;">&gt;</span></p>  <p align="left">        <span style="color:#FF0000;">&lt;dependency&gt;   </span></p>  <p align="left"><span style="color:#FF0000;">             &lt;groupId&gt;org.apache.hadoop&lt;/groupId&gt;  </span></p>  <p align="left"><span style="color:#FF0000;">            &lt;artifactId&gt;<u>hadoop</u>-common&lt;/artifactId&gt;  </span></p>  <p align="left"><span style="color:#FF0000;">             &lt;version&gt;2.5.1&lt;/version&gt;   </span></p>  <p align="left"><span style="color:#FF0000;">        &lt;/dependency&gt;  </span></p>  <p align="left"><span style="color:#FF0000;">        &lt;dependency&gt;  </span></p>  <p align="left"><span style="color:#FF0000;">             &lt;groupId&gt;org.apache.hadoop&lt;/groupId&gt;  </span></p>  <p align="left"><span style="color:#FF0000;">            &lt;artifactId&gt;<u>hadoop</u>-<u>hdfs</u>&lt;/artifactId&gt;  </span></p>  <p align="left"><span style="color:#FF0000;">             &lt;version&gt;2.5.1&lt;/version&gt;   </span></p>  <p align="left"><span style="color:#FF0000;">        &lt;/dependency&gt;  </span></p>  <p align="left"><span style="color:#FF0000;">        &lt;dependency&gt;  </span></p>  <p align="left"><span style="color:#FF0000;">             &lt;groupId&gt;org.apache.hadoop&lt;/groupId&gt;  </span></p>  <p align="left"><span style="color:#FF0000;">            &lt;artifactId&gt;<u>hadoop</u>-client&lt;/artifactId&gt;  </span></p>  <p align="left"><span style="color:#FF0000;">             &lt;version&gt;2.5.1&lt;/version&gt;   </span></p>  <p align="left"><span style="color:#FF0000;">        &lt;/dependency&gt;</span></p>  <p align="left"><span style="color:#FF0000;">        </span></p>  <p align="left"><span style="color:#FF0000;">        &lt;dependency&gt;</span></p>  <p align="left"><span style="color:#FF0000;">            &lt;groupId&gt;<u>junit</u>&lt;/groupId&gt;</span></p>  <p align="left"><span style="color:#FF0000;">            &lt;artifactId&gt;<u>junit</u>&lt;/artifactId&gt;</span></p>  <p align="left"><span style="color:#FF0000;">            &lt;version&gt;4.12&lt;/version&gt;</span></p>  <p align="left"><span style="color:#FF0000;">            &lt;scope&gt;test&lt;/scope&gt;</span></p>  <p align="left"><span style="color:#FF0000;">       &lt;/dependency&gt;</span></p>  <p align="left">  <span style="color:#008080;">&lt;/</span><span style="color:#3F7F7F;">dependencies</span><span style="color:#008080;">&gt;</span></p>  <p><span style="color:#008080;">&lt;/</span><span style="color:#3F7F7F;">project</span><span style="color:#008080;">&gt;</span></p></td> </tr></tbody></table><p> </p><h3>１.1.2创建一个非Maven工程</h3><p>注：如需手动引入jar包，hdfs的jar包----hadoop的安装目录的share下，他们分别是：</p><table border="1" cellspacing="0" cellpadding="0"><tbody><tr><td valign="top"><p>hadoop-2.8.0\share\hadoop\common\hadoop-common-2.8.0.jar</p>  <p>hadoop-2.8.0\share\hadoop\common\lib</p>  <p>hadoop-2.8.0\share\hadoop\hdfs\hadoop-hdfs-2.8.0.jar</p>  <p>hadoop-2.8.0\share\hadoop\hdfs\lib</p></td> </tr></tbody></table><p>如果是创建非Maven工程，步骤如下：</p><p>第一步：创建一个User Library</p><p><img src="https://img-blog.csdn.net/20170530165049158?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdG90b3R1enVvcXVhbg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p><p>第二步：添加library</p><p><img src="https://img-blog.csdn.net/20170530165108005?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdG90b3R1enVvcXVhbg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br></p><p>第三步：添加common中的所有的jar</p><p><img src="https://img-blog.csdn.net/20170530165150849?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdG90b3R1enVvcXVhbg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br></p><p>第四步：添加hadoop-hdfs-2.8.0.jar</p><p><img src="https://img-blog.csdn.net/20170530165215146?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdG90b3R1enVvcXVhbg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br></p><p>第五步：添加hdfs依赖的jar</p><p><img src="https://img-blog.csdn.net/20170530165236130?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdG90b3R1enVvcXVhbg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br></p><p>最后到工程里面查看引包情况</p><p><img src="https://img-blog.csdn.net/20170530165256834?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdG90b3R1enVvcXVhbg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br></p><p>接着上面的配置，可以进行hdfs客户端调用的代码的编写了。</p><p> </p><p>2、window下开发的说明</p><p>建议在linux下进行hadoop应用的开发，不会存在兼容性问题。如在window上做客户端应用开发，需要设置以下环境：</p><p>A、用老师给的windows平台下编译的hadoop安装包解压一份到windows的任意一个目录下</p><p>B、在window系统中配置<a name="OLE_LINK2"></a><a name="OLE_LINK1">HADOOP_HOME</a>指向你解压的安装包目录</p><p><img src="https://img-blog.csdn.net/20170530165329881?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdG90b3R1enVvcXVhbg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p><p>C、在windows系统的path变量中加入HADOOP_HOME的bin目录</p><p><br></p><h2><a name="_Toc439077235">１.2 </a>获取api中的客户端对象</h2><p>在java中操作hdfs，首先要获得一个客户端实例</p><table border="1" cellspacing="0" cellpadding="0"><tbody><tr><td valign="top"><p>Configuration conf = new Configuration()</p>  <p>FileSystem fs = FileSystem.get(conf)</p></td> </tr></tbody></table><p> </p><p>而我们的操作目标是HDFS，所以获取到的fs对象应该是DistributedFileSystem的实例；</p><p>get方法是从何处判断具体实例化那种客户端类呢？</p><p><strong>——从conf中的一个参数 fs.defaultFS的配置值判断；</strong></p><p> </p><p>如果我们的代码中没有指定fs.defaultFS，并且工程classpath下也没有给定相应的配置，conf中的默认值就来自于hadoop的jar包中的core-default.xml，默认值为： file:///，则获取的将不是一个DistributedFileSystem的实例，而是一个本地文件系统的客户端对象</p><p> </p><h2><a name="_Toc439077236">１.3 DistributedFileSystem</a>实例对象所具备的方法</h2><p><img src="https://img-blog.csdn.net/20170530165523053?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdG90b3R1enVvcXVhbg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p><h2><a name="_Toc439077237">１.4 HDFS</a>客户端操作数据代码示例：</h2><h3><a name="_Toc439077238">１.4.1 </a>文件的增删改查</h3><table border="1" cellspacing="0" cellpadding="0"><tbody><tr><td valign="top"><p align="left"><strong><span style="color:#7F0055;">package</span></strong>  com.toto.hadooptest;</p>  <p align="left"> </p>  <p align="left"><strong><span style="color:#7F0055;">import</span></strong>  java.net.URI;</p>  <p align="left"> </p>  <p align="left"><strong><span style="color:#7F0055;">import</span></strong>  org.apache.hadoop.conf.Configuration;</p>  <p align="left"><strong><span style="color:#7F0055;">import</span></strong>  org.apache.hadoop.fs.BlockLocation;</p>  <p align="left"><strong><span style="color:#7F0055;">import</span></strong>  org.apache.hadoop.fs.FileStatus;</p>  <p align="left"><strong><span style="color:#7F0055;">import</span></strong>  org.apache.hadoop.fs.FileSystem;</p>  <p align="left"><strong><span style="color:#7F0055;">import</span></strong>  org.apache.hadoop.fs.LocatedFileStatus;</p>  <p align="left"><strong><span style="color:#7F0055;">import</span></strong>  org.apache.hadoop.fs.Path;</p>  <p align="left"><strong><span style="color:#7F0055;">import</span></strong> org.apache.hadoop.fs.RemoteIterator;</p>  <p align="left"><strong><span style="color:#7F0055;">import</span></strong>  org.junit.Before;</p>  <p align="left"><strong><span style="color:#7F0055;">import</span></strong>  org.junit.Test;</p>  <p align="left"> </p>  <p align="left"><strong><span style="color:#7F0055;">public</span> <span style="color:#7F0055;">class</span></strong>  HdfsClient {</p>  <p align="left"> </p>  <p align="left">    FileSystem <span style="color:#0000C0;">fs</span> = <strong><span style="color:#7F0055;">null</span></strong>;</p>  <p align="left">    </p>  <p align="left">    <span style="color:#646464;">@Before</span></p>  <p align="left">    <strong><span style="color:#7F0055;">public</span> <span style="color:#7F0055;">void</span></strong> init() <strong><span style="color:#7F0055;">throws</span></strong> Exception  {</p>  <p align="left">        <span style="color:#3F7F5F;">// </span><span style="color:#3F7F5F;">构造一个配置参数对象，设置一个参数：我们要访问的</span><u><span style="color:#3F7F5F;">hdfs</span></u><span style="color:#3F7F5F;">的</span><span style="color:#3F7F5F;">URI</span></p>  <p align="left">        <span style="color:#3F7F5F;">// </span><span style="color:#3F7F5F;">从而</span><span style="color:#3F7F5F;">FileSystem.get()</span><span style="color:#3F7F5F;">方法就知道应该是去构造一个访问</span><u><span style="color:#3F7F5F;">hdfs</span></u><span style="color:#3F7F5F;">文件系统的客户端，以及</span><u><span style="color:#3F7F5F;">hdfs</span></u><span style="color:#3F7F5F;">的访问地址</span></p>  <p align="left">        <span style="color:#3F7F5F;">// new  Configuration();</span><span style="color:#3F7F5F;">的时候，它就会去加载</span><span style="color:#3F7F5F;">jar</span><span style="color:#3F7F5F;">包中的</span><u><span style="color:#3F7F5F;">hdfs</span></u><span style="color:#3F7F5F;">-default.xml</span></p>  <p align="left">        <span style="color:#3F7F5F;">// </span><span style="color:#3F7F5F;">然后再加载</span><u><span style="color:#3F7F5F;">classpath</span></u><span style="color:#3F7F5F;">下的</span><u><span style="color:#3F7F5F;">hdfs</span></u><span style="color:#3F7F5F;">-site.xml</span></p>  <p align="left">        Configuration  <span style="color:#6A3E3E;">conf</span> = <strong><span style="color:#7F0055;">new</span></strong>  Configuration();</p>  <p align="left">        <span style="color:#6A3E3E;">conf</span>.set(<span style="color:#2A00FF;">"df.defaultFS"</span>, <span style="color:#2A00FF;">"hdfs://hadoop:9000"</span>);</p>  <p align="left">        <span style="color:#3F5FBF;">/**</span></p>  <p align="left"><span style="color:#3F5FBF;">         * </span><span style="color:#3F5FBF;">参数优先级：</span><span style="color:#3F5FBF;">1</span><span style="color:#3F5FBF;">、客户端代码中设置的值</span><span style="color:#3F5FBF;"> 2</span><span style="color:#3F5FBF;">、</span><u><span style="color:#3F5FBF;">classpath</span></u><span style="color:#3F5FBF;">下的用户自定义配置文件</span><span style="color:#3F5FBF;"> 3</span><span style="color:#3F5FBF;">、然后是服务器的默认配置</span></p>  <p align="left"><span style="color:#3F5FBF;">         */</span></p>  <p align="left">        <span style="color:#6A3E3E;">conf</span>.set(<span style="color:#2A00FF;">"dfs.replication"</span>, <span style="color:#2A00FF;">"3"</span>);</p>  <p align="left">        </p>  <p align="left">        <span style="color:#3F7F5F;">// </span><span style="color:#3F7F5F;">获取一个</span><u><span style="color:#3F7F5F;">hdfs</span></u><span style="color:#3F7F5F;">的访问客户端，根据参数，这个实例应该是</span><span style="color:#3F7F5F;">DistributedFileSystem</span><span style="color:#3F7F5F;">的实例</span></p>  <p align="left">        <span style="color:#3F7F5F;">// <u>fs</u>  = FileSystem.get(<u>conf</u>);</span></p>  <p align="left">        </p>  <p align="left">        <span style="color:#3F7F5F;">//</span><span style="color:#3F7F5F;">如果这样去获取，那</span><u><span style="color:#3F7F5F;">conf</span></u><span style="color:#3F7F5F;">里面就可以不要配</span><span style="color:#3F7F5F;">"fs.defaultFS"</span><span style="color:#3F7F5F;">参数，而且，这个客户端的身份识别已经是</span><u><span style="color:#3F7F5F;">hadoop</span></u><span style="color:#3F7F5F;">用户</span></p>  <p align="left">        <span style="color:#3F7F5F;">//</span><span style="color:#3F7F5F;">注意，最后的</span><u><span style="color:#3F7F5F;">toto</span></u><span style="color:#3F7F5F;">表示的是</span><u><span style="color:#3F7F5F;">hadoop</span></u><span style="color:#3F7F5F;">集群安装的</span><span style="color:#3F7F5F;">Linux</span><span style="color:#3F7F5F;">用户</span></p>  <p align="left">        <span style="color:#0000C0;">fs</span> =  FileSystem.<em>get</em>(<strong><span style="color:#7F0055;">new</span></strong> URI(<span style="color:#2A00FF;">"hdfs://hadoop:9000"</span>),<span style="color:#6A3E3E;">conf</span>,<span style="color:#2A00FF;">"toto"</span>);</p>  <p align="left">    }</p>  <p align="left">    </p>  <p align="left">    <span style="color:#3F5FBF;">/**</span></p>  <p align="left"><span style="color:#3F5FBF;">     * \brief <u>hdfs</u></span><span style="color:#3F5FBF;">上传文件</span></p>  <p align="left"><span style="color:#3F5FBF;">     * </span></p>  <p align="left"><span style="color:#3F5FBF;">     * </span><span style="color:#3F5FBF;">执行完成之后，进入</span><span style="color:#3F5FBF;">Linux</span><span style="color:#3F5FBF;">，执行一下命令，发现会出现以下列表</span></p>  <p align="left"><span style="color:#3F5FBF;">     * [<u>toto@hadoop</u> software]$ <u>hadoop  fs</u> </span><span style="color:#7F7F9F;">-</span><u><span style="color:#3F5FBF;">ls</span></u><span style="color:#3F5FBF;"> /toto2</span></p>  <p align="left"><span style="color:#3F5FBF;">       Found 1  items</span></p>  <p align="left"><span style="color:#3F5FBF;">       </span><span style="color:#7F7F9F;">-</span><u><span style="color:#3F5FBF;">rw</span></u><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;">r</span><span style="color:#7F7F9F;">--</span><span style="color:#3F5FBF;">r</span><span style="color:#7F7F9F;">--</span><span style="color:#3F5FBF;">   3 <u>toto supergroup</u>    2286088 2017</span><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;">05</span><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;">30 13:25  /toto2/<u>ik</u></span><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;">analyzer</span><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;">solr5</span><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;">master.zip</span></p>  <p align="left"><span style="color:#3F5FBF;">     */</span></p>  <p align="left">    <span style="color:#646464;">@Test</span></p>  <p align="left">    <strong><span style="color:#7F0055;">public</span> <span style="color:#7F0055;">void</span></strong>  testAddFileToHdfs() {</p>  <p align="left">        <strong><span style="color:#7F0055;">try</span></strong> {</p>  <p align="left">            <span style="color:#3F7F5F;">//</span><span style="color:#3F7F5F;">要上传的所在的本地路径</span></p>  <p align="left">            Path <span style="color:#6A3E3E;">src</span> = <strong><span style="color:#7F0055;">new</span></strong> Path(<span style="color:#2A00FF;">"d:/ik-analyzer-solr5-master.zip"</span>);</p>  <p align="left">            <span style="color:#3F7F5F;">//</span><span style="color:#3F7F5F;">要上传的</span><u><span style="color:#3F7F5F;">hdfs</span></u><span style="color:#3F7F5F;">的目标路径</span></p>  <p align="left">            Path <span style="color:#6A3E3E;">dst</span> = <strong><span style="color:#7F0055;">new</span></strong> Path(<span style="color:#2A00FF;">"/toto2"</span>);</p>  <p align="left">            <span style="color:#0000C0;">fs</span>.copyFromLocalFile(<span style="color:#6A3E3E;">src</span>, <span style="color:#6A3E3E;">dst</span>);</p>  <p align="left">            <span style="color:#0000C0;">fs</span>.close();</p>  <p align="left">        } <strong><span style="color:#7F0055;">catch</span></strong>  (Exception <span style="color:#6A3E3E;">e</span>) {</p>  <p align="left">            <span style="color:#6A3E3E;">e</span>.printStackTrace();</p>  <p align="left">        }</p>  <p align="left">    }</p>  <p align="left">    </p>  <p align="left">    <span style="color:#3F5FBF;">/**</span></p>  <p align="left"><span style="color:#3F5FBF;">     * \brief </span><span style="color:#3F5FBF;">从</span><u><span style="color:#3F5FBF;">hdfs</span></u><span style="color:#3F5FBF;">中复制文件到本地文件系统</span></p>  <p align="left"><span style="color:#3F5FBF;">     * </span><strong><span style="color:#7F9FBF;">@attention</span></strong><span style="color:#3F5FBF;">执行完成之后，进入</span><span style="color:#3F5FBF;">E:/learnTempFolder</span><span style="color:#3F5FBF;">这个文件夹，发现在改文件夹下已经有了自己拷贝下来的文件了</span></p>  <p align="left"><span style="color:#3F5FBF;">     * </span><strong><span style="color:#7F9FBF;">@author</span></strong><span style="color:#3F5FBF;"> <u>toto</u></span></p>  <p align="left"><span style="color:#3F5FBF;">     * </span><strong><span style="color:#7F9FBF;">@date</span></strong><span style="color:#3F5FBF;"> 2017</span><span style="color:#3F5FBF;">年</span><span style="color:#3F5FBF;">5</span><span style="color:#3F5FBF;">月</span><span style="color:#3F5FBF;">30</span><span style="color:#3F5FBF;">日</span></p>  <p align="left"><span style="color:#3F5FBF;">     * </span><strong><span style="color:#7F9FBF;">@note</span></strong><span style="color:#3F5FBF;">  begin modify by </span><span style="color:#3F5FBF;">涂作权</span><span style="color:#3F5FBF;"> 2017</span><span style="color:#3F5FBF;">年</span><span style="color:#3F5FBF;">5</span><span style="color:#3F5FBF;">月</span><span style="color:#3F5FBF;">30</span><span style="color:#3F5FBF;">日</span><span style="color:#3F5FBF;">   </span><span style="color:#3F5FBF;">原始创建</span></p>  <p align="left"><span style="color:#3F5FBF;">     */</span></p>  <p align="left">    <span style="color:#646464;">@Test</span></p>  <p align="left">    <strong><span style="color:#7F0055;">public</span> <span style="color:#7F0055;">void</span></strong>  testDownLoadFileToLocal() {</p>  <p align="left">        <strong><span style="color:#7F0055;">try</span></strong> {</p>  <p align="left">            <span style="color:#0000C0;">fs</span>.copyToLocalFile(<strong><span style="color:#7F0055;">new</span></strong> Path(<span style="color:#2A00FF;">"/toto2/findbugs-1.3.9"</span>), <strong><span style="color:#7F0055;">new</span></strong> Path(<span style="color:#2A00FF;">"E:/learnTempFolder"</span>));</p>  <p align="left">            <span style="color:#0000C0;">fs</span>.close();</p>  <p align="left">        } <strong><span style="color:#7F0055;">catch</span></strong>  (Exception <span style="color:#6A3E3E;">e</span>) {</p>  <p align="left">            <span style="color:#6A3E3E;">e</span>.printStackTrace();</p>  <p align="left">        }</p>  <p align="left">    }</p>  <p align="left">    </p>  <p align="left">    <span style="color:#3F5FBF;">/**</span></p>  <p align="left"><span style="color:#3F5FBF;">     * </span><span style="color:#3F5FBF;">创建目录，删除目录，重命名</span></p>  <p align="left"><span style="color:#3F5FBF;">     * </span><span style="color:#3F5FBF;">执行之前</span><u><span style="color:#3F5FBF;">hadoop</span></u><span style="color:#3F5FBF;">的文件系统的目录结构如下：</span></p>  <p align="left"><span style="color:#3F5FBF;">     * [<u>toto@hadoop sbin</u>]$ <u>hadoop  fs</u> </span><span style="color:#7F7F9F;">-</span><u><span style="color:#3F5FBF;">ls</span></u><span style="color:#3F5FBF;"> /</span></p>  <p align="left"><span style="color:#3F5FBF;">        Found 7  items</span></p>  <p align="left"><span style="color:#3F5FBF;">        <u>drwxr</u></span><span style="color:#7F7F9F;">-</span><u><span style="color:#3F5FBF;">xr</span></u><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;">x   </span><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;"> <u>toto  supergroup</u>          0 2017</span><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;">05</span><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;">30 14:06  /<u>aaa</u></span></p>  <p align="left"><span style="color:#3F5FBF;">        <u>drwxr</u></span><span style="color:#7F7F9F;">-</span><u><span style="color:#3F5FBF;">xr</span></u><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;">x   </span><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;"> <u>toto  supergroup</u>          0 2017</span><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;">05</span><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;">29 14:01  /<u>findbugs</u></span><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;">1.3.9</span></p>  <p align="left"><span style="color:#3F5FBF;">        <u>drwxr</u></span><span style="color:#7F7F9F;">-</span><u><span style="color:#3F5FBF;">xr</span></u><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;">x   </span><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;"> <u>toto  supergroup</u>          0 2017</span><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;">05</span><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;">29 03:23  /hive</span></p>  <p align="left"><span style="color:#3F5FBF;">        <u>drwx</u></span><span style="color:#7F7F9F;">------</span><span style="color:#3F5FBF;">   </span><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;"> <u>toto  supergroup</u>          0 2017</span><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;">05</span><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;">29 14:47  /<u>tmp</u></span></p>  <p align="left"><span style="color:#3F5FBF;">        <u>drwxr</u></span><span style="color:#7F7F9F;">-</span><u><span style="color:#3F5FBF;">xr</span></u><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;">x   </span><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;"> <u>toto  supergroup</u>          0 2017</span><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;">05</span><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;">29 23:59  /<u>toto</u></span></p>  <p align="left"><span style="color:#3F5FBF;">        <u>drwxr</u></span><span style="color:#7F7F9F;">-</span><u><span style="color:#3F5FBF;">xr</span></u><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;">x   </span><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;"> <u>toto  supergroup</u>          0 2017</span><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;">05</span><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;">30 13:25  /toto2</span></p>  <p align="left"><span style="color:#3F5FBF;">        <u>drwxr</u></span><span style="color:#7F7F9F;">-</span><u><span style="color:#3F5FBF;">xr</span></u><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;">x   </span><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;"> <u>toto  supergroup</u>          0 2017</span><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;">05</span><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;">30 00:18  /user</span></p>  <p align="left"><span style="color:#3F5FBF;">        [<u>toto@hadoop  sbin</u>]$</span></p>  <p align="left"><span style="color:#3F5FBF;">        </span></p>  <p align="left"><span style="color:#3F5FBF;">        </span><span style="color:#3F5FBF;">执行之后的效果：</span></p>  <p align="left"><span style="color:#3F5FBF;">        [<u>toto@hadoop  sbin</u>]$ <u>hadoop fs</u> </span><span style="color:#7F7F9F;">-</span><u><span style="color:#3F5FBF;">ls</span></u><span style="color:#3F5FBF;"> /</span></p>  <p align="left"><span style="color:#3F5FBF;">        Found 7  items</span></p>  <p align="left"><span style="color:#3F5FBF;">        <u>drwxr</u></span><span style="color:#7F7F9F;">-</span><u><span style="color:#3F5FBF;">xr</span></u><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;">x   </span><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;"> <u>toto  supergroup</u>          0 2017</span><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;">05</span><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;">30 14:11  /a2</span></p>  <p align="left"><span style="color:#3F5FBF;">        <u>drwxr</u></span><span style="color:#7F7F9F;">-</span><u><span style="color:#3F5FBF;">xr</span></u><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;">x   </span><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;"> <u>toto  supergroup</u>          0 2017</span><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;">05</span><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;">29 14:01  /<u>findbugs</u></span><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;">1.3.9</span></p>  <p align="left"><span style="color:#3F5FBF;">        <u>drwxr</u></span><span style="color:#7F7F9F;">-</span><u><span style="color:#3F5FBF;">xr</span></u><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;">x   </span><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;"> <u>toto  supergroup</u>          0 2017</span><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;">05</span><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;">29 03:23  /hive</span></p>  <p align="left"><span style="color:#3F5FBF;">        <u>drwx</u></span><span style="color:#7F7F9F;">------</span><span style="color:#3F5FBF;">   </span><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;"> <u>toto  supergroup</u>          0 2017</span><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;">05</span><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;">29 14:47  /<u>tmp</u></span></p>  <p align="left"><span style="color:#3F5FBF;">        <u>drwxr</u></span><span style="color:#7F7F9F;">-</span><u><span style="color:#3F5FBF;">xr</span></u><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;">x   </span><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;"> <u>toto  supergroup</u>          0 2017</span><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;">05</span><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;">29 23:59  /<u>toto</u></span></p>  <p align="left"><span style="color:#3F5FBF;">        <u>drwxr</u></span><span style="color:#7F7F9F;">-</span><u><span style="color:#3F5FBF;">xr</span></u><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;">x   </span><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;"> <u>toto  supergroup</u>          0 2017</span><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;">05</span><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;">30 13:25  /toto2</span></p>  <p align="left"><span style="color:#3F5FBF;">        <u>drwxr</u></span><span style="color:#7F7F9F;">-</span><u><span style="color:#3F5FBF;">xr</span></u><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;">x   </span><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;"> <u>toto  supergroup</u>          0 2017</span><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;">05</span><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;">30 00:18  /user</span></p>  <p align="left"><span style="color:#3F5FBF;">        </span></p>  <p align="left"><span style="color:#3F5FBF;">        </span><span style="color:#3F5FBF;">总结：</span></p>  <p align="left"><span style="color:#3F5FBF;">        1</span><span style="color:#3F5FBF;">、发现</span><span style="color:#3F5FBF;">/<u>aaa</u></span><span style="color:#3F5FBF;">文件夹被删除了</span></p>  <p align="left"><span style="color:#3F5FBF;">        2</span><span style="color:#3F5FBF;">、发现出现了</span><span style="color:#3F5FBF;">/a2,</span><span style="color:#3F5FBF;">但是最开始没有，说明是创建的</span><span style="color:#3F5FBF;">a1,</span><span style="color:#3F5FBF;">然后又被改成的</span><span style="color:#3F5FBF;">a2</span></p>  <p align="left"><span style="color:#3F5FBF;">     */</span></p>  <p align="left">    <span style="color:#646464;">@Test</span></p>  <p align="left">    <strong><span style="color:#7F0055;">public</span> <span style="color:#7F0055;">void</span></strong>  testMkdirDeleteAndRename() {</p>  <p align="left">        <strong><span style="color:#7F0055;">try</span></strong> {</p>  <p align="left">            <span style="color:#3F7F5F;">//</span><span style="color:#3F7F5F;">创建目录</span></p>  <p align="left">            <span style="color:#0000C0;">fs</span>.mkdirs(<strong><span style="color:#7F0055;">new</span></strong> Path(<span style="color:#2A00FF;">"/a1/b1/c1"</span>));</p>  <p align="left">            </p>  <p align="left">            <span style="color:#3F7F5F;">//</span><span style="color:#3F7F5F;">删除文件夹，如果是非空文件夹，参数</span><span style="color:#3F7F5F;">2</span><span style="color:#3F7F5F;">必须给值</span><span style="color:#3F7F5F;">true</span></p>  <p align="left">            <span style="color:#0000C0;">fs</span>.delete(<strong><span style="color:#7F0055;">new</span></strong> Path(<span style="color:#2A00FF;">"/aaa"</span>),<strong><span style="color:#7F0055;">true</span></strong>);</p>  <p align="left">            </p>  <p align="left">            <span style="color:#3F7F5F;">//</span><span style="color:#3F7F5F;">重命名文件或文件夹</span></p>  <p align="left">            <span style="color:#0000C0;">fs</span>.rename(<strong><span style="color:#7F0055;">new</span></strong> Path(<span style="color:#2A00FF;">"/a1"</span>), <strong><span style="color:#7F0055;">new</span></strong> Path(<span style="color:#2A00FF;">"/a2"</span>));</p>  <p align="left">        } <strong><span style="color:#7F0055;">catch</span></strong>(Exception  <span style="color:#6A3E3E;">e</span>) {</p>  <p align="left">            <span style="color:#6A3E3E;">e</span>.printStackTrace();</p>  <p align="left">        }</p>  <p align="left">    }</p>  <p align="left">    </p>  <p align="left">    <span style="color:#3F5FBF;">/**</span></p>  <p align="left"><span style="color:#3F5FBF;">     * \brief </span><span style="color:#3F5FBF;">查看目录信息，只显示文件</span><span style="color:#3F5FBF;">  </span></p>  <p align="left"><span style="color:#3F5FBF;">     */</span></p>  <p align="left">    <span style="color:#646464;">@Test</span></p>  <p align="left">    <strong><span style="color:#7F0055;">public</span> <span style="color:#7F0055;">void</span></strong>  testListFiles() {</p>  <p align="left">        <strong><span style="color:#7F0055;">try</span></strong> {</p>  <p align="left">            <span style="color:#3F7F5F;">//</span><span style="color:#3F7F5F;">思考：为什么返回迭代器，而不是</span><span style="color:#3F7F5F;">List</span><span style="color:#3F7F5F;">之类的容器，这里的只有调用</span><span style="color:#3F7F5F;">hasNext()</span><span style="color:#3F7F5F;">的时候，才会返回实际的数据信息</span></p>  <p align="left">            RemoteIterator&lt;LocatedFileStatus&gt;  <span style="color:#6A3E3E;">listFiles</span> = <span style="color:#0000C0;">fs</span>.listFiles(<strong><span style="color:#7F0055;">new</span></strong> Path(<span style="color:#2A00FF;">"/"</span>), <strong><span style="color:#7F0055;">true</span></strong>);</p>  <p align="left">            </p>  <p align="left">            <strong><span style="color:#7F0055;">while</span></strong>(<span style="color:#6A3E3E;">listFiles</span>.hasNext())  {</p>  <p align="left">                LocatedFileStatus  <span style="color:#6A3E3E;">fileStatus</span> = <span style="color:#6A3E3E;">listFiles</span>.next();</p>  <p align="left">                System.<strong><em><span style="color:#0000C0;">out</span></em></strong>.println(<span style="color:#6A3E3E;">fileStatus</span>.getPath().getName());</p>  <p align="left">                System.<strong><em><span style="color:#0000C0;">out</span></em></strong>.println(<span style="color:#6A3E3E;">fileStatus</span>.getBlockSize());</p>  <p align="left">                System.<strong><em><span style="color:#0000C0;">out</span></em></strong>.println(<span style="color:#6A3E3E;">fileStatus</span>.getPermission());</p>  <p align="left">                System.<strong><em><span style="color:#0000C0;">out</span></em></strong>.println(<span style="color:#6A3E3E;">fileStatus</span>.getLen());</p>  <p align="left">                BlockLocation[]  <span style="color:#6A3E3E;">blockLocations</span> = <span style="color:#6A3E3E;">fileStatus</span>.getBlockLocations();</p>  <p align="left">                <strong><span style="color:#7F0055;">for</span></strong>(BlockLocation  <span style="color:#6A3E3E;">b1</span> : <span style="color:#6A3E3E;">blockLocations</span>) {</p>  <p align="left">                    System.<strong><em><span style="color:#0000C0;">out</span></em></strong>.println(<span style="color:#2A00FF;">"block-length:"</span> + <span style="color:#6A3E3E;">b1</span>.getLength()  + <span style="color:#2A00FF;">"--"</span> + <span style="color:#2A00FF;">"block-offset:"</span> + <span style="color:#6A3E3E;">b1</span>.getOffset());</p>  <p align="left">                    String[]  <span style="color:#6A3E3E;">hosts</span> = <span style="color:#6A3E3E;">b1</span>.getHosts();</p>  <p align="left">                    <strong><span style="color:#7F0055;">for</span></strong>(String <span style="color:#6A3E3E;">host</span> : <span style="color:#6A3E3E;">hosts</span>) {</p>  <p align="left">                        System.<strong><em><span style="color:#0000C0;">out</span></em></strong>.println(<span style="color:#6A3E3E;">host</span>);</p>  <p align="left">                    }</p>  <p align="left">                }</p>  <p align="left">                System.<strong><em><span style="color:#0000C0;">out</span></em></strong>.println(<span style="color:#2A00FF;">"-----------------------------------"</span>);</p>  <p align="left">            }</p>  <p align="left">        } <strong><span style="color:#7F0055;">catch</span></strong>  (Exception <span style="color:#6A3E3E;">e</span>) {</p>  <p align="left">            <span style="color:#6A3E3E;">e</span>.printStackTrace();</p>  <p align="left">        }</p>  <p align="left">    }</p>  <p align="left">    </p>  <p align="left">    <span style="color:#3F5FBF;">/**</span></p>  <p align="left"><span style="color:#3F5FBF;">     * </span><span style="color:#3F5FBF;">查看文件及文件夹信息</span></p>  <p align="left"><span style="color:#3F5FBF;">     * </span></p>  <p align="left"><span style="color:#3F5FBF;">     * </span><span style="color:#3F5FBF;">显示的内容如下：</span></p>  <p align="left"><span style="color:#3F5FBF;">     * d</span><span style="color:#7F7F9F;">--</span><span style="color:#3F5FBF;">             a2</span></p>  <p align="left"><span style="color:#3F5FBF;">     * d</span><span style="color:#7F7F9F;">--</span><span style="color:#3F5FBF;">             <u>findbugs</u></span><span style="color:#7F7F9F;">-</span><span style="color:#3F5FBF;">1.3.9</span></p>  <p align="left"><span style="color:#3F5FBF;">     * d</span><span style="color:#7F7F9F;">--</span><span style="color:#3F5FBF;">             hive</span></p>  <p align="left"><span style="color:#3F5FBF;">     * d</span><span style="color:#7F7F9F;">--</span><span style="color:#3F5FBF;">             <u>tmp</u></span></p>  <p align="left"><span style="color:#3F5FBF;">     * d</span><span style="color:#7F7F9F;">--</span><span style="color:#3F5FBF;">             <u>toto</u></span></p>  <p align="left"><span style="color:#3F5FBF;">     * d</span><span style="color:#7F7F9F;">--</span><span style="color:#3F5FBF;">             toto2</span></p>  <p align="left"><span style="color:#3F5FBF;">     * d</span><span style="color:#7F7F9F;">--</span><span style="color:#3F5FBF;">             user</span></p>  <p align="left"><span style="color:#3F5FBF;">     */</span></p>  <p align="left">    <span style="color:#646464;">@Test</span></p>  <p align="left">    <strong><span style="color:#7F0055;">public</span> <span style="color:#7F0055;">void</span></strong>  testListAll() {</p>  <p align="left">        <strong><span style="color:#7F0055;">try</span></strong> {</p>  <p align="left">            FileStatus[]  <span style="color:#6A3E3E;">listStatus</span> = <span style="color:#0000C0;">fs</span>.listStatus(<strong><span style="color:#7F0055;">new</span></strong> Path(<span style="color:#2A00FF;">"/"</span>));</p>  <p align="left">            </p>  <p align="left">            String  <span style="color:#6A3E3E;">flag</span> = <span style="color:#2A00FF;">"d--             "</span>;</p>  <p align="left">            <strong><span style="color:#7F0055;">for</span></strong>(FileStatus  <span style="color:#6A3E3E;">fstatus</span> : <span style="color:#6A3E3E;">listStatus</span>) {</p>  <p align="left">                <strong><span style="color:#7F0055;">if</span></strong> (<span style="color:#6A3E3E;">fstatus</span>.isFile())  <span style="color:#6A3E3E;">flag</span> = <span style="color:#2A00FF;">"f--         "</span>;</p>  <p align="left">                System.<strong><em><span style="color:#0000C0;">out</span></em></strong>.println(<span style="color:#6A3E3E;">flag</span> + <span style="color:#6A3E3E;">fstatus</span>.getPath().getName());</p>  <p align="left">            }</p>  <p align="left">        } <strong><span style="color:#7F0055;">catch</span></strong>  (Exception <span style="color:#6A3E3E;">e</span>) {</p>  <p align="left">            <span style="color:#6A3E3E;">e</span>.printStackTrace();</p>  <p align="left">        }</p>  <p align="left">    }</p>  <p align="left">}</p></td> </tr></tbody></table><p> </p><h3><a name="_Toc439077239">１.4.2 </a>通过流的方式访问hdfs</h3><table border="1" cellspacing="0" cellpadding="0"><tbody><tr><td valign="top"><p align="left"><strong><span style="color:#7F0055;">package</span></strong> com.toto.hadooptest;</p>  <p align="left"> </p>  <p align="left"><strong><span style="color:#7F0055;">import</span></strong> java.io.File;</p>  <p align="left"><strong><span style="color:#7F0055;">import</span></strong> <span>java.io.FileInputStream</span>;</p>  <p align="left"><strong><span style="color:#7F0055;">import</span></strong> java.io.FileOutputStream;</p>  <p align="left"><strong><span style="color:#7F0055;">import</span></strong> java.net.URI;</p>  <p align="left"> </p>  <p align="left"><strong><span style="color:#7F0055;">import</span></strong> org.apache.hadoop.conf.Configuration;</p>  <p align="left"><strong><span style="color:#7F0055;">import</span></strong> org.apache.hadoop.fs.BlockLocation;</p>  <p align="left"><strong><span style="color:#7F0055;">import</span></strong> org.apache.hadoop.fs.FSDataInputStream;</p>  <p align="left"><strong><span style="color:#7F0055;">import</span></strong> org.apache.hadoop.fs.FSDataOutputStream;</p>  <p align="left"><strong><span style="color:#7F0055;">import</span></strong> org.apache.hadoop.fs.FileStatus;</p>  <p align="left"><strong><span style="color:#7F0055;">import</span></strong> org.apache.hadoop.fs.FileSystem;</p>  <p align="left"><strong><span style="color:#7F0055;">import</span></strong> org.apache.hadoop.fs.Path;</p>  <p align="left"><strong><span style="color:#7F0055;">import</span></strong> org.apache.hadoop.io.IOUtils;</p>  <p align="left"><strong><span style="color:#7F0055;">import</span></strong> org.junit.Before;</p>  <p align="left"><strong><span style="color:#7F0055;">import</span></strong> org.junit.Test;</p>  <p align="left"> </p>  <p align="left"><span style="color:#3F5FBF;">/**</span></p>  <p align="left"><span style="color:#3F5FBF;"> * </span><span style="color:#3F5FBF;">相对那些封装好的方法而言的更底层一些的操作方式</span></p>  <p align="left"><span style="color:#3F5FBF;"> * </span><span style="color:#3F5FBF;">上层那些</span><u><span style="color:#3F5FBF;">mapreduce</span></u><span style="color:#3F5FBF;">,spark</span><span style="color:#3F5FBF;">等运算框架，去</span><u><span style="color:#3F5FBF;">hdfs</span></u><span style="color:#3F5FBF;">中获取数据的时候，就是调用这种底层的</span><u><span style="color:#3F5FBF;">api</span></u></p>  <p align="left"><span style="color:#3F5FBF;"> */</span></p>  <p align="left"><strong><span style="color:#7F0055;">public</span> <span style="color:#7F0055;">class</span></strong> StreamAccess {</p>  <p align="left">    FileSystem <span style="color:#0000C0;">fs</span> = <strong><span style="color:#7F0055;">null</span></strong>;</p>  <p align="left"> </p>  <p align="left">    <span style="color:#646464;">@Before</span></p>  <p align="left">    <strong><span style="color:#7F0055;">public</span> <span style="color:#7F0055;">void</span></strong> init() <strong><span style="color:#7F0055;">throws</span></strong> Exception  {</p>  <p align="left"> </p>  <p align="left">       Configuration <span style="color:#6A3E3E;">conf</span> = <strong><span style="color:#7F0055;">new</span></strong>  Configuration();</p>  <p align="left">       <span style="color:#0000C0;">fs</span> =  FileSystem.<em>get</em>(<strong><span style="color:#7F0055;">new</span></strong> URI(<span style="color:#2A00FF;">"hdfs://hadoop:9000"</span>), <span style="color:#6A3E3E;">conf</span>, <span style="color:#2A00FF;">"toto"</span>);</p>  <p align="left"> </p>  <p align="left">    }</p>  <p align="left">    </p>  <p align="left">       <span style="color:#3F5FBF;">/**</span></p>  <p align="left"><span style="color:#3F5FBF;">     * </span><span style="color:#3F5FBF;">通过流的方式上传文件到</span><u><span style="color:#3F5FBF;">hdfs</span></u></p>  <p align="left"><span style="color:#3F5FBF;">     * </span><strong><span style="color:#7F9FBF;">@throws</span></strong><span style="color:#3F5FBF;">  Exception</span></p>  <p align="left"><span style="color:#3F5FBF;">     */</span></p>  <p align="left">    <span style="color:#646464;">@Test</span></p>  <p align="left">    <strong><span style="color:#7F0055;">public</span> <span style="color:#7F0055;">void</span></strong> testUpload()  <strong><span style="color:#7F0055;">throws</span></strong> Exception {</p>  <p align="left">       FSDataOutputStream <span style="color:#6A3E3E;">outputStream</span> = <span style="color:#0000C0;">fs</span>.create(<strong><span style="color:#7F0055;">new</span></strong> Path(<span style="color:#2A00FF;">"/README.md"</span>), <strong><span style="color:#7F0055;">true</span></strong>);</p>  <p align="left">       <span>FileInputStream</span> <span style="color:#6A3E3E;">inputStream</span> = <strong><span style="color:#7F0055;">new</span></strong> <span>FileInputStream</span>(<span style="color:#2A00FF;">"E:/learnTempFolder/dubbo-master/README.md"</span>);</p>  <p align="left">       </p>  <p align="left">       <span style="color:#3F7F5F;">//</span><span style="color:#3F7F5F;">注意这里的</span><span style="color:#3F7F5F;">IOUtils</span><span style="color:#3F7F5F;">是</span><span style="color:#3F7F5F;">org.apache.hadoop.io.IOUtils</span><span style="color:#3F7F5F;">中的包，否则创建不成功</span></p>  <p align="left">       IOUtils.<em>copyBytes</em>(<span style="color:#6A3E3E;">inputStream</span>, <span style="color:#6A3E3E;">outputStream</span>, 4096);</p>  <p align="left">    }</p>  <p align="left"> </p>  <p align="left">    <span style="color:#3F5FBF;">/**</span></p>  <p align="left"><span style="color:#3F5FBF;">     * </span><span style="color:#3F5FBF;">从</span><u><span style="color:#3F5FBF;">hdfs</span></u><span style="color:#3F5FBF;">上下载资源文件到本地</span></p>  <p align="left"><span style="color:#3F5FBF;">     */</span></p>  <p align="left">    <span style="color:#646464;">@Test</span></p>  <p align="left">    <strong><span style="color:#7F0055;">public</span> <span style="color:#7F0055;">void</span></strong>  testDownLoadFileToLocal() {</p>  <p align="left">       <strong><span style="color:#7F0055;">try</span></strong>{</p>  <p align="left">           <span style="color:#3F7F5F;">//</span><span style="color:#3F7F5F;">先获取一个文件的输入流</span><span style="color:#3F7F5F;">---</span><span style="color:#3F7F5F;">针对</span><u><span style="color:#3F7F5F;">hdfs</span></u><span style="color:#3F7F5F;">上的</span></p>  <p align="left">           FSDataInputStream <span style="color:#6A3E3E;">in</span> = <span style="color:#0000C0;">fs</span>.open(<strong><span style="color:#7F0055;">new</span></strong> Path(<span style="color:#2A00FF;">"/hive/apache-hive-2.0.0-bin.tar.gz"</span>));</p>  <p align="left">           </p>  <p align="left">           <span style="color:#3F7F5F;">//</span><span style="color:#3F7F5F;">再构造一个文件的输出流</span><span style="color:#3F7F5F;">---</span><span style="color:#3F7F5F;">针对本地的</span></p>  <p align="left">           FileOutputStream <span style="color:#6A3E3E;">out</span> = <strong><span style="color:#7F0055;">new</span></strong>  FileOutputStream(<strong><span style="color:#7F0055;">new</span></strong> File(<span style="color:#2A00FF;">"E:/apache-hive-2.0.0-bin.tar.gz"</span>));</p>  <p align="left">           </p>  <p align="left">           <span style="color:#3F7F5F;">//</span><span style="color:#3F7F5F;">再将输入流中数据传输到输出流</span></p>  <p align="left">           IOUtils.<em>copyBytes</em>(<span style="color:#6A3E3E;">in</span>, <span style="color:#6A3E3E;">out</span>, 4096);</p>  <p align="left">       } <strong><span style="color:#7F0055;">catch</span></strong> (Exception <span style="color:#6A3E3E;">e</span>) {</p>  <p align="left">           <span style="color:#6A3E3E;">e</span>.printStackTrace();</p>  <p align="left">       }</p>  <p align="left">    }</p>  <p align="left">    </p>  <p align="left">    <span style="color:#3F5FBF;">/**</span></p>  <p align="left"><span style="color:#3F5FBF;">     * <u>hdfs</u></span><span style="color:#3F5FBF;">支持随机定位进行文件读取，而且可以方便地读取指定长度</span></p>  <p align="left"><span style="color:#3F5FBF;">     * </span><span style="color:#3F5FBF;">用于上层分布式运算框架并发处理数据</span></p>  <p align="left"><span style="color:#3F5FBF;">     */</span></p>  <p align="left">    <span style="color:#646464;">@Test</span></p>  <p align="left">    <strong><span style="color:#7F0055;">public</span> <span style="color:#7F0055;">void</span></strong>  testRandomAccess() {</p>  <p align="left">       <strong><span style="color:#7F0055;">try</span></strong> {</p>  <p align="left">           <span style="color:#3F7F5F;">//</span><span style="color:#3F7F5F;">先获取一个文件的输入流</span><span style="color:#3F7F5F;">---</span><span style="color:#3F7F5F;">针对</span><u><span style="color:#3F7F5F;">hdfs</span></u><span style="color:#3F7F5F;">上的</span></p>  <p align="left">           FSDataInputStream <span style="color:#6A3E3E;">in</span> = <span style="color:#0000C0;">fs</span>.open(<strong><span style="color:#7F0055;">new</span></strong> Path(<span style="color:#2A00FF;">"/pom.xml"</span>));</p>  <p align="left">           </p>  <p align="left">           <span style="color:#3F7F5F;">//</span><span style="color:#3F7F5F;">可以将流的起始偏移量进行自定义</span></p>  <p align="left">           <span style="color:#6A3E3E;">in</span>.seek(200);</p>  <p align="left">           </p>  <p align="left">           <span style="color:#3F7F5F;">//</span><span style="color:#3F7F5F;">在构造一个文件的输出流</span><span style="color:#3F7F5F;">----</span><span style="color:#3F7F5F;">针对本地的</span></p>  <p align="left">           FileOutputStream <span style="color:#6A3E3E;">out</span> = <strong><span style="color:#7F0055;">new</span></strong>  FileOutputStream(<strong><span style="color:#7F0055;">new</span></strong> File(<span style="color:#2A00FF;">"E:/pom.xml"</span>));</p>  <p align="left">           </p>  <p align="left">           <span style="color:#3F7F5F;">//</span><span style="color:#3F7F5F;">第三个参数的意思是获取长度为</span><span style="color:#3F7F5F;">3000</span><span style="color:#3F7F5F;">的文本内容</span></p>  <p align="left">           IOUtils.<em>copyBytes</em>(<span style="color:#6A3E3E;">in</span>, <span style="color:#6A3E3E;">out</span>,3000L, <strong><span style="color:#7F0055;">true</span></strong>);</p>  <p align="left">       } <strong><span style="color:#7F0055;">catch</span></strong> (Exception <span style="color:#6A3E3E;">e</span>) {</p>  <p align="left">           <span style="color:#6A3E3E;">e</span>.printStackTrace();</p>  <p align="left">       }</p>  <p align="left">    }</p>  <p align="left">    </p>  <p align="left">    <span style="color:#3F5FBF;">/**</span></p>  <p align="left"><span style="color:#3F5FBF;">     * </span><span style="color:#3F5FBF;">显示</span><u><span style="color:#3F5FBF;">hdfs</span></u><span style="color:#3F5FBF;">上文件的内容</span></p>  <p align="left"><span style="color:#3F5FBF;">     */</span></p>  <p align="left">    <span style="color:#646464;">@Test</span></p>  <p align="left">    <strong><span style="color:#7F0055;">public</span> <span style="color:#7F0055;">void</span></strong> testCat() {</p>  <p align="left">       <strong><span style="color:#7F0055;">try</span></strong> {</p>  <p align="left">           FSDataInputStream <span style="color:#6A3E3E;">in</span> = <span style="color:#0000C0;">fs</span>.open(<strong><span style="color:#7F0055;">new</span></strong> Path(<span style="color:#2A00FF;">"/pom.xml"</span>));</p>  <p align="left">           </p>  <p align="left">           IOUtils.<em>copyBytes</em>(<span style="color:#6A3E3E;">in</span>, System.<strong><em><span style="color:#0000C0;">out</span></em></strong>, 1024);</p>  <p align="left">       } <strong><span style="color:#7F0055;">catch</span></strong> (Exception <span style="color:#6A3E3E;">e</span>) {</p>  <p align="left">           <span style="color:#6A3E3E;">e</span>.printStackTrace();</p>  <p align="left">       }</p>  <p align="left">    }</p>  <p align="left">    </p>  <p align="left">}<em></em></p></td> </tr></tbody></table><p> </p><h3>１.4.3 场景编程</h3><p>在mapreduce 、spark等运算框架中，有一个核心思想就是将运算移往数据，或者说，就是要在并发计算中尽可能让运算本地化，这就需要获取数据所在位置的信息并进行相应范围读取以下模拟实现：获取一个文件的所有block位置信息，然后读取指定block中的内容</p><table border="1" cellspacing="0" cellpadding="0"><tbody><tr><td valign="top"><p align="left"><em>         </em><span style="color:#646464;">@Test</span></p>  <p align="left">    <strong><span style="color:#7F0055;">public</span> <span style="color:#7F0055;">void</span></strong> testCat2() {</p>  <p align="left">       <strong><span style="color:#7F0055;">try</span></strong> {</p>  <p align="left">           FSDataInputStream <span style="color:#6A3E3E;">in</span> = <span style="color:#0000C0;">fs</span>.open(<strong><span style="color:#7F0055;">new</span></strong> Path(<span style="color:#2A00FF;">"/toto2/findbugs-1.3.9"</span>));</p>  <p align="left">           <span style="color:#3F7F5F;">//</span><span style="color:#3F7F5F;">拿到文件信息</span></p>  <p align="left">           FileStatus[] <span style="color:#6A3E3E;">listStatus</span> = <span style="color:#0000C0;">fs</span>.listStatus(<strong><span style="color:#7F0055;">new</span></strong> Path(<span style="color:#2A00FF;">"/toto2/findbugs-1.3.9"</span>));</p>  <p align="left">           <span style="color:#3F7F5F;">//</span><span style="color:#3F7F5F;">获取这个文件的所有的</span><span style="color:#3F7F5F;">block</span><span style="color:#3F7F5F;">的信息</span></p>  <p align="left">           BlockLocation[] <span style="color:#6A3E3E;">fileBlockLocations</span> = <span style="color:#0000C0;">fs</span>.getFileBlockLocations(<span style="color:#6A3E3E;">listStatus</span>[0], 0, <span style="color:#6A3E3E;">listStatus</span>[0].getLen());</p>  <p align="left">           <span style="color:#3F7F5F;">//</span><span style="color:#3F7F5F;">第一个</span><span style="color:#3F7F5F;">block</span><span style="color:#3F7F5F;">的长度</span></p>  <p align="left">           <strong><span style="color:#7F0055;">long</span></strong> <span style="color:#6A3E3E;">length</span> = <span style="color:#6A3E3E;">fileBlockLocations</span>[0].getLength();</p>  <p align="left">           <span style="color:#3F7F5F;">//</span><span style="color:#3F7F5F;">第一个</span><span style="color:#3F7F5F;">block</span><span style="color:#3F7F5F;">的起始偏移量</span></p>  <p align="left">           <strong><span style="color:#7F0055;">long</span></strong> <span style="color:#6A3E3E;">offset</span> = <span style="color:#6A3E3E;">fileBlockLocations</span>[0].getOffset();</p>  <p align="left">           </p>  <p align="left">           System.<strong><em><span style="color:#0000C0;">out</span></em></strong>.println(<span style="color:#6A3E3E;">length</span>);</p>  <p align="left">           System.<strong><em><span style="color:#0000C0;">out</span></em></strong>.println(<span style="color:#6A3E3E;">offset</span>);</p>  <p align="left">           </p>  <p align="left">           <span style="color:#3F7F5F;">//</span><span style="color:#3F7F5F;">获取第一个</span><span style="color:#3F7F5F;">block</span><span style="color:#3F7F5F;">写入输出流</span></p>  <p align="left">           IOUtils.<em>copyBytes</em>(<span style="color:#6A3E3E;">in</span>, System.<strong><em><span style="color:#0000C0;">out</span></em></strong>, (<strong><span style="color:#7F0055;">int</span></strong>)<span style="color:#6A3E3E;">length</span>);</p>  <p align="left">           <strong><span style="color:#7F0055;">byte</span></strong>[] <span style="color:#6A3E3E;">b</span> = <strong><span style="color:#7F0055;">new</span> <span style="color:#7F0055;">byte</span></strong>[4096];</p>  <p align="left">           </p>  <p align="left">           <span style="color:#646464;">@SuppressWarnings</span>(<span style="color:#2A00FF;">"resource"</span>)</p>  <p align="left">           FileOutputStream <span style="color:#6A3E3E;">os</span> = <strong><span style="color:#7F0055;">new</span></strong>  FileOutputStream(<strong><span style="color:#7F0055;">new</span></strong> File(<span style="color:#2A00FF;">"e:/block"</span>));</p>  <p align="left">           <strong><span style="color:#7F0055;">while</span></strong>(<span style="color:#6A3E3E;">in</span>.read(<span style="color:#6A3E3E;">offset</span>,<span style="color:#6A3E3E;">b</span>,0,4096) !=  -1) {</p>  <p align="left">              <span style="color:#6A3E3E;">os</span>.write(<span style="color:#6A3E3E;">b</span>);</p>  <p align="left">              <span style="color:#6A3E3E;">offset</span> += 4096;</p>  <p align="left">              <strong><span style="color:#7F0055;">if</span></strong> (<span style="color:#6A3E3E;">offset</span> &gt;= <span style="color:#6A3E3E;">length</span>) <strong><span style="color:#7F0055;">return</span></strong>;</p>  <p align="left">           }</p>  <p align="left">           </p>  <p align="left">           <span style="color:#6A3E3E;">os</span>.flush();</p>  <p align="left">           <span style="color:#6A3E3E;">os</span>.close();</p>  <p align="left">           <span style="color:#6A3E3E;">in</span>.close();</p>  <p align="left">       }   <strong><span style="color:#7F0055;">catch</span></strong> (Exception <span style="color:#6A3E3E;">e</span>) {</p>  <p align="left">           <span style="color:#6A3E3E;">e</span>.printStackTrace();</p>  <p align="left">       }</p>  <p align="left">    }</p></td> </tr></tbody></table><p> </p><p> </p><p> </p><p> </p>            </div>
                </div>