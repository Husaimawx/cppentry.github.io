---
layout:     post
title:      Hbase万亿级存储性能优化总结
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                <h1 class="csdn_top" style="color:rgb(44,48,51);font-size:24px;line-height:38px;">【HBase调优】Hbase万亿级存储性能优化总结</h1><div class="article_bar clearfix" style="color:rgb(136,136,136);border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(229,229,229);font-size:14px;line-height:38px;"><div class="artical_tag"><span class="original" style="border:1px solid rgb(228,235,244);color:rgb(120,144,156);">转载 </span><span class="time" style="color:rgb(187,187,187);">2017年04月08日 12:06:41</span></div><ul class="right_bar" style="list-style:none;"><li style="margin-left:30px;list-style:none;line-height:28px;"><span class="icon iconfont icon-read" style="font-size:16px;vertical-align:middle;color:rgb(187,187,187);font-family:iconfont;"></span><span class="txt" style="color:rgb(187,187,187);vertical-align:middle;">2156</span></li></ul></div><div class="article_content csdn-tracking-statistics tracking-click" style="color:rgb(69,69,69);line-height:24px;"><div class="htmledit_views"><h2 class="rich_media_title" style="font-family:'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;font-weight:400;line-height:1.4;border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(231,231,235);">【HBase调优】Hbase万亿级存储性能优化总结</h2><div class="rich_media_meta_list" style="line-height:20px;font-size:0px;font-family:'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><span class="rich_media_meta rich_media_meta_text" style="vertical-align:middle;font-size:16px;color:rgb(140,140,140);">2017-04-07</span></div><div class="rich_media_content" style="color:rgb(62,62,62);min-height:350px;font-family:'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;line-height:25.6px;"><p style="min-height:1em;clear:both;"><span><span>背景：</span>HBase主集群在生产环境已稳定运行有1年半时间，最大的单表region数已达7200多个，每天新增入库量就有百亿条，对HBase的认识经历了懵懂到熟的过程。为了应对业务数据的压力，HBase入库也由最初的单机多线程升级为有容灾机制的分布式入库，为及早发现集群中的问题，还开发了一套对HBase集群服务和应用全面监控的报警系统。总结下HBase优化(针对0.94版本)方面的一些经验也算对这两年HBase工作的一个描述。</span></p><p style="min-height:1em;clear:both;"><br></p><p style="min-height:1em;clear:both;"><span style="color:rgb(0,0,0);">相关资源：《HBase企业应用开发实战》，HBase笔记（工作中自己总结的，非常全）等，领取方式：请点击“阅读原文”查看，更多资源请查看历史消息！</span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="color:rgb(0,0,0);font-size:16px;">服务端</span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="color:rgb(0,0,0);font-size:16px;">1.hbase.regionserver.handler.count：rpc请求的线程数量，默认值是10，生产环境建议使用100，也不是越大越好，特别是当请求内容很大的时候，比如scan/put几M的数据，会占用过多的内存，有可能导致频繁的GC，甚至出现内存溢出。</span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><br></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="color:rgb(0,0,0);font-size:16px;">2.hbase.master.distributed.log.splitting：默认值为true，建议设为false。关闭hbase的分布式日志切割，在log需要replay时，由master来负责重放</span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><br></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="color:rgb(0,0,0);font-size:16px;">3.hbase.regionserver.hlog.splitlog.writer.threads：默认值是3，建议设为10，日志切割所用的线程数</span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><br></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="color:rgb(0,0,0);font-size:16px;">4.hbase.snapshot.enabled：快照功能，默认是false(不开启)，建议设为true，特别是对某些关键的表，定时用快照做备份是一个不错的选择。</span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><br></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="color:rgb(0,0,0);font-size:16px;">5.hbase.hregion.max.filesize：默认是10G， 如果任何一个column familiy里的StoreFile超过这个值, 那么这个Region会一分为二，因为region分裂会有短暂的region下线时间(通常在5s以内)，为减少对业务端的影响，建议手动定时分裂，可以设置为60G。</span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><br></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="color:rgb(0,0,0);font-size:16px;">6.hbase.hregion.majorcompaction：hbase的region主合并的间隔时间，默认为1天，建议设置为0，禁止自动的major主合并，major合并会把一个store下所有的storefile重写为一个storefile文件，在合并过程中还会把有删除标识的数据删除，在生产集群中，主合并能持续数小时之久，为减少对业务的影响，建议在业务低峰期进行手动或者通过脚本或者api定期进行major合并。</span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><br></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="color:rgb(0,0,0);font-size:16px;">7.hbase.hregion.memstore.flush.size：默认值128M，单位字节，一旦有memstore超过该值将被flush，如果regionserver的jvm内存比较充足(16G以上)，可以调整为256M。</span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><br></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="color:rgb(0,0,0);font-size:16px;">8.hbase.hregion.memstore.block.multiplier：默认值2，如果一个memstore的内存大小已经超过hbase.hregion.memstore.flush.size *  hbase.hregion.memstore.block.multiplier，则会阻塞该memstore的写操作，为避免阻塞，建议设置为5，如果太大，则会有OOM的风险。如果在regionserver日志中出现"Blocking updates for '&lt;threadName&gt;' on region &lt;regionName&gt; : memstore size &lt;多少M&gt; is &gt;= than blocking &lt;多少M&gt; size"的信息时，说明这个值该调整了。</span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><br></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="color:rgb(0,0,0);font-size:16px;">9.hbase.hstore.compaction.min：默认值为3，如果任何一个store里的storefile总数超过该值，会触发默认的合并操作，可以设置5~8，在手动的定期major compact中进行storefile文件的合并，减少合并的次数，不过这会延长合并的时间，以前的对应参数为hbase.hstore.compactionThreshold。</span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><br></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="color:rgb(0,0,0);font-size:16px;">10.hbase.hstore.compaction.max：默认值为10,一次最多合并多少个storefile，避免OOM。</span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><br></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="color:rgb(0,0,0);font-size:16px;">11.hbase.hstore.blockingStoreFiles：默认为7，如果任何一个store(非.META.表里的store)的storefile的文件数大于该值，则在flush memstore前先进行split或者compact，同时把该region添加到flushQueue，延时刷新，这期间会阻塞写操作直到compact完成或者超过hbase.hstore.blockingWaitTime(默认90s)配置的时间，可以设置为30，避免memstore不及时flush。当regionserver运行日志中出现大量的“Region &lt;regionName&gt; has too many store files; delaying flush up to 90000ms"时，说明这个值需要调整了</span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><br></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="color:rgb(0,0,0);font-size:16px;">12.hbase.regionserver.global.memstore.upperLimit：默认值0.4，regionserver所有memstore占用内存在总内存中的upper比例，当达到该值，则会从整个regionserver中找出最需要flush的region进行flush，直到总内存比例降到该数以下，采用默认值即可。</span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><br></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="color:rgb(0,0,0);font-size:16px;">13.hbase.regionserver.global.memstore.lowerLimit：默认值0.35，采用默认值即可。</span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><br></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="color:rgb(0,0,0);font-size:16px;">14.hbase.regionserver.thread.compaction.small：默认值为1，regionserver做Minor Compaction时线程池里线程数目,可以设置为5。</span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><br></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="color:rgb(0,0,0);font-size:16px;">15.hbase.regionserver.thread.compaction.large：默认值为1，regionserver做Major Compaction时线程池里线程数目，可以设置为8。</span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><br></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="color:rgb(0,0,0);font-size:16px;">16.hbase.regionserver.lease.period：默认值60000(60s)，客户端连接regionserver的租约超时时间，客户端必须在这个时间内汇报，否则则认为客户端已死掉。这个最好根据实际业务情况进行调整</span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><br></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="color:rgb(0,0,0);font-size:16px;">17.hfile.block.cache.size：默认值0.25，regionserver的block cache的内存大小限制，在偏向读的业务中，可以适当调大该值，需要注意的是hbase.regionserver.global.memstore.upperLimit的值和hfile.block.cache.size的值之和必须小于0.8。</span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><br></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="color:rgb(0,0,0);font-size:16px;">18.dfs.socket.timeout：默认值60000(60s)，建议根据实际regionserver的日志监控发现了异常进行合理的设置，比如我们设为900000，这个参数的修改需要同时更改hdfs-site.xml</span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><br></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="color:rgb(0,0,0);font-size:16px;">19.dfs.datanode.socket.write.timeout：默认480000(480s),有时regionserver做合并时，可能会出现datanode写超时的情况，480000 millis timeout while waiting for channel to be ready for write，这个参数的修改需要同时更改hdfs-site.xml</span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><br></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="font-size:16px;"><span><span style="color:rgb(0,0,0);">jvm和垃圾收集参数：</span></span></span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="color:rgb(0,0,0);font-size:16px;">export HBASE_REGIONSERVER_OPTS="-Xms36g -Xmx36g -Xmn1g -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+UseCMSCompactAtFullCollection -XX:CMSFullGCsBeforeCompaction=15 -XX:CMSInitiatingOccupancyFraction=70 -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:/data/logs/gc-$(hostname)-hbase.log"</span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><br></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="color:rgb(0,0,0);font-size:16px;">由于我们服务器内存较大(96G),我们给一部分regionserver的jvm内存开到64G，到现在为止，还没有发生过一次full gc，hbase在内存使用控制方面确实下了不少功夫，比如各种blockcache的实现，细心的同学可以看源码。</span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><br></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="font-size:16px;"><span><span style="color:rgb(0,0,0);">Client端</span></span></span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="color:rgb(0,0,0);font-size:16px;">1.hbase.client.write.buffer：默认为2M，写缓存大小，推荐设置为5M，单位是字节，当然越大占用的内存越多，此外测试过设为10M下的入库性能，反而没有5M好</span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="color:rgb(0,0,0);font-size:16px;">2.hbase.client.pause：默认是1000(1s),如果你希望低延时的读或者写，建议设为200，这个值通常用于失败重试，region寻找等</span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="color:rgb(0,0,0);font-size:16px;">3.hbase.client.retries.number：默认值是10，客户端最多重试次数,可以设为11，结合上面的参数，共重试时间71s</span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="color:rgb(0,0,0);font-size:16px;">4.hbase.ipc.client.tcpnodelay：默认是false，建议设为true，关闭消息缓冲</span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="color:rgb(0,0,0);font-size:16px;">5.hbase.client.scanner.caching：scan缓存，默认为1，避免占用过多的client和rs的内存，一般1000以内合理，如果一条数据太大，则应该设置一个较小的值，通常是设置业务需求的一次查询的数据条数 </span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="color:rgb(0,0,0);font-size:16px;">如果是扫描数据对下次查询没有帮助，则可以设置scan的setCacheBlocks为false，避免使用缓存；</span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="color:rgb(0,0,0);font-size:16px;">6.table用完需关闭，关闭scanner</span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="color:rgb(0,0,0);font-size:16px;">7.限定扫描范围：指定列簇或者指定要查询的列，指定startRow和endRow</span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="color:rgb(0,0,0);font-size:16px;">8.使用Filter可大量减少网络消耗</span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="color:rgb(0,0,0);font-size:16px;">9.通过Java多线程入库和查询，并控制超时时间。后面会共享下我的hbase单机多线程入库的代码</span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="color:rgb(0,0,0);font-size:16px;">10.建表注意事项：</span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="color:rgb(0,0,0);font-size:16px;">开启压缩</span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="color:rgb(0,0,0);font-size:16px;">合理的设计rowkey</span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="color:rgb(0,0,0);font-size:16px;">进行预分区</span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="color:rgb(0,0,0);font-size:16px;">开启bloomfilter</span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><br></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="font-size:16px;"><span><span style="color:rgb(0,0,0);">ZooKeeper调优</span></span></span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="color:rgb(0,0,0);font-size:16px;">1.zookeeper.session.timeout：默认值3分钟，不可配置太短，避免session超时，hbase停止服务，线上生产环境由于配置为1分钟，如果太长，当regionserver挂掉，zk还得等待这个超时时间(已有patch修复)，从而导致master不能及时对region进行迁移。</span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="color:rgb(0,0,0);font-size:16px;">2.zookeeper数量：建议5个或者7个节点。给每个zookeeper 4G左右的内存，最好有独立的磁盘。</span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="color:rgb(0,0,0);font-size:16px;">3.hbase.zookeeper.property.maxClientCnxns：zk的最大连接数，默认为300，无需调整。</span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="color:rgb(0,0,0);font-size:16px;">4.设置操作系统的swappiness为0，则在物理内存不够的情况下才会使用交换分区，避免GC回收时会花费更多的时间，当超过zk的session超时时间则会出现regionserver宕机的误报</span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><br></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="font-size:16px;"><span><span style="color:rgb(0,0,0);">HDFS调优</span></span></span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="color:rgb(0,0,0);font-size:16px;">1.dfs.name.dir：namenode的数据存放地址，可以配置多个，位于不同的磁盘并配置一个nfs远程文件系统，这样namenode的数据可以有多个备份</span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="color:rgb(0,0,0);font-size:16px;">2.dfs.namenode.handler.count：namenode节点RPC的处理线程数，默认为10，可以设置为60</span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="color:rgb(0,0,0);font-size:16px;">3.dfs.datanode.handler.count：datanode节点RPC的处理线程数，默认为3，可以设置为30</span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="color:rgb(0,0,0);font-size:16px;">4.dfs.datanode.max.xcievers：datanode同时处理文件的上限，默认为256，可以设置为8192</span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><br></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="font-size:16px;"><span><span style="color:rgb(0,0,0);">其他</span></span></span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="color:rgb(0,0,0);font-size:16px;">列族名、column名、rowkey均会存储到hfile中，因此这几项在设计表结构时都尽量短些</span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><span style="color:rgb(0,0,0);font-size:16px;">regionserver的region数量不要过1000，过多的region会导致产生很多memstore，可能会导致内存溢出，也会增加major compact的耗时</span></p><p style="font-size:14px;color:rgb(160,160,160);line-height:1.8;min-height:1em;clear:both;"><br></p><p style="min-height:1em;clear:both;"><span style="line-height:28.8px;font-size:14px;">来源：http://blog.csdn.NET/odailidong/article/details/41794403</span></p></div></div></div>            </div>
                </div>