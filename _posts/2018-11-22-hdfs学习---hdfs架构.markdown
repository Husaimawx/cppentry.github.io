---
layout:     post
title:      hdfs学习---hdfs架构
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<div><span style="font-family:Tahoma;font-size:14px;">      hdfs是hadoop开源项目的一部分，实际上是google分布式文件系统GFS的开源实现。</span>
<div style="font-family:Tahoma;font-size:14px;">      一、hdfs的主要特点</div>
<div style="font-family:Tahoma;font-size:14px;">           1、<span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">硬件错误是常态，而非异常情况，</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">HDFS</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">可能是有成百上千的</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">server</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">组成，任何一个组件都有可能一直失效，因此错误检测和快速、自动的恢复是</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">HDFS</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">的核心架构目标。 </span></span></div>
<div style="font-family:Tahoma;font-size:14px;"><span style="font-family:SimSun;">      2、</span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">跑在</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">HDFS</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">上的应用与一般的应用不同，它们主要是以流式读为主，做批量处理；比之关注数据访问的低延迟问题，更关键的在于数据访问的高吞吐量。 </span></span></div>
<div style="font-family:Tahoma;font-size:14px;"><span style="font-family:SimSun;">      3、</span><span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">HDFS</span></span> <span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">以支持大数据集合为目标，一个存储在上面的典型文件大小一般都在千兆至</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">T</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">字节，一个单一</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">HDFS</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">实例应该能支撑数以千万计的文件。 </span></span></div>
<div style="font-family:Tahoma;font-size:14px;"><span style="font-family:SimSun;">      4、</span><span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">HDFS</span></span> <span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">应用对文件要求的是</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">write-one-read-many</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">访问模型。一个文件经过创建、写，关闭之后就不需要改变。这一假设简化了数据一致性问题，使高吞吐量的数据访问成为可能。典型的如</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">MapReduce</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">框架，或者一个</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">web
 crawler</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">应用都很适合这个模型。 </span></span></div>
<div style="font-family:Tahoma;font-size:14px;"><span style="font-family:SimSun;">      5、</span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">移动计算的代价比之移动数据的代价低。一个应用请求的计算，离它操作的数据越近就越高效，这在数据达到海量级别的时候更是如此。将计算移动到数据附近，比之将数据移动到应用所在显然更好，</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">HDFS</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">提供给应用这样的接口。 </span></span></div>
<div style="font-family:Tahoma;font-size:14px;"><span style="font-family:SimSun;">    二、hdfs的架构组织</span></div>
<div style="font-family:Tahoma;font-size:14px;"><span style="font-family:SimSun;">       整体架构图如下：</span></div>
<div style="font-family:Tahoma;font-size:14px;"><span style="font-family:SimSun;">               <img src="https://img-blog.csdn.net/20130723101337187?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveG1hbl8yMDA5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="437" height="302" alt=""></span></div>
<div style="font-family:Tahoma;font-size:14px;">          <span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">一个</span></span><span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">HDFS</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">集群是有一个</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">Namenode</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">和一定数目的</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">Datanode</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">组成。</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">Namenode</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">是一个中心服务器，负责管理文件系统的</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">namespace</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">和客户端对文件的访问。</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">Datanode</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">在集群中一般是一个节点一个，负责管理节点上它们附带的存储。在内部，一个文件其实分成一个或多个</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">block</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">，这些</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">block</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">存储在</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">Datanode</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">集合里。</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">Namenode</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">执行文件系统的</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">namespace</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">操作，例如打开、关闭、重命名文件和目录，同时决定</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">block</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">到具体</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">Datanode</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">节点的映射。</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">Datanode</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">在</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">Namenode</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">的指挥下进行</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">block</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">的创建、删除和复制。</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">Namenode</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">和</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">Datanode</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">都是设计成可以跑在普通的廉价的运行</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">linux</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">的机器上。</span></span></div>
<div style="font-family:Tahoma;font-size:14px;"><span style="font-family:SimSun;">     namenode</span><span style="font-family:SimSun;font-size:10pt;">用来管理文件系统的命名空间，</span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">其将所有的文件和文件夹的元数据保存在一个文件系统树中。</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">这些信息也会在硬盘上保存成以下文件：命名空间镜像</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">(namespace
 image)</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">及修改日志</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">(edit log) 。</span></span><span style="font-family:SimSun;font-size:10pt;">其还保存了一个文件包括哪些数据块，分布在哪些数据节点上。然而这些信息并不存储在硬盘上，而是在系统启动的时候从数据节点收集而成的。 </span></div>
<div style="font-family:Tahoma;font-size:14px;"><span style="font-family:SimSun;">     </span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">数据节点是文件系统中真正存储数据的地方。</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">客户端</span></span><span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">(client)</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">或者名字节点</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">(namenode)</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">可以向数据节点请求写入或者读出数据块。数据节点</span></span><span style="font-size:10pt;font-family:SimSun;">其周期性的向名字节点回报其存储的数据块信息。</span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">从名字节点</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">(secondary
 namenode)</span></span><span style="font-size:10pt;font-family:SimSun;">并不是名字节点出现问题时候的备用节点，它和名字节点负责不同的事情。</span><span style="font-size:10pt;font-family:SimSun;">其主要功能就是周期性将名字节点的命名空间镜像文件和修改日志合并，以防日志文件过大。</span></div>
<div style="font-family:Tahoma;font-size:14px;"><span style="font-family:SimSun;">     三、数据流</span></div>
<div style="font-family:Tahoma;font-size:14px;"><span style="font-family:SimSun;">          1、读数据     </span></div>
<div style="font-family:Tahoma;font-size:14px;"><span style="font-family:SimSun;">          </span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">客户端</span></span><span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">(client)</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">用</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">FileSystem</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">的</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">open()</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">函数打开文件，</span></span><span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">DistributedFileSystem</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">用</span></span><span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">RPC</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">调名字节点，得到文件的数据块信息。</span></span></div>
<div align="left" style="font-family:Tahoma;font-size:14px;">
<span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">对于每一个数据块，名字节点返回保存数据块的数据节点的地址。</span></span><span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">DistributedFileSystem</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">返回</span></span><span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">FSDataInputStream</span></span> <span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">给客户端，用来读取数据。</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">客户端调用</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">stream</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">的</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">read()</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">函数开始读取数据。</span></span><span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">DFSInputStream</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">连接保存此文件第一个数据块的最近的数据节点。</span></span><span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">Data</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">从数据节点读到客户端</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">(client)，</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">当此数据块读取完毕时，</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">DFSInputStream</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">关闭和此数据节点的连接，然后连接此文件下一个数据块的最近的数据节点。</span></span></div>
<div align="left" style="font-family:Tahoma;font-size:14px;">
<span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">当客户端读取完毕数据的时候，调用</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">FSDataInputStream</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">的</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">close</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">函数。</span></span><span style="font-size:10pt;font-family:SimSun;">在读取数据的过程中，如果客户端在与数据节点通信出现错误，则尝试连接包含此数据</span><span style="font-size:10pt;font-family:SimSun;">块的下一个数据节点</span><span style="font-family:SimSun;font-size:10pt;">。</span><span style="font-size:10pt;font-family:SimSun;">失败的数据节点将被记录，以后不再连接。如下图</span></div>
<div align="left" style="font-family:Tahoma;font-size:14px;">
<span style="font-family:SimSun;">          </span><img src="" alt=""><img src="https://img-blog.csdn.net/20130723101529468?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveG1hbl8yMDA5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="308" height="184" alt=""><div></div>
<div></div>
</div>
<div align="left" style="font-family:Tahoma;font-size:14px;">
<span style="font-family:SimSun;">          2、写数据</span></div>
<div align="left" style="font-family:Tahoma;font-size:14px;">
<span style="font-family:SimSun;">          </span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">客户端调用</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">create()</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">来创建文件，</span></span><span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">DistributedFileSystem</span></span><span style="font-family:SimSun;font-size:12px;"> <span style="font-size:10pt;">用</span></span><span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">RPC</span></span><span style="font-family:SimSun;font-size:12px;"> <span style="font-size:10pt;">调用名字节点，在文件系统的命名空间中创建一个新的文件。</span></span></div>
<div align="left" style="font-family:Tahoma;font-size:14px;">
<span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">名字节点首先确定文件原来不存在，并且客户端有创建文件的权限，然后创建新文件。</span></span><span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">DistributedFileSystem</span></span><span style="font-family:SimSun;font-size:12px;"> <span style="font-size:10pt;">返回</span></span><span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">DFSOutputStream</span></span> <span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">，客户端用于写数据。</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">客户端开始写入数据，</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">DFSOutputStream</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">将数据分成块，写入</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">data
 queue</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">。</span></span><span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">Data queue</span></span><span style="font-family:SimSun;font-size:12px;"> <span style="font-size:10pt;">由</span></span><span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">Data
 Streamer</span></span> <span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">读取，并通知名字节点分配数据节点，用来存储数据块</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">(</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">每块默认复制</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">3</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">块</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">)</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">。</span></span></div>
<div align="left" style="font-family:Tahoma;font-size:14px;">
<span style="font-family:SimSun;">          </span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">分配的数据节点放在一个</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">pipeline</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">里。 </span></span><span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">Data
 Streamer</span></span><span style="font-family:SimSun;font-size:12px;"> <span style="font-size:10pt;">将数据块写入</span></span><span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">pipeline</span></span> <span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">中的第一个数据节点。第一个数据节点将数据块发送给第二个数据节点。第二个数据节点将数据发送给第三个数据节点。</span></span><span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">DFSOutputStream</span></span><span style="font-family:SimSun;font-size:12px;"> <span style="font-size:10pt;">为发出去的数据块保存了</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">ack
 queue</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">，等待</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">pipeline</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">中的数据节点告知数据已经写入成功。</span></span><span style="font-size:10pt;font-family:SimSun;">如果数据节点在写入的过程中失败：</span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">关闭</span></span><span style="font-family:Verdana;font-size:12px;"> <span style="font-size:10pt;">pipeline</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">，将</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">ack
 queue</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">中的数据块放入</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">data queue</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">的开始。</span></span><span style="font-size:10pt;font-family:SimSun;">当前的数据块在已经写入的数据节点中被名字节点赋予新的标示，则错误节点重启后能够察觉其数据块是过时的，会被删除。</span></div>
<div align="left" style="font-family:Tahoma;font-size:14px;">
<span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">失败的数据节点从</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">pipeline</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">中移除，另外的数据块则写入</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">pipeline</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">中的另外两个数据节点。名字</span></span><span style="font-size:10pt;font-family:SimSun;">节点则被通知此数据块是复制块数不足，将来会再创建第三份备份。</span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">当客户端结束写入数据，则调用</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">stream</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">的</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">close</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">函数。此操作将所有的数据块写入</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">pipeline</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">中的数据节点，并等待</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">ack
 queue</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">返回成功。最后通知元数据节点写入完毕。 如下图：</span></span></div>
<div align="left" style="font-family:Tahoma;font-size:14px;">
<span style="font-family:SimSun;">          </span><img src="" alt=""><img src="https://img-blog.csdn.net/20130723101631171?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveG1hbl8yMDA5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="307" height="184" alt=""></div>
<div align="left" style="font-family:Tahoma;font-size:14px;">
          3、文件复制</div>
<div align="left" style="font-family:Tahoma;font-size:14px;">
               <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">1</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">、副本的存放，副本的存放是</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">HDFS</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">可靠性和性能的关键。</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">HDFS</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">采用一种称为</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">rack-aware</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">的策略来改进数据的可靠性、有效性和网络带宽的利用。这个策略实现的短期目标是验证在生产环境下的表现，观察它的行为，构建测试和研究的基础，以便实现更先进的策略。庞大的</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">HDFS</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">实例一般运行在多个机架的计算机形成的集群上，不同机架间的两台机器的通讯需要通过交换机，显然通常情况下，同一个机架内的两个节点间的带宽会比不同机架间的两台机器的带宽大。</span></span></div>
<div align="left" style="font-family:Tahoma;font-size:14px;">
<span style="font-family:SimSun;">          </span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">通过一个称为</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">Rack Awareness</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">的过程，</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">Namenode</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">决定了每个</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">Datanode</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">所属的</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">rack
 id</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">。一个简单但没有优化的策略就是将副本存放在单独的机架上。这样可以防止整个机架（非副本存放）失效的情况，并且允许读数据的时候可以从多个机架读取。这个简单策略设置可以将副本分布在集群中，有利于组件失败情况下的负载均衡。但是，这个简单策略加大了写的代价，因为一个写操作需要传输</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">block</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">到多个机架。</span></span></div>
<div align="left" style="font-family:Tahoma;font-size:14px;">
<span style="font-family:SimSun;">          </span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">在大多数情况下，</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">replication</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">因子是</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">3</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">，</span></span> <span style="font-family:Verdana;font-size:12px;"><span style="font-size:10pt;">HDFS</span></span><span style="font-family:SimSun;font-size:12px;"><span style="font-size:10pt;">的存放策略是将一个副本存放在本地机架上的节点，一个副本放在同一机架上的另一个节点，最后一个副本放在不同机架上的一个节点。机架的错误远远比节点的错误少，这个策略不会影响到数据的可靠性和有效性。三分之一的副本在一个节点上，三分之二在一个机架上，其他保存在剩下的机架中，这一策略改进了写的性能。 </span></span></div>
<div align="left" style="font-family:Tahoma;font-size:14px;">
<span style="font-family:SimSun;">     四、其他特性</span></div>
<div align="left" style="font-family:Tahoma;font-size:14px;">
<span style="font-family:SimSun;">        1、流水线复制</span></div>
<div align="left" style="font-family:Tahoma;font-size:14px;">
<span style="font-family:SimSun;">        2、通信协议构建在tcp/ip协议之上</span></div>
<div align="left" style="font-family:Tahoma;font-size:14px;">
<span style="font-family:SimSun;">        3、多种访问数据方式</span></div>
<div align="left" style="font-family:Tahoma;font-size:14px;">
<span style="font-family:SimSun;">        4、关于文件删除机制</span></div>
<div align="left" style="font-family:Tahoma;font-size:14px;">
<span style="font-family:SimSun;">     更多相关细节参照google GFS论文</span></div>
</div>
<br>            </div>
                </div>