---
layout:     post
title:      Flume的介绍及入门案例
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/qq_33689414/article/details/80034933				</div>
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<h3 id="flume的介绍及入门案例">Flume的介绍及入门案例</h3>



<h4 id="一flume介绍">一、Flume介绍</h4>

<p>Flume是一个分布式、可靠、高可用的海量日志采集、聚合和传输的系统。Flume可以采集文件，socket数据包等各种形式源数据，又可以将采集到的数据输出到HDFS，Hbase,hive,kafka等众多外部存储系统中。</p>

<ul>
<li><strong>运行机制</strong></li>
</ul>

<p>Flume分布式系统中最核心的角色是<code>agent</code>，Flume采集系统就是由一个个<code>agent</code>所连接起来形成的。</p>

<p>每一个<code>agent</code>中，内部有<strong>三个组件</strong>：</p>

<p><strong>Source</strong>：采集源，用于跟数据源对接，以获取数据。</p>

<p><strong>Sink</strong>：下沉地，采集数据的传送目的，用于往下一级agent传递数据或者传递给存储系统</p>

<p><strong>Channel</strong>：agent内部的数据传输通道，用于从source将数据传递到Sink。</p>

<p><img src="https://raw.githubusercontent.com/zhang3550545/image_center/master/image-2018/Flume-1.png" alt="image" title=""></p>

<ul>
<li><strong>agent多级串联</strong></li>
</ul>

<p>除此之外，<strong>agent</strong>还可以进行<strong>多级串联</strong>使用，如下图：</p>

<p><img src="https://raw.githubusercontent.com/zhang3550545/image_center/master/image-2018/Flume2.png" alt="image" title=""></p>



<h4 id="二flume安装和配置文件">二、Flume安装和配置文件</h4>

<ul>
<li>下载</li>
</ul>

<p>进行Flume的下载页面，选择对应的版本进行下载即可。</p>

<p>下载地址：</p>

<blockquote>
  <p><a href="http://flume.apache.org/download.html" rel="nofollow">http://flume.apache.org/download.html</a></p>
</blockquote>

<p>下载相应的apache-flume-x.x.x-bin.tar.gz包</p>

<ul>
<li>解压安装</li>
</ul>

<p>解压安装包：</p>

<blockquote>
  <p>tar -zxvf apache-flume-x.x.x-bin.tar.gz</p>
</blockquote>

<ul>
<li>修改配置文件</li>
</ul>

<p>进入到解压后的flume目录下的conf目录，修改<code>flume-env.sh</code>中的<code>JAVA_HOME</code>配置，改为绝对路径。</p>



<pre class="prettyprint"><code class=" hljs bash"><span class="hljs-keyword">export</span> JAVA_HOME=/java/jdk1.<span class="hljs-number">8.0</span>_161</code></pre>



<h4 id="三flume的入门使用案例之logger输出">三、Flume的入门使用案例之logger输出</h4>

<ol>
<li>创建一个flume-first.conf文件，配置flume的agent的信息</li>
</ol>

<p>在flume的conf目录下，使用 <br>
<code>vim flume-first.conf</code>创建并编辑文件。具体内容如下：</p>



<pre class="prettyprint"><code class=" hljs vala"><span class="hljs-preprocessor"># 定义这个agent中各组件的名字，其中a1表示agent的名称</span>
a1.sources = r1
a1.sinks = k1
a1.channels = c1


<span class="hljs-preprocessor"># 描述和配置source组件：r1</span>
<span class="hljs-preprocessor"># a1.sources.r1.type表示source源的类型</span>
<span class="hljs-preprocessor"># 常用type的类型有：</span>
<span class="hljs-preprocessor">#       netcat：监听一个指定端口，并将接收到的数据的每一行转换为一个事件</span>
<span class="hljs-preprocessor">#       avro：接受avro序列化数据</span>
<span class="hljs-preprocessor">#       exec：命令输出作为源</span>
<span class="hljs-preprocessor">#       spooldir：监视该目录，并将解析新文件的出现</span>
<span class="hljs-preprocessor"># </span>
<span class="hljs-preprocessor"># 每一种type，对应的配置信息不一样。</span>

a1.sources.r1.type = netcat
<span class="hljs-preprocessor"># source源绑定的主机名</span>
a1.sources.r1.bind = localhost
<span class="hljs-preprocessor"># source源绑定的端口</span>
a1.sources.r1.port = <span class="hljs-number">44444</span>


<span class="hljs-preprocessor"># 描述和配置sink组件：k1</span>
<span class="hljs-preprocessor"># a1.sinks.k1.type表示sink下沉地的类型</span>
<span class="hljs-preprocessor"># type的类型有很多：</span>
<span class="hljs-preprocessor">#       logger:表示logger输出</span>
<span class="hljs-preprocessor">#       hdfs:表示输出到hdfs</span>
<span class="hljs-preprocessor">#       hive:表示输出到hive</span>
<span class="hljs-preprocessor">#       avro：表示avro序列化输出</span>
<span class="hljs-preprocessor">#       file_roll：文件</span>
<span class="hljs-preprocessor">#       null：表示不用sink</span>
<span class="hljs-preprocessor">#       kafaka：表示输出到kafka</span>
<span class="hljs-preprocessor"># </span>
<span class="hljs-preprocessor"># 每一种sink的type，会对应一些type类型的配置信息。这里就不详细解释了。</span>

<span class="hljs-preprocessor"># 表示logger输出</span>
a1.sinks.k1.type = logger


<span class="hljs-preprocessor"># 描述和配置channel组件</span>
<span class="hljs-preprocessor"># a1.channels.c1.type表示channel的类型</span>
<span class="hljs-preprocessor"># 常用的type有：</span>
<span class="hljs-preprocessor">#       memony：event数据存储在内存中</span>
<span class="hljs-preprocessor">#       file：event数据存储在file中</span>
<span class="hljs-preprocessor">#       kafka：event数据存储在kafka中</span>
<span class="hljs-preprocessor">#</span>
<span class="hljs-preprocessor"># 每一种type对应的配置不一样</span>

<span class="hljs-preprocessor"># channel使用内存储存</span>
a1.channels.c1.type = memory
<span class="hljs-preprocessor"># channel的容量大小</span>
a1.channels.c1.capacity = <span class="hljs-number">1000</span>
<span class="hljs-preprocessor"># channel每一次提交的event数量</span>
a1.channels.c1.transactionCapacity = <span class="hljs-number">100</span>


<span class="hljs-preprocessor"># 描述和配置source  channel   sink之间的连接关系</span>
a1.sources.r1.channels = c1
a1.sinks.k1.channel = c1</code></pre>

<p>这个配置信息，source–channel–sink是一对一的关系，可以通过定义多个source，channel，sink。进行描述多对多的指定。</p>

<ol>
<li>指定flume使用flume-first.conf配置进行启动</li>
</ol>



<pre class="prettyprint"><code class=" hljs vala"><span class="hljs-preprocessor"># 指令参数介绍</span>
<span class="hljs-preprocessor"># -c：表示指定flume自身配置文件所在目录</span>
<span class="hljs-preprocessor"># -f：表示flume执行的配置文件</span>
<span class="hljs-preprocessor"># -n：表示agent的名称，和配置文件中的一致</span>
<span class="hljs-preprocessor"># -Dflume.root.logger=INFO,console：输出INFO级别信息到控制台</span>

bin/flume-ng agent -c conf -f conf/flume-first.conf -n a1  -Dflume.root.logger=INFO,console</code></pre>

<ol>
<li>测试</li>
</ol>

<p>在另外一个窗口使用<code>telnet</code>命令进行测试</p>

<p>端口号是44444，在配置文件中指定</p>

<blockquote>
  <p>telnet 127.0.0.1 44444</p>
</blockquote>

<p>如图：</p>

<p><img src="https://raw.githubusercontent.com/zhang3550545/image_center/master/image-2018/Flume-3.png" alt="image" title=""></p>

<p>如果没有telnet命令。可以使用yum安装一下：</p>

<blockquote>
  <p>yum -y install telnet</p>
</blockquote>

<hr>



<h4 id="四flume的入门使用案例之hdfs输出">四、Flume的入门使用案例之HDFS输出</h4>

<ol>
<li>在flume的conf目录下，创建一个flume-hdfs.conf的配置文件，文件内容如下：</li>
</ol>



<pre class="prettyprint"><code class=" hljs avrasm"><span class="hljs-preprocessor">#定义三大组件的名称</span>
a1<span class="hljs-preprocessor">.sources</span> = source1
a1<span class="hljs-preprocessor">.sinks</span> = sink1
a1<span class="hljs-preprocessor">.channels</span> = channel1


<span class="hljs-preprocessor"># 配置source组件</span>
<span class="hljs-preprocessor"># type指定为spooldir</span>
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.source</span>1<span class="hljs-preprocessor">.type</span> = spooldir
<span class="hljs-preprocessor"># 设置监视的spooldir目录</span>
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.source</span>1<span class="hljs-preprocessor">.spoolDir</span> = /home/hadoop/logs/
<span class="hljs-preprocessor"># 是否添加存储绝对路径文件名的头文件，默认false</span>
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.source</span>1<span class="hljs-preprocessor">.fileHeader</span> = false


<span class="hljs-preprocessor"># 配置拦截器</span>
<span class="hljs-preprocessor"># flume提供了一些拦截器，如host,timestmap,static,regex_filter等       </span>
<span class="hljs-preprocessor"># 过滤器是在source的内容的header字段中添加信息，进行过滤或分区等处理</span>
<span class="hljs-preprocessor">#</span>
<span class="hljs-preprocessor"># 添加拦截器 </span>
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.source</span>1<span class="hljs-preprocessor">.interceptors</span> = i1
<span class="hljs-preprocessor"># 设置拦截器类型</span>
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.source</span>1<span class="hljs-preprocessor">.interceptors</span><span class="hljs-preprocessor">.i</span>1<span class="hljs-preprocessor">.type</span> = host
<span class="hljs-preprocessor"># 设置host是hostname</span>
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.source</span>1<span class="hljs-preprocessor">.interceptors</span><span class="hljs-preprocessor">.i</span>1<span class="hljs-preprocessor">.hostHeader</span> = hostname
<span class="hljs-preprocessor"># 如果将useIP设置为false,则默认使用hostname，设置true，name使用IP</span>
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.source</span>1<span class="hljs-preprocessor">.interceptors</span><span class="hljs-preprocessor">.i</span>1<span class="hljs-preprocessor">.useIP</span>=false


<span class="hljs-preprocessor"># 配置sink组件</span>
<span class="hljs-preprocessor">#</span>
<span class="hljs-preprocessor"># sink 类型设置hdfs</span>
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.sink</span>1<span class="hljs-preprocessor">.type</span> = hdfs
<span class="hljs-preprocessor"># hdfs输出路径</span>
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.sink</span>1<span class="hljs-preprocessor">.hdfs</span><span class="hljs-preprocessor">.path</span> = /weblog/flume-log/%<span class="hljs-built_in">y</span>-%m-%d/%H-%M
<span class="hljs-preprocessor"># 文件前缀</span>
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.sink</span>1<span class="hljs-preprocessor">.hdfs</span><span class="hljs-preprocessor">.filePrefix</span> = access_log
<span class="hljs-preprocessor"># 最大允许打开的HDFS文件数，当打开的文件数达到该值，最早打开的文件将会被关闭，默认5000</span>
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.sink</span>1<span class="hljs-preprocessor">.hdfs</span><span class="hljs-preprocessor">.maxOpenFiles</span> = <span class="hljs-number">5000</span>
<span class="hljs-preprocessor"># 每个批次刷新到HDFS上的events数量，默认100</span>
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.sink</span>1<span class="hljs-preprocessor">.hdfs</span><span class="hljs-preprocessor">.batchSize</span>= <span class="hljs-number">100</span>
<span class="hljs-preprocessor"># 文件格式，包括：SequenceFile, DataStream,CompressedStream，当使用CompressedStream时候，必须设置一个正确的hdfs.codeC值</span>
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.sink</span>1<span class="hljs-preprocessor">.hdfs</span><span class="hljs-preprocessor">.fileType</span> = DataStream
<span class="hljs-preprocessor"># 输出格式</span>
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.sink</span>1<span class="hljs-preprocessor">.hdfs</span><span class="hljs-preprocessor">.writeFormat</span> =Text
<span class="hljs-preprocessor"># 当临时文件达到该大小（单位：bytes）时，滚动成目标文件，默认1024，单位byte，如果设置成0，则表示不根据临时文件大小来滚动文件</span>
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.sink</span>1<span class="hljs-preprocessor">.hdfs</span><span class="hljs-preprocessor">.rollSize</span> = <span class="hljs-number">1024</span>
<span class="hljs-preprocessor"># 当events数据达到该数量时候，将临时文件滚动成目标文件，默认10，如果设置成0，则表示不根据临时文件大小来滚动文件</span>
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.sink</span>1<span class="hljs-preprocessor">.hdfs</span><span class="hljs-preprocessor">.rollCount</span> = <span class="hljs-number">10</span>
<span class="hljs-preprocessor"># hdfs sink间隔多长将临时文件滚动成最终目标文件，单位：秒。如果设置成0，则表示不根据时间来滚动文件</span>
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.sink</span>1<span class="hljs-preprocessor">.hdfs</span><span class="hljs-preprocessor">.rollInterval</span> = <span class="hljs-number">60</span>
<span class="hljs-preprocessor"># 是否启用时间上的"舍弃"，这里的"舍弃"，类似于四舍五入，如果启用，则会影响除了%t的其他所有时间表达式。默认false。</span>
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.sink</span>1<span class="hljs-preprocessor">.hdfs</span><span class="hljs-preprocessor">.round</span> = true
<span class="hljs-preprocessor"># 时间上进行“舍弃”的值，默认1</span>
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.sink</span>1<span class="hljs-preprocessor">.hdfs</span><span class="hljs-preprocessor">.roundValue</span> = <span class="hljs-number">10</span>
<span class="hljs-preprocessor"># 时间上进行”舍弃”的单位，包含：second,minute,hour，默认second</span>
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.sink</span>1<span class="hljs-preprocessor">.hdfs</span><span class="hljs-preprocessor">.roundUnit</span> = minute
<span class="hljs-preprocessor"># 是否使用当地时间，默认false</span>
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.sink</span>1<span class="hljs-preprocessor">.hdfs</span><span class="hljs-preprocessor">.useLocalTimeStamp</span> = true


<span class="hljs-preprocessor"># Channel使用类型memony</span>
a1<span class="hljs-preprocessor">.channels</span><span class="hljs-preprocessor">.channel</span>1<span class="hljs-preprocessor">.type</span> = memory
a1<span class="hljs-preprocessor">.channels</span><span class="hljs-preprocessor">.channel</span>1<span class="hljs-preprocessor">.keep</span>-alive = <span class="hljs-number">120</span>
a1<span class="hljs-preprocessor">.channels</span><span class="hljs-preprocessor">.channel</span>1<span class="hljs-preprocessor">.capacity</span> = <span class="hljs-number">50000</span>
a1<span class="hljs-preprocessor">.channels</span><span class="hljs-preprocessor">.channel</span>1<span class="hljs-preprocessor">.transactionCapacity</span> = <span class="hljs-number">600</span>

<span class="hljs-preprocessor"># source channel sink之间的绑定</span>
a1<span class="hljs-preprocessor">.sources</span><span class="hljs-preprocessor">.source</span>1<span class="hljs-preprocessor">.channels</span> = channel1
a1<span class="hljs-preprocessor">.sinks</span><span class="hljs-preprocessor">.sink</span>1<span class="hljs-preprocessor">.channel</span> = channel1</code></pre>

<ol>
<li>启动flume</li>
</ol>



<pre class="prettyprint"><code class=" hljs lasso">bin/flume<span class="hljs-attribute">-ng</span> agent <span class="hljs-attribute">-c</span> conf <span class="hljs-attribute">-f</span> conf/flume<span class="hljs-attribute">-hdfs</span><span class="hljs-built_in">.</span>conf <span class="hljs-attribute">-n</span> a1  <span class="hljs-attribute">-Dflume</span><span class="hljs-built_in">.</span>root<span class="hljs-built_in">.</span>logger<span class="hljs-subst">=</span>INFO,console</code></pre>

<ol>
<li>查看结果：</li>
</ol>

<p><img src="https://raw.githubusercontent.com/zhang3550545/image_center/master/image-2018/Flume-4.png" alt="image" title=""></p>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>