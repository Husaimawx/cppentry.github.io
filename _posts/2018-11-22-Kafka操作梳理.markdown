---
layout:     post
title:      Kafka操作梳理
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/u010649766/article/details/76057855				</div>
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<h1 id="kafka操作梳理">Kafka操作梳理</h1>

<p></p><div class="toc"><div class="toc">
<ul>
<li><a href="#kafka%E6%93%8D%E4%BD%9C%E6%A2%B3%E7%90%86" rel="nofollow">Kafka操作梳理</a><ul>
<li><a href="#1%E5%AE%89%E8%A3%85jdk" rel="nofollow">1.安装JDK</a></li>
<li><a href="#2%E4%B8%8B%E8%BD%BDkafka" rel="nofollow">2.下载kafka</a></li>
<li><a href="#3%E5%90%AF%E5%8A%A8%E5%92%8C%E5%81%9C%E6%AD%A2" rel="nofollow">3.启动和停止</a><ul>
<li><a href="#%E5%90%AF%E5%8A%A8zookeeper-server" rel="nofollow">启动Zookeeper server：</a></li>
<li><a href="#%E5%90%AF%E5%8A%A8kafka-server" rel="nofollow">启动Kafka server:</a></li>
<li><a href="#%E5%81%9C%E6%AD%A2kafka-server" rel="nofollow">停止Kafka server：</a></li>
<li><a href="#%E5%81%9C%E6%AD%A2zookeeper-server" rel="nofollow">停止Zookeeper server:</a></li>
</ul>
</li>
<li><a href="#4%E5%8D%95%E6%9C%BA%E8%BF%9E%E9%80%9A%E6%80%A7%E6%B5%8B%E8%AF%95" rel="nofollow">4.单机连通性测试</a><ul>
<li><a href="#%E5%88%9B%E5%BB%BA-topic" rel="nofollow">创建 topic</a></li>
<li><a href="#%E6%9F%A5%E7%9C%8Btopic" rel="nofollow">查看topic</a></li>
<li><a href="#%E8%BF%90%E8%A1%8Cproducer" rel="nofollow">运行producer：</a></li>
<li><a href="#%E8%BF%90%E8%A1%8Cconsumer" rel="nofollow">运行consumer：</a></li>
<li><a href="#%E6%9F%A5%E7%9C%8B-kafka-%E6%B6%88%E8%B4%B9%E6%83%85%E5%86%B5" rel="nofollow">查看 kafka 消费情况：</a></li>
</ul>
</li>
<li><a href="#5%E5%88%86%E5%B8%83%E5%BC%8F%E8%BF%9E%E9%80%9A%E6%80%A7%E6%B5%8B%E8%AF%95" rel="nofollow">5.分布式连通性测试</a><ul>
<li><a href="#%E8%BF%90%E8%A1%8Cproducer-1" rel="nofollow">运行Producer:</a></li>
<li><a href="#%E8%BF%90%E8%A1%8Cconsumer-1" rel="nofollow">运行Consumer:</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>




<h2 id="1安装jdk">1.安装JDK</h2>



<pre class="prettyprint"><code class=" hljs lasso">sudo add<span class="hljs-attribute">-apt</span><span class="hljs-attribute">-repository</span> ppa:webupd8team/java
sudo apt<span class="hljs-attribute">-get</span> update
sudo apt<span class="hljs-attribute">-get</span> install oracle<span class="hljs-attribute">-java7</span><span class="hljs-attribute">-installer</span>
sudo apt<span class="hljs-attribute">-get</span> install oracle<span class="hljs-attribute">-java7</span><span class="hljs-attribute">-set</span><span class="hljs-attribute">-default</span></code></pre>

<p>如果你想安装<code>Java 8(i.e Java 1.8)</code>, 在上面的命令中用<code>java7</code>代替<code>java8</code>.</p>



<h2 id="2下载kafka">2.下载kafka</h2>

<p>进入下载页面：<a href="http://kafka.apache.org/downloads.html" rel="nofollow">http://kafka.apache.org/downloads.html</a></p>

<p>选择Binary downloads下载 （Source download需要编译才能使用）</p>



<h2 id="3启动和停止">3.启动和停止</h2>



<h3 id="启动zookeeper-server">启动Zookeeper server：</h3>



<pre class="prettyprint"><code class=" hljs avrasm">bin/zookeeper-server-start<span class="hljs-preprocessor">.sh</span> config/zookeeper<span class="hljs-preprocessor">.properties</span> &amp;  </code></pre>

<p>&amp;是为了能退出命令行</p>



<h3 id="启动kafka-server">启动Kafka server:</h3>



<pre class="prettyprint"><code class=" hljs axapta">bin/kafka-<span class="hljs-keyword">server</span>-start.sh config/<span class="hljs-keyword">server</span>.properties &amp; </code></pre>



<h3 id="停止kafka-server">停止Kafka server：</h3>



<pre class="prettyprint"><code class=" hljs vbscript">bin/kafka-<span class="hljs-built_in">server</span>-<span class="hljs-keyword">stop</span>.sh </code></pre>



<h3 id="停止zookeeper-server">停止Zookeeper server:</h3>



<pre class="prettyprint"><code class=" hljs vbscript">bin/zookeeper-<span class="hljs-built_in">server</span>-<span class="hljs-keyword">stop</span>.sh </code></pre>



<h2 id="4单机连通性测试">4.单机连通性测试</h2>



<h3 id="创建-topic">创建 topic</h3>

<p>创建一个叫做“test”的topic，它只有一个分区，一个副本。</p>



<pre class="prettyprint"><code class=" hljs brainfuck"><span class="hljs-comment">bin/kafka</span><span class="hljs-literal">-</span><span class="hljs-comment">topics</span><span class="hljs-string">.</span><span class="hljs-comment">sh</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">create</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">zookeeper</span> <span class="hljs-comment">localhost:2181</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">replication</span><span class="hljs-literal">-</span><span class="hljs-comment">factor</span> <span class="hljs-comment">1</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">partitions</span> <span class="hljs-comment">1</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">topic</span> <span class="hljs-comment">test</span></code></pre>



<h3 id="查看topic">查看topic</h3>



<pre class="prettyprint"><code class=" hljs brainfuck"><span class="hljs-comment">bin/kafka</span><span class="hljs-literal">-</span><span class="hljs-comment">topics</span><span class="hljs-string">.</span><span class="hljs-comment">sh</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">list</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">zookeeper</span> <span class="hljs-comment">localhost:2181</span></code></pre>



<pre class="prettyprint"><code class=" hljs brainfuck"><span class="hljs-comment">bin/kafka</span><span class="hljs-literal">-</span><span class="hljs-comment">topics</span><span class="hljs-string">.</span><span class="hljs-comment">sh</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">describe</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">zookeeper</span> <span class="hljs-comment">localhost:2181</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">topic</span> <span class="hljs-comment">test</span></code></pre>



<h3 id="运行producer">运行producer：</h3>



<pre class="prettyprint"><code class=" hljs lasso">bin/kafka<span class="hljs-attribute">-console</span><span class="hljs-attribute">-producer</span><span class="hljs-built_in">.</span>sh <span class="hljs-subst">--</span>broker<span class="hljs-attribute">-list</span> localhost:<span class="hljs-number">9092</span> <span class="hljs-subst">--</span>topic test  </code></pre>

<p>早版本的Kafka，–broker-list localhost:9092需改为–zookeeper localhost:2181</p>



<h3 id="运行consumer">运行consumer：</h3>



<pre class="prettyprint"><code class=" hljs brainfuck"><span class="hljs-comment">bin/kafka</span><span class="hljs-literal">-</span><span class="hljs-comment">console</span><span class="hljs-literal">-</span><span class="hljs-comment">consumer</span><span class="hljs-string">.</span><span class="hljs-comment">sh</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">zookeeper</span> <span class="hljs-comment">localhost:2181</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">from</span><span class="hljs-literal">-</span><span class="hljs-comment">beginning</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">topic</span> <span class="hljs-comment">test</span>  </code></pre>

<p>在producer端输入字符串并回车，查看consumer端是否显示。</p>



<h3 id="查看-kafka-消费情况">查看 kafka 消费情况：</h3>

<p><code> <br>
kafka-consumer-offset-checker.sh  --zookeeper localhost:2181--topic topicName  --group groupID  <br>
</code></p>

<ul>
<li>字段详情：</li>
</ul>

<table>
<thead>
<tr>
  <th>Group</th>
  <th>Topic</th>
  <th>Pid</th>
  <th>Offset</th>
  <th>logSize</th>
  <th>Lag</th>
</tr>
</thead>
<tbody><tr>
  <td>消费者组</td>
  <td>Topic ID</td>
  <td>Partition ID</td>
  <td>当前已消费的条数</td>
  <td>总条数</td>
  <td>未消费的条数</td>
</tr>
</tbody></table>




<h2 id="5分布式连通性测试">5.分布式连通性测试</h2>

<p>Zookeeper Server, Kafka Server, Producer都放在服务器server1上，ip地址为192.168.1.10</p>

<p>Consumer放在服务器server2上，ip地址为192.168.1.12。</p>

<p>分别运行server1的producer和server2的consumer</p>



<h3 id="运行producer-1">运行Producer:</h3>



<pre class="prettyprint"><code class=" hljs lasso">bin/kafka<span class="hljs-attribute">-console</span><span class="hljs-attribute">-producer</span><span class="hljs-built_in">.</span>sh <span class="hljs-subst">--</span>broker<span class="hljs-attribute">-list</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.10</span>:<span class="hljs-number">9092</span> <span class="hljs-subst">--</span>topic test</code></pre>



<h3 id="运行consumer-1">运行Consumer:</h3>



<pre class="prettyprint"><code class=" hljs brainfuck"><span class="hljs-comment">bin/kafka</span><span class="hljs-literal">-</span><span class="hljs-comment">console</span><span class="hljs-literal">-</span><span class="hljs-comment">consumer</span><span class="hljs-string">.</span><span class="hljs-comment">sh</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">zookeeper</span> <span class="hljs-comment">192</span><span class="hljs-string">.</span><span class="hljs-comment">168</span><span class="hljs-string">.</span><span class="hljs-comment">1</span><span class="hljs-string">.</span><span class="hljs-comment">10:2181</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">topic</span> <span class="hljs-comment">test</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">from</span><span class="hljs-literal">-</span><span class="hljs-comment">beginning</span>  </code></pre>

<p>在producer的console端输入字符串，consumer报Connection refused错误：</p>



<pre class="prettyprint"><code class=" hljs avrasm">Using the ConsoleConsumer with old consumer is deprecated <span class="hljs-keyword">and</span> will be removed <span class="hljs-keyword">in</span> a future major release. Consider using the new consumer by passing [bootstrap-server] instead of [zookeeper].
[<span class="hljs-number">2017</span>-<span class="hljs-number">07</span>-<span class="hljs-number">24</span> <span class="hljs-number">15</span>:<span class="hljs-number">50</span>:<span class="hljs-number">16</span>,<span class="hljs-number">777</span>] WARN Fetching topic metadata with correlation id <span class="hljs-number">0</span> for topics [<span class="hljs-keyword">Set</span>(test)] from broker [BrokerEndPoint(<span class="hljs-number">0</span>,shuzilm,<span class="hljs-number">9092</span>)] failed (kafka<span class="hljs-preprocessor">.client</span><span class="hljs-preprocessor">.ClientUtils</span>$)
java<span class="hljs-preprocessor">.nio</span><span class="hljs-preprocessor">.channels</span><span class="hljs-preprocessor">.ClosedChannelException</span>
    at kafka<span class="hljs-preprocessor">.network</span><span class="hljs-preprocessor">.BlockingChannel</span><span class="hljs-preprocessor">.send</span>(BlockingChannel<span class="hljs-preprocessor">.scala</span>:<span class="hljs-number">112</span>)
    at kafka<span class="hljs-preprocessor">.producer</span><span class="hljs-preprocessor">.SyncProducer</span><span class="hljs-preprocessor">.liftedTree</span>1$1(SyncProducer<span class="hljs-preprocessor">.scala</span>:<span class="hljs-number">80</span>)
    at kafka<span class="hljs-preprocessor">.producer</span><span class="hljs-preprocessor">.SyncProducer</span><span class="hljs-preprocessor">.kafka</span>$producer$SyncProducer$$doSend(SyncProducer<span class="hljs-preprocessor">.scala</span>:<span class="hljs-number">79</span>)
	at kafka<span class="hljs-preprocessor">.producer</span><span class="hljs-preprocessor">.SyncProducer</span><span class="hljs-preprocessor">.send</span>(SyncProducer<span class="hljs-preprocessor">.scala</span>:<span class="hljs-number">124</span>)
	at kafka<span class="hljs-preprocessor">.client</span><span class="hljs-preprocessor">.ClientUtils</span>$<span class="hljs-preprocessor">.fetchTopicMetadata</span>(ClientUtils<span class="hljs-preprocessor">.scala</span>:<span class="hljs-number">61</span>)
	at kafka<span class="hljs-preprocessor">.client</span><span class="hljs-preprocessor">.ClientUtils</span>$<span class="hljs-preprocessor">.fetchTopicMetadata</span>(ClientUtils<span class="hljs-preprocessor">.scala</span>:<span class="hljs-number">96</span>)
	at kafka<span class="hljs-preprocessor">.consumer</span><span class="hljs-preprocessor">.ConsumerFetcherManager</span>$LeaderFinderThread<span class="hljs-preprocessor">.doWork</span>(ConsumerFetcherManager<span class="hljs-preprocessor">.scala</span>:<span class="hljs-number">68</span>)
	at kafka<span class="hljs-preprocessor">.utils</span><span class="hljs-preprocessor">.ShutdownableThread</span><span class="hljs-preprocessor">.run</span>(ShutdownableThread<span class="hljs-preprocessor">.scala</span>:<span class="hljs-number">64</span>)
[<span class="hljs-number">2017</span>-<span class="hljs-number">07</span>-<span class="hljs-number">24</span> <span class="hljs-number">15</span>:<span class="hljs-number">50</span>:<span class="hljs-number">16</span>,<span class="hljs-number">793</span>] WARN [console-consumer-<span class="hljs-number">19332</span>_liujx-virtual-machine-<span class="hljs-number">1500882597887</span>-d5c624e6-leader-finder-thread]: Failed to find leader for <span class="hljs-keyword">Set</span>(test-<span class="hljs-number">0</span>) (kafka<span class="hljs-preprocessor">.consumer</span><span class="hljs-preprocessor">.ConsumerFetcherManager</span>$LeaderFinderThread)
<span class="hljs-label">kafka.common.KafkaException:</span> fetching topic metadata for topics [<span class="hljs-keyword">Set</span>(test)] from broker [ArrayBuffer(BrokerEndPoint(<span class="hljs-number">0</span>,shuzilm,<span class="hljs-number">9092</span>))] failed
	at kafka<span class="hljs-preprocessor">.client</span><span class="hljs-preprocessor">.ClientUtils</span>$<span class="hljs-preprocessor">.fetchTopicMetadata</span>(ClientUtils<span class="hljs-preprocessor">.scala</span>:<span class="hljs-number">75</span>)
	at kafka<span class="hljs-preprocessor">.client</span><span class="hljs-preprocessor">.ClientUtils</span>$<span class="hljs-preprocessor">.fetchTopicMetadata</span>(ClientUtils<span class="hljs-preprocessor">.scala</span>:<span class="hljs-number">96</span>)
	at kafka<span class="hljs-preprocessor">.consumer</span><span class="hljs-preprocessor">.ConsumerFetcherManager</span>$LeaderFinderThread<span class="hljs-preprocessor">.doWork</span>(ConsumerFetcherManager<span class="hljs-preprocessor">.scala</span>:<span class="hljs-number">68</span>)
	at kafka<span class="hljs-preprocessor">.utils</span><span class="hljs-preprocessor">.ShutdownableThread</span><span class="hljs-preprocessor">.run</span>(ShutdownableThread<span class="hljs-preprocessor">.scala</span>:<span class="hljs-number">64</span>)
Caused by: java<span class="hljs-preprocessor">.nio</span><span class="hljs-preprocessor">.channels</span><span class="hljs-preprocessor">.ClosedChannelException</span>
	at kafka<span class="hljs-preprocessor">.network</span><span class="hljs-preprocessor">.BlockingChannel</span><span class="hljs-preprocessor">.send</span>(BlockingChannel<span class="hljs-preprocessor">.scala</span>:<span class="hljs-number">112</span>)
	at kafka<span class="hljs-preprocessor">.producer</span><span class="hljs-preprocessor">.SyncProducer</span><span class="hljs-preprocessor">.liftedTree</span>1$1(SyncProducer<span class="hljs-preprocessor">.scala</span>:<span class="hljs-number">80</span>)
	at kafka<span class="hljs-preprocessor">.producer</span><span class="hljs-preprocessor">.SyncProducer</span><span class="hljs-preprocessor">.kafka</span>$producer$SyncProducer$$doSend(SyncProducer<span class="hljs-preprocessor">.scala</span>:<span class="hljs-number">79</span>)
    at kafka<span class="hljs-preprocessor">.producer</span><span class="hljs-preprocessor">.SyncProducer</span><span class="hljs-preprocessor">.send</span>(SyncProducer<span class="hljs-preprocessor">.scala</span>:<span class="hljs-number">124</span>)
    at kafka<span class="hljs-preprocessor">.client</span><span class="hljs-preprocessor">.ClientUtils</span>$<span class="hljs-preprocessor">.fetchTopicMetadata</span>(ClientUtils<span class="hljs-preprocessor">.scala</span>:<span class="hljs-number">61</span>)
    ... <span class="hljs-number">3</span> more</code></pre>

<p>broker, producer和consumer都注册到zookeeper上，producer和consumer的参数明确指定。问题出在broker的配置文件server.properties上：</p>



<pre class="prettyprint"><code class=" hljs vbscript">    # Hostname the broker will bind <span class="hljs-keyword">to</span>. <span class="hljs-keyword">If</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">set</span>, the <span class="hljs-built_in">server</span> will bind <span class="hljs-keyword">to</span> all interfaces  
    #host.name=localhost  </code></pre>

<p>host名称没有指定，就是127.0.0.1，consumer去broker拿数据就有问题。设置为192.168.1.10，重启服务就好了。</p>

<p><strong>Golang</strong></p>

<ul>
<li><p>Golang kafka 消费客户端使用异步生产接口实现，但是如果消息写入过快，会存在 Input() 和 Successes() 的阻塞问题造成死锁，所以尽量不要用 select 模型，而要使用 goroutine 模型实现，避免一个循环中一个管道阻塞，无法释放其他管道。</p></li>
<li><p>大量写 kafka 时 ，写 35000 条只有 9069 条成功，其他消息都会报此错误信息， 解决方法是加入 sleep(1*time.Nanosecond)</p>

<pre class="prettyprint"><code class=" hljs vbscript">kafka: Failed <span class="hljs-keyword">to</span> produce message <span class="hljs-keyword">to</span> topic test: kafka <span class="hljs-built_in">server</span>: Message was too large, <span class="hljs-built_in">server</span> rejected it <span class="hljs-keyword">to</span> avoid allocation <span class="hljs-keyword">error</span>.</code></pre></li>
</ul>

<p><strong>Python</strong></p>

<ul>
<li><p>timestamp字段，如果是 CreateTime 返回-1；如果是 LogAppendTime，返回写入该条消息时 broker 的本地时间， Kafka broker config 提供了一个参数：log.message.timestamp.type 来统一指定集群中的所有 topic 使用哪种时间戳类型。用户也可以为单个 topic 设置不同的时间戳类型，具体做法是创建 topic 时覆盖掉全局配置.</p>

<pre class="prettyprint"><code class=" hljs brainfuck"><span class="hljs-comment">bin/kafka</span><span class="hljs-literal">-</span><span class="hljs-comment">topics</span><span class="hljs-string">.</span><span class="hljs-comment">sh</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">zookeeper</span> <span class="hljs-comment">localhost:2181</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">create</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">topic</span> <span class="hljs-comment">test</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">partitions</span> <span class="hljs-comment">1</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">replication</span><span class="hljs-literal">-</span><span class="hljs-comment">factor</span> <span class="hljs-comment">1</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">config</span> <span class="hljs-comment">message</span><span class="hljs-string">.</span><span class="hljs-comment">timestamp</span><span class="hljs-string">.</span><span class="hljs-comment">type=LogAppendTime</span></code></pre></li>
<li><p>Version：kafka-python 模块的客户端，Kafka (0, 11, 0) 可以使用时间戳 Seek Offset 功能接口 offsets_for_times 来指定偏移，但是在 Kakfa (0, 10, 0) 版本：<code>[Error 35] UnsupportedVersionError: offsets_for_times API not supported for cluster version (0, 10, 0)</code></p></li>
</ul>



<pre class="prettyprint"><code class="language-python hljs "><span class="hljs-keyword">for</span> message <span class="hljs-keyword">in</span> consumer:
    <span class="hljs-keyword">if</span> start_stamp <span class="hljs-keyword">and</span> message.timestamp &lt; start_stamp:
        tp = TopicPartition( message.topic, message.partition )
        offsets = consumer.offsets_for_times( { tp : start_stamp } )
        consumer.seek( tp, offsets[tp].offset )
        <span class="hljs-keyword">continue</span>

    <span class="hljs-keyword">if</span> end_stamp <span class="hljs-keyword">and</span> message.timestamp &gt;= end_stamp:
        <span class="hljs-keyword">break</span></code></pre>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>