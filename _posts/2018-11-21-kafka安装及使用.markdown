---
layout:     post
title:      kafka安装及使用
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<p style="font-family:'微软雅黑', 'Microsoft Yahei', 'Helvetica Neue', 'Hiragino Sans GB', '宋体', simsun, '黑体', Arial, sans-serif;font-size:16px;">
<span style="font-family:'宋体';font-size:12pt;"></span></p>
<div><span style="color:rgb(88,89,91);font-family:Helvetica, Arial, sans-serif;"><span style="background-color:inherit;">一：kafka的安装</span></span></div>
<div><span style="color:rgb(88,89,91);font-family:Helvetica, Arial, sans-serif;"><span style="background-color:inherit;">1.n5上面下载：wget </span></span><span style="color:rgb(62,79,144);font-family:Helvetica, Arial, 'Liberation Sans', FreeSans, sans-serif;font-size:15px;"><a href="http://apache.dataguru.cn/kafka/0.8.1.1/kafka_2.9.2-0.8.1.1.tgz" rel="nofollow" style="color:rgb(62,79,144);">http://apache.dataguru.cn/kafka/0.8.1.1/kafka_2.9.2-0.8.1.1.tgz</a></span></div>
<div>2.vi /usr/lib/kafka/config/server.properties</div>
<div>   broker.id=5</div>
<div>log.dirs=/usr/lib/kafka/kafka-logs</div>
<div>log.flush.interval.messages=10000 默认不用修改</div>
<div>log.flush.interval.ms=1000 默认不用修改</div>
<div>zookeeper.connect=master:2181,n3:2181,n4:2181</div>
<div><br style="background-color:inherit;"></div>
<div>master 1 9092</div>
<div>       n3 2 9093</div>
<div><span style="line-height:1.5;">     </span><span style="line-height:1.5;">  </span>n4 3 9094</div>
<div>二：应用</div>
<div><br style="background-color:inherit;"></div>
<div></div>
<div style="font-family:'微软雅黑';font-size:14px;">1.<span style="color:rgb(151,72,6);background-color:inherit;">开启服务：master-1：nohup /usr/lib/kafka/</span><span style="color:rgb(151,72,6);font-family:Tahoma, 'Microsoft Yahei', Simsun;">bin/kafka-</span><span style="color:rgb(151,72,6);font-family:Tahoma, 'Microsoft Yahei', Simsun;"><a href="http://cpro.baidu.com/cpro/ui/uijs.php?rs=1&amp;u=http%3A%2F%2Fwww.aboutyun.com%2Fforum.php%3Fmod%3Dviewthread%26tid%3D9341%26highlight%3Dkafka&amp;p=baidu&amp;c=news&amp;n=10&amp;t=tpclicked3_hc&amp;q=92051019_cpr&amp;k=server&amp;k0=%BF%CD%BB%A7%B6%CB&amp;kdi0=8&amp;k1=server&amp;kdi1=8&amp;k2=socket&amp;kdi2=8&amp;k3=%C9%E8%BC%C6&amp;kdi3=8&amp;k4=%B7%D6%B2%BC%CA%BD&amp;kdi4=8&amp;sid=30fa1989f7285a8&amp;ch=0&amp;tu=u1692056&amp;jk=0fba7e97c74bfeae&amp;cf=29&amp;fv=15&amp;stid=9&amp;urlid=0&amp;luki=2&amp;seller_id=1&amp;di=128" rel="nofollow" style="background-color:inherit;">server</a></span><span style="color:rgb(151,72,6);font-family:Tahoma, 'Microsoft Yahei', Simsun;">-start.sh </span><span style="color:rgb(151,72,6);background-color:inherit;">/usr/lib/kafka/</span><span style="color:rgb(151,72,6);font-family:Tahoma, 'Microsoft Yahei', Simsun;">config/server.properties
 &amp;  </span></div>
<div style="font-family:'微软雅黑';font-size:14px;"><span style="background-color:inherit;color:rgb(151,72,6);"><span style="line-height:1.5;">master-2：</span>nohup /usr/lib/kafka/<span style="font-family:Tahoma, 'Microsoft Yahei', Simsun;">bin/kafka-</span><span style="font-family:Tahoma, 'Microsoft Yahei', Simsun;"><a href="http://cpro.baidu.com/cpro/ui/uijs.php?rs=1&amp;u=http%3A%2F%2Fwww.aboutyun.com%2Fforum.php%3Fmod%3Dviewthread%26tid%3D9341%26highlight%3Dkafka&amp;p=baidu&amp;c=news&amp;n=10&amp;t=tpclicked3_hc&amp;q=92051019_cpr&amp;k=server&amp;k0=%BF%CD%BB%A7%B6%CB&amp;kdi0=8&amp;k1=server&amp;kdi1=8&amp;k2=socket&amp;kdi2=8&amp;k3=%C9%E8%BC%C6&amp;kdi3=8&amp;k4=%B7%D6%B2%BC%CA%BD&amp;kdi4=8&amp;sid=30fa1989f7285a8&amp;ch=0&amp;tu=u1692056&amp;jk=0fba7e97c74bfeae&amp;cf=29&amp;fv=15&amp;stid=9&amp;urlid=0&amp;luki=2&amp;seller_id=1&amp;di=128" rel="nofollow" style="background-color:inherit;">server</a></span><span style="font-family:Tahoma, 'Microsoft Yahei', Simsun;">-start.sh </span>/usr/lib/kafka/<span style="font-family:Tahoma, 'Microsoft Yahei', Simsun;">config/server1.properties
 &amp;  </span></span></div>
<div style="font-family:'微软雅黑';font-size:14px;"><span style="background-color:inherit;color:rgb(151,72,6);">2.jps  两个kafka项目</span></div>
<div style="font-family:'微软雅黑';font-size:14px;"><span style="background-color:inherit;color:rgb(151,72,6);">3.<span style="font-family:Tahoma, 'Microsoft Yahei', Simsun;line-height:1.5;">创建Topic</span><span style="font-family:Tahoma, 'Microsoft Yahei', Simsun;line-height:1.5;"> </span></span></div>
<div style="font-family:'微软雅黑';font-size:14px;"><span style="background-color:inherit;color:rgb(151,72,6);"><span style="font-family:Tahoma, 'Microsoft Yahei', Simsun;line-height:1.5;">sh </span><span style="line-height:1.5;">/usr/lib/kafka/</span><span style="font-family:Tahoma, 'Microsoft Yahei', Simsun;line-height:1.5;">bin/</span><span style="font-family:Tahoma, 'Microsoft Yahei', Simsun;line-height:1.5;">kafka-topics.sh --create  --zookeeper </span><span style="line-height:1.5;">master:2181,n3:2181,n4:2181</span><span style="font-family:Tahoma, 'Microsoft Yahei', Simsun;line-height:1.5;"> --partitions 3 --topic test0107-1
 --replication-factor 2</span></span></div>
<div style="font-family:'微软雅黑';font-size:14px;"><span style="font-family:Tahoma, 'Microsoft Yahei', Simsun;line-height:1.5;"><span style="background-color:inherit;color:rgb(151,72,6);">4.查看队列情况</span></span></div>
<div style="font-family:'微软雅黑';font-size:14px;"><span style="background-color:inherit;color:rgb(151,72,6);"><span style="font-family:Tahoma, 'Microsoft Yahei', Simsun;line-height:1.5;">s</span><span style="font-family:Tahoma, 'Microsoft Yahei', Simsun;line-height:1.5;">h </span><span style="line-height:1.5;">/usr/lib/kafka/</span><span style="font-family:Tahoma, 'Microsoft Yahei', Simsun;line-height:1.5;">bin/kafka-topics.sh
 --describe </span><span style="font-family:Tahoma, 'Microsoft Yahei', Simsun;">test0107-1 </span><span style="font-family:Tahoma, 'Microsoft Yahei', Simsun;line-height:1.5;">--zookeeper </span><span style="line-height:1.5;">master:2181,n3:2181,n4:2181</span></span></div>
<div style="font-family:'微软雅黑';font-size:14px;"><span style="background-color:inherit;color:rgb(151,72,6);"><span style="font-family:Tahoma, 'Microsoft Yahei', Simsun;line-height:1.5;">5.</span><span style="font-family:Tahoma, 'Microsoft Yahei', Simsun;line-height:1.5;">查看Topic</span></span></div>
<div style="font-size:14px;font-family:Tahoma, 'Microsoft Yahei', Simsun;">
<div style="background-color:inherit;"><span style="background-color:inherit;color:rgb(151,72,6);"> sh kafka-topics.sh --list --zookeeper  <span style="font-family:'微软雅黑';">master:2181,n3:2181,n4:2181</span></span></div>
</div>
<div style="font-family:'微软雅黑';font-size:14px;"><span style="background-color:inherit;color:rgb(151,72,6);">6.进入zookeeper的客户端</span></div>
<div style="font-family:'微软雅黑';font-size:14px;"><span style="background-color:inherit;color:rgb(151,72,6);"><span style="background-color:inherit;font-family:Arial;"><span style="background-color:inherit;line-height:1.5;">/opt/cloudera/parcels/CDH-5.2.0-1.cdh5.2.0.p0.36/lib/zookeeper/bin/zkCli.sh
 -server master:2181</span></span><span style="line-height:1.5;">,n3:2181,n4:2181</span></span></div>
<div style="font-family:'微软雅黑';font-size:14px;"><span style="line-height:1.5;"><span style="background-color:inherit;color:rgb(151,72,6);"> ls /brokers/topics/test0107-1/partitions</span></span></div>
<div style="font-family:'微软雅黑';font-size:14px;"><span style="line-height:1.5;"><span style="background-color:inherit;color:rgb(151,72,6);"> get /brokers/topics/test0107-1/partitions/2</span></span></div>
<div style="font-family:'微软雅黑';font-size:14px;"><span style="background-color:inherit;color:rgb(151,72,6);"><span style="line-height:1.5;">7.</span><span style="font-family:Tahoma, 'Microsoft Yahei', Simsun;line-height:1.5;">创建发送者 </span></span><span style="color:rgb(51,51,51);font-family:Tahoma;text-align:justify;background-color:inherit;">发送消息.</span></div>
<div style="font-size:14px;font-family:Tahoma, 'Microsoft Yahei', Simsun;">
<span style="font-weight:bold;color:rgb(51,51,51);text-align:justify;background-color:rgb(240,240,240);">sh kafka-console-producer.sh --broker-list localhost:9092 --topic test02 <br></span></div>
<div style="font-size:14px;font-family:Tahoma, 'Microsoft Yahei', Simsun;">
<div><span style="background-color:inherit;color:rgb(151,72,6);">8.创建消费者</span></div>
<div><span style="font-weight:bold;color:rgb(51,51,51);text-align:justify;background-color:rgb(240,240,240);">sh kafka-console-consumer.sh --zookeeper localhost:2181 --topic test02 --from-beginning<br></span></div>
<div><span style="background-color:inherit;color:rgb(151,72,6);"><span style="line-height:1.5;"><br></span></span></div>
<div><span style="background-color:inherit;color:rgb(151,72,6);"><span style="line-height:1.5;"><br></span></span></div>
<div><span style="color:#974806;">生产者：bin/run-example org.apache.spark.examples.streaming.KafkaWordCountProducer localhost:9092 test02 3 5</span></div>
<div><span style="color:#974806;">消费者：bin/run-example org.apache.spark.examples.streaming.KafkaWordCount localhost:2181 test-consumer-group test 1<span>
</span></span></div>
<div><span style="color:#974806;"><br></span></div>
<div><span style="color:#974806;"><br></span></div>
<div><span style="color:#974806;"><br></span></div>
</div>
<div>
<div>
<div style="font-family:'微软雅黑';font-size:14px;">
<div style="background-color:inherit;">
<div style="background-color:inherit;color:rgb(68,68,68);font-family:Tahoma, 'Microsoft Yahei', Simsun;">
</div>
<div style="background-color:inherit;color:rgb(68,68,68);font-family:Tahoma, 'Microsoft Yahei', Simsun;">
<br></div>
</div>
</div>
<div style="font-family:'微软雅黑';font-size:14px;"><span style="color:rgb(88,89,91);font-family:Helvetica, Arial, sans-serif;">emace -nw  *编辑文件</span></div>
<div style="font-family:'微软雅黑';font-size:14px;"><span style="color:rgb(88,89,91);font-family:Helvetica, Arial, sans-serif;">进入zookeeper：./zkCli.sh -server hadoop2:2181</span></div>
<div style="font-family:'微软雅黑';font-size:14px;"><span style="color:rgb(88,89,91);font-family:Helvetica, Arial, sans-serif;">ls /</span></div>
<div style="font-family:'微软雅黑';font-size:14px;"><span style="color:rgb(88,89,91);font-family:Helvetica, Arial, sans-serif;">ls /brokers</span></div>
<div style="font-family:'微软雅黑';font-size:14px;"><span style="color:rgb(88,89,91);font-family:Helvetica, Arial, sans-serif;">ls /brokers/ids</span></div>
<div style="font-family:'微软雅黑';font-size:14px;"><span style="background-color:inherit;color:rgb(88,89,91);font-family:Arial;">查看消费者</span></div>
<div style="font-family:'微软雅黑';font-size:14px;"><span style="background-color:inherit;color:rgb(88,89,91);font-family:Arial;">ls /consumers/</span></div>
<div style="font-family:'微软雅黑';font-size:14px;"><span style="background-color:inherit;color:rgb(88,89,91);font-family:Arial;">消费数据</span></div>
<div style="font-family:'微软雅黑';font-size:14px;"><span style="background-color:inherit;color:rgb(88,89,91);font-family:Arial;">get  //../.1</span></div>
<div style="font-family:'微软雅黑';font-size:14px;"><span style="background-color:inherit;color:rgb(88,89,91);font-family:Arial;"><br style="background-color:inherit;"></span></div>
<div style="font-family:'微软雅黑';font-size:14px;"><span style="background-color:inherit;color:rgb(88,89,91);font-family:Arial;">不建议删除 有bug</span></div>
<div style="font-family:'微软雅黑';font-size:14px;"><br></div>
<div style="font-family:'微软雅黑';font-size:14px;"><span style="background-color:inherit;color:rgb(88,89,91);font-family:Arial;"><br></span></div>
<div style="font-family:'微软雅黑';font-size:14px;"><span style="background-color:inherit;color:rgb(88,89,91);font-family:Arial;"><br></span></div>
<div style="font-size:14px;"><span style="font-family:Helvetica, Arial, sans-serif;color:#58595b;">第二次尝试3.kafka的安装<br>
wget http://apache.dataguru.cn/kafka/0.8.1.1/kafka_2.9.2-0.8.1.1.tgz<br><br><br>
1.master<br>
vi /usr/lib/kafka/config/server.properties<br>
broker.id=0<br>
log.dirs=/usr/lib/kafka/kafka-logs<br>
log.flush.interval.messages=10000 默认不用修改<br>
log.flush.interval.ms=1000 默认不用修改<br>
zookeeper.connect=master.dw.lewatek.com:2181,n4.dw.lewatek.com:2181,n5.dw.lewatek.com:2181<br>
  <br>
master  server 0 9091<br>
n3        server 1 9092<br>
n4        server 2 9093<br><br><br>
/usr/lib/kafka/<br><br><br><br><br><br><br>
master：nohup /usr/lib/kafka/bin/kafka-server-start.sh /usr/lib/kafka/config/server.properties &amp;        <br>
n4:          nohup /usr/lib/kafka/bin/kafka-server-start.sh /usr/lib/kafka/config/server.properties &amp;        <br>
n5:         nohup /usr/lib/kafka/bin/kafka-server-start.sh /usr/lib/kafka/config/server.properties &amp;        <br>
2.jps  两个kafka项目<br>
3.创建Topic <br>
sh /usr/lib/kafka/bin/kafka-topics.sh --create  --zookeeper master.dw.lewatek.com:2181,n4.dw.lewatek.com:2181,n5.dw.lewatek.com:2181 --partitions 1 --topic newboom --replication-factor 2<br>
            修改这个Topic<br>
                  $ sh /usr/lib/kafka/bin/kafka-topics.sh   --zookeeper master.dw.lewatek.com:2181,n4.dw.lewatek.com:2181,n5.dw.lewatek.com:2181  --partitions 3 --topic newboom --alter<br>
4.查看队列明细<br>
sh /usr/lib/kafka/bin/kafka-topics.sh --describe newboom --zookeeper master.dw.lewatek.com:2181,n4.dw.lewatek.com:2181,n5.dw.lewatek.com:2181<br>
5.查看Topic列表<br>
sh /usr/lib/kafka/bin/kafka-topics.sh --list --zookeeper  master.dw.lewatek.com:2181,n4.dw.lewatek.com:2181,n5.dw.lewatek.com:2181<br>
6.进入zookeeper的客户端<br>
/opt/cloudera/parcels/CDH-5.2.0-1.cdh5.2.0.p0.36/lib/zookeeper/bin/zkCli.sh -server master.dw.lewatek.com:2181,n4.dw.lewatek.com:2181,n5.dw.lewatek.com:2181<br>
 ls /brokers/topics/test0107-1/partitions<br>
 get /brokers/topics/test0107-1/partitions/2<br>
7.创建发送者，生产信息  producer：生产者<br>
sh /usr/lib/kafka/bin/kafka-console-producer.sh --broker-list master.dw.lewatek.com:9091,n4.dw.lewatek.com:9092,n5.dw.lewatek.com:9093 --topic newboom <br>
8.创建消费者，消费信息  consumer：消费者<br>
sh /usr/lib/kafka/bin/kafka-console-consumer.sh --zookeeper master.dw.lewatek.com:2181,n4.dw.lewatek.com:2181,n5.dw.lewatek.com:2181 --topic  newboom --from-beginning<br><br><br><br><br>
处理数据<br>
package com.lewatek<br>
import java.util.Properties<br>
import kafka.producer._<br>
import org.apache.spark.sql._<br>
import org.apache.spark.streaming._<br>
import org.apache.spark.streaming.StreamingContext._<br>
import org.apache.spark.streaming.kafka._<br>
import org.apache.spark.streaming.kafka.KafkaUtils._<br>
import org.apache.spark.SparkConf<br>
import org.apache.spark.examples.streaming._<br>
import scala.collection.mutable.ArrayBuffer<br>
import scala.io.Source<br>
import org.apache.spark.{SparkContext, SparkConf}<br><br><br><br><br>
object KafkaWordCount {<br>
  def main(args: Array[String]) {<br>
    if (args.length &lt; 4) {<br>
      System.err.println("Usage: KafkaWordCount &lt;zkQuorum&gt; &lt;group&gt; &lt;topics&gt; &lt;numThreads&gt;")<br>
      System.exit(1)<br>
    }<br>
    StreamingExamples.setStreamingLogLevels()<br>
    //n4.dw.lewatek.com:2181 test-consumer-group boom 1<br>
    val Array(zkQuorum, group, topics, numThreads) = args<br>
    val sparkConf = new SparkConf().setAppName("KafkaWordCount")<br>
    //Seconds(2)：Spark Streaming运行时的batch窗口大小。在这个例子中就是将2秒钟的输入数据进行一次Spark Job处理。<br>
    val ssc =  new StreamingContext(sparkConf, Seconds(2))<br>
                  import org.apache.spark.sql.SQLContext<br>
                  val sc = new SparkContext(sparkConf)<br>
                  val sqlContext: SQLContext = new SQLContext(sc)<br>
    ssc.checkpoint("checkpoint")<br>
//    val topicpMap = topics.split("").map((_,numThreads.toInt)).toMap<br>
    val topicpMap = topics.split(" ").map((_,numThreads.toInt)).toMap<br>
    //线程的数量（input DSream），输入DStream（lines），这里是监控kafka发来的信息<br>
//    if(rdd.!=(null)){<br>
    val lines = KafkaUtils.createStream(ssc, zkQuorum, group, topicpMap).map(_._2)<br>
             lines.foreachRDD{<br>
               rdd=&gt;<br>
//                   if(rdd.isEmpty()==false){<br>
                   val kafkajson = sqlContext.jsonRDD(rdd).cache()<br>
                   kafkajson.registerTempTable("login")<br>
                   val teenagers = sqlContext.sql("SELECT name FROM people WHERE age &gt;= 13 AND age &lt;= 19")<br>
                   val table= sqlContext.jsonRDD(rdd).cache()<br>
                   table.printSchema()<br>
                   table.registerTempTable("jsonTable")<br>
                   sqlContext.cacheTable("jsonTable")<br>
                   val jsonsql = sqlContext.sql("SELECT clientId,dev.chl,dev.mod,apps,timestamp FROM jsonTable ").flatMap { x: Row =&gt;<br>
                     val id: String = x(0).asInstanceOf[String]<br>
                     val ch1: String = x(1).asInstanceOf[String]<br>
                     val mod: String = x(2).asInstanceOf[String]<br>
                     val zz = x(3).asInstanceOf[ArrayBuffer[Row]]<br>
                     val ts: String = x(4).asInstanceOf[String]<br>
                     zz.map { x: Row =&gt; id + "\t" + ch1 + "\t" +mod + "\t" + x(0) + "\t" + x(1) + "\t" + x(2) + "\t" + x(3) + "\t" + ts.substring(0,10)}<br>
                   }<br>
                   val wordCounts = jsonsql<br>
                   wordCounts.foreach(println)<br>
//                 }<br>
             }<br>
//    val words = lines.flatMap(_.split("\n"))<br>
//    val wordCounts = words<br>
//    wordCounts.print()<br>
    //开启streams应用程序<br>
    ssc.start()<br>
    ssc.awaitTermination()<br>
  }<br>
}<br>
// Produces some random words between 1 and 100.<br>
object KafkaWordCountProducer {<br>
  def main(args: Array[String]) {<br>
    if (args.length &lt; 4) {<br>
      System.err.println("Usage: KafkaWordCountProducer &lt;metadataBrokerList&gt; &lt;topic&gt; " +<br>
        "&lt;messagesPerSec&gt; &lt;wordsPerMessage&gt;")<br>
      System.exit(1)<br>
    }<br>
    //master.dw.lewatek.com:9091 boom 3 5<br>
    val Array(brokers, topic, messagesPerSec, wordsPerMessage,filename) = args<br>
    // Zookeper connection properties<br>
    val props = new Properties()<br>
    props.put("metadata.broker.list", brokers)<br>
    props.put("serializer.class", "kafka.serializer.StringEncoder")<br>
    val config = new ProducerConfig(props)<br>
    val producer = new Producer[String, String](config)<br>
    // Send some messages<br>
//                val ip = "10.1.0.141";<br>
//                val msg ="this is a message! 测试";<br>
//                var start_time = System.currentTimeMillis();<br>
//                   for(1 &lt;- 1 to 100)<br>
//                    {<br>
//                        val data = new KeyedMessage[String, String]("test_kafka", "IP",msg);<br>
//                        producer.send(data);<br>
//                        Thread.sleep(100)<br>
//                    }<br>
    val ip = "10.1.0.141";<br>
    val msg ="this is a message! 测试";<br>
    var start_time = System.currentTimeMillis();<br>
//    for(i &lt;- 1 to 100) {<br>
//         val data = new KeyedMessage[String, String](topic, "10.1.0.141"+i,msg+i);<br>
//        producer.send(data)<br>
//        Thread.sleep(100)<br>
//    }<br>
    for (line &lt;- Source.fromFile(filename).getLines){<br>
        val data = new KeyedMessage[String, String](topic,line);<br>
      producer.send(data)<br>
      Thread.sleep(100)<br>
    }<br>
  }<br>
}</span></div>
<div style="font-family:Tahoma, 'Microsoft Yahei', Simsun;"><span style="background-color:inherit;color:rgb(88,89,91);font-family:Arial;"><br></span></div>
<div style="font-family:Tahoma, 'Microsoft Yahei', Simsun;font-size:14px;color:rgb(68,68,68);">
<div style="background-color:inherit;">
<div style="background-color:inherit;"><span style="line-height:1.5;"></span>
<div style="font-size:14px;color:rgb(51,51,51);font-family:'宋体';">
</div>
<br></div>
</div>
</div>
<div style="font-family:Tahoma, 'Microsoft Yahei', Simsun;font-size:14px;color:rgb(68,68,68);">
<br style="background-color:inherit;"></div>
</div>
</div>
<p style="font-family:'微软雅黑', 'Microsoft Yahei', 'Helvetica Neue', 'Hiragino Sans GB', '宋体', simsun, '黑体', Arial, sans-serif;font-size:16px;">
<span style="font-family:Calibri;font-size:10.5pt;"></span></p>
            </div>
                </div>