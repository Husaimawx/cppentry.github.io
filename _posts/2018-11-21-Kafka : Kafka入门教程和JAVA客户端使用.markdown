---
layout:     post
title:      Kafka : Kafka入门教程和JAVA客户端使用
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                <h1><a></a>目录</h1><p></p><div class="toc"><div class="toc"><ul><li><a href="https://blog.csdn.net/shangmingtao/article/details/79567921#%E7%9B%AE%E5%BD%95" rel="nofollow"><u><span style="color:#0066cc;">目录</span></u></a></li><li><a href="https://blog.csdn.net/shangmingtao/article/details/79567921#kafka%E7%AE%80%E4%BB%8B" rel="nofollow"><u><span style="color:#0066cc;">Kafka简介</span></u></a></li><li><a href="https://blog.csdn.net/shangmingtao/article/details/79567921#%E7%8E%AF%E5%A2%83%E4%BB%8B%E7%BB%8D" rel="nofollow"><u><span style="color:#0066cc;">环境介绍</span></u></a></li><li><a href="https://blog.csdn.net/shangmingtao/article/details/79567921#%E6%9C%AF%E8%AF%AD%E4%BB%8B%E7%BB%8D" rel="nofollow"><u><span style="color:#0066cc;">术语介绍</span></u></a></li><li><a href="https://blog.csdn.net/shangmingtao/article/details/79567921#%E6%B6%88%E8%B4%B9%E6%A8%A1%E5%BC%8F" rel="nofollow"><u><span style="color:#0066cc;">消费模式</span></u></a></li><li><a href="https://blog.csdn.net/shangmingtao/article/details/79567921#%E4%B8%8B%E8%BD%BD" rel="nofollow"><u><span style="color:#0066cc;">下载</span></u></a></li><li><a href="https://blog.csdn.net/shangmingtao/article/details/79567921#%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE" rel="nofollow"><u><span style="color:#0066cc;">集群安装配置</span></u></a></li><li><a href="https://blog.csdn.net/shangmingtao/article/details/79567921#%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8" rel="nofollow"><u><span style="color:#0066cc;">命令使用</span></u></a></li><li><a href="https://blog.csdn.net/shangmingtao/article/details/79567921#java%E5%AE%9E%E6%88%98" rel="nofollow"><u><span style="color:#0066cc;">JAVA实战</span></u></a></li><li><a href="https://blog.csdn.net/shangmingtao/article/details/79567921#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE" rel="nofollow"><u><span style="color:#0066cc;">参考文献</span></u></a></li></ul></div></div><p></p><h1><a></a>Kafka简介</h1><p>由Scala和Java编写,Kafka是一种高吞吐量的分布式发布订阅消息系统.</p><h1><a></a>环境介绍</h1><p>操作系统:centos6.5 <br>kafka:1.0.1 <br>zookeeper:3.4.6</p><h1><a></a>术语介绍</h1><ul><li>Broker : Kafka集群包含一个或多个服务器，这种服务器被称为broker</li><li>Topic : 每条发布到Kafka集群的消息都有一个类别，这个类别被称为Topic。（物理上不同Topic的消息分开存储，逻辑上一个Topic的消息虽然保存于一个或多个broker上但用户只需指定消息的Topic即可生产或消费数据而不必关心数据存于何处）</li><li>Partition : Partition是物理上的概念，每个Topic包含一个或多个Partition.</li><li>Producer : 负责发布消息到Kafka broker</li><li>Consumer : 消息消费者，向Kafka broker读取消息的客户端。</li><li>Consumer Group : 每个Consumer属于一个特定的Consumer Group（可为每个Consumer指定group name，若不指定group name则属于默认的group）。</li></ul><h1><a></a>消费模式</h1><p><img title="" alt="这里写图片描述" src="https://img-blog.csdn.net/20180315151540326?watermark/2/text/Ly9ibG9nLmNzZG4ubmV0L3NoYW5nbWluZ3Rhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><p>为了照顾对MQ不是很了解的同学,先讲一下MQ的原理.一般MQ都是在服务端存储一个队列.生产者把消息丢到MQ server,消费者从MQ server消费.这样一来解决了生产者和消费者的高耦合问题,同时也解决了生产速度和消费速度差异导致的消费者跟不上生产者的生产速度而导致的消费者压力过大问题.</p><p>在kafka中的topic就是一系列队列的总称,称为一个主题.当然ActiveMQ和RabbitMQ中都有这个概念.一类消息都会丢到一个topic中去.</p><p>讲完topic我们讲一下partition(分区),这个东西是kafka独有的东西,也是kafka实现横向扩展和高并发的一个重要设计.我们试想一下,如果每个topic只有一个队列,随着业务增加topic里消息越来越多.多到一台server装不下了怎么办.为了解决这个问题,我们引入了partition这个概念.一个partition(分区)代表了一个物理上存在的队列.topic只是一组partition(分区)的总称,也就是说topic仅是逻辑上的概念.这样一来当topic上的消息越来越多.我们就可以将新增的partition(分区)放在其他server上.也就是说topic里边的partition(分区)可以分属于不同的机器.实际生产中,也基本都是这样玩的.</p><p>这里说一个特殊情况,有时我们创建了一个topic没有指定partition(分区)数量或者指定了partition(分区)数量为1,这时实际也是有一个默认的partition(分区)的,名字我忘记了.</p><p>从Producer(生产者)角度,一个消息丢到topic中任务就完成了.至于具体丢到了topic中的哪个partition(分区),Producer(生产者)不需要关注.这里kafka自动帮助我们做了负载均衡.当然如果我们指定某个partition(分区)也是可以的.这个大家官方文档和百度.</p><p>接下里我们讲Consumer Group(消费组),Consumer Group(消费组)顾名思义就是一组Consumer(消费者)的总称.那有了组的概念以后能起到什么作用.如果只有一组内且组内只有一个Consumer,那这个就是传统的点对点模式,如果有多组,每组内都有一个Consumer,那这个就是发布-订阅(pub-sub)模式.每组都会收到同样的消息.</p><p>最后讲最难理解也是大家讨论最多的地方,partition(分区)和Consumer(消费者)的关系.首先,<strong>一个Consumer(消费者)的一个线程在某个时刻只能接收一个partition(分区)的数据,一个partition(分区)某个时刻也只会把消息发给一个Consumer(消费者)</strong>.我们设计出来几种场景:</p><p><strong>场景一:</strong> topic-1 下有partition-1和partition-2 <br>            group-1 下有consumer-1和consumer-2和consumer-3 <br>            所有consumer只有一个线程,且都消费topic-1的消息. <br><strong>消费情况 :</strong> consumer-1只消费partition-1的数据 <br>                           consumer-2只消费partition-2的数据 <br>                       consumer-3不会消费到任何数据 <br><strong>原因 :</strong> 只能接受一个partition(分区)的数据</p><p><strong>场景二:</strong> topic-1 下有partition-1和partition-2 <br>            group-1 下有consumer-1 <br>            consumer只有一个线程,且消费topic-1的消息. <br><strong>消费情况 :</strong> consumer-1先消费partition-1的数据 <br>                           consumer-1消费完partition-1数据后开始消费partition-2的数据 <br><strong>原因 :</strong> 这里是kafka检测到当前consumer-1消费完partition-1处于空闲状态,自动帮我做了负载.所以大家看到这里在看一下上边那句话的”某个时刻” <br><strong>特例:</strong> consumer在消费消息时必须指定topic,可以不指定partition,场景二的情况就是发生在不指定partition的情况下,如果consumer-1指定了partition-1,那么consumer-1消费完partition-1后哪怕处于空闲状态了也是不会消费partition-2的消息的.</p><p>进而我们总结出了一条经验,同组内的消费者(单线程消费)数量不应多于topic下的partition(分区)数量,不然就会出有消费者空闲的状态,此时并发线程数=partition(分区)数量.反之消费者数量少于topic下的partition(分区)数量也是不理想的,原因是此时并发线程数=消费者数量,并不能完全发挥kafka并发效率.</p><p>最后我们看下上边的图,Consumer Group A的两个机器分别开启两个线程消费P0 P1 P2 P3的消息Consumer Group B的四台机器单线程消费P0 P1 P2 P3的消息就可以了.此时效率最高.</p><h1><a></a>下载</h1><p>下载地址:<a href="http://kafka.apache.org/downloads" rel="nofollow"><u><span style="color:#0066cc;">http://kafka.apache.org/downloads</span></u></a> <br>这里我们下载到<code><span style="font-family:NSimsun;font-size:14px;">/usr/local</span></code>目录下</p><h1><a></a>集群安装配置</h1><p><strong>解压 :</strong> <code><span style="font-family:NSimsun;font-size:14px;">cd /usr/local &amp;&amp; tar -xzvf kafka_2.11-1.0.1.tgz</span></code></p><p><strong>创建log目录 :</strong> <code><span style="font-family:NSimsun;font-size:14px;">cd /usr/local/kafka_2.11-1.0.1 &amp;&amp; mkdir kafkaLogs</span></code></p><p><strong>配置:</strong><code><span style="font-family:NSimsun;font-size:14px;">vi /usr/local/kafka_2.11-1.0.1/config/server.properties</span></code>需改下边五个地方</p><pre class="prettyprint"><code class="language-bash hljs has-numbering"><span class="hljs-comment"><span style="color:#000000;">#broker的id,集群中的每台机器id唯一,其他两台分别1和2</span></span>
broker.id=<span class="hljs-number"><span style="color:#000000;">0</span></span>  
<span class="hljs-comment"><span style="color:#000000;">#是Kafka绑定的interface,这里需要写本机内网ip地址,不然bind端口失败</span></span>
<span class="hljs-comment"><span style="color:#000000;">#其他两台分别是192.168.1.5和192.168.1.9</span></span>
host.name=<span class="hljs-number"><span style="color:#000000;">192.168</span></span>.<span class="hljs-number"><span style="color:#000000;">1.3</span></span> 
<span class="hljs-comment"><span style="color:#000000;">#向zookeeper注册的对外暴露的ip和port,118.212.149.51是192.168.1.3的外网ip地址</span></span>
<span class="hljs-comment"><span style="color:#000000;">#如果不配置kafka部署在外网服务器的话本地是访问不到的.</span></span>
advertised.listeners=PLAINTEXT://<span class="hljs-number"><span style="color:#000000;">118.212</span></span>.<span class="hljs-number"><span style="color:#000000;">149.51</span></span>:<span class="hljs-number"><span style="color:#000000;">9092</span></span> 
<span class="hljs-comment"><span style="color:#000000;">#zk集群的ip和port,zk集群教程:</span></span>
zookeeper.connect=<span class="hljs-number"><span style="color:#000000;">192.168</span></span>.<span class="hljs-number"><span style="color:#000000;">1.3</span></span>:<span class="hljs-number"><span style="color:#000000;">2181</span></span>,<span class="hljs-number"><span style="color:#000000;">192.168</span></span>.<span class="hljs-number"><span style="color:#000000;">1.5</span></span>:<span class="hljs-number"><span style="color:#000000;">2181</span></span>,<span class="hljs-number"><span style="color:#000000;">192.168</span></span>.<span class="hljs-number"><span style="color:#000000;">1.9</span></span>:<span class="hljs-number"><span style="color:#000000;">2181</span></span>
<span class="hljs-comment"><span style="color:#000000;">#log目录,刚刚上边建好的.</span></span>
log.dirs=/usr/local/kafka_2.<span class="hljs-number"><span style="color:#000000;">11</span></span>-<span class="hljs-number"><span style="color:#000000;">1.0</span></span>.<span class="hljs-number"><span style="color:#000000;">1</span></span>/kafkaLogs</code></pre><ul class="pre-numbering"><li style="color:rgb(153,153,153);"><br></li></ul><p><strong>启动集群(分别在三台broker执行):</strong>进入bin目录<code><span style="font-family:NSimsun;font-size:14px;">cd /usr/local/kafka_2.11-1.0.1/bin/</span></code>执行启动脚本并指定配置文件<code><span style="font-family:NSimsun;font-size:14px;">./kafka-server-start.sh -daemon ../config/server.properties</span></code></p><p><strong>验证集群是否启动成功:</strong></p><pre class="prettyprint"><code class="hljs r has-numbering">[root@template ~]<span class="hljs-comment"><span style="color:#000000;"># cd /usr/local/zookeeper-3.4.6/bin/</span></span>
[root@template bin]<span class="hljs-comment"><span style="color:#000000;"># ./zkCli.sh -server 127.0.0.1:2181</span></span>
<span class="hljs-keyword"><span style="color:#000000;">...</span></span>
[zk: <span style="color:#000000;"><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span></span>:<span class="hljs-number"><span style="color:#000000;">2181</span></span>(CONNECTED) <span class="hljs-number"><span style="color:#000000;">0</span></span>] ls /brokers/ids
[<span class="hljs-number"><span style="color:#000000;">0</span></span>, <span class="hljs-number"><span style="color:#000000;">1</span></span>, <span class="hljs-number"><span style="color:#000000;">2</span></span>] <span class="hljs-comment"><span style="color:#000000;">#这里的012分别是三个broker的id</span></span></code></pre><ul class="pre-numbering"><li style="color:rgb(153,153,153);"><br></li></ul><p><strong>查看某个broker信息:</strong>注意<code><span style="font-family:NSimsun;font-size:14px;">endpoints</span></code>信息的ip:port,这个就是我们对外服务暴露的地址,我这里是外网访问,所以暴露的是外网ip和端口</p><pre class="prettyprint"><code class="language-bash hljs has-numbering">[zk: <span class="hljs-number"><span style="color:#000000;">127.0</span></span>.<span class="hljs-number"><span style="color:#000000;">0.1</span></span>:<span class="hljs-number"><span style="color:#000000;">2181</span></span>(CONNECTED) <span class="hljs-number"><span style="color:#000000;">1</span></span>] get /brokers/ids/<span class="hljs-number"><span style="color:#000000;">0</span></span>
{<span class="hljs-string"><span style="color:#000000;">"listener_security_protocol_map"</span></span>:{<span class="hljs-string"><span style="color:#000000;">"PLAINTEXT"</span></span>:<span class="hljs-string"><span style="color:#000000;">"PLAINTEXT"</span></span>},<span class="hljs-string"><span style="color:#000000;">"endpoints"</span></span>:[<span class="hljs-string"><span style="color:#000000;">"PLAINTEXT://118.212.149.51:9092"</span></span>],<span class="hljs-string"><span style="color:#000000;">"jmx_port"</span></span>:-<span class="hljs-number"><span style="color:#000000;">1</span></span>,<span class="hljs-string"><span style="color:#000000;">"host"</span></span>:<span class="hljs-string"><span style="color:#000000;">"118.212.149.51"</span></span>,<span class="hljs-string"><span style="color:#000000;">"timestamp"</span></span>:<span class="hljs-string"><span style="color:#000000;">"1521010377533"</span></span>,<span class="hljs-string"><span style="color:#000000;">"port"</span></span>:<span class="hljs-number"><span style="color:#000000;">9092</span></span>,<span class="hljs-string"><span style="color:#000000;">"version"</span></span>:<span class="hljs-number"><span style="color:#000000;">4</span></span>}
cZxid = <span class="hljs-number"><span style="color:#000000;">0</span></span>x700000626
ctime = Wed Mar <span class="hljs-number"><span style="color:#000000;">14</span></span> <span class="hljs-number"><span style="color:#000000;">14</span></span>:<span class="hljs-number"><span style="color:#000000;">52</span></span>:<span class="hljs-number"><span style="color:#000000;">57</span></span> CST <span class="hljs-number"><span style="color:#000000;">2018</span></span>
mZxid = <span class="hljs-number"><span style="color:#000000;">0</span></span>x700000626
mtime = Wed Mar <span class="hljs-number"><span style="color:#000000;">14</span></span> <span class="hljs-number"><span style="color:#000000;">14</span></span>:<span class="hljs-number"><span style="color:#000000;">52</span></span>:<span class="hljs-number"><span style="color:#000000;">57</span></span> CST <span class="hljs-number"><span style="color:#000000;">2018</span></span>
pZxid = <span class="hljs-number"><span style="color:#000000;">0</span></span>x700000626
cversion = <span class="hljs-number"><span style="color:#000000;">0</span></span>
dataVersion = <span class="hljs-number"><span style="color:#000000;">0</span></span>
aclVersion = <span class="hljs-number"><span style="color:#000000;">0</span></span>
ephemeralOwner = <span class="hljs-number"><span style="color:#000000;">0</span></span>x3621e366ae20014
dataLength = <span class="hljs-number"><span style="color:#000000;">198</span></span>
numChildren = <span class="hljs-number"><span style="color:#000000;">0</span></span></code></pre><ul class="pre-numbering"><li style="color:rgb(153,153,153);"><br></li></ul><h1><a></a>命令使用</h1><p><strong>创建topic : </strong></p><pre class="prettyprint"><code class="language-bash hljs has-numbering"><span class="hljs-comment"><span style="color:#000000;">#--replication-factor 创建的副本数,这个使用来备份的.副本数不能大于broker数</span></span>
<span class="hljs-comment"><span style="color:#000000;">#--partitions 1 创建的分区数.根据实际情况创建</span></span>
./kafka-topics.sh --create --zookeeper <span class="hljs-number"><span style="color:#000000;">192.168</span></span>.<span class="hljs-number"><span style="color:#000000;">1.3</span></span>:<span class="hljs-number"><span style="color:#000000;">2181</span></span> --replication-factor <span class="hljs-number"><span style="color:#000000;">1</span></span> --partitions <span class="hljs-number"><span style="color:#000000;">1</span></span> --topic milo</code></pre><ul class="pre-numbering"><li style="color:rgb(153,153,153);"><br></li></ul><p><strong>查看topic :</strong> </p><pre class="prettyprint"><code class="language-bash hljs has-numbering">./kafka-topics.sh --list --zookeeper <span class="hljs-number"><span style="color:#000000;">192.168</span></span>.<span class="hljs-number"><span style="color:#000000;">1.3</span></span>:<span class="hljs-number"><span style="color:#000000;">2181</span></span></code></pre><ul class="pre-numbering"><li style="color:rgb(153,153,153);"><br></li></ul><p><strong>查看topic详细信息 :</strong> </p><pre class="prettyprint"><code class="language-bash hljs has-numbering">./kafka-topics.sh --describe --zookeeper <span class="hljs-number"><span style="color:#000000;">192.168</span></span>.<span class="hljs-number"><span style="color:#000000;">1.3</span></span>:<span class="hljs-number"><span style="color:#000000;">2181</span></span></code></pre><ul class="pre-numbering"><li style="color:rgb(153,153,153);"><br></li></ul><p>结果如下: <br><img title="" alt="这里写图片描述" src="https://img-blog.csdn.net/2018031516135553?watermark/2/text/Ly9ibG9nLmNzZG4ubmV0L3NoYW5nbWluZ3Rhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"><br>第一行topic信息摘要:分别是topic名字(Topic),partition数量(PartitionCount),副本数量(ReplicationFactor),配置(Config) <br>第二行~第四行分别列出了名为milo的topic的所有partition.依次为topic名字(Topic),partition号(Partition),此partition所在的borker(Leader),副本所在的broker(Replicas),Isr列表(Isr) <br>ps:同步状态的副本的集合（a set of in-sync replicas），简称ISR,通俗理解就是替补队员,不是每个broker都可以作为替补队员.首先这个broker得存有副本,其次副本还得满足条件.就像我们大学足球队,有的人是替补,有的人连大名单都没进去,原因是他不会踢球. ^ ^ </p><p><strong>生产消息 :</strong> </p><pre class="prettyprint"><code class="language-bash hljs has-numbering">./kafka-console-producer.sh --broker-list <span class="hljs-number"><span style="color:#000000;">118.212</span></span>.<span class="hljs-number"><span style="color:#000000;">149.51</span></span>:<span class="hljs-number"><span style="color:#000000;">9092</span></span> --topic test\
&gt;hello world</code></pre><ul class="pre-numbering"><li style="color:rgb(153,153,153);"><br></li></ul><p><strong>消费消息 :</strong> </p><pre class="prettyprint"><code class="language-bash hljs has-numbering">./kafka-console-consumer.sh --zookeeper <span class="hljs-number"><span style="color:#000000;">118.212</span></span>.<span class="hljs-number"><span style="color:#000000;">149.51</span></span>:<span class="hljs-number"><span style="color:#000000;">2181</span></span> --topic milo --from-beginning
hello world</code></pre><ul class="pre-numbering"><li style="color:rgb(153,153,153);"><br></li></ul><h1><a></a>JAVA实战</h1><p>pom.xml</p><pre class="prettyprint"><code class="language-xml hljs has-numbering"><span class="hljs-tag"><span style="color:#000000;">&lt;<span class="hljs-title">dependencies</span>&gt;</span></span>
    <span class="hljs-tag"><span style="color:#000000;">&lt;<span class="hljs-title">dependency</span>&gt;</span></span>
      <span class="hljs-tag"><span style="color:#000000;">&lt;<span class="hljs-title">groupId</span>&gt;</span></span>org.apache.kafka<span class="hljs-tag"><span style="color:#000000;">&lt;/<span class="hljs-title">groupId</span>&gt;</span></span>
      <span class="hljs-tag"><span style="color:#000000;">&lt;<span class="hljs-title">artifactId</span>&gt;</span></span>kafka_2.11<span class="hljs-tag"><span style="color:#000000;">&lt;/<span class="hljs-title">artifactId</span>&gt;</span></span>
      <span class="hljs-tag"><span style="color:#000000;">&lt;<span class="hljs-title">version</span>&gt;</span></span>1.0.1<span class="hljs-tag"><span style="color:#000000;">&lt;/<span class="hljs-title">version</span>&gt;</span></span>
    <span class="hljs-tag"><span style="color:#000000;">&lt;/<span class="hljs-title">dependency</span>&gt;</span></span>
    <span class="hljs-tag"><span style="color:#000000;">&lt;<span class="hljs-title">dependency</span>&gt;</span></span>
      <span class="hljs-tag"><span style="color:#000000;">&lt;<span class="hljs-title">groupId</span>&gt;</span></span>org.apache.kafka<span class="hljs-tag"><span style="color:#000000;">&lt;/<span class="hljs-title">groupId</span>&gt;</span></span>
      <span class="hljs-tag"><span style="color:#000000;">&lt;<span class="hljs-title">artifactId</span>&gt;</span></span>kafka-clients<span class="hljs-tag"><span style="color:#000000;">&lt;/<span class="hljs-title">artifactId</span>&gt;</span></span>
      <span class="hljs-tag"><span style="color:#000000;">&lt;<span class="hljs-title">version</span>&gt;</span></span>1.0.1<span class="hljs-tag"><span style="color:#000000;">&lt;/<span class="hljs-title">version</span>&gt;</span></span>
    <span class="hljs-tag"><span style="color:#000000;">&lt;/<span class="hljs-title">dependency</span>&gt;</span></span>
  <span class="hljs-tag"><span style="color:#000000;">&lt;/<span class="hljs-title">dependencies</span>&gt;</span></span></code></pre><ul class="pre-numbering"><li style="color:rgb(153,153,153);"><br></li></ul><p>Producer.java</p><pre class="prettyprint"><code class="language-java hljs has-numbering"><span class="hljs-keyword"><span style="color:#000000;">package</span></span> cn.milo.kafka;

<span class="hljs-keyword"><span style="color:#000000;">import</span></span> org.apache.kafka.clients.producer.*;
<span class="hljs-keyword"><span style="color:#000000;">import</span></span> org.apache.kafka.common.serialization.StringSerializer;
<span class="hljs-keyword"><span style="color:#000000;">import</span></span> org.apache.log4j.Logger;

<span class="hljs-keyword"><span style="color:#000000;">import</span></span> java.util.Properties;

<span class="hljs-javadoc"><span style="color:#000000;">/******************************************************</span>
<span style="color:#000000;"> ******<span class="hljs-javadoctag"> @ClassName</span>   : Producer.java                                            </span>
<span style="color:#000000;"> ******<span class="hljs-javadoctag"> @author</span>      : milo ^ ^                     </span>
<span style="color:#000000;"> ******<span class="hljs-javadoctag"> @date</span>        : 2018 03 14 11:34     </span>
<span style="color:#000000;"> ******<span class="hljs-javadoctag"> @version</span>     : v1.0.x                      </span>
<span style="color:#000000;"> *******************************************************/</span></span>
<span class="hljs-keyword"><span style="color:#000000;">public</span></span> <span class="hljs-class"><span class="hljs-keyword"><span style="color:#000000;">class</span></span> <span class="hljs-title"><span style="color:#000000;">Producer</span></span> {</span>

    <span class="hljs-keyword"><span style="color:#000000;">static</span></span> Logger log = Logger.getLogger(Producer.class);

    <span class="hljs-keyword"><span style="color:#000000;">private</span></span> <span class="hljs-keyword"><span style="color:#000000;">static</span></span> <span class="hljs-keyword"><span style="color:#000000;">final</span></span> String TOPIC = <span class="hljs-string"><span style="color:#000000;">"milo2"</span></span>;
    <span class="hljs-keyword"><span style="color:#000000;">private</span></span> <span class="hljs-keyword"><span style="color:#000000;">static</span></span> <span class="hljs-keyword"><span style="color:#000000;">final</span></span> String BROKER_LIST = <span class="hljs-string"><span style="color:#000000;">"118.212.149.51:9092"</span></span>;
    <span class="hljs-keyword"><span style="color:#000000;">private</span></span> <span class="hljs-keyword"><span style="color:#000000;">static</span></span> KafkaProducer&lt;String,String&gt; producer = <span class="hljs-keyword"><span style="color:#000000;">null</span></span>;

    <span class="hljs-comment"><span style="color:#000000;">/*</span>
<span style="color:#000000;">    初始化生产者</span>
<span style="color:#000000;">     */</span></span>
    <span class="hljs-keyword"><span style="color:#000000;">static</span></span> {
        Properties configs = initConfig();
        producer = <span class="hljs-keyword"><span style="color:#000000;">new</span></span> KafkaProducer&lt;String, String&gt;(configs);
    }

    <span class="hljs-comment"><span style="color:#000000;">/*</span>
<span style="color:#000000;">    初始化配置</span>
<span style="color:#000000;">     */</span></span>
    <span class="hljs-keyword"><span style="color:#000000;">private</span></span> <span class="hljs-keyword"><span style="color:#000000;">static</span></span> Properties <span class="hljs-title"><span style="color:#000000;">initConfig</span></span>(){
        Properties properties = <span class="hljs-keyword"><span style="color:#000000;">new</span></span> Properties();
        properties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,BROKER_LIST);
        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());
        properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,StringSerializer.class.getName());
        <span class="hljs-keyword"><span style="color:#000000;">return</span></span> properties;
    }

    <span class="hljs-keyword"><span style="color:#000000;">public</span></span> <span class="hljs-keyword"><span style="color:#000000;">static</span></span> <span class="hljs-keyword"><span style="color:#000000;">void</span></span> <span class="hljs-title"><span style="color:#000000;">main</span></span>(String[] args) <span class="hljs-keyword"><span style="color:#000000;">throws</span></span> InterruptedException {
        <span class="hljs-comment"><span style="color:#000000;">//消息实体</span></span>
        ProducerRecord&lt;String , String&gt; record = <span class="hljs-keyword"><span style="color:#000000;">null</span></span>;
        <span class="hljs-keyword"><span style="color:#000000;">for</span></span> (<span class="hljs-keyword"><span style="color:#000000;">int</span></span> i = <span class="hljs-number"><span style="color:#000000;">0</span></span>; i &lt; <span class="hljs-number"><span style="color:#000000;">1000</span></span>; i++) {
            record = <span class="hljs-keyword"><span style="color:#000000;">new</span></span> ProducerRecord&lt;String, String&gt;(TOPIC, <span class="hljs-string"><span style="color:#000000;">"value"</span></span>+(<span class="hljs-keyword"><span style="color:#000000;">int</span></span>)(<span class="hljs-number"><span style="color:#000000;">10</span></span>*(Math.random())));
            <span class="hljs-comment"><span style="color:#000000;">//发送消息</span></span>
            producer.send(record, <span class="hljs-keyword"><span style="color:#000000;">new</span></span> Callback() {
                <span class="hljs-annotation"><span style="color:#000000;">@Override</span></span>
                <span class="hljs-keyword"><span style="color:#000000;">public</span></span> <span class="hljs-keyword"><span style="color:#000000;">void</span></span> <span class="hljs-title"><span style="color:#000000;">onCompletion</span></span>(RecordMetadata recordMetadata, Exception e) {
                    <span class="hljs-keyword"><span style="color:#000000;">if</span></span> (<span class="hljs-keyword"><span style="color:#000000;">null</span></span> != e){
                        log.info(<span class="hljs-string"><span style="color:#000000;">"send error"</span></span> + e.getMessage());
                    }<span class="hljs-keyword"><span style="color:#000000;">else</span></span> {
                        System.out.println(String.format(<span class="hljs-string"><span style="color:#000000;">"offset:%s,partition:%s"</span></span>,recordMetadata.offset(),recordMetadata.partition()));
                    }
                }
            });
        }
        producer.close();
    }
}</code></pre><ul class="pre-numbering"><li style="color:rgb(153,153,153);"><br></li></ul><p>Consumer : </p><pre class="prettyprint"><code class="language-java hljs has-numbering"><span class="hljs-keyword"><span style="color:#000000;">package</span></span> cn.milo.kafka;

<span class="hljs-keyword"><span style="color:#000000;">import</span></span> org.apache.kafka.clients.consumer.ConsumerRecord;
<span class="hljs-keyword"><span style="color:#000000;">import</span></span> org.apache.kafka.clients.consumer.ConsumerRecords;
<span class="hljs-keyword"><span style="color:#000000;">import</span></span> org.apache.kafka.clients.consumer.KafkaConsumer;
<span class="hljs-keyword"><span style="color:#000000;">import</span></span> org.apache.log4j.Logger;

<span class="hljs-keyword"><span style="color:#000000;">import</span></span> java.util.Properties;

<span class="hljs-javadoc"><span style="color:#000000;">/******************************************************</span>
<span style="color:#000000;"> ******<span class="hljs-javadoctag"> @ClassName</span>   : Consumer.java                                            </span>
<span style="color:#000000;"> ******<span class="hljs-javadoctag"> @author</span>      : milo ^ ^                     </span>
<span style="color:#000000;"> ******<span class="hljs-javadoctag"> @date</span>        : 2018 03 14 15:50     </span>
<span style="color:#000000;"> ******<span class="hljs-javadoctag"> @version</span>     : v1.0.x                      </span>
<span style="color:#000000;"> *******************************************************/</span></span>
<span class="hljs-keyword"><span style="color:#000000;">public</span></span> <span class="hljs-class"><span class="hljs-keyword"><span style="color:#000000;">class</span></span> <span class="hljs-title"><span style="color:#000000;">Consumer</span></span> {</span>

    <span class="hljs-keyword"><span style="color:#000000;">static</span></span> Logger log = Logger.getLogger(Producer.class);

    <span class="hljs-keyword"><span style="color:#000000;">private</span></span> <span class="hljs-keyword"><span style="color:#000000;">static</span></span> <span class="hljs-keyword"><span style="color:#000000;">final</span></span> String TOPIC = <span class="hljs-string"><span style="color:#000000;">"milo2"</span></span>;
    <span class="hljs-keyword"><span style="color:#000000;">private</span></span> <span class="hljs-keyword"><span style="color:#000000;">static</span></span> <span class="hljs-keyword"><span style="color:#000000;">final</span></span> String BROKER_LIST = <span class="hljs-string"><span style="color:#000000;">"118.212.149.51:9092"</span></span>;
    <span class="hljs-keyword"><span style="color:#000000;">private</span></span> <span class="hljs-keyword"><span style="color:#000000;">static</span></span> KafkaConsumer&lt;String,String&gt; consumer = <span class="hljs-keyword"><span style="color:#000000;">null</span></span>;

    <span class="hljs-keyword"><span style="color:#000000;">static</span></span> {
        Properties configs = initConfig();
        consumer = <span class="hljs-keyword"><span style="color:#000000;">new</span></span> KafkaConsumer&lt;String, String&gt;(configs);
    }

    <span class="hljs-keyword"><span style="color:#000000;">private</span></span> <span class="hljs-keyword"><span style="color:#000000;">static</span></span> Properties <span class="hljs-title"><span style="color:#000000;">initConfig</span></span>(){
        Properties properties = <span class="hljs-keyword"><span style="color:#000000;">new</span></span> Properties();
        properties.put(<span class="hljs-string"><span style="color:#000000;">"bootstrap.servers"</span></span>,BROKER_LIST);
        properties.put(<span class="hljs-string"><span style="color:#000000;">"group.id"</span></span>,<span class="hljs-string"><span style="color:#000000;">"0"</span></span>);
        properties.put(<span class="hljs-string"><span style="color:#000000;">"key.deserializer"</span></span>, <span class="hljs-string"><span style="color:#000000;">"org.apache.kafka.common.serialization.StringDeserializer"</span></span>);
        properties.put(<span class="hljs-string"><span style="color:#000000;">"value.deserializer"</span></span>, <span class="hljs-string"><span style="color:#000000;">"org.apache.kafka.common.serialization.StringDeserializer"</span></span>);
        properties.setProperty(<span class="hljs-string"><span style="color:#000000;">"enable.auto.commit"</span></span>, <span class="hljs-string"><span style="color:#000000;">"true"</span></span>);
        properties.setProperty(<span class="hljs-string"><span style="color:#000000;">"auto.offset.reset"</span></span>, <span class="hljs-string"><span style="color:#000000;">"earliest"</span></span>);
        <span class="hljs-keyword"><span style="color:#000000;">return</span></span> properties;
    }


    <span class="hljs-keyword"><span style="color:#000000;">public</span></span> <span class="hljs-keyword"><span style="color:#000000;">static</span></span> <span class="hljs-keyword"><span style="color:#000000;">void</span></span> <span class="hljs-title"><span style="color:#000000;">main</span></span>(String[] args) {
        <span class="hljs-keyword"><span style="color:#000000;">while</span></span> (<span class="hljs-keyword"><span style="color:#000000;">true</span></span>) {
            ConsumerRecords&lt;String, String&gt; records = consumer.poll(<span class="hljs-number"><span style="color:#000000;">10</span></span>);
            <span class="hljs-keyword"><span style="color:#000000;">for</span></span> (ConsumerRecord&lt;String, String&gt; record : records) {
                log.info(record);
            }
        }
    }
}</code></pre><ul class="pre-numbering"><li style="color:rgb(153,153,153);"><br></li></ul><h1><a></a>参考文献</h1><p>[1].kafka 学习 非常详细的经典教程 : <a href="http://blog.csdn.net/tangdong3415/article/details/53432166" rel="nofollow"><u><span style="color:#0066cc;">http://blog.csdn.net/tangdong3415/article/details/53432166</span></u></a> <br>[2].Kafka入门与实践.牟大恩</p>转自转自<br>            </div>
                </div>