---
layout:     post
title:      第20天：   嵌套复杂类型
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
Hive学习实战   <br>
--------------------------------------------------------------<br>
Hive从入门到实战【40讲】---笔记记录<br>
--------------------------------------------------------------<br>
 <br>
hive命令<br>
1、show tables;<br>
2、show databases;<br>
3、 desc login; ---查看表结构。<br>
4、 show partitions test5; --查看分区<br><br><br>
create table login_struct(<br>
 ip string,<br>
 user struct&lt;uid:bigint,name :string&gt;<br>
 )<br>
 partitioned by (dt string)<br>
 row format delimited<br>
 fields terminated by ','<br>
 collection items terminated by '|'<br>
 stored as textfile;<br><br><br><br><br>
load data local inpath<br>
'/hadoop/hive0.9/testHive/login_struct.txt'<br>
into table login_struct  partition (dt='2015-02-07');<br><br><br>
第20天：  <br>
嵌套复杂类型<br><br><br>
假设登录表<br><br><br>
create table login_game_complex(<br>
    ip string,<br>
    uid  string,<br>
    gameinfo  map&lt;bigint, struct&lt;name:string,score:bigint,level:string&gt;&gt;<br>
)<br>
partitioned by (dt string)<br>
 row format delimited <br>
 stored as textfile;<br>
  <br><br><br>
嵌套复合类型<br><br><br>
这标识登录表每个用户多会有游戏信息，<br>
而用户的游戏信息有多个，<br>
key是游戏的id<br>
value是一个stucet，包含游戏的名字，积分，等级<br>
这种复杂类型的入库格式很麻烦<br>
，而且符合嵌套层次很多时，要生成的正确 的格式也比较复杂<br>
，很容易出错，这里稍微提一下在嵌套层次多的情况下<br>
分隔符会随着符合类型嵌套层次的递增，<br>
分隔符 默认会以 \1\2\3.. 变化<br>
这里不介绍从shell下生成文件local data入库<br><br><br><br><br><br><br>
 <br><br><br>
create table login_game_simple2(<br>
  <br>
ip  string,<br>
  uid  string,<br>
  gameid  bigint,<br>
  gamename  string,<br>
   gamescore  bigint,<br>
  gamelevel  string <br>
)<br>
partitioned by (dt string)<br>
 row format delimited <br>
  fields terminated by ','<br>
 stored as textfile;<br>
  <br><br><br><br><br><br><br><br><br>
192.168.1.0,110,1,wow,100,v1<br>
192.168.1.0,110,2,caojian,100,v2<br>
192.168.1.0,110,3,曹健,100,v3<br>
192.168.1.0,110,1,崔,100,v3<br>
192.168.1.0,111,2,接w,100,v4<br>
192.168.1.1,111,3,刚w,1002,v<br>
192.168.1.1,111,1,w私会w,1020,v1<br>
192.168.1.1,111,1,w,1010,v6<br>
192.168.1.1,112,1,wtouceng,1100,v1<br>
192.168.1.1,112,1,wow,100,v7<br><br><br><br><br><br><br>
load data local inpath<br>
'/hadoop/hive0.9/testHive/login_simple.txt'<br>
into table login_game_simple2 partition (dt='2015-02-07');<br><br><br><br><br>
  <br>
ip  string,<br>
  uid  string,<br>
  gameid  bigint,<br>
  gamename  string,<br>
   gamescore  bigint,<br>
  gamelevel  string <br><br><br>
    ip string,<br>
    uid  string,<br>
    gameinfo <br>
    map&lt;bigint,<br>
    struct&lt;name:string,score:bigint,level:string&gt;&gt;<br><br><br><br><br>
insert overwrite table login_game_complex<br>
 partition (dt='2015-02-07')<br>
 select ip ,uid,map(gameid,named_struct(<br>
 'name' ,gamename,'score',gamescore,'level',gamelevel)<br>
 ) from login_game_simple2 where dt='2015-02-07' ;<br><br><br><br><br><br><br>
 <span> </span>NULL<span> </span>
{}<span> </span>2015-02-07<br>
192.168.1.0<span> </span>110<span>
</span>{1:{"name":"wow","score":100,"level":"v1"}}<span> </span>
2015-02-07<br>
192.168.1.0<span> </span>110<span>
</span>{2:{"name":"caojian","score":100,"level":"v2"}}<span>
</span>2015-02-07<br>
192.168.1.0<span> </span>110<span>
</span>{3:{"name":"曹健","score":100,"level":"v3"}}<span> </span>
2015-02-07<br>
192.168.1.0<span> </span>110<span>
</span>{1:{"name":"崔","score":100,"level":"v3"}}<span> </span>
2015-02-07<br>
192.168.1.0<span> </span>111<span>
</span>{2:{"name":"接w","score":100,"level":"v4"}}<span> </span>
2015-02-07<br>
192.168.1.1<span> </span>111<span>
</span>{3:{"name":"刚w","score":1002,"level":"v"}}<span> </span>
2015-02-07<br>
192.168.1.1<span> </span>111<span>
</span>{1:{"name":"w私会w","score":1020,"level":"v1"}}<span>
</span>2015-02-07<br>
192.168.1.1<span> </span>111<span>
</span>{1:{"name":"w","score":1010,"level":"v6"}}<span> </span>
2015-02-07<br>
192.168.1.1<span> </span>112<span>
</span>{1:{"name":"wtouceng","score":1100,"level":"v1"}}<span>
</span>2015-02-07<br>
192.168.1.1<span> </span>112<span>
</span>{1:{"name":"wow","score":100,"level":"v7"}}<span> </span>
2015-02-07<br><span></span>NULL<span> </span>{}<span>
</span>2015-02-07<br><br><br><br><br><br><br>
正则表达式<br>
 <br><br><br>
create table test_serde( <br>
 c0  string,<br>
  c1 string,<br>
  c2  string <br>
) <br>
 row format <br>
serde 'org.apache.hadoop.hive.contrib.serde2.RegexSerDe' <br>
with  serdeproperties<br>
('input.regex' = '([^ ]*) ([^ ]* ([^ ]*))',<br>
'output.format.string'= '%1&amp;% %2&amp;% %3&amp;%')<br>
stored as textfile; ;<br>
  <br><br><br>
add jar /hadoop/hive0.9/hive/lib/hive-contrib-0.9.0.jar <br><br><br><br><br><br><br><br><br>
load data local inpath<br>
'/hadoop/hive0.9/hive/lib/r.txt'<br>
into table test_serde ;<br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>            </div>
                </div>