---
layout:     post
title:      spark学习笔记(一)
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<h2><a id="spark_2"></a>spark入门学习笔记</h2>
<h3><a id="1_4"></a>1、课程目标</h3>
<ul>
<li>1、熟悉spark相关概念</li>
<li>2、搭建一个spark集群</li>
<li>3、编写简单的spark应用程序</li>
</ul>
<h3><a id="2spark_10"></a>2、spark概述</h3>
<ul>
<li>1、什么是spark
<ul>
<li>基于内存的计算引擎，它的计算速度非常快。但是仅仅只涉及到数据的计算，并没有涉及到数据的存储。</li>
</ul>
</li>
<li>2、为什么要学习spark
<ul>
<li>运行速度比mapreduce快很多。</li>
</ul>
</li>
<li>3、spark特点
<ul>
<li>1、速度快（比mapreduce在内存中快100倍，在磁盘中快10倍）
<ul>
<li>spark中的job中间结果可以不落地，可以存放在内存中。</li>
<li>mapreduce中map和reduce任务都是以进程的方式运行着，而spark中的job是以线程方式运行在进程中。</li>
</ul>
</li>
<li>2、易用性（可以通过java/scala/python/R开发spark应用程序）</li>
<li>3、通用性（可以使用spark sql/spark streaming/mlib/Graphx）</li>
<li>4、兼容性（spark程序可以运行在standalone/yarn/mesos）</li>
</ul>
</li>
</ul>
<h3><a id="3spark_24"></a>3、spark安装部署</h3>
<ul>
<li>
<p>1、下载spark安装包</p>
</li>
<li>
<p>2、规划spark安装目录</p>
</li>
<li>
<p>3、解压安装包</p>
</li>
<li>
<p>4、重命名安装目录</p>
</li>
<li>
<p>5、修改配置文件</p>
<ul>
<li><a href="http://spark-env.sh" rel="nofollow">spark-env.sh</a>(需要将spark-env.sh.template重命名)
<ul>
<li>配置java环境变量
<ul>
<li>export JAVA_HOME=/export/server/jdk1.8.0_141</li>
</ul>
</li>
<li>配置master的地址
<ul>
<li>export SPARK_MASTER_HOST=node-1</li>
</ul>
</li>
<li>配置master的端口
<ul>
<li>export SPARK_MASTER_PORT=7077</li>
</ul>
</li>
</ul>
</li>
<li>slaves(需要将slaves.template重命名)
<ul>
<li>需要添加从节点（整个集群中小弟）
<ul>
<li>node-2</li>
<li>node-3</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>6、分发配置文件到其他节点</p>
<ul>
<li>scp -r /export/server/spark root@node-2:/export/server</li>
<li>scp -r /export/server/spark root@node-3:/export/server</li>
</ul>
</li>
<li>
<p>7、配置spark环境</p>
<p>[root@node-1 spark]# vi /etc/profile</p>
<ul>
<li>
<p>export SPARK_HOME=/export/server/spark</p>
</li>
<li>
<p>export PATH=$PATH:$SPARK_HOME/bin:$SPARK_HOME/sbin</p>
<p><img src="../img/spark%E5%AE%89%E8%A3%85.png" alt=""></p>
</li>
</ul>
</li>
<li>
<p>8、拷贝spark环境变量到其他节点</p>
<ul>
<li>scp /etc/profile root@node-2:/etc</li>
<li>scp /etc/profile root@node-3:/etc</li>
</ul>
</li>
<li>
<p>9、让所有节点的spark环境变量生效</p>
<ul>
<li>在所有节点上执行
<ul>
<li>source /etc/profile</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3><a id="4spark_70"></a>4、spark集群启动和停止</h3>
<ul>
<li>启动spark集群
<ul>
<li>在主节点上执行
<ul>
<li>$SPARK_HOME/sbin/start-all.sh</li>
</ul>
</li>
</ul>
</li>
<li>停止spark集群
<ul>
<li>在主节点上执行
<ul>
<li>$SPARK_HOME/sbin/stop-all.sh</li>
</ul>
</li>
</ul>
</li>
<li>spark的web管理界面
<ul>
<li>访问： <a href="http://xn--node-1ip-0b7n6ep536a:8080" rel="nofollow">http://node-1的ip地址:8080</a></li>
</ul>
</li>
</ul>
<h3><a id="5zookeeperspark_81"></a>5、通过zookeeper搭建高可用spark集群</h3>
<ul>
<li>
<p>1、需要搭建一个zk集群</p>
</li>
<li>
<p>2、配置文件修改（<a href="http://spark-env.sh" rel="nofollow">spark-env.sh</a>）</p>
<ul>
<li>
<p>注释掉</p>
<ul>
<li>export SPARK_MASTER_HOST=node-1</li>
</ul>
</li>
<li>
<p>添加 SPARK_DAEMON_JAVA_OPTS</p>
<pre><code class="prism language-shell"><span class="token function">export</span> SPARK_DAEMON_JAVA_OPTS<span class="token operator">=</span><span class="token string">"-Dspark.deploy.recoveryMode=ZOOKEEPER  -Dspark.deploy.zookeeper.url=node-1:2181,node-2:2181,node-3:2181  -Dspark.deploy.zookeeper.dir=/spark"</span>
</code></pre>
</li>
</ul>
</li>
<li>
<p>拷贝当前另外两台机器路径</p>
<pre><code class="prism language-shell"><span class="token function">scp</span> spark-env.sh node-2:<span class="token variable">$PWD</span>
<span class="token function">scp</span> spark-env.sh node-3:<span class="token variable">$PWD</span>
</code></pre>
</li>
<li>
<p>3、启动zk集群</p>
</li>
<li>
<p>4、在一台节点上启动spark集群</p>
<ul>
<li><a href="http://start-all.sh" rel="nofollow">start-all.sh</a></li>
</ul>
</li>
<li>
<p>5、在另一台节点单独启动master</p>
<ul>
<li><a href="http://start-master.sh" rel="nofollow">start-master.sh</a></li>
</ul>
</li>
</ul>
<h3><a id="6sparkshell_114"></a>6、spark-shell使用</h3>
<ul>
<li>1、利用spark-shell --master local[N] 读取本地数据文件实现单词计数
<ul>
<li>
<p>–master local[N]</p>
<pre><code class="prism language-shell">spark-shell --master local<span class="token punctuation">[</span>2<span class="token punctuation">]</span>
</code></pre>
<pre><code class="prism language-shell">sc.textFile<span class="token punctuation">(</span><span class="token string">"file:///root///words.txt"</span><span class="token punctuation">)</span>.flatMap<span class="token punctuation">(</span>_.split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">))</span>.map<span class="token variable"><span class="token punctuation">((</span>_<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">))</span></span>.reduceByKey<span class="token punctuation">(</span>_+_<span class="token punctuation">)</span>.collect
</code></pre>
<ul>
<li>这里是采用本地单机版的来进行任务的计算，N是一个正整数，它表示本地采用N个线程来进行任务的计算。会生成一个SparkSubmit进程</li>
</ul>
</li>
</ul>
</li>
<li>2、利用spark-shell --master local[N]读取HDFS上数据文件实现单词计数
<ul>
<li>spark与hadoop整合
<ul>
<li>修改配置文件 <a href="http://spark-env.sh" rel="nofollow">spark-env.sh</a>
<ul>
<li>
<p>添加 HADOOP_CONF_DIR 指定hadoop集群中配置文件的路径</p>
<pre><code class="prism language-shell"><span class="token function">export</span> HADOOP_CONF_DIR<span class="token operator">=</span>/export/server/hadoop-2.7.4/etc/hadoop
</code></pre>
<p>分发到另外两台机器</p>
<pre><code class="prism language-shell"><span class="token punctuation">[</span>root@node-1 conf<span class="token punctuation">]</span><span class="token comment"># scp spark-env.sh node-2:$PWD</span>
<span class="token punctuation">[</span>root@node-1 conf<span class="token punctuation">]</span><span class="token comment"># scp spark-env.sh node-3:$PWD</span>
</code></pre>
</li>
<li>
<p>上传words.txt文件到Hadoop</p>
<pre><code class="prism language-shell"><span class="token punctuation">[</span>root@node-1 spark<span class="token punctuation">]</span><span class="token comment"># hadoop fs -put /root/words.txt /</span>
<span class="token punctuation">[</span>root@node-1 spark<span class="token punctuation">]</span><span class="token comment"># hadoop fs -cat /words.txt</span>
hello me
hello you
hello her<span class="token punctuation">[</span>root@node-1 spark<span class="token punctuation">]</span><span class="token comment"># spark-shell --master local[2]</span>
</code></pre>
</li>
<li>
<p>在 spark shell 中用 scala 语言编写 spark 程序</p>
<pre><code class="prism language-shell">sc.textFile<span class="token punctuation">(</span><span class="token string">"/words.txt"</span><span class="token punctuation">)</span>.flatMap<span class="token punctuation">(</span>_.split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">))</span>.map<span class="token variable"><span class="token punctuation">((</span>_<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">))</span></span>.reduceByKey<span class="token punctuation">(</span>_+_<span class="token punctuation">)</span>.collect
</code></pre>
</li>
<li>
<p>将返回以下信息</p>
<pre><code>scala&gt; sc.textFile("/words.txt").flatMap(_.split(" ")).map((_,1)).reduceByKey(_+_).collect
res0: Array[(String, Int)] = Array((hello,3), (me,1), (you,1), (her,1))
</code></pre>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>3、利用spark-shell指定具体的master地址
<ul>
<li>
<p>启动集群收直接输入启动脚本</p>
<pre><code class="prism language-shell">spark-shell --master spark://node-1:7077 --executor-memory 1G --total-executor-cores 2
</code></pre>
</li>
<li>
<p>显示结果如下</p>
<p><img src="../img/%E8%BF%90%E8%A1%8Cspark-shell%E6%8C%87%E5%AE%9A%E5%85%B7%E4%BD%93%E7%9A%84master%E5%9C%B0%E5%9D%80.png" alt=""></p>
</li>
<li>
<p>同时web页面如下</p>
<p><img src="../img/web%E9%A1%B5%E9%9D%A2.png" alt=""></p>
</li>
<li>
<p>在 spark shell 中用 scala 语言编写 spark 程序将结果保存HDFS</p>
<pre><code class="prism language-shell">sc.textFile<span class="token punctuation">(</span><span class="token string">"/words.txt"</span><span class="token punctuation">)</span>.flatMap<span class="token punctuation">(</span>_.split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">))</span>.map<span class="token variable"><span class="token punctuation">((</span>_<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">))</span></span>.reduceByKey<span class="token punctuation">(</span>_+_<span class="token punctuation">)</span>.saveAsTextFile<span class="token punctuation">(</span><span class="token string">"/out_spark"</span><span class="token punctuation">)</span>
</code></pre>
</li>
</ul>
</li>
</ul>
<h3><a id="7IDEAspark_wordcount_187"></a>7、利用IDEA编写spark wordcount程序</h3>
<ul>
<li>
<p>构建maven工程</p>
<ul>
<li>利用scala语言开发spark wordcount程序（本地单机版）</li>
</ul>
</li>
</ul>
<pre><code class="prism language-scala">package cn.itcast.wordcount

import org.apache.spark.{SparkConf, SparkContext}
import org.apache.spark.rdd.RDD
//todo:需求：利用scala语言实现spark wordcount程序
  object WordCount {
    def main(args: Array[String]): Unit = {
        //1、创建sparkConf对象,设置appName和master的地址，local[2]表示本地运行2个线程
        val sparkConf: SparkConf = new SparkConf().setAppName("WordCount").setMaster("local[2]")
         //2、创建sparkcontext对象
          val sc = new SparkContext(sparkConf)
        //设置日志输出级别
          sc.setLogLevel("WARN")

         // 3、读取数据文件
          val data: RDD[String] = sc.textFile("D:\\words.txt")

         //4、切分文件中的每一行,返回文件所有单词
         val words: RDD[String] = data.flatMap(_.split(" "))

        //5、每个单词记为1，(单词，1)
        val wordAndOne: RDD[(String, Int)] = words.map((_,1))

        //6、相同单词出现的次数累加
        val result: RDD[(String, Int)] = wordAndOne.reduceByKey(_+_)

      //按照单词出现的次数降序排列
        val sortResult: RDD[(String, Int)] = result.sortBy(_._2,false)

        //7、收集结果数据
        val finalResult: Array[(String, Int)] = sortResult.collect()

        //8、打印结果数据
          finalResult.foreach(x=&gt;println(x))
            //9、关闭sc
      sc.stop()
    }
  }

</code></pre>
<pre><code class="prism language-scala">
  * 利用scala语言开发spark wordcount程序（运行在集群中）

    * ```scala
      package cn.itcast.wordcount

      import org.apache.spark.{SparkConf, SparkContext}
      import org.apache.spark.rdd.RDD
      
       //todo:需求：利用scala语言实现spark wordcount程序
  object WordCount_Online {
    def main(args: Array[String]): Unit = {
        //1、创建sparkConf对象,设置appName和master的地址
        val sparkConf: SparkConf = new SparkConf().setAppName("WordCount_Online")

         //2、创建sparkcontext对象
          val sc = new SparkContext(sparkConf)

        //设置日志输出级别
          sc.setLogLevel("WARN")

         // 3、读取数据文件
          val data: RDD[String] = sc.textFile(args(0))

         //4、切分文件中的每一行,返回文件所有单词
         val words: RDD[String] = data.flatMap(_.split(" "))

        //5、每个单词记为1，(单词，1)
        val wordAndOne: RDD[(String, Int)] = words.map((_,1))

        //6、相同单词出现的次数累加
        val result: RDD[(String, Int)] = wordAndOne.reduceByKey(_+_)

      //按照单词出现的次数降序排列
        val sortResult: RDD[(String, Int)] = result.sortBy(_._2,false)

        //7、结果数据保存在HDFS上
        sortResult.saveAsTextFile(args(1))
            //8、关闭sc
      sc.stop()
    }
  } 
</code></pre>
<h3><a id="8_281"></a>8.提交集群步骤步骤</h3>
<p>1.打jar包</p>
<p>2.把打好的jar包上传到node-1根目录</p>
<p>3.提交jar到集群,提交任务脚本</p>
<pre><code class="prism language-shell">直接在node-1输入以下命令
<span class="token punctuation">[</span>root@node-1 ~<span class="token punctuation">]</span><span class="token comment"># spark-submit --class com.itheima.wordcount.WordCount_Online --master spark://node-1:7077 --executor-memory 1G --total-executor-cores 2 /root/original-spark-1.0-SNAPSHOT.jar /words.txt /spark_out</span>
</code></pre>
<p>4.此时可以在web页面查看</p>
<p><img src="../img/Scala%E6%8F%90%E4%BA%A4%E9%9B%86%E7%BE%A4web%E9%A1%B5%E9%9D%A2.png" alt=""></p>
<p>5.在hdfs查看</p>
<p><img src="../img/Scala%E6%8F%90%E4%BA%A4%E9%9B%86%E7%BE%A4hdfs%E9%A1%B5%E9%9D%A2.png" alt=""></p>
<pre><code>
  * 利用java语言开发spark wordcount程序

    * ```java
      package cn.itcast.wordcount;
</code></pre>
<pre><code class="prism language-java">  <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>SparkConf<span class="token punctuation">;</span>
  <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaPairRDD<span class="token punctuation">;</span>
  <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaRDD<span class="token punctuation">;</span>
  <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaSparkContext<span class="token punctuation">;</span>
  <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>function<span class="token punctuation">.</span>FlatMapFunction<span class="token punctuation">;</span>
  <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>function<span class="token punctuation">.</span>Function2<span class="token punctuation">;</span>
  <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>function<span class="token punctuation">.</span>PairFunction<span class="token punctuation">;</span>
  <span class="token keyword">import</span> scala<span class="token punctuation">.</span>Tuple2<span class="token punctuation">;</span>

  <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span>
  <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span>
  <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>

  <span class="token comment">//todo:需求：利用java语言开发spark wordcount程序</span>
  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WordCount_Java</span> <span class="token punctuation">{</span>
      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">//1、创建sparkConf对象</span>
          SparkConf sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAppName</span><span class="token punctuation">(</span><span class="token string">"WordCount_Java"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMaster</span><span class="token punctuation">(</span><span class="token string">"local[2]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">//2、创建sparkContext对象</span>
          JavaSparkContext jsc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaSparkContext</span><span class="token punctuation">(</span>sparkConf<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">//3、读取数据文件</span>
          JavaRDD<span class="token generics function"><span class="token punctuation">&lt;</span>String<span class="token punctuation">&gt;</span></span> dataJavaRDD <span class="token operator">=</span> jsc<span class="token punctuation">.</span><span class="token function">textFile</span><span class="token punctuation">(</span><span class="token string">"d:\\words.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">//4、切分每一行</span>
          JavaRDD<span class="token generics function"><span class="token punctuation">&lt;</span>String<span class="token punctuation">&gt;</span></span> wordsJavaRDD <span class="token operator">=</span> dataJavaRDD<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlatMapFunction</span><span class="token generics function"><span class="token punctuation">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">public</span> Iterator<span class="token generics function"><span class="token punctuation">&lt;</span>String<span class="token punctuation">&gt;</span></span> <span class="token function">call</span><span class="token punctuation">(</span>String line<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
                  String<span class="token punctuation">[</span><span class="token punctuation">]</span> words <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                  <span class="token keyword">return</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">//5、每个单词记为1</span>
          JavaPairRDD<span class="token generics function"><span class="token punctuation">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token punctuation">&gt;</span></span> wordAndOneJavaPairRDD <span class="token operator">=</span> wordsJavaRDD<span class="token punctuation">.</span><span class="token function">mapToPair</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PairFunction</span><span class="token generics function"><span class="token punctuation">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Integer<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">public</span> Tuple2<span class="token generics function"><span class="token punctuation">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token punctuation">&gt;</span></span> <span class="token function">call</span><span class="token punctuation">(</span>String word<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
                  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Tuple2</span><span class="token generics function"><span class="token punctuation">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">//6、相同单词出现的次数累加</span>
          JavaPairRDD<span class="token generics function"><span class="token punctuation">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token punctuation">&gt;</span></span> resultJavaPairRDD <span class="token operator">=</span> wordAndOneJavaPairRDD<span class="token punctuation">.</span><span class="token function">reduceByKey</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function2</span><span class="token generics function"><span class="token punctuation">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> Integer<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">public</span> Integer <span class="token function">call</span><span class="token punctuation">(</span>Integer v1<span class="token punctuation">,</span> Integer v2<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
                  <span class="token keyword">return</span> v1 <span class="token operator">+</span> v2<span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

          <span class="token comment">//按照单词出现的次数进行降序排列，思想：先把（单词，次数）位置颠倒（次数，单词）</span>
          JavaPairRDD<span class="token generics function"><span class="token punctuation">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token punctuation">&gt;</span></span> reverseJavaPairRDD <span class="token operator">=</span> resultJavaPairRDD<span class="token punctuation">.</span><span class="token function">mapToPair</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PairFunction</span><span class="token operator">&lt;</span>Tuple2<span class="token generics function"><span class="token punctuation">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> String<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">public</span> Tuple2<span class="token generics function"><span class="token punctuation">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token punctuation">&gt;</span></span> <span class="token function">call</span><span class="token punctuation">(</span>Tuple2<span class="token generics function"><span class="token punctuation">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token punctuation">&gt;</span></span> tuple2<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
                  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Tuple2</span><span class="token generics function"><span class="token punctuation">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>tuple2<span class="token punctuation">.</span>_2<span class="token punctuation">,</span> tuple2<span class="token punctuation">.</span>_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">// 按照单词出现的次数进行降序排列 调用sortByKey方法，然后将（次数，单词）颠倒为（单词，次数）</span>
          JavaPairRDD<span class="token generics function"><span class="token punctuation">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token punctuation">&gt;</span></span> sortJavaPairRDD <span class="token operator">=</span> reverseJavaPairRDD<span class="token punctuation">.</span><span class="token function">sortByKey</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapToPair</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PairFunction</span><span class="token operator">&lt;</span>Tuple2<span class="token generics function"><span class="token punctuation">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> String<span class="token punctuation">,</span> Integer<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">public</span> Tuple2<span class="token generics function"><span class="token punctuation">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token punctuation">&gt;</span></span> <span class="token function">call</span><span class="token punctuation">(</span>Tuple2<span class="token generics function"><span class="token punctuation">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token punctuation">&gt;</span></span> tuple2<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
                  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Tuple2</span><span class="token generics function"><span class="token punctuation">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>tuple2<span class="token punctuation">.</span>_2<span class="token punctuation">,</span> tuple2<span class="token punctuation">.</span>_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

          <span class="token comment">//7、收集结果数据</span>
          List<span class="token operator">&lt;</span>Tuple2<span class="token generics function"><span class="token punctuation">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token punctuation">&gt;</span></span><span class="token operator">&gt;</span> finalResult <span class="token operator">=</span> sortJavaPairRDD<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//8、循环打印结果数据</span>
          <span class="token keyword">for</span><span class="token punctuation">(</span>Tuple2<span class="token generics function"><span class="token punctuation">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token punctuation">&gt;</span></span> tuple<span class="token operator">:</span>finalResult<span class="token punctuation">)</span><span class="token punctuation">{</span>
              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tuple<span class="token punctuation">.</span>_1<span class="token operator">+</span><span class="token string">"出现的次数"</span><span class="token operator">+</span>tuple<span class="token punctuation">.</span>_2<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>

          <span class="token comment">//9、关闭sparkcontext</span>
          jsc<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre>

            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>