---
layout:     post
title:      kafka connect
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                <h3 style="margin-top:10px;margin-bottom:10px;padding:0px;font-size:16px;line-height:1.5;color:rgb(51,51,51);font-family:Verdana, Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);">一. Kafka Connect简介</h3><p style="margin:10px auto;color:rgb(51,51,51);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:rgb(255,255,255);">　　Kafka是一个使用越来越广的消息系统，尤其是在大数据开发中（实时数据处理和分析）。为何集成其他系统和解耦应用，经常使用Producer来发送消息到Broker，并使用Consumer来消费Broker中的消息。Kafka Connect是到0.9版本才提供的并极大的简化了其他系统与Kafka的集成。Kafka Connect运用用户快速定义并实现各种Connector(File,Jdbc,Hdfs等)，这些功能让大批量数据导入/导出Kafka很方便。</p><p style="margin:10px auto;color:rgb(51,51,51);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:rgb(255,255,255);">             <img src="https://images2017.cnblogs.com/blog/314515/201708/314515-20170821220746418-613069141.png" alt="" style="padding:0px;border:none;max-width:800px;"></p><p style="margin:10px auto;color:rgb(51,51,51);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:rgb(255,255,255);">如图中所示，左侧的Sources负责从其他异构系统中读取数据并导入到Kafka中；右侧的Sinks是把Kafka中的数据写入到其他的系统中。</p><h3 style="margin-top:10px;margin-bottom:10px;padding:0px;font-size:16px;line-height:1.5;color:rgb(51,51,51);font-family:Verdana, Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);">二. 各种Kafka Connector</h3><p style="margin:10px auto;color:rgb(51,51,51);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:rgb(255,255,255);">　　Kafka Connector很多，包括开源和商业版本的。如下列表中是常用的开源Connector</p><div class="su-table" style="margin:0px;padding:0px;color:rgb(51,51,51);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:rgb(255,255,255);"><table style="margin:0px;padding:0px;border-spacing:0px;max-width:850px;border:1px solid #C0C0C0;height:202px;width:1091px;"><tbody style="margin:0px;padding:0px;"><tr class="su-even" style="margin:0px;padding:0px;"><td style="margin:0px;padding:3px;border-color:#C0C0C0;border-collapse:collapse;text-align:center;"><span style="margin:0px;padding:0px;font-size:15px;">Connectors</span></td><td style="margin:0px;padding:3px;border-color:#C0C0C0;border-collapse:collapse;text-align:center;"><span style="margin:0px;padding:0px;font-size:15px;">References</span></td></tr><tr style="margin:0px;padding:0px;"><td style="margin:0px;padding:3px;border-color:#C0C0C0;border-collapse:collapse;"><span style="margin:0px;padding:0px;font-size:15px;">Jdbc</span></td><td style="margin:0px;padding:3px;border-color:#C0C0C0;border-collapse:collapse;"><span style="margin:0px;padding:0px;font-size:15px;"><a href="https://github.com/apache/ignite/tree/master/modules/kafka" rel="nofollow" style="margin:0px;padding:0px;color:rgb(0,0,0);">Source</a>,<span style="margin:0px;padding:0px;"> <a href="https://github.com/apache/ignite/tree/master/modules/kafka" rel="nofollow" style="margin:0px;padding:0px;color:rgb(0,0,0);">Sink</a></span></span></td></tr><tr class="su-even" style="margin:0px;padding:0px;"><td style="margin:0px;padding:3px;border-color:#C0C0C0;border-collapse:collapse;"><span style="margin:0px;padding:0px;font-size:15px;">Elastic Search</span></td><td style="margin:0px;padding:3px;border-color:#C0C0C0;border-collapse:collapse;"><span style="margin:0px;padding:0px;font-size:15px;"><a href="https://github.com/ksenji/kafka-connect-es" rel="nofollow" style="margin:0px;padding:0px;color:rgb(0,0,0);">Sink1</a>,<span style="margin:0px;padding:0px;"> <a href="https://github.com/hannesstockner/kafka-connect-elasticsearch" rel="nofollow" style="margin:0px;padding:0px;color:rgb(0,0,0);">Sink2</a>,<span style="margin:0px;padding:0px;"> <a href="https://github.com/DataReply/kafka-connect-elastic-search-sink" rel="nofollow" style="margin:0px;padding:0px;color:rgb(0,0,0);">Sink3</a></span></span></span></td></tr><tr style="margin:0px;padding:0px;"><td style="margin:0px;padding:3px;border-color:#C0C0C0;border-collapse:collapse;"><span style="margin:0px;padding:0px;font-size:15px;">Cassandra</span></td><td style="margin:0px;padding:3px;border-color:#C0C0C0;border-collapse:collapse;"><span style="margin:0px;padding:0px;font-size:15px;"><a href="https://github.com/tuplejump/kafka-connect-cassandra" rel="nofollow" style="margin:0px;padding:0px;color:rgb(0,0,0);">Source1</a>,<span style="margin:0px;padding:0px;"> <a href="https://github.com/datamountaineer/stream-reactor/tree/master/kafka-connect-cassandra" rel="nofollow" style="margin:0px;padding:0px;color:rgb(0,0,0);">Source 2</a>,<span style="margin:0px;padding:0px;"> <a href="https://github.com/tuplejump/kafka-connect-cassandra" rel="nofollow" style="margin:0px;padding:0px;color:rgb(0,0,0);">Sink1</a>,<span style="margin:0px;padding:0px;"> <a href="https://github.com/datamountaineer/stream-reactor/tree/master/kafka-connect-cassandra" rel="nofollow" style="margin:0px;padding:0px;color:rgb(0,0,0);">Sink2<span style="margin:0px;padding:0px;"> </span></a></span></span></span></span></td></tr><tr class="su-even" style="margin:0px;padding:0px;"><td style="margin:0px;padding:3px;border-color:#C0C0C0;border-collapse:collapse;"><span style="margin:0px;padding:0px;font-size:15px;">MongoDB</span></td><td style="margin:0px;padding:3px;border-color:#C0C0C0;border-collapse:collapse;"><span style="margin:0px;padding:0px;font-size:15px;"><a href="https://github.com/DataReply/kafka-connect-mongodb" rel="nofollow" style="margin:0px;padding:0px;color:rgb(0,0,0);">Source</a></span></td></tr><tr style="margin:0px;padding:0px;"><td style="margin:0px;padding:3px;border-color:#C0C0C0;border-collapse:collapse;"><span style="margin:0px;padding:0px;font-size:15px;">HBase</span></td><td style="margin:0px;padding:3px;border-color:#C0C0C0;border-collapse:collapse;"><span style="margin:0px;padding:0px;font-size:15px;"><a href="https://github.com/mravi/kafka-connect-hbase" rel="nofollow" style="margin:0px;padding:0px;color:rgb(0,0,0);">Sink</a></span></td></tr><tr class="su-even" style="margin:0px;padding:0px;"><td style="margin:0px;padding:3px;border-color:#C0C0C0;border-collapse:collapse;"><span style="margin:0px;padding:0px;font-size:15px;">Syslog</span></td><td style="margin:0px;padding:3px;border-color:#C0C0C0;border-collapse:collapse;"><span style="margin:0px;padding:0px;font-size:15px;"><a href="https://github.com/jcustenborder/kafka-connect-syslog" rel="nofollow" style="margin:0px;padding:0px;color:rgb(0,0,0);">Source</a></span></td></tr><tr style="margin:0px;padding:0px;"><td style="margin:0px;padding:3px;border-color:#C0C0C0;border-collapse:collapse;"><span style="margin:0px;padding:0px;font-size:15px;">MQTT (Source)</span></td><td style="margin:0px;padding:3px;border-color:#C0C0C0;border-collapse:collapse;"><span style="margin:0px;padding:0px;font-size:15px;"><a href="https://github.com/evokly/kafka-connect-mqtt" rel="nofollow" style="margin:0px;padding:0px;color:rgb(0,0,0);">Source</a></span></td></tr><tr class="su-even" style="margin:0px;padding:0px;"><td style="margin:0px;padding:3px;border-color:#C0C0C0;border-collapse:collapse;"><span style="margin:0px;padding:0px;font-size:15px;">Twitter (Source)</span></td><td style="margin:0px;padding:3px;border-color:#C0C0C0;border-collapse:collapse;"><span style="margin:0px;padding:0px;font-size:15px;"><a href="https://github.com/rollulus/twitter-kafka-connect" rel="nofollow" style="margin:0px;padding:0px;color:rgb(0,0,0);">Source</a>,<span style="margin:0px;padding:0px;"> <a href="https://github.com/Eneco/kafka-connect-twitter" rel="nofollow" style="margin:0px;padding:0px;color:rgb(0,0,0);">Sink</a></span></span></td></tr><tr style="margin:0px;padding:0px;"><td style="margin:0px;padding:3px;border-color:#C0C0C0;border-collapse:collapse;"><span style="margin:0px;padding:0px;font-size:15px;">S3</span></td><td style="margin:0px;padding:3px;border-color:#C0C0C0;border-collapse:collapse;"><span style="margin:0px;padding:0px;font-size:15px;"><a href="https://github.com/qubole/streamx" rel="nofollow" style="margin:0px;padding:0px;color:rgb(0,0,0);">Sink1</a>,<span style="margin:0px;padding:0px;"> <a href="https://github.com/DeviantArt/kafka-connect-s3" rel="nofollow" style="margin:0px;padding:0px;color:rgb(0,0,0);">Sink2</a><br style="margin:0px;padding:0px;"><br style="margin:0px;padding:0px;"></span></span></td></tr></tbody></table></div><p style="margin:10px auto;color:rgb(51,51,51);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:rgb(255,255,255);">　　商业版的可以通过<a href="https://www.confluent.io/product/connectors/" rel="nofollow" style="margin:0px;padding:0px;color:rgb(0,0,0);">Confluent.io</a>获得</p><h3 style="margin-top:10px;margin-bottom:10px;padding:0px;font-size:16px;line-height:1.5;color:rgb(51,51,51);font-family:Verdana, Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);">三. 示例</h3><h4 style="margin-top:10px;margin-bottom:10px;padding:0px;font-size:14px;color:rgb(51,51,51);font-family:Verdana, Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);">3.1 FileConnector Demo</h4><p style="margin:10px auto;color:rgb(51,51,51);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:rgb(255,255,255);">　本例演示如何使用Kafka Connect把Source(test.txt)转为流数据再写入到Destination(test.sink.txt)中。如下图所示：</p><p style="margin:10px auto;color:rgb(51,51,51);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:rgb(255,255,255);">          <img src="https://images2017.cnblogs.com/blog/314515/201708/314515-20170821225909980-1168791908.png" alt="" style="padding:0px;border:none;max-width:800px;"></p><p style="margin:10px auto;color:rgb(51,51,51);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:rgb(255,255,255);">      本例使用到了两个Connector:</p><ul style="margin-bottom:1em;margin-left:40px;color:rgb(51,51,51);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:rgb(255,255,255);"><li style="margin-top:0px;margin-left:0px;padding:0px;">FileStreamSource：从test.txt中读取并发布到Broker中</li><li style="margin-top:0px;margin-left:0px;padding:0px;">FileStreamSink：从Broker中读取数据并写入到test.sink.txt文件中</li></ul><p style="margin:10px auto;color:rgb(51,51,51);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:rgb(255,255,255);">　　其中的Source使用到的配置文件是${KAFKA_HOME}/config/connect-file-source.properties</p><div class="cnblogs_code" style="margin:5px 0px;padding:5px;background-color:rgb(245,245,245);border:1px solid rgb(204,204,204);color:rgb(0,0,0);font-family:'Courier New';font-size:12px;"><pre style="margin-bottom:0px;padding-right:0px;padding-left:0px;white-space:pre-wrap;font-family:'Courier New';">name=local-<span style="margin:0px;padding:0px;color:rgb(0,0,255);line-height:1.5;">file</span>-<span style="margin:0px;padding:0px;line-height:1.5;">source
connector.class</span>=<span style="margin:0px;padding:0px;line-height:1.5;">FileStreamSource
tasks.max</span>=<span style="margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;">1</span>
<span style="margin:0px;padding:0px;color:rgb(0,0,255);line-height:1.5;">file</span>=<span style="margin:0px;padding:0px;line-height:1.5;">test.txt
topic</span>=connect-test</pre></div><p style="margin:10px auto;color:rgb(51,51,51);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:rgb(255,255,255);">　　其中的Sink使用到的配置文件是${KAFKA_HOME}/config/connect-file-sink.properties</p><div class="cnblogs_code" style="margin:5px 0px;padding:5px;background-color:rgb(245,245,245);border:1px solid rgb(204,204,204);color:rgb(0,0,0);font-family:'Courier New';font-size:12px;"><pre style="margin-bottom:0px;padding-right:0px;padding-left:0px;white-space:pre-wrap;font-family:'Courier New';">name=local-<span style="margin:0px;padding:0px;color:rgb(0,0,255);line-height:1.5;">file</span>-<span style="margin:0px;padding:0px;line-height:1.5;">sink
connector.class</span>=<span style="margin:0px;padding:0px;line-height:1.5;">FileStreamSink
tasks.max</span>=<span style="margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;">1</span>
<span style="margin:0px;padding:0px;color:rgb(0,0,255);line-height:1.5;">file</span>=<span style="margin:0px;padding:0px;line-height:1.5;">test.sink.txt
topics</span>=connect-test</pre></div><p style="margin:10px auto;color:rgb(51,51,51);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:rgb(255,255,255);">　　Broker使用到的配置文件是${KAFKA_HOME}/config/connect-standalone.properties</p><div class="cnblogs_code" style="margin:5px 0px;padding:5px;background-color:rgb(245,245,245);border:1px solid rgb(204,204,204);color:rgb(0,0,0);font-family:'Courier New';font-size:12px;"><div class="cnblogs_code_toolbar" style="margin:5px 0px 0px;padding:0px;"><span class="cnblogs_code_copy" style="margin:0px;padding:0px 5px 0px 0px;line-height:1.5;"><a title="复制代码" style="margin:0px;padding:0px;color:rgb(0,0,0);border:none;"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" style="margin-bottom:0px;padding:0px;max-width:800px;border:none;"></a></span></div><pre style="margin-bottom:0px;padding-right:0px;padding-left:0px;white-space:pre-wrap;font-family:'Courier New';"><span style="margin:0px;padding:0px;line-height:1.5;">bootstrap.servers</span>=localhost:<span style="margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;">9092</span><span style="margin:0px;padding:0px;line-height:1.5;">key.converter</span>=<span style="margin:0px;padding:0px;line-height:1.5;">org.apache.kafka.connect.json.JsonConverter
value.converter</span>=<span style="margin:0px;padding:0px;line-height:1.5;">org.apache.kafka.connect.json.JsonConverter</span><span style="margin:0px;padding:0px;line-height:1.5;">
key.converter.schemas.enable</span>=<span style="margin:0px;padding:0px;color:rgb(0,0,255);line-height:1.5;">true</span><span style="margin:0px;padding:0px;line-height:1.5;">
value.converter.schemas.enable</span>=<span style="margin:0px;padding:0px;color:rgb(0,0,255);line-height:1.5;">true</span><span style="margin:0px;padding:0px;line-height:1.5;">internal.key.converter</span>=<span style="margin:0px;padding:0px;line-height:1.5;">org.apache.kafka.connect.json.JsonConverter
internal.value.converter</span>=<span style="margin:0px;padding:0px;line-height:1.5;">org.apache.kafka.connect.json.JsonConverter
internal.key.converter.schemas.enable</span>=<span style="margin:0px;padding:0px;color:rgb(0,0,255);line-height:1.5;">false</span><span style="margin:0px;padding:0px;line-height:1.5;">
internal.value.converter.schemas.enable</span>=<span style="margin:0px;padding:0px;color:rgb(0,0,255);line-height:1.5;">false</span><span style="margin:0px;padding:0px;line-height:1.5;">
offset.storage.</span><span style="margin:0px;padding:0px;color:rgb(0,0,255);line-height:1.5;">file</span>.filename=/tmp/<span style="margin:0px;padding:0px;line-height:1.5;">connect.offsets</span><span style="margin:0px;padding:0px;line-height:1.5;">
offset.flush.interval.ms</span>=<span style="margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;">10000</span><span style="margin:0px;padding:0px;line-height:1.5;"><br style="margin:0px;padding:0px;"></span></pre><div class="cnblogs_code_toolbar" style="margin:5px 0px 0px;padding:0px;"><span class="cnblogs_code_copy" style="margin:0px;padding:0px 5px 0px 0px;line-height:1.5;"><a title="复制代码" style="margin:0px;padding:0px;color:rgb(0,0,0);border:none;"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" style="margin-bottom:0px;padding:0px;max-width:800px;border:none;"></a></span></div></div><p style="margin:10px auto;color:rgb(51,51,51);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:rgb(255,255,255);"> </p><h4 style="margin-top:10px;margin-bottom:10px;padding:0px;font-size:14px;color:rgb(51,51,51);font-family:Verdana, Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);">3.2 运行Demo</h4><p style="margin:10px auto;color:rgb(51,51,51);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:rgb(255,255,255);">　　需要熟悉Kafka的一些命令行，参考本系列之前的文章<a class="postTitle2" href="http://www.cnblogs.com/qizhelongdeyang/p/7354315.html" rel="nofollow" style="margin:0px;padding:0px;color:rgb(0,0,0);">Apache Kafka系列(二) 命令行工具（CLI）</a></p><p style="margin:10px auto;color:rgb(51,51,51);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:rgb(255,255,255);"> 3.2.1 启动Kafka Broker</p><div class="cnblogs_code" style="margin:5px 0px;padding:5px;background-color:rgb(245,245,245);border:1px solid rgb(204,204,204);color:rgb(0,0,0);font-family:'Courier New';font-size:12px;"><pre style="margin-bottom:0px;padding-right:0px;padding-left:0px;white-space:pre-wrap;font-family:'Courier New';">[root@localhost bin]# cd /opt/kafka_2.<span style="margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;">11</span>-<span style="margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;">0.11</span>.<span style="margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;">0.0</span>/<span style="margin:0px;padding:0px;line-height:1.5;">
[root@localhost kafka_2.</span><span style="margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;">11</span>-<span style="margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;">0.11</span>.<span style="margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;">0.0</span>]# <span style="margin:0px;padding:0px;color:rgb(0,0,255);line-height:1.5;">ls</span><span style="margin:0px;padding:0px;line-height:1.5;">
bin  config  libs  LICENSE  logs  NOTICE  site</span>-<span style="margin:0px;padding:0px;line-height:1.5;">docs
[root@localhost kafka_2.</span><span style="margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;">11</span>-<span style="margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;">0.11</span>.<span style="margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;">0.0</span>]# ./bin/zookeeper-server-start.<span style="margin:0px;padding:0px;color:rgb(0,0,255);line-height:1.5;">sh</span> ./config/zookeeper.properties &amp;<br style="margin:0px;padding:0px;">[root@localhost kafka_2.11-0.11.0.0]# ./bin/kafka-server-start.sh ./config/server.properties &amp;</pre></div><p style="margin:10px auto;color:rgb(51,51,51);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:rgb(255,255,255);">3.2.2 启动Source Connector和Sink Connector</p><div class="cnblogs_code" style="margin:5px 0px;padding:5px;background-color:rgb(245,245,245);border:1px solid rgb(204,204,204);color:rgb(0,0,0);font-family:'Courier New';font-size:12px;"><pre style="margin-bottom:0px;padding-right:0px;padding-left:0px;white-space:pre-wrap;font-family:'Courier New';">[root@localhost kafka_2.<span style="margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;">11</span>-<span style="margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;">0.11</span>.<span style="margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;">0.0</span>]# ./bin/connect-standalone.<span style="margin:0px;padding:0px;color:rgb(0,0,255);line-height:1.5;">sh</span> config/connect-standalone.properties config/connect-<span style="margin:0px;padding:0px;color:rgb(0,0,255);line-height:1.5;">file</span>-source.properties config/connect-<span style="margin:0px;padding:0px;color:rgb(0,0,255);line-height:1.5;">file</span>-sink.properties </pre></div><p style="margin:10px auto;color:rgb(51,51,51);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:rgb(255,255,255);">3.3.3 打开console-consumer</p><div class="cnblogs_code" style="margin:5px 0px;padding:5px;background-color:rgb(245,245,245);border:1px solid rgb(204,204,204);color:rgb(0,0,0);font-family:'Courier New';font-size:12px;"><pre style="margin-bottom:0px;padding-right:0px;padding-left:0px;white-space:pre-wrap;font-family:'Courier New';">./kafka-console-consumer.<span style="margin:0px;padding:0px;color:rgb(0,0,255);line-height:1.5;">sh</span> --zookeeper localhost:<span style="margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;">2181</span> --from-beginning --topic connect-test</pre></div><p style="margin:10px auto;color:rgb(51,51,51);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:rgb(255,255,255);">3.3.4 写入到test.txt文件中，并观察3.3.3中的变化</p><div class="cnblogs_code" style="margin:5px 0px;padding:5px;background-color:rgb(245,245,245);border:1px solid rgb(204,204,204);color:rgb(0,0,0);font-family:'Courier New';font-size:12px;"><pre style="margin-bottom:0px;padding-right:0px;padding-left:0px;white-space:pre-wrap;font-family:'Courier New';">[root@Server4 kafka_2.<span style="margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;">12</span>-<span style="margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;">0.11</span>.<span style="margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;">0.0</span>]# <span style="margin:0px;padding:0px;color:rgb(0,0,255);line-height:1.5;">echo</span> <span style="margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;">'</span><span style="margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;">firest line</span><span style="margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;">'</span> &gt;&gt;<span style="margin:0px;padding:0px;line-height:1.5;"> test.txt
[root@Server4 kafka_2.</span><span style="margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;">12</span>-<span style="margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;">0.11</span>.<span style="margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;">0.0</span>]# <span style="margin:0px;padding:0px;color:rgb(0,0,255);line-height:1.5;">echo</span> <span style="margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;">'</span><span style="margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;">second line</span><span style="margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;">'</span> &gt;&gt;<span style="margin:0px;padding:0px;line-height:1.5;"> test.txt
</span><span style="margin:0px;padding:0px;line-height:1.5;">3.3.3中打开的窗口输出如下
{</span><span style="margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;">"</span><span style="margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;">schema</span><span style="margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;">"</span>:{<span style="margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;">"</span><span style="margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;">type</span><span style="margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;">"</span>:<span style="margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;">"</span><span style="margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;">string</span><span style="margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;">"</span>,<span style="margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;">"</span><span style="margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;">optional</span><span style="margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;">"</span>:<span style="margin:0px;padding:0px;color:rgb(0,0,255);line-height:1.5;">false</span>},<span style="margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;">"</span><span style="margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;">payload</span><span style="margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;">"</span>:<span style="margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;">"</span><span style="margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;">firest line</span><span style="margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;">"</span><span style="margin:0px;padding:0px;line-height:1.5;">}
{</span><span style="margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;">"</span><span style="margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;">schema</span><span style="margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;">"</span>:{<span style="margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;">"</span><span style="margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;">type</span><span style="margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;">"</span>:<span style="margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;">"</span><span style="margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;">string</span><span style="margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;">"</span>,<span style="margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;">"</span><span style="margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;">optional</span><span style="margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;">"</span>:<span style="margin:0px;padding:0px;color:rgb(0,0,255);line-height:1.5;">false</span>},<span style="margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;">"</span><span style="margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;">payload</span><span style="margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;">"</span>:<span style="margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;">"</span><span style="margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;">second line</span><span style="margin:0px;padding:0px;color:rgb(128,0,0);line-height:1.5;">"</span>}</pre></div><p style="margin:10px auto;color:rgb(51,51,51);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:rgb(255,255,255);">3.3.5 查看test.sink.txt</p><div class="cnblogs_code" style="margin:5px 0px;padding:5px;background-color:rgb(245,245,245);border:1px solid rgb(204,204,204);color:rgb(0,0,0);font-family:'Courier New';font-size:12px;"><pre style="margin-bottom:0px;padding-right:0px;padding-left:0px;white-space:pre-wrap;font-family:'Courier New';">[root@Server4 kafka_2.<span style="margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;">12</span>-<span style="margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;">0.11</span>.<span style="margin:0px;padding:0px;color:rgb(128,0,128);line-height:1.5;">0.0</span>]# <span style="margin:0px;padding:0px;color:rgb(0,0,255);line-height:1.5;">cat</span><span style="margin:0px;padding:0px;line-height:1.5;"> test.sink.txt 
firest line
second line</span></pre></div><p style="margin:10px auto;color:rgb(51,51,51);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:rgb(255,255,255);"> 本例仅仅演示了Kafka自带的File Connector，后续文章会完成JndiConnector，HdfsConnector，并且会使用CDC（Changed Data Capture）集成Kafka来完成一个ETL的例子</p><p style="margin:10px auto;color:rgb(51,51,51);font-family:Verdana, Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);"></p><h3 style="font-size:16px;color:rgb(51,51,51);margin-top:10px;margin-bottom:10px;line-height:1.5;padding:0px;font-family:Verdana, Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);">四. kafka 0.9 connect JDBC测试</h3><p style="font-size:14px;background-color:rgb(255,255,255);"><span style="font-size:14px;">kafka 0.9的connect功能，测试过程如下：</span></p><p style="font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;">1.创建容器（本次采用docker容器构建kafka环境）</span></p><p style="font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;">docker run -p 10924:9092 -p 21814:2181 --name confluent -i -t -d java /bin/bash</span></p><div style="font-size:14px;padding:0px;margin:0px;color:rgb(51,51,51);background-color:rgb(255,255,255);"><div style="padding:0px;margin:0px;"><span>2.将confluent安装程序拷贝进容器；</span></div><div style="padding:0px;margin:0px;"><span>docker cp  confluent.zip confluent:/root</span></div></div><div style="font-size:14px;padding:0px;margin:0px;color:rgb(51,51,51);background-color:rgb(255,255,255);"><div style="padding:0px;margin:0px;"><span>3.进入到confluent容器</span></div><div style="padding:0px;margin:0px;"><span>docker exec -it confluent /bin/bash</span></div></div><div style="font-size:14px;padding:0px;margin:0px;color:rgb(51,51,51);background-color:rgb(255,255,255);"><span>4.解压confluent压缩包</span></div><div style="font-size:14px;padding:0px;margin:0px;color:rgb(51,51,51);background-color:rgb(255,255,255);"><span>unzip confluent.zip</span></div><div style="font-size:14px;padding:0px;margin:0px;color:rgb(51,51,51);background-color:rgb(255,255,255);"><span>5.启动kafka</span></div><div style="font-size:14px;padding:0px;margin:0px;color:rgb(51,51,51);background-color:rgb(255,255,255);"><span>/root/confluent/bin/zookeeper-server-start  /root/confluent/etc/kafka/zookeeper.properties  &amp; &gt; zookeeper.log</span></div><div style="font-size:14px;padding:0px;margin:0px;color:rgb(51,51,51);background-color:rgb(255,255,255);"><span>/root/confluent/bin/kafka-server-start  /root/confluent/etc/kafka/server.properties &amp; &gt; server.log</span></div><div style="font-size:14px;padding:0px;margin:0px;color:rgb(51,51,51);background-color:rgb(255,255,255);"><span>/root/confluent/bin/schema-registry-start  /root/confluent/etc/schema-registry/schema-registry.properties &amp; &gt; schema.log</span></div><p style="font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;">6.测试kafka 是否正常</span></p><p style="font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;">开两个docker窗口，一个跑producer,一个跑consumer,</span></p><div style="font-size:14px;padding:0px;margin:0px;color:rgb(51,51,51);background-color:rgb(255,255,255);"><span>/root/confluent/bin/kafka-avro-console-producer --broker-list localhost:9092 --topic test --property value.schema='{"type":"record","name":"myrecord","fields":[{"name":"f1","type":"string"}]}'</span></div><div style="font-size:14px;padding:0px;margin:0px;color:rgb(51,51,51);background-color:rgb(255,255,255);"><span><br></span></div><div style="font-size:14px;padding:0px;margin:0px;color:rgb(51,51,51);background-color:rgb(255,255,255);"><span>/root/confluent/bin/kafka-avro-console-consumer --topic test  --zookeeper localhost:2181 --from-beginning</span></div><div style="font-size:14px;padding:12px;margin:0px;color:rgb(51,51,51);background-color:rgb(255,255,255);"><div style="padding:0px;margin:0px;"><span style="font-family:Consolas, 'Andale Mono WT', 'Andale Mono', 'Lucida Console', 'Lucida Sans Typewriter', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Liberation Mono', 'Nimbus Mono L', Monaco, 'Courier New', Courier, monospace;color:rgb(64,64,64);"><span style="font-weight:700;">在producer端依次输入以下记录，确认consumer能正确显示；</span></span></div><div style="padding:0px;margin:0px;"><span style="color:rgb(64,64,64);"><span style="font-family:Consolas, 'Andale Mono WT', 'Andale Mono', 'Lucida Console', 'Lucida Sans Typewriter', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Liberation Mono', 'Nimbus Mono L', Monaco, 'Courier New', Courier, monospace;"><span><span style="font-weight:bold;">{</span><span style="color:rgb(221,17,68);">"f1"</span>: <span style="color:rgb(221,17,68);">"value1"</span><span style="font-weight:bold;">}</span></span></span></span></div><div style="padding:0px;margin:0px;"><span style="color:rgb(64,64,64);"><span style="font-family:Consolas, 'Andale Mono WT', 'Andale Mono', 'Lucida Console', 'Lucida Sans Typewriter', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Liberation Mono', 'Nimbus Mono L', Monaco, 'Courier New', Courier, monospace;"><span><span style="font-weight:bold;">{</span><span style="color:rgb(221,17,68);">"f1"</span>: <span style="color:rgb(221,17,68);">"value2"</span><span style="font-weight:bold;">}</span></span></span></span></div><div style="padding:0px;margin:0px;"><span style="color:rgb(64,64,64);"><span style="font-family:Consolas, 'Andale Mono WT', 'Andale Mono', 'Lucida Console', 'Lucida Sans Typewriter', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Liberation Mono', 'Nimbus Mono L', Monaco, 'Courier New', Courier, monospace;"><span><span style="font-weight:bold;">{</span><span style="color:rgb(221,17,68);">"f1"</span>: <span style="color:rgb(221,17,68);">"value3"</span><span style="font-weight:bold;">}</span></span></span></span></div><div style="padding:0px;margin:0px;"><span>以上为安装kafka过程，接下来开始测试jdbc接口；</span></div><div style="padding:0px;margin:0px;"><span><strong>测试之前，需要获取mysql JDBC的驱动并将获放在kafka环境对应的jre/lib文件夹里</strong></span></div><div style="padding:0px;margin:0px;"><div style="padding:0px;margin:0px;"><span style="font-family:Consolas, 'Andale Mono WT', 'Andale Mono', 'Lucida Console', 'Lucida Sans Typewriter', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Liberation Mono', 'Nimbus Mono L', Monaco, 'Courier New', Courier, monospace;color:rgb(64,64,64);"><strong>测试jdbc connect</strong></span></div><div style="padding:0px;margin:0px;"><span style="color:rgb(64,64,64);"><span style="font-family:Consolas, 'Andale Mono WT', 'Andale Mono', 'Lucida Console', 'Lucida Sans Typewriter', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Liberation Mono', 'Nimbus Mono L', Monaco, 'Courier New', Courier, monospace;"><span>1.创建配置文件<span>quickstart-mysql.properties，内容如下：</span></span></span></span><span style="color:rgb(64,64,64);font-family:Consolas, 'Andale Mono WT', 'Andale Mono', 'Lucida Console', 'Lucida Sans Typewriter', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Liberation Mono', 'Nimbus Mono L', Monaco, 'Courier New', Courier, monospace;"> </span></div><div style="padding:0px;margin:0px;"><span style="font-family:Consolas, 'Andale Mono WT', 'Andale Mono', 'Lucida Console', 'Lucida Sans Typewriter', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Liberation Mono', 'Nimbus Mono L', Monaco, 'Courier New', Courier, monospace;color:rgb(64,64,64);">name=test-mysql-jdbc-autoincrement<br>connector.class=io.confluent.connect.jdbc.JdbcSourceConnector<br>tasks.max=1<br>connection.url=jdbc:mysql://192.168.99.100:33061/test1?user=root&amp;password=welcome1<br>mode=incrementing<br>incrementing.column.name=id<br>topic.prefix=test-mysql-jdbc-<br></span></div><div style="padding:0px;margin:0px;"><span style="font-family:Consolas, 'Andale Mono WT', 'Andale Mono', 'Lucida Console', 'Lucida Sans Typewriter', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Liberation Mono', 'Nimbus Mono L', Monaco, 'Courier New', Courier, monospace;color:rgb(64,64,64);">注：mysql是我在另一个容器里运行的，<span>jdbc:mysql://192.168.99.100:33061/test1?user=root&amp;password=welcome1是连接容器里的mysql的连接串</span></span></div><div style="padding:0px;margin:0px;"><span><span style="font-family:Consolas, 'Andale Mono WT', 'Andale Mono', 'Lucida Console', 'Lucida Sans Typewriter', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Liberation Mono', 'Nimbus Mono L', Monaco, 'Courier New', Courier, monospace;color:rgb(64,64,64);"><span>2.执行</span></span><span style="font-family:Consolas, 'Andale Mono WT', 'Andale Mono', 'Lucida Console', 'Lucida Sans Typewriter', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Liberation Mono', 'Nimbus Mono L', Monaco, 'Courier New', Courier, monospace;color:rgb(64,64,64);">./bin/connect-standalone etc/schema-registry/connect-avro-standalone.properties etc/kafka-connect-jdbc/quickstart-mysql.properties</span></span></div><div style="padding:0px;margin:0px;"><span style="font-family:Consolas, 'Andale Mono WT', 'Andale Mono', 'Lucida Console', 'Lucida Sans Typewriter', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Liberation Mono', 'Nimbus Mono L', Monaco, 'Courier New', Courier, monospace;color:rgb(64,64,64);"><span>3.执行./bin/kafka-avro-console-consumer --new-consumer --bootstrap-server <span><span>192.168.99.100:10924 --topic test-mysql-jdbc-accounts --from-beginning</span></span></span></span></div><div style="padding:0px;margin:0px;"><span style="font-family:Consolas, 'Andale Mono WT', 'Andale Mono', 'Lucida Console', 'Lucida Sans Typewriter', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Liberation Mono', 'Nimbus Mono L', Monaco, 'Courier New', Courier, monospace;color:rgb(64,64,64);">然后在数据库里增加一条记录</span></div><div style="padding:0px;margin:0px;"><span style="font-family:Consolas, 'Andale Mono WT', 'Andale Mono', 'Lucida Console', 'Lucida Sans Typewriter', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Liberation Mono', 'Nimbus Mono L', Monaco, 'Courier New', Courier, monospace;color:rgb(64,64,64);">然后就会在consumer端显示新增记录</span></div></div></div><p style="font-size:14px;"></p><h3 style="color:rgb(51,51,51);margin-top:10px;margin-bottom:10px;font-size:16px;line-height:1.5;font-family:Verdana, Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);padding:0px;">五. 配置连接器</h3><h3 style="color:rgb(51,51,51);margin-top:10px;margin-bottom:10px;font-size:16px;line-height:1.5;font-family:Verdana, Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);padding:0px;"></h3><div><p>Connector的配置是简单的key-value映射。对于独立模式，这些都是在属性文件中定义，并通过在命令行上的Connect处理。在分布式模式，JSON负载connector的创建（或修改）请求。大多数配置都是依赖的connector，有几个常见的选项：</p><ul><li><span style="font-family:Arial;font-size:14px;background-color:rgb(255,255,255);"><code>name</code> - 连接器唯一的名称，不能重复。</span></li><li><span style="font-family:Arial;font-size:14px;background-color:rgb(255,255,255);"><code>connector.calss</code> - 连接器的Java类。</span></li><li><span style="font-family:Arial;font-size:14px;background-color:rgb(255,255,255);"><code>tasks.max</code> - 连接器创建任务的最大数。</span></li><li><span style="font-family:Arial;font-size:14px;background-color:rgb(255,255,255);"><code>connector.class</code>配置支持多种格式：全名或连接器类的别名。比如连接器是<code>org.apache.kafka.connect.file.FileStreamSinkConnector</code>，你可以指定全名，也可以使用<code>FileStreamSink</code>或<code>FileStreamSinkConnector</code>。Sink connector也有一个额外的选项来控制它们的输入：</span></li><li><span style="font-family:Arial;font-size:14px;background-color:rgb(255,255,255);">topics - 作为连接器的输入的topic列表。</span></li></ul><p>对于其他的选项，你可以查看连接器的文档。</p></div><h3 style="color:rgb(51,51,51);margin-top:10px;margin-bottom:10px;font-size:16px;line-height:1.5;font-family:Verdana, Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);padding:0px;">六、rest api</h3><p><span style="font-size:14px;color:rgb(51,51,51);background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">kafka connect的目的是作为一个服务运行，<span style="color:rgb(51,51,51);font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:rgb(255,255,255);">默认情况下，此服务运行于端口8083。</span>它支持rest管理，用来<span style="font-family:Verdana, Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);">获取 Kafka Connect 状态，<span style="font-family:Verdana, Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);">管理 Kafka Connect 配置，<span style="font-family:Verdana, Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);">Kafka Connect 集群内部通信，<span style="font-family:Verdana, Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);">常用命令如下：</span></span></span></span></span></span></p><span style="font-size:14px;color:rgb(51,51,51);background-color:rgb(255,255,255);"></span><p style="background-color:rgb(255,255,255);"><span style="font-size:14px;"><span style="color:rgb(51,51,51);font-family:'courier new', courier, monospace;">GET /connectors </span>返回一个活动的connect列表<br><span style="color:rgb(51,51,51);font-family:'courier new', courier, monospace;">POST /connectors </span>创建一个新的connect；请求体是一个JSON对象包含一个名称字段和连接器配置参数</span></p><p style="background-color:rgb(255,255,255);"><span style="font-size:14px;"><span style="color:rgb(51,51,51);font-family:'courier new', courier, monospace;">GET /connectors/{name} </span>获取有关特定连接器的信息<br><span style="color:rgb(51,51,51);font-family:'courier new', courier, monospace;">GET /connectors/{name}/config </span>获得特定连接器的配置参数<br><span style="color:rgb(51,51,51);font-family:'courier new', courier, monospace;">PUT /connectors/{name}/config </span>更新特定连接器的配置参数<br><span style="color:rgb(51,51,51);font-family:'courier new', courier, monospace;">GET /connectors/{name}/tasks 获得</span>正在运行的一个连接器的任务的列表<br></span></p><p><span style="font-size:14px;"><span style="color:rgb(51,51,51);font-family:'courier new', courier, monospace;">DELETE /connectors/{name} </span>删除一个连接器，停止所有任务，并删除它的配置</span></p><p><span style="font-size:14px;color:rgb(51,51,51);font-family:'courier new', courier, monospace;">GET /connectors </span><span style="font-size:14px;">返回一个活动的connect列表</span></p><p style="font-size:14px;background-color:rgb(255,255,255);"><span style="font-size:14px;"><span style="color:rgb(51,51,51);font-family:'courier new', courier, monospace;">POST /connectors </span>创建一个新的connect；请求体是一个JSON对象包含一个名称字段和连接器配置参数</span></p><p style="font-size:14px;background-color:rgb(255,255,255);"><span style="font-size:14px;"><span style="color:rgb(51,51,51);font-family:'courier new', courier, monospace;">GET /connectors/{name} </span>获取有关特定连接器的信息<br><span style="color:rgb(51,51,51);font-family:'courier new', courier, monospace;">GET /connectors/{name}/config </span>获得特定连接器的配置参数<br><span style="color:rgb(51,51,51);font-family:'courier new', courier, monospace;">PUT /connectors/{name}/config </span>更新特定连接器的配置参数<br><span style="color:rgb(51,51,51);font-family:'courier new', courier, monospace;">GET /connectors/{name}/tasks 获得</span>正在运行的一个连接器的任务的列表<br></span></p><p><span style="font-size:14px;"><span style="color:rgb(51,51,51);font-family:'courier new', courier, monospace;">DELETE /connectors/{name} </span>删除一个连接器，停止所有任务，并删除它的配置</span></p><p><span style="color:#000000;"><span style="background-color:rgb(249,242,244);font-family:Consolas, Inconsolata, Courier, monospace;font-size:12px;">curl -s &lt;Kafka Connect Worker URL&gt;:8083/ | jq </span><span style="background-color:rgb(249,242,244);font-family:Consolas, Inconsolata, Courier, monospace;font-size:14px;">  </span>获取 Connect Worker 信息</span></p><p><span style="color:#000000;"><span style="background-color:rgb(249,242,244);font-family:Consolas, Inconsolata, Courier, monospace;font-size:12px;">curl -s &lt;Kafka Connect Worker URL&gt;:8083/connector-plugins | jq </span>列出 Connect Worker 上所有 Connector</span></p><p><span style="color:#000000;"><code><span style="color:#000000;">curl -s &lt;Kafka Connect Worker URL&gt;:8083/connectors/&lt;Connector名字&gt;/tasks | jq </span></code>获取 Connector 上 Task 以及相关配置的信息</span></p><p><span style="color:#000000;"><code><span style="color:#000000;">curl -s &lt;Kafka Connect Worker URL&gt;:8083/connectors/&lt;Connector名字&gt;/status | jq</span> </code>获取 Connector 状态信息</span></p><p><span style="color:#000000;"><code><span style="color:#000000;">curl -s &lt;Kafka Connect Worker URL&gt;:8083/connectors/&lt;Connector名字&gt;/config | jq</span> </code>获取 Connector 配置信息</span></p><p><span style="color:#000000;"><code><span style="color:#000000;">curl -s -X PUT &lt;Kafka Connect Worker URL&gt;:8083/connectors/&lt;Connector名字&gt;/pause </span></code>暂停 Connector</span></p><p><span style="color:#000000;"><code><span style="color:#000000;">curl -s -X PUT &lt;Kafka Connect Worker URL&gt;:8083/connectors/&lt;Connector名字&gt;/resume </span></code>重启 Connector</span></p><p><span style="color:#000000;"><code><span style="color:#000000;">curl -s -X DELETE &lt;Kafka Connect Worker URL&gt;:8083/connectors/&lt;Connector名字&gt; </span></code>删除 Connector</span></p><p><span style="background-color:rgb(255,255,255);font-family:Verdana, Arial, Helvetica, sans-serif;">创建新 Connector （以</span><code><span style="color:#000000;"><span style="color:rgb(0,0,0);font-family:Consolas, Inconsolata, Courier, monospace;font-size:12px;background-color:rgb(249,242,244);">FileStreamSourceConnector</span></span></code><span style="background-color:rgb(255,255,255);font-family:Verdana, Arial, Helvetica, sans-serif;">举例）</span></p><pre class="hljs json"><code class="json">curl -s -X POST -H <span class="hljs-string">"Content-Type: application/json"</span> --data 
 '{<span class="hljs-attr">"name"</span>: <span class="hljs-string">"&lt;Connector名字&gt;"</span>, 
   <span class="hljs-attr">"config"</span>:
    {<span class="hljs-attr">"connector.class"</span>:<span class="hljs-string">"org.apache.kafka.connect.file.FileStreamSourceConnector"</span>,
    <span class="hljs-attr">"key.converter.schemas.enable"</span>:<span class="hljs-string">"true"</span>,
    <span class="hljs-attr">"file"</span>:<span class="hljs-string">"demo-file.txt"</span>,
    <span class="hljs-attr">"tasks.max"</span>:<span class="hljs-string">"1"</span>,
    <span class="hljs-attr">"value.converter.schemas.enable"</span>:<span class="hljs-string">"true"</span>,
    <span class="hljs-attr">"name"</span>:<span class="hljs-string">"file-stream-demo-distributed"</span>,
    <span class="hljs-attr">"topic"</span>:<span class="hljs-string">"demo-distributed"</span>,
    <span class="hljs-attr">"value.converter"</span>:<span class="hljs-string">"org.apache.kafka.connect.json.JsonConverter"</span>,
    <span class="hljs-attr">"key.converter"</span>:<span class="hljs-string">"org.apache.kafka.connect.json.JsonConverter"</span>}
 }' 
http://&lt;Kafka Connect Worker URL&gt;:<span class="hljs-number">8083</span>/connectors | jq
</code></pre><p><br></p><p><span style="font-family:Verdana, Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);">更新 Connector配置 （以</span><code><span style="color:rgb(0,0,0);font-family:Consolas, Inconsolata, Courier, monospace;font-size:12px;background-color:rgb(249,242,244);">FileStreamSourceConnector</span></code><span style="font-family:Verdana, Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);">举例）</span></p><pre class="hljs json"><code class="json">curl -s -X PUT -H <span class="hljs-string">"Content-Type: application/json"</span> --data 
'{<span class="hljs-attr">"connector.class"</span>:<span class="hljs-string">"org.apache.kafka.connect.file.FileStreamSourceConnector"</span>,
<span class="hljs-attr">"key.converter.schemas.enable"</span>:<span class="hljs-string">"true"</span>,
<span class="hljs-attr">"file"</span>:<span class="hljs-string">"demo-file.txt"</span>,
<span class="hljs-attr">"tasks.max"</span>:<span class="hljs-string">"2"</span>,
<span class="hljs-attr">"value.converter.schemas.enable"</span>:<span class="hljs-string">"true"</span>,
<span class="hljs-attr">"name"</span>:<span class="hljs-string">"file-stream-demo-distributed"</span>,
<span class="hljs-attr">"topic"</span>:<span class="hljs-string">"demo-2-distributed"</span>,
<span class="hljs-attr">"value.converter"</span>:<span class="hljs-string">"org.apache.kafka.connect.json.JsonConverter"</span>,
<span class="hljs-attr">"key.converter"</span>:<span class="hljs-string">"org.apache.kafka.connect.json.JsonConverter"</span>}' 
&lt;Kafka Connect Worker URL&gt;:<span class="hljs-number">8083</span>/connectors/file-stream-demo-distributed/config | jq
</code></pre><p><span style="color:rgb(51,51,51);"><strong>七、kafka connect + debezium，解析binlog至kafka</strong></span></p><p style="font-size:14px;font-family:'-apple-system', 'SF UI Text', Arial, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'WenQuanYi Micro Hei', sans-serif, SimHei, SimSun;background-color:rgb(255,255,255);">在已知kafka connect和debezium作用，会使用kafka的基础上，学会使用debezium来读取binlog，并通过kafka connect将读取的内容放入kafka topic中。 <br></p><p>基于kafka0.10.0和Debezium0.6,mysql5.6</p><p><span style="font-size:16px;">kafka connect</span></p><ul style="font-size:14px;list-style:none;color:rgb(51,51,51);font-family:'-apple-system', 'SF UI Text', Arial, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'WenQuanYi Micro Hei', sans-serif, SimHei, SimSun;background-color:rgb(255,255,255);"><li style="padding:0px;">Kafka Connect是一种用于Kafka和其他数据系统之间进行数据传输的工具。</li><li style="padding:0px;">仅关注数据的复制，并且不处理其他任务</li><li style="padding:0px;">Kafka connect有两个概念，一个source，另一个是sink。source是把数据从一个系统拷贝到kafka里，sink是从kafka拷贝到另一个系统里。</li><li style="padding:0px;">可使用插件，获取不同系统的数据。例如通过Debezium插件解析mysql的日志，获取数据。</li><li style="padding:0px;">支持集群，可以通过REST API管理Kafka Connect。</li><li style="padding:0px;">对数据的传输进行管理和监控。</li></ul><h2 style="padding:0px;font-family:'-apple-system', 'SF UI Text', Arial, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'WenQuanYi Micro Hei', sans-serif, SimHei, SimSun;background-color:rgb(255,255,255);"><span style="font-weight:normal;"><span style="font-size:16px;">Debezium</span></span></h2><ul style="font-size:14px;list-style:none;color:rgb(51,51,51);font-family:'-apple-system', 'SF UI Text', Arial, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'WenQuanYi Micro Hei', sans-serif, SimHei, SimSun;background-color:rgb(255,255,255);"><li style="padding:0px;">Debezium是一个分布式平台，可将现有数据库转换为事件流，因此应用程序可以立即查看并立即响应数据库中每一行的更改。</li><li style="padding:0px;">Debezium建立在Apache Kafka之上，并提供用于监视特定数据库管理系统的Kafka Connect兼容连接器。</li><li style="padding:0px;">本教程使用Debezium监控binlog。</li></ul><h2 style="padding:0px;font-family:'-apple-system', 'SF UI Text', Arial, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'WenQuanYi Micro Hei', sans-serif, SimHei, SimSun;background-color:rgb(255,255,255);"><span style="font-weight:normal;"><span style="font-size:16px;">准备操作</span></span></h2><ul style="font-size:14px;list-style:none;color:rgb(51,51,51);font-family:'-apple-system', 'SF UI Text', Arial, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'WenQuanYi Micro Hei', sans-serif, SimHei, SimSun;background-color:rgb(255,255,255);"><li style="padding:0px;">mysql需开启binlog</li></ul><pre class="prettyprint" style="font-size:14px;line-height:22px;"><code class="hljs rsl has-numbering">[mysqld]
<span class="hljs-built_in">log</span>-bin=mysql-bin <span class="hljs-preprocessor">#添加这一行就ok</span>
binlog-<span class="hljs-built_in">format</span>=ROW <span class="hljs-preprocessor">#选择row模式</span>
server_id=<span class="hljs-number">1</span> <span class="hljs-preprocessor">#配置mysql replaction需要定义，不能和canal的slaveId重复</span></code></pre><ul style="font-size:14px;list-style:none;color:rgb(51,51,51);font-family:'-apple-system', 'SF UI Text', Arial, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'WenQuanYi Micro Hei', sans-serif, SimHei, SimSun;background-color:rgb(255,255,255);"><li style="padding:0px;">mysql需创建一个有mysql slave相关权限的账号，若mysql不在本机，则需要远程权限，防火墙放行。</li></ul><pre class="prettyprint" style="font-size:14px;line-height:22px;"><code class="hljs sql has-numbering">//mysql slave相关权限
<span class="hljs-operator"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> canal IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">'debezium'</span>;</span>  
<span class="hljs-operator"><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">SELECT</span>, REPLICATION SLAVE, REPLICATION CLIENT <span class="hljs-keyword">ON</span> *.* <span class="hljs-keyword">TO</span> <span class="hljs-string">'debezium'</span>@<span class="hljs-string">'%'</span>;</span>
<span class="hljs-comment">-- GRANT ALL PRIVILEGES ON *.* TO 'debezium'@'%' ;</span>
FLUSH PRIVILEGES;</code></pre><ul class="pre-numbering"><li style="color:rgb(153,153,153);">操作概述</li></ul><ul style="font-size:14px;list-style:none;color:rgb(51,51,51);font-family:'-apple-system', 'SF UI Text', Arial, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'WenQuanYi Micro Hei', sans-serif, SimHei, SimSun;background-color:rgb(255,255,255);"><li style="padding:0px;">安装并启动kafka</li><li style="padding:0px;">安装并启动mysql</li><li style="padding:0px;">下载Debezium的mysql连接器<a href="http://debezium.io/docs/install/" rel="nofollow">http://debezium.io/docs/install/</a>并解压</li><li style="padding:0px;">安装debezium，即将解压目录写入classpath变量，例如：export classpath=/root/debezium-connector-mysql/* <br>只在当前shell有效</li><li style="padding:0px;">参考<a href="http://debezium.io/docs/connectors/mysql/" rel="nofollow">http://debezium.io/docs/connectors/mysql/</a>的配置文件示例，写好配置文件。</li><li style="padding:0px;">以独立模式启动kafka connect，此时debezium会对数据库中的每一个表创建一个topic，消费相应的topic，即可获取binlog解析信息。</li></ul><pre class="prettyprint" style="font-size:14px;line-height:22px;"><code class="hljs lasso has-numbering"><span class="hljs-comment">//启动kafka connect</span>
bin/connect<span class="hljs-attribute">-standalone</span><span class="hljs-built_in">.</span>sh config/connect<span class="hljs-attribute">-standalone</span><span class="hljs-built_in">.</span>properties mysql<span class="hljs-built_in">.</span>properties
<span class="hljs-comment">//查看topic列表</span>
bin/kafka<span class="hljs-attribute">-topics</span><span class="hljs-built_in">.</span>sh <span class="hljs-subst">--</span><span class="hljs-built_in">list</span> <span class="hljs-subst">--</span>zookeeper localhost:<span class="hljs-number">2181</span>
<span class="hljs-comment">//消费该主题</span>
bin/kafka<span class="hljs-attribute">-console</span><span class="hljs-attribute">-consumer</span><span class="hljs-built_in">.</span>sh <span class="hljs-subst">--</span>bootstrap<span class="hljs-attribute">-server</span> localhost:<span class="hljs-number">9092</span> <span class="hljs-subst">--</span>topic test <span class="hljs-subst">--</span>from<span class="hljs-attribute">-beginning</span></code></pre><ul class="pre-numbering"><li style="color:rgb(153,153,153);">配置文件</li></ul><pre class="prettyprint" style="font-size:14px;line-height:22px;"><code class="hljs avrasm has-numbering">    //mysql<span class="hljs-preprocessor">.properties</span>
    name=inventory-connector
    connector<span class="hljs-preprocessor">.class</span>=io<span class="hljs-preprocessor">.debezium</span><span class="hljs-preprocessor">.connector</span><span class="hljs-preprocessor">.mysql</span><span class="hljs-preprocessor">.MySqlConnector</span>
    database<span class="hljs-preprocessor">.hostname</span>=<span class="hljs-number">192.168</span><span class="hljs-number">.99</span><span class="hljs-number">.100</span>
    database<span class="hljs-preprocessor">.port</span>=<span class="hljs-number">3306</span>
    database<span class="hljs-preprocessor">.user</span>=debezium
    database<span class="hljs-preprocessor">.password</span>=dbz
    database<span class="hljs-preprocessor">.server</span><span class="hljs-preprocessor">.id</span>=<span class="hljs-number">184054</span>
    database<span class="hljs-preprocessor">.server</span><span class="hljs-preprocessor">.name</span>=fullfillment
    database<span class="hljs-preprocessor">.whitelist</span>=inventory
    database<span class="hljs-preprocessor">.history</span><span class="hljs-preprocessor">.kafka</span><span class="hljs-preprocessor">.bootstrap</span><span class="hljs-preprocessor">.servers</span>=<span class="hljs-number">192.168</span><span class="hljs-number">.30</span><span class="hljs-number">.30</span>:<span class="hljs-number">9092</span>
    database<span class="hljs-preprocessor">.history</span><span class="hljs-preprocessor">.kafka</span><span class="hljs-preprocessor">.topic</span>=dbhistory<span class="hljs-preprocessor">.fullfillment</span>
    include<span class="hljs-preprocessor">.schema</span><span class="hljs-preprocessor">.changes</span>=true</code></pre><ul class="pre-numbering"><li style="color:rgb(153,153,153);">索引</li></ul><p style="font-size:14px;font-family:'-apple-system', 'SF UI Text', Arial, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'WenQuanYi Micro Hei', sans-serif, SimHei, SimSun;background-color:rgb(255,255,255);">debezium官网 <a href="http://debezium.io/" rel="nofollow">http://debezium.io/</a> <br></p><p>kafka文档 <a href="http://kafka.apache.org/0100/documentation.html" rel="nofollow">http://kafka.apache.org/0100/documentation.html</a></p><p></p><h3 style="font-family:Arial, Helvetica, sans-serif;padding:0px;color:rgb(63,63,63);text-align:left;background-color:rgb(255,255,255);max-width:680px;"><span style="color:rgb(51,51,51);font-family:Verdana, Arial, Helvetica, sans-serif;font-weight:700;background-color:rgb(255,255,255);">八、</span>Kafka Connect的优点</h3><p style="font-family:Arial, Helvetica, sans-serif;font-size:14px;color:rgb(63,63,63);line-height:30px;text-align:left;background-color:rgb(255,255,255);max-width:680px;">1.对开发者提供了统一的实现接口<br style="padding:0px;max-width:680px;">2.开发，部署和管理都非常方便，统一 <br style="padding:0px;max-width:680px;">3.使用分布式模式进行水平扩展，毫无压力<br style="padding:0px;max-width:680px;">4.在分布式模式下可以通过Rest Api提交和管理Connectors<br style="padding:0px;max-width:680px;">5.对offset自动管理，只需要很简单的配置，而不像Consumer中需要开发者处理<br style="padding:0px;max-width:680px;">6.流式/批式处理的支持</p><h2 style="font-family:Arial, Helvetica, sans-serif;padding:0px;color:rgb(63,63,63);text-align:left;background-color:rgb(255,255,255);max-width:680px;">九、第三方资源</h2><p style="font-family:Arial, Helvetica, sans-serif;font-size:14px;color:rgb(63,63,63);line-height:30px;text-align:left;background-color:rgb(255,255,255);max-width:680px;">这是已经得到支持的组件，不需要做额外的开发： <a href="https://www.confluent.io/product/connectors/" rel="nofollow" style="padding:0px;color:rgb(51,51,51);max-width:680px;">https://www.confluent.io/product/connectors/</a><br style="padding:0px;max-width:680px;">括号中的Source表示将数据从其他系统导入Kafka，Sink表示将数据从Kafka导出到其他系统。<br style="padding:0px;max-width:680px;">其他的我没看，但是JDBC的实现比较的坑爹，是通过primary key（如id）和时间戳（如updateTime）字段，<br style="padding:0px;max-width:680px;"></p><p>来判断数据是否更新，这样的话应用范围非常受局限。</p><p></p><h2 style="color:rgb(63,63,63);font-family:Arial, Helvetica, sans-serif;padding:0px;text-align:left;background-color:rgb(255,255,255);max-width:680px;">十、Connector Development Guide</h2><p></p><div style="padding:0px;margin:0px;color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">在kafka与其他系统间复制数据需要创建kafka connect,他们将数复制到kafka或者从kafka复制到其他系统</div><div style="padding:0px;margin:0px;color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">连接器有两种形式：sourceconnectors将另一个系统数据导入kafka，sinkconnectors将数据导出到另一个系统<br></div><div style="padding:0px;margin:0px;color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">连接器不执行任何数据复制：它们的描述复制的数据，并且负责将工作分配给多个task<br></div><div style="padding:0px;margin:0px;color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">task分为sourcetask与sinktask</div><p style="background-color:rgb(255,255,255);">每个task从kafka复制数据,connect会保证record与schema的一致性完成任务分配，通常record与schema的映射是明显的，每一个文件对应一个流，流中的每一条记录利用schema解析并且保存对应的offset,另外一种情况是我们需要自己完成这种映射，比如数据库，表的offset不是很明确（没有自增id),一种可能的选择是利用时间（timestamp)来完成增量查询。<br></p><h5 style="padding:0px;color:rgb(51,51,51);line-height:29.3333px;background-color:rgb(255,255,255);font-family:'Source Sans Pro', sans-serif;"><a href="http://kafka.apache.org/documentation.html#connect_streamsandrecords" rel="nofollow" style="color:rgb(46,74,142);">Streams and Records</a></h5><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">每一个stream是包含key value对的记录的序列，key value可以是原始类型，可以支持复杂结构，除了array,object，嵌套等。数据转换是框架来完成的，record中包含stream id与offset,用于定时offset提交，帮助当处理失败时恢复避免重复处理。</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><h5 style="padding:0px;color:rgb(51,51,51);line-height:29.3333px;background-color:rgb(255,255,255);font-family:'Source Sans Pro', sans-serif;"><a href="http://kafka.apache.org/documentation.html#connect_dynamicconnectors" rel="nofollow" style="color:rgb(46,74,142);">Dynamic Connectors</a></h5><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">所有的job不是静态的，它需要监听外部系统的变化，比如数据库表的增加删除，当一个新table创建时，它必须发现并且更新配置由框架来分配给该表一个task去处理，当通知发布后框架会更新对应的task.</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><h4 style="padding:0px;font-size:14pt;color:rgb(46,74,142);line-height:29.3333px;background-color:rgb(255,255,255);font-family:'Source Sans Pro', sans-serif;"><a href="http://kafka.apache.org/documentation.html#connect_developing" rel="nofollow" style="color:rgb(46,74,142);">Developing a Simple Connector</a></h4><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">例子很简单</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">在standalone模式下实现 SourceConnector/SourceTask 读取文件并且发布record给SinkConnector/SinkTask 由sink写入文件</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><h5 style="padding:0px;color:rgb(51,51,51);line-height:29.3333px;background-color:rgb(255,255,255);font-family:'Source Sans Pro', sans-serif;"><a href="http://kafka.apache.org/documentation.html#connect_connectorexample" rel="nofollow" style="color:rgb(46,74,142);">Connector Example</a></h5><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">我们将实现SourceConnector，SinkConnector实现与它非常类似，它包括两个私有字段存放配置信息（读取的文件名与topic名称）</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">public class FileStreamSourceConnector extends SourceConnector {</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">    private String filename;</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">    private String topic;</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">getTaskClass()方法定义实现执行处理的task</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">@Override</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">public Class getTaskClass() {</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">    return FileStreamSourceTask.class;</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">}</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">下面定义FileStreamSourceTask，它包括两个生命周期方法start,stop</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">@Override</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">public void start(Map&lt;String, String&gt; props) {</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">    // The complete version includes error handling as well.</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">    filename = props.get(FILE_CONFIG);</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">    topic = props.get(TOPIC_CONFIG);</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">}</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">@Override</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">public void stop() {</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">    // Nothing to do since no background monitoring is required.</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">}</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">最后是真正核心的方法getTaskConfigs（）在这里我们仅处理一个文件，所以我们虽然定义了max task（在配置文件里）但是只会返回一个包含一条entry的list</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">@Override</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">public List&lt;Map&lt;String, String&gt;&gt; getTaskConfigs(int maxTasks) {</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">    ArrayList&gt;Map&lt;String, String&gt;&gt; configs = new ArrayList&lt;&gt;();</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">    // Only one input stream makes sense.</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">    Map&lt;String, String&gt; config = new Map&lt;&gt;();</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">    if (filename != null)</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">        config.put(FILE_CONFIG, filename);</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">    config.put(TOPIC_CONFIG, topic);</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">    configs.add(config);</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">    return configs;</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">}</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">即使有多个任务，这种方法的执行通常很简单。它只是要确定输入任务的数量，这可能需要拉取数据从远程服务，然后分摊。请注意，这个简单的例子不包括动态输入。在下一节中看到讨论如何触发任务的配置更新。</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><h5 style="padding:0px;color:rgb(51,51,51);line-height:29.3333px;background-color:rgb(255,255,255);font-family:'Source Sans Pro', sans-serif;"><a href="http://kafka.apache.org/documentation.html#connect_taskexample" rel="nofollow" style="color:rgb(46,74,142);">Task Example - Source Task</a></h5><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">实现task，我们使用伪代码描述核心代码</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">public class FileStreamSourceTask extends SourceTask&lt;Object, Object&gt; {</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">    String filename;</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">    InputStream stream;</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">    String topic;</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">    public void start(Map&lt;String, String&gt; props) {</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">        filename = props.get(FileStreamSourceConnector.FILE_CONFIG);</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">        stream = openOrThrowError(filename);</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">        topic = props.get(FileStreamSourceConnector.TOPIC_CONFIG);</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">    }</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">    @Override</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">    public synchronized void stop() {</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">        stream.close()</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">    }</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">start方法读取之前的offset,并且处理新的数据，stop方法停止stream,下面实现poll方法</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">@Override</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">public List&lt;SourceRecord&gt; poll() throws InterruptedException {</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">    try {</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">        ArrayList&lt;SourceRecord&gt; records = new ArrayList&lt;&gt;();</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">        while (streamValid(stream) &amp;&amp; records.isEmpty()) {</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">            LineAndOffset line = readToNextLine(stream);</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">            if (line != null) {</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">                Map sourcePartition = Collections.singletonMap("filename", filename);</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">                Map sourceOffset = Collections.singletonMap("position", streamOffset);</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">                records.add(new SourceRecord(sourcePartition, sourceOffset, topic, Schema.STRING_SCHEMA, line));</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">            } else {</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">                Thread.sleep(1);</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">            }</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">        }</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">        return records;</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">    } catch (IOException e) {</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">        // Underlying stream was killed, probably as a result of calling stop. Allow to return</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">        // null, and driving thread will handle any shutdown if necessary.</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">    }</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">    return null;</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">}</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">该方法重复执行读取操作，跟踪file offset,并且利用上述信息创建SourceRecord，它需要四个字段：source partition,source offset,topic name,output value(包括value及value的schema)</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><h5 style="padding:0px;color:rgb(51,51,51);line-height:29.3333px;background-color:rgb(255,255,255);font-family:'Source Sans Pro', sans-serif;"><a href="http://kafka.apache.org/documentation.html#connect_sinktasks" rel="nofollow" style="color:rgb(46,74,142);">Sink Tasks</a></h5><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">之前描述了sourcetask实现，sinktask与它完全不同，因为前者是拉取数据，后者是推送数据</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">public abstract class SinkTask implements Task {</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">public void initialize(SinkTaskContext context) { ... }</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">public abstract void put(Collection&lt;SinkRecord&gt; records);</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">public abstract void flush(Map&lt;TopicPartition, Long&gt; offsets);</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">put方法是最重要的方法，接收sinkrecords，执行任何需要的转换，并将其存储在目标系统。此方法不需要确保数据已被完全写入目标系统，然后返回。事实上首先放入缓冲，因此，批量数据可以被一次发送，减少对下游存储的压力。sourcerecords中保存的信息与sourcesink中的相同。flush提交offset，它接受任务从故障中恢复，没有数据丢失。该方法将数据推送至目标系统，并且block直到写入已被确认。的offsets参数通常可以忽略不计，但在某些情况保存偏移信息到目标系统确保一次交货。例如，一个HDFS连接器可以确保flush()操作自动提交数据和偏移到HDFS中的位置。</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><h5 style="padding:0px;color:rgb(51,51,51);line-height:29.3333px;background-color:rgb(255,255,255);font-family:'Source Sans Pro', sans-serif;"><a href="http://kafka.apache.org/documentation.html#connect_resuming" rel="nofollow" style="color:rgb(46,74,142);">Resuming from Previous Offsets</a></h5><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">kafka connect是为了bulk 数据拷贝工作，它拷贝整个db而不是拷贝某个表，这样会使用connnect的input或者output随时改变，source connector需要监听source系统的改变，当改变时通知框架（通过ConnectorContext对象）</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">举例</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">if (inputsChanged())</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">    this.context.requestTaskReconfiguration();</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">当接收到通知框架会即时的更新配置，并且在更新前确保优雅完成当前任务</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">如果一个额外的线程来执行此监控，该线程必须存在于连接器中。该线程不会影响connector。然而，其他变化也会影响task，最常见的是输入流失败在输入系统中，例如如果一个表被从数据库中删除。这时连接器需要进行更改，任务将需要处理这种异常。sinkconnectors只能处理流的加入，可以分配新的数据到task（例如，一个新的数据库表）。框架会处理任何kafka输入的改变，例如当组输入topic的变化因为一个正则表达式的订阅。sinktasks应该期待新的输入流，可能需要在下游系统创造新的资源，如数据库中的一个新的表。在这些情况下，可能会出现输入流之间的冲突（同时创建新资源），其他时候，一般不需要特殊的代码处理一系列动态流</span><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">  </span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><h4 style="padding:0px;font-size:14pt;color:rgb(46,74,142);line-height:29.3333px;background-color:rgb(255,255,255);font-family:'Source Sans Pro', sans-serif;"><a href="http://kafka.apache.org/documentation.html#connect_dynamicio" rel="nofollow" style="color:rgb(46,74,142);">Dynamic Input/Output Streams</a></h4><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">FileStream连接器是很好的例子，因为他们很简单的，每一行是一个字符串。实际连接器都需要具有更复杂的数据格式。要创建更复杂的数据，你需要使用kafka connector数据接口:Schema,Struct</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">Schema schema = SchemaBuilder.struct().name(NAME)</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">                    .field("name", Schema.STRING_SCHEMA)</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">                    .field("age", Schema.INT_SCHEMA)</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">                    .field("admin", new SchemaBuilder.boolean().defaultValue(false).build())</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">                    .build();</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">Struct struct = new Struct(schema)</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">                           .put("name", "Barbara Liskov")</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">                           .put("age", 75)</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">                           .build();</span><br style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);"><span style="color:rgb(51,51,51);font-size:14px;background-color:rgb(255,255,255);">如果上游数据与schema数据格式不一致应该在sinktask中抛出异常</span><br><h2 style="font-family:Arial, Helvetica, sans-serif;padding:0px;color:rgb(63,63,63);text-align:left;background-color:rgb(255,255,255);max-width:680px;">参考</h2><p style="font-family:Arial, Helvetica, sans-serif;font-size:14px;color:rgb(63,63,63);line-height:30px;text-align:left;background-color:rgb(255,255,255);max-width:680px;"><a href="https://kafka.apache.org/documentation/#connect" rel="nofollow" style="padding:0px;color:rgb(51,51,51);max-width:680px;">Kafka Documentation</a></p><p style="font-family:Arial, Helvetica, sans-serif;font-size:14px;color:rgb(63,63,63);line-height:30px;text-align:left;background-color:rgb(255,255,255);max-width:680px;">http://kafka.apache.org/documentation/#connect<br></p><p style="font-family:Arial, Helvetica, sans-serif;font-size:14px;color:rgb(63,63,63);line-height:30px;text-align:left;background-color:rgb(255,255,255);max-width:680px;">https://www.confluent.io/product/connectors/</p>            </div>
                </div>