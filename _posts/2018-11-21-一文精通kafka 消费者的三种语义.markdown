---
layout:     post
title:      一文精通kafka 消费者的三种语义
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/rlnLo2pNEfx9c/article/details/83629348				</div>
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
    <div class="rich_media_content" id="js_content">
                    

                    

                    
                    
                    <p style="line-height:1.75em;letter-spacing:1px;">本文主要是以kafka 09的client为例子，详解kafka client的使用，包括kafka消费者的三种消费语义at-most-once, at-least-once, 和 exactly-once message ，生产者的使用等。</p><p style="line-height:1.75em;letter-spacing:1px;text-align:center;"><strong>(一) 创建topic</strong></p><pre style="background:none;"></pre><p style="font-size:.85em;background:rgb(40,44,52);color:rgb(171,178,191);line-height:1.75em;letter-spacing:1px;text-align:center;">bin/kafka-topics --zookeeper localhos<span class="hljs-default-variable" style="color:rgb(209,154,102);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">t:2181</span> --create --topic <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">normal</span>-topic --partitions <span class="hljs-default-number" style="color:rgb(209,154,102);background:rgba(0,0,0,0);width:8px;font-weight:400;font-style:normal;">2</span> --replication-factor <span class="hljs-default-number" style="color:rgb(209,154,102);background:rgba(0,0,0,0);width:8px;font-weight:400;font-style:normal;">1</span></p><p style="line-height:1.75em;letter-spacing:1px;text-align:center;"><strong>(二) 生产者</strong></p><pre style="background:none;"></pre><p style="font-size:.85em;background:rgb(40,44,52);color:rgb(171,178,191);line-height:1.75em;letter-spacing:1px;"><span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">public</span> <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:36px;font-weight:400;font-style:normal;">class</span> ProducerExample {<br>    <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">public</span> <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">static</span> <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:29px;font-weight:400;font-style:normal;">void</span> main(<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span>[] str) throws InterruptedException, IOException {<br>            System.out.println(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:216px;font-weight:400;font-style:normal;">"Starting ProducerExample ..."</span>);<br>            sendMessages();<br>    }<br>    <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:50px;font-weight:400;font-style:normal;">private</span> <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">static</span> <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:29px;font-weight:400;font-style:normal;">void</span> sendMessages() throws InterruptedException, IOException {<br>            Producer&lt;<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span>, <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">String</span>&gt; producer = createProducer();<br>            sendMessages(producer);<br>            <span class="hljs-default-comment" style="color:rgb(92,99,112);background:rgba(0,0,0,0);width:564px;font-weight:400;font-style:italic;">// Allow the producer to complete sending of the messages before program exit.</span><br>            Thread.sleep(<span class="hljs-default-number" style="color:rgb(209,154,102);background:rgba(0,0,0,0);width:15px;font-weight:400;font-style:normal;">20</span>);<br>    }<br>    <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:50px;font-weight:400;font-style:normal;">private</span> <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">static</span> Producer&lt;<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span>, <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span>&gt; createProducer() {<br>        Properties props = <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:22px;font-weight:400;font-style:normal;">new</span> Properties();<br>        props.put(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:137px;font-weight:400;font-style:normal;">"bootstrap.servers"</span>, <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:115px;font-weight:400;font-style:normal;">"localhost:9092"</span>);<br>        props.put(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">"acks"</span>, <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:36px;font-weight:400;font-style:normal;">"all"</span>);<br>        props.put(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:65px;font-weight:400;font-style:normal;">"retries"</span>, <span class="hljs-default-number" style="color:rgb(209,154,102);background:rgba(0,0,0,0);width:8px;font-weight:400;font-style:normal;">0</span>);<br>        <span class="hljs-default-comment" style="color:rgb(92,99,112);background:rgba(0,0,0,0);width:606px;font-weight:400;font-style:italic;">// Controls how much bytes sender would wait to batch up before publishing to Kafka.</span><br>        props.put(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:87px;font-weight:400;font-style:normal;">"batch.size"</span>, <span class="hljs-default-number" style="color:rgb(209,154,102);background:rgba(0,0,0,0);width:14px;font-weight:400;font-style:normal;">10</span>);<br>        props.put(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:79px;font-weight:400;font-style:normal;">"linger.ms"</span>, <span class="hljs-default-number" style="color:rgb(209,154,102);background:rgba(0,0,0,0);width:7px;font-weight:400;font-style:normal;">1</span>);<br>        props.put(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:115px;font-weight:400;font-style:normal;">"key.serializer"</span>, <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:404px;font-weight:400;font-style:normal;">"org.apache.kafka.common.serialization.StringSerializer"</span>);<br>        props.put(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:130px;font-weight:400;font-style:normal;">"value.serializer"</span>, <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:405px;font-weight:400;font-style:normal;">"org.apache.kafka.common.serialization.StringSerializer"</span>);<br>        <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">return</span> <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:22px;font-weight:400;font-style:normal;">new</span> KafkaProducer(props);<br>    }<br>    <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:50px;font-weight:400;font-style:normal;">private</span> <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">static</span> <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:29px;font-weight:400;font-style:normal;">void</span> sendMessages(Producer&lt;<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span>, <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span>&gt; producer) {<br>        <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span> topic = <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:101px;font-weight:400;font-style:normal;">"normal-topic"</span>;<br>        int partition = <span class="hljs-default-number" style="color:rgb(209,154,102);background:rgba(0,0,0,0);width:7px;font-weight:400;font-style:normal;">0</span>;<br>        long record = <span class="hljs-default-number" style="color:rgb(209,154,102);background:rgba(0,0,0,0);width:7px;font-weight:400;font-style:normal;">1</span>;<br>        <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:21px;font-weight:400;font-style:normal;">for</span> (int i = <span class="hljs-default-number" style="color:rgb(209,154,102);background:rgba(0,0,0,0);width:7px;font-weight:400;font-style:normal;">1</span>; i &lt;= <span class="hljs-default-number" style="color:rgb(209,154,102);background:rgba(0,0,0,0);width:15px;font-weight:400;font-style:normal;">10</span>; i++) {<br>            producer.send(<br>                <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:22px;font-weight:400;font-style:normal;">new</span> ProducerRecord&lt;<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span>, <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">String</span>&gt;(topic, partition,                                 Long.toString(record),Long.toString(record++)));<br>        }<br>    }<br>}</p><p style="line-height:1.75em;letter-spacing:1px;text-align:center;"><strong>（三）消费者</strong></p><p style="line-height:1.75em;letter-spacing:1px;text-align:left;">消费者注册到kafka有多种方式：</p><p style="line-height:1.75em;letter-spacing:1px;text-align:left;"><strong>subscribe:</strong>这种方式在新增topic或者partition或者消费者增加或者消费者减少的时候，会进行消费者组内消费者的再平衡。</p><p style="line-height:1.75em;letter-spacing:1px;"><strong>assign:</strong>这种方式注册的消费者不会进行rebalance。</p><p style="line-height:1.75em;letter-spacing:1px;">上面两种方式都是可以实现，三种消费语义的。具体API的使用请看下文。</p><p style="line-height:1.75em;letter-spacing:1px;"><strong>1. At-most-once Kafka Consumer</strong></p><p style="line-height:1.75em;letter-spacing:1px;">做多一次消费语义是kafka消费者的默认实现。配置这种消费者最简单的方式是</p><p style="line-height:1.75em;letter-spacing:1px;">1). enable.auto.commit设置为true。</p><p style="line-height:1.75em;letter-spacing:1px;">2). auto.commit.interval.ms设置为一个较低的时间范围。</p><p style="line-height:1.75em;letter-spacing:1px;">3). consumer.commitSync()不要调用该方法。</p><p style="line-height:1.75em;letter-spacing:1px;">由于上面的配置，就可以使得kafka有线程负责按照指定间隔提交offset。</p><p style="line-height:1.75em;letter-spacing:1px;">但是这种方式会使得kafka消费者有两种消费语义：</p><p style="line-height:1.75em;letter-spacing:1px;"><strong>a.最多一次语义-&gt;at-most-once</strong></p><p style="line-height:1.75em;letter-spacing:1px;">消费者的offset已经提交，但是消息还在处理，这个时候挂了，再重启的时候会从上次提交的offset处消费，导致上次在处理的消息部分丢失。</p><p style="line-height:1.75em;letter-spacing:1px;"><strong>b. 最少一次消费语义-&gt;at-least-once</strong></p><p style="line-height:1.75em;letter-spacing:1px;">消费者已经处理完了，但是offset还没提交，那么这个时候消费者挂了，就会导致消费者重复消费消息处理。但是由于auto.commit.interval.ms设置为一个较低的时间范围，会降低这种情况出现的概率。</p><p style="line-height:1.75em;letter-spacing:1px;">代码如下：</p><pre style="background:none;"></pre><p style="font-size:.85em;background:rgb(40,44,52);color:rgb(171,178,191);line-height:1.75em;letter-spacing:1px;"><span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">public</span> <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:36px;font-weight:400;font-style:normal;">class</span> AtMostOnceConsumer {<br>        <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">public</span> <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">static</span> <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:29px;font-weight:400;font-style:normal;">void</span> main(<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span>[] str) throws InterruptedException {<br>            System.out.println(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:245px;font-weight:400;font-style:normal;">"Starting  AtMostOnceConsumer ..."</span>);<br>            execute();<br>        }<br>        <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:50px;font-weight:400;font-style:normal;">private</span> <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">static</span> <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:29px;font-weight:400;font-style:normal;">void</span> execute() throws InterruptedException {<br>                KafkaConsumer&lt;<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span>, <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">String</span>&gt; consumer = createConsumer();<br>                <span class="hljs-default-comment" style="color:rgb(92,99,112);background:rgba(0,0,0,0);width:521px;font-weight:400;font-style:italic;">// Subscribe to all partition in that topic. 'assign' could be used here</span><br>                <span class="hljs-default-comment" style="color:rgb(92,99,112);background:rgba(0,0,0,0);width:441px;font-weight:400;font-style:italic;">// instead of 'subscribe' to subscribe to specific partition.</span><br>                consumer.subscribe(Arrays.asList(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:101px;font-weight:400;font-style:normal;">"normal-topic"</span>));<br>                processRecords(consumer);<br>        }<br>        <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:50px;font-weight:400;font-style:normal;">private</span> <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">static</span> KafkaConsumer&lt;<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span>, <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span>&gt; createConsumer() {<br>                Properties props = <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:21px;font-weight:400;font-style:normal;">new</span> Properties();<br>                props.put(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:137px;font-weight:400;font-style:normal;">"bootstrap.servers"</span>, <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:116px;font-weight:400;font-style:normal;">"localhost:9092"</span>);<br>                <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">String</span> consumeGroup = <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:36px;font-weight:400;font-style:normal;">"cg1"</span>;<br>                props.put(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:72px;font-weight:400;font-style:normal;">"group.id"</span>, consumeGroup);<br>                <span class="hljs-default-comment" style="color:rgb(92,99,112);background:rgba(0,0,0,0);width:369px;font-weight:400;font-style:italic;">// Set this property, if auto commit should happen.</span><br>                props.put(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:144px;font-weight:400;font-style:normal;">"enable.auto.commit"</span>, <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">"true"</span>);<br>                <span class="hljs-default-comment" style="color:rgb(92,99,112);background:rgba(0,0,0,0);width:492px;font-weight:400;font-style:italic;">// Auto commit interval, kafka would commit offset at this interval.</span><br>                props.put(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:180px;font-weight:400;font-style:normal;">"auto.commit.interval.ms"</span>, <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:36px;font-weight:400;font-style:normal;">"101"</span>);<br>                <span class="hljs-default-comment" style="color:rgb(92,99,112);background:rgba(0,0,0,0);width:484px;font-weight:400;font-style:italic;">// This is how to control number of records being read in each poll</span><br>                props.put(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:195px;font-weight:400;font-style:normal;">"max.partition.fetch.bytes"</span>, <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:36px;font-weight:400;font-style:normal;">"135"</span>);<br>                <span class="hljs-default-comment" style="color:rgb(92,99,112);background:rgba(0,0,0,0);width:391px;font-weight:400;font-style:italic;">// Set this if you want to always read from beginning.</span><br>                <span class="hljs-default-comment" style="color:rgb(92,99,112);background:rgba(0,0,0,0);width:333px;font-weight:400;font-style:italic;">// props.put("auto.offset.reset", "earliest");</span><br>                props.put(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:166px;font-weight:400;font-style:normal;">"heartbeat.interval.ms"</span>, <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">"3000"</span>);<br>                props.put(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:144px;font-weight:400;font-style:normal;">"session.timeout.ms"</span>, <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">"6001"</span>);<br>                props.put(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:130px;font-weight:400;font-style:normal;">"key.deserializer"</span>,<br>                        <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:419px;font-weight:400;font-style:normal;">"org.apache.kafka.common.serialization.StringDeserializer"</span>);<br>                props.put(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:144px;font-weight:400;font-style:normal;">"value.deserializer"</span>,<br>                        <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:419px;font-weight:400;font-style:normal;">"org.apache.kafka.common.serialization.StringDeserializer"</span>);<br>                <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">return</span> <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:22px;font-weight:400;font-style:normal;">new</span> KafkaConsumer&lt;<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span>, <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span>&gt;(props);<br>        }<br>        <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:50px;font-weight:400;font-style:normal;">private</span> <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">static</span> <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:29px;font-weight:400;font-style:normal;">void</span> processRecords(KafkaConsumer&lt;<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span>, <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">String</span>&gt; consumer)  {<br>                <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:37px;font-weight:400;font-style:normal;">while</span> (<span class="hljs-default-literal" style="color:rgb(86,182,194);background:rgba(0,0,0,0);width:29px;font-weight:400;font-style:normal;">true</span>) {<br>                        ConsumerRecords&lt;<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span>, <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span>&gt; records = consumer.poll(<span class="hljs-default-number" style="color:rgb(209,154,102);background:rgba(0,0,0,0);width:21px;font-weight:400;font-style:normal;">100</span>);<br>                        long lastOffset = <span class="hljs-default-number" style="color:rgb(209,154,102);background:rgba(0,0,0,0);width:7px;font-weight:400;font-style:normal;">0</span>;<br>                        <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:22px;font-weight:400;font-style:normal;">for</span> (ConsumerRecord&lt;<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span>, <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">String</span>&gt; record : records) {<br>                                System.out.printf(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:282px;font-weight:400;font-style:normal;">"\n\roffset = %d, key = %s, value = %s"</span>, record.offset(),                                             record.key(), record.value());<br>                                lastOffset = record.offset();<br>                         }<br>                System.out.println(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:137px;font-weight:400;font-style:normal;">"lastOffset read: "</span> + lastOffset);<br>                process();<br>                }<br>        }<br>        <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:50px;font-weight:400;font-style:normal;">private</span> <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">static</span> <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:29px;font-weight:400;font-style:normal;">void</span> process() throws InterruptedException {<br>                <span class="hljs-default-comment" style="color:rgb(92,99,112);background:rgba(0,0,0,0);width:427px;font-weight:400;font-style:italic;">// create some delay to simulate processing of the message.</span><br>                Thread.sleep(<span class="hljs-default-number" style="color:rgb(209,154,102);background:rgba(0,0,0,0);width:15px;font-weight:400;font-style:normal;">20</span>);<br>        }<br>}</p><p style="line-height:1.75em;letter-spacing:1px;"><strong>2. At-least-once kafka consumer</strong></p><p style="line-height:1.75em;letter-spacing:1px;">实现最少一次消费语义的消费者也很简单。</p><p style="line-height:1.75em;letter-spacing:1px;">1). 设置enable.auto.commit为false</p><p style="line-height:1.75em;letter-spacing:1px;">2). 消息处理完之后手动调用consumer.commitSync()</p><p style="line-height:1.75em;letter-spacing:1px;">这种方式就是要手动在处理完该次poll得到消息之后，调用offset异步提交函数consumer.commitSync()。建议是消费者内部实现密等，来避免消费者重复处理消息进而得到重复结果。最多一次发生的场景是消费者的消息处理完并输出到结果库（也可能是部分处理完），但是offset还没提交，这个时候消费者挂掉了，再重启的时候会重新消费并处理消息。</p><p style="line-height:1.75em;letter-spacing:1px;">代码如下：</p><pre style="background:none;"></pre><p style="font-size:.85em;background:rgb(40,44,52);color:rgb(171,178,191);line-height:1.75em;letter-spacing:1px;"><span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">public</span> <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:36px;font-weight:400;font-style:normal;">class</span> AtLeastOnceConsumer {<br>    <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">public</span> <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">static</span> <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:29px;font-weight:400;font-style:normal;">void</span> main(<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span>[] str) throws InterruptedException {<br>            System.out.println(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:383px;font-weight:400;font-style:normal;">"Starting AutoOffsetGuranteedAtLeastOnceConsumer ..."</span>);<br>            execute();<br>     }<br>    <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:50px;font-weight:400;font-style:normal;">private</span> <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">static</span> <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:29px;font-weight:400;font-style:normal;">void</span> execute() throws InterruptedException {<br>            KafkaConsumer&lt;<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span>, <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">String</span>&gt; consumer = createConsumer();<br>            <span class="hljs-default-comment" style="color:rgb(92,99,112);background:rgba(0,0,0,0);width:521px;font-weight:400;font-style:italic;">// Subscribe to all partition in that topic. 'assign' could be used here</span><br>            <span class="hljs-default-comment" style="color:rgb(92,99,112);background:rgba(0,0,0,0);width:441px;font-weight:400;font-style:italic;">// instead of 'subscribe' to subscribe to specific partition.</span><br>            consumer.subscribe(Arrays.asList(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:101px;font-weight:400;font-style:normal;">"normal-topic"</span>));<br>            processRecords(consumer);<br>     }<br>     <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:50px;font-weight:400;font-style:normal;">private</span> <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">static</span> KafkaConsumer&lt;<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">String</span>, <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">String</span>&gt; createConsumer() {<br>            Properties props = <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:21px;font-weight:400;font-style:normal;">new</span> Properties();<br>            props.put(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:137px;font-weight:400;font-style:normal;">"bootstrap.servers"</span>, <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:116px;font-weight:400;font-style:normal;">"localhost:9092"</span>);<br>            <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">String</span> consumeGroup = <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:37px;font-weight:400;font-style:normal;">"cg1"</span>;<br>            props.put(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:72px;font-weight:400;font-style:normal;">"group.id"</span>, consumeGroup);<br>            <span class="hljs-default-comment" style="color:rgb(92,99,112);background:rgba(0,0,0,0);width:369px;font-weight:400;font-style:italic;">// Set this property, if auto commit should happen.</span><br>            props.put(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:144px;font-weight:400;font-style:normal;">"enable.auto.commit"</span>, <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">"true"</span>);<br>            <span class="hljs-default-comment" style="color:rgb(92,99,112);background:rgba(0,0,0,0);width:586px;font-weight:400;font-style:italic;">// Make Auto commit interval to a big number so that auto commit does not happen,</span><br>            <span class="hljs-default-comment" style="color:rgb(92,99,112);background:rgba(0,0,0,0);font-weight:400;font-style:italic;">// we are going to control the offset commit via consumer.commitSync(); after processing             // message.</span><br>            props.put(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:180px;font-weight:400;font-style:normal;">"auto.commit.interval.ms"</span>, <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:101px;font-weight:400;font-style:normal;">"999999999999"</span>);<br>            <span class="hljs-default-comment" style="color:rgb(92,99,112);background:rgba(0,0,0,0);width:492px;font-weight:400;font-style:italic;">// This is how to control number of messages being read in each poll</span><br>            props.put(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:195px;font-weight:400;font-style:normal;">"max.partition.fetch.bytes"</span>, <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:36px;font-weight:400;font-style:normal;">"135"</span>);<br>            props.put(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:166px;font-weight:400;font-style:normal;">"heartbeat.interval.ms"</span>, <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">"3000"</span>);<br>            props.put(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:144px;font-weight:400;font-style:normal;">"session.timeout.ms"</span>, <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">"6001"</span>);<br>            props.put(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:130px;font-weight:400;font-style:normal;">"key.deserializer"</span>, <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:419px;font-weight:400;font-style:normal;">"org.apache.kafka.common.serialization.StringDeserializer"</span>);<br>            props.put(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:144px;font-weight:400;font-style:normal;">"value.deserializer"</span>,<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:419px;font-weight:400;font-style:normal;">"org.apache.kafka.common.serialization.StringDeserializer"</span>);<br>            <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">return</span> <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:22px;font-weight:400;font-style:normal;">new</span> KafkaConsumer&lt;<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span>, <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span>&gt;(props);<br>    }<br>     <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:50px;font-weight:400;font-style:normal;">private</span> <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">static</span> <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:29px;font-weight:400;font-style:normal;">void</span> processRecords(KafkaConsumer&lt;<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span>, <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span>&gt; consumer) throws {<br>            <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:37px;font-weight:400;font-style:normal;">while</span> (<span class="hljs-default-literal" style="color:rgb(86,182,194);background:rgba(0,0,0,0);width:29px;font-weight:400;font-style:normal;">true</span>) {<br>                    ConsumerRecords&lt;<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span>, <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span>&gt; records = consumer.poll(<span class="hljs-default-number" style="color:rgb(209,154,102);background:rgba(0,0,0,0);width:22px;font-weight:400;font-style:normal;">100</span>);<br>                    long lastOffset = <span class="hljs-default-number" style="color:rgb(209,154,102);background:rgba(0,0,0,0);width:8px;font-weight:400;font-style:normal;">0</span>;<br>                    <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:22px;font-weight:400;font-style:normal;">for</span> (ConsumerRecord&lt;<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span>, <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span>&gt; record : records) {<br>                        System.out.printf(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:282px;font-weight:400;font-style:normal;">"\n\roffset = %d, key = %s, value = %s"</span>, record.offset(),                                         record.key(), record.value());<br>                        lastOffset = record.offset();<br>                    }<br>                    System.out.println(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:137px;font-weight:400;font-style:normal;">"lastOffset read: "</span> + lastOffset);<br>                    process();<br>                    <span class="hljs-default-comment" style="color:rgb(92,99,112);background:rgba(0,0,0,0);width:571px;font-weight:400;font-style:italic;">// Below call is important to control the offset commit. Do this call after you</span><br>                    <span class="hljs-default-comment" style="color:rgb(92,99,112);background:rgba(0,0,0,0);width:304px;font-weight:400;font-style:italic;">// finish processing the business process.</span><br>                    consumer.commitSync();<br>            }<br>    }<br>    <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:50px;font-weight:400;font-style:normal;">private</span> <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">static</span> <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:29px;font-weight:400;font-style:normal;">void</span> process() throws InterruptedException {<br>        <span class="hljs-default-comment" style="color:rgb(92,99,112);background:rgba(0,0,0,0);width:419px;font-weight:400;font-style:italic;">// create some delay to simulate processing of the record.</span><br>        Thread.sleep(<span class="hljs-default-number" style="color:rgb(209,154,102);background:rgba(0,0,0,0);width:14px;font-weight:400;font-style:normal;">20</span>);<br>    }<br>}</p><p style="line-height:1.75em;letter-spacing:1px;"><strong>3. 使用subscribe实现Exactly-once </strong></p><p style="line-height:1.75em;letter-spacing:1px;">使用subscribe实现Exactly-once 很简单，具体思路如下：</p><p style="line-height:1.75em;letter-spacing:1px;">1). 将enable.auto.commit设置为false。</p><p style="line-height:1.75em;letter-spacing:1px;">2). 不调用consumer.commitSync()。</p><p style="line-height:1.75em;letter-spacing:1px;">3). 使用subcribe定于topic。</p><p style="line-height:1.75em;letter-spacing:1px;">4). 实现一个ConsumerRebalanceListener，在该listener内部执行</p><p style="line-height:1.75em;letter-spacing:1px;">consumer.seek(topicPartition,offset)，从指定的topic/partition的offset处启动。</p><p style="line-height:1.75em;letter-spacing:1px;">5). 在处理消息的时候，要同时控制保存住每个消息的offset。以原子事务的方式保存offset和处理的消息结果。传统数据库实现原子事务比较简单。但对于非传统数据库，比如hdfs或者nosql，为了实现这个目标，只能将offset与消息保存在同一行。</p><p style="line-height:1.75em;letter-spacing:1px;">6). 实现密等，作为保护层。</p><p style="line-height:1.75em;letter-spacing:1px;">代码如下：</p><pre style="background:none;"></pre><p style="font-size:.85em;background:rgb(40,44,52);color:rgb(171,178,191);line-height:1.75em;letter-spacing:1px;"><span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">public</span> <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:36px;font-weight:400;font-style:normal;">class</span> ExactlyOnceDynamicConsumer {<br>       <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:51px;font-weight:400;font-style:normal;">private</span> <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">static</span> OffsetManager offsetManager = <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:22px;font-weight:400;font-style:normal;">new</span> OffsetManager(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:73px;font-weight:400;font-style:normal;">"storage2"</span>);<br>        <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">public</span> <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">static</span> <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:29px;font-weight:400;font-style:normal;">void</span> main(<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span>[] str) throws InterruptedException {<br>                System.out.println(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:296px;font-weight:400;font-style:normal;">"Starting ExactlyOnceDynamicConsumer ..."</span>);<br>                readMessages();<br>        }<br>        <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:50px;font-weight:400;font-style:normal;">private</span> <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">static</span> <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:29px;font-weight:400;font-style:normal;">void</span> readMessages() throws InterruptedException {<br>                KafkaConsumer&lt;<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span>, <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">String</span>&gt; consumer = createConsumer();<br>                <span class="hljs-default-comment" style="color:rgb(92,99,112);background:rgba(0,0,0,0);width:586px;font-weight:400;font-style:italic;">// Manually controlling offset but register consumer to topics to get dynamically</span><br>                <span class="hljs-default-comment" style="color:rgb(92,99,112);background:rgba(0,0,0,0);width:463px;font-weight:400;font-style:italic;">//  assigned partitions. Inside MyConsumerRebalancerListener use</span><br>                <span class="hljs-default-comment" style="color:rgb(92,99,112);background:rgba(0,0,0,0);width:607px;font-weight:400;font-style:italic;">// consumer.seek(topicPartition,offset) to control offset which messages to be read.</span><br>                consumer.subscribe(Arrays.asList(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:101px;font-weight:400;font-style:normal;">"normal-topic"</span>),<br>                                <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:22px;font-weight:400;font-style:normal;">new</span> MyConsumerRebalancerListener(consumer));<br>                processRecords(consumer);<br>        }<br>        <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:50px;font-weight:400;font-style:normal;">private</span> <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">static</span> KafkaConsumer&lt;<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span>, <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span>&gt; createConsumer() {<br>                Properties props = <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:21px;font-weight:400;font-style:normal;">new</span> Properties();<br>                props.put(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:137px;font-weight:400;font-style:normal;">"bootstrap.servers"</span>, <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:116px;font-weight:400;font-style:normal;">"localhost:9092"</span>);<br>                <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">String</span> consumeGroup = <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:36px;font-weight:400;font-style:normal;">"cg3"</span>;<br>                props.put(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:72px;font-weight:400;font-style:normal;">"group.id"</span>, consumeGroup);<br>                <span class="hljs-default-comment" style="color:rgb(92,99,112);background:rgba(0,0,0,0);width:391px;font-weight:400;font-style:italic;">// Below is a key setting to turn off the auto commit.</span><br>                props.put(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:144px;font-weight:400;font-style:normal;">"enable.auto.commit"</span>, <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:50px;font-weight:400;font-style:normal;">"false"</span>);<br>                props.put(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:166px;font-weight:400;font-style:normal;">"heartbeat.interval.ms"</span>, <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">"2000"</span>);<br>                props.put(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:144px;font-weight:400;font-style:normal;">"session.timeout.ms"</span>, <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">"6001"</span>);<br>                <span class="hljs-default-comment" style="color:rgb(92,99,112);background:rgba(0,0,0,0);font-weight:400;font-style:italic;">// Control maximum data on each poll, make sure this value is bigger than the maximum                   // single message size</span><br>                props.put(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:195px;font-weight:400;font-style:normal;">"max.partition.fetch.bytes"</span>, <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:36px;font-weight:400;font-style:normal;">"140"</span>);<br>                props.put(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:130px;font-weight:400;font-style:normal;">"key.deserializer"</span>,                                 <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:419px;font-weight:400;font-style:normal;">"org.apache.kafka.common.serialization.StringDeserializer"</span>);<br>                props.put(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:144px;font-weight:400;font-style:normal;">"value.deserializer"</span>,                         <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:419px;font-weight:400;font-style:normal;">"org.apache.kafka.common.serialization.StringDeserializer"</span>);<br>                <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">return</span> <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:22px;font-weight:400;font-style:normal;">new</span> KafkaConsumer&lt;<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span>, <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span>&gt;(props);<br>        }<br>        <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:50px;font-weight:400;font-style:normal;">private</span> <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">static</span> <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:29px;font-weight:400;font-style:normal;">void</span> processRecords(KafkaConsumer&lt;<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span>, <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">String</span>&gt; consumer) {<br>            <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:37px;font-weight:400;font-style:normal;">while</span> (<span class="hljs-default-literal" style="color:rgb(86,182,194);background:rgba(0,0,0,0);width:29px;font-weight:400;font-style:normal;">true</span>) {<br>                    ConsumerRecords&lt;<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span>, <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span>&gt; records = consumer.poll(<span class="hljs-default-number" style="color:rgb(209,154,102);background:rgba(0,0,0,0);width:22px;font-weight:400;font-style:normal;">100</span>);<br>                    <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:22px;font-weight:400;font-style:normal;">for</span> (ConsumerRecord&lt;<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span>, <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span>&gt; record : records) {<br>                            System.out.printf(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:267px;font-weight:400;font-style:normal;">"offset = %d, key = %s, value = %s\n"</span>, record.offset(),                                     record.key(), record.value());<br>                            <span class="hljs-default-comment" style="color:rgb(92,99,112);background:rgba(0,0,0,0);width:325px;font-weight:400;font-style:italic;">// Save processed offset in external storage.</span><br>                            offsetManager.saveOffsetInExternalStore(record.topic(), record.partition(),                                             record.offset());<br>                    }<br>               }<br>        }<br>}<br><span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">public</span> <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:36px;font-weight:400;font-style:normal;">class</span> MyConsumerRebalancerListener <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:72px;font-weight:400;font-style:normal;">implements</span>                                 org.apache.kafka.clients.consumer.ConsumerRebalanceListener {<br>        <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:50px;font-weight:400;font-style:normal;">private</span> OffsetManager offsetManager = <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:22px;font-weight:400;font-style:normal;">new</span> OffsetManager(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:72px;font-weight:400;font-style:normal;">"storage2"</span>);<br>        <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:50px;font-weight:400;font-style:normal;">private</span> Consumer&lt;<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">String</span>, <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">String</span>&gt; consumer;<br>        <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">public</span> MyConsumerRebalancerListener(Consumer&lt;<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span>, <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">String</span>&gt; consumer) {<br>                <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:29px;font-weight:400;font-style:normal;">this</span>.consumer = consumer;<br>        }<br>        <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">public</span> <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:29px;font-weight:400;font-style:normal;">void</span> onPartitionsRevoked(Collection&lt;TopicPartition&gt; partitions) {<br>                <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:22px;font-weight:400;font-style:normal;">for</span> (TopicPartition partition : partitions) {<br>                    offsetManager.saveOffsetInExternalStore(partition.topic(), partition.partition(),                     consumer.position(partition));<br>                }<br>        }<br>        <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">public</span> <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:29px;font-weight:400;font-style:normal;">void</span> onPartitionsAssigned(Collection&lt;TopicPartition&gt; partitions) {<br>                <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:22px;font-weight:400;font-style:normal;">for</span> (TopicPartition partition : partitions) {<br>                        consumer.seek(partition,                             offsetManager.readOffsetFromExternalStore(partition.topic(),                             partition.partition()));<br>                }<br>        }<br>}<br><span class="hljs-default-comment" style="color:rgb(92,99,112);background:rgba(0,0,0,0);font-weight:400;font-style:italic;">/**<br>* The partition offset are stored in an external storage. In this case in a local file system where <br>* program runs.<br>*/</span><br><span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">public</span> <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:36px;font-weight:400;font-style:normal;">class</span> OffsetManager {<br>        <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:50px;font-weight:400;font-style:normal;">private</span> <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">String</span> storagePrefix;<br>        <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">public</span> OffsetManager(<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">String</span> storagePrefix) {<br>                <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:29px;font-weight:400;font-style:normal;">this</span>.storagePrefix = storagePrefix;<br>        }<br>    <span class="hljs-default-comment" style="color:rgb(92,99,112);background:rgba(0,0,0,0);width:491px;font-weight:400;font-style:italic;">/**<br>        * Overwrite the offset for the topic in an external storage.<br>        *<br>        * @param topic - Topic name.<br>        * @param partition - Partition of the topic.<br>        * @param offset - offset to be stored.<br>        */</span><br>        <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:28px;font-weight:400;font-style:normal;">void</span> saveOffsetInExternalStore(<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span> topic, int partition, long offset) {<br>            <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:22px;font-weight:400;font-style:normal;">try</span> {<br>                FileWriter writer = <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:22px;font-weight:400;font-style:normal;">new</span> FileWriter(storageName(topic, partition), <span class="hljs-default-literal" style="color:rgb(86,182,194);background:rgba(0,0,0,0);width:36px;font-weight:400;font-style:normal;">false</span>);<br>                BufferedWriter bufferedWriter = <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:21px;font-weight:400;font-style:normal;">new</span> BufferedWriter(writer);<br>                bufferedWriter.write(offset + <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:15px;font-weight:400;font-style:normal;">""</span>);<br>                bufferedWriter.flush();<br>                bufferedWriter.close();<br>            } <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:36px;font-weight:400;font-style:normal;">catch</span> (Exception e) {<br>                    e.printStackTrace();<br>                    <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:36px;font-weight:400;font-style:normal;">throw</span> <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:21px;font-weight:400;font-style:normal;">new</span> RuntimeException(e);<br>            }<br>        }<br>        <span class="hljs-default-comment" style="color:rgb(92,99,112);background:rgba(0,0,0,0);width:563px;font-weight:400;font-style:italic;">/**<br>            * @return he last offset + 1 for the provided topic and partition.<br>        */</span><br>        long readOffsetFromExternalStore(<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span> topic, int partition) {<br>                <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:22px;font-weight:400;font-style:normal;">try</span> {<br>                        Stream&lt;<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span>&gt; stream = Files.lines(Paths.get(storageName(topic, partition)));<br>                        <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">return</span> Long.parseLong(stream.collect(Collectors.toList()).get(<span class="hljs-default-number" style="color:rgb(209,154,102);background:rgba(0,0,0,0);width:7px;font-weight:400;font-style:normal;">0</span>)) + <span class="hljs-default-number" style="color:rgb(209,154,102);background:rgba(0,0,0,0);width:8px;font-weight:400;font-style:normal;">1</span>;<br>                } <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:36px;font-weight:400;font-style:normal;">catch</span> (Exception e) {<br>                    e.printStackTrace();<br>                }<br>                <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">return</span> <span class="hljs-default-number" style="color:rgb(209,154,102);background:rgba(0,0,0,0);width:7px;font-weight:400;font-style:normal;">0</span>;<br>        }<br>        <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:50px;font-weight:400;font-style:normal;">private</span> <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">String</span> storageName(<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span> topic, int partition) {<br>            <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">return</span> storagePrefix + <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:21px;font-weight:400;font-style:normal;">"-"</span> + topic + <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:21px;font-weight:400;font-style:normal;">"-"</span> + partition;<br>        }<br>}</p><p style="line-height:1.75em;letter-spacing:1px;"><strong><span style="letter-spacing:1px;">4. 使用assign实现Exactly-once</span></strong></p><p style="line-height:1.75em;letter-spacing:1px;">使用assign实现Exactly-once 也很简单，具体思路如下：</p><p style="line-height:1.75em;letter-spacing:1px;">1). 将enable.auto.commit设置为false。</p><p style="line-height:1.75em;letter-spacing:1px;">2). 不调用consumer.commitSync()。</p><p style="line-height:1.75em;letter-spacing:1px;">3). 调用assign注册kafka消费者到kafka</p><p style="line-height:1.75em;letter-spacing:1px;">4). 初次启动的时候，调用consumer.seek(topicPartition，offset)来指定offset。</p><p style="line-height:1.75em;letter-spacing:1px;">5). 在处理消息的时候，要同时控制保存住每个消息的offset。以原子事务的方式保存offset和处理的消息结果。传统数据库实现原子事务比较简单。但对于非传统数据库，比如hdfs或者nosql，为了实现这个目标，只能将offset与消息保存在同一行。</p><p style="line-height:1.75em;letter-spacing:1px;">6). 实现密等，作为保护层。</p><p style="line-height:1.75em;letter-spacing:1px;">代码如下：</p><pre style="background:none;"></pre><p style="font-size:.85em;background:rgb(40,44,52);color:rgb(171,178,191);line-height:1.75em;letter-spacing:1px;"><span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">public</span> <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:36px;font-weight:400;font-style:normal;">class</span> ExactlyOnceStaticConsumer {<br>        <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:50px;font-weight:400;font-style:normal;">private</span> <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">static</span> OffsetManager offsetManager = <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:21px;font-weight:400;font-style:normal;">new</span> OffsetManager(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:72px;font-weight:400;font-style:normal;">"storage1"</span>);<br>        <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">public</span> <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">static</span> <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:29px;font-weight:400;font-style:normal;">void</span> main(<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span>[] str) throws InterruptedException, IOException {<br>                System.out.println(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:289px;font-weight:400;font-style:normal;">"Starting ExactlyOnceStaticConsumer ..."</span>);<br>                readMessages();<br>        }<br>        <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:50px;font-weight:400;font-style:normal;">private</span> <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">static</span> <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:29px;font-weight:400;font-style:normal;">void</span> readMessages() throws InterruptedException, IOException {<br>                KafkaConsumer&lt;<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span>, <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">String</span>&gt; consumer = createConsumer();<br>                <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">String</span> topic = <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:101px;font-weight:400;font-style:normal;">"normal-topic"</span>;<br>                int partition = <span class="hljs-default-number" style="color:rgb(209,154,102);background:rgba(0,0,0,0);width:7px;font-weight:400;font-style:normal;">1</span>;<br>                TopicPartition topicPartition =<br>                                registerConsumerToSpecificPartition(consumer, topic, partition);<br>                <span class="hljs-default-comment" style="color:rgb(92,99,112);background:rgba(0,0,0,0);width:499px;font-weight:400;font-style:italic;">// Read the offset for the topic and partition from external storage.</span><br>                long offset = offsetManager.readOffsetFromExternalStore(topic, partition);<br>                <span class="hljs-default-comment" style="color:rgb(92,99,112);background:rgba(0,0,0,0);width:463px;font-weight:400;font-style:italic;">// Use seek and go to exact offset for that topic and partition.</span><br>                consumer.seek(topicPartition, offset);<br>                processRecords(consumer);<br>        }<br>        <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:50px;font-weight:400;font-style:normal;">private</span> <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">static</span> KafkaConsumer&lt;<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span>, <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span>&gt; createConsumer() {<br>                Properties props = <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:21px;font-weight:400;font-style:normal;">new</span> Properties();<br>                props.put(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:137px;font-weight:400;font-style:normal;">"bootstrap.servers"</span>, <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:116px;font-weight:400;font-style:normal;">"localhost:9092"</span>);<br>                <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">String</span> consumeGroup = <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:36px;font-weight:400;font-style:normal;">"cg2"</span>;<br>                props.put(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:72px;font-weight:400;font-style:normal;">"group.id"</span>, consumeGroup);<br>                <span class="hljs-default-comment" style="color:rgb(92,99,112);background:rgba(0,0,0,0);width:391px;font-weight:400;font-style:italic;">// Below is a key setting to turn off the auto commit.</span><br>                props.put(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:144px;font-weight:400;font-style:normal;">"enable.auto.commit"</span>, <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:50px;font-weight:400;font-style:normal;">"false"</span>);<br>                props.put(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:166px;font-weight:400;font-style:normal;">"heartbeat.interval.ms"</span>, <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">"2000"</span>);<br>                props.put(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:144px;font-weight:400;font-style:normal;">"session.timeout.ms"</span>, <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">"6001"</span>);<br>                <span class="hljs-default-comment" style="color:rgb(92,99,112);background:rgba(0,0,0,0);font-weight:400;font-style:italic;">// control maximum data on each poll, make sure this value is bigger than the maximum                 // single message size</span><br>                props.put(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:195px;font-weight:400;font-style:normal;">"max.partition.fetch.bytes"</span>, <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:36px;font-weight:400;font-style:normal;">"140"</span>);<br>                props.put(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:130px;font-weight:400;font-style:normal;">"key.deserializer"</span>,                                     <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:419px;font-weight:400;font-style:normal;">"org.apache.kafka.common.serialization.StringDeserializer"</span>);<br>                props.put(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:144px;font-weight:400;font-style:normal;">"value.deserializer"</span>,                                     <span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:419px;font-weight:400;font-style:normal;">"org.apache.kafka.common.serialization.StringDeserializer"</span>);<br>                <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">return</span> <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:22px;font-weight:400;font-style:normal;">new</span> KafkaConsumer&lt;<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span>, <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span>&gt;(props);<br>        }<br>        <span class="hljs-default-comment" style="color:rgb(92,99,112);background:rgba(0,0,0,0);font-weight:400;font-style:italic;">/**<br>            * Manually listens for specific topic partition. But, if you are looking for example of how to                * dynamically listens to partition and want to manually control offset then see<br>            * ExactlyOnceDynamicConsumer.java<br>            */</span><br>         <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:50px;font-weight:400;font-style:normal;">private</span> <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">static</span> TopicPartition registerConsumerToSpecificPartition(<br>                    KafkaConsumer&lt;<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">String</span>, <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">String</span>&gt; consumer, <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">String</span> topic, int partition) {<br>                    TopicPartition topicPartition = <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:22px;font-weight:400;font-style:normal;">new</span> TopicPartition(topic, partition);<br>                    List&lt;TopicPartition&gt; partitions = Arrays.asList(topicPartition);<br>                    consumer.assign(partitions);<br>                    <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">return</span> topicPartition;<br>          }<br>            <span class="hljs-default-comment" style="color:rgb(92,99,112);background:rgba(0,0,0,0);font-weight:400;font-style:italic;">/**<br>                * Process data and store offset in external store. Best practice is to do these operations<br>                * atomically. <br>                */</span><br>            <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:51px;font-weight:400;font-style:normal;">private</span> <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">static</span> <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:29px;font-weight:400;font-style:normal;">void</span> processRecords(KafkaConsumer&lt;<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">String</span>, <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">String</span>&gt; consumer) throws {<br>                    <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:36px;font-weight:400;font-style:normal;">while</span> (<span class="hljs-default-literal" style="color:rgb(86,182,194);background:rgba(0,0,0,0);width:29px;font-weight:400;font-style:normal;">true</span>) {<br>                           ConsumerRecords&lt;<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">String</span>, <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">String</span>&gt; records = consumer.poll(<span class="hljs-default-number" style="color:rgb(209,154,102);background:rgba(0,0,0,0);width:22px;font-weight:400;font-style:normal;">100</span>);<br>                            <span class="hljs-default-keyword" style="color:rgb(198,120,221);background:rgba(0,0,0,0);width:22px;font-weight:400;font-style:normal;">for</span> (ConsumerRecord&lt;<span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:43px;font-weight:400;font-style:normal;">String</span>, <span class="hljs-default-built_in" style="color:rgb(230,192,123);background:rgba(0,0,0,0);width:44px;font-weight:400;font-style:normal;">String</span>&gt; record : records) {<br>                                    System.out.printf(<span class="hljs-default-string" style="color:rgb(152,195,121);background:rgba(0,0,0,0);width:267px;font-weight:400;font-style:normal;">"offset = %d, key = %s, value = %s\n"</span>, record.offset(),                                                 record.key(), record.value());<br>                                    offsetManager.saveOffsetInExternalStore(record.topic(), record.partition(),                                                 record.offset());<br>                            }<br>                    }<br>            }<br>}</p><p style="margin-left:.5em;letter-spacing:1px;"><strong>[完]</strong></p><p style="margin-left:.5em;letter-spacing:1px;">欢迎点赞转发。</p><p style="text-align:center;"><img src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_png/adI0ApTVBFWF1rkKibTzeA8PicbicYXBsH26a9PXg2HNnlEt1thHBFxUtEjicACeaSlRWictpPziaMdibXmYq34dWfQ9w/640" alt="640"></p>
                </div>
              </div>
                </div>