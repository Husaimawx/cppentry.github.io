---
layout:     post
title:      Kafka系统工具
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								<div class="article-copyright">
					版权声明：本文为博主原创文章，未经博主允许不得转载。					https://blog.csdn.net/u013291394/article/details/50328617				</div>
								            <div id="content_views" class="markdown_views prism-atom-one-dark">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<h1 id="kafka系统工具">Kafka系统工具</h1>

<hr>

<h2 id="前言">前言</h2>

<p>Kafka为我们提供了很多有用的系统工具，这些工具都放在kafka.tools包中，具体的类如下图：</p>

<p><img src="https://img-blog.csdn.net/20151216153029493" alt="kafka-tools" title=""></p>

<h2 id="工具介绍">工具介绍</h2>

<p>下面简要的介绍一下一些比较常用的工具：</p>

<p><strong>1. Consumer Offset Checker</strong></p>

<p>用来展示消费者组、话题、分区、指针偏移量（offset）等值。</p>

<p>可选描述：</p>



<pre class="prettyprint"><code class=" hljs haml">-<span class="ruby">-broker-info                           打印broker的信息                      
</span>-<span class="ruby">-group                                 消费者组                        
</span>-<span class="ruby">-help                                  打印帮助信息                   
</span>-<span class="ruby">-<span class="hljs-keyword">retry</span>.backoff.ms &lt;<span class="hljs-constant">Integer</span>&gt;            错误查询重新尝试间隔(默认为<span class="hljs-number">3000</span>)      
</span>-<span class="ruby">-socket.timeout.ms &lt;<span class="hljs-constant">Integer</span>&gt;           连接超时时间 (默认为<span class="hljs-number">6000</span>)         
</span>-<span class="ruby">-topic                                 消费者的某一个话题，缺失时默认包含所有的话题      
</span>-<span class="ruby">-zookeeper                             zookeeper的地址(默认为<span class="hljs-symbol">localhost:</span><span class="hljs-number">2181</span>)  </span></code></pre>

<p><strong>2. Dump Log Segments</strong></p>

<p>从日志文件中打印消息或者验证日志下标是否正确。</p>

<p>可选描述：</p>



<pre class="prettyprint"><code class=" hljs haml">-<span class="ruby">-deep-iteration                        使用深迭代而不是浅迭代                   
</span>-<span class="ruby">-files &lt;file1, file2, ...&gt;             输入的文件
</span>-<span class="ruby">-key-decoder-<span class="hljs-class"><span class="hljs-keyword">class</span>                     用自己定义的反序列化方式反序列化关键字    </span>
</span>-<span class="ruby">-max-message-size &lt;<span class="hljs-constant">Integer</span><span class="hljs-symbol">:</span> size&gt;      消息最大的字节数(默认为<span class="hljs-number">5242880</span>)        
</span>-<span class="ruby">-print-data-log                        同时打印出日志消息              
</span>-<span class="ruby">-value-decoder-<span class="hljs-class"><span class="hljs-keyword">class</span>                   用自己定义的序列化方式来序列化关键字 </span>
</span>-<span class="ruby">-verify-index-only                     只是认证下标    </span></code></pre>

<p><strong>3. Export Zookeeper Offsets</strong></p>

<p>把不同Kafka节点分区中的指针偏移量输出到如下格式的文件中：</p>

<blockquote>
  <p>/consumers/group1/offsets/topic1/1-0:286894308 <br>
  /consumers/group1/offsets/topic1/2-0:284803985</p>
</blockquote>

<p>可选描述：</p>



<pre class="prettyprint"><code class=" hljs haml">-<span class="ruby">-group                                 消费者组                        
</span>-<span class="ruby">-help                                  打印帮助信息                   
</span>-<span class="ruby">-output-file                           导出的文件名                        
</span>-<span class="ruby">-zkconnect                             zookeeper的地址(默认为<span class="hljs-symbol">localhost:</span><span class="hljs-number">2181</span>)  </span></code></pre>

<p><strong>4. Get Offset Shell</strong></p>

<p>获得某一个消息的指针偏移量。</p>

<p>可选描述：</p>



<pre class="prettyprint"><code class=" hljs haml">-<span class="ruby">-broker-list &lt;<span class="hljs-symbol">hostname:</span>port,...,       每个broker的主机名和端口号     
</span>  hostname:port&gt;                            
-<span class="ruby">-max-wait-ms &lt;<span class="hljs-constant">Integer</span><span class="hljs-symbol">:</span> ms&gt;             每次抓取最长的等待时间 (默认为<span class="hljs-number">1000</span>)       
</span>-<span class="ruby">-offsets &lt;<span class="hljs-constant">Integer</span><span class="hljs-symbol">:</span> count&gt;              返回的偏移量的数目(默认为<span class="hljs-number">1</span>)
</span>-<span class="ruby">-partitions &lt;partition ids&gt;            需要在哪些分区中查询，默认为所有的分区 
</span>-<span class="ruby">-time &lt;<span class="hljs-constant">Long</span><span class="hljs-symbol">:</span> timestamp/-<span class="hljs-number">1</span>(latest)/-<span class="hljs-number">2</span>   设定时间区间   
</span>  (earliest)&gt;                                                                  
-<span class="ruby">-topic &lt;topic&gt;                         设定特定的话题</span></code></pre>

<p><strong>5. Import Zookeeper Offsets</strong></p>

<p>把导出的指针偏移量文件再倒入并放到对应的分区中</p>

<p>必须的参数： <br>
group <br>
可选描述：</p>



<pre class="prettyprint"><code class=" hljs haml">-<span class="ruby">-help                                  打印帮助信息                  
</span>-<span class="ruby">-input-file                            需要导入的文件                            
</span>-<span class="ruby">-zkconnect                             zookeeper的地址(默认为<span class="hljs-symbol">localhost:</span><span class="hljs-number">2181</span>)  </span></code></pre>

<p><strong>6. JMX Tool</strong></p>

<p>通过JMX管理来打印metrics</p>

<p>可选描述：</p>



<pre class="prettyprint"><code class=" hljs haml">-<span class="ruby">-attributes &lt;name&gt;                     需要查询的属性的白名单             
</span>-<span class="ruby">-date-format &lt;format&gt;                  用来格式化时间信息        
</span>-<span class="ruby">-help                                  打印帮助信息             
</span>-<span class="ruby">-jmx-url &lt;service-url&gt;                 获取<span class="hljs-constant">JMX</span>信息的<span class="hljs-constant">URL</span>                        
</span>-<span class="ruby">-object-name &lt;name&gt;                    查询特定的<span class="hljs-constant">JMX</span>对象信息，可以设置多个值，
</span>                                        如果不设置会查询所有的JMX对象         
-<span class="ruby">-reporting-interval &lt;<span class="hljs-constant">Integer</span><span class="hljs-symbol">:</span> ms&gt;      多久获取一次<span class="hljs-constant">JMX</span>信息 (默认为<span class="hljs-number">2000</span>)  </span></code></pre>

<p><strong>7. Kafka Migration</strong></p>

<p>可以将Kafka从0.7版本迁移到0.8版本</p>

<p>可选描述：</p>



<pre class="prettyprint"><code class=" hljs haml">-<span class="ruby">-blacklist &lt;<span class="hljs-constant">Java</span> regex (<span class="hljs-constant">String</span>)&gt;       不需要复制的话题的黑名单                
</span>-<span class="ruby">-consumer.config &lt;config file&gt;         消费者配置文件           
</span>-<span class="ruby">-help                                  打印帮助信息                    
</span>-<span class="ruby">-kafka.<span class="hljs-number">07</span>.jar &lt;kafka <span class="hljs-number">0</span>.<span class="hljs-number">7</span> jar&gt;          kafka <span class="hljs-number">0</span>.<span class="hljs-number">7</span>版本的压缩包                    
</span>-<span class="ruby">-num.producers &lt;<span class="hljs-constant">Integer</span><span class="hljs-symbol">:</span> <span class="hljs-constant">Number</span> of     生产者实例数目(默认为<span class="hljs-number">1</span>)
</span>  producers&gt;                                                          
-<span class="ruby">-num.streams &lt;<span class="hljs-constant">Integer</span><span class="hljs-symbol">:</span> <span class="hljs-constant">Number</span> of       消费者实例数目(默认为<span class="hljs-number">1</span>)
</span>  consumer threads&gt;                                                            
-<span class="ruby">-producer.config &lt;config file&gt;         生产者配置文件                     
</span>-<span class="ruby">-queue.size &lt;<span class="hljs-constant">Integer</span><span class="hljs-symbol">:</span> <span class="hljs-constant">Queue</span> size <span class="hljs-keyword">in</span>    在版本间迁移时消息的缓冲数目   
</span>  terms of number of messages&gt;                
-<span class="ruby">-whitelist &lt;<span class="hljs-constant">Java</span> regex (<span class="hljs-constant">String</span>)&gt;       需要从旧集群复制过去的话题的白名单       
</span>-<span class="ruby">-zkclient.<span class="hljs-number">01</span>.jar &lt;zkClient <span class="hljs-number">0</span>.<span class="hljs-number">1</span> jar     zookeeper <span class="hljs-number">0</span>.<span class="hljs-number">1</span>版本压缩包                  
</span>  file required by Kafka 0.7&gt;        </code></pre>

<p><strong>8. Mirror Maker</strong></p>

<p>提供Kafka集群之间的映射关系，实现跨集群的同步。</p>

<p>可选描述：</p>



<pre class="prettyprint"><code class=" hljs delphi">--abort.<span class="hljs-keyword">on</span>.send.failure &lt;Stop the       出错时是否终止操作(默认为true)  
  entire mirror maker when a send            
  failure occurs&gt;                                                              
--blacklist &lt;Java regex (<span class="hljs-keyword">String</span>)&gt;       不需要同步的话题的黑名单     
--consumer.config &lt;config <span class="hljs-keyword">file</span>&gt;         消费者配置文件           
--consumer.rebalance.listener &lt;A        消费者复杂均衡监听器 
  custom rebalance listener <span class="hljs-keyword">of</span> <span class="hljs-keyword">type</span>               
  ConsumerRebalanceListener&gt;                                                   
--help                                  打印帮助信息                    
--<span class="hljs-keyword">message</span>.handler &lt;A custom <span class="hljs-keyword">message</span>     在生产者和消费者之间来处理消息的处理器 
  handler <span class="hljs-keyword">of</span> <span class="hljs-keyword">type</span>                        
  MirrorMakerMessageHandler&gt;                                     
--<span class="hljs-keyword">message</span>.handler.args &lt;Arguments       消费者负载均衡参数   
  passed <span class="hljs-keyword">to</span> <span class="hljs-keyword">message</span> handler               
  <span class="hljs-function"><span class="hljs-keyword">constructor</span>.&gt;                                                                
--<span class="hljs-title">new</span>.<span class="hljs-title">consumer</span>                          在<span class="hljs-title">mirror</span> <span class="hljs-title">maker</span>时使用新的消费者    
--<span class="hljs-title">num</span>.<span class="hljs-title">streams</span> &lt;<span class="hljs-title">Integer</span>:</span> Number <span class="hljs-keyword">of</span>       指定消费者的线程数(默认为<span class="hljs-number">1</span>)        
  threads&gt;                                                  
--offset.commit.interval.ms &lt;Integer:   偏移量提交间隔(默认为<span class="hljs-number">60000</span>) 
  offset commit interval <span class="hljs-keyword">in</span>                                          
  millisecond&gt;                                                                 
--producer.config &lt;config <span class="hljs-keyword">file</span>&gt;         生产者配置文件             
--rebalance.listener.args &lt;Arguments    消费者负载均衡参数      
  passed <span class="hljs-keyword">to</span> custom rebalance listener     
  <span class="hljs-function"><span class="hljs-keyword">constructor</span> <span class="hljs-title">as</span> <span class="hljs-title">a</span> <span class="hljs-title">string</span>.&gt;                                                    
--<span class="hljs-title">whitelist</span> &lt;<span class="hljs-title">Java</span> <span class="hljs-title">regex</span> <span class="hljs-params">(<span class="hljs-keyword">String</span>)</span>&gt;       需要同步的话题的白名单</span></code></pre>

<p><strong>9. State Change Log Merger</strong></p>

<p>状态转变日志整合工具，可以把来自不同节点不同时间的日志进行整合。</p>

<p>可选描述：</p>



<pre class="prettyprint"><code class=" hljs r">--end-time &lt;end timestamp <span class="hljs-keyword">in</span> the        需要整合的日志的截止时间，在这之前的   
  format java.text.                     日志都要整合(默认为 <span class="hljs-number">9999</span>-<span class="hljs-number">12</span>-<span class="hljs-number">31</span> <span class="hljs-number">23</span>:<span class="hljs-number">59</span>:<span class="hljs-number">59</span>,<span class="hljs-number">999</span>)
  SimpleDateFormat@f17a63e7&gt;                       
--logs &lt;file1,file2,<span class="hljs-keyword">...</span>&gt;                需要整合的日志                                
--logs-regex &lt;<span class="hljs-keyword">for</span> example: /tmp/state-  日志名的正则表达式    
  change.log*&gt;                                            
--partitions &lt;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-keyword">...</span>&gt;                哪些分区的日志需要整合                               
--start-time &lt;start timestamp <span class="hljs-keyword">in</span> the    需要整合的日志的开始时间，在这之后的 
  format java.text.                     日志都要整合(默认为 <span class="hljs-number">0000</span>-<span class="hljs-number">00</span>-<span class="hljs-number">00</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>,<span class="hljs-number">000</span>)   
  SimpleDateFormat@f17a63e7&gt;                        
--topic &lt;topic&gt;                         哪些话题的日志需要整合    </code></pre>

<p><strong>10. Verify Consumer Rebalance</strong></p>

<p>确认消费者是否平衡，确保每个分区只有一个消费者，因为Kafka不支持多个消费者同时对一个分区进行读写。</p>

<p>可选描述：</p>



<pre class="prettyprint"><code class=" hljs haml">-<span class="ruby">-group                                 消费者组                     
</span>-<span class="ruby">-help                                  打印帮助信息                    
</span>-<span class="ruby">-zookeeper.connect                     zookeeper的地址(默认为<span class="hljs-symbol">localhost:</span><span class="hljs-number">2181</span>)   </span></code></pre>



<h2 id="使用方式">使用方式</h2>



<h3 id="脚本命令">脚本命令</h3>

<p>在<span>$</span>{KAFKA_HOME}/bin目录下（windows用户可以在<span>$</span>{KAFKA_HOME}/bin/windows中找到对应的bat脚本）为我们封装好了很多基本的命令脚本，可以直接调用，如：</p>



<pre class="prettyprint"><code class=" hljs ruby">drfish<span class="hljs-variable">@kafka</span><span class="hljs-symbol">:~/kafka_2</span>.<span class="hljs-number">11</span>-<span class="hljs-number">0</span>.<span class="hljs-number">9.0</span>.<span class="hljs-number">0</span><span class="hljs-variable">$ </span>bin/kafka-consumer-offset-checker.sh --zookeeper <span class="hljs-symbol">localhost:</span><span class="hljs-number">2181</span> --group group-<span class="hljs-number">1</span></code></pre>



<h3 id="类调用">类调用</h3>

<p>在<span>$</span>{KAFKA_HOME}/bin目录下还有一个特殊的脚本kafka-run-class.sh，它可以调用所需的类来运行类中的方法，具体方法如下：</p>



<pre class="prettyprint"><code class=" hljs lasso">drfish@kafka:~/kafka_2<span class="hljs-number">.11</span><span class="hljs-subst">-</span><span class="hljs-number">0.9</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>$ bin/kfka<span class="hljs-attribute">-run</span><span class="hljs-attribute">-class</span><span class="hljs-built_in">.</span>sh kafka<span class="hljs-built_in">.</span>tools<span class="hljs-built_in">.</span>ConsumerOffsetChecker <span class="hljs-subst">--</span>zookeeper localhost:<span class="hljs-number">2181</span> <span class="hljs-subst">--</span><span class="hljs-keyword">group</span><span class="hljs-subst">=</span><span class="hljs-keyword">group</span><span class="hljs-subst">-</span><span class="hljs-number">1</span></code></pre>

<p>需要注意的是，当通过调用类来使用工具时，需要使用完整的类名，而且有些类名使用了缩写，如kafka.tools.ImportZkOffsets。</p>



<h3 id="java代码">Java代码</h3>

<p>同样我们可以用Java代码直接通过类来调用相应的工具：</p>



<pre class="prettyprint"><code class="language-java hljs ">String[] arg = <span class="hljs-keyword">new</span> String[] { <span class="hljs-string">"--zookeeper=10.64.253.238:2181"</span>,
    <span class="hljs-string">"--group=group-1"</span> };
ConsumerOffsetChecker.main(arg);</code></pre>



<h3 id="运行结果">运行结果</h3>

<p>上面三种不同的调用方式，最后都会返回类似如下的结果：</p>



<pre class="prettyprint"><code class=" hljs lasso"><span class="hljs-keyword">Group</span>       Topic   Pid Offset   LogSize   Lag    Owner
<span class="hljs-keyword">group</span><span class="hljs-subst">-</span><span class="hljs-number">1</span>     test     <span class="hljs-number">0</span>   <span class="hljs-number">255229</span>   <span class="hljs-number">255229</span>    <span class="hljs-number">0</span>     <span class="hljs-literal">none</span></code></pre>



<h2 id="总结">总结</h2>

<p>本文介绍了一下Kafka提供的系统工具的常用工具，并给出了通过不同方式来运用工具的方法，能够帮助大家更好地来管理Kafka集群。</p>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-9e5741c4b9.css" rel="stylesheet">
                </div>