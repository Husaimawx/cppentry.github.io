---
layout:     post
title:      kafka集群搭建和使用Java写kafka生产者消费者
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<p class="p1"><span class="s1"><a href="http://chengjianxiaoxue.iteye.com/blog/2190488" rel="nofollow"><strong>kafka集群搭建和使用Java写kafka生产者消费者</strong></a></span></p>
<ul class="ul1"><li class="li2"><strong></strong><span class="s2"><strong>博客分类：</strong> <a href="http://chengjianxiaoxue.iteye.com/category/331327" rel="nofollow">
<span class="s3">kafka</span></a></span></li></ul><p class="p2"><span class="s2"> </span></p>
<p class="p3"><span class="s2"> </span></p>
<p class="p3"><span class="s2"> </span></p>
<p class="p3"><span class="s2"><strong>1 kafka集群搭建</strong></span></p>
<p class="p3"><span class="s2"> </span></p>
<p class="p4"><span class="s2">Java代码  </span></p>
<ol class="ol1"><li class="li5"><span class="s4"></span><span class="s5">1</span><span class="s2">.zookeeper集群  搭建在</span><span class="s5">110</span><span class="s2">， </span><span class="s5">111</span><span class="s2">,</span><span class="s5">112</span><span class="s2">  </span></li><li class="li6"><span class="s6">  </span></li><li class="li5"><span class="s7"></span><span class="s5">2</span><span class="s2">.kafka使用</span><span class="s5">3</span><span class="s2">个节点</span><span class="s5">110</span><span class="s2">， </span><span class="s5">111</span><span class="s2">,</span><span class="s5">112</span><span class="s2">  </span></li><li class="li5"><span class="s8"></span><span class="s2">修改配置文件config/server.properties  </span></li><li class="li5"><span class="s8"></span><span class="s2">broker.id=</span><span class="s5">110</span><span class="s2">  </span></li><li class="li5"><span class="s8"></span><span class="s2">host.name=</span><span class="s5">192.168</span><span class="s2">.</span><span class="s5">1.110</span><span class="s2">  </span></li><li class="li5"><span class="s8"></span><span class="s2">log.dirs=/usr/local/kafka_2.</span><span class="s5">10</span><span class="s2">-</span><span class="s5">0.8</span><span class="s2">.</span><span class="s5">2.0</span><span class="s2">/logs  </span></li><li class="li5"><span class="s8"></span><span class="s2">复制到其他两个节点，然后修改对应节点上的config/server.pro   </span></li><li class="li6"><span class="s6">  </span></li><li class="li5"><span class="s7"></span><span class="s5">3</span><span class="s2">.启动,在三个节点分别执行  </span></li><li class="li5"><span class="s8"></span><span class="s2">bin/kafka-server-start.sh  config/server.properties &gt;/dev/</span><span class="s9">null</span><span class="s2"> </span><span class="s5">2</span><span class="s2">&gt;&amp;</span><span class="s5">1</span><span class="s2"> &amp;  </span></li><li class="li6"><span class="s6">  </span></li><li class="li5"><span class="s7"></span><span class="s5">4</span><span class="s2"> 创建主题  </span></li><li class="li5"><span class="s8"></span><span class="s2">bin/kafka-topics.sh --create --zookeeper localhost:</span><span class="s5">2181</span><span class="s2"> --replication-factor </span><span class="s5">3</span><span class="s2"> --partitions </span><span class="s5">3</span><span class="s2"> --topic test  </span></li><li class="li6"><span class="s6">  </span></li><li class="li5"><span class="s7"></span><span class="s5">5</span><span class="s2"> 查看主题详细  </span></li><li class="li5"><span class="s8"></span><span class="s2">bin/kafka-topics.sh --describe --zookeeper localhost:</span><span class="s5">2181</span><span class="s2"> --topic test  </span></li><li class="li5"><span class="s8"></span><span class="s2"> --topic test  </span></li><li class="li5"><span class="s8"></span><span class="s2">Topic:test      PartitionCount:</span><span class="s5">3</span><span class="s2">        ReplicationFactor:</span><span class="s5">3</span><span class="s2">     Configs:  </span></li><li class="li5"><span class="s8"></span><span class="s2">        Topic: test     Partition: </span><span class="s5">0</span><span class="s2">    Leader: </span><span class="s5">110</span><span class="s2">     Replicas: </span><span class="s5">110</span><span class="s2">,</span><span class="s5">111</span><span class="s2">,</span><span class="s5">112</span><span class="s2">  Isr: </span><span class="s5">110</span><span class="s2">,</span><span class="s5">111</span><span class="s2">,</span><span class="s5">112</span><span class="s2">  </span></li><li class="li5"><span class="s8"></span><span class="s2">        Topic: test     Partition: </span><span class="s5">1</span><span class="s2">    Leader: </span><span class="s5">111</span><span class="s2">     Replicas: </span><span class="s5">111</span><span class="s2">,</span><span class="s5">112</span><span class="s2">,</span><span class="s5">110</span><span class="s2">  Isr: </span><span class="s5">111</span><span class="s2">,</span><span class="s5">112</span><span class="s2">,</span><span class="s5">110</span><span class="s2">  </span></li><li class="li5"><span class="s8"></span><span class="s2">        Topic: test     Partition: </span><span class="s5">2</span><span class="s2">    Leader: </span><span class="s5">112</span><span class="s2">     Replicas: </span><span class="s5">112</span><span class="s2">,</span><span class="s5">110</span><span class="s2">,</span><span class="s5">111</span><span class="s2">  Isr: </span><span class="s5">112</span><span class="s2">,</span><span class="s5">110</span><span class="s2">,</span><span class="s5">111</span><span class="s2">  </span></li><li class="li6"><span class="s6">  </span></li><li class="li6"><span class="s6">  </span></li><li class="li5"><span class="s7"></span><span class="s5">6</span><span class="s2"> 去zk上看kafka集群  </span></li><li class="li5"><span class="s8"></span><span class="s2">[zk: localhost:</span><span class="s5">2181</span><span class="s2">(CONNECTED) </span><span class="s5">5</span><span class="s2">] ls /  </span></li><li class="li5"><span class="s8"></span><span class="s2">[admin, zookeeper, consumers, config, controller, zk-fifo, storm, brokers, controller_epoch]  </span></li><li class="li5"><span class="s8"></span><span class="s2">[zk: localhost:</span><span class="s5">2181</span><span class="s2">(CONNECTED) </span><span class="s5">6</span><span class="s2">] ls /brokers   ----&gt; 查看注册在zk内的kafka  </span></li><li class="li5"><span class="s8"></span><span class="s2">[topics, ids]  </span></li><li class="li5"><span class="s8"></span><span class="s2">[zk: localhost:</span><span class="s5">2181</span><span class="s2">(CONNECTED) </span><span class="s5">7</span><span class="s2">] ls /brokers/ids  </span></li><li class="li7"><span class="s8"></span><span class="s6">[</span><span class="s10">112</span><span class="s6">, </span><span class="s10">110</span><span class="s6">, </span><span class="s10">111</span><span class="s6">]  </span></li><li class="li5"><span class="s8"></span><span class="s2">[zk: localhost:</span><span class="s5">2181</span><span class="s2">(CONNECTED) </span><span class="s5">8</span><span class="s2">] ls /brokers/ids/</span><span class="s5">112</span><span class="s2">  </span></li><li class="li6"><span class="s6">[]  </span></li><li class="li5"><span class="s8"></span><span class="s2">[zk: localhost:</span><span class="s5">2181</span><span class="s2">(CONNECTED) </span><span class="s5">9</span><span class="s2">] ls /brokers/topics   </span></li><li class="li5"><span class="s8"></span><span class="s2">[test]  </span></li><li class="li5"><span class="s8"></span><span class="s2">[zk: localhost:</span><span class="s5">2181</span><span class="s2">(CONNECTED) </span><span class="s5">10</span><span class="s2">] ls /brokers/topics/test   </span></li><li class="li5"><span class="s8"></span><span class="s2">[partitions]  </span></li><li class="li5"><span class="s8"></span><span class="s2">[zk: localhost:</span><span class="s5">2181</span><span class="s2">(CONNECTED) </span><span class="s5">11</span><span class="s2">] ls /brokers/topics/test/partitions  </span></li><li class="li5"><span class="s8"></span><span class="s2">[</span><span class="s5">2</span><span class="s2">, </span><span class="s5">1</span><span class="s2">, </span><span class="s5">0</span><span class="s2">]  </span></li><li class="li5"><span class="s8"></span><span class="s2">[zk: localhost:</span><span class="s5">2181</span><span class="s2">(CONNECTED) </span><span class="s5">12</span><span class="s2">]   </span></li></ol><p class="p3"><span class="s2"> </span></p>
<p class="p8"><span class="s2"></span><br></p>
<p class="p3"><span class="s2"><strong>2  kafka java调用：</strong></span></p>
<p class="p3"><span class="s2"> </span></p>
<p class="p3"><span class="s2">2.1 java端生产数据， kafka集群消费数据：</span></p>
<p class="p3"><span class="s2"> </span></p>
<p class="p4"><span class="s2">Java代码  </span></p>
<ol class="ol1"><li class="li5"><span class="s4"></span><span class="s5">1</span><span class="s2"> 创建maven工程，pom.xml中增加如下：  </span></li><li class="li5"><span class="s8"></span><span class="s2"> &lt;dependency&gt;  </span></li><li class="li5"><span class="s8"></span><span class="s2">        &lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;  </span></li><li class="li5"><span class="s8"></span><span class="s2">        &lt;artifactId&gt;kafka_2.</span><span class="s5">10</span><span class="s2">&lt;/artifactId&gt;  </span></li><li class="li5"><span class="s8"></span><span class="s2">        &lt;version&gt;</span><span class="s5">0.8</span><span class="s2">.</span><span class="s5">2.0</span><span class="s2">&lt;/version&gt;  </span></li><li class="li5"><span class="s8"></span><span class="s2">    &lt;/dependency&gt;  </span></li><li class="li6"><span class="s6">  </span></li><li class="li6"><span class="s6">  </span></li><li class="li5"><span class="s7"></span><span class="s5">2</span><span class="s2"> java代码：  向主题test内写入数据  </span></li><li class="li6"><span class="s6">  </span></li><li class="li5"><span class="s11"></span><span class="s9">import</span><span class="s2"> java.util.Properties;  </span></li><li class="li5"><span class="s11"></span><span class="s9">import</span><span class="s2"> java.util.concurrent.TimeUnit;  </span></li><li class="li6"><span class="s6">  </span></li><li class="li5"><span class="s11"></span><span class="s9">import</span><span class="s2"> kafka.javaapi.producer.Producer;  </span></li><li class="li5"><span class="s11"></span><span class="s9">import</span><span class="s2"> kafka.producer.KeyedMessage;  </span></li><li class="li5"><span class="s11"></span><span class="s9">import</span><span class="s2"> kafka.producer.ProducerConfig;  </span></li><li class="li5"><span class="s11"></span><span class="s9">import</span><span class="s2"> kafka.serializer.StringEncoder;  </span></li><li class="li6"><span class="s6">  </span></li><li class="li6"><span class="s6">  </span></li><li class="li6"><span class="s6">  </span></li><li class="li6"><span class="s6">  </span></li><li class="li5"><span class="s11"></span><span class="s9">public</span><span class="s2"> </span><span class="s9">class</span><span class="s2"> kafkaProducer </span><span class="s9">extends</span><span class="s2"> Thread{  </span></li><li class="li6"><span class="s6">  </span></li><li class="li5"><span class="s8"></span><span class="s2">    </span><span class="s9">private</span><span class="s2"> String topic;  </span></li><li class="li5"><span class="s8"></span><span class="s2">      </span></li><li class="li5"><span class="s8"></span><span class="s2">    </span><span class="s9">public</span><span class="s2"> kafkaProducer(String topic){  </span></li><li class="li5"><span class="s8"></span><span class="s2">        </span><span class="s9">super</span><span class="s2">();  </span></li><li class="li5"><span class="s8"></span><span class="s2">        </span><span class="s9">this</span><span class="s2">.topic = topic;  </span></li><li class="li5"><span class="s8"></span><span class="s2">    }  </span></li><li class="li5"><span class="s8"></span><span class="s2">      </span></li><li class="li5"><span class="s8"></span><span class="s2">      </span></li><li class="li9"><span class="s8"></span><span class="s6">    </span><span class="s12">@Override</span><span class="s6">  </span></li><li class="li5"><span class="s8"></span><span class="s2">    </span><span class="s9">public</span><span class="s2"> </span><span class="s9">void</span><span class="s2"> run() {  </span></li><li class="li5"><span class="s8"></span><span class="s2">        Producer producer = createProducer();  </span></li><li class="li5"><span class="s8"></span><span class="s2">        </span><span class="s9">int</span><span class="s2"> i=</span><span class="s5">0</span><span class="s2">;  </span></li><li class="li5"><span class="s8"></span><span class="s2">        </span><span class="s9">while</span><span class="s2">(</span><span class="s9">true</span><span class="s2">){  </span></li><li class="li5"><span class="s8"></span><span class="s2">            producer.send(</span><span class="s9">new</span><span class="s2"> KeyedMessage&lt;Integer, String&gt;(topic, </span><span class="s13">"message: "</span><span class="s2"> + i++));  </span></li><li class="li5"><span class="s8"></span><span class="s2">            </span><span class="s9">try</span><span class="s2"> {  </span></li><li class="li5"><span class="s8"></span><span class="s2">                TimeUnit.SECONDS.sleep(</span><span class="s5">1</span><span class="s2">);  </span></li><li class="li5"><span class="s8"></span><span class="s2">            } </span><span class="s9">catch</span><span class="s2"> (InterruptedException e) {  </span></li><li class="li5"><span class="s8"></span><span class="s2">                e.printStackTrace();  </span></li><li class="li5"><span class="s8"></span><span class="s2">            }  </span></li><li class="li5"><span class="s8"></span><span class="s2">        }  </span></li><li class="li5"><span class="s8"></span><span class="s2">    }  </span></li><li class="li6"><span class="s6">  </span></li><li class="li5"><span class="s8"></span><span class="s2">    </span><span class="s9">private</span><span class="s2"> Producer createProducer() {  </span></li><li class="li5"><span class="s8"></span><span class="s2">        Properties properties = </span><span class="s9">new</span><span class="s2"> Properties();  </span></li><li class="li10"><span class="s14"></span><span class="s15">        properties.put(</span><span class="s2">"zookeeper.connect"</span><span class="s15">, </span><span class="s2">"192.168.1.110:2181,192.168.1.111:2181,192.168.1.112:2181"</span><span class="s15">);</span><span class="s16">//声明zk</span><span class="s15">  </span></li><li class="li5"><span class="s8"></span><span class="s2">        properties.put(</span><span class="s13">"serializer.class"</span><span class="s2">, StringEncoder.</span><span class="s9">class</span><span class="s2">.getName());  </span></li><li class="li10"><span class="s14"></span><span class="s15">        properties.put(</span><span class="s2">"metadata.broker.list"</span><span class="s15">, </span><span class="s2">"192.168.1.110:9092,192.168.1.111:9093,192.168.1.112:9094"</span><span class="s15">);</span><span class="s16">// 声明kafka broker</span><span class="s15">  </span></li><li class="li5"><span class="s8"></span><span class="s2">        </span><span class="s9">return</span><span class="s2"> </span><span class="s9">new</span><span class="s2"> Producer&lt;Integer, String&gt;(</span><span class="s9">new</span><span class="s2"> ProducerConfig(properties));  </span></li><li class="li5"><span class="s8"></span><span class="s2">     }  </span></li><li class="li5"><span class="s8"></span><span class="s2">      </span></li><li class="li5"><span class="s8"></span><span class="s2">      </span></li><li class="li5"><span class="s8"></span><span class="s2">    </span><span class="s9">public</span><span class="s2"> </span><span class="s9">static</span><span class="s2"> </span><span class="s9">void</span><span class="s2"> main(String[] args) {  </span></li><li class="li5"><span class="s8"></span><span class="s2">        </span><span class="s9">new</span><span class="s2"> kafkaProducer(</span><span class="s13">"test"</span><span class="s2">).start();</span><span class="s16">// 使用kafka集群中创建好的主题 test </span><span class="s2">  </span></li><li class="li5"><span class="s8"></span><span class="s2">          </span></li><li class="li5"><span class="s8"></span><span class="s2">    }  </span></li><li class="li5"><span class="s8"></span><span class="s2">       </span></li><li class="li6"><span class="s6">}  </span></li><li class="li6"><span class="s6">  </span></li><li class="li6"><span class="s6">  </span></li><li class="li6"><span class="s6">  </span></li><li class="li6"><span class="s6">  </span></li><li class="li5"><span class="s7"></span><span class="s5">3</span><span class="s2">  kafka集群中消费主题test的数据：  </span></li><li class="li5"><span class="s8"></span><span class="s2">[root</span><span class="s17">@h2master</span><span class="s2"> kafka]# bin/kafka-console-consumer.sh --zookeeper localhost:</span><span class="s5">2181</span><span class="s2"> --topic test --from-beginnin  </span></li><li class="li6"><span class="s6">  </span></li><li class="li5"><span class="s7"></span><span class="s5">4</span><span class="s2">   启动java代码，然后在看集群消费的数据如下：  </span></li><li class="li6"><span class="s6">  </span></li><li class="li5"><span class="s8"></span><span class="s2">message: </span><span class="s5">0</span><span class="s2">  </span></li><li class="li5"><span class="s8"></span><span class="s2">message: </span><span class="s5">1</span><span class="s2">  </span></li><li class="li5"><span class="s8"></span><span class="s2">message: </span><span class="s5">2</span><span class="s2">  </span></li><li class="li5"><span class="s8"></span><span class="s2">message: </span><span class="s5">3</span><span class="s2">  </span></li><li class="li5"><span class="s8"></span><span class="s2">message: </span><span class="s5">4</span><span class="s2">  </span></li><li class="li5"><span class="s8"></span><span class="s2">message: </span><span class="s5">5</span><span class="s2">  </span></li><li class="li5"><span class="s8"></span><span class="s2">message: </span><span class="s5">6</span><span class="s2">  </span></li><li class="li5"><span class="s8"></span><span class="s2">message: </span><span class="s5">7</span><span class="s2">  </span></li><li class="li5"><span class="s8"></span><span class="s2">message: </span><span class="s5">8</span><span class="s2">  </span></li><li class="li5"><span class="s8"></span><span class="s2">message: </span><span class="s5">9</span><span class="s2">  </span></li><li class="li5"><span class="s8"></span><span class="s2">message: </span><span class="s5">10</span><span class="s2">  </span></li><li class="li5"><span class="s8"></span><span class="s2">message: </span><span class="s5">11</span><span class="s2">  </span></li><li class="li5"><span class="s8"></span><span class="s2">message: </span><span class="s5">12</span><span class="s2">  </span></li><li class="li5"><span class="s8"></span><span class="s2">message: </span><span class="s5">13</span><span class="s2">  </span></li><li class="li5"><span class="s8"></span><span class="s2">message: </span><span class="s5">14</span><span class="s2">  </span></li><li class="li5"><span class="s8"></span><span class="s2">message: </span><span class="s5">15</span><span class="s2">  </span></li><li class="li5"><span class="s8"></span><span class="s2">message: </span><span class="s5">16</span><span class="s2">  </span></li><li class="li5"><span class="s8"></span><span class="s2">message: </span><span class="s5">17</span><span class="s2">  </span></li><li class="li5"><span class="s8"></span><span class="s2">message: </span><span class="s5">18</span><span class="s2">  </span></li><li class="li5"><span class="s8"></span><span class="s2">message: </span><span class="s5">19</span><span class="s2">  </span></li><li class="li5"><span class="s8"></span><span class="s2">message: </span><span class="s5">20</span><span class="s2">  </span></li><li class="li5"><span class="s8"></span><span class="s2">message: </span><span class="s5">21</span><span class="s2">  </span></li></ol><p class="p3"><span class="s2"> </span></p>
<p class="p3"><span class="s2"> 3 kafka 使用Java写消费者，这样 先运行kafkaProducer ，在运行kafkaConsumer，即可得到生产者的数据：</span></p>
<p class="p3"><span class="s2"> </span></p>
<p class="p4"><span class="s2">Java代码  </span></p>
<ol class="ol1"><li class="li5"><span class="s18"></span><span class="s9">import</span><span class="s2"> java.util.HashMap;  </span></li><li class="li5"><span class="s11"></span><span class="s9">import</span><span class="s2"> java.util.List;  </span></li><li class="li5"><span class="s11"></span><span class="s9">import</span><span class="s2"> java.util.Map;  </span></li><li class="li5"><span class="s11"></span><span class="s9">import</span><span class="s2"> java.util.Properties;  </span></li><li class="li6"><span class="s6">  </span></li><li class="li5"><span class="s11"></span><span class="s9">import</span><span class="s2"> kafka.consumer.Consumer;  </span></li><li class="li5"><span class="s11"></span><span class="s9">import</span><span class="s2"> kafka.consumer.ConsumerConfig;  </span></li><li class="li5"><span class="s11"></span><span class="s9">import</span><span class="s2"> kafka.consumer.ConsumerIterator;  </span></li><li class="li5"><span class="s11"></span><span class="s9">import</span><span class="s2"> kafka.consumer.KafkaStream;  </span></li><li class="li5"><span class="s11"></span><span class="s9">import</span><span class="s2"> kafka.javaapi.consumer.ConsumerConnector;  </span></li><li class="li6"><span class="s6">  </span></li><li class="li6"><span class="s6">  </span></li><li class="li6"><span class="s6">  </span></li><li class="li6"><span class="s6">  </span></li><li class="li11"><span class="s19">/**</span><span class="s15"> </span></li><li class="li12"><span class="s8"></span><span class="s2"> * 接收数据</span><span class="s15"> </span></li><li class="li12"><span class="s8"></span><span class="s2"> * 接收到: message: 10</span><span class="s15"> </span></li><li class="li12"><span class="s8"></span><span class="s2">接收到: message: 11</span><span class="s15"> </span></li><li class="li12"><span class="s8"></span><span class="s2">接收到: message: 12</span><span class="s15"> </span></li><li class="li12"><span class="s8"></span><span class="s2">接收到: message: 13</span><span class="s15"> </span></li><li class="li12"><span class="s8"></span><span class="s2">接收到: message: 14</span><span class="s15"> </span></li><li class="li12"><span class="s8"></span><span class="s2"> * @author zm</span><span class="s15"> </span></li><li class="li11"><span class="s19"> *</span><span class="s15"> </span></li><li class="li11"><span class="s19"> */</span><span class="s15">  </span></li><li class="li5"><span class="s11"></span><span class="s9">public</span><span class="s2"> </span><span class="s9">class</span><span class="s2"> kafkaConsumer </span><span class="s9">extends</span><span class="s2"> Thread{  </span></li><li class="li6"><span class="s6">  </span></li><li class="li5"><span class="s8"></span><span class="s2">    </span><span class="s9">private</span><span class="s2"> String topic;  </span></li><li class="li5"><span class="s8"></span><span class="s2">      </span></li><li class="li5"><span class="s8"></span><span class="s2">    </span><span class="s9">public</span><span class="s2"> kafkaConsumer(String topic){  </span></li><li class="li5"><span class="s8"></span><span class="s2">        </span><span class="s9">super</span><span class="s2">();  </span></li><li class="li5"><span class="s8"></span><span class="s2">        </span><span class="s9">this</span><span class="s2">.topic = topic;  </span></li><li class="li5"><span class="s8"></span><span class="s2">    }  </span></li><li class="li5"><span class="s8"></span><span class="s2">      </span></li><li class="li5"><span class="s8"></span><span class="s2">      </span></li><li class="li9"><span class="s8"></span><span class="s6">    </span><span class="s12">@Override</span><span class="s6">  </span></li><li class="li5"><span class="s8"></span><span class="s2">    </span><span class="s9">public</span><span class="s2"> </span><span class="s9">void</span><span class="s2"> run() {  </span></li><li class="li5"><span class="s8"></span><span class="s2">        ConsumerConnector consumer = createConsumer();  </span></li><li class="li5"><span class="s8"></span><span class="s2">        Map&lt;String, Integer&gt; topicCountMap = </span><span class="s9">new</span><span class="s2"> HashMap&lt;String, Integer&gt;();  </span></li><li class="li5"><span class="s8"></span><span class="s2">        topicCountMap.put(topic, </span><span class="s5">1</span><span class="s2">); </span><span class="s16">// 一次从主题中获取一个数据</span><span class="s2">  </span></li><li class="li5"><span class="s8"></span><span class="s2">         Map&lt;String, List&lt;KafkaStream&lt;</span><span class="s9">byte</span><span class="s2">[], </span><span class="s9">byte</span><span class="s2">[]&gt;&gt;&gt;  messageStreams = consumer.createMessageStreams(topicCountMap);  </span></li><li class="li5"><span class="s8"></span><span class="s2">         KafkaStream&lt;</span><span class="s9">byte</span><span class="s2">[], </span><span class="s9">byte</span><span class="s2">[]&gt; stream = messageStreams.get(topic).get(</span><span class="s5">0</span><span class="s2">);</span><span class="s16">// 获取每次接收到的这个数据</span><span class="s2">  </span></li><li class="li5"><span class="s8"></span><span class="s2">         ConsumerIterator&lt;</span><span class="s9">byte</span><span class="s2">[], </span><span class="s9">byte</span><span class="s2">[]&gt; iterator =  stream.iterator();  </span></li><li class="li5"><span class="s8"></span><span class="s2">         </span><span class="s9">while</span><span class="s2">(iterator.hasNext()){  </span></li><li class="li5"><span class="s8"></span><span class="s2">             String message = </span><span class="s9">new</span><span class="s2"> String(iterator.next().message());  </span></li><li class="li5"><span class="s8"></span><span class="s2">             System.out.println(</span><span class="s13">"接收到: "</span><span class="s2"> + message);  </span></li><li class="li5"><span class="s8"></span><span class="s2">         }  </span></li><li class="li5"><span class="s8"></span><span class="s2">    }  </span></li><li class="li6"><span class="s6">  </span></li><li class="li5"><span class="s8"></span><span class="s2">    </span><span class="s9">private</span><span class="s2"> ConsumerConnector createConsumer() {  </span></li><li class="li5"><span class="s8"></span><span class="s2">        Properties properties = </span><span class="s9">new</span><span class="s2"> Properties();  </span></li><li class="li10"><span class="s14"></span><span class="s15">        properties.put(</span><span class="s2">"zookeeper.connect"</span><span class="s15">, </span><span class="s2">"192.168.1.110:2181,192.168.1.111:2181,192.168.1.112:2181"</span><span class="s15">);</span><span class="s16">//声明zk</span><span class="s15">  </span></li><li class="li12"><span class="s14"></span><span class="s15">        properties.put(</span><span class="s13">"group.id"</span><span class="s15">, </span><span class="s13">"group1"</span><span class="s15">);</span><span class="s2">// 必须要使用别的组名称， 如果生产者和消费者都在同一组，则不能访问同一组内的topic数据</span><span class="s15">  </span></li><li class="li5"><span class="s8"></span><span class="s2">        </span><span class="s9">return</span><span class="s2"> Consumer.createJavaConsumerConnector(</span><span class="s9">new</span><span class="s2"> ConsumerConfig(properties));  </span></li><li class="li5"><span class="s8"></span><span class="s2">     }  </span></li><li class="li5"><span class="s8"></span><span class="s2">      </span></li><li class="li5"><span class="s8"></span><span class="s2">      </span></li><li class="li5"><span class="s8"></span><span class="s2">    </span><span class="s9">public</span><span class="s2"> </span><span class="s9">static</span><span class="s2"> </span><span class="s9">void</span><span class="s2"> main(String[] args) {  </span></li><li class="li5"><span class="s8"></span><span class="s2">        </span><span class="s9">new</span><span class="s2"> kafkaConsumer(</span><span class="s13">"test"</span><span class="s2">).start();</span><span class="s16">// 使用kafka集群中创建好的主题 test </span><span class="s2">  </span></li><li class="li5"><span class="s8"></span><span class="s2">          </span></li><li class="li5"><span class="s8"></span><span class="s2">    }  </span></li><li class="li5"><span class="s8"></span><span class="s2">       </span></li><li class="li6"><span class="s6">}  </span></li></ol><p class="p3"><span class="s2"> </span></p>
<p class="p3"><span class="s2"> </span></p>
<p class="p3"><span class="s2">代码见附件：</span></p>
            </div>
                </div>