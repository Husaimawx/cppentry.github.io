---
layout:     post
title:      Kafka （一） 概述
---
<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
								            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
						<div class="htmledit_views" id="content_views">
                
<p><span style="font-size:18px;">消息系统使用场景：</span></p>
<p><span style="font-size:12px;">解耦：各系统之间通过消息系统统一交换数据，无须了解彼此的存在</span></p>
<p><span style="font-size:12px;">冗余：部分消息系统具有消息持久化功能，可以避免消息处理前丢失</span></p>
<p><span style="font-size:12px;">扩展：消息系统是统一的数据接口，系统可独立扩展</span></p>
<p><span style="font-size:12px;">可恢复性：系统中部分组件失效并不会影响整个系统，它恢复后仍然可从消息系统中获取并且处理数据</span></p>
<p><span style="font-size:12px;">异步通信：在不需要立即处理请求的场景下，可以将请求放入消息系统，等不紧急时候再进行处理</span></p>
<p><span style="font-size:18px;"><br></span></p>
<p><span style="font-size:18px;">常用消息系统介绍：</span></p>
<p><span style="font-size:12px;">RabbitMQ：Erlang编写，支持多协议AMQP,XMPP,SMTP,STOMP。支持负载均衡，数据持久化。支持Peer-to-Peer和发布/订阅模式</span></p>
<p><span style="font-size:12px;">Redis：不仅为NoSQL数据库，同时支持MQ功能，可做轻量级队列服务使用。长消息(大于10kb)性能比RabbitMQ差</span></p>
<p><span style="font-size:12px;">ZeroMQ：轻量级，不需要单独的消息服务器或中间件，Peer-to-Peer。使用复杂度高</span></p>
<p><span style="font-size:12px;">ActiveMQ：JMS实现，Peer-to-Peer,支持持久化，XA事务</span></p>
<p><span style="font-size:12px;">Kafka/Jafka：高性能跨语言的分布式发布/订阅消息系统，数据持久化，全分布式，同时支持在线和离线处理</span></p>
<p><span style="font-size:12px;">MetaQ/RocketMQ: Java实现，发布/订阅消息系统，支持本地事务和XA分布式事务</span></p>
<p><span style="font-size:18px;"><br></span></p>
<p><span style="font-size:18px;">Kafka内容概述：</span></p>
<p>Apache Kafka是一个开源消息系统，有Scala完成；</p>
<p>kafka是一个分布式消息队列：生产者、消费者的功能。它提供了类似于JMS的特性，但是在设计实现上完全不同，此外它并不是JMS规范的实现；</p>
<p>kafka对消息保存时根据Topic进行归类，发送消息者称为Producer，消息接受者称为Consumer；kafka集群有多个kafka实例组成，每个实例成为broker；</p>
<p>无论是kafka集群，还是producer和consumer都依赖于zookeeper集群保存一些meta信息，以保证系统可用性</p>
<p><br></p>
<p><span style="font-size:18px;">优点：</span></p>
<p>1,高吞吐率：在廉价的商用机器上单机可支持每秒100万条消息的读写</p>
<p>2,消息持久化： 所有消息均被持久化到磁盘，无消息丢失，支持消息重放</p>
<p>3,完全分布式：Producer，Broker，Consumer均支持水平扩展</p>
<p>4,同时满足适应在线流处理和离线批处理</p>
<p><br></p>
<p><span style="font-size:18px;">核心组件：</span></p>
<p>Producer：生产者，发送消息的人</p>
<p>Consumer：消费者，消息接收的人</p>
<p>broker：kafka实例</p>
<p></p>
<p>Topic：</p>
<p>同一个Topic的消息可分布在一个或多个节点（Broker）上</p>
<p>一个Topic可以包含一个或多个Partition</p>
<p>每条消息仅属于一个Topic</p>
<p>Producer发布数据时，必须指定将数据发布到哪一个Topic上</p>
<p>Consumer订阅消息时，必须指定订阅哪个Topic的消息</p>
<p><br></p>
<p>Partition</p>
<p>一个Partition只分布于一个Broker上</p>
<p>一个Partition对应一个文件夹</p>
<p>一个Partition包含多个Segment</p>
<p>一个Segment对应一个文件</p>
<p>Segment由一个个不可变记录组成</p>
<p>记录只会被append到Segment中，不会被单独删除或修改</p>
<p>清除过期日志时，直接删除一个或者多个Segment</p>
<div><br></div>
<br><p><br></p>
<p><br></p>
<p><br></p>
<p><br></p>
            </div>
                </div>